
MainBoard-F767ZI_SD-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f4c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0801614c  0801614c  0002614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080166c4  080166c4  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  080166c4  080166c4  000266c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080166cc  080166cc  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080166cc  080166cc  000266cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080166d0  080166d0  000266d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080166d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009af0  200001f0  080168c0  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  20009ce0  080168c0  00039ce0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037f6d  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006b3f  00000000  00000000  00068187  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000026e0  00000000  00000000  0006ecc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023e0  00000000  00000000  000713a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b654  00000000  00000000  00073788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000270eb  00000000  00000000  0007eddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001127d0  00000000  00000000  000a5ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b8697  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a320  00000000  00000000  001b8714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	08016134 	.word	0x08016134

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	08016134 	.word	0x08016134

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	2b00      	cmp	r3, #0
 8000550:	db0b      	blt.n	800056a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f003 021f 	and.w	r2, r3, #31
 8000558:	4907      	ldr	r1, [pc, #28]	; (8000578 <__NVIC_EnableIRQ+0x38>)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	095b      	lsrs	r3, r3, #5
 8000560:	2001      	movs	r0, #1
 8000562:	fa00 f202 	lsl.w	r2, r0, r2
 8000566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	e000e100 	.word	0xe000e100

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 ff9b 	bl	80014ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f828 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f97c 	bl	8000884 <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 f954 	bl	8000838 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000590:	f000 f922 	bl	80007d8 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000594:	f000 f8c4 	bl	8000720 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 8000598:	f000 f8f8 	bl	800078c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800059c:	f009 fe08 	bl	800a1b0 <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005a0:	f000 f8b2 	bl	8000708 <MX_NVIC_Init>
  res = f_close(&SDFile);
  res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);*/
  //USB start
  //MX_USB_DEVICE_Init();
  // CAN Initialization
  CAN_Config();
 80005a4:	f000 fbc6 	bl	8000d34 <CAN_Config>
  HAL_CAN_Start(&hcan1);
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <main+0x4c>)
 80005aa:	f001 f9bd 	bl	8001928 <HAL_CAN_Start>
  //HAL_TIM_Base_Start_IT(&htim13);
  //HAL_TIM_Base_Start_IT(&htim14);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ae:	f011 fa51 	bl	8011a54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b2:	4a06      	ldr	r2, [pc, #24]	; (80005cc <main+0x50>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <main+0x54>)
 80005b8:	f011 fb00 	bl	8011bbc <osThreadNew>
 80005bc:	4602      	mov	r2, r0
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <main+0x58>)
 80005c0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005c2:	f011 fa9d 	bl	8011b00 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <main+0x4a>
 80005c8:	20007020 	.word	0x20007020
 80005cc:	08016208 	.word	0x08016208
 80005d0:	08000da1 	.word	0x08000da1
 80005d4:	20004c08 	.word	0x20004c08

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0b8      	sub	sp, #224	; 0xe0
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005e2:	2234      	movs	r2, #52	; 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f015 fce1 	bl	8015fae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2290      	movs	r2, #144	; 0x90
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f015 fcd2 	bl	8015fae <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800060a:	f003 fe9b 	bl	8004344 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <SystemClock_Config+0x124>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	4a3a      	ldr	r2, [pc, #232]	; (80006fc <SystemClock_Config+0x124>)
 8000614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000618:	6413      	str	r3, [r2, #64]	; 0x40
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <SystemClock_Config+0x124>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000626:	4b36      	ldr	r3, [pc, #216]	; (8000700 <SystemClock_Config+0x128>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a35      	ldr	r2, [pc, #212]	; (8000700 <SystemClock_Config+0x128>)
 800062c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	4b33      	ldr	r3, [pc, #204]	; (8000700 <SystemClock_Config+0x128>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063e:	2301      	movs	r3, #1
 8000640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000644:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065a:	2304      	movs	r3, #4
 800065c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000660:	23c0      	movs	r3, #192	; 0xc0
 8000662:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800066c:	2308      	movs	r3, #8
 800066e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fec4 	bl	8004404 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000682:	f000 fc59 	bl	8000f38 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000686:	f003 fe6d 	bl	8004364 <HAL_PWREx_EnableOverDrive>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000690:	f000 fc52 	bl	8000f38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006ba:	2106      	movs	r1, #6
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 f94f 	bl	8004960 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006c8:	f000 fc36 	bl	8000f38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC1
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <SystemClock_Config+0x12c>)
 80006ce:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	4618      	mov	r0, r3
 80006e6:	f004 fb65 	bl	8004db4 <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80006f0:	f000 fc22 	bl	8000f38 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	37e0      	adds	r7, #224	; 0xe0
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000
 8000704:	00a00100 	.word	0x00a00100

08000708 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2106      	movs	r1, #6
 8000710:	2014      	movs	r0, #20
 8000712:	f001 fe69 	bl	80023e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000716:	2014      	movs	r0, #20
 8000718:	f001 fe82 	bl	8002420 <HAL_NVIC_EnableIRQ>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_CAN1_Init+0x64>)
 8000726:	4a18      	ldr	r2, [pc, #96]	; (8000788 <MX_CAN1_Init+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_CAN1_Init+0x64>)
 800072c:	2204      	movs	r2, #4
 800072e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_CAN1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_CAN1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_CAN1_Init+0x64>)
 800073e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000742:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_CAN1_Init+0x64>)
 8000746:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800074a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_CAN1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_CAN1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_CAN1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_CAN1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = ENABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_CAN1_Init+0x64>)
 8000766:	2201      	movs	r2, #1
 8000768:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_CAN1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_CAN1_Init+0x64>)
 8000772:	f000 fef1 	bl	8001558 <HAL_CAN_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800077c:	f000 fbdc 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20007020 	.word	0x20007020
 8000788:	40006400 	.word	0x40006400

0800078c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <MX_SDMMC1_SD_Init+0x48>)
 8000794:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 7;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 80007b6:	2207      	movs	r2, #7
 80007b8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  // Is Redundant
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 80007bc:	f004 ff20 	bl	8005600 <HAL_SD_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_SDMMC1_SD_Init+0x3e>
  {
	  Error_Handler();
 80007c6:	f000 fbb7 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20004c8c 	.word	0x20004c8c
 80007d4:	40012c00 	.word	0x40012c00

080007d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART3_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART3_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART3_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART3_UART_Init+0x58>)
 800081c:	f006 ffe4 	bl	80077e8 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 fb87 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20004c0c 	.word	0x20004c0c
 8000834:	40004800 	.word	0x40004800

08000838 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_DMA_Init+0x48>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <MX_DMA_Init+0x48>)
 8000844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <MX_DMA_Init+0x48>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 7, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2107      	movs	r1, #7
 800085a:	203b      	movs	r0, #59	; 0x3b
 800085c:	f001 fdc4 	bl	80023e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000860:	203b      	movs	r0, #59	; 0x3b
 8000862:	f001 fddd 	bl	8002420 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 11, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210b      	movs	r1, #11
 800086a:	2045      	movs	r0, #69	; 0x45
 800086c:	f001 fdbc 	bl	80023e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000870:	2045      	movs	r0, #69	; 0x45
 8000872:	f001 fdd5 	bl	8002420 <HAL_NVIC_EnableIRQ>

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b78      	ldr	r3, [pc, #480]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a77      	ldr	r2, [pc, #476]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b75      	ldr	r3, [pc, #468]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	4b72      	ldr	r3, [pc, #456]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a71      	ldr	r2, [pc, #452]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b6f      	ldr	r3, [pc, #444]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b6c      	ldr	r3, [pc, #432]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a6b      	ldr	r2, [pc, #428]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b69      	ldr	r3, [pc, #420]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b66      	ldr	r3, [pc, #408]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a65      	ldr	r2, [pc, #404]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b63      	ldr	r3, [pc, #396]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	4b60      	ldr	r3, [pc, #384]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a5f      	ldr	r2, [pc, #380]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b5d      	ldr	r3, [pc, #372]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000912:	4b5a      	ldr	r3, [pc, #360]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a59      	ldr	r2, [pc, #356]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b57      	ldr	r3, [pc, #348]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8 
 800092a:	2200      	movs	r2, #0
 800092c:	f244 3181 	movw	r1, #17281	; 0x4381
 8000930:	4853      	ldr	r0, [pc, #332]	; (8000a80 <MX_GPIO_Init+0x1fc>)
 8000932:	f002 fae9 	bl	8002f08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2140      	movs	r1, #64	; 0x40
 800093a:	4852      	ldr	r0, [pc, #328]	; (8000a84 <MX_GPIO_Init+0x200>)
 800093c:	f002 fae4 	bl	8002f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000946:	4850      	ldr	r0, [pc, #320]	; (8000a88 <MX_GPIO_Init+0x204>)
 8000948:	f002 fade 	bl	8002f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000952:	4b4e      	ldr	r3, [pc, #312]	; (8000a8c <MX_GPIO_Init+0x208>)
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	484b      	ldr	r0, [pc, #300]	; (8000a90 <MX_GPIO_Init+0x20c>)
 8000962:	f002 f90f 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000966:	2332      	movs	r3, #50	; 0x32
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000976:	230b      	movs	r3, #11
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4843      	ldr	r0, [pc, #268]	; (8000a90 <MX_GPIO_Init+0x20c>)
 8000982:	f002 f8ff 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000986:	2386      	movs	r3, #134	; 0x86
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000996:	230b      	movs	r3, #11
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4839      	ldr	r0, [pc, #228]	; (8000a88 <MX_GPIO_Init+0x204>)
 80009a2:	f002 f8ef 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8 
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8 
 80009a6:	f244 3381 	movw	r3, #17281	; 0x4381
 80009aa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4830      	ldr	r0, [pc, #192]	; (8000a80 <MX_GPIO_Init+0x1fc>)
 80009c0:	f002 f8e0 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d6:	230b      	movs	r3, #11
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4827      	ldr	r0, [pc, #156]	; (8000a80 <MX_GPIO_Init+0x1fc>)
 80009e2:	f002 f8cf 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009e6:	2304      	movs	r3, #4
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ee:	2302      	movs	r3, #2
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4822      	ldr	r0, [pc, #136]	; (8000a84 <MX_GPIO_Init+0x200>)
 80009fa:	f002 f8c3 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009fe:	2340      	movs	r3, #64	; 0x40
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	481b      	ldr	r0, [pc, #108]	; (8000a84 <MX_GPIO_Init+0x200>)
 8000a16:	f002 f8b5 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4815      	ldr	r0, [pc, #84]	; (8000a84 <MX_GPIO_Init+0x200>)
 8000a2e:	f002 f8a9 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480f      	ldr	r0, [pc, #60]	; (8000a88 <MX_GPIO_Init+0x204>)
 8000a4c:	f002 f89a 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a62:	230b      	movs	r3, #11
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_GPIO_Init+0x200>)
 8000a6e:	f002 f889 	bl	8002b84 <HAL_GPIO_Init>

}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40021800 	.word	0x40021800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	10110000 	.word	0x10110000
 8000a90:	40020800 	.word	0x40020800

08000a94 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa2:	4823      	ldr	r0, [pc, #140]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000aa4:	f002 fa30 	bl	8002f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	4820      	ldr	r0, [pc, #128]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000aae:	f002 fa2b 	bl	8002f08 <HAL_GPIO_WritePin>
	if(HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0,&RxHeader,RxData) == HAL_OK){
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4820      	ldr	r0, [pc, #128]	; (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000aba:	f001 f854 	bl	8001b66 <HAL_CAN_GetRxMessage>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d101      	bne.n	8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		Get_Data();
 8000ac4:	f000 f844 	bl	8000b50 <Get_Data>
	}
	// Test if the buffer is full
	if(ind >= 32){
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b1f      	cmp	r3, #31
 8000ace:	d91f      	bls.n	8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
		// Move the acquired data to the writing buffer
		for(uint8_t i=0;i<32;i++){
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	e016      	b.n	8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
			SD_buffer[i] = buffer[i];
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	7bfa      	ldrb	r2, [r7, #15]
 8000ada:	491a      	ldr	r1, [pc, #104]	; (8000b44 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	4411      	add	r1, r2
 8000ae0:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000ae2:	011b      	lsls	r3, r3, #4
 8000ae4:	441a      	add	r2, r3
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	6814      	ldr	r4, [r2, #0]
 8000aea:	6850      	ldr	r0, [r2, #4]
 8000aec:	6891      	ldr	r1, [r2, #8]
 8000aee:	68d2      	ldr	r2, [r2, #12]
 8000af0:	601c      	str	r4, [r3, #0]
 8000af2:	6058      	str	r0, [r3, #4]
 8000af4:	6099      	str	r1, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
			wf = 1;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<32;i++){
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	3301      	adds	r3, #1
 8000b02:	73fb      	strb	r3, [r7, #15]
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	2b1f      	cmp	r3, #31
 8000b08:	d9e5      	bls.n	8000ad6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		}
		ind = 0;
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		// Stop the data request to write the buffer to the memory
		//HAL_TIM_Base_Stop_IT(&htim14);
		//HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b18:	f002 f9f6 	bl	8002f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2180      	movs	r1, #128	; 0x80
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b22:	f002 f9f1 	bl	8002f08 <HAL_GPIO_WritePin>
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40020400 	.word	0x40020400
 8000b34:	20007018 	.word	0x20007018
 8000b38:	200072c4 	.word	0x200072c4
 8000b3c:	20007020 	.word	0x20007020
 8000b40:	2000020c 	.word	0x2000020c
 8000b44:	200070c4 	.word	0x200070c4
 8000b48:	20005d30 	.word	0x20005d30
 8000b4c:	2000020e 	.word	0x2000020e

08000b50 <Get_Data>:

void Get_Data(){
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
	 *   | |       ID
	 *   | | _______________
	 * -|-|-|x|x|x|x|x|x|x|x|
	 *   9 8 7 6 5 4 3 2 1 0
	 */
	if((RxHeader.StdId>>8) == 0x00){
 8000b54:	4b73      	ldr	r3, [pc, #460]	; (8000d24 <Get_Data+0x1d4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d169      	bne.n	8000c32 <Get_Data+0xe2>
		buffer[ind].Header_H = ((uint8_t)RxHeader.StdId & 0x1F)<<1;
 8000b5e:	4b71      	ldr	r3, [pc, #452]	; (8000d24 <Get_Data+0x1d4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4a6f      	ldr	r2, [pc, #444]	; (8000d28 <Get_Data+0x1d8>)
 8000b6a:	7812      	ldrb	r2, [r2, #0]
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000b72:	b2d9      	uxtb	r1, r3
 8000b74:	4a6d      	ldr	r2, [pc, #436]	; (8000d2c <Get_Data+0x1dc>)
 8000b76:	0103      	lsls	r3, r0, #4
 8000b78:	4413      	add	r3, r2
 8000b7a:	460a      	mov	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_L = RxData[0];
 8000b7e:	4b6a      	ldr	r3, [pc, #424]	; (8000d28 <Get_Data+0x1d8>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	4b6a      	ldr	r3, [pc, #424]	; (8000d30 <Get_Data+0x1e0>)
 8000b86:	7819      	ldrb	r1, [r3, #0]
 8000b88:	4a68      	ldr	r2, [pc, #416]	; (8000d2c <Get_Data+0x1dc>)
 8000b8a:	0103      	lsls	r3, r0, #4
 8000b8c:	4413      	add	r3, r2
 8000b8e:	3302      	adds	r3, #2
 8000b90:	460a      	mov	r2, r1
 8000b92:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_M = RxData[1];
 8000b94:	4b64      	ldr	r3, [pc, #400]	; (8000d28 <Get_Data+0x1d8>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	4b65      	ldr	r3, [pc, #404]	; (8000d30 <Get_Data+0x1e0>)
 8000b9c:	7859      	ldrb	r1, [r3, #1]
 8000b9e:	4a63      	ldr	r2, [pc, #396]	; (8000d2c <Get_Data+0x1dc>)
 8000ba0:	0103      	lsls	r3, r0, #4
 8000ba2:	4413      	add	r3, r2
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	460a      	mov	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_H |= (RxData[2] & 0x01);
 8000baa:	4b5f      	ldr	r3, [pc, #380]	; (8000d28 <Get_Data+0x1d8>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	4a5f      	ldr	r2, [pc, #380]	; (8000d2c <Get_Data+0x1dc>)
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b25a      	sxtb	r2, r3
 8000bb8:	4b5d      	ldr	r3, [pc, #372]	; (8000d30 <Get_Data+0x1e0>)
 8000bba:	789b      	ldrb	r3, [r3, #2]
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b25a      	sxtb	r2, r3
 8000bc8:	4b57      	ldr	r3, [pc, #348]	; (8000d28 <Get_Data+0x1d8>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2d1      	uxtb	r1, r2
 8000bce:	4a57      	ldr	r2, [pc, #348]	; (8000d2c <Get_Data+0x1dc>)
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	4413      	add	r3, r2
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_L = RxData[4];
 8000bd8:	4b53      	ldr	r3, [pc, #332]	; (8000d28 <Get_Data+0x1d8>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	4b54      	ldr	r3, [pc, #336]	; (8000d30 <Get_Data+0x1e0>)
 8000be0:	7919      	ldrb	r1, [r3, #4]
 8000be2:	4a52      	ldr	r2, [pc, #328]	; (8000d2c <Get_Data+0x1dc>)
 8000be4:	0103      	lsls	r3, r0, #4
 8000be6:	4413      	add	r3, r2
 8000be8:	330a      	adds	r3, #10
 8000bea:	460a      	mov	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_H = RxData[5];
 8000bee:	4b4e      	ldr	r3, [pc, #312]	; (8000d28 <Get_Data+0x1d8>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	4b4e      	ldr	r3, [pc, #312]	; (8000d30 <Get_Data+0x1e0>)
 8000bf6:	7959      	ldrb	r1, [r3, #5]
 8000bf8:	4a4c      	ldr	r2, [pc, #304]	; (8000d2c <Get_Data+0x1dc>)
 8000bfa:	0103      	lsls	r3, r0, #4
 8000bfc:	4413      	add	r3, r2
 8000bfe:	3309      	adds	r3, #9
 8000c00:	460a      	mov	r2, r1
 8000c02:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_L = RxData[6];
 8000c04:	4b48      	ldr	r3, [pc, #288]	; (8000d28 <Get_Data+0x1d8>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <Get_Data+0x1e0>)
 8000c0c:	7999      	ldrb	r1, [r3, #6]
 8000c0e:	4a47      	ldr	r2, [pc, #284]	; (8000d2c <Get_Data+0x1dc>)
 8000c10:	0103      	lsls	r3, r0, #4
 8000c12:	4413      	add	r3, r2
 8000c14:	330a      	adds	r3, #10
 8000c16:	460a      	mov	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrY_H = RxData[7];
 8000c1a:	4b43      	ldr	r3, [pc, #268]	; (8000d28 <Get_Data+0x1d8>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	4b43      	ldr	r3, [pc, #268]	; (8000d30 <Get_Data+0x1e0>)
 8000c22:	79d9      	ldrb	r1, [r3, #7]
 8000c24:	4a41      	ldr	r2, [pc, #260]	; (8000d2c <Get_Data+0x1dc>)
 8000c26:	0103      	lsls	r3, r0, #4
 8000c28:	4413      	add	r3, r2
 8000c2a:	330b      	adds	r3, #11
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_H = RxData[5];
		buffer[ind].Temp_L = RxData[6];
		buffer[ind].Temp_H = RxData[7];
		ind++;
	}
}
 8000c30:	e072      	b.n	8000d18 <Get_Data+0x1c8>
	else if((RxHeader.StdId>>8) == 0x01){
 8000c32:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <Get_Data+0x1d4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d16d      	bne.n	8000d18 <Get_Data+0x1c8>
		buffer[ind].Header_H = ((uint8_t)RxHeader.StdId & 0x1F)<<1;
 8000c3c:	4b39      	ldr	r3, [pc, #228]	; (8000d24 <Get_Data+0x1d4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	4a38      	ldr	r2, [pc, #224]	; (8000d28 <Get_Data+0x1d8>)
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000c50:	b2d9      	uxtb	r1, r3
 8000c52:	4a36      	ldr	r2, [pc, #216]	; (8000d2c <Get_Data+0x1dc>)
 8000c54:	0103      	lsls	r3, r0, #4
 8000c56:	4413      	add	r3, r2
 8000c58:	460a      	mov	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccX_L = RxData[0];
 8000c5c:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <Get_Data+0x1d8>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <Get_Data+0x1e0>)
 8000c64:	7819      	ldrb	r1, [r3, #0]
 8000c66:	4a31      	ldr	r2, [pc, #196]	; (8000d2c <Get_Data+0x1dc>)
 8000c68:	0103      	lsls	r3, r0, #4
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	460a      	mov	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccX_H = RxData[1];
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <Get_Data+0x1d8>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <Get_Data+0x1e0>)
 8000c7a:	7859      	ldrb	r1, [r3, #1]
 8000c7c:	4a2b      	ldr	r2, [pc, #172]	; (8000d2c <Get_Data+0x1dc>)
 8000c7e:	0103      	lsls	r3, r0, #4
 8000c80:	4413      	add	r3, r2
 8000c82:	3303      	adds	r3, #3
 8000c84:	460a      	mov	r2, r1
 8000c86:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccY_L = RxData[2];
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <Get_Data+0x1d8>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <Get_Data+0x1e0>)
 8000c90:	7899      	ldrb	r1, [r3, #2]
 8000c92:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <Get_Data+0x1dc>)
 8000c94:	0103      	lsls	r3, r0, #4
 8000c96:	4413      	add	r3, r2
 8000c98:	3306      	adds	r3, #6
 8000c9a:	460a      	mov	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccY_H = RxData[3];
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <Get_Data+0x1d8>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <Get_Data+0x1e0>)
 8000ca6:	78d9      	ldrb	r1, [r3, #3]
 8000ca8:	4a20      	ldr	r2, [pc, #128]	; (8000d2c <Get_Data+0x1dc>)
 8000caa:	0103      	lsls	r3, r0, #4
 8000cac:	4413      	add	r3, r2
 8000cae:	3305      	adds	r3, #5
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_L = RxData[4];
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <Get_Data+0x1d8>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <Get_Data+0x1e0>)
 8000cbc:	7919      	ldrb	r1, [r3, #4]
 8000cbe:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <Get_Data+0x1dc>)
 8000cc0:	0103      	lsls	r3, r0, #4
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	460a      	mov	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_H = RxData[5];
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <Get_Data+0x1d8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <Get_Data+0x1e0>)
 8000cd2:	7959      	ldrb	r1, [r3, #5]
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <Get_Data+0x1dc>)
 8000cd6:	0103      	lsls	r3, r0, #4
 8000cd8:	4413      	add	r3, r2
 8000cda:	3307      	adds	r3, #7
 8000cdc:	460a      	mov	r2, r1
 8000cde:	701a      	strb	r2, [r3, #0]
		buffer[ind].Temp_L = RxData[6];
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <Get_Data+0x1d8>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <Get_Data+0x1e0>)
 8000ce8:	7999      	ldrb	r1, [r3, #6]
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <Get_Data+0x1dc>)
 8000cec:	0103      	lsls	r3, r0, #4
 8000cee:	4413      	add	r3, r2
 8000cf0:	330e      	adds	r3, #14
 8000cf2:	460a      	mov	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
		buffer[ind].Temp_H = RxData[7];
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <Get_Data+0x1d8>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <Get_Data+0x1e0>)
 8000cfe:	79d9      	ldrb	r1, [r3, #7]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <Get_Data+0x1dc>)
 8000d02:	0103      	lsls	r3, r0, #4
 8000d04:	4413      	add	r3, r2
 8000d06:	330d      	adds	r3, #13
 8000d08:	460a      	mov	r2, r1
 8000d0a:	701a      	strb	r2, [r3, #0]
		ind++;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <Get_Data+0x1d8>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <Get_Data+0x1d8>)
 8000d16:	701a      	strb	r2, [r3, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200072c4 	.word	0x200072c4
 8000d28:	2000020c 	.word	0x2000020c
 8000d2c:	20005d30 	.word	0x20005d30
 8000d30:	20007018 	.word	0x20007018

08000d34 <CAN_Config>:

void CAN_Config(void){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	TxHeader.StdId = 0x01;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <CAN_Config+0x60>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x01;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <CAN_Config+0x60>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <CAN_Config+0x60>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_EXT;
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <CAN_Config+0x60>)
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <CAN_Config+0x60>)
 8000d52:	2208      	movs	r2, #8
 8000d54:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <CAN_Config+0x60>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	751a      	strb	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <CAN_Config+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0x0;
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <CAN_Config+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <CAN_Config+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0;
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <CAN_Config+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <CAN_Config+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <CAN_Config+0x64>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <CAN_Config+0x64>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 8000d86:	4904      	ldr	r1, [pc, #16]	; (8000d98 <CAN_Config+0x64>)
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <CAN_Config+0x68>)
 8000d8a:	f000 fce1 	bl	8001750 <HAL_CAN_ConfigFilter>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000704c 	.word	0x2000704c
 8000d98:	20004be0 	.word	0x20004be0
 8000d9c:	20007020 	.word	0x20007020

08000da0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
	// Mount filesystem only one time
	if(flag == 0){
 8000da8:	4b3f      	ldr	r3, [pc, #252]	; (8000ea8 <StartDefaultTask+0x108>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d128      	bne.n	8000e02 <StartDefaultTask+0x62>


		res = f_mount(&SDFatFs, SDPath, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	493e      	ldr	r1, [pc, #248]	; (8000eac <StartDefaultTask+0x10c>)
 8000db4:	483e      	ldr	r0, [pc, #248]	; (8000eb0 <StartDefaultTask+0x110>)
 8000db6:	f00f fe09 	bl	80109cc <f_mount>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b3d      	ldr	r3, [pc, #244]	; (8000eb4 <StartDefaultTask+0x114>)
 8000dc0:	701a      	strb	r2, [r3, #0]
		res = f_open(&SDFile, &path[0], FA_CREATE_ALWAYS);
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	493c      	ldr	r1, [pc, #240]	; (8000eb8 <StartDefaultTask+0x118>)
 8000dc6:	483d      	ldr	r0, [pc, #244]	; (8000ebc <StartDefaultTask+0x11c>)
 8000dc8:	f00f fe64 	bl	8010a94 <f_open>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <StartDefaultTask+0x114>)
 8000dd2:	701a      	strb	r2, [r3, #0]
		res = f_close(&SDFile);
 8000dd4:	4839      	ldr	r0, [pc, #228]	; (8000ebc <StartDefaultTask+0x11c>)
 8000dd6:	f010 fc85 	bl	80116e4 <f_close>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b35      	ldr	r3, [pc, #212]	; (8000eb4 <StartDefaultTask+0x114>)
 8000de0:	701a      	strb	r2, [r3, #0]
		res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);
 8000de2:	2232      	movs	r2, #50	; 0x32
 8000de4:	4934      	ldr	r1, [pc, #208]	; (8000eb8 <StartDefaultTask+0x118>)
 8000de6:	4835      	ldr	r0, [pc, #212]	; (8000ebc <StartDefaultTask+0x11c>)
 8000de8:	f00f fe54 	bl	8010a94 <f_open>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <StartDefaultTask+0x114>)
 8000df2:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8000df4:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <StartDefaultTask+0x108>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]


		// Start 5mS timer to trigger the data request
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	4830      	ldr	r0, [pc, #192]	; (8000ec0 <StartDefaultTask+0x120>)
 8000dfe:	f000 ffc4 	bl	8001d8a <HAL_CAN_ActivateNotification>
		//HAL_TIM_Base_Start_IT(&htim14);
	}
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e06:	482f      	ldr	r0, [pc, #188]	; (8000ec4 <StartDefaultTask+0x124>)
 8000e08:	f002 f866 	bl	8002ed8 <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d121      	bne.n	8000e56 <StartDefaultTask+0xb6>
		HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e12:	2102      	movs	r1, #2
 8000e14:	482a      	ldr	r0, [pc, #168]	; (8000ec0 <StartDefaultTask+0x120>)
 8000e16:	f000 ffde 	bl	8001dd6 <HAL_CAN_DeactivateNotification>
		//HAL_TIM_Base_Stop_IT(&htim14);
		res = f_close(&SDFile);
 8000e1a:	4828      	ldr	r0, [pc, #160]	; (8000ebc <StartDefaultTask+0x11c>)
 8000e1c:	f010 fc62 	bl	80116e4 <f_close>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <StartDefaultTask+0x114>)
 8000e26:	701a      	strb	r2, [r3, #0]
		res = f_mount(NULL, SDPath, 1);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4920      	ldr	r1, [pc, #128]	; (8000eac <StartDefaultTask+0x10c>)
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f00f fdcd 	bl	80109cc <f_mount>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <StartDefaultTask+0x114>)
 8000e38:	701a      	strb	r2, [r3, #0]
		//NVIC_DisableIRQ(OTG_FS_IRQn);


		osDelay(10);
 8000e3a:	200a      	movs	r0, #10
 8000e3c:	f010 ff64 	bl	8011d08 <osDelay>
		MX_USB_DEVICE_Init();
 8000e40:	f014 fb24 	bl	801548c <MX_USB_DEVICE_Init>
		NVIC_EnableIRQ(OTG_FS_IRQn);
 8000e44:	2043      	movs	r0, #67	; 0x43
 8000e46:	f7ff fb7b 	bl	8000540 <__NVIC_EnableIRQ>

		//vPortEndScheduler();
		//NVIC_EnableIRQ(OTG_FS_IRQn);
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	481e      	ldr	r0, [pc, #120]	; (8000ec8 <StartDefaultTask+0x128>)
 8000e50:	f002 f85a 	bl	8002f08 <HAL_GPIO_WritePin>
 8000e54:	e7d5      	b.n	8000e02 <StartDefaultTask+0x62>
	}
	else{
		// Test if the data is ready to be written
		if(wf != 0){
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <StartDefaultTask+0x12c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0d1      	beq.n	8000e02 <StartDefaultTask+0x62>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e64:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <StartDefaultTask+0x128>)
 8000e66:	f002 f84f 	bl	8002f08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <StartDefaultTask+0x128>)
 8000e70:	f002 f84a 	bl	8002f08 <HAL_GPIO_WritePin>
			// Write the buffer to the memory
			res = f_write(&SDFile, SD_buffer, sizeof(SD_buffer), &writeBuff);
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <StartDefaultTask+0x130>)
 8000e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7a:	4916      	ldr	r1, [pc, #88]	; (8000ed4 <StartDefaultTask+0x134>)
 8000e7c:	480f      	ldr	r0, [pc, #60]	; (8000ebc <StartDefaultTask+0x11c>)
 8000e7e:	f010 f8e5 	bl	801104c <f_write>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <StartDefaultTask+0x114>)
 8000e88:	701a      	strb	r2, [r3, #0]
			wf = 0;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <StartDefaultTask+0x12c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e96:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <StartDefaultTask+0x128>)
 8000e98:	f002 f836 	bl	8002f08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <StartDefaultTask+0x128>)
 8000ea2:	f002 f831 	bl	8002f08 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000ea6:	e7ac      	b.n	8000e02 <StartDefaultTask+0x62>
 8000ea8:	2000020d 	.word	0x2000020d
 8000eac:	2000732c 	.word	0x2000732c
 8000eb0:	20005f30 	.word	0x20005f30
 8000eb4:	20007048 	.word	0x20007048
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20007330 	.word	0x20007330
 8000ec0:	20007020 	.word	0x20007020
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	2000020e 	.word	0x2000020e
 8000ed0:	200072e0 	.word	0x200072e0
 8000ed4:	200070c4 	.word	0x200070c4

08000ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d101      	bne.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eea:	f000 faf3 	bl	80014d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM14) {
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d10f      	bne.n	8000f18 <HAL_TIM_PeriodElapsedCallback+0x40>
	  // Send a Data request
	  TxData[0] = 0x01;
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
	  if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox) == HAL_OK){
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f00:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f02:	490b      	ldr	r1, [pc, #44]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f06:	f000 fd53 	bl	80019b0 <HAL_CAN_AddTxMessage>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d103      	bne.n	8000f18 <HAL_TIM_PeriodElapsedCallback+0x40>
		  // Listen can bus interrupt
		  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f10:	2102      	movs	r1, #2
 8000f12:	4808      	ldr	r0, [pc, #32]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f14:	f000 ff39 	bl	8001d8a <HAL_CAN_ActivateNotification>
	  }
  }
  /* USER CODE END Callback 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40001000 	.word	0x40001000
 8000f24:	40002000 	.word	0x40002000
 8000f28:	20006f70 	.word	0x20006f70
 8000f2c:	20006f78 	.word	0x20006f78
 8000f30:	2000704c 	.word	0x2000704c
 8000f34:	20007020 	.word	0x20007020

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f40:	4803      	ldr	r0, [pc, #12]	; (8000f50 <Error_Handler+0x18>)
 8000f42:	f001 fffa 	bl	8002f3a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000f46:	2064      	movs	r0, #100	; 0x64
 8000f48:	f000 fae4 	bl	8001514 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f4c:	e7f6      	b.n	8000f3c <Error_Handler+0x4>
 8000f4e:	bf00      	nop
 8000f50:	40020400 	.word	0x40020400

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	210f      	movs	r1, #15
 8000f8e:	f06f 0001 	mvn.w	r0, #1
 8000f92:	f001 fa29 	bl	80023e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_CAN_MspInit+0x7c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d127      	bne.n	8001016 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_CAN_MspInit+0x80>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a16      	ldr	r2, [pc, #88]	; (8001024 <HAL_CAN_MspInit+0x80>)
 8000fcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_CAN_MspInit+0x80>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_CAN_MspInit+0x80>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_CAN_MspInit+0x80>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_CAN_MspInit+0x80>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001006:	2309      	movs	r3, #9
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_CAN_MspInit+0x84>)
 8001012:	f001 fdb7 	bl	8002b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40006400 	.word	0x40006400
 8001024:	40023800 	.word	0x40023800
 8001028:	40020c00 	.word	0x40020c00

0800102c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a65      	ldr	r2, [pc, #404]	; (80011e0 <HAL_SD_MspInit+0x1b4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	f040 80c3 	bne.w	80011d6 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001050:	4b64      	ldr	r3, [pc, #400]	; (80011e4 <HAL_SD_MspInit+0x1b8>)
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	4a63      	ldr	r2, [pc, #396]	; (80011e4 <HAL_SD_MspInit+0x1b8>)
 8001056:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800105a:	6453      	str	r3, [r2, #68]	; 0x44
 800105c:	4b61      	ldr	r3, [pc, #388]	; (80011e4 <HAL_SD_MspInit+0x1b8>)
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001068:	4b5e      	ldr	r3, [pc, #376]	; (80011e4 <HAL_SD_MspInit+0x1b8>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a5d      	ldr	r2, [pc, #372]	; (80011e4 <HAL_SD_MspInit+0x1b8>)
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
 8001074:	4b5b      	ldr	r3, [pc, #364]	; (80011e4 <HAL_SD_MspInit+0x1b8>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001080:	4b58      	ldr	r3, [pc, #352]	; (80011e4 <HAL_SD_MspInit+0x1b8>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	4a57      	ldr	r2, [pc, #348]	; (80011e4 <HAL_SD_MspInit+0x1b8>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6313      	str	r3, [r2, #48]	; 0x30
 800108c:	4b55      	ldr	r3, [pc, #340]	; (80011e4 <HAL_SD_MspInit+0x1b8>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001098:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800109c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010aa:	230c      	movs	r3, #12
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	484c      	ldr	r0, [pc, #304]	; (80011e8 <HAL_SD_MspInit+0x1bc>)
 80010b6:	f001 fd65 	bl	8002b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ba:	2304      	movs	r3, #4
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010ca:	230c      	movs	r3, #12
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4845      	ldr	r0, [pc, #276]	; (80011ec <HAL_SD_MspInit+0x1c0>)
 80010d6:	f001 fd55 	bl	8002b84 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80010da:	4b45      	ldr	r3, [pc, #276]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 80010dc:	4a45      	ldr	r2, [pc, #276]	; (80011f4 <HAL_SD_MspInit+0x1c8>)
 80010de:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80010e0:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 80010e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010e6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e8:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 80010ea:	2240      	movs	r2, #64	; 0x40
 80010ec:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ee:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010f4:	4b3e      	ldr	r3, [pc, #248]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 80010f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fa:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010fc:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 80010fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001102:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 8001106:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800110c:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 800110e:	2220      	movs	r2, #32
 8001110:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001112:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001118:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 800111a:	2204      	movs	r2, #4
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800111e:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 8001120:	2203      	movs	r2, #3
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001124:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 8001126:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800112c:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 800112e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001132:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001134:	482e      	ldr	r0, [pc, #184]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 8001136:	f001 f981 	bl	800243c <HAL_DMA_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8001140:	f7ff fefa 	bl	8000f38 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a2a      	ldr	r2, [pc, #168]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 8001148:	63da      	str	r2, [r3, #60]	; 0x3c
 800114a:	4a29      	ldr	r2, [pc, #164]	; (80011f0 <HAL_SD_MspInit+0x1c4>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 8001152:	4a2a      	ldr	r2, [pc, #168]	; (80011fc <HAL_SD_MspInit+0x1d0>)
 8001154:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 8001158:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800115c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 800116c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001170:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 8001174:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001178:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 800117c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001180:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 8001184:	2220      	movs	r2, #32
 8001186:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 8001190:	2204      	movs	r2, #4
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 8001196:	2203      	movs	r2, #3
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 800119c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 80011a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80011aa:	4813      	ldr	r0, [pc, #76]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 80011ac:	f001 f946 	bl	800243c <HAL_DMA_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80011b6:	f7ff febf 	bl	8000f38 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <HAL_SD_MspInit+0x1cc>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 8, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2108      	movs	r1, #8
 80011ca:	2031      	movs	r0, #49	; 0x31
 80011cc:	f001 f90c 	bl	80023e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80011d0:	2031      	movs	r0, #49	; 0x31
 80011d2:	f001 f925 	bl	8002420 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40012c00 	.word	0x40012c00
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	20007064 	.word	0x20007064
 80011f4:	40026458 	.word	0x40026458
 80011f8:	20006f98 	.word	0x20006f98
 80011fc:	400264a0 	.word	0x400264a0

08001200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a17      	ldr	r2, [pc, #92]	; (800127c <HAL_UART_MspInit+0x7c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d128      	bne.n	8001274 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_UART_MspInit+0x80>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a16      	ldr	r2, [pc, #88]	; (8001280 <HAL_UART_MspInit+0x80>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_UART_MspInit+0x80>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_UART_MspInit+0x80>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a10      	ldr	r2, [pc, #64]	; (8001280 <HAL_UART_MspInit+0x80>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_UART_MspInit+0x80>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001264:	2307      	movs	r3, #7
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_UART_MspInit+0x84>)
 8001270:	f001 fc88 	bl	8002b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40004800 	.word	0x40004800
 8001280:	40023800 	.word	0x40023800
 8001284:	40020c00 	.word	0x40020c00

08001288 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	2036      	movs	r0, #54	; 0x36
 800129e:	f001 f8a3 	bl	80023e8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80012a2:	2036      	movs	r0, #54	; 0x36
 80012a4:	f001 f8bc 	bl	8002420 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <HAL_InitTick+0xa0>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	4a1e      	ldr	r2, [pc, #120]	; (8001328 <HAL_InitTick+0xa0>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	6413      	str	r3, [r2, #64]	; 0x40
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <HAL_InitTick+0xa0>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012c0:	f107 0210 	add.w	r2, r7, #16
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 fd40 	bl	8004d50 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80012d0:	f003 fd16 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 80012d4:	4603      	mov	r3, r0
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_InitTick+0xa4>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	0c9b      	lsrs	r3, r3, #18
 80012e4:	3b01      	subs	r3, #1
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_InitTick+0xa8>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <HAL_InitTick+0xac>)
 80012ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HAL_InitTick+0xa8>)
 80012f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_InitTick+0xa8>)
 80012f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_InitTick+0xa8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_InitTick+0xa8>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <HAL_InitTick+0xa8>)
 800130a:	f006 f807 	bl	800731c <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d104      	bne.n	800131e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001314:	4806      	ldr	r0, [pc, #24]	; (8001330 <HAL_InitTick+0xa8>)
 8001316:	f006 f837 	bl	8007388 <HAL_TIM_Base_Start_IT>
 800131a:	4603      	mov	r3, r0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3730      	adds	r7, #48	; 0x30
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	431bde83 	.word	0x431bde83
 8001330:	200072e4 	.word	0x200072e4
 8001334:	40001000 	.word	0x40001000

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <CAN1_RX0_IRQHandler+0x10>)
 8001372:	f000 fd57 	bl	8001e24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20007020 	.word	0x20007020

08001380 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <SDMMC1_IRQHandler+0x10>)
 8001386:	f004 ff45 	bl	8006214 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20004c8c 	.word	0x20004c8c

08001394 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <TIM6_DAC_IRQHandler+0x10>)
 800139a:	f006 f81f 	bl	80073dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200072e4 	.word	0x200072e4

080013a8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <DMA2_Stream3_IRQHandler+0x10>)
 80013ae:	f001 f975 	bl	800269c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20007064 	.word	0x20007064

080013bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <OTG_FS_IRQHandler+0x10>)
 80013c2:	f001 ff1a 	bl	80031fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200098d8 	.word	0x200098d8

080013d0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <DMA2_Stream6_IRQHandler+0x10>)
 80013d6:	f001 f961 	bl	800269c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20006f98 	.word	0x20006f98

080013e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <_sbrk+0x50>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x16>
		heap_end = &end;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <_sbrk+0x50>)
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <_sbrk+0x54>)
 80013f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <_sbrk+0x50>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <_sbrk+0x50>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	466a      	mov	r2, sp
 800140a:	4293      	cmp	r3, r2
 800140c:	d907      	bls.n	800141e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800140e:	f014 fd89 	bl	8015f24 <__errno>
 8001412:	4602      	mov	r2, r0
 8001414:	230c      	movs	r3, #12
 8001416:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
 800141c:	e006      	b.n	800142c <_sbrk+0x48>
	}

	heap_end += incr;
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <_sbrk+0x50>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a03      	ldr	r2, [pc, #12]	; (8001434 <_sbrk+0x50>)
 8001428:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000210 	.word	0x20000210
 8001438:	20009ce0 	.word	0x20009ce0

0800143c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <SystemInit+0x28>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001446:	4a07      	ldr	r2, [pc, #28]	; (8001464 <SystemInit+0x28>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <SystemInit+0x28>)
 8001452:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001456:	609a      	str	r2, [r3, #8]
#endif
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800146c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800146e:	e003      	b.n	8001478 <LoopCopyDataInit>

08001470 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001472:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001474:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001476:	3104      	adds	r1, #4

08001478 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001478:	480b      	ldr	r0, [pc, #44]	; (80014a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800147c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800147e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001480:	d3f6      	bcc.n	8001470 <CopyDataInit>
  ldr  r2, =_sbss
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001484:	e002      	b.n	800148c <LoopFillZerobss>

08001486 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001486:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001488:	f842 3b04 	str.w	r3, [r2], #4

0800148c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800148e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001490:	d3f9      	bcc.n	8001486 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001492:	f7ff ffd3 	bl	800143c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f014 fd4b 	bl	8015f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149a:	f7ff f86f 	bl	800057c <main>
  bx  lr    
 800149e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014a0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80014a4:	080166d4 	.word	0x080166d4
  ldr  r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014ac:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80014b0:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 80014b4:	20009ce0 	.word	0x20009ce0

080014b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>

080014ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014be:	2003      	movs	r0, #3
 80014c0:	f000 ff87 	bl	80023d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fedf 	bl	8001288 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80014ca:	f7ff fd43 	bl	8000f54 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x20>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x24>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_IncTick+0x24>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000018 	.word	0x20000018
 80014f8:	20007324 	.word	0x20007324

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20007324 	.word	0x20007324

08001514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff ffee 	bl	80014fc <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d005      	beq.n	800153a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_Delay+0x40>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800153a:	bf00      	nop
 800153c:	f7ff ffde 	bl	80014fc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8f7      	bhi.n	800153c <HAL_Delay+0x28>
  {
  }
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000018 	.word	0x20000018

08001558 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0ed      	b.n	8001746 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fd14 	bl	8000fa4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0202 	bic.w	r2, r2, #2
 800158a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800158c:	f7ff ffb6 	bl	80014fc <HAL_GetTick>
 8001590:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001592:	e012      	b.n	80015ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001594:	f7ff ffb2 	bl	80014fc <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b0a      	cmp	r3, #10
 80015a0:	d90b      	bls.n	80015ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2205      	movs	r2, #5
 80015b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0c5      	b.n	8001746 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1e5      	bne.n	8001594 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d8:	f7ff ff90 	bl	80014fc <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015de:	e012      	b.n	8001606 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015e0:	f7ff ff8c 	bl	80014fc <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b0a      	cmp	r3, #10
 80015ec:	d90b      	bls.n	8001606 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2205      	movs	r2, #5
 80015fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e09f      	b.n	8001746 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0e5      	beq.n	80015e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7e1b      	ldrb	r3, [r3, #24]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d108      	bne.n	800162e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	e007      	b.n	800163e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7e5b      	ldrb	r3, [r3, #25]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d108      	bne.n	8001658 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	e007      	b.n	8001668 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001666:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7e9b      	ldrb	r3, [r3, #26]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d108      	bne.n	8001682 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0220 	orr.w	r2, r2, #32
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e007      	b.n	8001692 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0220 	bic.w	r2, r2, #32
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7edb      	ldrb	r3, [r3, #27]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d108      	bne.n	80016ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0210 	bic.w	r2, r2, #16
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e007      	b.n	80016bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0210 	orr.w	r2, r2, #16
 80016ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7f1b      	ldrb	r3, [r3, #28]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d108      	bne.n	80016d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0208 	orr.w	r2, r2, #8
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	e007      	b.n	80016e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0208 	bic.w	r2, r2, #8
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7f5b      	ldrb	r3, [r3, #29]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d108      	bne.n	8001700 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0204 	orr.w	r2, r2, #4
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e007      	b.n	8001710 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0204 	bic.w	r2, r2, #4
 800170e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	ea42 0103 	orr.w	r1, r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	1e5a      	subs	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001766:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001768:	7cfb      	ldrb	r3, [r7, #19]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d003      	beq.n	8001776 <HAL_CAN_ConfigFilter+0x26>
 800176e:	7cfb      	ldrb	r3, [r7, #19]
 8001770:	2b02      	cmp	r3, #2
 8001772:	f040 80c7 	bne.w	8001904 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a69      	ldr	r2, [pc, #420]	; (8001920 <HAL_CAN_ConfigFilter+0x1d0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d001      	beq.n	8001784 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_CAN_ConfigFilter+0x1d4>)
 8001782:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	4a63      	ldr	r2, [pc, #396]	; (8001924 <HAL_CAN_ConfigFilter+0x1d4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d111      	bne.n	80017c0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017a2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	431a      	orrs	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	2201      	movs	r2, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d123      	bne.n	8001832 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	401a      	ands	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800180c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3248      	adds	r2, #72	; 0x48
 8001812:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001826:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001828:	6979      	ldr	r1, [r7, #20]
 800182a:	3348      	adds	r3, #72	; 0x48
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d122      	bne.n	8001880 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	431a      	orrs	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800185a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3248      	adds	r2, #72	; 0x48
 8001860:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001874:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001876:	6979      	ldr	r1, [r7, #20]
 8001878:	3348      	adds	r3, #72	; 0x48
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43db      	mvns	r3, r3
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800189a:	e007      	b.n	80018ac <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018c6:	e007      	b.n	80018d8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d107      	bne.n	80018f0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018f6:	f023 0201 	bic.w	r2, r3, #1
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e006      	b.n	8001912 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
  }
}
 8001912:	4618      	mov	r0, r3
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40003400 	.word	0x40003400
 8001924:	40006400 	.word	0x40006400

08001928 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d12e      	bne.n	800199a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2202      	movs	r2, #2
 8001940:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001954:	f7ff fdd2 	bl	80014fc <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800195a:	e012      	b.n	8001982 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800195c:	f7ff fdce 	bl	80014fc <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b0a      	cmp	r3, #10
 8001968:	d90b      	bls.n	8001982 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2205      	movs	r2, #5
 800197a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e012      	b.n	80019a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e5      	bne.n	800195c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	e006      	b.n	80019a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
  }
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ce:	7ffb      	ldrb	r3, [r7, #31]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d003      	beq.n	80019dc <HAL_CAN_AddTxMessage+0x2c>
 80019d4:	7ffb      	ldrb	r3, [r7, #31]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	f040 80b8 	bne.w	8001b4c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d105      	bne.n	80019fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80a0 	beq.w	8001b3c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	0e1b      	lsrs	r3, r3, #24
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d907      	bls.n	8001a1c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e09e      	b.n	8001b5a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	409a      	lsls	r2, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a38:	68f9      	ldr	r1, [r7, #12]
 8001a3a:	6809      	ldr	r1, [r1, #0]
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3318      	adds	r3, #24
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	440b      	add	r3, r1
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e00f      	b.n	8001a6a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a54:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a5e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3318      	adds	r3, #24
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	440b      	add	r3, r1
 8001a68:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6819      	ldr	r1, [r3, #0]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3318      	adds	r3, #24
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	440b      	add	r3, r1
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	7d1b      	ldrb	r3, [r3, #20]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d111      	bne.n	8001aaa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3318      	adds	r3, #24
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	4413      	add	r3, r2
 8001a92:	3304      	adds	r3, #4
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	6811      	ldr	r1, [r2, #0]
 8001a9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3318      	adds	r3, #24
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3307      	adds	r3, #7
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	061a      	lsls	r2, r3, #24
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3306      	adds	r3, #6
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	041b      	lsls	r3, r3, #16
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3305      	adds	r3, #5
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	3204      	adds	r2, #4
 8001aca:	7812      	ldrb	r2, [r2, #0]
 8001acc:	4610      	mov	r0, r2
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	6811      	ldr	r1, [r2, #0]
 8001ad2:	ea43 0200 	orr.w	r2, r3, r0
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	440b      	add	r3, r1
 8001adc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001ae0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3303      	adds	r3, #3
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	061a      	lsls	r2, r3, #24
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3302      	adds	r3, #2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3301      	adds	r3, #1
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	4313      	orrs	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	7812      	ldrb	r2, [r2, #0]
 8001b02:	4610      	mov	r0, r2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	6811      	ldr	r1, [r2, #0]
 8001b08:	ea43 0200 	orr.w	r2, r3, r0
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	440b      	add	r3, r1
 8001b12:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b16:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3318      	adds	r3, #24
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	4413      	add	r3, r2
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	6811      	ldr	r1, [r2, #0]
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3318      	adds	r3, #24
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	440b      	add	r3, r1
 8001b36:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e00e      	b.n	8001b5a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e006      	b.n	8001b5a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
  }
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	; 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b66:	b480      	push	{r7}
 8001b68:	b087      	sub	sp, #28
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d003      	beq.n	8001b8a <HAL_CAN_GetRxMessage+0x24>
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	f040 80f3 	bne.w	8001d70 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10e      	bne.n	8001bae <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d116      	bne.n	8001bcc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0e7      	b.n	8001d7e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0d8      	b.n	8001d7e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	331b      	adds	r3, #27
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4413      	add	r3, r2
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0204 	and.w	r2, r3, #4
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	331b      	adds	r3, #27
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0d5b      	lsrs	r3, r3, #21
 8001bfa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e00b      	b.n	8001c1c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	331b      	adds	r3, #27
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	08db      	lsrs	r3, r3, #3
 8001c14:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	331b      	adds	r3, #27
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	4413      	add	r3, r2
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0202 	and.w	r2, r3, #2
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	331b      	adds	r3, #27
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3304      	adds	r3, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 020f 	and.w	r2, r3, #15
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	331b      	adds	r3, #27
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	4413      	add	r3, r2
 8001c56:	3304      	adds	r3, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	331b      	adds	r3, #27
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3304      	adds	r3, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0c1b      	lsrs	r3, r3, #16
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0a1a      	lsrs	r2, r3, #8
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0c1a      	lsrs	r2, r3, #16
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0e1a      	lsrs	r2, r3, #24
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	3303      	adds	r3, #3
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0a1a      	lsrs	r2, r3, #8
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	3305      	adds	r3, #5
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0c1a      	lsrs	r2, r3, #16
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	3306      	adds	r3, #6
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0e1a      	lsrs	r2, r3, #24
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	3307      	adds	r3, #7
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d108      	bne.n	8001d5c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0220 	orr.w	r2, r2, #32
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	e007      	b.n	8001d6c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0220 	orr.w	r2, r2, #32
 8001d6a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e006      	b.n	8001d7e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
  }
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d9a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d002      	beq.n	8001da8 <HAL_CAN_ActivateNotification+0x1e>
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d109      	bne.n	8001dbc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6959      	ldr	r1, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e006      	b.n	8001dca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d002      	beq.n	8001df4 <HAL_CAN_DeactivateNotification+0x1e>
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d10a      	bne.n	8001e0a <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6959      	ldr	r1, [r3, #20]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	400a      	ands	r2, r1
 8001e04:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e006      	b.n	8001e18 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
  }
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d07c      	beq.n	8001f64 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d023      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f97d 	bl	8002186 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e8c:	e016      	b.n	8001ebc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d004      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea0:	e00c      	b.n	8001ebc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb4:	e002      	b.n	8001ebc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f983 	bl	80021c2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d024      	beq.n	8001f10 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ece:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f95d 	bl	800219a <HAL_CAN_TxMailbox1CompleteCallback>
 8001ee0:	e016      	b.n	8001f10 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d004      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef4:	e00c      	b.n	8001f10 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
 8001f08:	e002      	b.n	8001f10 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f963 	bl	80021d6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d024      	beq.n	8001f64 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f93d 	bl	80021ae <HAL_CAN_TxMailbox2CompleteCallback>
 8001f34:	e016      	b.n	8001f64 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d004      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
 8001f48:	e00c      	b.n	8001f64 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5c:	e002      	b.n	8001f64 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f943 	bl	80021ea <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00c      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2210      	movs	r2, #16
 8001f86:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f92a 	bl	80021fe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d009      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7fe fd66 	bl	8000a94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00c      	beq.n	8001fec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2210      	movs	r2, #16
 8001fea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2208      	movs	r2, #8
 8002006:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f90c 	bl	8002226 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f8f3 	bl	8002212 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2210      	movs	r2, #16
 8002046:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f8f6 	bl	800223a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00b      	beq.n	8002070 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2208      	movs	r2, #8
 8002068:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8ef 	bl	800224e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d075      	beq.n	8002166 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d06c      	beq.n	800215e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d008      	beq.n	80020bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	f043 0302 	orr.w	r3, r3, #2
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d008      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d03d      	beq.n	800215e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d038      	beq.n	800215e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020f2:	2b30      	cmp	r3, #48	; 0x30
 80020f4:	d017      	beq.n	8002126 <HAL_CAN_IRQHandler+0x302>
 80020f6:	2b30      	cmp	r3, #48	; 0x30
 80020f8:	d804      	bhi.n	8002104 <HAL_CAN_IRQHandler+0x2e0>
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d009      	beq.n	8002112 <HAL_CAN_IRQHandler+0x2ee>
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d00c      	beq.n	800211c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002102:	e024      	b.n	800214e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002104:	2b50      	cmp	r3, #80	; 0x50
 8002106:	d018      	beq.n	800213a <HAL_CAN_IRQHandler+0x316>
 8002108:	2b60      	cmp	r3, #96	; 0x60
 800210a:	d01b      	beq.n	8002144 <HAL_CAN_IRQHandler+0x320>
 800210c:	2b40      	cmp	r3, #64	; 0x40
 800210e:	d00f      	beq.n	8002130 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002110:	e01d      	b.n	800214e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	f043 0308 	orr.w	r3, r3, #8
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800211a:	e018      	b.n	800214e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	f043 0310 	orr.w	r3, r3, #16
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002124:	e013      	b.n	800214e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	f043 0320 	orr.w	r3, r3, #32
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800212e:	e00e      	b.n	800214e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002138:	e009      	b.n	800214e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002142:	e004      	b.n	800214e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800214c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800215c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2204      	movs	r2, #4
 8002164:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f872 	bl	8002262 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	; 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <__NVIC_SetPriorityGrouping>:
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <__NVIC_SetPriorityGrouping+0x40>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x40>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00
 80022bc:	05fa0000 	.word	0x05fa0000

080022c0 <__NVIC_GetPriorityGrouping>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_EnableIRQ>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db0b      	blt.n	8002306 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4907      	ldr	r1, [pc, #28]	; (8002314 <__NVIC_EnableIRQ+0x38>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	; (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ff4c 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023fa:	f7ff ff61 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 80023fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	6978      	ldr	r0, [r7, #20]
 8002406:	f7ff ffb1 	bl	800236c <NVIC_EncodePriority>
 800240a:	4602      	mov	r2, r0
 800240c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff80 	bl	8002318 <__NVIC_SetPriority>
}
 8002418:	bf00      	nop
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff54 	bl	80022dc <__NVIC_EnableIRQ>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff f858 	bl	80014fc <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e099      	b.n	800258c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0201 	bic.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002478:	e00f      	b.n	800249a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800247a:	f7ff f83f 	bl	80014fc <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b05      	cmp	r3, #5
 8002486:	d908      	bls.n	800249a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2203      	movs	r2, #3
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e078      	b.n	800258c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e8      	bne.n	800247a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4b38      	ldr	r3, [pc, #224]	; (8002594 <HAL_DMA_Init+0x158>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d107      	bne.n	8002504 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	4313      	orrs	r3, r2
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f023 0307 	bic.w	r3, r3, #7
 800251a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	4313      	orrs	r3, r2
 8002524:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	2b04      	cmp	r3, #4
 800252c:	d117      	bne.n	800255e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00e      	beq.n	800255e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 faa5 	bl	8002a90 <DMA_CheckFifoParam>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2240      	movs	r2, #64	; 0x40
 8002550:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800255a:	2301      	movs	r3, #1
 800255c:	e016      	b.n	800258c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa5c 	bl	8002a24 <DMA_CalcBaseAndBitshift>
 800256c:	4603      	mov	r3, r0
 800256e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	223f      	movs	r2, #63	; 0x3f
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	e010803f 	.word	0xe010803f

08002598 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_DMA_Start_IT+0x26>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e048      	b.n	8002650 <HAL_DMA_Start_IT+0xb8>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d137      	bne.n	8002642 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f9ee 	bl	80029c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	223f      	movs	r2, #63	; 0x3f
 80025f2:	409a      	lsls	r2, r3
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0216 	orr.w	r2, r2, #22
 8002606:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002616:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0208 	orr.w	r2, r2, #8
 800262e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e005      	b.n	800264e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800264a:	2302      	movs	r3, #2
 800264c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800264e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d004      	beq.n	8002676 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2280      	movs	r2, #128	; 0x80
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e00c      	b.n	8002690 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2205      	movs	r2, #5
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80026a8:	4b92      	ldr	r3, [pc, #584]	; (80028f4 <HAL_DMA_IRQHandler+0x258>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a92      	ldr	r2, [pc, #584]	; (80028f8 <HAL_DMA_IRQHandler+0x25c>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0a9b      	lsrs	r3, r3, #10
 80026b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c6:	2208      	movs	r2, #8
 80026c8:	409a      	lsls	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01a      	beq.n	8002708 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	2208      	movs	r2, #8
 80026f6:	409a      	lsls	r2, r3
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	2201      	movs	r2, #1
 800270e:	409a      	lsls	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d012      	beq.n	800273e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272a:	2201      	movs	r2, #1
 800272c:	409a      	lsls	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	f043 0202 	orr.w	r2, r3, #2
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002742:	2204      	movs	r2, #4
 8002744:	409a      	lsls	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d012      	beq.n	8002774 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00b      	beq.n	8002774 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002760:	2204      	movs	r2, #4
 8002762:	409a      	lsls	r2, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	2210      	movs	r2, #16
 800277a:	409a      	lsls	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d043      	beq.n	800280c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d03c      	beq.n	800280c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002796:	2210      	movs	r2, #16
 8002798:	409a      	lsls	r2, r3
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d018      	beq.n	80027de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d108      	bne.n	80027cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d024      	beq.n	800280c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	4798      	blx	r3
 80027ca:	e01f      	b.n	800280c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01b      	beq.n	800280c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
 80027dc:	e016      	b.n	800280c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d107      	bne.n	80027fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0208 	bic.w	r2, r2, #8
 80027fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	2220      	movs	r2, #32
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 808e 	beq.w	800293a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8086 	beq.w	800293a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	2220      	movs	r2, #32
 8002834:	409a      	lsls	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b05      	cmp	r3, #5
 8002844:	d136      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0216 	bic.w	r2, r2, #22
 8002854:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002864:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d103      	bne.n	8002876 <HAL_DMA_IRQHandler+0x1da>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0208 	bic.w	r2, r2, #8
 8002884:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	223f      	movs	r2, #63	; 0x3f
 800288c:	409a      	lsls	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d07d      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	4798      	blx	r3
        }
        return;
 80028b2:	e078      	b.n	80029a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d01c      	beq.n	80028fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d108      	bne.n	80028e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d030      	beq.n	800293a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
 80028e0:	e02b      	b.n	800293a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d027      	beq.n	800293a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
 80028f2:	e022      	b.n	800293a <HAL_DMA_IRQHandler+0x29e>
 80028f4:	20000010 	.word	0x20000010
 80028f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10f      	bne.n	800292a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0210 	bic.w	r2, r2, #16
 8002918:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	2b00      	cmp	r3, #0
 8002940:	d032      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d022      	beq.n	8002994 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2205      	movs	r2, #5
 8002952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3301      	adds	r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	429a      	cmp	r2, r3
 8002970:	d307      	bcc.n	8002982 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f2      	bne.n	8002966 <HAL_DMA_IRQHandler+0x2ca>
 8002980:	e000      	b.n	8002984 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002982:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
 80029a4:	e000      	b.n	80029a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029a6:	bf00      	nop
    }
  }
}
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop

080029b0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	d108      	bne.n	8002a08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a06:	e007      	b.n	8002a18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	3b10      	subs	r3, #16
 8002a34:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <DMA_CalcBaseAndBitshift+0x60>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <DMA_CalcBaseAndBitshift+0x64>)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4413      	add	r3, r2
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d908      	bls.n	8002a64 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <DMA_CalcBaseAndBitshift+0x68>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	1d1a      	adds	r2, r3, #4
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	659a      	str	r2, [r3, #88]	; 0x58
 8002a62:	e006      	b.n	8002a72 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <DMA_CalcBaseAndBitshift+0x68>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	aaaaaaab 	.word	0xaaaaaaab
 8002a88:	08016244 	.word	0x08016244
 8002a8c:	fffffc00 	.word	0xfffffc00

08002a90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d11f      	bne.n	8002aea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d855      	bhi.n	8002b5c <DMA_CheckFifoParam+0xcc>
 8002ab0:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <DMA_CheckFifoParam+0x28>)
 8002ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002ac9 	.word	0x08002ac9
 8002abc:	08002adb 	.word	0x08002adb
 8002ac0:	08002ac9 	.word	0x08002ac9
 8002ac4:	08002b5d 	.word	0x08002b5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d045      	beq.n	8002b60 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad8:	e042      	b.n	8002b60 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ae2:	d13f      	bne.n	8002b64 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae8:	e03c      	b.n	8002b64 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af2:	d121      	bne.n	8002b38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d836      	bhi.n	8002b68 <DMA_CheckFifoParam+0xd8>
 8002afa:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <DMA_CheckFifoParam+0x70>)
 8002afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b00:	08002b11 	.word	0x08002b11
 8002b04:	08002b17 	.word	0x08002b17
 8002b08:	08002b11 	.word	0x08002b11
 8002b0c:	08002b29 	.word	0x08002b29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      break;
 8002b14:	e02f      	b.n	8002b76 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d024      	beq.n	8002b6c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b26:	e021      	b.n	8002b6c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b30:	d11e      	bne.n	8002b70 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b36:	e01b      	b.n	8002b70 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d902      	bls.n	8002b44 <DMA_CheckFifoParam+0xb4>
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d003      	beq.n	8002b4a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b42:	e018      	b.n	8002b76 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
      break;
 8002b48:	e015      	b.n	8002b76 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00e      	beq.n	8002b74 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5a:	e00b      	b.n	8002b74 <DMA_CheckFifoParam+0xe4>
      break;
 8002b5c:	bf00      	nop
 8002b5e:	e00a      	b.n	8002b76 <DMA_CheckFifoParam+0xe6>
      break;
 8002b60:	bf00      	nop
 8002b62:	e008      	b.n	8002b76 <DMA_CheckFifoParam+0xe6>
      break;
 8002b64:	bf00      	nop
 8002b66:	e006      	b.n	8002b76 <DMA_CheckFifoParam+0xe6>
      break;
 8002b68:	bf00      	nop
 8002b6a:	e004      	b.n	8002b76 <DMA_CheckFifoParam+0xe6>
      break;
 8002b6c:	bf00      	nop
 8002b6e:	e002      	b.n	8002b76 <DMA_CheckFifoParam+0xe6>
      break;   
 8002b70:	bf00      	nop
 8002b72:	e000      	b.n	8002b76 <DMA_CheckFifoParam+0xe6>
      break;
 8002b74:	bf00      	nop
    }
  } 
  
  return status; 
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	e175      	b.n	8002e90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	f040 8164 	bne.w	8002e8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d00b      	beq.n	8002be2 <HAL_GPIO_Init+0x5e>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d007      	beq.n	8002be2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bd6:	2b11      	cmp	r3, #17
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b12      	cmp	r3, #18
 8002be0:	d130      	bne.n	8002c44 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	2203      	movs	r2, #3
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c18:	2201      	movs	r2, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 0201 	and.w	r2, r3, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x100>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b12      	cmp	r3, #18
 8002c82:	d123      	bne.n	8002ccc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	08da      	lsrs	r2, r3, #3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3208      	adds	r2, #8
 8002c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	220f      	movs	r2, #15
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	08da      	lsrs	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3208      	adds	r2, #8
 8002cc6:	69b9      	ldr	r1, [r7, #24]
 8002cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0203 	and.w	r2, r3, #3
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80be 	beq.w	8002e8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0e:	4b65      	ldr	r3, [pc, #404]	; (8002ea4 <HAL_GPIO_Init+0x320>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4a64      	ldr	r2, [pc, #400]	; (8002ea4 <HAL_GPIO_Init+0x320>)
 8002d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d18:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1a:	4b62      	ldr	r3, [pc, #392]	; (8002ea4 <HAL_GPIO_Init+0x320>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d26:	4a60      	ldr	r2, [pc, #384]	; (8002ea8 <HAL_GPIO_Init+0x324>)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a57      	ldr	r2, [pc, #348]	; (8002eac <HAL_GPIO_Init+0x328>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d037      	beq.n	8002dc2 <HAL_GPIO_Init+0x23e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a56      	ldr	r2, [pc, #344]	; (8002eb0 <HAL_GPIO_Init+0x32c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d031      	beq.n	8002dbe <HAL_GPIO_Init+0x23a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a55      	ldr	r2, [pc, #340]	; (8002eb4 <HAL_GPIO_Init+0x330>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d02b      	beq.n	8002dba <HAL_GPIO_Init+0x236>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a54      	ldr	r2, [pc, #336]	; (8002eb8 <HAL_GPIO_Init+0x334>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d025      	beq.n	8002db6 <HAL_GPIO_Init+0x232>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a53      	ldr	r2, [pc, #332]	; (8002ebc <HAL_GPIO_Init+0x338>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01f      	beq.n	8002db2 <HAL_GPIO_Init+0x22e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a52      	ldr	r2, [pc, #328]	; (8002ec0 <HAL_GPIO_Init+0x33c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d019      	beq.n	8002dae <HAL_GPIO_Init+0x22a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a51      	ldr	r2, [pc, #324]	; (8002ec4 <HAL_GPIO_Init+0x340>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <HAL_GPIO_Init+0x226>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a50      	ldr	r2, [pc, #320]	; (8002ec8 <HAL_GPIO_Init+0x344>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00d      	beq.n	8002da6 <HAL_GPIO_Init+0x222>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4f      	ldr	r2, [pc, #316]	; (8002ecc <HAL_GPIO_Init+0x348>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <HAL_GPIO_Init+0x21e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4e      	ldr	r2, [pc, #312]	; (8002ed0 <HAL_GPIO_Init+0x34c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_GPIO_Init+0x21a>
 8002d9a:	2309      	movs	r3, #9
 8002d9c:	e012      	b.n	8002dc4 <HAL_GPIO_Init+0x240>
 8002d9e:	230a      	movs	r3, #10
 8002da0:	e010      	b.n	8002dc4 <HAL_GPIO_Init+0x240>
 8002da2:	2308      	movs	r3, #8
 8002da4:	e00e      	b.n	8002dc4 <HAL_GPIO_Init+0x240>
 8002da6:	2307      	movs	r3, #7
 8002da8:	e00c      	b.n	8002dc4 <HAL_GPIO_Init+0x240>
 8002daa:	2306      	movs	r3, #6
 8002dac:	e00a      	b.n	8002dc4 <HAL_GPIO_Init+0x240>
 8002dae:	2305      	movs	r3, #5
 8002db0:	e008      	b.n	8002dc4 <HAL_GPIO_Init+0x240>
 8002db2:	2304      	movs	r3, #4
 8002db4:	e006      	b.n	8002dc4 <HAL_GPIO_Init+0x240>
 8002db6:	2303      	movs	r3, #3
 8002db8:	e004      	b.n	8002dc4 <HAL_GPIO_Init+0x240>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e002      	b.n	8002dc4 <HAL_GPIO_Init+0x240>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_GPIO_Init+0x240>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f002 0203 	and.w	r2, r2, #3
 8002dca:	0092      	lsls	r2, r2, #2
 8002dcc:	4093      	lsls	r3, r2
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002dd4:	4934      	ldr	r1, [pc, #208]	; (8002ea8 <HAL_GPIO_Init+0x324>)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	3302      	adds	r3, #2
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002de2:	4b3c      	ldr	r3, [pc, #240]	; (8002ed4 <HAL_GPIO_Init+0x350>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e06:	4a33      	ldr	r2, [pc, #204]	; (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e0c:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e30:	4a28      	ldr	r2, [pc, #160]	; (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e36:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e84:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <HAL_GPIO_Init+0x350>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	f67f ae86 	bls.w	8002ba4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e98:	bf00      	nop
 8002e9a:	3724      	adds	r7, #36	; 0x24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40013800 	.word	0x40013800
 8002eac:	40020000 	.word	0x40020000
 8002eb0:	40020400 	.word	0x40020400
 8002eb4:	40020800 	.word	0x40020800
 8002eb8:	40020c00 	.word	0x40020c00
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40021400 	.word	0x40021400
 8002ec4:	40021800 	.word	0x40021800
 8002ec8:	40021c00 	.word	0x40021c00
 8002ecc:	40022000 	.word	0x40022000
 8002ed0:	40022400 	.word	0x40022400
 8002ed4:	40013c00 	.word	0x40013c00

08002ed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	887b      	ldrh	r3, [r7, #2]
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e001      	b.n	8002efa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
 8002f14:	4613      	mov	r3, r2
 8002f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f18:	787b      	ldrb	r3, [r7, #1]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f24:	e003      	b.n	8002f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f26:	887b      	ldrh	r3, [r7, #2]
 8002f28:	041a      	lsls	r2, r3, #16
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	619a      	str	r2, [r3, #24]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d004      	beq.n	8002f5c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f52:	887b      	ldrh	r3, [r7, #2]
 8002f54:	041a      	lsls	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002f5a:	e002      	b.n	8002f62 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f5c:	887a      	ldrh	r2, [r7, #2]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	619a      	str	r2, [r3, #24]
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f70:	b08f      	sub	sp, #60	; 0x3c
 8002f72:	af0a      	add	r7, sp, #40	; 0x28
 8002f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e116      	b.n	80031ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f012 fc50 	bl	8015840 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d102      	bne.n	8002fba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f005 fedf 	bl	8008d82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	687e      	ldr	r6, [r7, #4]
 8002fcc:	466d      	mov	r5, sp
 8002fce:	f106 0410 	add.w	r4, r6, #16
 8002fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fe2:	1d33      	adds	r3, r6, #4
 8002fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fe6:	6838      	ldr	r0, [r7, #0]
 8002fe8:	f005 fdc0 	bl	8008b6c <USB_CoreInit>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e0d7      	b.n	80031ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f005 fecd 	bl	8008da4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300a:	2300      	movs	r3, #0
 800300c:	73fb      	strb	r3, [r7, #15]
 800300e:	e04a      	b.n	80030a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	333d      	adds	r3, #61	; 0x3d
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	333c      	adds	r3, #60	; 0x3c
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	b298      	uxth	r0, r3
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	3342      	adds	r3, #66	; 0x42
 800304c:	4602      	mov	r2, r0
 800304e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	333f      	adds	r3, #63	; 0x3f
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	3344      	adds	r3, #68	; 0x44
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	3348      	adds	r3, #72	; 0x48
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3350      	adds	r3, #80	; 0x50
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	3301      	adds	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d3af      	bcc.n	8003010 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	e044      	b.n	8003140 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030b6:	7bfa      	ldrb	r2, [r7, #15]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	3301      	adds	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d3b5      	bcc.n	80030b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	687e      	ldr	r6, [r7, #4]
 8003152:	466d      	mov	r5, sp
 8003154:	f106 0410 	add.w	r4, r6, #16
 8003158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003160:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003164:	e885 0003 	stmia.w	r5, {r0, r1}
 8003168:	1d33      	adds	r3, r6, #4
 800316a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800316c:	6838      	ldr	r0, [r7, #0]
 800316e:	f005 fe43 	bl	8008df8 <USB_DevInit>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e014      	b.n	80031ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	2b01      	cmp	r3, #1
 800319a:	d102      	bne.n	80031a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f001 f8ad 	bl	80042fc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f006 fe92 	bl	8009ed0 <USB_DevDisconnect>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_PCD_Start+0x16>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e012      	b.n	80031f2 <HAL_PCD_Start+0x3c>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f006 fe61 	bl	8009ea0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f005 fdbc 	bl	8008d60 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031fa:	b590      	push	{r4, r7, lr}
 80031fc:	b08d      	sub	sp, #52	; 0x34
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f006 ff08 	bl	800a026 <USB_GetMode>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	f040 83ca 	bne.w	80039b2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f006 fe6c 	bl	8009f00 <USB_ReadInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 83c0 	beq.w	80039b0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f006 fe63 	bl	8009f00 <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b02      	cmp	r3, #2
 8003242:	d107      	bne.n	8003254 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f002 0202 	and.w	r2, r2, #2
 8003252:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f006 fe51 	bl	8009f00 <USB_ReadInterrupts>
 800325e:	4603      	mov	r3, r0
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b10      	cmp	r3, #16
 8003266:	d161      	bne.n	800332c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0210 	bic.w	r2, r2, #16
 8003276:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	f003 020f 	and.w	r2, r3, #15
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	3304      	adds	r3, #4
 8003296:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	0c5b      	lsrs	r3, r3, #17
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d124      	bne.n	80032ee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d035      	beq.n	800331c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032be:	b29b      	uxth	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	6a38      	ldr	r0, [r7, #32]
 80032c4:	f006 fcc9 	bl	8009c5a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d4:	441a      	add	r2, r3
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032e6:	441a      	add	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	619a      	str	r2, [r3, #24]
 80032ec:	e016      	b.n	800331c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	0c5b      	lsrs	r3, r3, #17
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d110      	bne.n	800331c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003300:	2208      	movs	r2, #8
 8003302:	4619      	mov	r1, r3
 8003304:	6a38      	ldr	r0, [r7, #32]
 8003306:	f006 fca8 	bl	8009c5a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003316:	441a      	add	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0210 	orr.w	r2, r2, #16
 800332a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f006 fde5 	bl	8009f00 <USB_ReadInterrupts>
 8003336:	4603      	mov	r3, r0
 8003338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800333c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003340:	d16e      	bne.n	8003420 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f006 fdeb 	bl	8009f26 <USB_ReadDevAllOutEpInterrupt>
 8003350:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003352:	e062      	b.n	800341a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d057      	beq.n	800340e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f006 fe10 	bl	8009f8e <USB_ReadDevOutEPInterrupt>
 800336e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00c      	beq.n	8003394 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	4413      	add	r3, r2
 8003382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003386:	461a      	mov	r2, r3
 8003388:	2301      	movs	r3, #1
 800338a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800338c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fe0a 	bl	8003fa8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00c      	beq.n	80033b8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033aa:	461a      	mov	r2, r3
 80033ac:	2308      	movs	r3, #8
 80033ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 ff04 	bl	80041c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ce:	461a      	mov	r2, r3
 80033d0:	2310      	movs	r3, #16
 80033d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d008      	beq.n	80033f0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ea:	461a      	mov	r2, r3
 80033ec:	2320      	movs	r3, #32
 80033ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003406:	461a      	mov	r2, r3
 8003408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800340c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	3301      	adds	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d199      	bne.n	8003354 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f006 fd6b 	bl	8009f00 <USB_ReadInterrupts>
 800342a:	4603      	mov	r3, r0
 800342c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003430:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003434:	f040 80c0 	bne.w	80035b8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f006 fd8c 	bl	8009f5a <USB_ReadDevAllInEpInterrupt>
 8003442:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003448:	e0b2      	b.n	80035b0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80a7 	beq.w	80035a4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f006 fdb2 	bl	8009fca <USB_ReadDevInEPInterrupt>
 8003466:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d057      	beq.n	8003522 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	2201      	movs	r2, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	43db      	mvns	r3, r3
 800348c:	69f9      	ldr	r1, [r7, #28]
 800348e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003492:	4013      	ands	r3, r2
 8003494:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a2:	461a      	mov	r2, r3
 80034a4:	2301      	movs	r3, #1
 80034a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d132      	bne.n	8003516 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	3348      	adds	r3, #72	; 0x48
 80034c0:	6819      	ldr	r1, [r3, #0]
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4403      	add	r3, r0
 80034d0:	3344      	adds	r3, #68	; 0x44
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4419      	add	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4403      	add	r3, r0
 80034e4:	3348      	adds	r3, #72	; 0x48
 80034e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d113      	bne.n	8003516 <HAL_PCD_IRQHandler+0x31c>
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	3350      	adds	r3, #80	; 0x50
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d108      	bne.n	8003516 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800350e:	461a      	mov	r2, r3
 8003510:	2101      	movs	r1, #1
 8003512:	f006 fdbb 	bl	800a08c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4619      	mov	r1, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f012 fa12 	bl	8015946 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003538:	461a      	mov	r2, r3
 800353a:	2308      	movs	r3, #8
 800353c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003554:	461a      	mov	r2, r3
 8003556:	2310      	movs	r3, #16
 8003558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003570:	461a      	mov	r2, r3
 8003572:	2340      	movs	r3, #64	; 0x40
 8003574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	461a      	mov	r2, r3
 800358e:	2302      	movs	r3, #2
 8003590:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800359c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fc75 	bl	8003e8e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	3301      	adds	r3, #1
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f47f af49 	bne.w	800344a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f006 fc9f 	bl	8009f00 <USB_ReadInterrupts>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035cc:	d122      	bne.n	8003614 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d108      	bne.n	80035fe <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035f4:	2100      	movs	r1, #0
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f012 fc14 	bl	8015e24 <HAL_PCDEx_LPM_Callback>
 80035fc:	e002      	b.n	8003604 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f012 fa18 	bl	8015a34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003612:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f006 fc71 	bl	8009f00 <USB_ReadInterrupts>
 800361e:	4603      	mov	r3, r0
 8003620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003628:	d112      	bne.n	8003650 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b01      	cmp	r3, #1
 8003638:	d102      	bne.n	8003640 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f012 f9d4 	bl	80159e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800364e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f006 fc53 	bl	8009f00 <USB_ReadInterrupts>
 800365a:	4603      	mov	r3, r0
 800365c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003664:	d121      	bne.n	80036aa <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003674:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d111      	bne.n	80036a4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	f003 020f 	and.w	r2, r3, #15
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800369a:	2101      	movs	r1, #1
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f012 fbc1 	bl	8015e24 <HAL_PCDEx_LPM_Callback>
 80036a2:	e002      	b.n	80036aa <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f012 f99f 	bl	80159e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f006 fc26 	bl	8009f00 <USB_ReadInterrupts>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036be:	f040 80c7 	bne.w	8003850 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2110      	movs	r1, #16
 80036dc:	4618      	mov	r0, r3
 80036de:	f005 fcf9 	bl	80090d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e6:	e056      	b.n	8003796 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f4:	461a      	mov	r2, r3
 80036f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370c:	0151      	lsls	r1, r2, #5
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	440a      	add	r2, r1
 8003712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003716:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800371a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	440a      	add	r2, r1
 8003732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003736:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800373a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003748:	461a      	mov	r2, r3
 800374a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800374e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003760:	0151      	lsls	r1, r2, #5
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	440a      	add	r2, r1
 8003766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800376a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800376e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003780:	0151      	lsls	r1, r2, #5
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	440a      	add	r2, r1
 8003786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800378a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800378e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	3301      	adds	r3, #1
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800379c:	429a      	cmp	r2, r3
 800379e:	d3a3      	bcc.n	80036e8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80037b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d016      	beq.n	80037ea <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037cc:	f043 030b 	orr.w	r3, r3, #11
 80037d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037e2:	f043 030b 	orr.w	r3, r3, #11
 80037e6:	6453      	str	r3, [r2, #68]	; 0x44
 80037e8:	e015      	b.n	8003816 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f8:	4619      	mov	r1, r3
 80037fa:	f242 032b 	movw	r3, #8235	; 0x202b
 80037fe:	4313      	orrs	r3, r2
 8003800:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	69fa      	ldr	r2, [r7, #28]
 800380c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003810:	f043 030b 	orr.w	r3, r3, #11
 8003814:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003824:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003828:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800383a:	461a      	mov	r2, r3
 800383c:	f006 fc26 	bl	800a08c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800384e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f006 fb53 	bl	8009f00 <USB_ReadInterrupts>
 800385a:	4603      	mov	r3, r0
 800385c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003864:	d124      	bne.n	80038b0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f006 fbea 	bl	800a044 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f005 fc8e 	bl	8009196 <USB_GetDevSpeed>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681c      	ldr	r4, [r3, #0]
 8003886:	f001 fa2f 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 800388a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	4620      	mov	r0, r4
 8003896:	f005 f9c1 	bl	8008c1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f012 f87b 	bl	8015996 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80038ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f006 fb23 	bl	8009f00 <USB_ReadInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d10a      	bne.n	80038da <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f012 f858 	bl	801597a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f002 0208 	and.w	r2, r2, #8
 80038d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f006 fb0e 	bl	8009f00 <USB_ReadInterrupts>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ee:	d10f      	bne.n	8003910 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4619      	mov	r1, r3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f012 f8ba 	bl	8015a74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800390e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f006 faf3 	bl	8009f00 <USB_ReadInterrupts>
 800391a:	4603      	mov	r3, r0
 800391c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003920:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003924:	d10f      	bne.n	8003946 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	b2db      	uxtb	r3, r3
 800392e:	4619      	mov	r1, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f012 f88d 	bl	8015a50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f006 fad8 	bl	8009f00 <USB_ReadInterrupts>
 8003950:	4603      	mov	r3, r0
 8003952:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395a:	d10a      	bne.n	8003972 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f012 f89b 	bl	8015a98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003970:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f006 fac2 	bl	8009f00 <USB_ReadInterrupts>
 800397c:	4603      	mov	r3, r0
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b04      	cmp	r3, #4
 8003984:	d115      	bne.n	80039b2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f012 f88b 	bl	8015ab4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	e000      	b.n	80039b2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80039b0:	bf00      	nop
    }
  }
}
 80039b2:	3734      	adds	r7, #52	; 0x34
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd90      	pop	{r4, r7, pc}

080039b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_PCD_SetAddress+0x1a>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e013      	b.n	80039fa <HAL_PCD_SetAddress+0x42>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f006 fa32 	bl	8009e54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	4608      	mov	r0, r1
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4603      	mov	r3, r0
 8003a12:	70fb      	strb	r3, [r7, #3]
 8003a14:	460b      	mov	r3, r1
 8003a16:	803b      	strh	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da0f      	bge.n	8003a48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	f003 020f 	and.w	r2, r3, #15
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	3338      	adds	r3, #56	; 0x38
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	705a      	strb	r2, [r3, #1]
 8003a46:	e00f      	b.n	8003a68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	f003 020f 	and.w	r2, r3, #15
 8003a4e:	4613      	mov	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3304      	adds	r3, #4
 8003a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a74:	883a      	ldrh	r2, [r7, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	78ba      	ldrb	r2, [r7, #2]
 8003a7e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a92:	78bb      	ldrb	r3, [r7, #2]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d102      	bne.n	8003a9e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_PCD_EP_Open+0xaa>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e00e      	b.n	8003aca <HAL_PCD_EP_Open+0xc8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68f9      	ldr	r1, [r7, #12]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f005 fb90 	bl	80091e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003ac8:	7afb      	ldrb	r3, [r7, #11]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	460b      	mov	r3, r1
 8003adc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	da0f      	bge.n	8003b06 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	f003 020f 	and.w	r2, r3, #15
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	3338      	adds	r3, #56	; 0x38
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	3304      	adds	r3, #4
 8003afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	705a      	strb	r2, [r3, #1]
 8003b04:	e00f      	b.n	8003b26 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	f003 020f 	and.w	r2, r3, #15
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_PCD_EP_Close+0x6e>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e00e      	b.n	8003b5e <HAL_PCD_EP_Close+0x8c>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68f9      	ldr	r1, [r7, #12]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f005 fbce 	bl	80092f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	460b      	mov	r3, r1
 8003b74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b76:	7afb      	ldrb	r3, [r7, #11]
 8003b78:	f003 020f 	and.w	r2, r3, #15
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ba8:	7afb      	ldrb	r3, [r7, #11]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d102      	bne.n	8003bc2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bc2:	7afb      	ldrb	r3, [r7, #11]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6979      	ldr	r1, [r7, #20]
 8003bda:	f005 feb1 	bl	8009940 <USB_EP0StartXfer>
 8003bde:	e008      	b.n	8003bf2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	6979      	ldr	r1, [r7, #20]
 8003bee:	f005 fc5b 	bl	80094a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	f003 020f 	and.w	r2, r3, #15
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c3c:	7afb      	ldrb	r3, [r7, #11]
 8003c3e:	f003 020f 	and.w	r2, r3, #15
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	3338      	adds	r3, #56	; 0x38
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	3304      	adds	r3, #4
 8003c52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2200      	movs	r2, #0
 8003c64:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c6c:	7afb      	ldrb	r3, [r7, #11]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d102      	bne.n	8003c86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c86:	7afb      	ldrb	r3, [r7, #11]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d109      	bne.n	8003ca4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	6979      	ldr	r1, [r7, #20]
 8003c9e:	f005 fe4f 	bl	8009940 <USB_EP0StartXfer>
 8003ca2:	e008      	b.n	8003cb6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6979      	ldr	r1, [r7, #20]
 8003cb2:	f005 fbf9 	bl	80094a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	f003 020f 	and.w	r2, r3, #15
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d901      	bls.n	8003cde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e050      	b.n	8003d80 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	da0f      	bge.n	8003d06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	f003 020f 	and.w	r2, r3, #15
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	3338      	adds	r3, #56	; 0x38
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	705a      	strb	r2, [r3, #1]
 8003d04:	e00d      	b.n	8003d22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	3304      	adds	r3, #4
 8003d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_PCD_EP_SetStall+0x82>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e01e      	b.n	8003d80 <HAL_PCD_EP_SetStall+0xc0>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68f9      	ldr	r1, [r7, #12]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f005 ffab 	bl	8009cac <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	b2d9      	uxtb	r1, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d70:	461a      	mov	r2, r3
 8003d72:	f006 f98b 	bl	800a08c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	f003 020f 	and.w	r2, r3, #15
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d901      	bls.n	8003da6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e042      	b.n	8003e2c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	da0f      	bge.n	8003dce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	f003 020f 	and.w	r2, r3, #15
 8003db4:	4613      	mov	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	3338      	adds	r3, #56	; 0x38
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	705a      	strb	r2, [r3, #1]
 8003dcc:	e00f      	b.n	8003dee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	f003 020f 	and.w	r2, r3, #15
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	4413      	add	r3, r2
 8003de4:	3304      	adds	r3, #4
 8003de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_PCD_EP_ClrStall+0x86>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e00e      	b.n	8003e2c <HAL_PCD_EP_ClrStall+0xa4>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68f9      	ldr	r1, [r7, #12]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f005 ffb3 	bl	8009d88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_PCD_EP_Flush+0x1a>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e01b      	b.n	8003e86 <HAL_PCD_EP_Flush+0x52>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8003e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	da09      	bge.n	8003e72 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	f005 f932 	bl	80090d4 <USB_FlushTxFifo>
 8003e70:	e004      	b.n	8003e7c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f005 f952 	bl	8009120 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b08a      	sub	sp, #40	; 0x28
 8003e92:	af02      	add	r7, sp, #8
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	3338      	adds	r3, #56	; 0x38
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d901      	bls.n	8003ec6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e06c      	b.n	8003fa0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d902      	bls.n	8003ee2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3303      	adds	r3, #3
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eea:	e02b      	b.n	8003f44 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d902      	bls.n	8003f08 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3303      	adds	r3, #3
 8003f0c:	089b      	lsrs	r3, r3, #2
 8003f0e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68d9      	ldr	r1, [r3, #12]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	4603      	mov	r3, r0
 8003f26:	6978      	ldr	r0, [r7, #20]
 8003f28:	f005 fe62 	bl	8009bf0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	441a      	add	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	441a      	add	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d809      	bhi.n	8003f6e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d203      	bcs.n	8003f6e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1be      	bne.n	8003eec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d811      	bhi.n	8003f9e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	2201      	movs	r2, #1
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	6939      	ldr	r1, [r7, #16]
 8003f96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3720      	adds	r7, #32
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	333c      	adds	r3, #60	; 0x3c
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	f040 80a0 	bne.w	8004120 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d015      	beq.n	8004016 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4a72      	ldr	r2, [pc, #456]	; (80041b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	f240 80dd 	bls.w	80041ae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80d7 	beq.w	80041ae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400c:	461a      	mov	r2, r3
 800400e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004012:	6093      	str	r3, [r2, #8]
 8004014:	e0cb      	b.n	80041ae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d009      	beq.n	8004034 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	461a      	mov	r2, r3
 800402e:	2320      	movs	r3, #32
 8004030:	6093      	str	r3, [r2, #8]
 8004032:	e0bc      	b.n	80041ae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800403a:	2b00      	cmp	r3, #0
 800403c:	f040 80b7 	bne.w	80041ae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a5d      	ldr	r2, [pc, #372]	; (80041b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d90f      	bls.n	8004068 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405e:	461a      	mov	r2, r3
 8004060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004064:	6093      	str	r3, [r2, #8]
 8004066:	e0a2      	b.n	80041ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800407a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	0159      	lsls	r1, r3, #5
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	440b      	add	r3, r1
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800408e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	4613      	mov	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4403      	add	r3, r0
 800409e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040a2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040b6:	6819      	ldr	r1, [r3, #0]
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4403      	add	r3, r0
 80040c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4419      	add	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4403      	add	r3, r0
 80040dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040e0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d114      	bne.n	8004112 <PCD_EP_OutXfrComplete_int+0x16a>
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d108      	bne.n	8004112 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800410a:	461a      	mov	r2, r3
 800410c:	2101      	movs	r1, #1
 800410e:	f005 ffbd 	bl	800a08c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f011 fbf9 	bl	8015910 <HAL_PCD_DataOutStageCallback>
 800411e:	e046      	b.n	80041ae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a26      	ldr	r2, [pc, #152]	; (80041bc <PCD_EP_OutXfrComplete_int+0x214>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d124      	bne.n	8004172 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413e:	461a      	mov	r2, r3
 8004140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004144:	6093      	str	r3, [r2, #8]
 8004146:	e032      	b.n	80041ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	461a      	mov	r2, r3
 8004160:	2320      	movs	r3, #32
 8004162:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	4619      	mov	r1, r3
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f011 fbd0 	bl	8015910 <HAL_PCD_DataOutStageCallback>
 8004170:	e01d      	b.n	80041ae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d114      	bne.n	80041a2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d108      	bne.n	80041a2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800419a:	461a      	mov	r2, r3
 800419c:	2100      	movs	r1, #0
 800419e:	f005 ff75 	bl	800a08c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f011 fbb1 	bl	8015910 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	4f54300a 	.word	0x4f54300a
 80041bc:	4f54310a 	.word	0x4f54310a

080041c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	333c      	adds	r3, #60	; 0x3c
 80041d8:	3304      	adds	r3, #4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4a15      	ldr	r2, [pc, #84]	; (8004248 <PCD_EP_OutSetupPacket_int+0x88>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d90e      	bls.n	8004214 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420c:	461a      	mov	r2, r3
 800420e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004212:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f011 fb69 	bl	80158ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <PCD_EP_OutSetupPacket_int+0x88>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d90c      	bls.n	800423c <PCD_EP_OutSetupPacket_int+0x7c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d108      	bne.n	800423c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004234:	461a      	mov	r2, r3
 8004236:	2101      	movs	r1, #1
 8004238:	f005 ff28 	bl	800a08c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	4f54300a 	.word	0x4f54300a

0800424c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	70fb      	strb	r3, [r7, #3]
 8004258:	4613      	mov	r3, r2
 800425a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d107      	bne.n	800427a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800426a:	883b      	ldrh	r3, [r7, #0]
 800426c:	0419      	lsls	r1, r3, #16
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	430a      	orrs	r2, r1
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
 8004278:	e028      	b.n	80042cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	0c1b      	lsrs	r3, r3, #16
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	4413      	add	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004288:	2300      	movs	r3, #0
 800428a:	73fb      	strb	r3, [r7, #15]
 800428c:	e00d      	b.n	80042aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	3340      	adds	r3, #64	; 0x40
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	0c1b      	lsrs	r3, r3, #16
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	4413      	add	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	3301      	adds	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
 80042aa:	7bfa      	ldrb	r2, [r7, #15]
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d3ec      	bcc.n	800428e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042b4:	883b      	ldrh	r3, [r7, #0]
 80042b6:	0418      	lsls	r0, r3, #16
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6819      	ldr	r1, [r3, #0]
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	3b01      	subs	r3, #1
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	4302      	orrs	r2, r0
 80042c4:	3340      	adds	r3, #64	; 0x40
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	460b      	mov	r3, r1
 80042e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	887a      	ldrh	r2, [r7, #2]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_PCDEx_ActivateLPM+0x44>)
 800432c:	4313      	orrs	r3, r2
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	10000003 	.word	0x10000003

08004344 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a04      	ldr	r2, [pc, #16]	; (8004360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800434e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40007000 	.word	0x40007000

08004364 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	4b23      	ldr	r3, [pc, #140]	; (80043fc <HAL_PWREx_EnableOverDrive+0x98>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	4a22      	ldr	r2, [pc, #136]	; (80043fc <HAL_PWREx_EnableOverDrive+0x98>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_PWREx_EnableOverDrive+0x98>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004386:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004392:	f7fd f8b3 	bl	80014fc <HAL_GetTick>
 8004396:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004398:	e009      	b.n	80043ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800439a:	f7fd f8af 	bl	80014fc <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043a8:	d901      	bls.n	80043ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e022      	b.n	80043f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043ae:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ba:	d1ee      	bne.n	800439a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043bc:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0f      	ldr	r2, [pc, #60]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043c8:	f7fd f898 	bl	80014fc <HAL_GetTick>
 80043cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043ce:	e009      	b.n	80043e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043d0:	f7fd f894 	bl	80014fc <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043de:	d901      	bls.n	80043e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e007      	b.n	80043f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043f0:	d1ee      	bne.n	80043d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	40007000 	.word	0x40007000

08004404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800440c:	2300      	movs	r3, #0
 800440e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e29b      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8087 	beq.w	8004536 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004428:	4b96      	ldr	r3, [pc, #600]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b04      	cmp	r3, #4
 8004432:	d00c      	beq.n	800444e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004434:	4b93      	ldr	r3, [pc, #588]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d112      	bne.n	8004466 <HAL_RCC_OscConfig+0x62>
 8004440:	4b90      	ldr	r3, [pc, #576]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444c:	d10b      	bne.n	8004466 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444e:	4b8d      	ldr	r3, [pc, #564]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d06c      	beq.n	8004534 <HAL_RCC_OscConfig+0x130>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d168      	bne.n	8004534 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e275      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x7a>
 8004470:	4b84      	ldr	r3, [pc, #528]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a83      	ldr	r2, [pc, #524]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e02e      	b.n	80044dc <HAL_RCC_OscConfig+0xd8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x9c>
 8004486:	4b7f      	ldr	r3, [pc, #508]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a7e      	ldr	r2, [pc, #504]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800448c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b7c      	ldr	r3, [pc, #496]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a7b      	ldr	r2, [pc, #492]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xd8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0xc0>
 80044aa:	4b76      	ldr	r3, [pc, #472]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a75      	ldr	r2, [pc, #468]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b73      	ldr	r3, [pc, #460]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a72      	ldr	r2, [pc, #456]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xd8>
 80044c4:	4b6f      	ldr	r3, [pc, #444]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6e      	ldr	r2, [pc, #440]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b6c      	ldr	r3, [pc, #432]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a6b      	ldr	r2, [pc, #428]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fd f80a 	bl	80014fc <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fd f806 	bl	80014fc <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e229      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b61      	ldr	r3, [pc, #388]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xe8>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fc fff6 	bl	80014fc <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004514:	f7fc fff2 	bl	80014fc <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e215      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b57      	ldr	r3, [pc, #348]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x110>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d069      	beq.n	8004616 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004542:	4b50      	ldr	r3, [pc, #320]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454e:	4b4d      	ldr	r3, [pc, #308]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x190>
 800455a:	4b4a      	ldr	r3, [pc, #296]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b47      	ldr	r3, [pc, #284]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x17a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1e9      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b41      	ldr	r3, [pc, #260]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	493d      	ldr	r1, [pc, #244]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e040      	b.n	8004616 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d023      	beq.n	80045e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b39      	ldr	r3, [pc, #228]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a38      	ldr	r2, [pc, #224]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fc ffa8 	bl	80014fc <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b0:	f7fc ffa4 	bl	80014fc <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1c7      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c2:	4b30      	ldr	r3, [pc, #192]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ce:	4b2d      	ldr	r3, [pc, #180]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4929      	ldr	r1, [pc, #164]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]
 80045e2:	e018      	b.n	8004616 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e4:	4b27      	ldr	r3, [pc, #156]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a26      	ldr	r2, [pc, #152]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fc ff84 	bl	80014fc <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f8:	f7fc ff80 	bl	80014fc <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e1a3      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460a:	4b1e      	ldr	r3, [pc, #120]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d038      	beq.n	8004694 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d019      	beq.n	800465e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800462c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462e:	4a15      	ldr	r2, [pc, #84]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004636:	f7fc ff61 	bl	80014fc <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463e:	f7fc ff5d 	bl	80014fc <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e180      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x23a>
 800465c:	e01a      	b.n	8004694 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004662:	4a08      	ldr	r2, [pc, #32]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466a:	f7fc ff47 	bl	80014fc <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004670:	e00a      	b.n	8004688 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004672:	f7fc ff43 	bl	80014fc <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d903      	bls.n	8004688 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e166      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
 8004684:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	4b92      	ldr	r3, [pc, #584]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800468a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ee      	bne.n	8004672 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80a4 	beq.w	80047ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a2:	4b8c      	ldr	r3, [pc, #560]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ae:	4b89      	ldr	r3, [pc, #548]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	4a88      	ldr	r2, [pc, #544]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ba:	4b86      	ldr	r3, [pc, #536]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c6:	2301      	movs	r3, #1
 80046c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ca:	4b83      	ldr	r3, [pc, #524]	; (80048d8 <HAL_RCC_OscConfig+0x4d4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d118      	bne.n	8004708 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046d6:	4b80      	ldr	r3, [pc, #512]	; (80048d8 <HAL_RCC_OscConfig+0x4d4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a7f      	ldr	r2, [pc, #508]	; (80048d8 <HAL_RCC_OscConfig+0x4d4>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e2:	f7fc ff0b 	bl	80014fc <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fc ff07 	bl	80014fc <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b64      	cmp	r3, #100	; 0x64
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e12a      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046fc:	4b76      	ldr	r3, [pc, #472]	; (80048d8 <HAL_RCC_OscConfig+0x4d4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x31a>
 8004710:	4b70      	ldr	r3, [pc, #448]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	4a6f      	ldr	r2, [pc, #444]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6713      	str	r3, [r2, #112]	; 0x70
 800471c:	e02d      	b.n	800477a <HAL_RCC_OscConfig+0x376>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x33c>
 8004726:	4b6b      	ldr	r3, [pc, #428]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	4a6a      	ldr	r2, [pc, #424]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	6713      	str	r3, [r2, #112]	; 0x70
 8004732:	4b68      	ldr	r3, [pc, #416]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	4a67      	ldr	r2, [pc, #412]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004738:	f023 0304 	bic.w	r3, r3, #4
 800473c:	6713      	str	r3, [r2, #112]	; 0x70
 800473e:	e01c      	b.n	800477a <HAL_RCC_OscConfig+0x376>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b05      	cmp	r3, #5
 8004746:	d10c      	bne.n	8004762 <HAL_RCC_OscConfig+0x35e>
 8004748:	4b62      	ldr	r3, [pc, #392]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	4a61      	ldr	r2, [pc, #388]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800474e:	f043 0304 	orr.w	r3, r3, #4
 8004752:	6713      	str	r3, [r2, #112]	; 0x70
 8004754:	4b5f      	ldr	r3, [pc, #380]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	4a5e      	ldr	r2, [pc, #376]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	6713      	str	r3, [r2, #112]	; 0x70
 8004760:	e00b      	b.n	800477a <HAL_RCC_OscConfig+0x376>
 8004762:	4b5c      	ldr	r3, [pc, #368]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004766:	4a5b      	ldr	r2, [pc, #364]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	6713      	str	r3, [r2, #112]	; 0x70
 800476e:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	4a58      	ldr	r2, [pc, #352]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004774:	f023 0304 	bic.w	r3, r3, #4
 8004778:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d015      	beq.n	80047ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004782:	f7fc febb 	bl	80014fc <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004788:	e00a      	b.n	80047a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478a:	f7fc feb7 	bl	80014fc <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f241 3288 	movw	r2, #5000	; 0x1388
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0d8      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a0:	4b4c      	ldr	r3, [pc, #304]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0ee      	beq.n	800478a <HAL_RCC_OscConfig+0x386>
 80047ac:	e014      	b.n	80047d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fc fea5 	bl	80014fc <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fc fea1 	bl	80014fc <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e0c2      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047cc:	4b41      	ldr	r3, [pc, #260]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ee      	bne.n	80047b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047d8:	7dfb      	ldrb	r3, [r7, #23]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d105      	bne.n	80047ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047de:	4b3d      	ldr	r3, [pc, #244]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4a3c      	ldr	r2, [pc, #240]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80047e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80ae 	beq.w	8004950 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f4:	4b37      	ldr	r3, [pc, #220]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d06d      	beq.n	80048dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d14b      	bne.n	80048a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004808:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a31      	ldr	r2, [pc, #196]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800480e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fc fe72 	bl	80014fc <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481c:	f7fc fe6e 	bl	80014fc <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e091      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482e:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	3b01      	subs	r3, #1
 8004854:	041b      	lsls	r3, r3, #16
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	071b      	lsls	r3, r3, #28
 8004866:	491b      	ldr	r1, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800486c:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fc fe40 	bl	80014fc <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004880:	f7fc fe3c 	bl	80014fc <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e05f      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x47c>
 800489e:	e057      	b.n	8004950 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80048a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fc fe26 	bl	80014fc <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b4:	f7fc fe22 	bl	80014fc <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e045      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c6:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x4b0>
 80048d2:	e03d      	b.n	8004950 <HAL_RCC_OscConfig+0x54c>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048dc:	4b1f      	ldr	r3, [pc, #124]	; (800495c <HAL_RCC_OscConfig+0x558>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d030      	beq.n	800494c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d129      	bne.n	800494c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004902:	429a      	cmp	r2, r3
 8004904:	d122      	bne.n	800494c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800490c:	4013      	ands	r3, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004912:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004914:	4293      	cmp	r3, r2
 8004916:	d119      	bne.n	800494c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	3b01      	subs	r3, #1
 8004926:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d10f      	bne.n	800494c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d107      	bne.n	800494c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800

08004960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0d0      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004978:	4b6a      	ldr	r3, [pc, #424]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d910      	bls.n	80049a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b67      	ldr	r3, [pc, #412]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f023 020f 	bic.w	r2, r3, #15
 800498e:	4965      	ldr	r1, [pc, #404]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b63      	ldr	r3, [pc, #396]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0b8      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d020      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c0:	4b59      	ldr	r3, [pc, #356]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a58      	ldr	r2, [pc, #352]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 80049c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d8:	4b53      	ldr	r3, [pc, #332]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4a52      	ldr	r2, [pc, #328]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 80049de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e4:	4b50      	ldr	r3, [pc, #320]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	494d      	ldr	r1, [pc, #308]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d040      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0a:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d115      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e07f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a22:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e073      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a32:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e06b      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a42:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f023 0203 	bic.w	r2, r3, #3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	4936      	ldr	r1, [pc, #216]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a54:	f7fc fd52 	bl	80014fc <HAL_GetTick>
 8004a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a5c:	f7fc fd4e 	bl	80014fc <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e053      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	4b2d      	ldr	r3, [pc, #180]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 020c 	and.w	r2, r3, #12
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d1eb      	bne.n	8004a5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a84:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d210      	bcs.n	8004ab4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 020f 	bic.w	r2, r3, #15
 8004a9a:	4922      	ldr	r1, [pc, #136]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e032      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac0:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4916      	ldr	r1, [pc, #88]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	490e      	ldr	r1, [pc, #56]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004af2:	f000 f821 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8004af6:	4601      	mov	r1, r0
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <HAL_RCC_ClockConfig+0x1cc>)
 8004b04:	5cd3      	ldrb	r3, [r2, r3]
 8004b06:	fa21 f303 	lsr.w	r3, r1, r3
 8004b0a:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <HAL_RCC_ClockConfig+0x1d0>)
 8004b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b0e:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <HAL_RCC_ClockConfig+0x1d4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fc fbb8 	bl	8001288 <HAL_InitTick>

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40023c00 	.word	0x40023c00
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	0801622c 	.word	0x0801622c
 8004b30:	20000010 	.word	0x20000010
 8004b34:	20000014 	.word	0x20000014

08004b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	2300      	movs	r3, #0
 8004b48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b4e:	4b63      	ldr	r3, [pc, #396]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d007      	beq.n	8004b6a <HAL_RCC_GetSysClockFreq+0x32>
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d008      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x38>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f040 80b4 	bne.w	8004ccc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b64:	4b5e      	ldr	r3, [pc, #376]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b66:	60bb      	str	r3, [r7, #8]
      break;
 8004b68:	e0b3      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b6a:	4b5e      	ldr	r3, [pc, #376]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004b6c:	60bb      	str	r3, [r7, #8]
      break;
 8004b6e:	e0b0      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b70:	4b5a      	ldr	r3, [pc, #360]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b78:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b7a:	4b58      	ldr	r3, [pc, #352]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d04a      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b86:	4b55      	ldr	r3, [pc, #340]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	f04f 0400 	mov.w	r4, #0
 8004b90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	ea03 0501 	and.w	r5, r3, r1
 8004b9c:	ea04 0602 	and.w	r6, r4, r2
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	4632      	mov	r2, r6
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	f04f 0400 	mov.w	r4, #0
 8004bac:	0154      	lsls	r4, r2, #5
 8004bae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bb2:	014b      	lsls	r3, r1, #5
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	1b49      	subs	r1, r1, r5
 8004bba:	eb62 0206 	sbc.w	r2, r2, r6
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	f04f 0400 	mov.w	r4, #0
 8004bc6:	0194      	lsls	r4, r2, #6
 8004bc8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bcc:	018b      	lsls	r3, r1, #6
 8004bce:	1a5b      	subs	r3, r3, r1
 8004bd0:	eb64 0402 	sbc.w	r4, r4, r2
 8004bd4:	f04f 0100 	mov.w	r1, #0
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	00e2      	lsls	r2, r4, #3
 8004bde:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004be2:	00d9      	lsls	r1, r3, #3
 8004be4:	460b      	mov	r3, r1
 8004be6:	4614      	mov	r4, r2
 8004be8:	195b      	adds	r3, r3, r5
 8004bea:	eb44 0406 	adc.w	r4, r4, r6
 8004bee:	f04f 0100 	mov.w	r1, #0
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	0262      	lsls	r2, r4, #9
 8004bf8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004bfc:	0259      	lsls	r1, r3, #9
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4614      	mov	r4, r2
 8004c02:	4618      	mov	r0, r3
 8004c04:	4621      	mov	r1, r4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f04f 0400 	mov.w	r4, #0
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4623      	mov	r3, r4
 8004c10:	f7fb fb16 	bl	8000240 <__aeabi_uldivmod>
 8004c14:	4603      	mov	r3, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	e049      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1c:	4b2f      	ldr	r3, [pc, #188]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	099b      	lsrs	r3, r3, #6
 8004c22:	f04f 0400 	mov.w	r4, #0
 8004c26:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	ea03 0501 	and.w	r5, r3, r1
 8004c32:	ea04 0602 	and.w	r6, r4, r2
 8004c36:	4629      	mov	r1, r5
 8004c38:	4632      	mov	r2, r6
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	f04f 0400 	mov.w	r4, #0
 8004c42:	0154      	lsls	r4, r2, #5
 8004c44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c48:	014b      	lsls	r3, r1, #5
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	1b49      	subs	r1, r1, r5
 8004c50:	eb62 0206 	sbc.w	r2, r2, r6
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	f04f 0400 	mov.w	r4, #0
 8004c5c:	0194      	lsls	r4, r2, #6
 8004c5e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c62:	018b      	lsls	r3, r1, #6
 8004c64:	1a5b      	subs	r3, r3, r1
 8004c66:	eb64 0402 	sbc.w	r4, r4, r2
 8004c6a:	f04f 0100 	mov.w	r1, #0
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	00e2      	lsls	r2, r4, #3
 8004c74:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c78:	00d9      	lsls	r1, r3, #3
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4614      	mov	r4, r2
 8004c7e:	195b      	adds	r3, r3, r5
 8004c80:	eb44 0406 	adc.w	r4, r4, r6
 8004c84:	f04f 0100 	mov.w	r1, #0
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	02a2      	lsls	r2, r4, #10
 8004c8e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c92:	0299      	lsls	r1, r3, #10
 8004c94:	460b      	mov	r3, r1
 8004c96:	4614      	mov	r4, r2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f04f 0400 	mov.w	r4, #0
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4623      	mov	r3, r4
 8004ca6:	f7fb facb 	bl	8000240 <__aeabi_uldivmod>
 8004caa:	4603      	mov	r3, r0
 8004cac:	460c      	mov	r4, r1
 8004cae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	60bb      	str	r3, [r7, #8]
      break;
 8004cca:	e002      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ccc:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004cce:	60bb      	str	r3, [r7, #8]
      break;
 8004cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	00f42400 	.word	0x00f42400
 8004ce4:	007a1200 	.word	0x007a1200

08004ce8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cec:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cee:	681b      	ldr	r3, [r3, #0]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000010 	.word	0x20000010

08004d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d04:	f7ff fff0 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d08:	4601      	mov	r1, r0
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	0a9b      	lsrs	r3, r3, #10
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	4a03      	ldr	r2, [pc, #12]	; (8004d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d16:	5cd3      	ldrb	r3, [r2, r3]
 8004d18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40023800 	.word	0x40023800
 8004d24:	0801623c 	.word	0x0801623c

08004d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d2c:	f7ff ffdc 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d30:	4601      	mov	r1, r0
 8004d32:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	0b5b      	lsrs	r3, r3, #13
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	4a03      	ldr	r2, [pc, #12]	; (8004d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d3e:	5cd3      	ldrb	r3, [r2, r3]
 8004d40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	0801623c 	.word	0x0801623c

08004d50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	220f      	movs	r2, #15
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d60:	4b12      	ldr	r3, [pc, #72]	; (8004dac <HAL_RCC_GetClockConfig+0x5c>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0203 	and.w	r2, r3, #3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <HAL_RCC_GetClockConfig+0x5c>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <HAL_RCC_GetClockConfig+0x5c>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <HAL_RCC_GetClockConfig+0x5c>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	08db      	lsrs	r3, r3, #3
 8004d8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d92:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <HAL_RCC_GetClockConfig+0x60>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 020f 	and.w	r2, r3, #15
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	601a      	str	r2, [r3, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40023800 	.word	0x40023800
 8004db0:	40023c00 	.word	0x40023c00

08004db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b088      	sub	sp, #32
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d012      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ddc:	4b69      	ldr	r3, [pc, #420]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	4a68      	ldr	r2, [pc, #416]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004de6:	6093      	str	r3, [r2, #8]
 8004de8:	4b66      	ldr	r3, [pc, #408]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df0:	4964      	ldr	r1, [pc, #400]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d017      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e0e:	4b5d      	ldr	r3, [pc, #372]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	4959      	ldr	r1, [pc, #356]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d017      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e4a:	4b4e      	ldr	r3, [pc, #312]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	494a      	ldr	r1, [pc, #296]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e68:	d101      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e76:	2301      	movs	r3, #1
 8004e78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e86:	2301      	movs	r3, #1
 8004e88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 808b 	beq.w	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e98:	4b3a      	ldr	r3, [pc, #232]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	4a39      	ldr	r2, [pc, #228]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea4:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eac:	60bb      	str	r3, [r7, #8]
 8004eae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004eb0:	4b35      	ldr	r3, [pc, #212]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a34      	ldr	r2, [pc, #208]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ebc:	f7fc fb1e 	bl	80014fc <HAL_GetTick>
 8004ec0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec4:	f7fc fb1a 	bl	80014fc <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b64      	cmp	r3, #100	; 0x64
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e38d      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ed6:	4b2c      	ldr	r3, [pc, #176]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ee2:	4b28      	ldr	r3, [pc, #160]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d035      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d02e      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f00:	4b20      	ldr	r3, [pc, #128]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f0a:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f14:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f16:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1a:	4a1a      	ldr	r2, [pc, #104]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f22:	4a18      	ldr	r2, [pc, #96]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f28:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d114      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f34:	f7fc fae2 	bl	80014fc <HAL_GetTick>
 8004f38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f3c:	f7fc fade 	bl	80014fc <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e34f      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f52:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0ee      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f6a:	d111      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f6c:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f78:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f7a:	400b      	ands	r3, r1
 8004f7c:	4901      	ldr	r1, [pc, #4]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	608b      	str	r3, [r1, #8]
 8004f82:	e00b      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f84:	40023800 	.word	0x40023800
 8004f88:	40007000 	.word	0x40007000
 8004f8c:	0ffffcff 	.word	0x0ffffcff
 8004f90:	4bb3      	ldr	r3, [pc, #716]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4ab2      	ldr	r2, [pc, #712]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f9a:	6093      	str	r3, [r2, #8]
 8004f9c:	4bb0      	ldr	r3, [pc, #704]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa8:	49ad      	ldr	r1, [pc, #692]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d010      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fba:	4ba9      	ldr	r3, [pc, #676]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fc0:	4aa7      	ldr	r2, [pc, #668]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fca:	4ba5      	ldr	r3, [pc, #660]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fcc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	49a2      	ldr	r1, [pc, #648]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fe8:	4b9d      	ldr	r3, [pc, #628]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff6:	499a      	ldr	r1, [pc, #616]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800500a:	4b95      	ldr	r3, [pc, #596]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005010:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005018:	4991      	ldr	r1, [pc, #580]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800502c:	4b8c      	ldr	r3, [pc, #560]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503a:	4989      	ldr	r1, [pc, #548]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800504e:	4b84      	ldr	r3, [pc, #528]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005054:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505c:	4980      	ldr	r1, [pc, #512]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005070:	4b7b      	ldr	r3, [pc, #492]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	f023 0203 	bic.w	r2, r3, #3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	4978      	ldr	r1, [pc, #480]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005092:	4b73      	ldr	r3, [pc, #460]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	f023 020c 	bic.w	r2, r3, #12
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050a0:	496f      	ldr	r1, [pc, #444]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050b4:	4b6a      	ldr	r3, [pc, #424]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c2:	4967      	ldr	r1, [pc, #412]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050d6:	4b62      	ldr	r3, [pc, #392]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e4:	495e      	ldr	r1, [pc, #376]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050f8:	4b59      	ldr	r3, [pc, #356]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	4956      	ldr	r1, [pc, #344]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800511a:	4b51      	ldr	r3, [pc, #324]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005120:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	494d      	ldr	r1, [pc, #308]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800513c:	4b48      	ldr	r3, [pc, #288]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005142:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514a:	4945      	ldr	r1, [pc, #276]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800515e:	4b40      	ldr	r3, [pc, #256]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005164:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516c:	493c      	ldr	r1, [pc, #240]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005180:	4b37      	ldr	r3, [pc, #220]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518e:	4934      	ldr	r1, [pc, #208]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d011      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051a2:	4b2f      	ldr	r3, [pc, #188]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b0:	492b      	ldr	r1, [pc, #172]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051c0:	d101      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051c2:	2301      	movs	r3, #1
 80051c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051d2:	2301      	movs	r3, #1
 80051d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051e2:	4b1f      	ldr	r3, [pc, #124]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f0:	491b      	ldr	r1, [pc, #108]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00b      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005204:	4b16      	ldr	r3, [pc, #88]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005214:	4912      	ldr	r1, [pc, #72]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005228:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005238:	4909      	ldr	r1, [pc, #36]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00f      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800524c:	4b04      	ldr	r3, [pc, #16]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800524e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005252:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	e002      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800525e:	bf00      	nop
 8005260:	40023800 	.word	0x40023800
 8005264:	4985      	ldr	r1, [pc, #532]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00b      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005278:	4b80      	ldr	r3, [pc, #512]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800527a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800527e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005288:	497c      	ldr	r1, [pc, #496]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d005      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800529e:	f040 80d6 	bne.w	800544e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052a2:	4b76      	ldr	r3, [pc, #472]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a75      	ldr	r2, [pc, #468]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ae:	f7fc f925 	bl	80014fc <HAL_GetTick>
 80052b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052b4:	e008      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052b6:	f7fc f921 	bl	80014fc <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b64      	cmp	r3, #100	; 0x64
 80052c2:	d901      	bls.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e194      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052c8:	4b6c      	ldr	r3, [pc, #432]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f0      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d021      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d11d      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052e8:	4b64      	ldr	r3, [pc, #400]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052f6:	4b61      	ldr	r3, [pc, #388]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fc:	0e1b      	lsrs	r3, r3, #24
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	019a      	lsls	r2, r3, #6
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	431a      	orrs	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	061b      	lsls	r3, r3, #24
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	071b      	lsls	r3, r3, #28
 800531c:	4957      	ldr	r1, [pc, #348]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005338:	d00a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005342:	2b00      	cmp	r3, #0
 8005344:	d02e      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800534e:	d129      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005350:	4b4a      	ldr	r3, [pc, #296]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800535e:	4b47      	ldr	r3, [pc, #284]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005364:	0f1b      	lsrs	r3, r3, #28
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	019a      	lsls	r2, r3, #6
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	041b      	lsls	r3, r3, #16
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	061b      	lsls	r3, r3, #24
 800537e:	431a      	orrs	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	071b      	lsls	r3, r3, #28
 8005384:	493d      	ldr	r1, [pc, #244]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800538c:	4b3b      	ldr	r3, [pc, #236]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800538e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005392:	f023 021f 	bic.w	r2, r3, #31
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	3b01      	subs	r3, #1
 800539c:	4937      	ldr	r1, [pc, #220]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01d      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053b0:	4b32      	ldr	r3, [pc, #200]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b6:	0e1b      	lsrs	r3, r3, #24
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053be:	4b2f      	ldr	r3, [pc, #188]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c4:	0f1b      	lsrs	r3, r3, #28
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	019a      	lsls	r2, r3, #6
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	431a      	orrs	r2, r3
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	061b      	lsls	r3, r3, #24
 80053de:	431a      	orrs	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	071b      	lsls	r3, r3, #28
 80053e4:	4925      	ldr	r1, [pc, #148]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d011      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	019a      	lsls	r2, r3, #6
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	041b      	lsls	r3, r3, #16
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	061b      	lsls	r3, r3, #24
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	071b      	lsls	r3, r3, #28
 8005414:	4919      	ldr	r1, [pc, #100]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800541c:	4b17      	ldr	r3, [pc, #92]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a16      	ldr	r2, [pc, #88]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005422:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005428:	f7fc f868 	bl	80014fc <HAL_GetTick>
 800542c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005430:	f7fc f864 	bl	80014fc <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b64      	cmp	r3, #100	; 0x64
 800543c:	d901      	bls.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e0d7      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005442:	4b0e      	ldr	r3, [pc, #56]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b01      	cmp	r3, #1
 8005452:	f040 80cd 	bne.w	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005456:	4b09      	ldr	r3, [pc, #36]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a08      	ldr	r2, [pc, #32]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800545c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005462:	f7fc f84b 	bl	80014fc <HAL_GetTick>
 8005466:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005468:	e00a      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800546a:	f7fc f847 	bl	80014fc <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b64      	cmp	r3, #100	; 0x64
 8005476:	d903      	bls.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e0ba      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800547c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005480:	4b5e      	ldr	r3, [pc, #376]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800548c:	d0ed      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d02e      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d12a      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054b6:	4b51      	ldr	r3, [pc, #324]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054bc:	0c1b      	lsrs	r3, r3, #16
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054c4:	4b4d      	ldr	r3, [pc, #308]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	0f1b      	lsrs	r3, r3, #28
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	019a      	lsls	r2, r3, #6
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	061b      	lsls	r3, r3, #24
 80054e4:	431a      	orrs	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	071b      	lsls	r3, r3, #28
 80054ea:	4944      	ldr	r1, [pc, #272]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054f2:	4b42      	ldr	r3, [pc, #264]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	3b01      	subs	r3, #1
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	493d      	ldr	r1, [pc, #244]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d022      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800551c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005520:	d11d      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005522:	4b36      	ldr	r3, [pc, #216]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005528:	0e1b      	lsrs	r3, r3, #24
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005530:	4b32      	ldr	r3, [pc, #200]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005536:	0f1b      	lsrs	r3, r3, #28
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	019a      	lsls	r2, r3, #6
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	431a      	orrs	r2, r3
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	061b      	lsls	r3, r3, #24
 8005550:	431a      	orrs	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	071b      	lsls	r3, r3, #28
 8005556:	4929      	ldr	r1, [pc, #164]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d028      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800556a:	4b24      	ldr	r3, [pc, #144]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	0e1b      	lsrs	r3, r3, #24
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005578:	4b20      	ldr	r3, [pc, #128]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	0c1b      	lsrs	r3, r3, #16
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	019a      	lsls	r2, r3, #6
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	431a      	orrs	r2, r3
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	061b      	lsls	r3, r3, #24
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	071b      	lsls	r3, r3, #28
 800559e:	4917      	ldr	r1, [pc, #92]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055a6:	4b15      	ldr	r3, [pc, #84]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	4911      	ldr	r1, [pc, #68]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055bc:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0e      	ldr	r2, [pc, #56]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c8:	f7fb ff98 	bl	80014fc <HAL_GetTick>
 80055cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055d0:	f7fb ff94 	bl	80014fc <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b64      	cmp	r3, #100	; 0x64
 80055dc:	d901      	bls.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e007      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ee:	d1ef      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800

08005600 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e022      	b.n	8005658 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d105      	bne.n	800562a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7fb fd01 	bl	800102c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2203      	movs	r2, #3
 800562e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f814 	bl	8005660 <HAL_SD_InitCard>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e00a      	b.n	8005658 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005660:	b5b0      	push	{r4, r5, r7, lr}
 8005662:	b08e      	sub	sp, #56	; 0x38
 8005664:	af04      	add	r7, sp, #16
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005668:	2300      	movs	r3, #0
 800566a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005678:	2300      	movs	r3, #0
 800567a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800567c:	2376      	movs	r3, #118	; 0x76
 800567e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681d      	ldr	r5, [r3, #0]
 8005684:	466c      	mov	r4, sp
 8005686:	f107 0314 	add.w	r3, r7, #20
 800568a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800568e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005692:	f107 0308 	add.w	r3, r7, #8
 8005696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005698:	4628      	mov	r0, r5
 800569a:	f002 fcff 	bl	800809c <SDMMC_Init>
 800569e:	4603      	mov	r3, r0
 80056a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80056a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e03b      	b.n	8005728 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056be:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f002 fd33 	bl	8008130 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f001 fb62 	bl	8006da4 <SD_PowerON>
 80056e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e013      	b.n	8005728 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 fa81 	bl	8006c08 <SD_InitCard>
 8005706:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00b      	beq.n	8005726 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3728      	adds	r7, #40	; 0x28
 800572c:	46bd      	mov	sp, r7
 800572e:	bdb0      	pop	{r4, r5, r7, pc}

08005730 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b092      	sub	sp, #72	; 0x48
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800573e:	f7fb fedd 	bl	80014fc <HAL_GetTick>
 8005742:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d107      	bne.n	8005762 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e1d7      	b.n	8005b12 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b01      	cmp	r3, #1
 800576c:	f040 81ca 	bne.w	8005b04 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	441a      	add	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005780:	429a      	cmp	r2, r3
 8005782:	d907      	bls.n	8005794 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e1be      	b.n	8005b12 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2203      	movs	r2, #3
 8005798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2200      	movs	r2, #0
 80057a2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d002      	beq.n	80057b2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80057ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ae:	025b      	lsls	r3, r3, #9
 80057b0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057ba:	4618      	mov	r0, r3
 80057bc:	f002 fd4c 	bl	8008258 <SDMMC_CmdBlockLength>
 80057c0:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80057c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00f      	beq.n	80057e8 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a9a      	ldr	r2, [pc, #616]	; (8005a38 <HAL_SD_ReadBlocks+0x308>)
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d6:	431a      	orrs	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e194      	b.n	8005b12 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80057e8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ec:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	025b      	lsls	r3, r3, #9
 80057f2:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80057f4:	2390      	movs	r3, #144	; 0x90
 80057f6:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80057f8:	2302      	movs	r3, #2
 80057fa:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005800:	2301      	movs	r3, #1
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f107 0214 	add.w	r2, r7, #20
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f002 fcf6 	bl	8008200 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d90a      	bls.n	8005830 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2202      	movs	r2, #2
 800581e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005826:	4618      	mov	r0, r3
 8005828:	f002 fd5a 	bl	80082e0 <SDMMC_CmdReadMultiBlock>
 800582c:	6478      	str	r0, [r7, #68]	; 0x44
 800582e:	e009      	b.n	8005844 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800583c:	4618      	mov	r0, r3
 800583e:	f002 fd2d 	bl	800829c <SDMMC_CmdReadSingleBlock>
 8005842:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005846:	2b00      	cmp	r3, #0
 8005848:	d012      	beq.n	8005870 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a7a      	ldr	r2, [pc, #488]	; (8005a38 <HAL_SD_ReadBlocks+0x308>)
 8005850:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005858:	431a      	orrs	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e150      	b.n	8005b12 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005874:	e061      	b.n	800593a <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d03c      	beq.n	80058fe <HAL_SD_ReadBlocks+0x1ce>
 8005884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d039      	beq.n	80058fe <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800588a:	2300      	movs	r3, #0
 800588c:	643b      	str	r3, [r7, #64]	; 0x40
 800588e:	e033      	b.n	80058f8 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f002 fc2d 	bl	80080f4 <SDMMC_ReadFIFO>
 800589a:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80058a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a6:	3301      	adds	r3, #1
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80058aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ac:	3b01      	subs	r3, #1
 80058ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80058b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b2:	0a1b      	lsrs	r3, r3, #8
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	3301      	adds	r3, #1
 80058be:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80058c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c2:	3b01      	subs	r3, #1
 80058c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	0c1b      	lsrs	r3, r3, #16
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	3301      	adds	r3, #1
 80058d4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80058d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d8:	3b01      	subs	r3, #1
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80058dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058de:	0e1b      	lsrs	r3, r3, #24
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80058e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e8:	3301      	adds	r3, #1
 80058ea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80058ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ee:	3b01      	subs	r3, #1
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80058f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f4:	3301      	adds	r3, #1
 80058f6:	643b      	str	r3, [r7, #64]	; 0x40
 80058f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fa:	2b07      	cmp	r3, #7
 80058fc:	d9c8      	bls.n	8005890 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80058fe:	f7fb fdfd 	bl	80014fc <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800590a:	429a      	cmp	r2, r3
 800590c:	d902      	bls.n	8005914 <HAL_SD_ReadBlocks+0x1e4>
 800590e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005910:	2b00      	cmp	r3, #0
 8005912:	d112      	bne.n	800593a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a47      	ldr	r2, [pc, #284]	; (8005a38 <HAL_SD_ReadBlocks+0x308>)
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e0eb      	b.n	8005b12 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005940:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005944:	2b00      	cmp	r3, #0
 8005946:	d096      	beq.n	8005876 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d022      	beq.n	800599c <HAL_SD_ReadBlocks+0x26c>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d91f      	bls.n	800599c <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005960:	2b03      	cmp	r3, #3
 8005962:	d01b      	beq.n	800599c <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f002 fd1f 	bl	80083ac <SDMMC_CmdStopTransfer>
 800596e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005972:	2b00      	cmp	r3, #0
 8005974:	d012      	beq.n	800599c <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2f      	ldr	r2, [pc, #188]	; (8005a38 <HAL_SD_ReadBlocks+0x308>)
 800597c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005984:	431a      	orrs	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e0ba      	b.n	8005b12 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d012      	beq.n	80059d0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a22      	ldr	r2, [pc, #136]	; (8005a38 <HAL_SD_ReadBlocks+0x308>)
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	f043 0208 	orr.w	r2, r3, #8
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e0a0      	b.n	8005b12 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d012      	beq.n	8005a04 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <HAL_SD_ReadBlocks+0x308>)
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	f043 0202 	orr.w	r2, r3, #2
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e086      	b.n	8005b12 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d063      	beq.n	8005ada <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a08      	ldr	r2, [pc, #32]	; (8005a38 <HAL_SD_ReadBlocks+0x308>)
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	f043 0220 	orr.w	r2, r3, #32
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e06c      	b.n	8005b12 <HAL_SD_ReadBlocks+0x3e2>
 8005a38:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f002 fb57 	bl	80080f4 <SDMMC_ReadFIFO>
 8005a46:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a52:	3301      	adds	r3, #1
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	0a1b      	lsrs	r3, r3, #8
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a64:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a68:	3301      	adds	r3, #1
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a74:	0c1b      	lsrs	r3, r3, #16
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7e:	3301      	adds	r3, #1
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a84:	3b01      	subs	r3, #1
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	0e1b      	lsrs	r3, r3, #24
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a90:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a94:	3301      	adds	r3, #1
 8005a96:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005a9e:	f7fb fd2d 	bl	80014fc <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d902      	bls.n	8005ab4 <HAL_SD_ReadBlocks+0x384>
 8005aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d112      	bne.n	8005ada <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a18      	ldr	r2, [pc, #96]	; (8005b1c <HAL_SD_ReadBlocks+0x3ec>)
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e01b      	b.n	8005b12 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <HAL_SD_ReadBlocks+0x3be>
 8005ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1a6      	bne.n	8005a3c <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f240 523a 	movw	r2, #1338	; 0x53a
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e006      	b.n	8005b12 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
  }
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3748      	adds	r7, #72	; 0x48
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	004005ff 	.word	0x004005ff

08005b20 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b092      	sub	sp, #72	; 0x48
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005b2e:	f7fb fce5 	bl	80014fc <HAL_GetTick>
 8005b32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d107      	bne.n	8005b52 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e182      	b.n	8005e58 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	f040 8175 	bne.w	8005e4a <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	441a      	add	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d907      	bls.n	8005b84 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e169      	b.n	8005e58 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2203      	movs	r2, #3
 8005b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2200      	movs	r2, #0
 8005b92:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d002      	beq.n	8005ba2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9e:	025b      	lsls	r3, r3, #9
 8005ba0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005baa:	4618      	mov	r0, r3
 8005bac:	f002 fb54 	bl	8008258 <SDMMC_CmdBlockLength>
 8005bb0:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00f      	beq.n	8005bd8 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a9c      	ldr	r2, [pc, #624]	; (8005e30 <HAL_SD_WriteBlocks+0x310>)
 8005bbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e13f      	b.n	8005e58 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bdc:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	025b      	lsls	r3, r3, #9
 8005be2:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005be4:	2390      	movs	r3, #144	; 0x90
 8005be6:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005be8:	2300      	movs	r3, #0
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f107 0218 	add.w	r2, r7, #24
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f002 fafe 	bl	8008200 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d90a      	bls.n	8005c20 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c16:	4618      	mov	r0, r3
 8005c18:	f002 fba6 	bl	8008368 <SDMMC_CmdWriteMultiBlock>
 8005c1c:	6478      	str	r0, [r7, #68]	; 0x44
 8005c1e:	e009      	b.n	8005c34 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2210      	movs	r2, #16
 8005c24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f002 fb79 	bl	8008324 <SDMMC_CmdWriteSingleBlock>
 8005c32:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d012      	beq.n	8005c60 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a7c      	ldr	r2, [pc, #496]	; (8005e30 <HAL_SD_WriteBlocks+0x310>)
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0fb      	b.n	8005e58 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c64:	e065      	b.n	8005d32 <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d040      	beq.n	8005cf6 <HAL_SD_WriteBlocks+0x1d6>
 8005c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d03d      	beq.n	8005cf6 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7e:	e037      	b.n	8005cf0 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8005c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	3301      	adds	r3, #1
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	021a      	lsls	r2, r3, #8
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	041a      	lsls	r2, r3, #16
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb8:	3301      	adds	r3, #1
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	061a      	lsls	r2, r3, #24
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f107 0214 	add.w	r2, r7, #20
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f002 fa12 	bl	800810e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cec:	3301      	adds	r3, #1
 8005cee:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf2:	2b07      	cmp	r3, #7
 8005cf4:	d9c4      	bls.n	8005c80 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005cf6:	f7fb fc01 	bl	80014fc <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d902      	bls.n	8005d0c <HAL_SD_WriteBlocks+0x1ec>
 8005d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d112      	bne.n	8005d32 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a47      	ldr	r2, [pc, #284]	; (8005e30 <HAL_SD_WriteBlocks+0x310>)
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e092      	b.n	8005e58 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d38:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d092      	beq.n	8005c66 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d022      	beq.n	8005d94 <HAL_SD_WriteBlocks+0x274>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d91f      	bls.n	8005d94 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d01b      	beq.n	8005d94 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f002 fb23 	bl	80083ac <SDMMC_CmdStopTransfer>
 8005d66:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d012      	beq.n	8005d94 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a2f      	ldr	r2, [pc, #188]	; (8005e30 <HAL_SD_WriteBlocks+0x310>)
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e061      	b.n	8005e58 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d012      	beq.n	8005dc8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a22      	ldr	r2, [pc, #136]	; (8005e30 <HAL_SD_WriteBlocks+0x310>)
 8005da8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	f043 0208 	orr.w	r2, r3, #8
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e047      	b.n	8005e58 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d012      	beq.n	8005dfc <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a15      	ldr	r2, [pc, #84]	; (8005e30 <HAL_SD_WriteBlocks+0x310>)
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	f043 0202 	orr.w	r2, r3, #2
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e02d      	b.n	8005e58 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d014      	beq.n	8005e34 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a08      	ldr	r2, [pc, #32]	; (8005e30 <HAL_SD_WriteBlocks+0x310>)
 8005e10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	f043 0210 	orr.w	r2, r3, #16
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e013      	b.n	8005e58 <HAL_SD_WriteBlocks+0x338>
 8005e30:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e3c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e006      	b.n	8005e58 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
  }
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3748      	adds	r7, #72	; 0x48
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08c      	sub	sp, #48	; 0x30
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d107      	bne.n	8005e88 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e0cc      	b.n	8006022 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	f040 80c5 	bne.w	8006020 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	441a      	add	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d907      	bls.n	8005eba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e0b3      	b.n	8006022 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2203      	movs	r2, #3
 8005ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005ed8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	4a53      	ldr	r2, [pc, #332]	; (800602c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8005ee0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	4a52      	ldr	r2, [pc, #328]	; (8006030 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8005ee8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	2200      	movs	r2, #0
 8005ef0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3380      	adds	r3, #128	; 0x80
 8005efc:	4619      	mov	r1, r3
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	025b      	lsls	r3, r3, #9
 8005f04:	089b      	lsrs	r3, r3, #2
 8005f06:	f7fc fb47 	bl	8002598 <HAL_DMA_Start_IT>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d017      	beq.n	8005f40 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005f1e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a43      	ldr	r2, [pc, #268]	; (8006034 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8005f26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e070      	b.n	8006022 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0208 	orr.w	r2, r2, #8
 8005f4e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d002      	beq.n	8005f5e <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	025b      	lsls	r3, r3, #9
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f66:	4618      	mov	r0, r3
 8005f68:	f002 f976 	bl	8008258 <SDMMC_CmdBlockLength>
 8005f6c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00f      	beq.n	8005f94 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a2e      	ldr	r2, [pc, #184]	; (8006034 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	431a      	orrs	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e046      	b.n	8006022 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f94:	f04f 33ff 	mov.w	r3, #4294967295
 8005f98:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	025b      	lsls	r3, r3, #9
 8005f9e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005fa0:	2390      	movs	r3, #144	; 0x90
 8005fa2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005fac:	2301      	movs	r3, #1
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f107 0210 	add.w	r2, r7, #16
 8005fb8:	4611      	mov	r1, r2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f002 f920 	bl	8008200 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d90a      	bls.n	8005fdc <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2282      	movs	r2, #130	; 0x82
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f002 f984 	bl	80082e0 <SDMMC_CmdReadMultiBlock>
 8005fd8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005fda:	e009      	b.n	8005ff0 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2281      	movs	r2, #129	; 0x81
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f002 f957 	bl	800829c <SDMMC_CmdReadSingleBlock>
 8005fee:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d012      	beq.n	800601c <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a0e      	ldr	r2, [pc, #56]	; (8006034 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	431a      	orrs	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e002      	b.n	8006022 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	e000      	b.n	8006022 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8006020:	2302      	movs	r3, #2
  }
}
 8006022:	4618      	mov	r0, r3
 8006024:	3730      	adds	r7, #48	; 0x30
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	08006a17 	.word	0x08006a17
 8006030:	08006a89 	.word	0x08006a89
 8006034:	004005ff 	.word	0x004005ff

08006038 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08c      	sub	sp, #48	; 0x30
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d107      	bne.n	8006060 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e0cf      	b.n	8006200 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	f040 80c8 	bne.w	80061fe <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	441a      	add	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607e:	429a      	cmp	r2, r3
 8006080:	d907      	bls.n	8006092 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e0b6      	b.n	8006200 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2203      	movs	r2, #3
 8006096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2200      	movs	r2, #0
 80060a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 021a 	orr.w	r2, r2, #26
 80060b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b6:	4a54      	ldr	r2, [pc, #336]	; (8006208 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80060b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060be:	4a53      	ldr	r2, [pc, #332]	; (800620c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80060c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	2200      	movs	r2, #0
 80060c8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d002      	beq.n	80060d8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	025b      	lsls	r3, r3, #9
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060e0:	4618      	mov	r0, r3
 80060e2:	f002 f8b9 	bl	8008258 <SDMMC_CmdBlockLength>
 80060e6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00f      	beq.n	800610e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a47      	ldr	r2, [pc, #284]	; (8006210 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80060f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	431a      	orrs	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e078      	b.n	8006200 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d90a      	bls.n	800612a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	22a0      	movs	r2, #160	; 0xa0
 8006118:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006120:	4618      	mov	r0, r3
 8006122:	f002 f921 	bl	8008368 <SDMMC_CmdWriteMultiBlock>
 8006126:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006128:	e009      	b.n	800613e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2290      	movs	r2, #144	; 0x90
 800612e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006136:	4618      	mov	r0, r3
 8006138:	f002 f8f4 	bl	8008324 <SDMMC_CmdWriteSingleBlock>
 800613c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006140:	2b00      	cmp	r3, #0
 8006142:	d012      	beq.n	800616a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a31      	ldr	r2, [pc, #196]	; (8006210 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800614a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	431a      	orrs	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e04a      	b.n	8006200 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0208 	orr.w	r2, r2, #8
 8006178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3380      	adds	r3, #128	; 0x80
 8006186:	461a      	mov	r2, r3
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	025b      	lsls	r3, r3, #9
 800618c:	089b      	lsrs	r3, r3, #2
 800618e:	f7fc fa03 	bl	8002598 <HAL_DMA_Start_IT>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01a      	beq.n	80061ce <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 021a 	bic.w	r2, r2, #26
 80061a6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a18      	ldr	r2, [pc, #96]	; (8006210 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80061ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e018      	b.n	8006200 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061ce:	f04f 33ff 	mov.w	r3, #4294967295
 80061d2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	025b      	lsls	r3, r3, #9
 80061d8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80061da:	2390      	movs	r3, #144	; 0x90
 80061dc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80061de:	2300      	movs	r3, #0
 80061e0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80061e6:	2301      	movs	r3, #1
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f107 0210 	add.w	r2, r7, #16
 80061f2:	4611      	mov	r1, r2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f002 f803 	bl	8008200 <SDMMC_ConfigData>

      return HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e000      	b.n	8006200 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80061fe:	2302      	movs	r3, #2
  }
}
 8006200:	4618      	mov	r0, r3
 8006202:	3730      	adds	r7, #48	; 0x30
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	080069ed 	.word	0x080069ed
 800620c:	08006a89 	.word	0x08006a89
 8006210:	004005ff 	.word	0x004005ff

08006214 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <HAL_SD_IRQHandler+0x2e>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 ffc8 	bl	80071d0 <SD_Read_IT>
 8006240:	e153      	b.n	80064ea <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 808d 	beq.w	800636c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800625a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4ba3      	ldr	r3, [pc, #652]	; (80064f4 <HAL_SD_IRQHandler+0x2e0>)
 8006268:	400b      	ands	r3, r1
 800626a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0201 	bic.w	r2, r2, #1
 800627a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d039      	beq.n	80062fa <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d104      	bne.n	800629a <HAL_SD_IRQHandler+0x86>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d011      	beq.n	80062be <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4618      	mov	r0, r3
 80062a0:	f002 f884 	bl	80083ac <SDMMC_CmdStopTransfer>
 80062a4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f921 	bl	8006500 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80062c6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d104      	bne.n	80062ea <HAL_SD_IRQHandler+0xd6>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f004 f806 	bl	800a2fc <HAL_SD_RxCpltCallback>
 80062f0:	e0fb      	b.n	80064ea <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f003 fff8 	bl	800a2e8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80062f8:	e0f7      	b.n	80064ea <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80f2 	beq.w	80064ea <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b00      	cmp	r3, #0
 800630e:	d011      	beq.n	8006334 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4618      	mov	r0, r3
 8006316:	f002 f849 	bl	80083ac <SDMMC_CmdStopTransfer>
 800631a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d008      	beq.n	8006334 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f8e6 	bl	8006500 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	f040 80d5 	bne.w	80064ea <HAL_SD_IRQHandler+0x2d6>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	f040 80cf 	bne.w	80064ea <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0208 	bic.w	r2, r2, #8
 800635a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f003 ffbf 	bl	800a2e8 <HAL_SD_TxCpltCallback>
}
 800636a:	e0be      	b.n	80064ea <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <HAL_SD_IRQHandler+0x178>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 ff74 	bl	8007272 <SD_Write_IT>
 800638a:	e0ae      	b.n	80064ea <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006392:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 80a7 	beq.w	80064ea <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	f043 0202 	orr.w	r2, r3, #2
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	f043 0208 	orr.w	r2, r3, #8
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d6:	f003 0320 	and.w	r3, r3, #32
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e2:	f043 0220 	orr.w	r2, r3, #32
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d005      	beq.n	8006404 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	f043 0210 	orr.w	r2, r3, #16
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f240 523a 	movw	r2, #1338	; 0x53a
 800640c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800641c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f001 ffc2 	bl	80083ac <SDMMC_CmdStopTransfer>
 8006428:	4602      	mov	r2, r0
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f857 	bl	8006500 <HAL_SD_ErrorCallback>
}
 8006452:	e04a      	b.n	80064ea <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645a:	2b00      	cmp	r3, #0
 800645c:	d045      	beq.n	80064ea <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d104      	bne.n	8006472 <HAL_SD_IRQHandler+0x25e>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b00      	cmp	r3, #0
 8006470:	d011      	beq.n	8006496 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006476:	4a20      	ldr	r2, [pc, #128]	; (80064f8 <HAL_SD_IRQHandler+0x2e4>)
 8006478:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	4618      	mov	r0, r3
 8006480:	f7fc f8ea 	bl	8002658 <HAL_DMA_Abort_IT>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d02f      	beq.n	80064ea <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fb4c 	bl	8006b2c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006494:	e029      	b.n	80064ea <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <HAL_SD_IRQHandler+0x296>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d011      	beq.n	80064ce <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	4a13      	ldr	r2, [pc, #76]	; (80064fc <HAL_SD_IRQHandler+0x2e8>)
 80064b0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fc f8ce 	bl	8002658 <HAL_DMA_Abort_IT>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d013      	beq.n	80064ea <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fb67 	bl	8006b9a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80064cc:	e00d      	b.n	80064ea <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f003 fef6 	bl	800a2d4 <HAL_SD_AbortCallback>
}
 80064e8:	e7ff      	b.n	80064ea <HAL_SD_IRQHandler+0x2d6>
 80064ea:	bf00      	nop
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	ffff3ec5 	.word	0xffff3ec5
 80064f8:	08006b2d 	.word	0x08006b2d
 80064fc:	08006b9b 	.word	0x08006b9b

08006500 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006522:	0f9b      	lsrs	r3, r3, #30
 8006524:	b2da      	uxtb	r2, r3
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800652e:	0e9b      	lsrs	r3, r3, #26
 8006530:	b2db      	uxtb	r3, r3
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	b2da      	uxtb	r2, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006540:	0e1b      	lsrs	r3, r3, #24
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	b2da      	uxtb	r2, r3
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006552:	0c1b      	lsrs	r3, r3, #16
 8006554:	b2da      	uxtb	r2, r3
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800655e:	0a1b      	lsrs	r3, r3, #8
 8006560:	b2da      	uxtb	r2, r3
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800656a:	b2da      	uxtb	r2, r3
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006574:	0d1b      	lsrs	r3, r3, #20
 8006576:	b29a      	uxth	r2, r3
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006580:	0c1b      	lsrs	r3, r3, #16
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f003 030f 	and.w	r3, r3, #15
 8006588:	b2da      	uxtb	r2, r3
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006592:	0bdb      	lsrs	r3, r3, #15
 8006594:	b2db      	uxtb	r3, r3
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	b2da      	uxtb	r2, r3
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065a4:	0b9b      	lsrs	r3, r3, #14
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b6:	0b5b      	lsrs	r3, r3, #13
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065c8:	0b1b      	lsrs	r3, r3, #12
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2200      	movs	r2, #0
 80065da:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d163      	bne.n	80066ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065e8:	009a      	lsls	r2, r3, #2
 80065ea:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065ee:	4013      	ands	r3, r2
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80065f4:	0f92      	lsrs	r2, r2, #30
 80065f6:	431a      	orrs	r2, r3
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006600:	0edb      	lsrs	r3, r3, #27
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	b2da      	uxtb	r2, r3
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006612:	0e1b      	lsrs	r3, r3, #24
 8006614:	b2db      	uxtb	r3, r3
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	b2da      	uxtb	r2, r3
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006624:	0d5b      	lsrs	r3, r3, #21
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	b2da      	uxtb	r2, r3
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006636:	0c9b      	lsrs	r3, r3, #18
 8006638:	b2db      	uxtb	r3, r3
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	b2da      	uxtb	r2, r3
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006648:	0bdb      	lsrs	r3, r3, #15
 800664a:	b2db      	uxtb	r3, r3
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	b2da      	uxtb	r2, r3
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	7e1b      	ldrb	r3, [r3, #24]
 8006664:	b2db      	uxtb	r3, r3
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	3302      	adds	r3, #2
 800666c:	2201      	movs	r2, #1
 800666e:	fa02 f303 	lsl.w	r3, r2, r3
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006676:	fb02 f203 	mul.w	r2, r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	7a1b      	ldrb	r3, [r3, #8]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	2201      	movs	r2, #1
 800668a:	409a      	lsls	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006698:	0a52      	lsrs	r2, r2, #9
 800669a:	fb02 f203 	mul.w	r2, r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a8:	661a      	str	r2, [r3, #96]	; 0x60
 80066aa:	e031      	b.n	8006710 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d11d      	bne.n	80066f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b8:	041b      	lsls	r3, r3, #16
 80066ba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c2:	0c1b      	lsrs	r3, r3, #16
 80066c4:	431a      	orrs	r2, r3
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	3301      	adds	r3, #1
 80066d0:	029a      	lsls	r2, r3, #10
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	661a      	str	r2, [r3, #96]	; 0x60
 80066ee:	e00f      	b.n	8006710 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a58      	ldr	r2, [pc, #352]	; (8006858 <HAL_SD_GetCardCSD+0x344>)
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e09d      	b.n	800684c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006714:	0b9b      	lsrs	r3, r3, #14
 8006716:	b2db      	uxtb	r3, r3
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	b2da      	uxtb	r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006726:	09db      	lsrs	r3, r3, #7
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800672e:	b2da      	uxtb	r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006738:	b2db      	uxtb	r3, r3
 800673a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800673e:	b2da      	uxtb	r2, r3
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006748:	0fdb      	lsrs	r3, r3, #31
 800674a:	b2da      	uxtb	r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	0f5b      	lsrs	r3, r3, #29
 8006756:	b2db      	uxtb	r3, r3
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	b2da      	uxtb	r2, r3
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006766:	0e9b      	lsrs	r3, r3, #26
 8006768:	b2db      	uxtb	r3, r3
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	b2da      	uxtb	r2, r3
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006778:	0d9b      	lsrs	r3, r3, #22
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	b2da      	uxtb	r2, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	0d5b      	lsrs	r3, r3, #21
 800678c:	b2db      	uxtb	r3, r3
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	b2da      	uxtb	r2, r3
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	0c1b      	lsrs	r3, r3, #16
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ba:	0bdb      	lsrs	r3, r3, #15
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	0b9b      	lsrs	r3, r3, #14
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	0b5b      	lsrs	r3, r3, #13
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f6:	0b1b      	lsrs	r3, r3, #12
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680a:	0a9b      	lsrs	r3, r3, #10
 800680c:	b2db      	uxtb	r3, r3
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	b2da      	uxtb	r2, r3
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681e:	0a1b      	lsrs	r3, r3, #8
 8006820:	b2db      	uxtb	r3, r3
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	b2da      	uxtb	r2, r3
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	b2db      	uxtb	r3, r3
 8006836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800683a:	b2da      	uxtb	r2, r3
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	004005ff 	.word	0x004005ff

0800685c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80068b4:	b5b0      	push	{r4, r5, r7, lr}
 80068b6:	b08e      	sub	sp, #56	; 0x38
 80068b8:	af04      	add	r7, sp, #16
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2203      	movs	r2, #3
 80068c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d02e      	beq.n	800692c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d4:	d106      	bne.n	80068e4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38
 80068e2:	e029      	b.n	8006938 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ea:	d10a      	bne.n	8006902 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fb0f 	bl	8006f10 <SD_WideBus_Enable>
 80068f2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006900:	e01a      	b.n	8006938 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fb4c 	bl	8006fa6 <SD_WideBus_Disable>
 800690e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	639a      	str	r2, [r3, #56]	; 0x38
 800691c:	e00c      	b.n	8006938 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	639a      	str	r2, [r3, #56]	; 0x38
 800692a:	e005      	b.n	8006938 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006930:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	d009      	beq.n	8006954 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a18      	ldr	r2, [pc, #96]	; (80069a8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006946:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e024      	b.n	800699e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681d      	ldr	r5, [r3, #0]
 800697a:	466c      	mov	r4, sp
 800697c:	f107 0318 	add.w	r3, r7, #24
 8006980:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006984:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006988:	f107 030c 	add.w	r3, r7, #12
 800698c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800698e:	4628      	mov	r0, r5
 8006990:	f001 fb84 	bl	800809c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3728      	adds	r7, #40	; 0x28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bdb0      	pop	{r4, r5, r7, pc}
 80069a6:	bf00      	nop
 80069a8:	004005ff 	.word	0x004005ff

080069ac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80069b8:	f107 030c 	add.w	r3, r7, #12
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fa7e 	bl	8006ec0 <SD_SendStatus>
 80069c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d005      	beq.n	80069d8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	0a5b      	lsrs	r3, r3, #9
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80069e2:	693b      	ldr	r3, [r7, #16]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a08:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006a0a:	bf00      	nop
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a28:	2b82      	cmp	r3, #130	; 0x82
 8006a2a:	d111      	bne.n	8006a50 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f001 fcbb 	bl	80083ac <SDMMC_CmdStopTransfer>
 8006a36:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d008      	beq.n	8006a50 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7ff fd58 	bl	8006500 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0208 	bic.w	r2, r2, #8
 8006a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f003 fc3f 	bl	800a2fc <HAL_SD_RxCpltCallback>
#endif
}
 8006a7e:	bf00      	nop
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fb ff8a 	bl	80029b0 <HAL_DMA_GetError>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d03e      	beq.n	8006b20 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d002      	beq.n	8006abe <SD_DMAError+0x36>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d12d      	bne.n	8006b1a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a19      	ldr	r2, [pc, #100]	; (8006b28 <SD_DMAError+0xa0>)
 8006ac4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006ad4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006ae2:	6978      	ldr	r0, [r7, #20]
 8006ae4:	f7ff ff62 	bl	80069ac <HAL_SD_GetCardState>
 8006ae8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b06      	cmp	r3, #6
 8006aee:	d002      	beq.n	8006af6 <SD_DMAError+0x6e>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2b05      	cmp	r3, #5
 8006af4:	d10a      	bne.n	8006b0c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 fc56 	bl	80083ac <SDMMC_CmdStopTransfer>
 8006b00:	4602      	mov	r2, r0
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	431a      	orrs	r2, r3
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2200      	movs	r2, #0
 8006b18:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006b1a:	6978      	ldr	r0, [r7, #20]
 8006b1c:	f7ff fcf0 	bl	8006500 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006b20:	bf00      	nop
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	004005ff 	.word	0x004005ff

08006b2c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b38:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f7ff ff31 	bl	80069ac <HAL_SD_GetCardState>
 8006b4a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b06      	cmp	r3, #6
 8006b5e:	d002      	beq.n	8006b66 <SD_DMATxAbort+0x3a>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b05      	cmp	r3, #5
 8006b64:	d10a      	bne.n	8006b7c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f001 fc1e 	bl	80083ac <SDMMC_CmdStopTransfer>
 8006b70:	4602      	mov	r2, r0
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	431a      	orrs	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d103      	bne.n	8006b8c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f003 fba5 	bl	800a2d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006b8a:	e002      	b.n	8006b92 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff fcb7 	bl	8006500 <HAL_SD_ErrorCallback>
}
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f240 523a 	movw	r2, #1338	; 0x53a
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff fefa 	bl	80069ac <HAL_SD_GetCardState>
 8006bb8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b06      	cmp	r3, #6
 8006bcc:	d002      	beq.n	8006bd4 <SD_DMARxAbort+0x3a>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b05      	cmp	r3, #5
 8006bd2:	d10a      	bne.n	8006bea <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f001 fbe7 	bl	80083ac <SDMMC_CmdStopTransfer>
 8006bde:	4602      	mov	r2, r0
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	431a      	orrs	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d103      	bne.n	8006bfa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f003 fb6e 	bl	800a2d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006bf8:	e002      	b.n	8006c00 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f7ff fc80 	bl	8006500 <HAL_SD_ErrorCallback>
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c08:	b5b0      	push	{r4, r5, r7, lr}
 8006c0a:	b094      	sub	sp, #80	; 0x50
 8006c0c:	af04      	add	r7, sp, #16
 8006c0e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006c10:	2301      	movs	r3, #1
 8006c12:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f001 fa98 	bl	800814e <SDMMC_GetPowerState>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d102      	bne.n	8006c2a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006c28:	e0b7      	b.n	8006d9a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d02f      	beq.n	8006c92 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f001 fcc3 	bl	80085c2 <SDMMC_CmdSendCID>
 8006c3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <SD_InitCard+0x40>
    {
      return errorstate;
 8006c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c46:	e0a8      	b.n	8006d9a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 fac3 	bl	80081da <SDMMC_GetResponse>
 8006c54:	4602      	mov	r2, r0
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2104      	movs	r1, #4
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 faba 	bl	80081da <SDMMC_GetResponse>
 8006c66:	4602      	mov	r2, r0
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2108      	movs	r1, #8
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 fab1 	bl	80081da <SDMMC_GetResponse>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	210c      	movs	r1, #12
 8006c84:	4618      	mov	r0, r3
 8006c86:	f001 faa8 	bl	80081da <SDMMC_GetResponse>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d00d      	beq.n	8006cb6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f107 020e 	add.w	r2, r7, #14
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f001 fcc9 	bl	800863c <SDMMC_CmdSetRelAdd>
 8006caa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <SD_InitCard+0xae>
    {
      return errorstate;
 8006cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb4:	e071      	b.n	8006d9a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d036      	beq.n	8006d2c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006cbe:	89fb      	ldrh	r3, [r7, #14]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cce:	041b      	lsls	r3, r3, #16
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	f001 fc93 	bl	80085fe <SDMMC_CmdSendCSD>
 8006cd8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce2:	e05a      	b.n	8006d9a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4618      	mov	r0, r3
 8006cec:	f001 fa75 	bl	80081da <SDMMC_GetResponse>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2104      	movs	r1, #4
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 fa6c 	bl	80081da <SDMMC_GetResponse>
 8006d02:	4602      	mov	r2, r0
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2108      	movs	r1, #8
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f001 fa63 	bl	80081da <SDMMC_GetResponse>
 8006d14:	4602      	mov	r2, r0
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	210c      	movs	r1, #12
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 fa5a 	bl	80081da <SDMMC_GetResponse>
 8006d26:	4602      	mov	r2, r0
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2104      	movs	r1, #4
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 fa51 	bl	80081da <SDMMC_GetResponse>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	0d1a      	lsrs	r2, r3, #20
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006d40:	f107 0310 	add.w	r3, r7, #16
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff fbe4 	bl	8006514 <HAL_SD_GetCardCSD>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d56:	e020      	b.n	8006d9a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6819      	ldr	r1, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d60:	041b      	lsls	r3, r3, #16
 8006d62:	f04f 0400 	mov.w	r4, #0
 8006d66:	461a      	mov	r2, r3
 8006d68:	4623      	mov	r3, r4
 8006d6a:	4608      	mov	r0, r1
 8006d6c:	f001 fb40 	bl	80083f0 <SDMMC_CmdSelDesel>
 8006d70:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <SD_InitCard+0x174>
  {
    return errorstate;
 8006d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7a:	e00e      	b.n	8006d9a <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681d      	ldr	r5, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	466c      	mov	r4, sp
 8006d84:	f103 0210 	add.w	r2, r3, #16
 8006d88:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d8e:	3304      	adds	r3, #4
 8006d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d92:	4628      	mov	r0, r5
 8006d94:	f001 f982 	bl	800809c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3740      	adds	r7, #64	; 0x40
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006da4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	2300      	movs	r3, #0
 8006db6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 fb3a 	bl	8008436 <SDMMC_CmdGoIdleState>
 8006dc2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <SD_PowerON+0x2a>
  {
    return errorstate;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	e072      	b.n	8006eb4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 fb4d 	bl	8008472 <SDMMC_CmdOperCond>
 8006dd8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00d      	beq.n	8006dfc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 fb23 	bl	8008436 <SDMMC_CmdGoIdleState>
 8006df0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d004      	beq.n	8006e02 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	e05b      	b.n	8006eb4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d137      	bne.n	8006e7a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2100      	movs	r1, #0
 8006e10:	4618      	mov	r0, r3
 8006e12:	f001 fb4d 	bl	80084b0 <SDMMC_CmdAppCommand>
 8006e16:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d02d      	beq.n	8006e7a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e22:	e047      	b.n	8006eb4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 fb40 	bl	80084b0 <SDMMC_CmdAppCommand>
 8006e30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <SD_PowerON+0x98>
    {
      return errorstate;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	e03b      	b.n	8006eb4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	491e      	ldr	r1, [pc, #120]	; (8006ebc <SD_PowerON+0x118>)
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 fb56 	bl	80084f4 <SDMMC_CmdAppOperCommand>
 8006e48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e54:	e02e      	b.n	8006eb4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 f9bc 	bl	80081da <SDMMC_GetResponse>
 8006e62:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	0fdb      	lsrs	r3, r3, #31
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <SD_PowerON+0xcc>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e000      	b.n	8006e72 <SD_PowerON+0xce>
 8006e70:	2300      	movs	r3, #0
 8006e72:	613b      	str	r3, [r7, #16]

    count++;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	3301      	adds	r3, #1
 8006e78:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d802      	bhi.n	8006e8a <SD_PowerON+0xe6>
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0cc      	beq.n	8006e24 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d902      	bls.n	8006e9a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e98:	e00c      	b.n	8006eb4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	645a      	str	r2, [r3, #68]	; 0x44
 8006eaa:	e002      	b.n	8006eb2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	c1100000 	.word	0xc1100000

08006ec0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d102      	bne.n	8006ed6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006ed0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ed4:	e018      	b.n	8006f08 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ede:	041b      	lsls	r3, r3, #16
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	f001 fbcb 	bl	800867e <SDMMC_CmdSendStatus>
 8006ee8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	e009      	b.n	8006f08 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 f96d 	bl	80081da <SDMMC_GetResponse>
 8006f00:	4602      	mov	r2, r0
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2100      	movs	r1, #0
 8006f26:	4618      	mov	r0, r3
 8006f28:	f001 f957 	bl	80081da <SDMMC_GetResponse>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f36:	d102      	bne.n	8006f3e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f3c:	e02f      	b.n	8006f9e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f3e:	f107 030c 	add.w	r3, r7, #12
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f879 	bl	800703c <SD_FindSCR>
 8006f4a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	e023      	b.n	8006f9e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d01c      	beq.n	8006f9a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f68:	041b      	lsls	r3, r3, #16
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f001 fa9f 	bl	80084b0 <SDMMC_CmdAppCommand>
 8006f72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	e00f      	b.n	8006f9e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2102      	movs	r1, #2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 fad9 	bl	800853c <SDMMC_CmdBusWidth>
 8006f8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	e003      	b.n	8006f9e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e001      	b.n	8006f9e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b086      	sub	sp, #24
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f001 f90c 	bl	80081da <SDMMC_GetResponse>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fcc:	d102      	bne.n	8006fd4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006fce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fd2:	e02f      	b.n	8007034 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006fd4:	f107 030c 	add.w	r3, r7, #12
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f82e 	bl	800703c <SD_FindSCR>
 8006fe0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	e023      	b.n	8007034 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d01c      	beq.n	8007030 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffe:	041b      	lsls	r3, r3, #16
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f001 fa54 	bl	80084b0 <SDMMC_CmdAppCommand>
 8007008:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	e00f      	b.n	8007034 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f001 fa8e 	bl	800853c <SDMMC_CmdBusWidth>
 8007020:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	e003      	b.n	8007034 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800702c:	2300      	movs	r3, #0
 800702e:	e001      	b.n	8007034 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007030:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800703c:	b590      	push	{r4, r7, lr}
 800703e:	b08f      	sub	sp, #60	; 0x3c
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007046:	f7fa fa59 	bl	80014fc <HAL_GetTick>
 800704a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007050:	2300      	movs	r3, #0
 8007052:	60bb      	str	r3, [r7, #8]
 8007054:	2300      	movs	r3, #0
 8007056:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2108      	movs	r1, #8
 8007062:	4618      	mov	r0, r3
 8007064:	f001 f8f8 	bl	8008258 <SDMMC_CmdBlockLength>
 8007068:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	e0a9      	b.n	80071c8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707c:	041b      	lsls	r3, r3, #16
 800707e:	4619      	mov	r1, r3
 8007080:	4610      	mov	r0, r2
 8007082:	f001 fa15 	bl	80084b0 <SDMMC_CmdAppCommand>
 8007086:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <SD_FindSCR+0x56>
  {
    return errorstate;
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	e09a      	b.n	80071c8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007092:	f04f 33ff 	mov.w	r3, #4294967295
 8007096:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007098:	2308      	movs	r3, #8
 800709a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800709c:	2330      	movs	r3, #48	; 0x30
 800709e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80070a0:	2302      	movs	r3, #2
 80070a2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f107 0210 	add.w	r2, r7, #16
 80070b4:	4611      	mov	r1, r2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f001 f8a2 	bl	8008200 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f001 fa5d 	bl	8008580 <SDMMC_CmdSendSCR>
 80070c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d022      	beq.n	8007114 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	e07a      	b.n	80071c8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00e      	beq.n	80070fe <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6819      	ldr	r1, [r3, #0]
 80070e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	f107 0208 	add.w	r2, r7, #8
 80070ec:	18d4      	adds	r4, r2, r3
 80070ee:	4608      	mov	r0, r1
 80070f0:	f001 f800 	bl	80080f4 <SDMMC_ReadFIFO>
 80070f4:	4603      	mov	r3, r0
 80070f6:	6023      	str	r3, [r4, #0]
      index++;
 80070f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fa:	3301      	adds	r3, #1
 80070fc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80070fe:	f7fa f9fd 	bl	80014fc <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710c:	d102      	bne.n	8007114 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800710e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007112:	e059      	b.n	80071c8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711a:	f240 432a 	movw	r3, #1066	; 0x42a
 800711e:	4013      	ands	r3, r2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0d6      	beq.n	80070d2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2208      	movs	r2, #8
 8007138:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800713a:	2308      	movs	r3, #8
 800713c:	e044      	b.n	80071c8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2202      	movs	r2, #2
 8007152:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007154:	2302      	movs	r3, #2
 8007156:	e037      	b.n	80071c8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2220      	movs	r2, #32
 800716c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800716e:	2320      	movs	r3, #32
 8007170:	e02a      	b.n	80071c8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f240 523a 	movw	r2, #1338	; 0x53a
 800717a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	061a      	lsls	r2, r3, #24
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007188:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	0a1b      	lsrs	r3, r3, #8
 800718e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007192:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	0e1b      	lsrs	r3, r3, #24
 8007198:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	601a      	str	r2, [r3, #0]
    scr++;
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	3304      	adds	r3, #4
 80071a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	061a      	lsls	r2, r3, #24
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	0a1b      	lsrs	r3, r3, #8
 80071b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	0e1b      	lsrs	r3, r3, #24
 80071c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	373c      	adds	r7, #60	; 0x3c
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd90      	pop	{r4, r7, pc}

080071d0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071dc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d03f      	beq.n	800726a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	e033      	b.n	8007258 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 ff7d 	bl	80080f4 <SDMMC_ReadFIFO>
 80071fa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3301      	adds	r3, #1
 8007208:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	3b01      	subs	r3, #1
 800720e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	0a1b      	lsrs	r3, r3, #8
 8007214:	b2da      	uxtb	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	701a      	strb	r2, [r3, #0]
      tmp++;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3301      	adds	r3, #1
 800721e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	3b01      	subs	r3, #1
 8007224:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	0c1b      	lsrs	r3, r3, #16
 800722a:	b2da      	uxtb	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3301      	adds	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	3b01      	subs	r3, #1
 800723a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	0e1b      	lsrs	r3, r3, #24
 8007240:	b2da      	uxtb	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3301      	adds	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	3b01      	subs	r3, #1
 8007250:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	3301      	adds	r3, #1
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2b07      	cmp	r3, #7
 800725c:	d9c8      	bls.n	80071f0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800726a:	bf00      	nop
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b086      	sub	sp, #24
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d043      	beq.n	8007314 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	e037      	b.n	8007302 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	021a      	lsls	r2, r3, #8
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	041a      	lsls	r2, r3, #16
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	061a      	lsls	r2, r3, #24
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3301      	adds	r3, #1
 80072e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f107 0208 	add.w	r2, r7, #8
 80072f4:	4611      	mov	r1, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 ff09 	bl	800810e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	3301      	adds	r3, #1
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b07      	cmp	r3, #7
 8007306:	d9c4      	bls.n	8007292 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007314:	bf00      	nop
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e01d      	b.n	800736a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f815 	bl	8007372 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3304      	adds	r3, #4
 8007358:	4619      	mov	r1, r3
 800735a:	4610      	mov	r0, r2
 800735c:	f000 f986 	bl	800766c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
	...

08007388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0201 	orr.w	r2, r2, #1
 800739e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <HAL_TIM_Base_Start_IT+0x50>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b06      	cmp	r3, #6
 80073b0:	d00b      	beq.n	80073ca <HAL_TIM_Base_Start_IT+0x42>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b8:	d007      	beq.n	80073ca <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0201 	orr.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	00010007 	.word	0x00010007

080073dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d122      	bne.n	8007438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d11b      	bne.n	8007438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f06f 0202 	mvn.w	r2, #2
 8007408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f905 	bl	800762e <HAL_TIM_IC_CaptureCallback>
 8007424:	e005      	b.n	8007432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f8f7 	bl	800761a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f908 	bl	8007642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	2b04      	cmp	r3, #4
 8007444:	d122      	bne.n	800748c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b04      	cmp	r3, #4
 8007452:	d11b      	bne.n	800748c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f06f 0204 	mvn.w	r2, #4
 800745c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2202      	movs	r2, #2
 8007462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f8db 	bl	800762e <HAL_TIM_IC_CaptureCallback>
 8007478:	e005      	b.n	8007486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f8cd 	bl	800761a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f8de 	bl	8007642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b08      	cmp	r3, #8
 8007498:	d122      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d11b      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f06f 0208 	mvn.w	r2, #8
 80074b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2204      	movs	r2, #4
 80074b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f8b1 	bl	800762e <HAL_TIM_IC_CaptureCallback>
 80074cc:	e005      	b.n	80074da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f8a3 	bl	800761a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f8b4 	bl	8007642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f003 0310 	and.w	r3, r3, #16
 80074ea:	2b10      	cmp	r3, #16
 80074ec:	d122      	bne.n	8007534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f003 0310 	and.w	r3, r3, #16
 80074f8:	2b10      	cmp	r3, #16
 80074fa:	d11b      	bne.n	8007534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f06f 0210 	mvn.w	r2, #16
 8007504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2208      	movs	r2, #8
 800750a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f887 	bl	800762e <HAL_TIM_IC_CaptureCallback>
 8007520:	e005      	b.n	800752e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f879 	bl	800761a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f88a 	bl	8007642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b01      	cmp	r3, #1
 8007540:	d10e      	bne.n	8007560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b01      	cmp	r3, #1
 800754e:	d107      	bne.n	8007560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0201 	mvn.w	r2, #1
 8007558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7f9 fcbc 	bl	8000ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756a:	2b80      	cmp	r3, #128	; 0x80
 800756c:	d10e      	bne.n	800758c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007578:	2b80      	cmp	r3, #128	; 0x80
 800757a:	d107      	bne.n	800758c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f91a 	bl	80077c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800759a:	d10e      	bne.n	80075ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a6:	2b80      	cmp	r3, #128	; 0x80
 80075a8:	d107      	bne.n	80075ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80075b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f90d 	bl	80077d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c4:	2b40      	cmp	r3, #64	; 0x40
 80075c6:	d10e      	bne.n	80075e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d107      	bne.n	80075e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f838 	bl	8007656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	d10e      	bne.n	8007612 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d107      	bne.n	8007612 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f06f 0220 	mvn.w	r2, #32
 800760a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f8cd 	bl	80077ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
	...

0800766c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a40      	ldr	r2, [pc, #256]	; (8007780 <TIM_Base_SetConfig+0x114>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d013      	beq.n	80076ac <TIM_Base_SetConfig+0x40>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800768a:	d00f      	beq.n	80076ac <TIM_Base_SetConfig+0x40>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a3d      	ldr	r2, [pc, #244]	; (8007784 <TIM_Base_SetConfig+0x118>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00b      	beq.n	80076ac <TIM_Base_SetConfig+0x40>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a3c      	ldr	r2, [pc, #240]	; (8007788 <TIM_Base_SetConfig+0x11c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d007      	beq.n	80076ac <TIM_Base_SetConfig+0x40>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a3b      	ldr	r2, [pc, #236]	; (800778c <TIM_Base_SetConfig+0x120>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d003      	beq.n	80076ac <TIM_Base_SetConfig+0x40>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a3a      	ldr	r2, [pc, #232]	; (8007790 <TIM_Base_SetConfig+0x124>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d108      	bne.n	80076be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a2f      	ldr	r2, [pc, #188]	; (8007780 <TIM_Base_SetConfig+0x114>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d02b      	beq.n	800771e <TIM_Base_SetConfig+0xb2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076cc:	d027      	beq.n	800771e <TIM_Base_SetConfig+0xb2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a2c      	ldr	r2, [pc, #176]	; (8007784 <TIM_Base_SetConfig+0x118>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d023      	beq.n	800771e <TIM_Base_SetConfig+0xb2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a2b      	ldr	r2, [pc, #172]	; (8007788 <TIM_Base_SetConfig+0x11c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d01f      	beq.n	800771e <TIM_Base_SetConfig+0xb2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a2a      	ldr	r2, [pc, #168]	; (800778c <TIM_Base_SetConfig+0x120>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01b      	beq.n	800771e <TIM_Base_SetConfig+0xb2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a29      	ldr	r2, [pc, #164]	; (8007790 <TIM_Base_SetConfig+0x124>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d017      	beq.n	800771e <TIM_Base_SetConfig+0xb2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a28      	ldr	r2, [pc, #160]	; (8007794 <TIM_Base_SetConfig+0x128>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d013      	beq.n	800771e <TIM_Base_SetConfig+0xb2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a27      	ldr	r2, [pc, #156]	; (8007798 <TIM_Base_SetConfig+0x12c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00f      	beq.n	800771e <TIM_Base_SetConfig+0xb2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a26      	ldr	r2, [pc, #152]	; (800779c <TIM_Base_SetConfig+0x130>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00b      	beq.n	800771e <TIM_Base_SetConfig+0xb2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a25      	ldr	r2, [pc, #148]	; (80077a0 <TIM_Base_SetConfig+0x134>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d007      	beq.n	800771e <TIM_Base_SetConfig+0xb2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a24      	ldr	r2, [pc, #144]	; (80077a4 <TIM_Base_SetConfig+0x138>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d003      	beq.n	800771e <TIM_Base_SetConfig+0xb2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a23      	ldr	r2, [pc, #140]	; (80077a8 <TIM_Base_SetConfig+0x13c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d108      	bne.n	8007730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4313      	orrs	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a0a      	ldr	r2, [pc, #40]	; (8007780 <TIM_Base_SetConfig+0x114>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d003      	beq.n	8007764 <TIM_Base_SetConfig+0xf8>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a0c      	ldr	r2, [pc, #48]	; (8007790 <TIM_Base_SetConfig+0x124>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d103      	bne.n	800776c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	691a      	ldr	r2, [r3, #16]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	615a      	str	r2, [r3, #20]
}
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40010000 	.word	0x40010000
 8007784:	40000400 	.word	0x40000400
 8007788:	40000800 	.word	0x40000800
 800778c:	40000c00 	.word	0x40000c00
 8007790:	40010400 	.word	0x40010400
 8007794:	40014000 	.word	0x40014000
 8007798:	40014400 	.word	0x40014400
 800779c:	40014800 	.word	0x40014800
 80077a0:	40001800 	.word	0x40001800
 80077a4:	40001c00 	.word	0x40001c00
 80077a8:	40002000 	.word	0x40002000

080077ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e040      	b.n	800787c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7f9 fcf8 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2224      	movs	r2, #36	; 0x24
 8007814:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0201 	bic.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f82c 	bl	8007884 <UART_SetConfig>
 800782c:	4603      	mov	r3, r0
 800782e:	2b01      	cmp	r3, #1
 8007830:	d101      	bne.n	8007836 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e022      	b.n	800787c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 faca 	bl	8007dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fb51 	bl	8007f1c <UART_CheckIdleState>
 800787a:	4603      	mov	r3, r0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800788c:	2300      	movs	r3, #0
 800788e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4bb1      	ldr	r3, [pc, #708]	; (8007b78 <UART_SetConfig+0x2f4>)
 80078b4:	4013      	ands	r3, r2
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6812      	ldr	r2, [r2, #0]
 80078ba:	6939      	ldr	r1, [r7, #16]
 80078bc:	430b      	orrs	r3, r1
 80078be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a9f      	ldr	r2, [pc, #636]	; (8007b7c <UART_SetConfig+0x2f8>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d121      	bne.n	8007948 <UART_SetConfig+0xc4>
 8007904:	4b9e      	ldr	r3, [pc, #632]	; (8007b80 <UART_SetConfig+0x2fc>)
 8007906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	2b03      	cmp	r3, #3
 8007910:	d816      	bhi.n	8007940 <UART_SetConfig+0xbc>
 8007912:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <UART_SetConfig+0x94>)
 8007914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007918:	08007929 	.word	0x08007929
 800791c:	08007935 	.word	0x08007935
 8007920:	0800792f 	.word	0x0800792f
 8007924:	0800793b 	.word	0x0800793b
 8007928:	2301      	movs	r3, #1
 800792a:	77fb      	strb	r3, [r7, #31]
 800792c:	e151      	b.n	8007bd2 <UART_SetConfig+0x34e>
 800792e:	2302      	movs	r3, #2
 8007930:	77fb      	strb	r3, [r7, #31]
 8007932:	e14e      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007934:	2304      	movs	r3, #4
 8007936:	77fb      	strb	r3, [r7, #31]
 8007938:	e14b      	b.n	8007bd2 <UART_SetConfig+0x34e>
 800793a:	2308      	movs	r3, #8
 800793c:	77fb      	strb	r3, [r7, #31]
 800793e:	e148      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007940:	2310      	movs	r3, #16
 8007942:	77fb      	strb	r3, [r7, #31]
 8007944:	bf00      	nop
 8007946:	e144      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a8d      	ldr	r2, [pc, #564]	; (8007b84 <UART_SetConfig+0x300>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d134      	bne.n	80079bc <UART_SetConfig+0x138>
 8007952:	4b8b      	ldr	r3, [pc, #556]	; (8007b80 <UART_SetConfig+0x2fc>)
 8007954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007958:	f003 030c 	and.w	r3, r3, #12
 800795c:	2b0c      	cmp	r3, #12
 800795e:	d829      	bhi.n	80079b4 <UART_SetConfig+0x130>
 8007960:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <UART_SetConfig+0xe4>)
 8007962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007966:	bf00      	nop
 8007968:	0800799d 	.word	0x0800799d
 800796c:	080079b5 	.word	0x080079b5
 8007970:	080079b5 	.word	0x080079b5
 8007974:	080079b5 	.word	0x080079b5
 8007978:	080079a9 	.word	0x080079a9
 800797c:	080079b5 	.word	0x080079b5
 8007980:	080079b5 	.word	0x080079b5
 8007984:	080079b5 	.word	0x080079b5
 8007988:	080079a3 	.word	0x080079a3
 800798c:	080079b5 	.word	0x080079b5
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079b5 	.word	0x080079b5
 8007998:	080079af 	.word	0x080079af
 800799c:	2300      	movs	r3, #0
 800799e:	77fb      	strb	r3, [r7, #31]
 80079a0:	e117      	b.n	8007bd2 <UART_SetConfig+0x34e>
 80079a2:	2302      	movs	r3, #2
 80079a4:	77fb      	strb	r3, [r7, #31]
 80079a6:	e114      	b.n	8007bd2 <UART_SetConfig+0x34e>
 80079a8:	2304      	movs	r3, #4
 80079aa:	77fb      	strb	r3, [r7, #31]
 80079ac:	e111      	b.n	8007bd2 <UART_SetConfig+0x34e>
 80079ae:	2308      	movs	r3, #8
 80079b0:	77fb      	strb	r3, [r7, #31]
 80079b2:	e10e      	b.n	8007bd2 <UART_SetConfig+0x34e>
 80079b4:	2310      	movs	r3, #16
 80079b6:	77fb      	strb	r3, [r7, #31]
 80079b8:	bf00      	nop
 80079ba:	e10a      	b.n	8007bd2 <UART_SetConfig+0x34e>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a71      	ldr	r2, [pc, #452]	; (8007b88 <UART_SetConfig+0x304>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d120      	bne.n	8007a08 <UART_SetConfig+0x184>
 80079c6:	4b6e      	ldr	r3, [pc, #440]	; (8007b80 <UART_SetConfig+0x2fc>)
 80079c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	d00f      	beq.n	80079f4 <UART_SetConfig+0x170>
 80079d4:	2b10      	cmp	r3, #16
 80079d6:	d802      	bhi.n	80079de <UART_SetConfig+0x15a>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d005      	beq.n	80079e8 <UART_SetConfig+0x164>
 80079dc:	e010      	b.n	8007a00 <UART_SetConfig+0x17c>
 80079de:	2b20      	cmp	r3, #32
 80079e0:	d005      	beq.n	80079ee <UART_SetConfig+0x16a>
 80079e2:	2b30      	cmp	r3, #48	; 0x30
 80079e4:	d009      	beq.n	80079fa <UART_SetConfig+0x176>
 80079e6:	e00b      	b.n	8007a00 <UART_SetConfig+0x17c>
 80079e8:	2300      	movs	r3, #0
 80079ea:	77fb      	strb	r3, [r7, #31]
 80079ec:	e0f1      	b.n	8007bd2 <UART_SetConfig+0x34e>
 80079ee:	2302      	movs	r3, #2
 80079f0:	77fb      	strb	r3, [r7, #31]
 80079f2:	e0ee      	b.n	8007bd2 <UART_SetConfig+0x34e>
 80079f4:	2304      	movs	r3, #4
 80079f6:	77fb      	strb	r3, [r7, #31]
 80079f8:	e0eb      	b.n	8007bd2 <UART_SetConfig+0x34e>
 80079fa:	2308      	movs	r3, #8
 80079fc:	77fb      	strb	r3, [r7, #31]
 80079fe:	e0e8      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007a00:	2310      	movs	r3, #16
 8007a02:	77fb      	strb	r3, [r7, #31]
 8007a04:	bf00      	nop
 8007a06:	e0e4      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a5f      	ldr	r2, [pc, #380]	; (8007b8c <UART_SetConfig+0x308>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d120      	bne.n	8007a54 <UART_SetConfig+0x1d0>
 8007a12:	4b5b      	ldr	r3, [pc, #364]	; (8007b80 <UART_SetConfig+0x2fc>)
 8007a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a1c:	2b40      	cmp	r3, #64	; 0x40
 8007a1e:	d00f      	beq.n	8007a40 <UART_SetConfig+0x1bc>
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	d802      	bhi.n	8007a2a <UART_SetConfig+0x1a6>
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d005      	beq.n	8007a34 <UART_SetConfig+0x1b0>
 8007a28:	e010      	b.n	8007a4c <UART_SetConfig+0x1c8>
 8007a2a:	2b80      	cmp	r3, #128	; 0x80
 8007a2c:	d005      	beq.n	8007a3a <UART_SetConfig+0x1b6>
 8007a2e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a30:	d009      	beq.n	8007a46 <UART_SetConfig+0x1c2>
 8007a32:	e00b      	b.n	8007a4c <UART_SetConfig+0x1c8>
 8007a34:	2300      	movs	r3, #0
 8007a36:	77fb      	strb	r3, [r7, #31]
 8007a38:	e0cb      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	77fb      	strb	r3, [r7, #31]
 8007a3e:	e0c8      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007a40:	2304      	movs	r3, #4
 8007a42:	77fb      	strb	r3, [r7, #31]
 8007a44:	e0c5      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007a46:	2308      	movs	r3, #8
 8007a48:	77fb      	strb	r3, [r7, #31]
 8007a4a:	e0c2      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007a4c:	2310      	movs	r3, #16
 8007a4e:	77fb      	strb	r3, [r7, #31]
 8007a50:	bf00      	nop
 8007a52:	e0be      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a4d      	ldr	r2, [pc, #308]	; (8007b90 <UART_SetConfig+0x30c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d124      	bne.n	8007aa8 <UART_SetConfig+0x224>
 8007a5e:	4b48      	ldr	r3, [pc, #288]	; (8007b80 <UART_SetConfig+0x2fc>)
 8007a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a6c:	d012      	beq.n	8007a94 <UART_SetConfig+0x210>
 8007a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a72:	d802      	bhi.n	8007a7a <UART_SetConfig+0x1f6>
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d007      	beq.n	8007a88 <UART_SetConfig+0x204>
 8007a78:	e012      	b.n	8007aa0 <UART_SetConfig+0x21c>
 8007a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a7e:	d006      	beq.n	8007a8e <UART_SetConfig+0x20a>
 8007a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a84:	d009      	beq.n	8007a9a <UART_SetConfig+0x216>
 8007a86:	e00b      	b.n	8007aa0 <UART_SetConfig+0x21c>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	77fb      	strb	r3, [r7, #31]
 8007a8c:	e0a1      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	77fb      	strb	r3, [r7, #31]
 8007a92:	e09e      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007a94:	2304      	movs	r3, #4
 8007a96:	77fb      	strb	r3, [r7, #31]
 8007a98:	e09b      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007a9a:	2308      	movs	r3, #8
 8007a9c:	77fb      	strb	r3, [r7, #31]
 8007a9e:	e098      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007aa0:	2310      	movs	r3, #16
 8007aa2:	77fb      	strb	r3, [r7, #31]
 8007aa4:	bf00      	nop
 8007aa6:	e094      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a39      	ldr	r2, [pc, #228]	; (8007b94 <UART_SetConfig+0x310>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d124      	bne.n	8007afc <UART_SetConfig+0x278>
 8007ab2:	4b33      	ldr	r3, [pc, #204]	; (8007b80 <UART_SetConfig+0x2fc>)
 8007ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ac0:	d012      	beq.n	8007ae8 <UART_SetConfig+0x264>
 8007ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ac6:	d802      	bhi.n	8007ace <UART_SetConfig+0x24a>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d007      	beq.n	8007adc <UART_SetConfig+0x258>
 8007acc:	e012      	b.n	8007af4 <UART_SetConfig+0x270>
 8007ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ad2:	d006      	beq.n	8007ae2 <UART_SetConfig+0x25e>
 8007ad4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ad8:	d009      	beq.n	8007aee <UART_SetConfig+0x26a>
 8007ada:	e00b      	b.n	8007af4 <UART_SetConfig+0x270>
 8007adc:	2301      	movs	r3, #1
 8007ade:	77fb      	strb	r3, [r7, #31]
 8007ae0:	e077      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	77fb      	strb	r3, [r7, #31]
 8007ae6:	e074      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007ae8:	2304      	movs	r3, #4
 8007aea:	77fb      	strb	r3, [r7, #31]
 8007aec:	e071      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007aee:	2308      	movs	r3, #8
 8007af0:	77fb      	strb	r3, [r7, #31]
 8007af2:	e06e      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007af4:	2310      	movs	r3, #16
 8007af6:	77fb      	strb	r3, [r7, #31]
 8007af8:	bf00      	nop
 8007afa:	e06a      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a25      	ldr	r2, [pc, #148]	; (8007b98 <UART_SetConfig+0x314>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d124      	bne.n	8007b50 <UART_SetConfig+0x2cc>
 8007b06:	4b1e      	ldr	r3, [pc, #120]	; (8007b80 <UART_SetConfig+0x2fc>)
 8007b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b14:	d012      	beq.n	8007b3c <UART_SetConfig+0x2b8>
 8007b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b1a:	d802      	bhi.n	8007b22 <UART_SetConfig+0x29e>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d007      	beq.n	8007b30 <UART_SetConfig+0x2ac>
 8007b20:	e012      	b.n	8007b48 <UART_SetConfig+0x2c4>
 8007b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b26:	d006      	beq.n	8007b36 <UART_SetConfig+0x2b2>
 8007b28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b2c:	d009      	beq.n	8007b42 <UART_SetConfig+0x2be>
 8007b2e:	e00b      	b.n	8007b48 <UART_SetConfig+0x2c4>
 8007b30:	2300      	movs	r3, #0
 8007b32:	77fb      	strb	r3, [r7, #31]
 8007b34:	e04d      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007b36:	2302      	movs	r3, #2
 8007b38:	77fb      	strb	r3, [r7, #31]
 8007b3a:	e04a      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007b3c:	2304      	movs	r3, #4
 8007b3e:	77fb      	strb	r3, [r7, #31]
 8007b40:	e047      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007b42:	2308      	movs	r3, #8
 8007b44:	77fb      	strb	r3, [r7, #31]
 8007b46:	e044      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007b48:	2310      	movs	r3, #16
 8007b4a:	77fb      	strb	r3, [r7, #31]
 8007b4c:	bf00      	nop
 8007b4e:	e040      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a11      	ldr	r2, [pc, #68]	; (8007b9c <UART_SetConfig+0x318>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d139      	bne.n	8007bce <UART_SetConfig+0x34a>
 8007b5a:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <UART_SetConfig+0x2fc>)
 8007b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b68:	d027      	beq.n	8007bba <UART_SetConfig+0x336>
 8007b6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b6e:	d817      	bhi.n	8007ba0 <UART_SetConfig+0x31c>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d01c      	beq.n	8007bae <UART_SetConfig+0x32a>
 8007b74:	e027      	b.n	8007bc6 <UART_SetConfig+0x342>
 8007b76:	bf00      	nop
 8007b78:	efff69f3 	.word	0xefff69f3
 8007b7c:	40011000 	.word	0x40011000
 8007b80:	40023800 	.word	0x40023800
 8007b84:	40004400 	.word	0x40004400
 8007b88:	40004800 	.word	0x40004800
 8007b8c:	40004c00 	.word	0x40004c00
 8007b90:	40005000 	.word	0x40005000
 8007b94:	40011400 	.word	0x40011400
 8007b98:	40007800 	.word	0x40007800
 8007b9c:	40007c00 	.word	0x40007c00
 8007ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba4:	d006      	beq.n	8007bb4 <UART_SetConfig+0x330>
 8007ba6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007baa:	d009      	beq.n	8007bc0 <UART_SetConfig+0x33c>
 8007bac:	e00b      	b.n	8007bc6 <UART_SetConfig+0x342>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	77fb      	strb	r3, [r7, #31]
 8007bb2:	e00e      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	77fb      	strb	r3, [r7, #31]
 8007bb8:	e00b      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007bba:	2304      	movs	r3, #4
 8007bbc:	77fb      	strb	r3, [r7, #31]
 8007bbe:	e008      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007bc0:	2308      	movs	r3, #8
 8007bc2:	77fb      	strb	r3, [r7, #31]
 8007bc4:	e005      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007bc6:	2310      	movs	r3, #16
 8007bc8:	77fb      	strb	r3, [r7, #31]
 8007bca:	bf00      	nop
 8007bcc:	e001      	b.n	8007bd2 <UART_SetConfig+0x34e>
 8007bce:	2310      	movs	r3, #16
 8007bd0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bda:	d17f      	bne.n	8007cdc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007bdc:	7ffb      	ldrb	r3, [r7, #31]
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d85c      	bhi.n	8007c9c <UART_SetConfig+0x418>
 8007be2:	a201      	add	r2, pc, #4	; (adr r2, 8007be8 <UART_SetConfig+0x364>)
 8007be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be8:	08007c0d 	.word	0x08007c0d
 8007bec:	08007c2d 	.word	0x08007c2d
 8007bf0:	08007c4d 	.word	0x08007c4d
 8007bf4:	08007c9d 	.word	0x08007c9d
 8007bf8:	08007c65 	.word	0x08007c65
 8007bfc:	08007c9d 	.word	0x08007c9d
 8007c00:	08007c9d 	.word	0x08007c9d
 8007c04:	08007c9d 	.word	0x08007c9d
 8007c08:	08007c85 	.word	0x08007c85
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c0c:	f7fd f878 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8007c10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	005a      	lsls	r2, r3, #1
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	085b      	lsrs	r3, r3, #1
 8007c1c:	441a      	add	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	61bb      	str	r3, [r7, #24]
        break;
 8007c2a:	e03a      	b.n	8007ca2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c2c:	f7fd f87c 	bl	8004d28 <HAL_RCC_GetPCLK2Freq>
 8007c30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	005a      	lsls	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	441a      	add	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	61bb      	str	r3, [r7, #24]
        break;
 8007c4a:	e02a      	b.n	8007ca2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	085a      	lsrs	r2, r3, #1
 8007c52:	4b5f      	ldr	r3, [pc, #380]	; (8007dd0 <UART_SetConfig+0x54c>)
 8007c54:	4413      	add	r3, r2
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	6852      	ldr	r2, [r2, #4]
 8007c5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	61bb      	str	r3, [r7, #24]
        break;
 8007c62:	e01e      	b.n	8007ca2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c64:	f7fc ff68 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8007c68:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	005a      	lsls	r2, r3, #1
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	085b      	lsrs	r3, r3, #1
 8007c74:	441a      	add	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	61bb      	str	r3, [r7, #24]
        break;
 8007c82:	e00e      	b.n	8007ca2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	085b      	lsrs	r3, r3, #1
 8007c8a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	61bb      	str	r3, [r7, #24]
        break;
 8007c9a:	e002      	b.n	8007ca2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	75fb      	strb	r3, [r7, #23]
        break;
 8007ca0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	2b0f      	cmp	r3, #15
 8007ca6:	d916      	bls.n	8007cd6 <UART_SetConfig+0x452>
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cae:	d212      	bcs.n	8007cd6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	f023 030f 	bic.w	r3, r3, #15
 8007cb8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	085b      	lsrs	r3, r3, #1
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f003 0307 	and.w	r3, r3, #7
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	897b      	ldrh	r3, [r7, #10]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	897a      	ldrh	r2, [r7, #10]
 8007cd2:	60da      	str	r2, [r3, #12]
 8007cd4:	e070      	b.n	8007db8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	75fb      	strb	r3, [r7, #23]
 8007cda:	e06d      	b.n	8007db8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007cdc:	7ffb      	ldrb	r3, [r7, #31]
 8007cde:	2b08      	cmp	r3, #8
 8007ce0:	d859      	bhi.n	8007d96 <UART_SetConfig+0x512>
 8007ce2:	a201      	add	r2, pc, #4	; (adr r2, 8007ce8 <UART_SetConfig+0x464>)
 8007ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce8:	08007d0d 	.word	0x08007d0d
 8007cec:	08007d2b 	.word	0x08007d2b
 8007cf0:	08007d49 	.word	0x08007d49
 8007cf4:	08007d97 	.word	0x08007d97
 8007cf8:	08007d61 	.word	0x08007d61
 8007cfc:	08007d97 	.word	0x08007d97
 8007d00:	08007d97 	.word	0x08007d97
 8007d04:	08007d97 	.word	0x08007d97
 8007d08:	08007d7f 	.word	0x08007d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d0c:	f7fc fff8 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8007d10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	085a      	lsrs	r2, r3, #1
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	441a      	add	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	61bb      	str	r3, [r7, #24]
        break;
 8007d28:	e038      	b.n	8007d9c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d2a:	f7fc fffd 	bl	8004d28 <HAL_RCC_GetPCLK2Freq>
 8007d2e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	085a      	lsrs	r2, r3, #1
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	441a      	add	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	61bb      	str	r3, [r7, #24]
        break;
 8007d46:	e029      	b.n	8007d9c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	085a      	lsrs	r2, r3, #1
 8007d4e:	4b21      	ldr	r3, [pc, #132]	; (8007dd4 <UART_SetConfig+0x550>)
 8007d50:	4413      	add	r3, r2
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6852      	ldr	r2, [r2, #4]
 8007d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	61bb      	str	r3, [r7, #24]
        break;
 8007d5e:	e01d      	b.n	8007d9c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d60:	f7fc feea 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8007d64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	085a      	lsrs	r2, r3, #1
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	441a      	add	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	61bb      	str	r3, [r7, #24]
        break;
 8007d7c:	e00e      	b.n	8007d9c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	085b      	lsrs	r3, r3, #1
 8007d84:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	61bb      	str	r3, [r7, #24]
        break;
 8007d94:	e002      	b.n	8007d9c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	75fb      	strb	r3, [r7, #23]
        break;
 8007d9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	2b0f      	cmp	r3, #15
 8007da0:	d908      	bls.n	8007db4 <UART_SetConfig+0x530>
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007da8:	d204      	bcs.n	8007db4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	60da      	str	r2, [r3, #12]
 8007db2:	e001      	b.n	8007db8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3720      	adds	r7, #32
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	01e84800 	.word	0x01e84800
 8007dd4:	00f42400 	.word	0x00f42400

08007dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	f003 0308 	and.w	r3, r3, #8
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	f003 0310 	and.w	r3, r3, #16
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00a      	beq.n	8007e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	f003 0320 	and.w	r3, r3, #32
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01a      	beq.n	8007eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed6:	d10a      	bne.n	8007eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	605a      	str	r2, [r3, #4]
  }
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007f2a:	f7f9 fae7 	bl	80014fc <HAL_GetTick>
 8007f2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0308 	and.w	r3, r3, #8
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	d10e      	bne.n	8007f5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f82a 	bl	8007fa6 <UART_WaitOnFlagUntilTimeout>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e020      	b.n	8007f9e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0304 	and.w	r3, r3, #4
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d10e      	bne.n	8007f88 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f814 	bl	8007fa6 <UART_WaitOnFlagUntilTimeout>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e00a      	b.n	8007f9e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2220      	movs	r2, #32
 8007f92:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	603b      	str	r3, [r7, #0]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fb6:	e05d      	b.n	8008074 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbe:	d059      	beq.n	8008074 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fc0:	f7f9 fa9c 	bl	80014fc <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d302      	bcc.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d11b      	bne.n	800800e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fe4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689a      	ldr	r2, [r3, #8]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0201 	bic.w	r2, r2, #1
 8007ff4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2220      	movs	r2, #32
 8008000:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e042      	b.n	8008094 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d02b      	beq.n	8008074 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800802a:	d123      	bne.n	8008074 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008034:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008044:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0201 	bic.w	r2, r2, #1
 8008054:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2220      	movs	r2, #32
 8008060:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2220      	movs	r2, #32
 8008066:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e00f      	b.n	8008094 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	69da      	ldr	r2, [r3, #28]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	4013      	ands	r3, r2
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	429a      	cmp	r2, r3
 8008082:	bf0c      	ite	eq
 8008084:	2301      	moveq	r3, #1
 8008086:	2300      	movne	r3, #0
 8008088:	b2db      	uxtb	r3, r3
 800808a:	461a      	mov	r2, r3
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	429a      	cmp	r2, r3
 8008090:	d092      	beq.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800809c:	b084      	sub	sp, #16
 800809e:	b480      	push	{r7}
 80080a0:	b085      	sub	sp, #20
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	f107 001c 	add.w	r0, r7, #28
 80080aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80080b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80080b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80080b6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80080ba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80080be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80080c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80080c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80080c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <SDMMC_Init+0x54>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	b004      	add	sp, #16
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	ffff8100 	.word	0xffff8100

080080f4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008102:	4618      	mov	r0, r3
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2203      	movs	r2, #3
 800813c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800813e:	2002      	movs	r0, #2
 8008140:	f7f9 f9e8 	bl	8001514 <HAL_Delay>
  
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0303 	and.w	r3, r3, #3
}
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800818a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008190:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008196:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	4b06      	ldr	r3, [pc, #24]	; (80081bc <SDMMC_SendCommand+0x50>)
 80081a4:	4013      	ands	r3, r2
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	431a      	orrs	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	fffff000 	.word	0xfffff000

080081c0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	b2db      	uxtb	r3, r3
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3314      	adds	r3, #20
 80081e8:	461a      	mov	r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	4413      	add	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
}  
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008226:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800822c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008232:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	431a      	orrs	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800824a:	2300      	movs	r3, #0

}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008266:	2310      	movs	r3, #16
 8008268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800826a:	2340      	movs	r3, #64	; 0x40
 800826c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800826e:	2300      	movs	r3, #0
 8008270:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008276:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008278:	f107 0308 	add.w	r3, r7, #8
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7ff ff74 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008284:	f241 3288 	movw	r2, #5000	; 0x1388
 8008288:	2110      	movs	r1, #16
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fa42 	bl	8008714 <SDMMC_GetCmdResp1>
 8008290:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008292:	69fb      	ldr	r3, [r7, #28]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3720      	adds	r7, #32
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80082aa:	2311      	movs	r3, #17
 80082ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082ae:	2340      	movs	r3, #64	; 0x40
 80082b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082b2:	2300      	movs	r3, #0
 80082b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082bc:	f107 0308 	add.w	r3, r7, #8
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff ff52 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80082c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082cc:	2111      	movs	r1, #17
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fa20 	bl	8008714 <SDMMC_GetCmdResp1>
 80082d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082d6:	69fb      	ldr	r3, [r7, #28]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3720      	adds	r7, #32
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80082ee:	2312      	movs	r3, #18
 80082f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082f2:	2340      	movs	r3, #64	; 0x40
 80082f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008300:	f107 0308 	add.w	r3, r7, #8
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff ff30 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800830c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008310:	2112      	movs	r1, #18
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f9fe 	bl	8008714 <SDMMC_GetCmdResp1>
 8008318:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800831a:	69fb      	ldr	r3, [r7, #28]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3720      	adds	r7, #32
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b088      	sub	sp, #32
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008332:	2318      	movs	r3, #24
 8008334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008336:	2340      	movs	r3, #64	; 0x40
 8008338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800833a:	2300      	movs	r3, #0
 800833c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800833e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008342:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008344:	f107 0308 	add.w	r3, r7, #8
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7ff ff0e 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008350:	f241 3288 	movw	r2, #5000	; 0x1388
 8008354:	2118      	movs	r1, #24
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f9dc 	bl	8008714 <SDMMC_GetCmdResp1>
 800835c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800835e:	69fb      	ldr	r3, [r7, #28]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3720      	adds	r7, #32
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008376:	2319      	movs	r3, #25
 8008378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800837a:	2340      	movs	r3, #64	; 0x40
 800837c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800837e:	2300      	movs	r3, #0
 8008380:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008386:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008388:	f107 0308 	add.w	r3, r7, #8
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7ff feec 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008394:	f241 3288 	movw	r2, #5000	; 0x1388
 8008398:	2119      	movs	r1, #25
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f9ba 	bl	8008714 <SDMMC_GetCmdResp1>
 80083a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083a2:	69fb      	ldr	r3, [r7, #28]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3720      	adds	r7, #32
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b088      	sub	sp, #32
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80083b8:	230c      	movs	r3, #12
 80083ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083bc:	2340      	movs	r3, #64	; 0x40
 80083be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083ca:	f107 0308 	add.w	r3, r7, #8
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7ff fecb 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80083d6:	4a05      	ldr	r2, [pc, #20]	; (80083ec <SDMMC_CmdStopTransfer+0x40>)
 80083d8:	210c      	movs	r1, #12
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f99a 	bl	8008714 <SDMMC_GetCmdResp1>
 80083e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083e2:	69fb      	ldr	r3, [r7, #28]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3720      	adds	r7, #32
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	05f5e100 	.word	0x05f5e100

080083f0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08a      	sub	sp, #40	; 0x28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008400:	2307      	movs	r3, #7
 8008402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008404:	2340      	movs	r3, #64	; 0x40
 8008406:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008408:	2300      	movs	r3, #0
 800840a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800840c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008410:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008412:	f107 0310 	add.w	r3, r7, #16
 8008416:	4619      	mov	r1, r3
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f7ff fea7 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800841e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008422:	2107      	movs	r1, #7
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 f975 	bl	8008714 <SDMMC_GetCmdResp1>
 800842a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800842e:	4618      	mov	r0, r3
 8008430:	3728      	adds	r7, #40	; 0x28
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b088      	sub	sp, #32
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008442:	2300      	movs	r3, #0
 8008444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008446:	2300      	movs	r3, #0
 8008448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800844a:	2300      	movs	r3, #0
 800844c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800844e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008452:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008454:	f107 0308 	add.w	r3, r7, #8
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7ff fe86 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f92f 	bl	80086c4 <SDMMC_GetCmdError>
 8008466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008468:	69fb      	ldr	r3, [r7, #28]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3720      	adds	r7, #32
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b088      	sub	sp, #32
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800847a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800847e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008480:	2308      	movs	r3, #8
 8008482:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008484:	2340      	movs	r3, #64	; 0x40
 8008486:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008488:	2300      	movs	r3, #0
 800848a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800848c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008490:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008492:	f107 0308 	add.w	r3, r7, #8
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff fe67 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fb18 	bl	8008ad4 <SDMMC_GetCmdResp7>
 80084a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084a6:	69fb      	ldr	r3, [r7, #28]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3720      	adds	r7, #32
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80084be:	2337      	movs	r3, #55	; 0x37
 80084c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084c2:	2340      	movs	r3, #64	; 0x40
 80084c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084d0:	f107 0308 	add.w	r3, r7, #8
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7ff fe48 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80084dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80084e0:	2137      	movs	r1, #55	; 0x37
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f916 	bl	8008714 <SDMMC_GetCmdResp1>
 80084e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084ea:	69fb      	ldr	r3, [r7, #28]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3720      	adds	r7, #32
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b088      	sub	sp, #32
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <SDMMC_CmdAppOperCommand+0x44>)
 8008502:	4313      	orrs	r3, r2
 8008504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008506:	2329      	movs	r3, #41	; 0x29
 8008508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800850a:	2340      	movs	r3, #64	; 0x40
 800850c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008516:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008518:	f107 0308 	add.w	r3, r7, #8
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7ff fe24 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fa27 	bl	8008978 <SDMMC_GetCmdResp3>
 800852a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800852c:	69fb      	ldr	r3, [r7, #28]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3720      	adds	r7, #32
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	80100000 	.word	0x80100000

0800853c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b088      	sub	sp, #32
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800854a:	2306      	movs	r3, #6
 800854c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800854e:	2340      	movs	r3, #64	; 0x40
 8008550:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800855a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800855c:	f107 0308 	add.w	r3, r7, #8
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff fe02 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008568:	f241 3288 	movw	r2, #5000	; 0x1388
 800856c:	2106      	movs	r1, #6
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f8d0 	bl	8008714 <SDMMC_GetCmdResp1>
 8008574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008576:	69fb      	ldr	r3, [r7, #28]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3720      	adds	r7, #32
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b088      	sub	sp, #32
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800858c:	2333      	movs	r3, #51	; 0x33
 800858e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008590:	2340      	movs	r3, #64	; 0x40
 8008592:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008594:	2300      	movs	r3, #0
 8008596:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800859c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800859e:	f107 0308 	add.w	r3, r7, #8
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7ff fde1 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80085aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ae:	2133      	movs	r1, #51	; 0x33
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f8af 	bl	8008714 <SDMMC_GetCmdResp1>
 80085b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085b8:	69fb      	ldr	r3, [r7, #28]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3720      	adds	r7, #32
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b088      	sub	sp, #32
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80085ce:	2302      	movs	r3, #2
 80085d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80085d2:	23c0      	movs	r3, #192	; 0xc0
 80085d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085e0:	f107 0308 	add.w	r3, r7, #8
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7ff fdc0 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f97d 	bl	80088ec <SDMMC_GetCmdResp2>
 80085f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085f4:	69fb      	ldr	r3, [r7, #28]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3720      	adds	r7, #32
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b088      	sub	sp, #32
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800860c:	2309      	movs	r3, #9
 800860e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008610:	23c0      	movs	r3, #192	; 0xc0
 8008612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008614:	2300      	movs	r3, #0
 8008616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800861c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800861e:	f107 0308 	add.w	r3, r7, #8
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff fda1 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f95e 	bl	80088ec <SDMMC_GetCmdResp2>
 8008630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008632:	69fb      	ldr	r3, [r7, #28]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3720      	adds	r7, #32
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800864a:	2303      	movs	r3, #3
 800864c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800864e:	2340      	movs	r3, #64	; 0x40
 8008650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008652:	2300      	movs	r3, #0
 8008654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800865a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800865c:	f107 0308 	add.w	r3, r7, #8
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff fd82 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	2103      	movs	r1, #3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f9bd 	bl	80089ec <SDMMC_GetCmdResp6>
 8008672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008674:	69fb      	ldr	r3, [r7, #28]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b088      	sub	sp, #32
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800868c:	230d      	movs	r3, #13
 800868e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008690:	2340      	movs	r3, #64	; 0x40
 8008692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800869c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800869e:	f107 0308 	add.w	r3, r7, #8
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7ff fd61 	bl	800816c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80086aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80086ae:	210d      	movs	r1, #13
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f82f 	bl	8008714 <SDMMC_GetCmdResp1>
 80086b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086b8:	69fb      	ldr	r3, [r7, #28]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3720      	adds	r7, #32
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80086c4:	b490      	push	{r4, r7}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80086cc:	4b0f      	ldr	r3, [pc, #60]	; (800870c <SDMMC_GetCmdError+0x48>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a0f      	ldr	r2, [pc, #60]	; (8008710 <SDMMC_GetCmdError+0x4c>)
 80086d2:	fba2 2303 	umull	r2, r3, r2, r3
 80086d6:	0a5b      	lsrs	r3, r3, #9
 80086d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80086e0:	4623      	mov	r3, r4
 80086e2:	1e5c      	subs	r4, r3, #1
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086ec:	e009      	b.n	8008702 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0f2      	beq.n	80086e0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	22c5      	movs	r2, #197	; 0xc5
 80086fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bc90      	pop	{r4, r7}
 800870a:	4770      	bx	lr
 800870c:	20000010 	.word	0x20000010
 8008710:	10624dd3 	.word	0x10624dd3

08008714 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008714:	b590      	push	{r4, r7, lr}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	460b      	mov	r3, r1
 800871e:	607a      	str	r2, [r7, #4]
 8008720:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008722:	4b6f      	ldr	r3, [pc, #444]	; (80088e0 <SDMMC_GetCmdResp1+0x1cc>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a6f      	ldr	r2, [pc, #444]	; (80088e4 <SDMMC_GetCmdResp1+0x1d0>)
 8008728:	fba2 2303 	umull	r2, r3, r2, r3
 800872c:	0a5b      	lsrs	r3, r3, #9
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008734:	4623      	mov	r3, r4
 8008736:	1e5c      	subs	r4, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	d102      	bne.n	8008742 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800873c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008740:	e0c9      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008746:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0f0      	beq.n	8008734 <SDMMC_GetCmdResp1+0x20>
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1eb      	bne.n	8008734 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	2b00      	cmp	r3, #0
 8008766:	d004      	beq.n	8008772 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2204      	movs	r2, #4
 800876c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800876e:	2304      	movs	r3, #4
 8008770:	e0b1      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	2b00      	cmp	r3, #0
 800877c:	d004      	beq.n	8008788 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2201      	movs	r2, #1
 8008782:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008784:	2301      	movs	r3, #1
 8008786:	e0a6      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	22c5      	movs	r2, #197	; 0xc5
 800878c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f7ff fd16 	bl	80081c0 <SDMMC_GetCommandResponse>
 8008794:	4603      	mov	r3, r0
 8008796:	461a      	mov	r2, r3
 8008798:	7afb      	ldrb	r3, [r7, #11]
 800879a:	4293      	cmp	r3, r2
 800879c:	d001      	beq.n	80087a2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800879e:	2301      	movs	r3, #1
 80087a0:	e099      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80087a2:	2100      	movs	r1, #0
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f7ff fd18 	bl	80081da <SDMMC_GetResponse>
 80087aa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	4b4e      	ldr	r3, [pc, #312]	; (80088e8 <SDMMC_GetCmdResp1+0x1d4>)
 80087b0:	4013      	ands	r3, r2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d101      	bne.n	80087ba <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	e08d      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	da02      	bge.n	80087c6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80087c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087c4:	e087      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80087d0:	2340      	movs	r3, #64	; 0x40
 80087d2:	e080      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d001      	beq.n	80087e2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80087de:	2380      	movs	r3, #128	; 0x80
 80087e0:	e079      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80087ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087f0:	e071      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80087fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008800:	e069      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800880c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008810:	e061      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800881c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008820:	e059      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800882c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008830:	e051      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800883c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008840:	e049      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d002      	beq.n	8008852 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800884c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008850:	e041      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800885c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008860:	e039      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800886c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008870:	e031      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800887c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008880:	e029      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800888c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008890:	e021      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800889c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80088a0:	e019      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d002      	beq.n	80088b2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80088ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088b0:	e011      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80088bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80088c0:	e009      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f003 0308 	and.w	r3, r3, #8
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80088cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80088d0:	e001      	b.n	80088d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80088d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	371c      	adds	r7, #28
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd90      	pop	{r4, r7, pc}
 80088de:	bf00      	nop
 80088e0:	20000010 	.word	0x20000010
 80088e4:	10624dd3 	.word	0x10624dd3
 80088e8:	fdffe008 	.word	0xfdffe008

080088ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80088ec:	b490      	push	{r4, r7}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088f4:	4b1e      	ldr	r3, [pc, #120]	; (8008970 <SDMMC_GetCmdResp2+0x84>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a1e      	ldr	r2, [pc, #120]	; (8008974 <SDMMC_GetCmdResp2+0x88>)
 80088fa:	fba2 2303 	umull	r2, r3, r2, r3
 80088fe:	0a5b      	lsrs	r3, r3, #9
 8008900:	f241 3288 	movw	r2, #5000	; 0x1388
 8008904:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008908:	4623      	mov	r3, r4
 800890a:	1e5c      	subs	r4, r3, #1
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008910:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008914:	e026      	b.n	8008964 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0f0      	beq.n	8008908 <SDMMC_GetCmdResp2+0x1c>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1eb      	bne.n	8008908 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b00      	cmp	r3, #0
 800893a:	d004      	beq.n	8008946 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2204      	movs	r2, #4
 8008940:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008942:	2304      	movs	r3, #4
 8008944:	e00e      	b.n	8008964 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d004      	beq.n	800895c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008958:	2301      	movs	r3, #1
 800895a:	e003      	b.n	8008964 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	22c5      	movs	r2, #197	; 0xc5
 8008960:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bc90      	pop	{r4, r7}
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	20000010 	.word	0x20000010
 8008974:	10624dd3 	.word	0x10624dd3

08008978 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008978:	b490      	push	{r4, r7}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008980:	4b18      	ldr	r3, [pc, #96]	; (80089e4 <SDMMC_GetCmdResp3+0x6c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a18      	ldr	r2, [pc, #96]	; (80089e8 <SDMMC_GetCmdResp3+0x70>)
 8008986:	fba2 2303 	umull	r2, r3, r2, r3
 800898a:	0a5b      	lsrs	r3, r3, #9
 800898c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008990:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008994:	4623      	mov	r3, r4
 8008996:	1e5c      	subs	r4, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d102      	bne.n	80089a2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800899c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089a0:	e01b      	b.n	80089da <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0f0      	beq.n	8008994 <SDMMC_GetCmdResp3+0x1c>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1eb      	bne.n	8008994 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c0:	f003 0304 	and.w	r3, r3, #4
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d004      	beq.n	80089d2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2204      	movs	r2, #4
 80089cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089ce:	2304      	movs	r3, #4
 80089d0:	e003      	b.n	80089da <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	22c5      	movs	r2, #197	; 0xc5
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bc90      	pop	{r4, r7}
 80089e2:	4770      	bx	lr
 80089e4:	20000010 	.word	0x20000010
 80089e8:	10624dd3 	.word	0x10624dd3

080089ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80089ec:	b590      	push	{r4, r7, lr}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	460b      	mov	r3, r1
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80089fa:	4b34      	ldr	r3, [pc, #208]	; (8008acc <SDMMC_GetCmdResp6+0xe0>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a34      	ldr	r2, [pc, #208]	; (8008ad0 <SDMMC_GetCmdResp6+0xe4>)
 8008a00:	fba2 2303 	umull	r2, r3, r2, r3
 8008a04:	0a5b      	lsrs	r3, r3, #9
 8008a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a0a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008a0e:	4623      	mov	r3, r4
 8008a10:	1e5c      	subs	r4, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d102      	bne.n	8008a1c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a1a:	e052      	b.n	8008ac2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a20:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d0f0      	beq.n	8008a0e <SDMMC_GetCmdResp6+0x22>
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1eb      	bne.n	8008a0e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3a:	f003 0304 	and.w	r3, r3, #4
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d004      	beq.n	8008a4c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2204      	movs	r2, #4
 8008a46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a48:	2304      	movs	r3, #4
 8008a4a:	e03a      	b.n	8008ac2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a50:	f003 0301 	and.w	r3, r3, #1
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e02f      	b.n	8008ac2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f7ff fbac 	bl	80081c0 <SDMMC_GetCommandResponse>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	7afb      	ldrb	r3, [r7, #11]
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d001      	beq.n	8008a76 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e025      	b.n	8008ac2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	22c5      	movs	r2, #197	; 0xc5
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f7ff fbab 	bl	80081da <SDMMC_GetResponse>
 8008a84:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d106      	bne.n	8008a9e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	0c1b      	lsrs	r3, r3, #16
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e011      	b.n	8008ac2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008aac:	e009      	b.n	8008ac2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008abc:	e001      	b.n	8008ac2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd90      	pop	{r4, r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20000010 	.word	0x20000010
 8008ad0:	10624dd3 	.word	0x10624dd3

08008ad4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008ad4:	b490      	push	{r4, r7}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008adc:	4b21      	ldr	r3, [pc, #132]	; (8008b64 <SDMMC_GetCmdResp7+0x90>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a21      	ldr	r2, [pc, #132]	; (8008b68 <SDMMC_GetCmdResp7+0x94>)
 8008ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae6:	0a5b      	lsrs	r3, r3, #9
 8008ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008af0:	4623      	mov	r3, r4
 8008af2:	1e5c      	subs	r4, r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d102      	bne.n	8008afe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008af8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008afc:	e02c      	b.n	8008b58 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b02:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d0f0      	beq.n	8008af0 <SDMMC_GetCmdResp7+0x1c>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1eb      	bne.n	8008af0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d004      	beq.n	8008b2e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2204      	movs	r2, #4
 8008b28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b2a:	2304      	movs	r3, #4
 8008b2c:	e014      	b.n	8008b58 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d004      	beq.n	8008b44 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e009      	b.n	8008b58 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2240      	movs	r2, #64	; 0x40
 8008b54:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008b56:	2300      	movs	r3, #0
  
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bc90      	pop	{r4, r7}
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	20000010 	.word	0x20000010
 8008b68:	10624dd3 	.word	0x10624dd3

08008b6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	f107 001c 	add.w	r0, r7, #28
 8008b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d120      	bne.n	8008bc6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68da      	ldr	r2, [r3, #12]
 8008b94:	4b20      	ldr	r3, [pc, #128]	; (8008c18 <USB_CoreInit+0xac>)
 8008b96:	4013      	ands	r3, r2
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d105      	bne.n	8008bba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 fac4 	bl	800a148 <USB_CoreReset>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]
 8008bc4:	e010      	b.n	8008be8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 fab8 	bl	800a148 <USB_CoreReset>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d10b      	bne.n	8008c06 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f043 0206 	orr.w	r2, r3, #6
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f043 0220 	orr.w	r2, r3, #32
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c12:	b004      	add	sp, #16
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	ffbdffbf 	.word	0xffbdffbf

08008c1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b087      	sub	sp, #28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	4613      	mov	r3, r2
 8008c28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008c2a:	79fb      	ldrb	r3, [r7, #7]
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d165      	bne.n	8008cfc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4a41      	ldr	r2, [pc, #260]	; (8008d38 <USB_SetTurnaroundTime+0x11c>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d906      	bls.n	8008c46 <USB_SetTurnaroundTime+0x2a>
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	4a40      	ldr	r2, [pc, #256]	; (8008d3c <USB_SetTurnaroundTime+0x120>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d802      	bhi.n	8008c46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008c40:	230f      	movs	r3, #15
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	e062      	b.n	8008d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	4a3c      	ldr	r2, [pc, #240]	; (8008d3c <USB_SetTurnaroundTime+0x120>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d906      	bls.n	8008c5c <USB_SetTurnaroundTime+0x40>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	4a3b      	ldr	r2, [pc, #236]	; (8008d40 <USB_SetTurnaroundTime+0x124>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d802      	bhi.n	8008c5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008c56:	230e      	movs	r3, #14
 8008c58:	617b      	str	r3, [r7, #20]
 8008c5a:	e057      	b.n	8008d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	4a38      	ldr	r2, [pc, #224]	; (8008d40 <USB_SetTurnaroundTime+0x124>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d906      	bls.n	8008c72 <USB_SetTurnaroundTime+0x56>
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	4a37      	ldr	r2, [pc, #220]	; (8008d44 <USB_SetTurnaroundTime+0x128>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d802      	bhi.n	8008c72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008c6c:	230d      	movs	r3, #13
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	e04c      	b.n	8008d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	4a33      	ldr	r2, [pc, #204]	; (8008d44 <USB_SetTurnaroundTime+0x128>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d906      	bls.n	8008c88 <USB_SetTurnaroundTime+0x6c>
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	4a32      	ldr	r2, [pc, #200]	; (8008d48 <USB_SetTurnaroundTime+0x12c>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d802      	bhi.n	8008c88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008c82:	230c      	movs	r3, #12
 8008c84:	617b      	str	r3, [r7, #20]
 8008c86:	e041      	b.n	8008d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	4a2f      	ldr	r2, [pc, #188]	; (8008d48 <USB_SetTurnaroundTime+0x12c>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d906      	bls.n	8008c9e <USB_SetTurnaroundTime+0x82>
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	4a2e      	ldr	r2, [pc, #184]	; (8008d4c <USB_SetTurnaroundTime+0x130>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d802      	bhi.n	8008c9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008c98:	230b      	movs	r3, #11
 8008c9a:	617b      	str	r3, [r7, #20]
 8008c9c:	e036      	b.n	8008d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	4a2a      	ldr	r2, [pc, #168]	; (8008d4c <USB_SetTurnaroundTime+0x130>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d906      	bls.n	8008cb4 <USB_SetTurnaroundTime+0x98>
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	4a29      	ldr	r2, [pc, #164]	; (8008d50 <USB_SetTurnaroundTime+0x134>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d802      	bhi.n	8008cb4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008cae:	230a      	movs	r3, #10
 8008cb0:	617b      	str	r3, [r7, #20]
 8008cb2:	e02b      	b.n	8008d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	4a26      	ldr	r2, [pc, #152]	; (8008d50 <USB_SetTurnaroundTime+0x134>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d906      	bls.n	8008cca <USB_SetTurnaroundTime+0xae>
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	4a25      	ldr	r2, [pc, #148]	; (8008d54 <USB_SetTurnaroundTime+0x138>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d802      	bhi.n	8008cca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008cc4:	2309      	movs	r3, #9
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	e020      	b.n	8008d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	4a21      	ldr	r2, [pc, #132]	; (8008d54 <USB_SetTurnaroundTime+0x138>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d906      	bls.n	8008ce0 <USB_SetTurnaroundTime+0xc4>
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	4a20      	ldr	r2, [pc, #128]	; (8008d58 <USB_SetTurnaroundTime+0x13c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d802      	bhi.n	8008ce0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008cda:	2308      	movs	r3, #8
 8008cdc:	617b      	str	r3, [r7, #20]
 8008cde:	e015      	b.n	8008d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	4a1d      	ldr	r2, [pc, #116]	; (8008d58 <USB_SetTurnaroundTime+0x13c>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d906      	bls.n	8008cf6 <USB_SetTurnaroundTime+0xda>
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	4a1c      	ldr	r2, [pc, #112]	; (8008d5c <USB_SetTurnaroundTime+0x140>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d802      	bhi.n	8008cf6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008cf0:	2307      	movs	r3, #7
 8008cf2:	617b      	str	r3, [r7, #20]
 8008cf4:	e00a      	b.n	8008d0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008cf6:	2306      	movs	r3, #6
 8008cf8:	617b      	str	r3, [r7, #20]
 8008cfa:	e007      	b.n	8008d0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008cfc:	79fb      	ldrb	r3, [r7, #7]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008d02:	2309      	movs	r3, #9
 8008d04:	617b      	str	r3, [r7, #20]
 8008d06:	e001      	b.n	8008d0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008d08:	2309      	movs	r3, #9
 8008d0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	68da      	ldr	r2, [r3, #12]
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	029b      	lsls	r3, r3, #10
 8008d20:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008d24:	431a      	orrs	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	371c      	adds	r7, #28
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	00d8acbf 	.word	0x00d8acbf
 8008d3c:	00e4e1bf 	.word	0x00e4e1bf
 8008d40:	00f423ff 	.word	0x00f423ff
 8008d44:	0106737f 	.word	0x0106737f
 8008d48:	011a499f 	.word	0x011a499f
 8008d4c:	01312cff 	.word	0x01312cff
 8008d50:	014ca43f 	.word	0x014ca43f
 8008d54:	016e35ff 	.word	0x016e35ff
 8008d58:	01a6ab1f 	.word	0x01a6ab1f
 8008d5c:	01e847ff 	.word	0x01e847ff

08008d60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	f043 0201 	orr.w	r2, r3, #1
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f023 0201 	bic.w	r2, r3, #1
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008dbc:	78fb      	ldrb	r3, [r7, #3]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d106      	bne.n	8008dd0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60da      	str	r2, [r3, #12]
 8008dce:	e00b      	b.n	8008de8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d106      	bne.n	8008de4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60da      	str	r2, [r3, #12]
 8008de2:	e001      	b.n	8008de8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e003      	b.n	8008df0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008de8:	2032      	movs	r0, #50	; 0x32
 8008dea:	f7f8 fb93 	bl	8001514 <HAL_Delay>

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008df8:	b084      	sub	sp, #16
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b086      	sub	sp, #24
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e12:	2300      	movs	r3, #0
 8008e14:	613b      	str	r3, [r7, #16]
 8008e16:	e009      	b.n	8008e2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	3340      	adds	r3, #64	; 0x40
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	2200      	movs	r2, #0
 8008e24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	613b      	str	r3, [r7, #16]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	2b0e      	cmp	r3, #14
 8008e30:	d9f2      	bls.n	8008e18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d11c      	bne.n	8008e72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e46:	f043 0302 	orr.w	r3, r3, #2
 8008e4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	e005      	b.n	8008e7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e84:	461a      	mov	r2, r3
 8008e86:	2300      	movs	r3, #0
 8008e88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e90:	4619      	mov	r1, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e98:	461a      	mov	r2, r3
 8008e9a:	680b      	ldr	r3, [r1, #0]
 8008e9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d10c      	bne.n	8008ebe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d104      	bne.n	8008eb4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008eaa:	2100      	movs	r1, #0
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f959 	bl	8009164 <USB_SetDevSpeed>
 8008eb2:	e018      	b.n	8008ee6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f954 	bl	8009164 <USB_SetDevSpeed>
 8008ebc:	e013      	b.n	8008ee6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d10c      	bne.n	8008ede <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d104      	bne.n	8008ed4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008eca:	2100      	movs	r1, #0
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f949 	bl	8009164 <USB_SetDevSpeed>
 8008ed2:	e008      	b.n	8008ee6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f944 	bl	8009164 <USB_SetDevSpeed>
 8008edc:	e003      	b.n	8008ee6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ede:	2103      	movs	r1, #3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f93f 	bl	8009164 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ee6:	2110      	movs	r1, #16
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f8f3 	bl	80090d4 <USB_FlushTxFifo>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f911 	bl	8009120 <USB_FlushRxFifo>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0e:	461a      	mov	r2, r3
 8008f10:	2300      	movs	r3, #0
 8008f12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f26:	461a      	mov	r2, r3
 8008f28:	2300      	movs	r3, #0
 8008f2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	613b      	str	r3, [r7, #16]
 8008f30:	e043      	b.n	8008fba <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f48:	d118      	bne.n	8008f7c <USB_DevInit+0x184>
    {
      if (i == 0U)
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10a      	bne.n	8008f66 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f62:	6013      	str	r3, [r2, #0]
 8008f64:	e013      	b.n	8008f8e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	015a      	lsls	r2, r3, #5
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f72:	461a      	mov	r2, r3
 8008f74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	e008      	b.n	8008f8e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f88:	461a      	mov	r2, r3
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fac:	461a      	mov	r2, r3
 8008fae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008fb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	613b      	str	r3, [r7, #16]
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d3b7      	bcc.n	8008f32 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	613b      	str	r3, [r7, #16]
 8008fc6:	e043      	b.n	8009050 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fde:	d118      	bne.n	8009012 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10a      	bne.n	8008ffc <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	e013      	b.n	8009024 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009008:	461a      	mov	r2, r3
 800900a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	e008      	b.n	8009024 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	4413      	add	r3, r2
 800901a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901e:	461a      	mov	r2, r3
 8009020:	2300      	movs	r3, #0
 8009022:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009030:	461a      	mov	r2, r3
 8009032:	2300      	movs	r3, #0
 8009034:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	015a      	lsls	r2, r3, #5
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4413      	add	r3, r2
 800903e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009042:	461a      	mov	r2, r3
 8009044:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009048:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	3301      	adds	r3, #1
 800904e:	613b      	str	r3, [r7, #16]
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	429a      	cmp	r2, r3
 8009056:	d3b7      	bcc.n	8008fc8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009066:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800906a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009078:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	2b00      	cmp	r3, #0
 800907e:	d105      	bne.n	800908c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	f043 0210 	orr.w	r2, r3, #16
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699a      	ldr	r2, [r3, #24]
 8009090:	4b0e      	ldr	r3, [pc, #56]	; (80090cc <USB_DevInit+0x2d4>)
 8009092:	4313      	orrs	r3, r2
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909a:	2b00      	cmp	r3, #0
 800909c:	d005      	beq.n	80090aa <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	f043 0208 	orr.w	r2, r3, #8
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80090aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d105      	bne.n	80090bc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	699a      	ldr	r2, [r3, #24]
 80090b4:	4b06      	ldr	r3, [pc, #24]	; (80090d0 <USB_DevInit+0x2d8>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3718      	adds	r7, #24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090c8:	b004      	add	sp, #16
 80090ca:	4770      	bx	lr
 80090cc:	803c3800 	.word	0x803c3800
 80090d0:	40000004 	.word	0x40000004

080090d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80090de:	2300      	movs	r3, #0
 80090e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	019b      	lsls	r3, r3, #6
 80090e6:	f043 0220 	orr.w	r2, r3, #32
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3301      	adds	r3, #1
 80090f2:	60fb      	str	r3, [r7, #12]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4a09      	ldr	r2, [pc, #36]	; (800911c <USB_FlushTxFifo+0x48>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d901      	bls.n	8009100 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80090fc:	2303      	movs	r3, #3
 80090fe:	e006      	b.n	800910e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b20      	cmp	r3, #32
 800910a:	d0f0      	beq.n	80090ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	00030d40 	.word	0x00030d40

08009120 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2210      	movs	r2, #16
 8009130:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3301      	adds	r3, #1
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4a09      	ldr	r2, [pc, #36]	; (8009160 <USB_FlushRxFifo+0x40>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d901      	bls.n	8009144 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e006      	b.n	8009152 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	f003 0310 	and.w	r3, r3, #16
 800914c:	2b10      	cmp	r3, #16
 800914e:	d0f0      	beq.n	8009132 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	00030d40 	.word	0x00030d40

08009164 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	68f9      	ldr	r1, [r7, #12]
 8009180:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009184:	4313      	orrs	r3, r2
 8009186:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009196:	b480      	push	{r7}
 8009198:	b087      	sub	sp, #28
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f003 0306 	and.w	r3, r3, #6
 80091ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d102      	bne.n	80091bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80091b6:	2300      	movs	r3, #0
 80091b8:	75fb      	strb	r3, [r7, #23]
 80091ba:	e00a      	b.n	80091d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d002      	beq.n	80091c8 <USB_GetDevSpeed+0x32>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b06      	cmp	r3, #6
 80091c6:	d102      	bne.n	80091ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80091c8:	2302      	movs	r3, #2
 80091ca:	75fb      	strb	r3, [r7, #23]
 80091cc:	e001      	b.n	80091d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80091ce:	230f      	movs	r3, #15
 80091d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	371c      	adds	r7, #28
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	785b      	ldrb	r3, [r3, #1]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d139      	bne.n	8009270 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009202:	69da      	ldr	r2, [r3, #28]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	f003 030f 	and.w	r3, r3, #15
 800920c:	2101      	movs	r1, #1
 800920e:	fa01 f303 	lsl.w	r3, r1, r3
 8009212:	b29b      	uxth	r3, r3
 8009214:	68f9      	ldr	r1, [r7, #12]
 8009216:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800921a:	4313      	orrs	r3, r2
 800921c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d153      	bne.n	80092dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	78db      	ldrb	r3, [r3, #3]
 800924e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009250:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	059b      	lsls	r3, r3, #22
 8009256:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009258:	431a      	orrs	r2, r3
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	0159      	lsls	r1, r3, #5
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	440b      	add	r3, r1
 8009262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009266:	4619      	mov	r1, r3
 8009268:	4b20      	ldr	r3, [pc, #128]	; (80092ec <USB_ActivateEndpoint+0x10c>)
 800926a:	4313      	orrs	r3, r2
 800926c:	600b      	str	r3, [r1, #0]
 800926e:	e035      	b.n	80092dc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009276:	69da      	ldr	r2, [r3, #28]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	f003 030f 	and.w	r3, r3, #15
 8009280:	2101      	movs	r1, #1
 8009282:	fa01 f303 	lsl.w	r3, r1, r3
 8009286:	041b      	lsls	r3, r3, #16
 8009288:	68f9      	ldr	r1, [r7, #12]
 800928a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800928e:	4313      	orrs	r3, r2
 8009290:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d119      	bne.n	80092dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	78db      	ldrb	r3, [r3, #3]
 80092c2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80092c4:	430b      	orrs	r3, r1
 80092c6:	431a      	orrs	r2, r3
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	0159      	lsls	r1, r3, #5
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	440b      	add	r3, r1
 80092d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d4:	4619      	mov	r1, r3
 80092d6:	4b05      	ldr	r3, [pc, #20]	; (80092ec <USB_ActivateEndpoint+0x10c>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	10008000 	.word	0x10008000

080092f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d161      	bne.n	80093d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800931e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009322:	d11f      	bne.n	8009364 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800933e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009342:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	0151      	lsls	r1, r2, #5
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	440a      	add	r2, r1
 800935a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800935e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	f003 030f 	and.w	r3, r3, #15
 8009374:	2101      	movs	r1, #1
 8009376:	fa01 f303 	lsl.w	r3, r1, r3
 800937a:	b29b      	uxth	r3, r3
 800937c:	43db      	mvns	r3, r3
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009384:	4013      	ands	r3, r2
 8009386:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800938e:	69da      	ldr	r2, [r3, #28]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	f003 030f 	and.w	r3, r3, #15
 8009398:	2101      	movs	r1, #1
 800939a:	fa01 f303 	lsl.w	r3, r1, r3
 800939e:	b29b      	uxth	r3, r3
 80093a0:	43db      	mvns	r3, r3
 80093a2:	68f9      	ldr	r1, [r7, #12]
 80093a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093a8:	4013      	ands	r3, r2
 80093aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	0159      	lsls	r1, r3, #5
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	440b      	add	r3, r1
 80093c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c6:	4619      	mov	r1, r3
 80093c8:	4b35      	ldr	r3, [pc, #212]	; (80094a0 <USB_DeactivateEndpoint+0x1b0>)
 80093ca:	4013      	ands	r3, r2
 80093cc:	600b      	str	r3, [r1, #0]
 80093ce:	e060      	b.n	8009492 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093e6:	d11f      	bne.n	8009428 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	0151      	lsls	r1, r2, #5
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	440a      	add	r2, r1
 80093fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009402:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009406:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	0151      	lsls	r1, r2, #5
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	440a      	add	r2, r1
 800941e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009426:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800942e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f003 030f 	and.w	r3, r3, #15
 8009438:	2101      	movs	r1, #1
 800943a:	fa01 f303 	lsl.w	r3, r1, r3
 800943e:	041b      	lsls	r3, r3, #16
 8009440:	43db      	mvns	r3, r3
 8009442:	68f9      	ldr	r1, [r7, #12]
 8009444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009448:	4013      	ands	r3, r2
 800944a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009452:	69da      	ldr	r2, [r3, #28]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	f003 030f 	and.w	r3, r3, #15
 800945c:	2101      	movs	r1, #1
 800945e:	fa01 f303 	lsl.w	r3, r1, r3
 8009462:	041b      	lsls	r3, r3, #16
 8009464:	43db      	mvns	r3, r3
 8009466:	68f9      	ldr	r1, [r7, #12]
 8009468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800946c:	4013      	ands	r3, r2
 800946e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4413      	add	r3, r2
 8009478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	0159      	lsls	r1, r3, #5
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	440b      	add	r3, r1
 8009486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948a:	4619      	mov	r1, r3
 800948c:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <USB_DeactivateEndpoint+0x1b4>)
 800948e:	4013      	ands	r3, r2
 8009490:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	ec337800 	.word	0xec337800
 80094a4:	eff37800 	.word	0xeff37800

080094a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08a      	sub	sp, #40	; 0x28
 80094ac:	af02      	add	r7, sp, #8
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	4613      	mov	r3, r2
 80094b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	f040 8163 	bne.w	8009790 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d132      	bne.n	8009538 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	015a      	lsls	r2, r3, #5
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	4413      	add	r3, r2
 80094da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094de:	691a      	ldr	r2, [r3, #16]
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	0159      	lsls	r1, r3, #5
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	440b      	add	r3, r1
 80094e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ec:	4619      	mov	r1, r3
 80094ee:	4ba5      	ldr	r3, [pc, #660]	; (8009784 <USB_EPStartXfer+0x2dc>)
 80094f0:	4013      	ands	r3, r2
 80094f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	0151      	lsls	r1, r2, #5
 8009506:	69fa      	ldr	r2, [r7, #28]
 8009508:	440a      	add	r2, r1
 800950a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800950e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009520:	691a      	ldr	r2, [r3, #16]
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	0159      	lsls	r1, r3, #5
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	440b      	add	r3, r1
 800952a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952e:	4619      	mov	r1, r3
 8009530:	4b95      	ldr	r3, [pc, #596]	; (8009788 <USB_EPStartXfer+0x2e0>)
 8009532:	4013      	ands	r3, r2
 8009534:	610b      	str	r3, [r1, #16]
 8009536:	e074      	b.n	8009622 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	015a      	lsls	r2, r3, #5
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	4413      	add	r3, r2
 8009540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009544:	691a      	ldr	r2, [r3, #16]
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	0159      	lsls	r1, r3, #5
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	440b      	add	r3, r1
 800954e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009552:	4619      	mov	r1, r3
 8009554:	4b8c      	ldr	r3, [pc, #560]	; (8009788 <USB_EPStartXfer+0x2e0>)
 8009556:	4013      	ands	r3, r2
 8009558:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	4413      	add	r3, r2
 8009562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009566:	691a      	ldr	r2, [r3, #16]
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	0159      	lsls	r1, r3, #5
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	440b      	add	r3, r1
 8009570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009574:	4619      	mov	r1, r3
 8009576:	4b83      	ldr	r3, [pc, #524]	; (8009784 <USB_EPStartXfer+0x2dc>)
 8009578:	4013      	ands	r3, r2
 800957a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009588:	691a      	ldr	r2, [r3, #16]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	6959      	ldr	r1, [r3, #20]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	440b      	add	r3, r1
 8009594:	1e59      	subs	r1, r3, #1
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	fbb1 f3f3 	udiv	r3, r1, r3
 800959e:	04d9      	lsls	r1, r3, #19
 80095a0:	4b7a      	ldr	r3, [pc, #488]	; (800978c <USB_EPStartXfer+0x2e4>)
 80095a2:	400b      	ands	r3, r1
 80095a4:	69b9      	ldr	r1, [r7, #24]
 80095a6:	0148      	lsls	r0, r1, #5
 80095a8:	69f9      	ldr	r1, [r7, #28]
 80095aa:	4401      	add	r1, r0
 80095ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80095b0:	4313      	orrs	r3, r2
 80095b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c0:	691a      	ldr	r2, [r3, #16]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095ca:	69b9      	ldr	r1, [r7, #24]
 80095cc:	0148      	lsls	r0, r1, #5
 80095ce:	69f9      	ldr	r1, [r7, #28]
 80095d0:	4401      	add	r1, r0
 80095d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80095d6:	4313      	orrs	r3, r2
 80095d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	78db      	ldrb	r3, [r3, #3]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d11f      	bne.n	8009622 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	69ba      	ldr	r2, [r7, #24]
 80095f2:	0151      	lsls	r1, r2, #5
 80095f4:	69fa      	ldr	r2, [r7, #28]
 80095f6:	440a      	add	r2, r1
 80095f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009600:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	015a      	lsls	r2, r3, #5
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	4413      	add	r3, r2
 800960a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	0151      	lsls	r1, r2, #5
 8009614:	69fa      	ldr	r2, [r7, #28]
 8009616:	440a      	add	r2, r1
 8009618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800961c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009620:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009622:	79fb      	ldrb	r3, [r7, #7]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d14b      	bne.n	80096c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d009      	beq.n	8009644 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800963c:	461a      	mov	r2, r3
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	78db      	ldrb	r3, [r3, #3]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d128      	bne.n	800969e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009658:	2b00      	cmp	r3, #0
 800965a:	d110      	bne.n	800967e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	69ba      	ldr	r2, [r7, #24]
 800966c:	0151      	lsls	r1, r2, #5
 800966e:	69fa      	ldr	r2, [r7, #28]
 8009670:	440a      	add	r2, r1
 8009672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009676:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800967a:	6013      	str	r3, [r2, #0]
 800967c:	e00f      	b.n	800969e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	4413      	add	r3, r2
 8009686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	0151      	lsls	r1, r2, #5
 8009690:	69fa      	ldr	r2, [r7, #28]
 8009692:	440a      	add	r2, r1
 8009694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800969c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	015a      	lsls	r2, r3, #5
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	69ba      	ldr	r2, [r7, #24]
 80096ae:	0151      	lsls	r1, r2, #5
 80096b0:	69fa      	ldr	r2, [r7, #28]
 80096b2:	440a      	add	r2, r1
 80096b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096bc:	6013      	str	r3, [r2, #0]
 80096be:	e133      	b.n	8009928 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	0151      	lsls	r1, r2, #5
 80096d2:	69fa      	ldr	r2, [r7, #28]
 80096d4:	440a      	add	r2, r1
 80096d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	78db      	ldrb	r3, [r3, #3]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d015      	beq.n	8009714 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 811b 	beq.w	8009928 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	f003 030f 	and.w	r3, r3, #15
 8009702:	2101      	movs	r1, #1
 8009704:	fa01 f303 	lsl.w	r3, r1, r3
 8009708:	69f9      	ldr	r1, [r7, #28]
 800970a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800970e:	4313      	orrs	r3, r2
 8009710:	634b      	str	r3, [r1, #52]	; 0x34
 8009712:	e109      	b.n	8009928 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009720:	2b00      	cmp	r3, #0
 8009722:	d110      	bne.n	8009746 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	0151      	lsls	r1, r2, #5
 8009736:	69fa      	ldr	r2, [r7, #28]
 8009738:	440a      	add	r2, r1
 800973a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800973e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009742:	6013      	str	r3, [r2, #0]
 8009744:	e00f      	b.n	8009766 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	015a      	lsls	r2, r3, #5
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	4413      	add	r3, r2
 800974e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	69ba      	ldr	r2, [r7, #24]
 8009756:	0151      	lsls	r1, r2, #5
 8009758:	69fa      	ldr	r2, [r7, #28]
 800975a:	440a      	add	r2, r1
 800975c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009764:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	68d9      	ldr	r1, [r3, #12]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	781a      	ldrb	r2, [r3, #0]
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	b298      	uxth	r0, r3
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	4603      	mov	r3, r0
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 fa38 	bl	8009bf0 <USB_WritePacket>
 8009780:	e0d2      	b.n	8009928 <USB_EPStartXfer+0x480>
 8009782:	bf00      	nop
 8009784:	e007ffff 	.word	0xe007ffff
 8009788:	fff80000 	.word	0xfff80000
 800978c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800979c:	691a      	ldr	r2, [r3, #16]
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	0159      	lsls	r1, r3, #5
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	440b      	add	r3, r1
 80097a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097aa:	4619      	mov	r1, r3
 80097ac:	4b61      	ldr	r3, [pc, #388]	; (8009934 <USB_EPStartXfer+0x48c>)
 80097ae:	4013      	ands	r3, r2
 80097b0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097be:	691a      	ldr	r2, [r3, #16]
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	0159      	lsls	r1, r3, #5
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	440b      	add	r3, r1
 80097c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097cc:	4619      	mov	r1, r3
 80097ce:	4b5a      	ldr	r3, [pc, #360]	; (8009938 <USB_EPStartXfer+0x490>)
 80097d0:	4013      	ands	r3, r2
 80097d2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d123      	bne.n	8009824 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e8:	691a      	ldr	r2, [r3, #16]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097f2:	69b9      	ldr	r1, [r7, #24]
 80097f4:	0148      	lsls	r0, r1, #5
 80097f6:	69f9      	ldr	r1, [r7, #28]
 80097f8:	4401      	add	r1, r0
 80097fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097fe:	4313      	orrs	r3, r2
 8009800:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	69ba      	ldr	r2, [r7, #24]
 8009812:	0151      	lsls	r1, r2, #5
 8009814:	69fa      	ldr	r2, [r7, #28]
 8009816:	440a      	add	r2, r1
 8009818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800981c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009820:	6113      	str	r3, [r2, #16]
 8009822:	e033      	b.n	800988c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	695a      	ldr	r2, [r3, #20]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	4413      	add	r3, r2
 800982e:	1e5a      	subs	r2, r3, #1
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	fbb2 f3f3 	udiv	r3, r2, r3
 8009838:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	015a      	lsls	r2, r3, #5
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	4413      	add	r3, r2
 8009842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009846:	691a      	ldr	r2, [r3, #16]
 8009848:	8afb      	ldrh	r3, [r7, #22]
 800984a:	04d9      	lsls	r1, r3, #19
 800984c:	4b3b      	ldr	r3, [pc, #236]	; (800993c <USB_EPStartXfer+0x494>)
 800984e:	400b      	ands	r3, r1
 8009850:	69b9      	ldr	r1, [r7, #24]
 8009852:	0148      	lsls	r0, r1, #5
 8009854:	69f9      	ldr	r1, [r7, #28]
 8009856:	4401      	add	r1, r0
 8009858:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800985c:	4313      	orrs	r3, r2
 800985e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	4413      	add	r3, r2
 8009868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800986c:	691a      	ldr	r2, [r3, #16]
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	8af9      	ldrh	r1, [r7, #22]
 8009874:	fb01 f303 	mul.w	r3, r1, r3
 8009878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800987c:	69b9      	ldr	r1, [r7, #24]
 800987e:	0148      	lsls	r0, r1, #5
 8009880:	69f9      	ldr	r1, [r7, #28]
 8009882:	4401      	add	r1, r0
 8009884:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009888:	4313      	orrs	r3, r2
 800988a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800988c:	79fb      	ldrb	r3, [r7, #7]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d10d      	bne.n	80098ae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d009      	beq.n	80098ae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	68d9      	ldr	r1, [r3, #12]
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098aa:	460a      	mov	r2, r1
 80098ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	78db      	ldrb	r3, [r3, #3]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d128      	bne.n	8009908 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d110      	bne.n	80098e8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	0151      	lsls	r1, r2, #5
 80098d8:	69fa      	ldr	r2, [r7, #28]
 80098da:	440a      	add	r2, r1
 80098dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	e00f      	b.n	8009908 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	69ba      	ldr	r2, [r7, #24]
 80098f8:	0151      	lsls	r1, r2, #5
 80098fa:	69fa      	ldr	r2, [r7, #28]
 80098fc:	440a      	add	r2, r1
 80098fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009906:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	015a      	lsls	r2, r3, #5
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	4413      	add	r3, r2
 8009910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	69ba      	ldr	r2, [r7, #24]
 8009918:	0151      	lsls	r1, r2, #5
 800991a:	69fa      	ldr	r2, [r7, #28]
 800991c:	440a      	add	r2, r1
 800991e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009922:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009926:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3720      	adds	r7, #32
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	fff80000 	.word	0xfff80000
 8009938:	e007ffff 	.word	0xe007ffff
 800993c:	1ff80000 	.word	0x1ff80000

08009940 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	4613      	mov	r3, r2
 800994c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	785b      	ldrb	r3, [r3, #1]
 800995c:	2b01      	cmp	r3, #1
 800995e:	f040 80cd 	bne.w	8009afc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d132      	bne.n	80099d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009976:	691a      	ldr	r2, [r3, #16]
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	0159      	lsls	r1, r3, #5
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	440b      	add	r3, r1
 8009980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009984:	4619      	mov	r1, r3
 8009986:	4b98      	ldr	r3, [pc, #608]	; (8009be8 <USB_EP0StartXfer+0x2a8>)
 8009988:	4013      	ands	r3, r2
 800998a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	0151      	lsls	r1, r2, #5
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	440a      	add	r2, r1
 80099a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b8:	691a      	ldr	r2, [r3, #16]
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	0159      	lsls	r1, r3, #5
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	440b      	add	r3, r1
 80099c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c6:	4619      	mov	r1, r3
 80099c8:	4b88      	ldr	r3, [pc, #544]	; (8009bec <USB_EP0StartXfer+0x2ac>)
 80099ca:	4013      	ands	r3, r2
 80099cc:	610b      	str	r3, [r1, #16]
 80099ce:	e04e      	b.n	8009a6e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099dc:	691a      	ldr	r2, [r3, #16]
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	0159      	lsls	r1, r3, #5
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	440b      	add	r3, r1
 80099e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ea:	4619      	mov	r1, r3
 80099ec:	4b7f      	ldr	r3, [pc, #508]	; (8009bec <USB_EP0StartXfer+0x2ac>)
 80099ee:	4013      	ands	r3, r2
 80099f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	015a      	lsls	r2, r3, #5
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099fe:	691a      	ldr	r2, [r3, #16]
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	0159      	lsls	r1, r3, #5
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	440b      	add	r3, r1
 8009a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4b76      	ldr	r3, [pc, #472]	; (8009be8 <USB_EP0StartXfer+0x2a8>)
 8009a10:	4013      	ands	r3, r2
 8009a12:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	695a      	ldr	r2, [r3, #20]
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d903      	bls.n	8009a28 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	689a      	ldr	r2, [r3, #8]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	0151      	lsls	r1, r2, #5
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	440a      	add	r2, r1
 8009a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a54:	691a      	ldr	r2, [r3, #16]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a5e:	6939      	ldr	r1, [r7, #16]
 8009a60:	0148      	lsls	r0, r1, #5
 8009a62:	6979      	ldr	r1, [r7, #20]
 8009a64:	4401      	add	r1, r0
 8009a66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d11e      	bne.n	8009ab2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d009      	beq.n	8009a90 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	015a      	lsls	r2, r3, #5
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	4413      	add	r3, r2
 8009a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a88:	461a      	mov	r2, r3
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	015a      	lsls	r2, r3, #5
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	4413      	add	r3, r2
 8009a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	0151      	lsls	r1, r2, #5
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	440a      	add	r2, r1
 8009aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009aae:	6013      	str	r3, [r2, #0]
 8009ab0:	e092      	b.n	8009bd8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	015a      	lsls	r2, r3, #5
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	4413      	add	r3, r2
 8009aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	0151      	lsls	r1, r2, #5
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	440a      	add	r2, r1
 8009ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009acc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ad0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d07e      	beq.n	8009bd8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	f003 030f 	and.w	r3, r3, #15
 8009aea:	2101      	movs	r1, #1
 8009aec:	fa01 f303 	lsl.w	r3, r1, r3
 8009af0:	6979      	ldr	r1, [r7, #20]
 8009af2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009af6:	4313      	orrs	r3, r2
 8009af8:	634b      	str	r3, [r1, #52]	; 0x34
 8009afa:	e06d      	b.n	8009bd8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b08:	691a      	ldr	r2, [r3, #16]
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	0159      	lsls	r1, r3, #5
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	440b      	add	r3, r1
 8009b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b16:	4619      	mov	r1, r3
 8009b18:	4b34      	ldr	r3, [pc, #208]	; (8009bec <USB_EP0StartXfer+0x2ac>)
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2a:	691a      	ldr	r2, [r3, #16]
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	0159      	lsls	r1, r3, #5
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	440b      	add	r3, r1
 8009b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4b2b      	ldr	r3, [pc, #172]	; (8009be8 <USB_EP0StartXfer+0x2a8>)
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	015a      	lsls	r2, r3, #5
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	4413      	add	r3, r2
 8009b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	0151      	lsls	r1, r2, #5
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	440a      	add	r2, r1
 8009b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7c:	691a      	ldr	r2, [r3, #16]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b86:	6939      	ldr	r1, [r7, #16]
 8009b88:	0148      	lsls	r0, r1, #5
 8009b8a:	6979      	ldr	r1, [r7, #20]
 8009b8c:	4401      	add	r1, r0
 8009b8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b92:	4313      	orrs	r3, r2
 8009b94:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009b96:	79fb      	ldrb	r3, [r7, #7]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d10d      	bne.n	8009bb8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d009      	beq.n	8009bb8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	68d9      	ldr	r1, [r3, #12]
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	015a      	lsls	r2, r3, #5
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	4413      	add	r3, r2
 8009bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb4:	460a      	mov	r2, r1
 8009bb6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	693a      	ldr	r2, [r7, #16]
 8009bc8:	0151      	lsls	r1, r2, #5
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	440a      	add	r2, r1
 8009bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009bd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	e007ffff 	.word	0xe007ffff
 8009bec:	fff80000 	.word	0xfff80000

08009bf0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b089      	sub	sp, #36	; 0x24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	460b      	mov	r3, r1
 8009c00:	71fb      	strb	r3, [r7, #7]
 8009c02:	4613      	mov	r3, r2
 8009c04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009c0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d11a      	bne.n	8009c4c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009c16:	88bb      	ldrh	r3, [r7, #4]
 8009c18:	3303      	adds	r3, #3
 8009c1a:	089b      	lsrs	r3, r3, #2
 8009c1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009c1e:	2300      	movs	r3, #0
 8009c20:	61bb      	str	r3, [r7, #24]
 8009c22:	e00f      	b.n	8009c44 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009c24:	79fb      	ldrb	r3, [r7, #7]
 8009c26:	031a      	lsls	r2, r3, #12
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c30:	461a      	mov	r2, r3
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	3301      	adds	r3, #1
 8009c42:	61bb      	str	r3, [r7, #24]
 8009c44:	69ba      	ldr	r2, [r7, #24]
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d3eb      	bcc.n	8009c24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3724      	adds	r7, #36	; 0x24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b089      	sub	sp, #36	; 0x24
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	4613      	mov	r3, r2
 8009c66:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009c70:	88fb      	ldrh	r3, [r7, #6]
 8009c72:	3303      	adds	r3, #3
 8009c74:	089b      	lsrs	r3, r3, #2
 8009c76:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009c78:	2300      	movs	r3, #0
 8009c7a:	61bb      	str	r3, [r7, #24]
 8009c7c:	e00b      	b.n	8009c96 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	601a      	str	r2, [r3, #0]
    pDest++;
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	3301      	adds	r3, #1
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	69ba      	ldr	r2, [r7, #24]
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d3ef      	bcc.n	8009c7e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009c9e:	69fb      	ldr	r3, [r7, #28]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3724      	adds	r7, #36	; 0x24
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	785b      	ldrb	r3, [r3, #1]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d12c      	bne.n	8009d22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	db12      	blt.n	8009d00 <USB_EPSetStall+0x54>
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00f      	beq.n	8009d00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	0151      	lsls	r1, r2, #5
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	440a      	add	r2, r1
 8009cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009cfe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	0151      	lsls	r1, r2, #5
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	440a      	add	r2, r1
 8009d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d1e:	6013      	str	r3, [r2, #0]
 8009d20:	e02b      	b.n	8009d7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	db12      	blt.n	8009d5a <USB_EPSetStall+0xae>
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00f      	beq.n	8009d5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	0151      	lsls	r1, r2, #5
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	440a      	add	r2, r1
 8009d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	0151      	lsls	r1, r2, #5
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	440a      	add	r2, r1
 8009d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	785b      	ldrb	r3, [r3, #1]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d128      	bne.n	8009df6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	015a      	lsls	r2, r3, #5
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	4413      	add	r3, r2
 8009dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	0151      	lsls	r1, r2, #5
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	440a      	add	r2, r1
 8009dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dc2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	78db      	ldrb	r3, [r3, #3]
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d003      	beq.n	8009dd4 <USB_EPClearStall+0x4c>
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	78db      	ldrb	r3, [r3, #3]
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d138      	bne.n	8009e46 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	0151      	lsls	r1, r2, #5
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	440a      	add	r2, r1
 8009dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	e027      	b.n	8009e46 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	0151      	lsls	r1, r2, #5
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	440a      	add	r2, r1
 8009e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	78db      	ldrb	r3, [r3, #3]
 8009e1a:	2b03      	cmp	r3, #3
 8009e1c:	d003      	beq.n	8009e26 <USB_EPClearStall+0x9e>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	78db      	ldrb	r3, [r3, #3]
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d10f      	bne.n	8009e46 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	015a      	lsls	r2, r3, #5
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	0151      	lsls	r1, r2, #5
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	440a      	add	r2, r1
 8009e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e44:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e76:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	78fb      	ldrb	r3, [r7, #3]
 8009e82:	011b      	lsls	r3, r3, #4
 8009e84:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009e88:	68f9      	ldr	r1, [r7, #12]
 8009e8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009eba:	f023 0302 	bic.w	r3, r3, #2
 8009ebe:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009ec0:	2003      	movs	r0, #3
 8009ec2:	f7f7 fb27 	bl	8001514 <HAL_Delay>

  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009eea:	f043 0302 	orr.w	r3, r3, #2
 8009eee:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009ef0:	2003      	movs	r0, #3
 8009ef2:	f7f7 fb0f 	bl	8001514 <HAL_Delay>

  return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	695b      	ldr	r3, [r3, #20]
 8009f0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	4013      	ands	r3, r2
 8009f16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009f18:	68fb      	ldr	r3, [r7, #12]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b085      	sub	sp, #20
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f42:	69db      	ldr	r3, [r3, #28]
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	4013      	ands	r3, r2
 8009f48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	0c1b      	lsrs	r3, r3, #16
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b085      	sub	sp, #20
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	b29b      	uxth	r3, r3
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b085      	sub	sp, #20
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	460b      	mov	r3, r1
 8009f98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f9e:	78fb      	ldrb	r3, [r7, #3]
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b087      	sub	sp, #28
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009fee:	78fb      	ldrb	r3, [r7, #3]
 8009ff0:	f003 030f 	and.w	r3, r3, #15
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8009ffa:	01db      	lsls	r3, r3, #7
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	4313      	orrs	r3, r2
 800a002:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a004:	78fb      	ldrb	r3, [r7, #3]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	4013      	ands	r3, r2
 800a016:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a018:	68bb      	ldr	r3, [r7, #8]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	371c      	adds	r7, #28
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr

0800a026 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a026:	b480      	push	{r7}
 800a028:	b083      	sub	sp, #12
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	f003 0301 	and.w	r3, r3, #1
}
 800a036:	4618      	mov	r0, r3
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
	...

0800a044 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a05e:	4619      	mov	r1, r3
 800a060:	4b09      	ldr	r3, [pc, #36]	; (800a088 <USB_ActivateSetup+0x44>)
 800a062:	4013      	ands	r3, r2
 800a064:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a078:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	fffff800 	.word	0xfffff800

0800a08c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b087      	sub	sp, #28
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	460b      	mov	r3, r1
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	333c      	adds	r3, #60	; 0x3c
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	4a26      	ldr	r2, [pc, #152]	; (800a144 <USB_EP0_OutStart+0xb8>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d90a      	bls.n	800a0c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0c0:	d101      	bne.n	800a0c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	e037      	b.n	800a136 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0f4:	f043 0318 	orr.w	r3, r3, #24
 800a0f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a108:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a10c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a10e:	7afb      	ldrb	r3, [r7, #11]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d10f      	bne.n	800a134 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a11a:	461a      	mov	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a12e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a132:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	371c      	adds	r7, #28
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	4f54300a 	.word	0x4f54300a

0800a148 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a150:	2300      	movs	r3, #0
 800a152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	3301      	adds	r3, #1
 800a158:	60fb      	str	r3, [r7, #12]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	4a13      	ldr	r2, [pc, #76]	; (800a1ac <USB_CoreReset+0x64>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d901      	bls.n	800a166 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e01b      	b.n	800a19e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	daf2      	bge.n	800a154 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a16e:	2300      	movs	r3, #0
 800a170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	f043 0201 	orr.w	r2, r3, #1
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	3301      	adds	r3, #1
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4a09      	ldr	r2, [pc, #36]	; (800a1ac <USB_CoreReset+0x64>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d901      	bls.n	800a190 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e006      	b.n	800a19e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d0f0      	beq.n	800a17e <USB_CoreReset+0x36>

  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	00030d40 	.word	0x00030d40

0800a1b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a1b4:	4904      	ldr	r1, [pc, #16]	; (800a1c8 <MX_FATFS_Init+0x18>)
 800a1b6:	4805      	ldr	r0, [pc, #20]	; (800a1cc <MX_FATFS_Init+0x1c>)
 800a1b8:	f007 fb10 	bl	80117dc <FATFS_LinkDriver>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	461a      	mov	r2, r3
 800a1c0:	4b03      	ldr	r3, [pc, #12]	; (800a1d0 <MX_FATFS_Init+0x20>)
 800a1c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a1c4:	bf00      	nop
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	2000732c 	.word	0x2000732c
 800a1cc:	0801624c 	.word	0x0801624c
 800a1d0:	20007328 	.word	0x20007328

0800a1d4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a1d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a1ee:	f000 f896 	bl	800a31e <BSP_SD_IsDetected>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d001      	beq.n	800a1fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	e012      	b.n	800a222 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a1fc:	480b      	ldr	r0, [pc, #44]	; (800a22c <BSP_SD_Init+0x48>)
 800a1fe:	f7fb f9ff 	bl	8005600 <HAL_SD_Init>
 800a202:	4603      	mov	r3, r0
 800a204:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a206:	79fb      	ldrb	r3, [r7, #7]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d109      	bne.n	800a220 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a20c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a210:	4806      	ldr	r0, [pc, #24]	; (800a22c <BSP_SD_Init+0x48>)
 800a212:	f7fc fb4f 	bl	80068b4 <HAL_SD_ConfigWideBusOperation>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d001      	beq.n	800a220 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a220:	79fb      	ldrb	r3, [r7, #7]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20004c8c 	.word	0x20004c8c

0800a230 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	68f9      	ldr	r1, [r7, #12]
 800a246:	4806      	ldr	r0, [pc, #24]	; (800a260 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a248:	f7fb fe0a 	bl	8005e60 <HAL_SD_ReadBlocks_DMA>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a256:	7dfb      	ldrb	r3, [r7, #23]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	20004c8c 	.word	0x20004c8c

0800a264 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	68f9      	ldr	r1, [r7, #12]
 800a27a:	4806      	ldr	r0, [pc, #24]	; (800a294 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a27c:	f7fb fedc 	bl	8006038 <HAL_SD_WriteBlocks_DMA>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	20004c8c 	.word	0x20004c8c

0800a298 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a29c:	4805      	ldr	r0, [pc, #20]	; (800a2b4 <BSP_SD_GetCardState+0x1c>)
 800a29e:	f7fc fb85 	bl	80069ac <HAL_SD_GetCardState>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	bf14      	ite	ne
 800a2a8:	2301      	movne	r3, #1
 800a2aa:	2300      	moveq	r3, #0
 800a2ac:	b2db      	uxtb	r3, r3
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	20004c8c 	.word	0x20004c8c

0800a2b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a2c0:	6879      	ldr	r1, [r7, #4]
 800a2c2:	4803      	ldr	r0, [pc, #12]	; (800a2d0 <BSP_SD_GetCardInfo+0x18>)
 800a2c4:	f7fc faca 	bl	800685c <HAL_SD_GetCardInfo>
}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	20004c8c 	.word	0x20004c8c

0800a2d4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a2dc:	f000 f818 	bl	800a310 <BSP_SD_AbortCallback>
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a2f0:	f000 f9b4 	bl	800a65c <BSP_SD_WriteCpltCallback>
}
 800a2f4:	bf00      	nop
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a304:	f000 f9bc 	bl	800a680 <BSP_SD_ReadCpltCallback>
}
 800a308:	bf00      	nop
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a310:	b480      	push	{r7}
 800a312:	af00      	add	r7, sp, #0

}
 800a314:	bf00      	nop
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b082      	sub	sp, #8
 800a322:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a324:	2301      	movs	r3, #1
 800a326:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800a328:	f000 f80c 	bl	800a344 <BSP_PlatformIsDetected>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d101      	bne.n	800a336 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a332:	2300      	movs	r3, #0
 800a334:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a336:	79fb      	ldrb	r3, [r7, #7]
 800a338:	b2db      	uxtb	r3, r3
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a34a:	2301      	movs	r3, #1
 800a34c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a34e:	2104      	movs	r1, #4
 800a350:	4806      	ldr	r0, [pc, #24]	; (800a36c <BSP_PlatformIsDetected+0x28>)
 800a352:	f7f8 fdc1 	bl	8002ed8 <HAL_GPIO_ReadPin>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d001      	beq.n	800a360 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a35c:	2300      	movs	r3, #0
 800a35e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800a360:	79fb      	ldrb	r3, [r7, #7]
}  
 800a362:	4618      	mov	r0, r3
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	40021800 	.word	0x40021800

0800a370 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800a378:	f007 fbf8 	bl	8011b6c <osKernelGetTickCount>
 800a37c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800a37e:	e006      	b.n	800a38e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a380:	f7ff ff8a 	bl	800a298 <BSP_SD_GetCardState>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a38a:	2300      	movs	r3, #0
 800a38c:	e009      	b.n	800a3a2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800a38e:	f007 fbed 	bl	8011b6c <osKernelGetTickCount>
 800a392:	4602      	mov	r2, r0
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d8f0      	bhi.n	800a380 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a39e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
	...

0800a3ac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a3b6:	4b0b      	ldr	r3, [pc, #44]	; (800a3e4 <SD_CheckStatus+0x38>)
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a3bc:	f7ff ff6c 	bl	800a298 <BSP_SD_GetCardState>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d107      	bne.n	800a3d6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a3c6:	4b07      	ldr	r3, [pc, #28]	; (800a3e4 <SD_CheckStatus+0x38>)
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	f023 0301 	bic.w	r3, r3, #1
 800a3d0:	b2da      	uxtb	r2, r3
 800a3d2:	4b04      	ldr	r3, [pc, #16]	; (800a3e4 <SD_CheckStatus+0x38>)
 800a3d4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a3d6:	4b03      	ldr	r3, [pc, #12]	; (800a3e4 <SD_CheckStatus+0x38>)
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	b2db      	uxtb	r3, r3
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	20000019 	.word	0x20000019

0800a3e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800a3f2:	4b1c      	ldr	r3, [pc, #112]	; (800a464 <SD_initialize+0x7c>)
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800a3f8:	f007 fb60 	bl	8011abc <osKernelGetState>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d129      	bne.n	800a456 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a402:	f7ff feef 	bl	800a1e4 <BSP_SD_Init>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d107      	bne.n	800a41c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a40c:	79fb      	ldrb	r3, [r7, #7]
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff ffcc 	bl	800a3ac <SD_CheckStatus>
 800a414:	4603      	mov	r3, r0
 800a416:	461a      	mov	r2, r3
 800a418:	4b12      	ldr	r3, [pc, #72]	; (800a464 <SD_initialize+0x7c>)
 800a41a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a41c:	4b11      	ldr	r3, [pc, #68]	; (800a464 <SD_initialize+0x7c>)
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b01      	cmp	r3, #1
 800a424:	d017      	beq.n	800a456 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800a426:	4b10      	ldr	r3, [pc, #64]	; (800a468 <SD_initialize+0x80>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d107      	bne.n	800a43e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800a42e:	2200      	movs	r2, #0
 800a430:	2102      	movs	r1, #2
 800a432:	200a      	movs	r0, #10
 800a434:	f007 fe28 	bl	8012088 <osMessageQueueNew>
 800a438:	4602      	mov	r2, r0
 800a43a:	4b0b      	ldr	r3, [pc, #44]	; (800a468 <SD_initialize+0x80>)
 800a43c:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800a43e:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <SD_initialize+0x80>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d107      	bne.n	800a456 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800a446:	4b07      	ldr	r3, [pc, #28]	; (800a464 <SD_initialize+0x7c>)
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	f043 0301 	orr.w	r3, r3, #1
 800a450:	b2da      	uxtb	r2, r3
 800a452:	4b04      	ldr	r3, [pc, #16]	; (800a464 <SD_initialize+0x7c>)
 800a454:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a456:	4b03      	ldr	r3, [pc, #12]	; (800a464 <SD_initialize+0x7c>)
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	b2db      	uxtb	r3, r3
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	20000019 	.word	0x20000019
 800a468:	20000214 	.word	0x20000214

0800a46c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a476:	79fb      	ldrb	r3, [r7, #7]
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff ff97 	bl	800a3ac <SD_CheckStatus>
 800a47e:	4603      	mov	r3, r0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b088      	sub	sp, #32
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	607a      	str	r2, [r7, #4]
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	4603      	mov	r3, r0
 800a496:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a49c:	f247 5030 	movw	r0, #30000	; 0x7530
 800a4a0:	f7ff ff66 	bl	800a370 <SD_CheckStatusWithTimeout>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	da01      	bge.n	800a4ae <SD_read+0x26>
  {
    return res;
 800a4aa:	7ffb      	ldrb	r3, [r7, #31]
 800a4ac:	e02f      	b.n	800a50e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	6879      	ldr	r1, [r7, #4]
 800a4b2:	68b8      	ldr	r0, [r7, #8]
 800a4b4:	f7ff febc 	bl	800a230 <BSP_SD_ReadBlocks_DMA>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800a4bc:	7fbb      	ldrb	r3, [r7, #30]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d124      	bne.n	800a50c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a4c2:	4b15      	ldr	r3, [pc, #84]	; (800a518 <SD_read+0x90>)
 800a4c4:	6818      	ldr	r0, [r3, #0]
 800a4c6:	f107 0112 	add.w	r1, r7, #18
 800a4ca:	f247 5330 	movw	r3, #30000	; 0x7530
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f007 fed4 	bl	801227c <osMessageQueueGet>
 800a4d4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d117      	bne.n	800a50c <SD_read+0x84>
 800a4dc:	8a7b      	ldrh	r3, [r7, #18]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d114      	bne.n	800a50c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800a4e2:	f007 fb43 	bl	8011b6c <osKernelGetTickCount>
 800a4e6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a4e8:	e007      	b.n	800a4fa <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a4ea:	f7ff fed5 	bl	800a298 <BSP_SD_GetCardState>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d102      	bne.n	800a4fa <SD_read+0x72>
              {
                res = RES_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a4f8:	e008      	b.n	800a50c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a4fa:	f007 fb37 	bl	8011b6c <osKernelGetTickCount>
 800a4fe:	4602      	mov	r2, r0
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	f247 522f 	movw	r2, #29999	; 0x752f
 800a508:	4293      	cmp	r3, r2
 800a50a:	d9ee      	bls.n	800a4ea <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a50c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3720      	adds	r7, #32
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	20000214 	.word	0x20000214

0800a51c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af00      	add	r7, sp, #0
 800a522:	60b9      	str	r1, [r7, #8]
 800a524:	607a      	str	r2, [r7, #4]
 800a526:	603b      	str	r3, [r7, #0]
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a530:	f247 5030 	movw	r0, #30000	; 0x7530
 800a534:	f7ff ff1c 	bl	800a370 <SD_CheckStatusWithTimeout>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	da01      	bge.n	800a542 <SD_write+0x26>
  {
    return res;
 800a53e:	7ffb      	ldrb	r3, [r7, #31]
 800a540:	e02d      	b.n	800a59e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	6879      	ldr	r1, [r7, #4]
 800a546:	68b8      	ldr	r0, [r7, #8]
 800a548:	f7ff fe8c 	bl	800a264 <BSP_SD_WriteBlocks_DMA>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d124      	bne.n	800a59c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a552:	4b15      	ldr	r3, [pc, #84]	; (800a5a8 <SD_write+0x8c>)
 800a554:	6818      	ldr	r0, [r3, #0]
 800a556:	f107 0112 	add.w	r1, r7, #18
 800a55a:	f247 5330 	movw	r3, #30000	; 0x7530
 800a55e:	2200      	movs	r2, #0
 800a560:	f007 fe8c 	bl	801227c <osMessageQueueGet>
 800a564:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d117      	bne.n	800a59c <SD_write+0x80>
 800a56c:	8a7b      	ldrh	r3, [r7, #18]
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d114      	bne.n	800a59c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800a572:	f007 fafb 	bl	8011b6c <osKernelGetTickCount>
 800a576:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a578:	e007      	b.n	800a58a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a57a:	f7ff fe8d 	bl	800a298 <BSP_SD_GetCardState>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d102      	bne.n	800a58a <SD_write+0x6e>
          {
            res = RES_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	77fb      	strb	r3, [r7, #31]
            break;
 800a588:	e008      	b.n	800a59c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a58a:	f007 faef 	bl	8011b6c <osKernelGetTickCount>
 800a58e:	4602      	mov	r2, r0
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	f247 522f 	movw	r2, #29999	; 0x752f
 800a598:	4293      	cmp	r3, r2
 800a59a:	d9ee      	bls.n	800a57a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800a59c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3720      	adds	r7, #32
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20000214 	.word	0x20000214

0800a5ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08c      	sub	sp, #48	; 0x30
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	603a      	str	r2, [r7, #0]
 800a5b6:	71fb      	strb	r3, [r7, #7]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a5c2:	4b25      	ldr	r3, [pc, #148]	; (800a658 <SD_ioctl+0xac>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	f003 0301 	and.w	r3, r3, #1
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <SD_ioctl+0x28>
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e03c      	b.n	800a64e <SD_ioctl+0xa2>

  switch (cmd)
 800a5d4:	79bb      	ldrb	r3, [r7, #6]
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d834      	bhi.n	800a644 <SD_ioctl+0x98>
 800a5da:	a201      	add	r2, pc, #4	; (adr r2, 800a5e0 <SD_ioctl+0x34>)
 800a5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e0:	0800a5f1 	.word	0x0800a5f1
 800a5e4:	0800a5f9 	.word	0x0800a5f9
 800a5e8:	0800a611 	.word	0x0800a611
 800a5ec:	0800a62b 	.word	0x0800a62b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a5f6:	e028      	b.n	800a64a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a5f8:	f107 030c 	add.w	r3, r7, #12
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff fe5b 	bl	800a2b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a60e:	e01c      	b.n	800a64a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a610:	f107 030c 	add.w	r3, r7, #12
 800a614:	4618      	mov	r0, r3
 800a616:	f7ff fe4f 	bl	800a2b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a628:	e00f      	b.n	800a64a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a62a:	f107 030c 	add.w	r3, r7, #12
 800a62e:	4618      	mov	r0, r3
 800a630:	f7ff fe42 	bl	800a2b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a636:	0a5a      	lsrs	r2, r3, #9
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a642:	e002      	b.n	800a64a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a644:	2304      	movs	r3, #4
 800a646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a64a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3730      	adds	r7, #48	; 0x30
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20000019 	.word	0x20000019

0800a65c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800a662:	2302      	movs	r3, #2
 800a664:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a666:	4b05      	ldr	r3, [pc, #20]	; (800a67c <BSP_SD_WriteCpltCallback+0x20>)
 800a668:	6818      	ldr	r0, [r3, #0]
 800a66a:	1db9      	adds	r1, r7, #6
 800a66c:	2300      	movs	r3, #0
 800a66e:	2200      	movs	r2, #0
 800a670:	f007 fd90 	bl	8012194 <osMessageQueuePut>
#endif
}
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	20000214 	.word	0x20000214

0800a680 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800a686:	2301      	movs	r3, #1
 800a688:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a68a:	4b05      	ldr	r3, [pc, #20]	; (800a6a0 <BSP_SD_ReadCpltCallback+0x20>)
 800a68c:	6818      	ldr	r0, [r3, #0]
 800a68e:	1db9      	adds	r1, r7, #6
 800a690:	2300      	movs	r3, #0
 800a692:	2200      	movs	r2, #0
 800a694:	f007 fd7e 	bl	8012194 <osMessageQueuePut>
#endif
}
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	20000214 	.word	0x20000214

0800a6a4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800a6b0:	f44f 701d 	mov.w	r0, #628	; 0x274
 800a6b4:	f00b fc60 	bl	8015f78 <malloc>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d105      	bne.n	800a6ce <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	e034      	b.n	800a738 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	7c1b      	ldrb	r3, [r3, #16]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d115      	bne.n	800a70a <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a6de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f00b fa59 	bl	8015b9e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a6f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6f8:	2202      	movs	r2, #2
 800a6fa:	2181      	movs	r1, #129	; 0x81
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f00b fa4e 	bl	8015b9e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	871a      	strh	r2, [r3, #56]	; 0x38
 800a708:	e012      	b.n	800a730 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a70a:	2340      	movs	r3, #64	; 0x40
 800a70c:	2202      	movs	r2, #2
 800a70e:	2101      	movs	r1, #1
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f00b fa44 	bl	8015b9e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2201      	movs	r2, #1
 800a71a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a71e:	2340      	movs	r3, #64	; 0x40
 800a720:	2202      	movs	r2, #2
 800a722:	2181      	movs	r1, #129	; 0x81
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f00b fa3a 	bl	8015b9e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f98e 	bl	800aa52 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800a74c:	2101      	movs	r1, #1
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f00b fa4b 	bl	8015bea <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800a75c:	2181      	movs	r1, #129	; 0x81
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f00b fa43 	bl	8015bea <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f9c7 	bl	800aafe <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a776:	2b00      	cmp	r3, #0
 800a778:	d009      	beq.n	800a78e <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a780:	4618      	mov	r0, r3
 800a782:	f00b fc01 	bl	8015f88 <free>
    pdev->pClassData = NULL;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7a8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d04d      	beq.n	800a85a <USBD_MSC_Setup+0xc2>
 800a7be:	2b20      	cmp	r3, #32
 800a7c0:	f040 80c6 	bne.w	800a950 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	785b      	ldrb	r3, [r3, #1]
 800a7c8:	2bfe      	cmp	r3, #254	; 0xfe
 800a7ca:	d002      	beq.n	800a7d2 <USBD_MSC_Setup+0x3a>
 800a7cc:	2bff      	cmp	r3, #255	; 0xff
 800a7ce:	d024      	beq.n	800a81a <USBD_MSC_Setup+0x82>
 800a7d0:	e03b      	b.n	800a84a <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	885b      	ldrh	r3, [r3, #2]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d118      	bne.n	800a80c <USBD_MSC_Setup+0x74>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	88db      	ldrh	r3, [r3, #6]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d114      	bne.n	800a80c <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	da0f      	bge.n	800a80c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	4798      	blx	r3
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2201      	movs	r2, #1
 800a802:	4619      	mov	r1, r3
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f002 fc82 	bl	800d10e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a80a:	e025      	b.n	800a858 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f002 fc0c 	bl	800d02c <USBD_CtlError>
        ret = USBD_FAIL;
 800a814:	2303      	movs	r3, #3
 800a816:	75fb      	strb	r3, [r7, #23]
      break;
 800a818:	e01e      	b.n	800a858 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	885b      	ldrh	r3, [r3, #2]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10c      	bne.n	800a83c <USBD_MSC_Setup+0xa4>
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	88db      	ldrh	r3, [r3, #6]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d108      	bne.n	800a83c <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a830:	2b00      	cmp	r3, #0
 800a832:	db03      	blt.n	800a83c <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f940 	bl	800aaba <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a83a:	e00d      	b.n	800a858 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f002 fbf4 	bl	800d02c <USBD_CtlError>
        ret = USBD_FAIL;
 800a844:	2303      	movs	r3, #3
 800a846:	75fb      	strb	r3, [r7, #23]
      break;
 800a848:	e006      	b.n	800a858 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f002 fbed 	bl	800d02c <USBD_CtlError>
      ret = USBD_FAIL;
 800a852:	2303      	movs	r3, #3
 800a854:	75fb      	strb	r3, [r7, #23]
      break;
 800a856:	bf00      	nop
    }
    break;
 800a858:	e081      	b.n	800a95e <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	785b      	ldrb	r3, [r3, #1]
 800a85e:	2b0b      	cmp	r3, #11
 800a860:	d86d      	bhi.n	800a93e <USBD_MSC_Setup+0x1a6>
 800a862:	a201      	add	r2, pc, #4	; (adr r2, 800a868 <USBD_MSC_Setup+0xd0>)
 800a864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a868:	0800a899 	.word	0x0800a899
 800a86c:	0800a90f 	.word	0x0800a90f
 800a870:	0800a93f 	.word	0x0800a93f
 800a874:	0800a93f 	.word	0x0800a93f
 800a878:	0800a93f 	.word	0x0800a93f
 800a87c:	0800a93f 	.word	0x0800a93f
 800a880:	0800a93f 	.word	0x0800a93f
 800a884:	0800a93f 	.word	0x0800a93f
 800a888:	0800a93f 	.word	0x0800a93f
 800a88c:	0800a93f 	.word	0x0800a93f
 800a890:	0800a8c1 	.word	0x0800a8c1
 800a894:	0800a8e9 	.word	0x0800a8e9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d107      	bne.n	800a8b2 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a8a2:	f107 030e 	add.w	r3, r7, #14
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f002 fc2f 	bl	800d10e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a8b0:	e04d      	b.n	800a94e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f002 fbb9 	bl	800d02c <USBD_CtlError>
        ret = USBD_FAIL;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	75fb      	strb	r3, [r7, #23]
      break;
 800a8be:	e046      	b.n	800a94e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d107      	bne.n	800a8da <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	3304      	adds	r3, #4
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f002 fc1b 	bl	800d10e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a8d8:	e039      	b.n	800a94e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f002 fba5 	bl	800d02c <USBD_CtlError>
        ret = USBD_FAIL;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8e6:	e032      	b.n	800a94e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d106      	bne.n	800a900 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	885b      	ldrh	r3, [r3, #2]
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a8fe:	e026      	b.n	800a94e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f002 fb92 	bl	800d02c <USBD_CtlError>
        ret = USBD_FAIL;
 800a908:	2303      	movs	r3, #3
 800a90a:	75fb      	strb	r3, [r7, #23]
      break;
 800a90c:	e01f      	b.n	800a94e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a914:	2b03      	cmp	r3, #3
 800a916:	d119      	bne.n	800a94c <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	885b      	ldrh	r3, [r3, #2]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d115      	bne.n	800a94c <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	889b      	ldrh	r3, [r3, #4]
 800a924:	b2db      	uxtb	r3, r3
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f00b f97d 	bl	8015c28 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	889b      	ldrh	r3, [r3, #4]
 800a932:	b2db      	uxtb	r3, r3
 800a934:	4619      	mov	r1, r3
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fa5a 	bl	800adf0 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800a93c:	e006      	b.n	800a94c <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f002 fb73 	bl	800d02c <USBD_CtlError>
      ret = USBD_FAIL;
 800a946:	2303      	movs	r3, #3
 800a948:	75fb      	strb	r3, [r7, #23]
      break;
 800a94a:	e000      	b.n	800a94e <USBD_MSC_Setup+0x1b6>
      break;
 800a94c:	bf00      	nop
    }
    break;
 800a94e:	e006      	b.n	800a95e <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f002 fb6a 	bl	800d02c <USBD_CtlError>
    ret = USBD_FAIL;
 800a958:	2303      	movs	r3, #3
 800a95a:	75fb      	strb	r3, [r7, #23]
    break;
 800a95c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3718      	adds	r7, #24
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	460b      	mov	r3, r1
 800a972:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800a974:	78fb      	ldrb	r3, [r7, #3]
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f8d1 	bl	800ab20 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	460b      	mov	r3, r1
 800a992:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800a994:	78fb      	ldrb	r3, [r7, #3]
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f8f2 	bl	800ab82 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2220      	movs	r2, #32
 800a9b4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800a9b6:	4b03      	ldr	r3, [pc, #12]	; (800a9c4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	20000054 	.word	0x20000054

0800a9c8 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2220      	movs	r2, #32
 800a9d4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800a9d6:	4b03      	ldr	r3, [pc, #12]	; (800a9e4 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	20000074 	.word	0x20000074

0800a9e8 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2220      	movs	r2, #32
 800a9f4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800a9f6:	4b03      	ldr	r3, [pc, #12]	; (800aa04 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	20000094 	.word	0x20000094

0800aa08 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	220a      	movs	r2, #10
 800aa14:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800aa16:	4b03      	ldr	r3, [pc, #12]	; (800aa24 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	200000b4 	.word	0x200000b4

0800aa28 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	e004      	b.n	800aa46 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa60:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2000      	movs	r0, #0
 800aa90:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800aa92:	2101      	movs	r1, #1
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f00b f8c7 	bl	8015c28 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800aa9a:	2181      	movs	r1, #129	; 0x81
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f00b f8c3 	bl	8015c28 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800aaa8:	231f      	movs	r3, #31
 800aaaa:	2101      	movs	r1, #1
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f00b f984 	bl	8015dba <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800aab2:	bf00      	nop
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b084      	sub	sp, #16
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aac8:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2201      	movs	r2, #1
 800aad4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800aad6:	2181      	movs	r1, #129	; 0x81
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f00b f8e3 	bl	8015ca4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800aade:	2101      	movs	r1, #1
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f00b f8df 	bl	8015ca4 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800aaec:	231f      	movs	r3, #31
 800aaee:	2101      	movs	r1, #1
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f00b f962 	bl	8015dba <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800aaf6:	bf00      	nop
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b085      	sub	sp, #20
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab0c:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	721a      	strb	r2, [r3, #8]
}
 800ab14:	bf00      	nop
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab32:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	7a1b      	ldrb	r3, [r3, #8]
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d004      	beq.n	800ab46 <MSC_BOT_DataIn+0x26>
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	db19      	blt.n	800ab74 <MSC_BOT_DataIn+0x54>
 800ab40:	2b04      	cmp	r3, #4
 800ab42:	dc17      	bgt.n	800ab74 <MSC_BOT_DataIn+0x54>
 800ab44:	e011      	b.n	800ab6a <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800ab52:	461a      	mov	r2, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f973 	bl	800ae40 <SCSI_ProcessCmd>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	da0b      	bge.n	800ab78 <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ab60:	2101      	movs	r1, #1
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f8ea 	bl	800ad3c <MSC_BOT_SendCSW>
    }
    break;
 800ab68:	e006      	b.n	800ab78 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f8e5 	bl	800ad3c <MSC_BOT_SendCSW>
    break;
 800ab72:	e002      	b.n	800ab7a <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800ab74:	bf00      	nop
 800ab76:	e000      	b.n	800ab7a <MSC_BOT_DataIn+0x5a>
    break;
 800ab78:	bf00      	nop
  }
}
 800ab7a:	bf00      	nop
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b084      	sub	sp, #16
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab94:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	7a1b      	ldrb	r3, [r3, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d002      	beq.n	800aba4 <MSC_BOT_DataOut+0x22>
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d004      	beq.n	800abac <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800aba2:	e015      	b.n	800abd0 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f817 	bl	800abd8 <MSC_BOT_CBW_Decode>
      break;
 800abaa:	e011      	b.n	800abd0 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800abb8:	461a      	mov	r2, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f940 	bl	800ae40 <SCSI_ProcessCmd>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	da03      	bge.n	800abce <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800abc6:	2101      	movs	r1, #1
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f8b7 	bl	800ad3c <MSC_BOT_SendCSW>
      break;
 800abce:	bf00      	nop
  }
}
 800abd0:	bf00      	nop
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abe6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800ac00:	2101      	movs	r1, #1
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f00b f8fa 	bl	8015dfc <USBD_LL_GetRxDataSize>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b1f      	cmp	r3, #31
 800ac0c:	d114      	bne.n	800ac38 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800ac14:	4a32      	ldr	r2, [pc, #200]	; (800ace0 <MSC_BOT_CBW_Decode+0x108>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d10e      	bne.n	800ac38 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d809      	bhi.n	800ac38 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d004      	beq.n	800ac38 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ac34:	2b10      	cmp	r3, #16
 800ac36:	d90e      	bls.n	800ac56 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ac3e:	2320      	movs	r3, #32
 800ac40:	2205      	movs	r2, #5
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fcc9 	bl	800b5da <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f8a0 	bl	800ad94 <MSC_BOT_Abort>
 800ac54:	e041      	b.n	800acda <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800ac62:	461a      	mov	r2, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f8eb 	bl	800ae40 <SCSI_ProcessCmd>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	da0c      	bge.n	800ac8a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	7a1b      	ldrb	r3, [r3, #8]
 800ac74:	2b05      	cmp	r3, #5
 800ac76:	d104      	bne.n	800ac82 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ac78:	2101      	movs	r1, #1
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f85e 	bl	800ad3c <MSC_BOT_SendCSW>
 800ac80:	e02b      	b.n	800acda <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 f886 	bl	800ad94 <MSC_BOT_Abort>
 800ac88:	e027      	b.n	800acda <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	7a1b      	ldrb	r3, [r3, #8]
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d022      	beq.n	800acd8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d01e      	beq.n	800acd8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ac9e:	2b03      	cmp	r3, #3
 800aca0:	d01a      	beq.n	800acd8 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d009      	beq.n	800acbe <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f103 0110 	add.w	r1, r3, #16
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	461a      	mov	r2, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f814 	bl	800ace4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800acbc:	e00d      	b.n	800acda <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d104      	bne.n	800acd0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800acc6:	2100      	movs	r1, #0
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f837 	bl	800ad3c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800acce:	e004      	b.n	800acda <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f85f 	bl	800ad94 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800acd6:	e000      	b.n	800acda <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800acd8:	bf00      	nop
    }
  }
}
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	43425355 	.word	0x43425355

0800ace4 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acf6:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	4293      	cmp	r3, r2
 800ad02:	bf28      	it	cs
 800ad04:	4613      	movcs	r3, r2
 800ad06:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	1ad2      	subs	r2, r2, r3
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	2204      	movs	r2, #4
 800ad24:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	2181      	movs	r1, #129	; 0x81
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f00b f823 	bl	8015d78 <USBD_LL_Transmit>
}
 800ad32:	bf00      	nop
 800ad34:	3718      	adds	r7, #24
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
	...

0800ad3c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	460b      	mov	r3, r1
 800ad46:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad4e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4a0f      	ldr	r2, [pc, #60]	; (800ad90 <MSC_BOT_SendCSW+0x54>)
 800ad54:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	78fa      	ldrb	r2, [r7, #3]
 800ad5c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800ad6c:	230d      	movs	r3, #13
 800ad6e:	2181      	movs	r1, #129	; 0x81
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f00b f801 	bl	8015d78 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800ad7c:	231f      	movs	r3, #31
 800ad7e:	2101      	movs	r1, #1
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f00b f81a 	bl	8015dba <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800ad86:	bf00      	nop
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	53425355 	.word	0x53425355

0800ad94 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ada2:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d10c      	bne.n	800adc8 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d007      	beq.n	800adc8 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d103      	bne.n	800adc8 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800adc0:	2101      	movs	r1, #1
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f00a ff4f 	bl	8015c66 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800adc8:	2181      	movs	r1, #129	; 0x81
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f00a ff4b 	bl	8015c66 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	7a5b      	ldrb	r3, [r3, #9]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d107      	bne.n	800ade8 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800add8:	2181      	movs	r1, #129	; 0x81
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f00a ff43 	bl	8015c66 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800ade0:	2101      	movs	r1, #1
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f00a ff3f 	bl	8015c66 <USBD_LL_StallEP>
  }
}
 800ade8:	bf00      	nop
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae02:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	7a5b      	ldrb	r3, [r3, #9]
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d108      	bne.n	800ae1e <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800ae0c:	2181      	movs	r1, #129	; 0x81
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f00a ff29 	bl	8015c66 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800ae14:	2101      	movs	r1, #1
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f00a ff25 	bl	8015c66 <USBD_LL_StallEP>
 800ae1c:	e00d      	b.n	800ae3a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800ae1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	da08      	bge.n	800ae38 <MSC_BOT_CplClrFeature+0x48>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	7a5b      	ldrb	r3, [r3, #9]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d004      	beq.n	800ae38 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ae2e:	2101      	movs	r1, #1
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f7ff ff83 	bl	800ad3c <MSC_BOT_SendCSW>
 800ae36:	e000      	b.n	800ae3a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800ae38:	bf00      	nop
  }
}
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	607a      	str	r2, [r7, #4]
 800ae4c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae54:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	2b25      	cmp	r3, #37	; 0x25
 800ae5c:	d06e      	beq.n	800af3c <SCSI_ProcessCmd+0xfc>
 800ae5e:	2b25      	cmp	r3, #37	; 0x25
 800ae60:	dc11      	bgt.n	800ae86 <SCSI_ProcessCmd+0x46>
 800ae62:	2b1a      	cmp	r3, #26
 800ae64:	d04f      	beq.n	800af06 <SCSI_ProcessCmd+0xc6>
 800ae66:	2b1a      	cmp	r3, #26
 800ae68:	dc06      	bgt.n	800ae78 <SCSI_ProcessCmd+0x38>
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d027      	beq.n	800aebe <SCSI_ProcessCmd+0x7e>
 800ae6e:	2b12      	cmp	r3, #18
 800ae70:	d02e      	beq.n	800aed0 <SCSI_ProcessCmd+0x90>
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d01a      	beq.n	800aeac <SCSI_ProcessCmd+0x6c>
 800ae76:	e0a0      	b.n	800afba <SCSI_ProcessCmd+0x17a>
 800ae78:	2b1e      	cmp	r3, #30
 800ae7a:	d03b      	beq.n	800aef4 <SCSI_ProcessCmd+0xb4>
 800ae7c:	2b23      	cmp	r3, #35	; 0x23
 800ae7e:	d054      	beq.n	800af2a <SCSI_ProcessCmd+0xea>
 800ae80:	2b1b      	cmp	r3, #27
 800ae82:	d02e      	beq.n	800aee2 <SCSI_ProcessCmd+0xa2>
 800ae84:	e099      	b.n	800afba <SCSI_ProcessCmd+0x17a>
 800ae86:	2b5a      	cmp	r3, #90	; 0x5a
 800ae88:	d046      	beq.n	800af18 <SCSI_ProcessCmd+0xd8>
 800ae8a:	2b5a      	cmp	r3, #90	; 0x5a
 800ae8c:	dc07      	bgt.n	800ae9e <SCSI_ProcessCmd+0x5e>
 800ae8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae90:	d078      	beq.n	800af84 <SCSI_ProcessCmd+0x144>
 800ae92:	2b2f      	cmp	r3, #47	; 0x2f
 800ae94:	f000 8088 	beq.w	800afa8 <SCSI_ProcessCmd+0x168>
 800ae98:	2b28      	cmp	r3, #40	; 0x28
 800ae9a:	d061      	beq.n	800af60 <SCSI_ProcessCmd+0x120>
 800ae9c:	e08d      	b.n	800afba <SCSI_ProcessCmd+0x17a>
 800ae9e:	2ba8      	cmp	r3, #168	; 0xa8
 800aea0:	d067      	beq.n	800af72 <SCSI_ProcessCmd+0x132>
 800aea2:	2baa      	cmp	r3, #170	; 0xaa
 800aea4:	d077      	beq.n	800af96 <SCSI_ProcessCmd+0x156>
 800aea6:	2b9e      	cmp	r3, #158	; 0x9e
 800aea8:	d051      	beq.n	800af4e <SCSI_ProcessCmd+0x10e>
 800aeaa:	e086      	b.n	800afba <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800aeac:	7afb      	ldrb	r3, [r7, #11]
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f000 f893 	bl	800afde <SCSI_TestUnitReady>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	75fb      	strb	r3, [r7, #23]
    break;
 800aebc:	e089      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800aebe:	7afb      	ldrb	r3, [r7, #11]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	4619      	mov	r1, r3
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f000 fb0f 	bl	800b4e8 <SCSI_RequestSense>
 800aeca:	4603      	mov	r3, r0
 800aecc:	75fb      	strb	r3, [r7, #23]
    break;
 800aece:	e080      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800aed0:	7afb      	ldrb	r3, [r7, #11]
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	4619      	mov	r1, r3
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f000 f8cc 	bl	800b074 <SCSI_Inquiry>
 800aedc:	4603      	mov	r3, r0
 800aede:	75fb      	strb	r3, [r7, #23]
    break;
 800aee0:	e077      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800aee2:	7afb      	ldrb	r3, [r7, #11]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	4619      	mov	r1, r3
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f000 fbb9 	bl	800b660 <SCSI_StartStopUnit>
 800aeee:	4603      	mov	r3, r0
 800aef0:	75fb      	strb	r3, [r7, #23]
    break;
 800aef2:	e06e      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800aef4:	7afb      	ldrb	r3, [r7, #11]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	4619      	mov	r1, r3
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f000 fbfb 	bl	800b6f6 <SCSI_AllowPreventRemovable>
 800af00:	4603      	mov	r3, r0
 800af02:	75fb      	strb	r3, [r7, #23]
    break;
 800af04:	e065      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800af06:	7afb      	ldrb	r3, [r7, #11]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	4619      	mov	r1, r3
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f000 fa9f 	bl	800b450 <SCSI_ModeSense6>
 800af12:	4603      	mov	r3, r0
 800af14:	75fb      	strb	r3, [r7, #23]
    break;
 800af16:	e05c      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800af18:	7afb      	ldrb	r3, [r7, #11]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	4619      	mov	r1, r3
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f000 fabc 	bl	800b49c <SCSI_ModeSense10>
 800af24:	4603      	mov	r3, r0
 800af26:	75fb      	strb	r3, [r7, #23]
    break;
 800af28:	e053      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800af2a:	7afb      	ldrb	r3, [r7, #11]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	4619      	mov	r1, r3
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f000 fa20 	bl	800b376 <SCSI_ReadFormatCapacity>
 800af36:	4603      	mov	r3, r0
 800af38:	75fb      	strb	r3, [r7, #23]
    break;
 800af3a:	e04a      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800af3c:	7afb      	ldrb	r3, [r7, #11]
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	4619      	mov	r1, r3
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f000 f904 	bl	800b150 <SCSI_ReadCapacity10>
 800af48:	4603      	mov	r3, r0
 800af4a:	75fb      	strb	r3, [r7, #23]
    break;
 800af4c:	e041      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800af4e:	7afb      	ldrb	r3, [r7, #11]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	4619      	mov	r1, r3
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f000 f96a 	bl	800b22e <SCSI_ReadCapacity16>
 800af5a:	4603      	mov	r3, r0
 800af5c:	75fb      	strb	r3, [r7, #23]
    break;
 800af5e:	e038      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800af60:	7afb      	ldrb	r3, [r7, #11]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	4619      	mov	r1, r3
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 fbe8 	bl	800b73c <SCSI_Read10>
 800af6c:	4603      	mov	r3, r0
 800af6e:	75fb      	strb	r3, [r7, #23]
    break;
 800af70:	e02f      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800af72:	7afb      	ldrb	r3, [r7, #11]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	4619      	mov	r1, r3
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f000 fc79 	bl	800b870 <SCSI_Read12>
 800af7e:	4603      	mov	r3, r0
 800af80:	75fb      	strb	r3, [r7, #23]
    break;
 800af82:	e026      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800af84:	7afb      	ldrb	r3, [r7, #11]
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	4619      	mov	r1, r3
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f000 fd15 	bl	800b9ba <SCSI_Write10>
 800af90:	4603      	mov	r3, r0
 800af92:	75fb      	strb	r3, [r7, #23]
    break;
 800af94:	e01d      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800af96:	7afb      	ldrb	r3, [r7, #11]
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	4619      	mov	r1, r3
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f000 fdcb 	bl	800bb38 <SCSI_Write12>
 800afa2:	4603      	mov	r3, r0
 800afa4:	75fb      	strb	r3, [r7, #23]
    break;
 800afa6:	e014      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800afa8:	7afb      	ldrb	r3, [r7, #11]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	4619      	mov	r1, r3
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f000 fe91 	bl	800bcd6 <SCSI_Verify10>
 800afb4:	4603      	mov	r3, r0
 800afb6:	75fb      	strb	r3, [r7, #23]
    break;
 800afb8:	e00b      	b.n	800afd2 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800afba:	7af9      	ldrb	r1, [r7, #11]
 800afbc:	2320      	movs	r3, #32
 800afbe:	2205      	movs	r2, #5
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f000 fb0a 	bl	800b5da <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	2202      	movs	r2, #2
 800afca:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800afcc:	23ff      	movs	r3, #255	; 0xff
 800afce:	75fb      	strb	r3, [r7, #23]
    break;
 800afd0:	bf00      	nop
  }

  return ret;
 800afd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3718      	adds	r7, #24
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b086      	sub	sp, #24
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	60f8      	str	r0, [r7, #12]
 800afe6:	460b      	mov	r3, r1
 800afe8:	607a      	str	r2, [r7, #4]
 800afea:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aff2:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00a      	beq.n	800b014 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b004:	2320      	movs	r3, #32
 800b006:	2205      	movs	r2, #5
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f000 fae6 	bl	800b5da <SCSI_SenseCode>

    return -1;
 800b00e:	f04f 33ff 	mov.w	r3, #4294967295
 800b012:	e02a      	b.n	800b06a <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d10b      	bne.n	800b036 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b01e:	7af9      	ldrb	r1, [r7, #11]
 800b020:	233a      	movs	r3, #58	; 0x3a
 800b022:	2202      	movs	r2, #2
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f000 fad8 	bl	800b5da <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	2205      	movs	r2, #5
 800b02e:	721a      	strb	r2, [r3, #8]
    return -1;
 800b030:	f04f 33ff 	mov.w	r3, #4294967295
 800b034:	e019      	b.n	800b06a <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	7afa      	ldrb	r2, [r7, #11]
 800b040:	4610      	mov	r0, r2
 800b042:	4798      	blx	r3
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00b      	beq.n	800b062 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b04a:	7af9      	ldrb	r1, [r7, #11]
 800b04c:	233a      	movs	r3, #58	; 0x3a
 800b04e:	2202      	movs	r2, #2
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f000 fac2 	bl	800b5da <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	2205      	movs	r2, #5
 800b05a:	721a      	strb	r2, [r3, #8]

    return -1;
 800b05c:	f04f 33ff 	mov.w	r3, #4294967295
 800b060:	e003      	b.n	800b06a <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	2200      	movs	r2, #0
 800b066:	60da      	str	r2, [r3, #12]

  return 0;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3718      	adds	r7, #24
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
	...

0800b074 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b088      	sub	sp, #32
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	460b      	mov	r3, r1
 800b07e:	607a      	str	r2, [r7, #4]
 800b080:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b088:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b09a:	2320      	movs	r3, #32
 800b09c:	2205      	movs	r2, #5
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f000 fa9b 	bl	800b5da <SCSI_SenseCode>
    return -1;
 800b0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a8:	e04a      	b.n	800b140 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d020      	beq.n	800b0fa <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3302      	adds	r3, #2
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d105      	bne.n	800b0ce <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800b0c2:	2206      	movs	r2, #6
 800b0c4:	4920      	ldr	r1, [pc, #128]	; (800b148 <SCSI_Inquiry+0xd4>)
 800b0c6:	69b8      	ldr	r0, [r7, #24]
 800b0c8:	f000 ff50 	bl	800bf6c <SCSI_UpdateBotData>
 800b0cc:	e037      	b.n	800b13e <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3302      	adds	r3, #2
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	2b80      	cmp	r3, #128	; 0x80
 800b0d6:	d105      	bne.n	800b0e4 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800b0d8:	2208      	movs	r2, #8
 800b0da:	491c      	ldr	r1, [pc, #112]	; (800b14c <SCSI_Inquiry+0xd8>)
 800b0dc:	69b8      	ldr	r0, [r7, #24]
 800b0de:	f000 ff45 	bl	800bf6c <SCSI_UpdateBotData>
 800b0e2:	e02c      	b.n	800b13e <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b0ea:	2324      	movs	r3, #36	; 0x24
 800b0ec:	2205      	movs	r2, #5
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f000 fa73 	bl	800b5da <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800b0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f8:	e022      	b.n	800b140 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b100:	69d9      	ldr	r1, [r3, #28]
 800b102:	7afa      	ldrb	r2, [r7, #11]
 800b104:	4613      	mov	r3, r2
 800b106:	00db      	lsls	r3, r3, #3
 800b108:	4413      	add	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	440b      	add	r3, r1
 800b10e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	3304      	adds	r3, #4
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	b29b      	uxth	r3, r3
 800b118:	3305      	adds	r3, #5
 800b11a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	3304      	adds	r3, #4
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	b29b      	uxth	r3, r3
 800b124:	8bfa      	ldrh	r2, [r7, #30]
 800b126:	429a      	cmp	r2, r3
 800b128:	d303      	bcc.n	800b132 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	3304      	adds	r3, #4
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800b132:	8bfb      	ldrh	r3, [r7, #30]
 800b134:	461a      	mov	r2, r3
 800b136:	6979      	ldr	r1, [r7, #20]
 800b138:	69b8      	ldr	r0, [r7, #24]
 800b13a:	f000 ff17 	bl	800bf6c <SCSI_UpdateBotData>
  }

  return 0;
 800b13e:	2300      	movs	r3, #0
}
 800b140:	4618      	mov	r0, r3
 800b142:	3720      	adds	r7, #32
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	200000c0 	.word	0x200000c0
 800b14c:	200000c8 	.word	0x200000c8

0800b150 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	460b      	mov	r3, r1
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b164:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	697a      	ldr	r2, [r7, #20]
 800b170:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800b17a:	7af8      	ldrb	r0, [r7, #11]
 800b17c:	4798      	blx	r3
 800b17e:	4603      	mov	r3, r0
 800b180:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b182:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d104      	bne.n	800b194 <SCSI_ReadCapacity10+0x44>
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b190:	2b02      	cmp	r3, #2
 800b192:	d108      	bne.n	800b1a6 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b194:	7af9      	ldrb	r1, [r7, #11]
 800b196:	233a      	movs	r3, #58	; 0x3a
 800b198:	2202      	movs	r2, #2
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f000 fa1d 	bl	800b5da <SCSI_SenseCode>
    return -1;
 800b1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a4:	e03f      	b.n	800b226 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	0e1b      	lsrs	r3, r3, #24
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	0c1b      	lsrs	r3, r3, #16
 800b1c0:	b2da      	uxtb	r2, r3
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	0a1b      	lsrs	r3, r3, #8
 800b1d0:	b2da      	uxtb	r2, r3
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	b2da      	uxtb	r2, r3
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1ec:	161b      	asrs	r3, r3, #24
 800b1ee:	b2da      	uxtb	r2, r3
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1fa:	141b      	asrs	r3, r3, #16
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b208:	0a1b      	lsrs	r3, r3, #8
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b218:	b2da      	uxtb	r2, r3
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	2208      	movs	r2, #8
 800b222:	60da      	str	r2, [r3, #12]

  return 0;
 800b224:	2300      	movs	r3, #0

}
 800b226:	4618      	mov	r0, r3
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b088      	sub	sp, #32
 800b232:	af00      	add	r7, sp, #0
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	460b      	mov	r3, r1
 800b238:	607a      	str	r2, [r7, #4]
 800b23a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b242:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	69ba      	ldr	r2, [r7, #24]
 800b24e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800b252:	69ba      	ldr	r2, [r7, #24]
 800b254:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800b258:	7af8      	ldrb	r0, [r7, #11]
 800b25a:	4798      	blx	r3
 800b25c:	4603      	mov	r3, r0
 800b25e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d104      	bne.n	800b272 <SCSI_ReadCapacity16+0x44>
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b26e:	2b02      	cmp	r3, #2
 800b270:	d108      	bne.n	800b284 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b272:	7af9      	ldrb	r1, [r7, #11]
 800b274:	233a      	movs	r3, #58	; 0x3a
 800b276:	2202      	movs	r2, #2
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f000 f9ae 	bl	800b5da <SCSI_SenseCode>
    return -1;
 800b27e:	f04f 33ff 	mov.w	r3, #4294967295
 800b282:	e074      	b.n	800b36e <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	330a      	adds	r3, #10
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	330b      	adds	r3, #11
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b294:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	330c      	adds	r3, #12
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b29e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	320d      	adds	r2, #13
 800b2a4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b2a6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	77fb      	strb	r3, [r7, #31]
 800b2b0:	e007      	b.n	800b2c2 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800b2b2:	7ffb      	ldrb	r3, [r7, #31]
 800b2b4:	69ba      	ldr	r2, [r7, #24]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b2bc:	7ffb      	ldrb	r3, [r7, #31]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	77fb      	strb	r3, [r7, #31]
 800b2c2:	7ffa      	ldrb	r2, [r7, #31]
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d3f2      	bcc.n	800b2b2 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	0e1b      	lsrs	r3, r3, #24
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	0c1b      	lsrs	r3, r3, #16
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	0a1b      	lsrs	r3, r3, #8
 800b2f6:	b2da      	uxtb	r2, r3
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b302:	b2db      	uxtb	r3, r3
 800b304:	3b01      	subs	r3, #1
 800b306:	b2da      	uxtb	r2, r3
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b312:	161b      	asrs	r3, r3, #24
 800b314:	b2da      	uxtb	r2, r3
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b320:	141b      	asrs	r3, r3, #16
 800b322:	b2da      	uxtb	r2, r3
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b32e:	0a1b      	lsrs	r3, r3, #8
 800b330:	b29b      	uxth	r3, r3
 800b332:	b2da      	uxtb	r2, r3
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b33e:	b2da      	uxtb	r2, r3
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	330a      	adds	r3, #10
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	330b      	adds	r3, #11
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b354:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	330c      	adds	r3, #12
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b35e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	320d      	adds	r2, #13
 800b364:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b366:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	60da      	str	r2, [r3, #12]

  return 0;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3720      	adds	r7, #32
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b088      	sub	sp, #32
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	60f8      	str	r0, [r7, #12]
 800b37e:	460b      	mov	r3, r1
 800b380:	607a      	str	r2, [r7, #4]
 800b382:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b38a:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	f107 0214 	add.w	r2, r7, #20
 800b398:	f107 0110 	add.w	r1, r7, #16
 800b39c:	7af8      	ldrb	r0, [r7, #11]
 800b39e:	4798      	blx	r3
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b3a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d104      	bne.n	800b3b6 <SCSI_ReadFormatCapacity+0x40>
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d108      	bne.n	800b3c8 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b3b6:	7af9      	ldrb	r1, [r7, #11]
 800b3b8:	233a      	movs	r3, #58	; 0x3a
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f000 f90c 	bl	800b5da <SCSI_SenseCode>
    return -1;
 800b3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c6:	e03e      	b.n	800b446 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	83fb      	strh	r3, [r7, #30]
 800b3cc:	e007      	b.n	800b3de <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800b3ce:	8bfb      	ldrh	r3, [r7, #30]
 800b3d0:	69ba      	ldr	r2, [r7, #24]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800b3d8:	8bfb      	ldrh	r3, [r7, #30]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	83fb      	strh	r3, [r7, #30]
 800b3de:	8bfb      	ldrh	r3, [r7, #30]
 800b3e0:	2b0b      	cmp	r3, #11
 800b3e2:	d9f4      	bls.n	800b3ce <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	2208      	movs	r2, #8
 800b3e8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	0e1b      	lsrs	r3, r3, #24
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	0c1b      	lsrs	r3, r3, #16
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	3b01      	subs	r3, #1
 800b406:	0a1b      	lsrs	r3, r3, #8
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	b2db      	uxtb	r3, r3
 800b412:	3b01      	subs	r3, #1
 800b414:	b2da      	uxtb	r2, r3
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	2202      	movs	r2, #2
 800b41e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800b420:	8abb      	ldrh	r3, [r7, #20]
 800b422:	141b      	asrs	r3, r3, #16
 800b424:	b2da      	uxtb	r2, r3
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800b42a:	8abb      	ldrh	r3, [r7, #20]
 800b42c:	0a1b      	lsrs	r3, r3, #8
 800b42e:	b29b      	uxth	r3, r3
 800b430:	b2da      	uxtb	r2, r3
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800b436:	8abb      	ldrh	r3, [r7, #20]
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	220c      	movs	r2, #12
 800b442:	60da      	str	r2, [r3, #12]

  return 0;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3720      	adds	r7, #32
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	460b      	mov	r3, r1
 800b45a:	607a      	str	r2, [r7, #4]
 800b45c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b464:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800b466:	2317      	movs	r3, #23
 800b468:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	3304      	adds	r3, #4
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	b29b      	uxth	r3, r3
 800b472:	8afa      	ldrh	r2, [r7, #22]
 800b474:	429a      	cmp	r2, r3
 800b476:	d303      	bcc.n	800b480 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	3304      	adds	r3, #4
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800b480:	8afb      	ldrh	r3, [r7, #22]
 800b482:	461a      	mov	r2, r3
 800b484:	4904      	ldr	r1, [pc, #16]	; (800b498 <SCSI_ModeSense6+0x48>)
 800b486:	6938      	ldr	r0, [r7, #16]
 800b488:	f000 fd70 	bl	800bf6c <SCSI_UpdateBotData>

  return 0;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	200000d0 	.word	0x200000d0

0800b49c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4b0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800b4b2:	231b      	movs	r3, #27
 800b4b4:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	3308      	adds	r3, #8
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	8afa      	ldrh	r2, [r7, #22]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d303      	bcc.n	800b4cc <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	3308      	adds	r3, #8
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800b4cc:	8afb      	ldrh	r3, [r7, #22]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	4904      	ldr	r1, [pc, #16]	; (800b4e4 <SCSI_ModeSense10+0x48>)
 800b4d2:	6938      	ldr	r0, [r7, #16]
 800b4d4:	f000 fd4a 	bl	800bf6c <SCSI_UpdateBotData>

  return 0;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3718      	adds	r7, #24
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	200000e8 	.word	0x200000e8

0800b4e8 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	607a      	str	r2, [r7, #4]
 800b4f4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4fc:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10a      	bne.n	800b51e <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b50e:	2320      	movs	r3, #32
 800b510:	2205      	movs	r2, #5
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f000 f861 	bl	800b5da <SCSI_SenseCode>
    return -1;
 800b518:	f04f 33ff 	mov.w	r3, #4294967295
 800b51c:	e059      	b.n	800b5d2 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b51e:	2300      	movs	r3, #0
 800b520:	75fb      	strb	r3, [r7, #23]
 800b522:	e007      	b.n	800b534 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800b524:	7dfb      	ldrb	r3, [r7, #23]
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	4413      	add	r3, r2
 800b52a:	2200      	movs	r2, #0
 800b52c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
 800b530:	3301      	adds	r3, #1
 800b532:	75fb      	strb	r3, [r7, #23]
 800b534:	7dfb      	ldrb	r3, [r7, #23]
 800b536:	2b11      	cmp	r3, #17
 800b538:	d9f4      	bls.n	800b524 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	2270      	movs	r2, #112	; 0x70
 800b53e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	220c      	movs	r2, #12
 800b544:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b552:	429a      	cmp	r2, r3
 800b554:	d02e      	beq.n	800b5b4 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b55c:	461a      	mov	r2, r3
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	3248      	adds	r2, #72	; 0x48
 800b562:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	3348      	adds	r3, #72	; 0x48
 800b574:	00db      	lsls	r3, r3, #3
 800b576:	4413      	add	r3, r2
 800b578:	791a      	ldrb	r2, [r3, #4]
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	3348      	adds	r3, #72	; 0x48
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	4413      	add	r3, r2
 800b58c:	795a      	ldrb	r2, [r3, #5]
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b598:	3301      	adds	r3, #1
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b5a8:	2b04      	cmp	r3, #4
 800b5aa:	d103      	bne.n	800b5b4 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	2212      	movs	r2, #18
 800b5b8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	3304      	adds	r3, #4
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	2b12      	cmp	r3, #18
 800b5c2:	d805      	bhi.n	800b5d0 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3718      	adds	r7, #24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800b5da:	b480      	push	{r7}
 800b5dc:	b085      	sub	sp, #20
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
 800b5e2:	4608      	mov	r0, r1
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	70fb      	strb	r3, [r7, #3]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	70bb      	strb	r3, [r7, #2]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5fa:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b602:	461a      	mov	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	3248      	adds	r2, #72	; 0x48
 800b608:	78b9      	ldrb	r1, [r7, #2]
 800b60a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	3348      	adds	r3, #72	; 0x48
 800b618:	00db      	lsls	r3, r3, #3
 800b61a:	4413      	add	r3, r2
 800b61c:	787a      	ldrb	r2, [r7, #1]
 800b61e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	3348      	adds	r3, #72	; 0x48
 800b62a:	00db      	lsls	r3, r3, #3
 800b62c:	4413      	add	r3, r2
 800b62e:	2200      	movs	r2, #0
 800b630:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b638:	3301      	adds	r3, #1
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b648:	2b04      	cmp	r3, #4
 800b64a:	d103      	bne.n	800b654 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800b654:	bf00      	nop
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	460b      	mov	r3, r1
 800b66a:	607a      	str	r2, [r7, #4]
 800b66c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b674:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d10f      	bne.n	800b6a0 <SCSI_StartStopUnit+0x40>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	3304      	adds	r3, #4
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	f003 0303 	and.w	r3, r3, #3
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	d108      	bne.n	800b6a0 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b68e:	7af9      	ldrb	r1, [r7, #11]
 800b690:	2324      	movs	r3, #36	; 0x24
 800b692:	2205      	movs	r2, #5
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7ff ffa0 	bl	800b5da <SCSI_SenseCode>

    return -1;
 800b69a:	f04f 33ff 	mov.w	r3, #4294967295
 800b69e:	e026      	b.n	800b6ee <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	f003 0303 	and.w	r3, r3, #3
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d104      	bne.n	800b6b8 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b6b6:	e016      	b.n	800b6e6 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	f003 0303 	and.w	r3, r3, #3
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d104      	bne.n	800b6d0 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b6ce:	e00a      	b.n	800b6e6 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3304      	adds	r3, #4
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	f003 0303 	and.w	r3, r3, #3
 800b6da:	2b03      	cmp	r3, #3
 800b6dc:	d103      	bne.n	800b6e6 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	60da      	str	r2, [r3, #12]

  return 0;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b087      	sub	sp, #28
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	60f8      	str	r0, [r7, #12]
 800b6fe:	460b      	mov	r3, r1
 800b700:	607a      	str	r2, [r7, #4]
 800b702:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b70a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	3304      	adds	r3, #4
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d104      	bne.n	800b720 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b71e:	e003      	b.n	800b728 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	2201      	movs	r2, #1
 800b724:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	2200      	movs	r2, #0
 800b72c:	60da      	str	r2, [r3, #12]

  return 0;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	371c      	adds	r7, #28
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	460b      	mov	r3, r1
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b750:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	7a1b      	ldrb	r3, [r3, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d17c      	bne.n	800b854 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b760:	b25b      	sxtb	r3, r3
 800b762:	2b00      	cmp	r3, #0
 800b764:	db0a      	blt.n	800b77c <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b76c:	2320      	movs	r3, #32
 800b76e:	2205      	movs	r2, #5
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f7ff ff32 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800b776:	f04f 33ff 	mov.w	r3, #4294967295
 800b77a:	e075      	b.n	800b868 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b782:	2b02      	cmp	r3, #2
 800b784:	d108      	bne.n	800b798 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b786:	7af9      	ldrb	r1, [r7, #11]
 800b788:	233a      	movs	r3, #58	; 0x3a
 800b78a:	2202      	movs	r2, #2
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f7ff ff24 	bl	800b5da <SCSI_SenseCode>

      return -1;
 800b792:	f04f 33ff 	mov.w	r3, #4294967295
 800b796:	e067      	b.n	800b868 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	7afa      	ldrb	r2, [r7, #11]
 800b7a2:	4610      	mov	r0, r2
 800b7a4:	4798      	blx	r3
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d008      	beq.n	800b7be <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b7ac:	7af9      	ldrb	r1, [r7, #11]
 800b7ae:	233a      	movs	r3, #58	; 0x3a
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7ff ff11 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800b7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7bc:	e054      	b.n	800b868 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	3302      	adds	r3, #2
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	3303      	adds	r3, #3
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7ce:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b7d8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	3205      	adds	r2, #5
 800b7de:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b7e0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	3307      	adds	r3, #7
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	021b      	lsls	r3, r3, #8
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	3208      	adds	r2, #8
 800b7f4:	7812      	ldrb	r2, [r2, #0]
 800b7f6:	431a      	orrs	r2, r3
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b80a:	7af9      	ldrb	r1, [r7, #11]
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f000 fa95 	bl	800bd3c <SCSI_CheckAddressRange>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	da02      	bge.n	800b81e <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b818:	f04f 33ff 	mov.w	r3, #4294967295
 800b81c:	e024      	b.n	800b868 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b82a:	6979      	ldr	r1, [r7, #20]
 800b82c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800b830:	fb01 f303 	mul.w	r3, r1, r3
 800b834:	429a      	cmp	r2, r3
 800b836:	d00a      	beq.n	800b84e <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b83e:	2320      	movs	r3, #32
 800b840:	2205      	movs	r2, #5
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f7ff fec9 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800b848:	f04f 33ff 	mov.w	r3, #4294967295
 800b84c:	e00c      	b.n	800b868 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	2202      	movs	r2, #2
 800b852:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b85a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b85c:	7afb      	ldrb	r3, [r7, #11]
 800b85e:	4619      	mov	r1, r3
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 fa8d 	bl	800bd80 <SCSI_ProcessRead>
 800b866:	4603      	mov	r3, r0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3718      	adds	r7, #24
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	460b      	mov	r3, r1
 800b87a:	607a      	str	r2, [r7, #4]
 800b87c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b884:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	7a1b      	ldrb	r3, [r3, #8]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f040 8087 	bne.w	800b99e <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b896:	b25b      	sxtb	r3, r3
 800b898:	2b00      	cmp	r3, #0
 800b89a:	db0a      	blt.n	800b8b2 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b8a2:	2320      	movs	r3, #32
 800b8a4:	2205      	movs	r2, #5
 800b8a6:	68f8      	ldr	r0, [r7, #12]
 800b8a8:	f7ff fe97 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800b8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b8b0:	e07f      	b.n	800b9b2 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d108      	bne.n	800b8ce <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b8bc:	7af9      	ldrb	r1, [r7, #11]
 800b8be:	233a      	movs	r3, #58	; 0x3a
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f7ff fe89 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800b8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b8cc:	e071      	b.n	800b9b2 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	7afa      	ldrb	r2, [r7, #11]
 800b8d8:	4610      	mov	r0, r2
 800b8da:	4798      	blx	r3
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d008      	beq.n	800b8f4 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b8e2:	7af9      	ldrb	r1, [r7, #11]
 800b8e4:	233a      	movs	r3, #58	; 0x3a
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f7ff fe76 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800b8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f2:	e05e      	b.n	800b9b2 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3302      	adds	r3, #2
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	3303      	adds	r3, #3
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b904:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	3304      	adds	r3, #4
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b90e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	3205      	adds	r2, #5
 800b914:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b916:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	3306      	adds	r3, #6
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	3307      	adds	r3, #7
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b92e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	3308      	adds	r3, #8
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800b938:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	3209      	adds	r2, #9
 800b93e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800b940:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b954:	7af9      	ldrb	r1, [r7, #11]
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f000 f9f0 	bl	800bd3c <SCSI_CheckAddressRange>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	da02      	bge.n	800b968 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b962:	f04f 33ff 	mov.w	r3, #4294967295
 800b966:	e024      	b.n	800b9b2 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b974:	6979      	ldr	r1, [r7, #20]
 800b976:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800b97a:	fb01 f303 	mul.w	r3, r1, r3
 800b97e:	429a      	cmp	r2, r3
 800b980:	d00a      	beq.n	800b998 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b988:	2320      	movs	r3, #32
 800b98a:	2205      	movs	r2, #5
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f7ff fe24 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800b992:	f04f 33ff 	mov.w	r3, #4294967295
 800b996:	e00c      	b.n	800b9b2 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	2202      	movs	r2, #2
 800b99c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9a4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b9a6:	7afb      	ldrb	r3, [r7, #11]
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f000 f9e8 	bl	800bd80 <SCSI_ProcessRead>
 800b9b0:	4603      	mov	r3, r0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3718      	adds	r7, #24
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b086      	sub	sp, #24
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	60f8      	str	r0, [r7, #12]
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	607a      	str	r2, [r7, #4]
 800b9c6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9ce:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	7a1b      	ldrb	r3, [r3, #8]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f040 80a5 	bne.w	800bb24 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10a      	bne.n	800b9fa <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b9ea:	2320      	movs	r3, #32
 800b9ec:	2205      	movs	r2, #5
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f7ff fdf3 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800b9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f8:	e09a      	b.n	800bb30 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ba00:	b25b      	sxtb	r3, r3
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	da0a      	bge.n	800ba1c <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ba0c:	2320      	movs	r3, #32
 800ba0e:	2205      	movs	r2, #5
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f7ff fde2 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800ba16:	f04f 33ff 	mov.w	r3, #4294967295
 800ba1a:	e089      	b.n	800bb30 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	7afa      	ldrb	r2, [r7, #11]
 800ba26:	4610      	mov	r0, r2
 800ba28:	4798      	blx	r3
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d008      	beq.n	800ba42 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ba30:	7af9      	ldrb	r1, [r7, #11]
 800ba32:	233a      	movs	r3, #58	; 0x3a
 800ba34:	2202      	movs	r2, #2
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f7ff fdcf 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800ba3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba40:	e076      	b.n	800bb30 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	7afa      	ldrb	r2, [r7, #11]
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	4798      	blx	r3
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d008      	beq.n	800ba68 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ba56:	7af9      	ldrb	r1, [r7, #11]
 800ba58:	2327      	movs	r3, #39	; 0x27
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f7ff fdbc 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800ba62:	f04f 33ff 	mov.w	r3, #4294967295
 800ba66:	e063      	b.n	800bb30 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	3302      	adds	r3, #2
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	3303      	adds	r3, #3
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ba78:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ba82:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	3205      	adds	r2, #5
 800ba88:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ba8a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	3307      	adds	r3, #7
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	3208      	adds	r2, #8
 800ba9e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800baa0:	431a      	orrs	r2, r3
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bab4:	7af9      	ldrb	r1, [r7, #11]
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f000 f940 	bl	800bd3c <SCSI_CheckAddressRange>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	da02      	bge.n	800bac8 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800bac2:	f04f 33ff 	mov.w	r3, #4294967295
 800bac6:	e033      	b.n	800bb30 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bace:	697a      	ldr	r2, [r7, #20]
 800bad0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bad4:	fb02 f303 	mul.w	r3, r2, r3
 800bad8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bae0:	693a      	ldr	r2, [r7, #16]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d00a      	beq.n	800bafc <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800baec:	2320      	movs	r3, #32
 800baee:	2205      	movs	r2, #5
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f7ff fd72 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800baf6:	f04f 33ff 	mov.w	r3, #4294967295
 800bafa:	e019      	b.n	800bb30 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb02:	bf28      	it	cs
 800bb04:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bb08:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f103 0210 	add.w	r2, r3, #16
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	2101      	movs	r1, #1
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f00a f94d 	bl	8015dba <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800bb20:	2300      	movs	r3, #0
 800bb22:	e005      	b.n	800bb30 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800bb24:	7afb      	ldrb	r3, [r7, #11]
 800bb26:	4619      	mov	r1, r3
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f000 f99c 	bl	800be66 <SCSI_ProcessWrite>
 800bb2e:	4603      	mov	r3, r0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3718      	adds	r7, #24
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	460b      	mov	r3, r1
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb4c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	7a1b      	ldrb	r3, [r3, #8]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f040 80b5 	bne.w	800bcc2 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10a      	bne.n	800bb78 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bb68:	2320      	movs	r3, #32
 800bb6a:	2205      	movs	r2, #5
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f7ff fd34 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800bb72:	f04f 33ff 	mov.w	r3, #4294967295
 800bb76:	e0aa      	b.n	800bcce <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800bb7e:	b25b      	sxtb	r3, r3
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	da0a      	bge.n	800bb9a <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bb8a:	2320      	movs	r3, #32
 800bb8c:	2205      	movs	r2, #5
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f7ff fd23 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800bb94:	f04f 33ff 	mov.w	r3, #4294967295
 800bb98:	e099      	b.n	800bcce <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	7afa      	ldrb	r2, [r7, #11]
 800bba4:	4610      	mov	r0, r2
 800bba6:	4798      	blx	r3
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00b      	beq.n	800bbc6 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bbae:	7af9      	ldrb	r1, [r7, #11]
 800bbb0:	233a      	movs	r3, #58	; 0x3a
 800bbb2:	2202      	movs	r2, #2
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f7ff fd10 	bl	800b5da <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2205      	movs	r2, #5
 800bbbe:	721a      	strb	r2, [r3, #8]
      return -1;
 800bbc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc4:	e083      	b.n	800bcce <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	7afa      	ldrb	r2, [r7, #11]
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	4798      	blx	r3
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00b      	beq.n	800bbf2 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800bbda:	7af9      	ldrb	r1, [r7, #11]
 800bbdc:	2327      	movs	r3, #39	; 0x27
 800bbde:	2202      	movs	r2, #2
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f7ff fcfa 	bl	800b5da <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	2205      	movs	r2, #5
 800bbea:	721a      	strb	r2, [r3, #8]
      return -1;
 800bbec:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf0:	e06d      	b.n	800bcce <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	3302      	adds	r3, #2
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	3303      	adds	r3, #3
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bc02:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	3304      	adds	r3, #4
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800bc0c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	3205      	adds	r2, #5
 800bc12:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800bc14:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	3306      	adds	r3, #6
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	3307      	adds	r3, #7
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bc2c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	3308      	adds	r3, #8
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800bc36:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	3209      	adds	r2, #9
 800bc3c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800bc3e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bc52:	7af9      	ldrb	r1, [r7, #11]
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f000 f871 	bl	800bd3c <SCSI_CheckAddressRange>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	da02      	bge.n	800bc66 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800bc60:	f04f 33ff 	mov.w	r3, #4294967295
 800bc64:	e033      	b.n	800bcce <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bc6c:	697a      	ldr	r2, [r7, #20]
 800bc6e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bc72:	fb02 f303 	mul.w	r3, r2, r3
 800bc76:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bc7e:	693a      	ldr	r2, [r7, #16]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d00a      	beq.n	800bc9a <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bc8a:	2320      	movs	r3, #32
 800bc8c:	2205      	movs	r2, #5
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f7ff fca3 	bl	800b5da <SCSI_SenseCode>
      return -1;
 800bc94:	f04f 33ff 	mov.w	r3, #4294967295
 800bc98:	e019      	b.n	800bcce <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bca0:	bf28      	it	cs
 800bca2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bca6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	f103 0210 	add.w	r2, r3, #16
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	2101      	movs	r1, #1
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f00a f87e 	bl	8015dba <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	e005      	b.n	800bcce <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800bcc2:	7afb      	ldrb	r3, [r7, #11]
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f000 f8cd 	bl	800be66 <SCSI_ProcessWrite>
 800bccc:	4603      	mov	r3, r0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3718      	adds	r7, #24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b086      	sub	sp, #24
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	60f8      	str	r0, [r7, #12]
 800bcde:	460b      	mov	r3, r1
 800bce0:	607a      	str	r2, [r7, #4]
 800bce2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcea:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	f003 0302 	and.w	r3, r3, #2
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d008      	beq.n	800bd0c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800bcfa:	7af9      	ldrb	r1, [r7, #11]
 800bcfc:	2324      	movs	r3, #36	; 0x24
 800bcfe:	2205      	movs	r2, #5
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f7ff fc6a 	bl	800b5da <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800bd06:	f04f 33ff 	mov.w	r3, #4294967295
 800bd0a:	e013      	b.n	800bd34 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bd18:	7af9      	ldrb	r1, [r7, #11]
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f000 f80e 	bl	800bd3c <SCSI_CheckAddressRange>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	da02      	bge.n	800bd2c <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800bd26:	f04f 33ff 	mov.w	r3, #4294967295
 800bd2a:	e003      	b.n	800bd34 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	60da      	str	r2, [r3, #12]

  return 0;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3718      	adds	r7, #24
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	607a      	str	r2, [r7, #4]
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd52:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	441a      	add	r2, r3
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d908      	bls.n	800bd76 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800bd64:	7af9      	ldrb	r1, [r7, #11]
 800bd66:	2321      	movs	r3, #33	; 0x21
 800bd68:	2205      	movs	r2, #5
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f7ff fc35 	bl	800b5da <SCSI_SenseCode>
    return -1;
 800bd70:	f04f 33ff 	mov.w	r3, #4294967295
 800bd74:	e000      	b.n	800bd78 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800bd80:	b590      	push	{r4, r7, lr}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd92:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bda0:	fb02 f303 	mul.w	r3, r2, r3
 800bda4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdac:	bf28      	it	cs
 800bdae:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bdb2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdba:	691c      	ldr	r4, [r3, #16]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f103 0110 	add.w	r1, r3, #16
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bdce:	4618      	mov	r0, r3
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	78f8      	ldrb	r0, [r7, #3]
 800bdda:	47a0      	blx	r4
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	da08      	bge.n	800bdf4 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800bde2:	78f9      	ldrb	r1, [r7, #3]
 800bde4:	2311      	movs	r3, #17
 800bde6:	2204      	movs	r2, #4
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f7ff fbf6 	bl	800b5da <SCSI_SenseCode>
    return -1;
 800bdee:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf2:	e034      	b.n	800be5e <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f103 0210 	add.w	r2, r3, #16
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	2181      	movs	r1, #129	; 0x81
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f009 ffba 	bl	8015d78 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be10:	4619      	mov	r1, r3
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	fbb3 f3f1 	udiv	r3, r3, r1
 800be18:	441a      	add	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be2c:	4619      	mov	r1, r3
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	fbb3 f3f1 	udiv	r3, r3, r1
 800be34:	1ad2      	subs	r2, r2, r3
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	1ad2      	subs	r2, r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800be52:	2b00      	cmp	r3, #0
 800be54:	d102      	bne.n	800be5c <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2203      	movs	r2, #3
 800be5a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3714      	adds	r7, #20
 800be62:	46bd      	mov	sp, r7
 800be64:	bd90      	pop	{r4, r7, pc}

0800be66 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800be66:	b590      	push	{r4, r7, lr}
 800be68:	b085      	sub	sp, #20
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
 800be6e:	460b      	mov	r3, r1
 800be70:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be78:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800be86:	fb02 f303 	mul.w	r3, r2, r3
 800be8a:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be92:	bf28      	it	cs
 800be94:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800be98:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bea0:	695c      	ldr	r4, [r3, #20]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f103 0110 	add.w	r1, r3, #16
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800beb4:	4618      	mov	r0, r3
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	78f8      	ldrb	r0, [r7, #3]
 800bec0:	47a0      	blx	r4
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	da08      	bge.n	800beda <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800bec8:	78f9      	ldrb	r1, [r7, #3]
 800beca:	2303      	movs	r3, #3
 800becc:	2204      	movs	r2, #4
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7ff fb83 	bl	800b5da <SCSI_SenseCode>
    return -1;
 800bed4:	f04f 33ff 	mov.w	r3, #4294967295
 800bed8:	e044      	b.n	800bf64 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bee6:	4619      	mov	r1, r3
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	fbb3 f3f1 	udiv	r3, r3, r1
 800beee:	441a      	add	r2, r3
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bf02:	4619      	mov	r1, r3
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf0a:	1ad2      	subs	r2, r2, r3
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	1ad2      	subs	r2, r2, r3
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d104      	bne.n	800bf36 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7fe ff04 	bl	800ad3c <MSC_BOT_SendCSW>
 800bf34:	e015      	b.n	800bf62 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bf42:	fb02 f303 	mul.w	r3, r2, r3
 800bf46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf4a:	bf28      	it	cs
 800bf4c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bf50:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f103 0210 	add.w	r2, r3, #16
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f009 ff2c 	bl	8015dba <USBD_LL_PrepareReceive>
  }

  return 0;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd90      	pop	{r4, r7, pc}

0800bf6c <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b087      	sub	sp, #28
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	4613      	mov	r3, r2
 800bf78:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800bf7a:	88fb      	ldrh	r3, [r7, #6]
 800bf7c:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800bf7e:	8afa      	ldrh	r2, [r7, #22]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800bf84:	e00b      	b.n	800bf9e <SCSI_UpdateBotData+0x32>
  {
    len--;
 800bf86:	8afb      	ldrh	r3, [r7, #22]
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800bf8c:	8afb      	ldrh	r3, [r7, #22]
 800bf8e:	68ba      	ldr	r2, [r7, #8]
 800bf90:	441a      	add	r2, r3
 800bf92:	8afb      	ldrh	r3, [r7, #22]
 800bf94:	7811      	ldrb	r1, [r2, #0]
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	4413      	add	r3, r2
 800bf9a:	460a      	mov	r2, r1
 800bf9c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800bf9e:	8afb      	ldrh	r3, [r7, #22]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1f0      	bne.n	800bf86 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	371c      	adds	r7, #28
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr

0800bfb2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b086      	sub	sp, #24
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	60f8      	str	r0, [r7, #12]
 800bfba:	60b9      	str	r1, [r7, #8]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d101      	bne.n	800bfca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e025      	b.n	800c016 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d003      	beq.n	800bfdc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d003      	beq.n	800bffc <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	79fa      	ldrb	r2, [r7, #7]
 800c008:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f009 fd60 	bl	8015ad0 <USBD_LL_Init>
 800c010:	4603      	mov	r3, r0
 800c012:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c014:	7dfb      	ldrb	r3, [r7, #23]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3718      	adds	r7, #24
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b084      	sub	sp, #16
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
 800c026:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c028:	2300      	movs	r3, #0
 800c02a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d101      	bne.n	800c036 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c032:	2303      	movs	r3, #3
 800c034:	e010      	b.n	800c058 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	683a      	ldr	r2, [r7, #0]
 800c03a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c046:	f107 020e 	add.w	r2, r7, #14
 800c04a:	4610      	mov	r0, r2
 800c04c:	4798      	blx	r3
 800c04e:	4602      	mov	r2, r0
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f009 fd7d 	bl	8015b68 <USBD_LL_Start>
 800c06e:	4603      	mov	r3, r0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c080:	2300      	movs	r3, #0
}
 800c082:	4618      	mov	r0, r3
 800c084:	370c      	adds	r7, #12
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr

0800c08e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	460b      	mov	r3, r1
 800c098:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c09a:	2303      	movs	r3, #3
 800c09c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d009      	beq.n	800c0bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	78fa      	ldrb	r2, [r7, #3]
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	4798      	blx	r3
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b082      	sub	sp, #8
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d007      	beq.n	800c0ec <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	78fa      	ldrb	r2, [r7, #3]
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	4798      	blx	r3
  }

  return USBD_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3708      	adds	r7, #8
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
 800c0fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 ff55 	bl	800cfb8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2201      	movs	r2, #1
 800c112:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c11c:	461a      	mov	r2, r3
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c12a:	f003 031f 	and.w	r3, r3, #31
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d00e      	beq.n	800c150 <USBD_LL_SetupStage+0x5a>
 800c132:	2b01      	cmp	r3, #1
 800c134:	d302      	bcc.n	800c13c <USBD_LL_SetupStage+0x46>
 800c136:	2b02      	cmp	r3, #2
 800c138:	d014      	beq.n	800c164 <USBD_LL_SetupStage+0x6e>
 800c13a:	e01d      	b.n	800c178 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c142:	4619      	mov	r1, r3
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fa17 	bl	800c578 <USBD_StdDevReq>
 800c14a:	4603      	mov	r3, r0
 800c14c:	73fb      	strb	r3, [r7, #15]
      break;
 800c14e:	e020      	b.n	800c192 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c156:	4619      	mov	r1, r3
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fa7b 	bl	800c654 <USBD_StdItfReq>
 800c15e:	4603      	mov	r3, r0
 800c160:	73fb      	strb	r3, [r7, #15]
      break;
 800c162:	e016      	b.n	800c192 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fab7 	bl	800c6e0 <USBD_StdEPReq>
 800c172:	4603      	mov	r3, r0
 800c174:	73fb      	strb	r3, [r7, #15]
      break;
 800c176:	e00c      	b.n	800c192 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c17e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c182:	b2db      	uxtb	r3, r3
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f009 fd6d 	bl	8015c66 <USBD_LL_StallEP>
 800c18c:	4603      	mov	r3, r0
 800c18e:	73fb      	strb	r3, [r7, #15]
      break;
 800c190:	bf00      	nop
  }

  return ret;
 800c192:	7bfb      	ldrb	r3, [r7, #15]
}
 800c194:	4618      	mov	r0, r3
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b086      	sub	sp, #24
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	607a      	str	r2, [r7, #4]
 800c1a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c1aa:	7afb      	ldrb	r3, [r7, #11]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d137      	bne.n	800c220 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c1b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1be:	2b03      	cmp	r3, #3
 800c1c0:	d14a      	bne.n	800c258 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	689a      	ldr	r2, [r3, #8]
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d913      	bls.n	800c1f6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	689a      	ldr	r2, [r3, #8]
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	1ad2      	subs	r2, r2, r3
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	68da      	ldr	r2, [r3, #12]
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	bf28      	it	cs
 800c1e8:	4613      	movcs	r3, r2
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	6879      	ldr	r1, [r7, #4]
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f000 ffb9 	bl	800d166 <USBD_CtlContinueRx>
 800c1f4:	e030      	b.n	800c258 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00a      	beq.n	800c218 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c208:	2b03      	cmp	r3, #3
 800c20a:	d105      	bne.n	800c218 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f000 ffb5 	bl	800d188 <USBD_CtlSendStatus>
 800c21e:	e01b      	b.n	800c258 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c226:	699b      	ldr	r3, [r3, #24]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d013      	beq.n	800c254 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c232:	2b03      	cmp	r3, #3
 800c234:	d10e      	bne.n	800c254 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	7afa      	ldrb	r2, [r7, #11]
 800c240:	4611      	mov	r1, r2
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	4798      	blx	r3
 800c246:	4603      	mov	r3, r0
 800c248:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c24a:	7dfb      	ldrb	r3, [r7, #23]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d003      	beq.n	800c258 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c250:	7dfb      	ldrb	r3, [r7, #23]
 800c252:	e002      	b.n	800c25a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c254:	2303      	movs	r3, #3
 800c256:	e000      	b.n	800c25a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3718      	adds	r7, #24
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b086      	sub	sp, #24
 800c266:	af00      	add	r7, sp, #0
 800c268:	60f8      	str	r0, [r7, #12]
 800c26a:	460b      	mov	r3, r1
 800c26c:	607a      	str	r2, [r7, #4]
 800c26e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c270:	7afb      	ldrb	r3, [r7, #11]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d16a      	bne.n	800c34c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3314      	adds	r3, #20
 800c27a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c282:	2b02      	cmp	r3, #2
 800c284:	d155      	bne.n	800c332 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	689a      	ldr	r2, [r3, #8]
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d914      	bls.n	800c2bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	689a      	ldr	r2, [r3, #8]
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	1ad2      	subs	r2, r2, r3
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	6879      	ldr	r1, [r7, #4]
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f000 ff4b 	bl	800d144 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f009 fd80 	bl	8015dba <USBD_LL_PrepareReceive>
 800c2ba:	e03a      	b.n	800c332 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	68da      	ldr	r2, [r3, #12]
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	689b      	ldr	r3, [r3, #8]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d11c      	bne.n	800c302 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	685a      	ldr	r2, [r3, #4]
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d316      	bcc.n	800c302 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	685a      	ldr	r2, [r3, #4]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d20f      	bcs.n	800c302 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f000 ff2c 	bl	800d144 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f009 fd5d 	bl	8015dba <USBD_LL_PrepareReceive>
 800c300:	e017      	b.n	800c332 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00a      	beq.n	800c324 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c314:	2b03      	cmp	r3, #3
 800c316:	d105      	bne.n	800c324 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c324:	2180      	movs	r1, #128	; 0x80
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f009 fc9d 	bl	8015c66 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f000 ff3e 	bl	800d1ae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d123      	bne.n	800c384 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f7ff fe9b 	bl	800c078 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2200      	movs	r2, #0
 800c346:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c34a:	e01b      	b.n	800c384 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c352:	695b      	ldr	r3, [r3, #20]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d013      	beq.n	800c380 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c35e:	2b03      	cmp	r3, #3
 800c360:	d10e      	bne.n	800c380 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c368:	695b      	ldr	r3, [r3, #20]
 800c36a:	7afa      	ldrb	r2, [r7, #11]
 800c36c:	4611      	mov	r1, r2
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	4798      	blx	r3
 800c372:	4603      	mov	r3, r0
 800c374:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c376:	7dfb      	ldrb	r3, [r7, #23]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d003      	beq.n	800c384 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c37c:	7dfb      	ldrb	r3, [r7, #23]
 800c37e:	e002      	b.n	800c386 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c380:	2303      	movs	r3, #3
 800c382:	e000      	b.n	800c386 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3718      	adds	r7, #24
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b082      	sub	sp, #8
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d009      	beq.n	800c3d2 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	6852      	ldr	r2, [r2, #4]
 800c3ca:	b2d2      	uxtb	r2, r2
 800c3cc:	4611      	mov	r1, r2
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3d2:	2340      	movs	r3, #64	; 0x40
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f009 fbe0 	bl	8015b9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2240      	movs	r2, #64	; 0x40
 800c3ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3ee:	2340      	movs	r3, #64	; 0x40
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	2180      	movs	r1, #128	; 0x80
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f009 fbd2 	bl	8015b9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2240      	movs	r2, #64	; 0x40
 800c404:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	460b      	mov	r3, r1
 800c41a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	78fa      	ldrb	r2, [r7, #3]
 800c420:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2204      	movs	r2, #4
 800c448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	370c      	adds	r7, #12
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b083      	sub	sp, #12
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c468:	2b04      	cmp	r3, #4
 800c46a:	d105      	bne.n	800c478 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	370c      	adds	r7, #12
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr

0800c486 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b082      	sub	sp, #8
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c494:	2b03      	cmp	r3, #3
 800c496:	d10b      	bne.n	800c4b0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c49e:	69db      	ldr	r3, [r3, #28]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d005      	beq.n	800c4b0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4aa:	69db      	ldr	r3, [r3, #28]
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c4ba:	b480      	push	{r7}
 800c4bc:	b083      	sub	sp, #12
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	460b      	mov	r3, r1
 800c4de:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c4e0:	2300      	movs	r3, #0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	370c      	adds	r7, #12
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b083      	sub	sp, #12
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d009      	beq.n	800c532 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	6852      	ldr	r2, [r2, #4]
 800c52a:	b2d2      	uxtb	r2, r2
 800c52c:	4611      	mov	r1, r2
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	4798      	blx	r3
  }

  return USBD_OK;
 800c532:	2300      	movs	r3, #0
}
 800c534:	4618      	mov	r0, r3
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b087      	sub	sp, #28
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	3301      	adds	r3, #1
 800c552:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c55a:	8a3b      	ldrh	r3, [r7, #16]
 800c55c:	021b      	lsls	r3, r3, #8
 800c55e:	b21a      	sxth	r2, r3
 800c560:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c564:	4313      	orrs	r3, r2
 800c566:	b21b      	sxth	r3, r3
 800c568:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c56a:	89fb      	ldrh	r3, [r7, #14]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	371c      	adds	r7, #28
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c582:	2300      	movs	r3, #0
 800c584:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c58e:	2b20      	cmp	r3, #32
 800c590:	d004      	beq.n	800c59c <USBD_StdDevReq+0x24>
 800c592:	2b40      	cmp	r3, #64	; 0x40
 800c594:	d002      	beq.n	800c59c <USBD_StdDevReq+0x24>
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00a      	beq.n	800c5b0 <USBD_StdDevReq+0x38>
 800c59a:	e050      	b.n	800c63e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	6839      	ldr	r1, [r7, #0]
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	4798      	blx	r3
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ae:	e04b      	b.n	800c648 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	785b      	ldrb	r3, [r3, #1]
 800c5b4:	2b09      	cmp	r3, #9
 800c5b6:	d83c      	bhi.n	800c632 <USBD_StdDevReq+0xba>
 800c5b8:	a201      	add	r2, pc, #4	; (adr r2, 800c5c0 <USBD_StdDevReq+0x48>)
 800c5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5be:	bf00      	nop
 800c5c0:	0800c615 	.word	0x0800c615
 800c5c4:	0800c629 	.word	0x0800c629
 800c5c8:	0800c633 	.word	0x0800c633
 800c5cc:	0800c61f 	.word	0x0800c61f
 800c5d0:	0800c633 	.word	0x0800c633
 800c5d4:	0800c5f3 	.word	0x0800c5f3
 800c5d8:	0800c5e9 	.word	0x0800c5e9
 800c5dc:	0800c633 	.word	0x0800c633
 800c5e0:	0800c60b 	.word	0x0800c60b
 800c5e4:	0800c5fd 	.word	0x0800c5fd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 f9ce 	bl	800c98c <USBD_GetDescriptor>
      break;
 800c5f0:	e024      	b.n	800c63c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 fb5d 	bl	800ccb4 <USBD_SetAddress>
      break;
 800c5fa:	e01f      	b.n	800c63c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c5fc:	6839      	ldr	r1, [r7, #0]
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 fb9a 	bl	800cd38 <USBD_SetConfig>
 800c604:	4603      	mov	r3, r0
 800c606:	73fb      	strb	r3, [r7, #15]
      break;
 800c608:	e018      	b.n	800c63c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c60a:	6839      	ldr	r1, [r7, #0]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 fc37 	bl	800ce80 <USBD_GetConfig>
      break;
 800c612:	e013      	b.n	800c63c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fc66 	bl	800cee8 <USBD_GetStatus>
      break;
 800c61c:	e00e      	b.n	800c63c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fc94 	bl	800cf4e <USBD_SetFeature>
      break;
 800c626:	e009      	b.n	800c63c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 fca3 	bl	800cf76 <USBD_ClrFeature>
      break;
 800c630:	e004      	b.n	800c63c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c632:	6839      	ldr	r1, [r7, #0]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fcf9 	bl	800d02c <USBD_CtlError>
      break;
 800c63a:	bf00      	nop
    }
    break;
 800c63c:	e004      	b.n	800c648 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fcf3 	bl	800d02c <USBD_CtlError>
    break;
 800c646:	bf00      	nop
  }

  return ret;
 800c648:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop

0800c654 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c66a:	2b20      	cmp	r3, #32
 800c66c:	d003      	beq.n	800c676 <USBD_StdItfReq+0x22>
 800c66e:	2b40      	cmp	r3, #64	; 0x40
 800c670:	d001      	beq.n	800c676 <USBD_StdItfReq+0x22>
 800c672:	2b00      	cmp	r3, #0
 800c674:	d12a      	bne.n	800c6cc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c67c:	3b01      	subs	r3, #1
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d81d      	bhi.n	800c6be <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	889b      	ldrh	r3, [r3, #4]
 800c686:	b2db      	uxtb	r3, r3
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d813      	bhi.n	800c6b4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	6839      	ldr	r1, [r7, #0]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	4798      	blx	r3
 800c69a:	4603      	mov	r3, r0
 800c69c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	88db      	ldrh	r3, [r3, #6]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d110      	bne.n	800c6c8 <USBD_StdItfReq+0x74>
 800c6a6:	7bfb      	ldrb	r3, [r7, #15]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d10d      	bne.n	800c6c8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 fd6b 	bl	800d188 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c6b2:	e009      	b.n	800c6c8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 fcb8 	bl	800d02c <USBD_CtlError>
      break;
 800c6bc:	e004      	b.n	800c6c8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c6be:	6839      	ldr	r1, [r7, #0]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 fcb3 	bl	800d02c <USBD_CtlError>
      break;
 800c6c6:	e000      	b.n	800c6ca <USBD_StdItfReq+0x76>
      break;
 800c6c8:	bf00      	nop
    }
    break;
 800c6ca:	e004      	b.n	800c6d6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c6cc:	6839      	ldr	r1, [r7, #0]
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 fcac 	bl	800d02c <USBD_CtlError>
    break;
 800c6d4:	bf00      	nop
  }

  return ret;
 800c6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	889b      	ldrh	r3, [r3, #4]
 800c6f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6fc:	2b20      	cmp	r3, #32
 800c6fe:	d004      	beq.n	800c70a <USBD_StdEPReq+0x2a>
 800c700:	2b40      	cmp	r3, #64	; 0x40
 800c702:	d002      	beq.n	800c70a <USBD_StdEPReq+0x2a>
 800c704:	2b00      	cmp	r3, #0
 800c706:	d00a      	beq.n	800c71e <USBD_StdEPReq+0x3e>
 800c708:	e135      	b.n	800c976 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	6839      	ldr	r1, [r7, #0]
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	4798      	blx	r3
 800c718:	4603      	mov	r3, r0
 800c71a:	73fb      	strb	r3, [r7, #15]
    break;
 800c71c:	e130      	b.n	800c980 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	785b      	ldrb	r3, [r3, #1]
 800c722:	2b01      	cmp	r3, #1
 800c724:	d03e      	beq.n	800c7a4 <USBD_StdEPReq+0xc4>
 800c726:	2b03      	cmp	r3, #3
 800c728:	d002      	beq.n	800c730 <USBD_StdEPReq+0x50>
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d077      	beq.n	800c81e <USBD_StdEPReq+0x13e>
 800c72e:	e11c      	b.n	800c96a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c736:	2b02      	cmp	r3, #2
 800c738:	d002      	beq.n	800c740 <USBD_StdEPReq+0x60>
 800c73a:	2b03      	cmp	r3, #3
 800c73c:	d015      	beq.n	800c76a <USBD_StdEPReq+0x8a>
 800c73e:	e02b      	b.n	800c798 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c740:	7bbb      	ldrb	r3, [r7, #14]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00c      	beq.n	800c760 <USBD_StdEPReq+0x80>
 800c746:	7bbb      	ldrb	r3, [r7, #14]
 800c748:	2b80      	cmp	r3, #128	; 0x80
 800c74a:	d009      	beq.n	800c760 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c74c:	7bbb      	ldrb	r3, [r7, #14]
 800c74e:	4619      	mov	r1, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f009 fa88 	bl	8015c66 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c756:	2180      	movs	r1, #128	; 0x80
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f009 fa84 	bl	8015c66 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c75e:	e020      	b.n	800c7a2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 fc62 	bl	800d02c <USBD_CtlError>
        break;
 800c768:	e01b      	b.n	800c7a2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	885b      	ldrh	r3, [r3, #2]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10e      	bne.n	800c790 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c772:	7bbb      	ldrb	r3, [r7, #14]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00b      	beq.n	800c790 <USBD_StdEPReq+0xb0>
 800c778:	7bbb      	ldrb	r3, [r7, #14]
 800c77a:	2b80      	cmp	r3, #128	; 0x80
 800c77c:	d008      	beq.n	800c790 <USBD_StdEPReq+0xb0>
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	88db      	ldrh	r3, [r3, #6]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d104      	bne.n	800c790 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c786:	7bbb      	ldrb	r3, [r7, #14]
 800c788:	4619      	mov	r1, r3
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f009 fa6b 	bl	8015c66 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 fcf9 	bl	800d188 <USBD_CtlSendStatus>

        break;
 800c796:	e004      	b.n	800c7a2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c798:	6839      	ldr	r1, [r7, #0]
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fc46 	bl	800d02c <USBD_CtlError>
        break;
 800c7a0:	bf00      	nop
      }
      break;
 800c7a2:	e0e7      	b.n	800c974 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7aa:	2b02      	cmp	r3, #2
 800c7ac:	d002      	beq.n	800c7b4 <USBD_StdEPReq+0xd4>
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	d015      	beq.n	800c7de <USBD_StdEPReq+0xfe>
 800c7b2:	e02d      	b.n	800c810 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7b4:	7bbb      	ldrb	r3, [r7, #14]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00c      	beq.n	800c7d4 <USBD_StdEPReq+0xf4>
 800c7ba:	7bbb      	ldrb	r3, [r7, #14]
 800c7bc:	2b80      	cmp	r3, #128	; 0x80
 800c7be:	d009      	beq.n	800c7d4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7c0:	7bbb      	ldrb	r3, [r7, #14]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f009 fa4e 	bl	8015c66 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7ca:	2180      	movs	r1, #128	; 0x80
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f009 fa4a 	bl	8015c66 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c7d2:	e023      	b.n	800c81c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c7d4:	6839      	ldr	r1, [r7, #0]
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 fc28 	bl	800d02c <USBD_CtlError>
        break;
 800c7dc:	e01e      	b.n	800c81c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	885b      	ldrh	r3, [r3, #2]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d119      	bne.n	800c81a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c7e6:	7bbb      	ldrb	r3, [r7, #14]
 800c7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d004      	beq.n	800c7fa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f009 fa55 	bl	8015ca4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fcc4 	bl	800d188 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	6839      	ldr	r1, [r7, #0]
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	4798      	blx	r3
        }
        break;
 800c80e:	e004      	b.n	800c81a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fc0a 	bl	800d02c <USBD_CtlError>
        break;
 800c818:	e000      	b.n	800c81c <USBD_StdEPReq+0x13c>
        break;
 800c81a:	bf00      	nop
      }
      break;
 800c81c:	e0aa      	b.n	800c974 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c824:	2b02      	cmp	r3, #2
 800c826:	d002      	beq.n	800c82e <USBD_StdEPReq+0x14e>
 800c828:	2b03      	cmp	r3, #3
 800c82a:	d032      	beq.n	800c892 <USBD_StdEPReq+0x1b2>
 800c82c:	e097      	b.n	800c95e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c82e:	7bbb      	ldrb	r3, [r7, #14]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d007      	beq.n	800c844 <USBD_StdEPReq+0x164>
 800c834:	7bbb      	ldrb	r3, [r7, #14]
 800c836:	2b80      	cmp	r3, #128	; 0x80
 800c838:	d004      	beq.n	800c844 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c83a:	6839      	ldr	r1, [r7, #0]
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 fbf5 	bl	800d02c <USBD_CtlError>
          break;
 800c842:	e091      	b.n	800c968 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c844:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	da0b      	bge.n	800c864 <USBD_StdEPReq+0x184>
 800c84c:	7bbb      	ldrb	r3, [r7, #14]
 800c84e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	3310      	adds	r3, #16
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	4413      	add	r3, r2
 800c860:	3304      	adds	r3, #4
 800c862:	e00b      	b.n	800c87c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c864:	7bbb      	ldrb	r3, [r7, #14]
 800c866:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c86a:	4613      	mov	r3, r2
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	4413      	add	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	4413      	add	r3, r2
 800c87a:	3304      	adds	r3, #4
 800c87c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	2200      	movs	r2, #0
 800c882:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	2202      	movs	r2, #2
 800c888:	4619      	mov	r1, r3
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 fc3f 	bl	800d10e <USBD_CtlSendData>
        break;
 800c890:	e06a      	b.n	800c968 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c892:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c896:	2b00      	cmp	r3, #0
 800c898:	da11      	bge.n	800c8be <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c89a:	7bbb      	ldrb	r3, [r7, #14]
 800c89c:	f003 020f 	and.w	r2, r3, #15
 800c8a0:	6879      	ldr	r1, [r7, #4]
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	4413      	add	r3, r2
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	440b      	add	r3, r1
 800c8ac:	3324      	adds	r3, #36	; 0x24
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d117      	bne.n	800c8e4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c8b4:	6839      	ldr	r1, [r7, #0]
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 fbb8 	bl	800d02c <USBD_CtlError>
            break;
 800c8bc:	e054      	b.n	800c968 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c8be:	7bbb      	ldrb	r3, [r7, #14]
 800c8c0:	f003 020f 	and.w	r2, r3, #15
 800c8c4:	6879      	ldr	r1, [r7, #4]
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4413      	add	r3, r2
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	440b      	add	r3, r1
 800c8d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c8d4:	881b      	ldrh	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d104      	bne.n	800c8e4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c8da:	6839      	ldr	r1, [r7, #0]
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fba5 	bl	800d02c <USBD_CtlError>
            break;
 800c8e2:	e041      	b.n	800c968 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	da0b      	bge.n	800c904 <USBD_StdEPReq+0x224>
 800c8ec:	7bbb      	ldrb	r3, [r7, #14]
 800c8ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	4413      	add	r3, r2
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	3310      	adds	r3, #16
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	4413      	add	r3, r2
 800c900:	3304      	adds	r3, #4
 800c902:	e00b      	b.n	800c91c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c90a:	4613      	mov	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4413      	add	r3, r2
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	4413      	add	r3, r2
 800c91a:	3304      	adds	r3, #4
 800c91c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c91e:	7bbb      	ldrb	r3, [r7, #14]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d002      	beq.n	800c92a <USBD_StdEPReq+0x24a>
 800c924:	7bbb      	ldrb	r3, [r7, #14]
 800c926:	2b80      	cmp	r3, #128	; 0x80
 800c928:	d103      	bne.n	800c932 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	2200      	movs	r2, #0
 800c92e:	601a      	str	r2, [r3, #0]
 800c930:	e00e      	b.n	800c950 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c932:	7bbb      	ldrb	r3, [r7, #14]
 800c934:	4619      	mov	r1, r3
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f009 f9d3 	bl	8015ce2 <USBD_LL_IsStallEP>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d003      	beq.n	800c94a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	2201      	movs	r2, #1
 800c946:	601a      	str	r2, [r3, #0]
 800c948:	e002      	b.n	800c950 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	2200      	movs	r2, #0
 800c94e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	2202      	movs	r2, #2
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 fbd9 	bl	800d10e <USBD_CtlSendData>
          break;
 800c95c:	e004      	b.n	800c968 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c95e:	6839      	ldr	r1, [r7, #0]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fb63 	bl	800d02c <USBD_CtlError>
        break;
 800c966:	bf00      	nop
      }
      break;
 800c968:	e004      	b.n	800c974 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c96a:	6839      	ldr	r1, [r7, #0]
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fb5d 	bl	800d02c <USBD_CtlError>
      break;
 800c972:	bf00      	nop
    }
    break;
 800c974:	e004      	b.n	800c980 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fb57 	bl	800d02c <USBD_CtlError>
    break;
 800c97e:	bf00      	nop
  }

  return ret;
 800c980:	7bfb      	ldrb	r3, [r7, #15]
}
 800c982:	4618      	mov	r0, r3
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
	...

0800c98c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c996:	2300      	movs	r3, #0
 800c998:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c99a:	2300      	movs	r3, #0
 800c99c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	885b      	ldrh	r3, [r3, #2]
 800c9a6:	0a1b      	lsrs	r3, r3, #8
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	2b0e      	cmp	r3, #14
 800c9ae:	f200 8152 	bhi.w	800cc56 <USBD_GetDescriptor+0x2ca>
 800c9b2:	a201      	add	r2, pc, #4	; (adr r2, 800c9b8 <USBD_GetDescriptor+0x2c>)
 800c9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b8:	0800ca29 	.word	0x0800ca29
 800c9bc:	0800ca41 	.word	0x0800ca41
 800c9c0:	0800ca81 	.word	0x0800ca81
 800c9c4:	0800cc57 	.word	0x0800cc57
 800c9c8:	0800cc57 	.word	0x0800cc57
 800c9cc:	0800cbf7 	.word	0x0800cbf7
 800c9d0:	0800cc23 	.word	0x0800cc23
 800c9d4:	0800cc57 	.word	0x0800cc57
 800c9d8:	0800cc57 	.word	0x0800cc57
 800c9dc:	0800cc57 	.word	0x0800cc57
 800c9e0:	0800cc57 	.word	0x0800cc57
 800c9e4:	0800cc57 	.word	0x0800cc57
 800c9e8:	0800cc57 	.word	0x0800cc57
 800c9ec:	0800cc57 	.word	0x0800cc57
 800c9f0:	0800c9f5 	.word	0x0800c9f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9fa:	69db      	ldr	r3, [r3, #28]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00b      	beq.n	800ca18 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca06:	69db      	ldr	r3, [r3, #28]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	7c12      	ldrb	r2, [r2, #16]
 800ca0c:	f107 0108 	add.w	r1, r7, #8
 800ca10:	4610      	mov	r0, r2
 800ca12:	4798      	blx	r3
 800ca14:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ca16:	e126      	b.n	800cc66 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ca18:	6839      	ldr	r1, [r7, #0]
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 fb06 	bl	800d02c <USBD_CtlError>
      err++;
 800ca20:	7afb      	ldrb	r3, [r7, #11]
 800ca22:	3301      	adds	r3, #1
 800ca24:	72fb      	strb	r3, [r7, #11]
    break;
 800ca26:	e11e      	b.n	800cc66 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	7c12      	ldrb	r2, [r2, #16]
 800ca34:	f107 0108 	add.w	r1, r7, #8
 800ca38:	4610      	mov	r0, r2
 800ca3a:	4798      	blx	r3
 800ca3c:	60f8      	str	r0, [r7, #12]
    break;
 800ca3e:	e112      	b.n	800cc66 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	7c1b      	ldrb	r3, [r3, #16]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10d      	bne.n	800ca64 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca50:	f107 0208 	add.w	r2, r7, #8
 800ca54:	4610      	mov	r0, r2
 800ca56:	4798      	blx	r3
 800ca58:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	2202      	movs	r2, #2
 800ca60:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ca62:	e100      	b.n	800cc66 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6c:	f107 0208 	add.w	r2, r7, #8
 800ca70:	4610      	mov	r0, r2
 800ca72:	4798      	blx	r3
 800ca74:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	3301      	adds	r3, #1
 800ca7a:	2202      	movs	r2, #2
 800ca7c:	701a      	strb	r2, [r3, #0]
    break;
 800ca7e:	e0f2      	b.n	800cc66 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	885b      	ldrh	r3, [r3, #2]
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	2b05      	cmp	r3, #5
 800ca88:	f200 80ac 	bhi.w	800cbe4 <USBD_GetDescriptor+0x258>
 800ca8c:	a201      	add	r2, pc, #4	; (adr r2, 800ca94 <USBD_GetDescriptor+0x108>)
 800ca8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca92:	bf00      	nop
 800ca94:	0800caad 	.word	0x0800caad
 800ca98:	0800cae1 	.word	0x0800cae1
 800ca9c:	0800cb15 	.word	0x0800cb15
 800caa0:	0800cb49 	.word	0x0800cb49
 800caa4:	0800cb7d 	.word	0x0800cb7d
 800caa8:	0800cbb1 	.word	0x0800cbb1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d00b      	beq.n	800cad0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	7c12      	ldrb	r2, [r2, #16]
 800cac4:	f107 0108 	add.w	r1, r7, #8
 800cac8:	4610      	mov	r0, r2
 800caca:	4798      	blx	r3
 800cacc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cace:	e091      	b.n	800cbf4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cad0:	6839      	ldr	r1, [r7, #0]
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 faaa 	bl	800d02c <USBD_CtlError>
        err++;
 800cad8:	7afb      	ldrb	r3, [r7, #11]
 800cada:	3301      	adds	r3, #1
 800cadc:	72fb      	strb	r3, [r7, #11]
      break;
 800cade:	e089      	b.n	800cbf4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d00b      	beq.n	800cb04 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	7c12      	ldrb	r2, [r2, #16]
 800caf8:	f107 0108 	add.w	r1, r7, #8
 800cafc:	4610      	mov	r0, r2
 800cafe:	4798      	blx	r3
 800cb00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb02:	e077      	b.n	800cbf4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cb04:	6839      	ldr	r1, [r7, #0]
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 fa90 	bl	800d02c <USBD_CtlError>
        err++;
 800cb0c:	7afb      	ldrb	r3, [r7, #11]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	72fb      	strb	r3, [r7, #11]
      break;
 800cb12:	e06f      	b.n	800cbf4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d00b      	beq.n	800cb38 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	7c12      	ldrb	r2, [r2, #16]
 800cb2c:	f107 0108 	add.w	r1, r7, #8
 800cb30:	4610      	mov	r0, r2
 800cb32:	4798      	blx	r3
 800cb34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb36:	e05d      	b.n	800cbf4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cb38:	6839      	ldr	r1, [r7, #0]
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 fa76 	bl	800d02c <USBD_CtlError>
        err++;
 800cb40:	7afb      	ldrb	r3, [r7, #11]
 800cb42:	3301      	adds	r3, #1
 800cb44:	72fb      	strb	r3, [r7, #11]
      break;
 800cb46:	e055      	b.n	800cbf4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d00b      	beq.n	800cb6c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb5a:	691b      	ldr	r3, [r3, #16]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	7c12      	ldrb	r2, [r2, #16]
 800cb60:	f107 0108 	add.w	r1, r7, #8
 800cb64:	4610      	mov	r0, r2
 800cb66:	4798      	blx	r3
 800cb68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb6a:	e043      	b.n	800cbf4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cb6c:	6839      	ldr	r1, [r7, #0]
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fa5c 	bl	800d02c <USBD_CtlError>
        err++;
 800cb74:	7afb      	ldrb	r3, [r7, #11]
 800cb76:	3301      	adds	r3, #1
 800cb78:	72fb      	strb	r3, [r7, #11]
      break;
 800cb7a:	e03b      	b.n	800cbf4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb82:	695b      	ldr	r3, [r3, #20]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00b      	beq.n	800cba0 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb8e:	695b      	ldr	r3, [r3, #20]
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	7c12      	ldrb	r2, [r2, #16]
 800cb94:	f107 0108 	add.w	r1, r7, #8
 800cb98:	4610      	mov	r0, r2
 800cb9a:	4798      	blx	r3
 800cb9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb9e:	e029      	b.n	800cbf4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cba0:	6839      	ldr	r1, [r7, #0]
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 fa42 	bl	800d02c <USBD_CtlError>
        err++;
 800cba8:	7afb      	ldrb	r3, [r7, #11]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	72fb      	strb	r3, [r7, #11]
      break;
 800cbae:	e021      	b.n	800cbf4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00b      	beq.n	800cbd4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbc2:	699b      	ldr	r3, [r3, #24]
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	7c12      	ldrb	r2, [r2, #16]
 800cbc8:	f107 0108 	add.w	r1, r7, #8
 800cbcc:	4610      	mov	r0, r2
 800cbce:	4798      	blx	r3
 800cbd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbd2:	e00f      	b.n	800cbf4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cbd4:	6839      	ldr	r1, [r7, #0]
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 fa28 	bl	800d02c <USBD_CtlError>
        err++;
 800cbdc:	7afb      	ldrb	r3, [r7, #11]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	72fb      	strb	r3, [r7, #11]
      break;
 800cbe2:	e007      	b.n	800cbf4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800cbe4:	6839      	ldr	r1, [r7, #0]
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f000 fa20 	bl	800d02c <USBD_CtlError>
      err++;
 800cbec:	7afb      	ldrb	r3, [r7, #11]
 800cbee:	3301      	adds	r3, #1
 800cbf0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800cbf2:	bf00      	nop
    }
    break;
 800cbf4:	e037      	b.n	800cc66 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	7c1b      	ldrb	r3, [r3, #16]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d109      	bne.n	800cc12 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc06:	f107 0208 	add.w	r2, r7, #8
 800cc0a:	4610      	mov	r0, r2
 800cc0c:	4798      	blx	r3
 800cc0e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cc10:	e029      	b.n	800cc66 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 fa09 	bl	800d02c <USBD_CtlError>
      err++;
 800cc1a:	7afb      	ldrb	r3, [r7, #11]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	72fb      	strb	r3, [r7, #11]
    break;
 800cc20:	e021      	b.n	800cc66 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	7c1b      	ldrb	r3, [r3, #16]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d10d      	bne.n	800cc46 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc32:	f107 0208 	add.w	r2, r7, #8
 800cc36:	4610      	mov	r0, r2
 800cc38:	4798      	blx	r3
 800cc3a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	2207      	movs	r2, #7
 800cc42:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cc44:	e00f      	b.n	800cc66 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800cc46:	6839      	ldr	r1, [r7, #0]
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f9ef 	bl	800d02c <USBD_CtlError>
      err++;
 800cc4e:	7afb      	ldrb	r3, [r7, #11]
 800cc50:	3301      	adds	r3, #1
 800cc52:	72fb      	strb	r3, [r7, #11]
    break;
 800cc54:	e007      	b.n	800cc66 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800cc56:	6839      	ldr	r1, [r7, #0]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 f9e7 	bl	800d02c <USBD_CtlError>
    err++;
 800cc5e:	7afb      	ldrb	r3, [r7, #11]
 800cc60:	3301      	adds	r3, #1
 800cc62:	72fb      	strb	r3, [r7, #11]
    break;
 800cc64:	bf00      	nop
  }

  if (err != 0U)
 800cc66:	7afb      	ldrb	r3, [r7, #11]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d11e      	bne.n	800ccaa <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	88db      	ldrh	r3, [r3, #6]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d016      	beq.n	800cca2 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800cc74:	893b      	ldrh	r3, [r7, #8]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00e      	beq.n	800cc98 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	88da      	ldrh	r2, [r3, #6]
 800cc7e:	893b      	ldrh	r3, [r7, #8]
 800cc80:	4293      	cmp	r3, r2
 800cc82:	bf28      	it	cs
 800cc84:	4613      	movcs	r3, r2
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800cc8a:	893b      	ldrh	r3, [r7, #8]
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	68f9      	ldr	r1, [r7, #12]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fa3c 	bl	800d10e <USBD_CtlSendData>
 800cc96:	e009      	b.n	800ccac <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f9c6 	bl	800d02c <USBD_CtlError>
 800cca0:	e004      	b.n	800ccac <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fa70 	bl	800d188 <USBD_CtlSendStatus>
 800cca8:	e000      	b.n	800ccac <USBD_GetDescriptor+0x320>
    return;
 800ccaa:	bf00      	nop
    }
  }
}
 800ccac:	3710      	adds	r7, #16
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop

0800ccb4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	889b      	ldrh	r3, [r3, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d130      	bne.n	800cd28 <USBD_SetAddress+0x74>
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	88db      	ldrh	r3, [r3, #6]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d12c      	bne.n	800cd28 <USBD_SetAddress+0x74>
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	885b      	ldrh	r3, [r3, #2]
 800ccd2:	2b7f      	cmp	r3, #127	; 0x7f
 800ccd4:	d828      	bhi.n	800cd28 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	885b      	ldrh	r3, [r3, #2]
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cce0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cce8:	2b03      	cmp	r3, #3
 800ccea:	d104      	bne.n	800ccf6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ccec:	6839      	ldr	r1, [r7, #0]
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 f99c 	bl	800d02c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccf4:	e01c      	b.n	800cd30 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	7bfa      	ldrb	r2, [r7, #15]
 800ccfa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	4619      	mov	r1, r3
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f009 f819 	bl	8015d3a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fa3d 	bl	800d188 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cd0e:	7bfb      	ldrb	r3, [r7, #15]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d004      	beq.n	800cd1e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2202      	movs	r2, #2
 800cd18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd1c:	e008      	b.n	800cd30 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2201      	movs	r2, #1
 800cd22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd26:	e003      	b.n	800cd30 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cd28:	6839      	ldr	r1, [r7, #0]
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 f97e 	bl	800d02c <USBD_CtlError>
  }
}
 800cd30:	bf00      	nop
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	885b      	ldrh	r3, [r3, #2]
 800cd4a:	b2da      	uxtb	r2, r3
 800cd4c:	4b4b      	ldr	r3, [pc, #300]	; (800ce7c <USBD_SetConfig+0x144>)
 800cd4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cd50:	4b4a      	ldr	r3, [pc, #296]	; (800ce7c <USBD_SetConfig+0x144>)
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d905      	bls.n	800cd64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f966 	bl	800d02c <USBD_CtlError>
    return USBD_FAIL;
 800cd60:	2303      	movs	r3, #3
 800cd62:	e087      	b.n	800ce74 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd6a:	2b02      	cmp	r3, #2
 800cd6c:	d002      	beq.n	800cd74 <USBD_SetConfig+0x3c>
 800cd6e:	2b03      	cmp	r3, #3
 800cd70:	d025      	beq.n	800cdbe <USBD_SetConfig+0x86>
 800cd72:	e071      	b.n	800ce58 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800cd74:	4b41      	ldr	r3, [pc, #260]	; (800ce7c <USBD_SetConfig+0x144>)
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d01c      	beq.n	800cdb6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800cd7c:	4b3f      	ldr	r3, [pc, #252]	; (800ce7c <USBD_SetConfig+0x144>)
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	461a      	mov	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd86:	4b3d      	ldr	r3, [pc, #244]	; (800ce7c <USBD_SetConfig+0x144>)
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7ff f97e 	bl	800c08e <USBD_SetClassConfig>
 800cd92:	4603      	mov	r3, r0
 800cd94:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800cd96:	7bfb      	ldrb	r3, [r7, #15]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d004      	beq.n	800cda6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800cd9c:	6839      	ldr	r1, [r7, #0]
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 f944 	bl	800d02c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cda4:	e065      	b.n	800ce72 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f9ee 	bl	800d188 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2203      	movs	r2, #3
 800cdb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cdb4:	e05d      	b.n	800ce72 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 f9e6 	bl	800d188 <USBD_CtlSendStatus>
    break;
 800cdbc:	e059      	b.n	800ce72 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800cdbe:	4b2f      	ldr	r3, [pc, #188]	; (800ce7c <USBD_SetConfig+0x144>)
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d112      	bne.n	800cdec <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2202      	movs	r2, #2
 800cdca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800cdce:	4b2b      	ldr	r3, [pc, #172]	; (800ce7c <USBD_SetConfig+0x144>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cdd8:	4b28      	ldr	r3, [pc, #160]	; (800ce7c <USBD_SetConfig+0x144>)
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	4619      	mov	r1, r3
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7ff f971 	bl	800c0c6 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 f9cf 	bl	800d188 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cdea:	e042      	b.n	800ce72 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800cdec:	4b23      	ldr	r3, [pc, #140]	; (800ce7c <USBD_SetConfig+0x144>)
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d02a      	beq.n	800ce50 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	4619      	mov	r1, r3
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7ff f95f 	bl	800c0c6 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ce08:	4b1c      	ldr	r3, [pc, #112]	; (800ce7c <USBD_SetConfig+0x144>)
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ce12:	4b1a      	ldr	r3, [pc, #104]	; (800ce7c <USBD_SetConfig+0x144>)
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	4619      	mov	r1, r3
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff f938 	bl	800c08e <USBD_SetClassConfig>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ce22:	7bfb      	ldrb	r3, [r7, #15]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00f      	beq.n	800ce48 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ce28:	6839      	ldr	r1, [r7, #0]
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f8fe 	bl	800d02c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	4619      	mov	r1, r3
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7ff f944 	bl	800c0c6 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2202      	movs	r2, #2
 800ce42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ce46:	e014      	b.n	800ce72 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 f99d 	bl	800d188 <USBD_CtlSendStatus>
    break;
 800ce4e:	e010      	b.n	800ce72 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 f999 	bl	800d188 <USBD_CtlSendStatus>
    break;
 800ce56:	e00c      	b.n	800ce72 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ce58:	6839      	ldr	r1, [r7, #0]
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 f8e6 	bl	800d02c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ce60:	4b06      	ldr	r3, [pc, #24]	; (800ce7c <USBD_SetConfig+0x144>)
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	4619      	mov	r1, r3
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7ff f92d 	bl	800c0c6 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ce6c:	2303      	movs	r3, #3
 800ce6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce70:	bf00      	nop
  }

  return ret;
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	20000218 	.word	0x20000218

0800ce80 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	88db      	ldrh	r3, [r3, #6]
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d004      	beq.n	800ce9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ce92:	6839      	ldr	r1, [r7, #0]
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 f8c9 	bl	800d02c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ce9a:	e021      	b.n	800cee0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	db17      	blt.n	800ced6 <USBD_GetConfig+0x56>
 800cea6:	2b02      	cmp	r3, #2
 800cea8:	dd02      	ble.n	800ceb0 <USBD_GetConfig+0x30>
 800ceaa:	2b03      	cmp	r3, #3
 800ceac:	d00b      	beq.n	800cec6 <USBD_GetConfig+0x46>
 800ceae:	e012      	b.n	800ced6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	3308      	adds	r3, #8
 800ceba:	2201      	movs	r2, #1
 800cebc:	4619      	mov	r1, r3
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 f925 	bl	800d10e <USBD_CtlSendData>
      break;
 800cec4:	e00c      	b.n	800cee0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	3304      	adds	r3, #4
 800ceca:	2201      	movs	r2, #1
 800cecc:	4619      	mov	r1, r3
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 f91d 	bl	800d10e <USBD_CtlSendData>
      break;
 800ced4:	e004      	b.n	800cee0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800ced6:	6839      	ldr	r1, [r7, #0]
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 f8a7 	bl	800d02c <USBD_CtlError>
      break;
 800cede:	bf00      	nop
}
 800cee0:	bf00      	nop
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cef8:	3b01      	subs	r3, #1
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	d81e      	bhi.n	800cf3c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	88db      	ldrh	r3, [r3, #6]
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d004      	beq.n	800cf10 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cf06:	6839      	ldr	r1, [r7, #0]
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 f88f 	bl	800d02c <USBD_CtlError>
      break;
 800cf0e:	e01a      	b.n	800cf46 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d005      	beq.n	800cf2c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	f043 0202 	orr.w	r2, r3, #2
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	330c      	adds	r3, #12
 800cf30:	2202      	movs	r2, #2
 800cf32:	4619      	mov	r1, r3
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f8ea 	bl	800d10e <USBD_CtlSendData>
    break;
 800cf3a:	e004      	b.n	800cf46 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800cf3c:	6839      	ldr	r1, [r7, #0]
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 f874 	bl	800d02c <USBD_CtlError>
    break;
 800cf44:	bf00      	nop
  }
}
 800cf46:	bf00      	nop
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b082      	sub	sp, #8
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
 800cf56:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	885b      	ldrh	r3, [r3, #2]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d106      	bne.n	800cf6e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2201      	movs	r2, #1
 800cf64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 f90d 	bl	800d188 <USBD_CtlSendStatus>
  }
}
 800cf6e:	bf00      	nop
 800cf70:	3708      	adds	r7, #8
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}

0800cf76 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf76:	b580      	push	{r7, lr}
 800cf78:	b082      	sub	sp, #8
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
 800cf7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf86:	3b01      	subs	r3, #1
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d80b      	bhi.n	800cfa4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	885b      	ldrh	r3, [r3, #2]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d10c      	bne.n	800cfae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f8f3 	bl	800d188 <USBD_CtlSendStatus>
      }
      break;
 800cfa2:	e004      	b.n	800cfae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cfa4:	6839      	ldr	r1, [r7, #0]
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 f840 	bl	800d02c <USBD_CtlError>
      break;
 800cfac:	e000      	b.n	800cfb0 <USBD_ClrFeature+0x3a>
      break;
 800cfae:	bf00      	nop
  }
}
 800cfb0:	bf00      	nop
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	781a      	ldrb	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	781a      	ldrb	r2, [r3, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f7ff faaa 	bl	800c53c <SWAPBYTE>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	461a      	mov	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	3301      	adds	r3, #1
 800cff4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	3301      	adds	r3, #1
 800cffa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f7ff fa9d 	bl	800c53c <SWAPBYTE>
 800d002:	4603      	mov	r3, r0
 800d004:	461a      	mov	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	3301      	adds	r3, #1
 800d00e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	3301      	adds	r3, #1
 800d014:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f7ff fa90 	bl	800c53c <SWAPBYTE>
 800d01c:	4603      	mov	r3, r0
 800d01e:	461a      	mov	r2, r3
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	80da      	strh	r2, [r3, #6]
}
 800d024:	bf00      	nop
 800d026:	3710      	adds	r7, #16
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d036:	2180      	movs	r1, #128	; 0x80
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f008 fe14 	bl	8015c66 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d03e:	2100      	movs	r1, #0
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f008 fe10 	bl	8015c66 <USBD_LL_StallEP>
}
 800d046:	bf00      	nop
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b086      	sub	sp, #24
 800d052:	af00      	add	r7, sp, #0
 800d054:	60f8      	str	r0, [r7, #12]
 800d056:	60b9      	str	r1, [r7, #8]
 800d058:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d05a:	2300      	movs	r3, #0
 800d05c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d036      	beq.n	800d0d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d068:	6938      	ldr	r0, [r7, #16]
 800d06a:	f000 f836 	bl	800d0da <USBD_GetLen>
 800d06e:	4603      	mov	r3, r0
 800d070:	3301      	adds	r3, #1
 800d072:	b29b      	uxth	r3, r3
 800d074:	005b      	lsls	r3, r3, #1
 800d076:	b29a      	uxth	r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d07c:	7dfb      	ldrb	r3, [r7, #23]
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	4413      	add	r3, r2
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	7812      	ldrb	r2, [r2, #0]
 800d086:	701a      	strb	r2, [r3, #0]
  idx++;
 800d088:	7dfb      	ldrb	r3, [r7, #23]
 800d08a:	3301      	adds	r3, #1
 800d08c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d08e:	7dfb      	ldrb	r3, [r7, #23]
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	4413      	add	r3, r2
 800d094:	2203      	movs	r2, #3
 800d096:	701a      	strb	r2, [r3, #0]
  idx++;
 800d098:	7dfb      	ldrb	r3, [r7, #23]
 800d09a:	3301      	adds	r3, #1
 800d09c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d09e:	e013      	b.n	800d0c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d0a0:	7dfb      	ldrb	r3, [r7, #23]
 800d0a2:	68ba      	ldr	r2, [r7, #8]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	7812      	ldrb	r2, [r2, #0]
 800d0aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	613b      	str	r3, [r7, #16]
    idx++;
 800d0b2:	7dfb      	ldrb	r3, [r7, #23]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d0b8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ba:	68ba      	ldr	r2, [r7, #8]
 800d0bc:	4413      	add	r3, r2
 800d0be:	2200      	movs	r2, #0
 800d0c0:	701a      	strb	r2, [r3, #0]
    idx++;
 800d0c2:	7dfb      	ldrb	r3, [r7, #23]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1e7      	bne.n	800d0a0 <USBD_GetString+0x52>
 800d0d0:	e000      	b.n	800d0d4 <USBD_GetString+0x86>
    return;
 800d0d2:	bf00      	nop
  }
}
 800d0d4:	3718      	adds	r7, #24
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b085      	sub	sp, #20
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d0ea:	e005      	b.n	800d0f8 <USBD_GetLen+0x1e>
  {
    len++;
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1f5      	bne.n	800d0ec <USBD_GetLen+0x12>
  }

  return len;
 800d100:	7bfb      	ldrb	r3, [r7, #15]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3714      	adds	r7, #20
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr

0800d10e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b084      	sub	sp, #16
 800d112:	af00      	add	r7, sp, #0
 800d114:	60f8      	str	r0, [r7, #12]
 800d116:	60b9      	str	r1, [r7, #8]
 800d118:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2202      	movs	r2, #2
 800d11e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	68ba      	ldr	r2, [r7, #8]
 800d132:	2100      	movs	r1, #0
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f008 fe1f 	bl	8015d78 <USBD_LL_Transmit>

  return USBD_OK;
 800d13a:	2300      	movs	r3, #0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3710      	adds	r7, #16
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	68ba      	ldr	r2, [r7, #8]
 800d154:	2100      	movs	r1, #0
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f008 fe0e 	bl	8015d78 <USBD_LL_Transmit>

  return USBD_OK;
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b084      	sub	sp, #16
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	60f8      	str	r0, [r7, #12]
 800d16e:	60b9      	str	r1, [r7, #8]
 800d170:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	68ba      	ldr	r2, [r7, #8]
 800d176:	2100      	movs	r1, #0
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f008 fe1e 	bl	8015dba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d17e:	2300      	movs	r3, #0
}
 800d180:	4618      	mov	r0, r3
 800d182:	3710      	adds	r7, #16
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2204      	movs	r2, #4
 800d194:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d198:	2300      	movs	r3, #0
 800d19a:	2200      	movs	r2, #0
 800d19c:	2100      	movs	r1, #0
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f008 fdea 	bl	8015d78 <USBD_LL_Transmit>

  return USBD_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b082      	sub	sp, #8
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2205      	movs	r2, #5
 800d1ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1be:	2300      	movs	r3, #0
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	2100      	movs	r1, #0
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f008 fdf8 	bl	8015dba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	4603      	mov	r3, r0
 800d1dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d1de:	79fb      	ldrb	r3, [r7, #7]
 800d1e0:	4a08      	ldr	r2, [pc, #32]	; (800d204 <disk_status+0x30>)
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	4413      	add	r3, r2
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	79fa      	ldrb	r2, [r7, #7]
 800d1ec:	4905      	ldr	r1, [pc, #20]	; (800d204 <disk_status+0x30>)
 800d1ee:	440a      	add	r2, r1
 800d1f0:	7a12      	ldrb	r2, [r2, #8]
 800d1f2:	4610      	mov	r0, r2
 800d1f4:	4798      	blx	r3
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	200002c4 	.word	0x200002c4

0800d208 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	4603      	mov	r3, r0
 800d210:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d216:	79fb      	ldrb	r3, [r7, #7]
 800d218:	4a0d      	ldr	r2, [pc, #52]	; (800d250 <disk_initialize+0x48>)
 800d21a:	5cd3      	ldrb	r3, [r2, r3]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d111      	bne.n	800d244 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d220:	79fb      	ldrb	r3, [r7, #7]
 800d222:	4a0b      	ldr	r2, [pc, #44]	; (800d250 <disk_initialize+0x48>)
 800d224:	2101      	movs	r1, #1
 800d226:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d228:	79fb      	ldrb	r3, [r7, #7]
 800d22a:	4a09      	ldr	r2, [pc, #36]	; (800d250 <disk_initialize+0x48>)
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	4413      	add	r3, r2
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	79fa      	ldrb	r2, [r7, #7]
 800d236:	4906      	ldr	r1, [pc, #24]	; (800d250 <disk_initialize+0x48>)
 800d238:	440a      	add	r2, r1
 800d23a:	7a12      	ldrb	r2, [r2, #8]
 800d23c:	4610      	mov	r0, r2
 800d23e:	4798      	blx	r3
 800d240:	4603      	mov	r3, r0
 800d242:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d244:	7bfb      	ldrb	r3, [r7, #15]
}
 800d246:	4618      	mov	r0, r3
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	200002c4 	.word	0x200002c4

0800d254 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d254:	b590      	push	{r4, r7, lr}
 800d256:	b087      	sub	sp, #28
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60b9      	str	r1, [r7, #8]
 800d25c:	607a      	str	r2, [r7, #4]
 800d25e:	603b      	str	r3, [r7, #0]
 800d260:	4603      	mov	r3, r0
 800d262:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d264:	7bfb      	ldrb	r3, [r7, #15]
 800d266:	4a0a      	ldr	r2, [pc, #40]	; (800d290 <disk_read+0x3c>)
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	4413      	add	r3, r2
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	689c      	ldr	r4, [r3, #8]
 800d270:	7bfb      	ldrb	r3, [r7, #15]
 800d272:	4a07      	ldr	r2, [pc, #28]	; (800d290 <disk_read+0x3c>)
 800d274:	4413      	add	r3, r2
 800d276:	7a18      	ldrb	r0, [r3, #8]
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	68b9      	ldr	r1, [r7, #8]
 800d27e:	47a0      	blx	r4
 800d280:	4603      	mov	r3, r0
 800d282:	75fb      	strb	r3, [r7, #23]
  return res;
 800d284:	7dfb      	ldrb	r3, [r7, #23]
}
 800d286:	4618      	mov	r0, r3
 800d288:	371c      	adds	r7, #28
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd90      	pop	{r4, r7, pc}
 800d28e:	bf00      	nop
 800d290:	200002c4 	.word	0x200002c4

0800d294 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d294:	b590      	push	{r4, r7, lr}
 800d296:	b087      	sub	sp, #28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60b9      	str	r1, [r7, #8]
 800d29c:	607a      	str	r2, [r7, #4]
 800d29e:	603b      	str	r3, [r7, #0]
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
 800d2a6:	4a0a      	ldr	r2, [pc, #40]	; (800d2d0 <disk_write+0x3c>)
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	4413      	add	r3, r2
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	68dc      	ldr	r4, [r3, #12]
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
 800d2b2:	4a07      	ldr	r2, [pc, #28]	; (800d2d0 <disk_write+0x3c>)
 800d2b4:	4413      	add	r3, r2
 800d2b6:	7a18      	ldrb	r0, [r3, #8]
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	68b9      	ldr	r1, [r7, #8]
 800d2be:	47a0      	blx	r4
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	75fb      	strb	r3, [r7, #23]
  return res;
 800d2c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	371c      	adds	r7, #28
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd90      	pop	{r4, r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	200002c4 	.word	0x200002c4

0800d2d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	4603      	mov	r3, r0
 800d2dc:	603a      	str	r2, [r7, #0]
 800d2de:	71fb      	strb	r3, [r7, #7]
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d2e4:	79fb      	ldrb	r3, [r7, #7]
 800d2e6:	4a09      	ldr	r2, [pc, #36]	; (800d30c <disk_ioctl+0x38>)
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	4413      	add	r3, r2
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	79fa      	ldrb	r2, [r7, #7]
 800d2f2:	4906      	ldr	r1, [pc, #24]	; (800d30c <disk_ioctl+0x38>)
 800d2f4:	440a      	add	r2, r1
 800d2f6:	7a10      	ldrb	r0, [r2, #8]
 800d2f8:	79b9      	ldrb	r1, [r7, #6]
 800d2fa:	683a      	ldr	r2, [r7, #0]
 800d2fc:	4798      	blx	r3
 800d2fe:	4603      	mov	r3, r0
 800d300:	73fb      	strb	r3, [r7, #15]
  return res;
 800d302:	7bfb      	ldrb	r3, [r7, #15]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3710      	adds	r7, #16
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	200002c4 	.word	0x200002c4

0800d310 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d310:	b480      	push	{r7}
 800d312:	b085      	sub	sp, #20
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	3301      	adds	r3, #1
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d320:	89fb      	ldrh	r3, [r7, #14]
 800d322:	021b      	lsls	r3, r3, #8
 800d324:	b21a      	sxth	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	b21b      	sxth	r3, r3
 800d32c:	4313      	orrs	r3, r2
 800d32e:	b21b      	sxth	r3, r3
 800d330:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d332:	89fb      	ldrh	r3, [r7, #14]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3714      	adds	r7, #20
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d340:	b480      	push	{r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	3303      	adds	r3, #3
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	021b      	lsls	r3, r3, #8
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	3202      	adds	r2, #2
 800d358:	7812      	ldrb	r2, [r2, #0]
 800d35a:	4313      	orrs	r3, r2
 800d35c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	021b      	lsls	r3, r3, #8
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	3201      	adds	r2, #1
 800d366:	7812      	ldrb	r2, [r2, #0]
 800d368:	4313      	orrs	r3, r2
 800d36a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	021b      	lsls	r3, r3, #8
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	7812      	ldrb	r2, [r2, #0]
 800d374:	4313      	orrs	r3, r2
 800d376:	60fb      	str	r3, [r7, #12]
	return rv;
 800d378:	68fb      	ldr	r3, [r7, #12]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr

0800d386 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800d386:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	3307      	adds	r3, #7
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	b2db      	uxtb	r3, r3
 800d398:	f04f 0400 	mov.w	r4, #0
 800d39c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 800d3a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d3a4:	f04f 0b00 	mov.w	fp, #0
 800d3a8:	f04f 0c00 	mov.w	ip, #0
 800d3ac:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d3b0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d3b4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	3206      	adds	r2, #6
 800d3bc:	7812      	ldrb	r2, [r2, #0]
 800d3be:	b2d1      	uxtb	r1, r2
 800d3c0:	f04f 0200 	mov.w	r2, #0
 800d3c4:	ea4b 0301 	orr.w	r3, fp, r1
 800d3c8:	ea4c 0402 	orr.w	r4, ip, r2
 800d3cc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 800d3d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d3d4:	f04f 0b00 	mov.w	fp, #0
 800d3d8:	f04f 0c00 	mov.w	ip, #0
 800d3dc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d3e0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d3e4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	3205      	adds	r2, #5
 800d3ec:	7812      	ldrb	r2, [r2, #0]
 800d3ee:	b2d1      	uxtb	r1, r2
 800d3f0:	f04f 0200 	mov.w	r2, #0
 800d3f4:	ea4b 0301 	orr.w	r3, fp, r1
 800d3f8:	ea4c 0402 	orr.w	r4, ip, r2
 800d3fc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 800d400:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d404:	f04f 0b00 	mov.w	fp, #0
 800d408:	f04f 0c00 	mov.w	ip, #0
 800d40c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d410:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d414:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	3204      	adds	r2, #4
 800d41c:	7812      	ldrb	r2, [r2, #0]
 800d41e:	b2d1      	uxtb	r1, r2
 800d420:	f04f 0200 	mov.w	r2, #0
 800d424:	ea4b 0301 	orr.w	r3, fp, r1
 800d428:	ea4c 0402 	orr.w	r4, ip, r2
 800d42c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 800d430:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d434:	f04f 0b00 	mov.w	fp, #0
 800d438:	f04f 0c00 	mov.w	ip, #0
 800d43c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d440:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d444:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	3203      	adds	r2, #3
 800d44c:	7812      	ldrb	r2, [r2, #0]
 800d44e:	b2d1      	uxtb	r1, r2
 800d450:	f04f 0200 	mov.w	r2, #0
 800d454:	ea4b 0301 	orr.w	r3, fp, r1
 800d458:	ea4c 0402 	orr.w	r4, ip, r2
 800d45c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 800d460:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d464:	f04f 0b00 	mov.w	fp, #0
 800d468:	f04f 0c00 	mov.w	ip, #0
 800d46c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d470:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d474:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	3202      	adds	r2, #2
 800d47c:	7812      	ldrb	r2, [r2, #0]
 800d47e:	b2d1      	uxtb	r1, r2
 800d480:	f04f 0200 	mov.w	r2, #0
 800d484:	ea4b 0301 	orr.w	r3, fp, r1
 800d488:	ea4c 0402 	orr.w	r4, ip, r2
 800d48c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 800d490:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d494:	f04f 0b00 	mov.w	fp, #0
 800d498:	f04f 0c00 	mov.w	ip, #0
 800d49c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d4a0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d4a4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	3201      	adds	r2, #1
 800d4ac:	7812      	ldrb	r2, [r2, #0]
 800d4ae:	b2d1      	uxtb	r1, r2
 800d4b0:	f04f 0200 	mov.w	r2, #0
 800d4b4:	ea4b 0301 	orr.w	r3, fp, r1
 800d4b8:	ea4c 0402 	orr.w	r4, ip, r2
 800d4bc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 800d4c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d4c4:	f04f 0b00 	mov.w	fp, #0
 800d4c8:	f04f 0c00 	mov.w	ip, #0
 800d4cc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d4d0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d4d4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	7812      	ldrb	r2, [r2, #0]
 800d4dc:	b2d1      	uxtb	r1, r2
 800d4de:	f04f 0200 	mov.w	r2, #0
 800d4e2:	ea4b 0301 	orr.w	r3, fp, r1
 800d4e6:	ea4c 0402 	orr.w	r4, ip, r2
 800d4ea:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 800d4ee:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	3714      	adds	r7, #20
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800d4fe:	4770      	bx	lr

0800d500 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	460b      	mov	r3, r1
 800d50a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	607a      	str	r2, [r7, #4]
 800d512:	887a      	ldrh	r2, [r7, #2]
 800d514:	b2d2      	uxtb	r2, r2
 800d516:	701a      	strb	r2, [r3, #0]
 800d518:	887b      	ldrh	r3, [r7, #2]
 800d51a:	0a1b      	lsrs	r3, r3, #8
 800d51c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	1c5a      	adds	r2, r3, #1
 800d522:	607a      	str	r2, [r7, #4]
 800d524:	887a      	ldrh	r2, [r7, #2]
 800d526:	b2d2      	uxtb	r2, r2
 800d528:	701a      	strb	r2, [r3, #0]
}
 800d52a:	bf00      	nop
 800d52c:	370c      	adds	r7, #12
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr

0800d536 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d536:	b480      	push	{r7}
 800d538:	b083      	sub	sp, #12
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
 800d53e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	607a      	str	r2, [r7, #4]
 800d546:	683a      	ldr	r2, [r7, #0]
 800d548:	b2d2      	uxtb	r2, r2
 800d54a:	701a      	strb	r2, [r3, #0]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	0a1b      	lsrs	r3, r3, #8
 800d550:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	1c5a      	adds	r2, r3, #1
 800d556:	607a      	str	r2, [r7, #4]
 800d558:	683a      	ldr	r2, [r7, #0]
 800d55a:	b2d2      	uxtb	r2, r2
 800d55c:	701a      	strb	r2, [r3, #0]
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	0a1b      	lsrs	r3, r3, #8
 800d562:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	1c5a      	adds	r2, r3, #1
 800d568:	607a      	str	r2, [r7, #4]
 800d56a:	683a      	ldr	r2, [r7, #0]
 800d56c:	b2d2      	uxtb	r2, r2
 800d56e:	701a      	strb	r2, [r3, #0]
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	0a1b      	lsrs	r3, r3, #8
 800d574:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	1c5a      	adds	r2, r3, #1
 800d57a:	607a      	str	r2, [r7, #4]
 800d57c:	683a      	ldr	r2, [r7, #0]
 800d57e:	b2d2      	uxtb	r2, r2
 800d580:	701a      	strb	r2, [r3, #0]
}
 800d582:	bf00      	nop
 800d584:	370c      	adds	r7, #12
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr

0800d58e <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800d58e:	b490      	push	{r4, r7}
 800d590:	b084      	sub	sp, #16
 800d592:	af00      	add	r7, sp, #0
 800d594:	60f8      	str	r0, [r7, #12]
 800d596:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	1c5a      	adds	r2, r3, #1
 800d59e:	60fa      	str	r2, [r7, #12]
 800d5a0:	783a      	ldrb	r2, [r7, #0]
 800d5a2:	701a      	strb	r2, [r3, #0]
 800d5a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d5a8:	f04f 0300 	mov.w	r3, #0
 800d5ac:	f04f 0400 	mov.w	r4, #0
 800d5b0:	0a0b      	lsrs	r3, r1, #8
 800d5b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d5b6:	0a14      	lsrs	r4, r2, #8
 800d5b8:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	1c5a      	adds	r2, r3, #1
 800d5c0:	60fa      	str	r2, [r7, #12]
 800d5c2:	783a      	ldrb	r2, [r7, #0]
 800d5c4:	701a      	strb	r2, [r3, #0]
 800d5c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d5ca:	f04f 0300 	mov.w	r3, #0
 800d5ce:	f04f 0400 	mov.w	r4, #0
 800d5d2:	0a0b      	lsrs	r3, r1, #8
 800d5d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d5d8:	0a14      	lsrs	r4, r2, #8
 800d5da:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	1c5a      	adds	r2, r3, #1
 800d5e2:	60fa      	str	r2, [r7, #12]
 800d5e4:	783a      	ldrb	r2, [r7, #0]
 800d5e6:	701a      	strb	r2, [r3, #0]
 800d5e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d5ec:	f04f 0300 	mov.w	r3, #0
 800d5f0:	f04f 0400 	mov.w	r4, #0
 800d5f4:	0a0b      	lsrs	r3, r1, #8
 800d5f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d5fa:	0a14      	lsrs	r4, r2, #8
 800d5fc:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	1c5a      	adds	r2, r3, #1
 800d604:	60fa      	str	r2, [r7, #12]
 800d606:	783a      	ldrb	r2, [r7, #0]
 800d608:	701a      	strb	r2, [r3, #0]
 800d60a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d60e:	f04f 0300 	mov.w	r3, #0
 800d612:	f04f 0400 	mov.w	r4, #0
 800d616:	0a0b      	lsrs	r3, r1, #8
 800d618:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d61c:	0a14      	lsrs	r4, r2, #8
 800d61e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	1c5a      	adds	r2, r3, #1
 800d626:	60fa      	str	r2, [r7, #12]
 800d628:	783a      	ldrb	r2, [r7, #0]
 800d62a:	701a      	strb	r2, [r3, #0]
 800d62c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d630:	f04f 0300 	mov.w	r3, #0
 800d634:	f04f 0400 	mov.w	r4, #0
 800d638:	0a0b      	lsrs	r3, r1, #8
 800d63a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d63e:	0a14      	lsrs	r4, r2, #8
 800d640:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	1c5a      	adds	r2, r3, #1
 800d648:	60fa      	str	r2, [r7, #12]
 800d64a:	783a      	ldrb	r2, [r7, #0]
 800d64c:	701a      	strb	r2, [r3, #0]
 800d64e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d652:	f04f 0300 	mov.w	r3, #0
 800d656:	f04f 0400 	mov.w	r4, #0
 800d65a:	0a0b      	lsrs	r3, r1, #8
 800d65c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d660:	0a14      	lsrs	r4, r2, #8
 800d662:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	1c5a      	adds	r2, r3, #1
 800d66a:	60fa      	str	r2, [r7, #12]
 800d66c:	783a      	ldrb	r2, [r7, #0]
 800d66e:	701a      	strb	r2, [r3, #0]
 800d670:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d674:	f04f 0300 	mov.w	r3, #0
 800d678:	f04f 0400 	mov.w	r4, #0
 800d67c:	0a0b      	lsrs	r3, r1, #8
 800d67e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d682:	0a14      	lsrs	r4, r2, #8
 800d684:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	1c5a      	adds	r2, r3, #1
 800d68c:	60fa      	str	r2, [r7, #12]
 800d68e:	783a      	ldrb	r2, [r7, #0]
 800d690:	701a      	strb	r2, [r3, #0]
}
 800d692:	bf00      	nop
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bc90      	pop	{r4, r7}
 800d69a:	4770      	bx	lr

0800d69c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d69c:	b480      	push	{r7}
 800d69e:	b087      	sub	sp, #28
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d00d      	beq.n	800d6d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d6b6:	693a      	ldr	r2, [r7, #16]
 800d6b8:	1c53      	adds	r3, r2, #1
 800d6ba:	613b      	str	r3, [r7, #16]
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	1c59      	adds	r1, r3, #1
 800d6c0:	6179      	str	r1, [r7, #20]
 800d6c2:	7812      	ldrb	r2, [r2, #0]
 800d6c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	607b      	str	r3, [r7, #4]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1f1      	bne.n	800d6b6 <mem_cpy+0x1a>
	}
}
 800d6d2:	bf00      	nop
 800d6d4:	371c      	adds	r7, #28
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr

0800d6de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d6de:	b480      	push	{r7}
 800d6e0:	b087      	sub	sp, #28
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	60f8      	str	r0, [r7, #12]
 800d6e6:	60b9      	str	r1, [r7, #8]
 800d6e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	1c5a      	adds	r2, r3, #1
 800d6f2:	617a      	str	r2, [r7, #20]
 800d6f4:	68ba      	ldr	r2, [r7, #8]
 800d6f6:	b2d2      	uxtb	r2, r2
 800d6f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	607b      	str	r3, [r7, #4]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1f3      	bne.n	800d6ee <mem_set+0x10>
}
 800d706:	bf00      	nop
 800d708:	371c      	adds	r7, #28
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr

0800d712 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d712:	b480      	push	{r7}
 800d714:	b089      	sub	sp, #36	; 0x24
 800d716:	af00      	add	r7, sp, #0
 800d718:	60f8      	str	r0, [r7, #12]
 800d71a:	60b9      	str	r1, [r7, #8]
 800d71c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	61fb      	str	r3, [r7, #28]
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d726:	2300      	movs	r3, #0
 800d728:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	1c5a      	adds	r2, r3, #1
 800d72e:	61fa      	str	r2, [r7, #28]
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	4619      	mov	r1, r3
 800d734:	69bb      	ldr	r3, [r7, #24]
 800d736:	1c5a      	adds	r2, r3, #1
 800d738:	61ba      	str	r2, [r7, #24]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	1acb      	subs	r3, r1, r3
 800d73e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	3b01      	subs	r3, #1
 800d744:	607b      	str	r3, [r7, #4]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d002      	beq.n	800d752 <mem_cmp+0x40>
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d0eb      	beq.n	800d72a <mem_cmp+0x18>

	return r;
 800d752:	697b      	ldr	r3, [r7, #20]
}
 800d754:	4618      	mov	r0, r3
 800d756:	3724      	adds	r7, #36	; 0x24
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d76a:	e002      	b.n	800d772 <chk_chr+0x12>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	3301      	adds	r3, #1
 800d770:	607b      	str	r3, [r7, #4]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d005      	beq.n	800d786 <chk_chr+0x26>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	461a      	mov	r2, r3
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	4293      	cmp	r3, r2
 800d784:	d1f2      	bne.n	800d76c <chk_chr+0xc>
	return *str;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	781b      	ldrb	r3, [r3, #0]
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	370c      	adds	r7, #12
 800d78e:	46bd      	mov	sp, r7
 800d790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d794:	4770      	bx	lr

0800d796 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d796:	b580      	push	{r7, lr}
 800d798:	b082      	sub	sp, #8
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d009      	beq.n	800d7b8 <lock_fs+0x22>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	699b      	ldr	r3, [r3, #24]
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f004 f914 	bl	80119d6 <ff_req_grant>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d001      	beq.n	800d7b8 <lock_fs+0x22>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	e000      	b.n	800d7ba <lock_fs+0x24>
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}

0800d7c2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b082      	sub	sp, #8
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00d      	beq.n	800d7f0 <unlock_fs+0x2e>
 800d7d4:	78fb      	ldrb	r3, [r7, #3]
 800d7d6:	2b0c      	cmp	r3, #12
 800d7d8:	d00a      	beq.n	800d7f0 <unlock_fs+0x2e>
 800d7da:	78fb      	ldrb	r3, [r7, #3]
 800d7dc:	2b0b      	cmp	r3, #11
 800d7de:	d007      	beq.n	800d7f0 <unlock_fs+0x2e>
 800d7e0:	78fb      	ldrb	r3, [r7, #3]
 800d7e2:	2b0f      	cmp	r3, #15
 800d7e4:	d004      	beq.n	800d7f0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	699b      	ldr	r3, [r3, #24]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f004 f908 	bl	8011a00 <ff_rel_grant>
	}
}
 800d7f0:	bf00      	nop
 800d7f2:	3708      	adds	r7, #8
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d802:	2300      	movs	r3, #0
 800d804:	60bb      	str	r3, [r7, #8]
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	60fb      	str	r3, [r7, #12]
 800d80a:	e029      	b.n	800d860 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d80c:	4a27      	ldr	r2, [pc, #156]	; (800d8ac <chk_lock+0xb4>)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	011b      	lsls	r3, r3, #4
 800d812:	4413      	add	r3, r2
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d01d      	beq.n	800d856 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d81a:	4a24      	ldr	r2, [pc, #144]	; (800d8ac <chk_lock+0xb4>)
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	011b      	lsls	r3, r3, #4
 800d820:	4413      	add	r3, r2
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d116      	bne.n	800d85a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d82c:	4a1f      	ldr	r2, [pc, #124]	; (800d8ac <chk_lock+0xb4>)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	011b      	lsls	r3, r3, #4
 800d832:	4413      	add	r3, r2
 800d834:	3304      	adds	r3, #4
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d10c      	bne.n	800d85a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d840:	4a1a      	ldr	r2, [pc, #104]	; (800d8ac <chk_lock+0xb4>)
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	011b      	lsls	r3, r3, #4
 800d846:	4413      	add	r3, r2
 800d848:	3308      	adds	r3, #8
 800d84a:	681a      	ldr	r2, [r3, #0]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800d850:	429a      	cmp	r2, r3
 800d852:	d102      	bne.n	800d85a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d854:	e007      	b.n	800d866 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d856:	2301      	movs	r3, #1
 800d858:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	3301      	adds	r3, #1
 800d85e:	60fb      	str	r3, [r7, #12]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2b09      	cmp	r3, #9
 800d864:	d9d2      	bls.n	800d80c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2b0a      	cmp	r3, #10
 800d86a:	d109      	bne.n	800d880 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d102      	bne.n	800d878 <chk_lock+0x80>
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	2b02      	cmp	r3, #2
 800d876:	d101      	bne.n	800d87c <chk_lock+0x84>
 800d878:	2300      	movs	r3, #0
 800d87a:	e010      	b.n	800d89e <chk_lock+0xa6>
 800d87c:	2312      	movs	r3, #18
 800d87e:	e00e      	b.n	800d89e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d108      	bne.n	800d898 <chk_lock+0xa0>
 800d886:	4a09      	ldr	r2, [pc, #36]	; (800d8ac <chk_lock+0xb4>)
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	011b      	lsls	r3, r3, #4
 800d88c:	4413      	add	r3, r2
 800d88e:	330c      	adds	r3, #12
 800d890:	881b      	ldrh	r3, [r3, #0]
 800d892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d896:	d101      	bne.n	800d89c <chk_lock+0xa4>
 800d898:	2310      	movs	r3, #16
 800d89a:	e000      	b.n	800d89e <chk_lock+0xa6>
 800d89c:	2300      	movs	r3, #0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3714      	adds	r7, #20
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	20000224 	.word	0x20000224

0800d8b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	607b      	str	r3, [r7, #4]
 800d8ba:	e002      	b.n	800d8c2 <enq_lock+0x12>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	607b      	str	r3, [r7, #4]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2b09      	cmp	r3, #9
 800d8c6:	d806      	bhi.n	800d8d6 <enq_lock+0x26>
 800d8c8:	4a09      	ldr	r2, [pc, #36]	; (800d8f0 <enq_lock+0x40>)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	011b      	lsls	r3, r3, #4
 800d8ce:	4413      	add	r3, r2
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d1f2      	bne.n	800d8bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2b0a      	cmp	r3, #10
 800d8da:	bf14      	ite	ne
 800d8dc:	2301      	movne	r3, #1
 800d8de:	2300      	moveq	r3, #0
 800d8e0:	b2db      	uxtb	r3, r3
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	370c      	adds	r7, #12
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop
 800d8f0:	20000224 	.word	0x20000224

0800d8f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b085      	sub	sp, #20
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d8fe:	2300      	movs	r3, #0
 800d900:	60fb      	str	r3, [r7, #12]
 800d902:	e01f      	b.n	800d944 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d904:	4a41      	ldr	r2, [pc, #260]	; (800da0c <inc_lock+0x118>)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	011b      	lsls	r3, r3, #4
 800d90a:	4413      	add	r3, r2
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	429a      	cmp	r2, r3
 800d914:	d113      	bne.n	800d93e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d916:	4a3d      	ldr	r2, [pc, #244]	; (800da0c <inc_lock+0x118>)
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	011b      	lsls	r3, r3, #4
 800d91c:	4413      	add	r3, r2
 800d91e:	3304      	adds	r3, #4
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d926:	429a      	cmp	r2, r3
 800d928:	d109      	bne.n	800d93e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d92a:	4a38      	ldr	r2, [pc, #224]	; (800da0c <inc_lock+0x118>)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	011b      	lsls	r3, r3, #4
 800d930:	4413      	add	r3, r2
 800d932:	3308      	adds	r3, #8
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d006      	beq.n	800d94c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	3301      	adds	r3, #1
 800d942:	60fb      	str	r3, [r7, #12]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2b09      	cmp	r3, #9
 800d948:	d9dc      	bls.n	800d904 <inc_lock+0x10>
 800d94a:	e000      	b.n	800d94e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d94c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2b0a      	cmp	r3, #10
 800d952:	d132      	bne.n	800d9ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d954:	2300      	movs	r3, #0
 800d956:	60fb      	str	r3, [r7, #12]
 800d958:	e002      	b.n	800d960 <inc_lock+0x6c>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	3301      	adds	r3, #1
 800d95e:	60fb      	str	r3, [r7, #12]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b09      	cmp	r3, #9
 800d964:	d806      	bhi.n	800d974 <inc_lock+0x80>
 800d966:	4a29      	ldr	r2, [pc, #164]	; (800da0c <inc_lock+0x118>)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	011b      	lsls	r3, r3, #4
 800d96c:	4413      	add	r3, r2
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d1f2      	bne.n	800d95a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2b0a      	cmp	r3, #10
 800d978:	d101      	bne.n	800d97e <inc_lock+0x8a>
 800d97a:	2300      	movs	r3, #0
 800d97c:	e040      	b.n	800da00 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	4922      	ldr	r1, [pc, #136]	; (800da0c <inc_lock+0x118>)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	011b      	lsls	r3, r3, #4
 800d988:	440b      	add	r3, r1
 800d98a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	689a      	ldr	r2, [r3, #8]
 800d990:	491e      	ldr	r1, [pc, #120]	; (800da0c <inc_lock+0x118>)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	011b      	lsls	r3, r3, #4
 800d996:	440b      	add	r3, r1
 800d998:	3304      	adds	r3, #4
 800d99a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9a0:	491a      	ldr	r1, [pc, #104]	; (800da0c <inc_lock+0x118>)
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	011b      	lsls	r3, r3, #4
 800d9a6:	440b      	add	r3, r1
 800d9a8:	3308      	adds	r3, #8
 800d9aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d9ac:	4a17      	ldr	r2, [pc, #92]	; (800da0c <inc_lock+0x118>)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	011b      	lsls	r3, r3, #4
 800d9b2:	4413      	add	r3, r2
 800d9b4:	330c      	adds	r3, #12
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d009      	beq.n	800d9d4 <inc_lock+0xe0>
 800d9c0:	4a12      	ldr	r2, [pc, #72]	; (800da0c <inc_lock+0x118>)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	011b      	lsls	r3, r3, #4
 800d9c6:	4413      	add	r3, r2
 800d9c8:	330c      	adds	r3, #12
 800d9ca:	881b      	ldrh	r3, [r3, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <inc_lock+0xe0>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	e015      	b.n	800da00 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d108      	bne.n	800d9ec <inc_lock+0xf8>
 800d9da:	4a0c      	ldr	r2, [pc, #48]	; (800da0c <inc_lock+0x118>)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	011b      	lsls	r3, r3, #4
 800d9e0:	4413      	add	r3, r2
 800d9e2:	330c      	adds	r3, #12
 800d9e4:	881b      	ldrh	r3, [r3, #0]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	e001      	b.n	800d9f0 <inc_lock+0xfc>
 800d9ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d9f0:	4906      	ldr	r1, [pc, #24]	; (800da0c <inc_lock+0x118>)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	011b      	lsls	r3, r3, #4
 800d9f6:	440b      	add	r3, r1
 800d9f8:	330c      	adds	r3, #12
 800d9fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	3301      	adds	r3, #1
}
 800da00:	4618      	mov	r0, r3
 800da02:	3714      	adds	r7, #20
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr
 800da0c:	20000224 	.word	0x20000224

0800da10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	3b01      	subs	r3, #1
 800da1c:	607b      	str	r3, [r7, #4]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2b09      	cmp	r3, #9
 800da22:	d825      	bhi.n	800da70 <dec_lock+0x60>
		n = Files[i].ctr;
 800da24:	4a17      	ldr	r2, [pc, #92]	; (800da84 <dec_lock+0x74>)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	011b      	lsls	r3, r3, #4
 800da2a:	4413      	add	r3, r2
 800da2c:	330c      	adds	r3, #12
 800da2e:	881b      	ldrh	r3, [r3, #0]
 800da30:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800da32:	89fb      	ldrh	r3, [r7, #14]
 800da34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da38:	d101      	bne.n	800da3e <dec_lock+0x2e>
 800da3a:	2300      	movs	r3, #0
 800da3c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800da3e:	89fb      	ldrh	r3, [r7, #14]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d002      	beq.n	800da4a <dec_lock+0x3a>
 800da44:	89fb      	ldrh	r3, [r7, #14]
 800da46:	3b01      	subs	r3, #1
 800da48:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800da4a:	4a0e      	ldr	r2, [pc, #56]	; (800da84 <dec_lock+0x74>)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	011b      	lsls	r3, r3, #4
 800da50:	4413      	add	r3, r2
 800da52:	330c      	adds	r3, #12
 800da54:	89fa      	ldrh	r2, [r7, #14]
 800da56:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800da58:	89fb      	ldrh	r3, [r7, #14]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d105      	bne.n	800da6a <dec_lock+0x5a>
 800da5e:	4a09      	ldr	r2, [pc, #36]	; (800da84 <dec_lock+0x74>)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	011b      	lsls	r3, r3, #4
 800da64:	4413      	add	r3, r2
 800da66:	2200      	movs	r2, #0
 800da68:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800da6a:	2300      	movs	r3, #0
 800da6c:	737b      	strb	r3, [r7, #13]
 800da6e:	e001      	b.n	800da74 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800da70:	2302      	movs	r3, #2
 800da72:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800da74:	7b7b      	ldrb	r3, [r7, #13]
}
 800da76:	4618      	mov	r0, r3
 800da78:	3714      	adds	r7, #20
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop
 800da84:	20000224 	.word	0x20000224

0800da88 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800da88:	b480      	push	{r7}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800da90:	2300      	movs	r3, #0
 800da92:	60fb      	str	r3, [r7, #12]
 800da94:	e010      	b.n	800dab8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800da96:	4a0d      	ldr	r2, [pc, #52]	; (800dacc <clear_lock+0x44>)
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	011b      	lsls	r3, r3, #4
 800da9c:	4413      	add	r3, r2
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d105      	bne.n	800dab2 <clear_lock+0x2a>
 800daa6:	4a09      	ldr	r2, [pc, #36]	; (800dacc <clear_lock+0x44>)
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	011b      	lsls	r3, r3, #4
 800daac:	4413      	add	r3, r2
 800daae:	2200      	movs	r2, #0
 800dab0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	3301      	adds	r3, #1
 800dab6:	60fb      	str	r3, [r7, #12]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2b09      	cmp	r3, #9
 800dabc:	d9eb      	bls.n	800da96 <clear_lock+0xe>
	}
}
 800dabe:	bf00      	nop
 800dac0:	3714      	adds	r7, #20
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	20000224 	.word	0x20000224

0800dad0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dad8:	2300      	movs	r3, #0
 800dada:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	78db      	ldrb	r3, [r3, #3]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d034      	beq.n	800db4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dae8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	7858      	ldrb	r0, [r3, #1]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800daf4:	2301      	movs	r3, #1
 800daf6:	697a      	ldr	r2, [r7, #20]
 800daf8:	f7ff fbcc 	bl	800d294 <disk_write>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d002      	beq.n	800db08 <sync_window+0x38>
			res = FR_DISK_ERR;
 800db02:	2301      	movs	r3, #1
 800db04:	73fb      	strb	r3, [r7, #15]
 800db06:	e022      	b.n	800db4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db12:	697a      	ldr	r2, [r7, #20]
 800db14:	1ad2      	subs	r2, r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d217      	bcs.n	800db4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	789b      	ldrb	r3, [r3, #2]
 800db22:	613b      	str	r3, [r7, #16]
 800db24:	e010      	b.n	800db48 <sync_window+0x78>
					wsect += fs->fsize;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db2a:	697a      	ldr	r2, [r7, #20]
 800db2c:	4413      	add	r3, r2
 800db2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	7858      	ldrb	r0, [r3, #1]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800db3a:	2301      	movs	r3, #1
 800db3c:	697a      	ldr	r2, [r7, #20]
 800db3e:	f7ff fba9 	bl	800d294 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	3b01      	subs	r3, #1
 800db46:	613b      	str	r3, [r7, #16]
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d8eb      	bhi.n	800db26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800db4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db50:	4618      	mov	r0, r3
 800db52:	3718      	adds	r7, #24
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800db62:	2300      	movs	r3, #0
 800db64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db6a:	683a      	ldr	r2, [r7, #0]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d01b      	beq.n	800dba8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7ff ffad 	bl	800dad0 <sync_window>
 800db76:	4603      	mov	r3, r0
 800db78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800db7a:	7bfb      	ldrb	r3, [r7, #15]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d113      	bne.n	800dba8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	7858      	ldrb	r0, [r3, #1]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800db8a:	2301      	movs	r3, #1
 800db8c:	683a      	ldr	r2, [r7, #0]
 800db8e:	f7ff fb61 	bl	800d254 <disk_read>
 800db92:	4603      	mov	r3, r0
 800db94:	2b00      	cmp	r3, #0
 800db96:	d004      	beq.n	800dba2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800db98:	f04f 33ff 	mov.w	r3, #4294967295
 800db9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800db9e:	2301      	movs	r3, #1
 800dba0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
	return res;
 800dba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
	...

0800dbb4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7ff ff87 	bl	800dad0 <sync_window>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dbc6:	7bfb      	ldrb	r3, [r7, #15]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d159      	bne.n	800dc80 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	2b03      	cmp	r3, #3
 800dbd2:	d149      	bne.n	800dc68 <sync_fs+0xb4>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	791b      	ldrb	r3, [r3, #4]
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d145      	bne.n	800dc68 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	899b      	ldrh	r3, [r3, #12]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	2100      	movs	r1, #0
 800dbea:	f7ff fd78 	bl	800d6de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	3340      	adds	r3, #64	; 0x40
 800dbf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dbf6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7ff fc80 	bl	800d500 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	3340      	adds	r3, #64	; 0x40
 800dc04:	4921      	ldr	r1, [pc, #132]	; (800dc8c <sync_fs+0xd8>)
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7ff fc95 	bl	800d536 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	3340      	adds	r3, #64	; 0x40
 800dc10:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dc14:	491e      	ldr	r1, [pc, #120]	; (800dc90 <sync_fs+0xdc>)
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7ff fc8d 	bl	800d536 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	3340      	adds	r3, #64	; 0x40
 800dc20:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a1b      	ldr	r3, [r3, #32]
 800dc28:	4619      	mov	r1, r3
 800dc2a:	4610      	mov	r0, r2
 800dc2c:	f7ff fc83 	bl	800d536 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	3340      	adds	r3, #64	; 0x40
 800dc34:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	69db      	ldr	r3, [r3, #28]
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	4610      	mov	r0, r2
 800dc40:	f7ff fc79 	bl	800d536 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	63da      	str	r2, [r3, #60]	; 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	7858      	ldrb	r0, [r3, #1]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	f7ff fb19 	bl	800d294 <disk_write>
			fs->fsi_flag = 0;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2200      	movs	r2, #0
 800dc66:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	785b      	ldrb	r3, [r3, #1]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	2100      	movs	r1, #0
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7ff fb2f 	bl	800d2d4 <disk_ioctl>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d001      	beq.n	800dc80 <sync_fs+0xcc>
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	41615252 	.word	0x41615252
 800dc90:	61417272 	.word	0x61417272

0800dc94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	3b02      	subs	r3, #2
 800dca2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca8:	3b02      	subs	r3, #2
 800dcaa:	683a      	ldr	r2, [r7, #0]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d301      	bcc.n	800dcb4 <clust2sect+0x20>
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	e008      	b.n	800dcc6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	895b      	ldrh	r3, [r3, #10]
 800dcb8:	461a      	mov	r2, r3
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	fb03 f202 	mul.w	r2, r3, r2
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc4:	4413      	add	r3, r2
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	370c      	adds	r7, #12
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr
	...

0800dcd4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dcd4:	b590      	push	{r4, r7, lr}
 800dcd6:	b089      	sub	sp, #36	; 0x24
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d904      	bls.n	800dcf4 <get_fat+0x20>
 800dcea:	69bb      	ldr	r3, [r7, #24]
 800dcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcee:	683a      	ldr	r2, [r7, #0]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d302      	bcc.n	800dcfa <get_fat+0x26>
		val = 1;	/* Internal error */
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	61fb      	str	r3, [r7, #28]
 800dcf8:	e13a      	b.n	800df70 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dcfa:	f04f 33ff 	mov.w	r3, #4294967295
 800dcfe:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	3b01      	subs	r3, #1
 800dd06:	2b03      	cmp	r3, #3
 800dd08:	f200 8126 	bhi.w	800df58 <get_fat+0x284>
 800dd0c:	a201      	add	r2, pc, #4	; (adr r2, 800dd14 <get_fat+0x40>)
 800dd0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd12:	bf00      	nop
 800dd14:	0800dd25 	.word	0x0800dd25
 800dd18:	0800ddd3 	.word	0x0800ddd3
 800dd1c:	0800de1f 	.word	0x0800de1f
 800dd20:	0800de6f 	.word	0x0800de6f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	60fb      	str	r3, [r7, #12]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	085b      	lsrs	r3, r3, #1
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	4413      	add	r3, r2
 800dd30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	899b      	ldrh	r3, [r3, #12]
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd42:	4413      	add	r3, r2
 800dd44:	4619      	mov	r1, r3
 800dd46:	69b8      	ldr	r0, [r7, #24]
 800dd48:	f7ff ff06 	bl	800db58 <move_window>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	f040 8105 	bne.w	800df5e <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	1c5a      	adds	r2, r3, #1
 800dd58:	60fa      	str	r2, [r7, #12]
 800dd5a:	69ba      	ldr	r2, [r7, #24]
 800dd5c:	8992      	ldrh	r2, [r2, #12]
 800dd5e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd62:	fb02 f201 	mul.w	r2, r2, r1
 800dd66:	1a9b      	subs	r3, r3, r2
 800dd68:	69ba      	ldr	r2, [r7, #24]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	899b      	ldrh	r3, [r3, #12]
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd82:	4413      	add	r3, r2
 800dd84:	4619      	mov	r1, r3
 800dd86:	69b8      	ldr	r0, [r7, #24]
 800dd88:	f7ff fee6 	bl	800db58 <move_window>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	f040 80e7 	bne.w	800df62 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	899b      	ldrh	r3, [r3, #12]
 800dd98:	461a      	mov	r2, r3
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800dda0:	fb02 f201 	mul.w	r2, r2, r1
 800dda4:	1a9b      	subs	r3, r3, r2
 800dda6:	69ba      	ldr	r2, [r7, #24]
 800dda8:	4413      	add	r3, r2
 800ddaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddae:	021b      	lsls	r3, r3, #8
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	f003 0301 	and.w	r3, r3, #1
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <get_fat+0xf4>
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	091b      	lsrs	r3, r3, #4
 800ddc6:	e002      	b.n	800ddce <get_fat+0xfa>
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ddce:	61fb      	str	r3, [r7, #28]
			break;
 800ddd0:	e0ce      	b.n	800df70 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	899b      	ldrh	r3, [r3, #12]
 800ddda:	085b      	lsrs	r3, r3, #1
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	4619      	mov	r1, r3
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	fbb3 f3f1 	udiv	r3, r3, r1
 800dde6:	4413      	add	r3, r2
 800dde8:	4619      	mov	r1, r3
 800ddea:	69b8      	ldr	r0, [r7, #24]
 800ddec:	f7ff feb4 	bl	800db58 <move_window>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	f040 80b7 	bne.w	800df66 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	005b      	lsls	r3, r3, #1
 800de02:	69ba      	ldr	r2, [r7, #24]
 800de04:	8992      	ldrh	r2, [r2, #12]
 800de06:	fbb3 f0f2 	udiv	r0, r3, r2
 800de0a:	fb02 f200 	mul.w	r2, r2, r0
 800de0e:	1a9b      	subs	r3, r3, r2
 800de10:	440b      	add	r3, r1
 800de12:	4618      	mov	r0, r3
 800de14:	f7ff fa7c 	bl	800d310 <ld_word>
 800de18:	4603      	mov	r3, r0
 800de1a:	61fb      	str	r3, [r7, #28]
			break;
 800de1c:	e0a8      	b.n	800df70 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	899b      	ldrh	r3, [r3, #12]
 800de26:	089b      	lsrs	r3, r3, #2
 800de28:	b29b      	uxth	r3, r3
 800de2a:	4619      	mov	r1, r3
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800de32:	4413      	add	r3, r2
 800de34:	4619      	mov	r1, r3
 800de36:	69b8      	ldr	r0, [r7, #24]
 800de38:	f7ff fe8e 	bl	800db58 <move_window>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f040 8093 	bne.w	800df6a <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800de44:	69bb      	ldr	r3, [r7, #24]
 800de46:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	009b      	lsls	r3, r3, #2
 800de4e:	69ba      	ldr	r2, [r7, #24]
 800de50:	8992      	ldrh	r2, [r2, #12]
 800de52:	fbb3 f0f2 	udiv	r0, r3, r2
 800de56:	fb02 f200 	mul.w	r2, r2, r0
 800de5a:	1a9b      	subs	r3, r3, r2
 800de5c:	440b      	add	r3, r1
 800de5e:	4618      	mov	r0, r3
 800de60:	f7ff fa6e 	bl	800d340 <ld_dword>
 800de64:	4603      	mov	r3, r0
 800de66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800de6a:	61fb      	str	r3, [r7, #28]
			break;
 800de6c:	e080      	b.n	800df70 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800de74:	4323      	orrs	r3, r4
 800de76:	d06f      	beq.n	800df58 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	683a      	ldr	r2, [r7, #0]
 800de7e:	1ad3      	subs	r3, r2, r3
 800de80:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800de88:	f113 30ff 	adds.w	r0, r3, #4294967295
 800de8c:	f144 31ff 	adc.w	r1, r4, #4294967295
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	899b      	ldrh	r3, [r3, #12]
 800de94:	b29b      	uxth	r3, r3
 800de96:	f04f 0400 	mov.w	r4, #0
 800de9a:	461a      	mov	r2, r3
 800de9c:	4623      	mov	r3, r4
 800de9e:	f7f2 f9cf 	bl	8000240 <__aeabi_uldivmod>
 800dea2:	4603      	mov	r3, r0
 800dea4:	460c      	mov	r4, r1
 800dea6:	461a      	mov	r2, r3
 800dea8:	69bb      	ldr	r3, [r7, #24]
 800deaa:	895b      	ldrh	r3, [r3, #10]
 800deac:	fbb2 f3f3 	udiv	r3, r2, r3
 800deb0:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	79db      	ldrb	r3, [r3, #7]
 800deb6:	2b02      	cmp	r3, #2
 800deb8:	d10e      	bne.n	800ded8 <get_fat+0x204>
					if (cofs <= clen) {
 800deba:	697a      	ldr	r2, [r7, #20]
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d80a      	bhi.n	800ded8 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800dec2:	697a      	ldr	r2, [r7, #20]
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d002      	beq.n	800ded0 <get_fat+0x1fc>
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	3301      	adds	r3, #1
 800dece:	e001      	b.n	800ded4 <get_fat+0x200>
 800ded0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ded4:	61fb      	str	r3, [r7, #28]
						break;
 800ded6:	e04b      	b.n	800df70 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	79db      	ldrb	r3, [r3, #7]
 800dedc:	2b03      	cmp	r3, #3
 800dede:	d108      	bne.n	800def2 <get_fat+0x21e>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	699b      	ldr	r3, [r3, #24]
 800dee4:	697a      	ldr	r2, [r7, #20]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d203      	bcs.n	800def2 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	3301      	adds	r3, #1
 800deee:	61fb      	str	r3, [r7, #28]
					break;
 800def0:	e03e      	b.n	800df70 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	79db      	ldrb	r3, [r3, #7]
 800def6:	2b02      	cmp	r3, #2
 800def8:	d02e      	beq.n	800df58 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	69db      	ldr	r3, [r3, #28]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d003      	beq.n	800df0a <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800df02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800df06:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800df08:	e032      	b.n	800df70 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	899b      	ldrh	r3, [r3, #12]
 800df12:	089b      	lsrs	r3, r3, #2
 800df14:	b29b      	uxth	r3, r3
 800df16:	4619      	mov	r1, r3
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800df1e:	4413      	add	r3, r2
 800df20:	4619      	mov	r1, r3
 800df22:	69b8      	ldr	r0, [r7, #24]
 800df24:	f7ff fe18 	bl	800db58 <move_window>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d11f      	bne.n	800df6e <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	69ba      	ldr	r2, [r7, #24]
 800df3a:	8992      	ldrh	r2, [r2, #12]
 800df3c:	fbb3 f0f2 	udiv	r0, r3, r2
 800df40:	fb02 f200 	mul.w	r2, r2, r0
 800df44:	1a9b      	subs	r3, r3, r2
 800df46:	440b      	add	r3, r1
 800df48:	4618      	mov	r0, r3
 800df4a:	f7ff f9f9 	bl	800d340 <ld_dword>
 800df4e:	4603      	mov	r3, r0
 800df50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df54:	61fb      	str	r3, [r7, #28]
					break;
 800df56:	e00b      	b.n	800df70 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800df58:	2301      	movs	r3, #1
 800df5a:	61fb      	str	r3, [r7, #28]
 800df5c:	e008      	b.n	800df70 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df5e:	bf00      	nop
 800df60:	e006      	b.n	800df70 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df62:	bf00      	nop
 800df64:	e004      	b.n	800df70 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800df66:	bf00      	nop
 800df68:	e002      	b.n	800df70 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800df6a:	bf00      	nop
 800df6c:	e000      	b.n	800df70 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800df6e:	bf00      	nop
		}
	}

	return val;
 800df70:	69fb      	ldr	r3, [r7, #28]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3724      	adds	r7, #36	; 0x24
 800df76:	46bd      	mov	sp, r7
 800df78:	bd90      	pop	{r4, r7, pc}
 800df7a:	bf00      	nop

0800df7c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800df7c:	b590      	push	{r4, r7, lr}
 800df7e:	b089      	sub	sp, #36	; 0x24
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800df88:	2302      	movs	r3, #2
 800df8a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2b01      	cmp	r3, #1
 800df90:	f240 8111 	bls.w	800e1b6 <put_fat+0x23a>
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df98:	68ba      	ldr	r2, [r7, #8]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	f080 810b 	bcs.w	800e1b6 <put_fat+0x23a>
		switch (fs->fs_type) {
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	2b03      	cmp	r3, #3
 800dfa8:	f200 8105 	bhi.w	800e1b6 <put_fat+0x23a>
 800dfac:	a201      	add	r2, pc, #4	; (adr r2, 800dfb4 <put_fat+0x38>)
 800dfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb2:	bf00      	nop
 800dfb4:	0800dfc5 	.word	0x0800dfc5
 800dfb8:	0800e0c9 	.word	0x0800e0c9
 800dfbc:	0800e11f 	.word	0x0800e11f
 800dfc0:	0800e11f 	.word	0x0800e11f
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	61bb      	str	r3, [r7, #24]
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	085b      	lsrs	r3, r3, #1
 800dfcc:	69ba      	ldr	r2, [r7, #24]
 800dfce:	4413      	add	r3, r2
 800dfd0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	899b      	ldrh	r3, [r3, #12]
 800dfda:	4619      	mov	r1, r3
 800dfdc:	69bb      	ldr	r3, [r7, #24]
 800dfde:	fbb3 f3f1 	udiv	r3, r3, r1
 800dfe2:	4413      	add	r3, r2
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	f7ff fdb6 	bl	800db58 <move_window>
 800dfec:	4603      	mov	r3, r0
 800dfee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dff0:	7ffb      	ldrb	r3, [r7, #31]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	f040 80d8 	bne.w	800e1a8 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	1c5a      	adds	r2, r3, #1
 800e002:	61ba      	str	r2, [r7, #24]
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	8992      	ldrh	r2, [r2, #12]
 800e008:	fbb3 f0f2 	udiv	r0, r3, r2
 800e00c:	fb02 f200 	mul.w	r2, r2, r0
 800e010:	1a9b      	subs	r3, r3, r2
 800e012:	440b      	add	r3, r1
 800e014:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	f003 0301 	and.w	r3, r3, #1
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d00d      	beq.n	800e03c <put_fat+0xc0>
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	b25b      	sxtb	r3, r3
 800e026:	f003 030f 	and.w	r3, r3, #15
 800e02a:	b25a      	sxtb	r2, r3
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	011b      	lsls	r3, r3, #4
 800e032:	b25b      	sxtb	r3, r3
 800e034:	4313      	orrs	r3, r2
 800e036:	b25b      	sxtb	r3, r3
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	e001      	b.n	800e040 <put_fat+0xc4>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	697a      	ldr	r2, [r7, #20]
 800e042:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2201      	movs	r2, #1
 800e048:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	899b      	ldrh	r3, [r3, #12]
 800e052:	4619      	mov	r1, r3
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	fbb3 f3f1 	udiv	r3, r3, r1
 800e05a:	4413      	add	r3, r2
 800e05c:	4619      	mov	r1, r3
 800e05e:	68f8      	ldr	r0, [r7, #12]
 800e060:	f7ff fd7a 	bl	800db58 <move_window>
 800e064:	4603      	mov	r3, r0
 800e066:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e068:	7ffb      	ldrb	r3, [r7, #31]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f040 809e 	bne.w	800e1ac <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	899b      	ldrh	r3, [r3, #12]
 800e07a:	461a      	mov	r2, r3
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e082:	fb02 f200 	mul.w	r2, r2, r0
 800e086:	1a9b      	subs	r3, r3, r2
 800e088:	440b      	add	r3, r1
 800e08a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	f003 0301 	and.w	r3, r3, #1
 800e092:	2b00      	cmp	r3, #0
 800e094:	d003      	beq.n	800e09e <put_fat+0x122>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	091b      	lsrs	r3, r3, #4
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	e00e      	b.n	800e0bc <put_fat+0x140>
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	b25b      	sxtb	r3, r3
 800e0a4:	f023 030f 	bic.w	r3, r3, #15
 800e0a8:	b25a      	sxtb	r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	0a1b      	lsrs	r3, r3, #8
 800e0ae:	b25b      	sxtb	r3, r3
 800e0b0:	f003 030f 	and.w	r3, r3, #15
 800e0b4:	b25b      	sxtb	r3, r3
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	b25b      	sxtb	r3, r3
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	697a      	ldr	r2, [r7, #20]
 800e0be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	70da      	strb	r2, [r3, #3]
			break;
 800e0c6:	e076      	b.n	800e1b6 <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	899b      	ldrh	r3, [r3, #12]
 800e0d0:	085b      	lsrs	r3, r3, #1
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0dc:	4413      	add	r3, r2
 800e0de:	4619      	mov	r1, r3
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f7ff fd39 	bl	800db58 <move_window>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e0ea:	7ffb      	ldrb	r3, [r7, #31]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d15f      	bne.n	800e1b0 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	005b      	lsls	r3, r3, #1
 800e0fa:	68fa      	ldr	r2, [r7, #12]
 800e0fc:	8992      	ldrh	r2, [r2, #12]
 800e0fe:	fbb3 f0f2 	udiv	r0, r3, r2
 800e102:	fb02 f200 	mul.w	r2, r2, r0
 800e106:	1a9b      	subs	r3, r3, r2
 800e108:	440b      	add	r3, r1
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	b292      	uxth	r2, r2
 800e10e:	4611      	mov	r1, r2
 800e110:	4618      	mov	r0, r3
 800e112:	f7ff f9f5 	bl	800d500 <st_word>
			fs->wflag = 1;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2201      	movs	r2, #1
 800e11a:	70da      	strb	r2, [r3, #3]
			break;
 800e11c:	e04b      	b.n	800e1b6 <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	899b      	ldrh	r3, [r3, #12]
 800e126:	089b      	lsrs	r3, r3, #2
 800e128:	b29b      	uxth	r3, r3
 800e12a:	4619      	mov	r1, r3
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e132:	4413      	add	r3, r2
 800e134:	4619      	mov	r1, r3
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f7ff fd0e 	bl	800db58 <move_window>
 800e13c:	4603      	mov	r3, r0
 800e13e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e140:	7ffb      	ldrb	r3, [r7, #31]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d136      	bne.n	800e1b4 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	2b04      	cmp	r3, #4
 800e14c:	d017      	beq.n	800e17e <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	8992      	ldrh	r2, [r2, #12]
 800e162:	fbb3 f0f2 	udiv	r0, r3, r2
 800e166:	fb02 f200 	mul.w	r2, r2, r0
 800e16a:	1a9b      	subs	r3, r3, r2
 800e16c:	440b      	add	r3, r1
 800e16e:	4618      	mov	r0, r3
 800e170:	f7ff f8e6 	bl	800d340 <ld_dword>
 800e174:	4603      	mov	r3, r0
 800e176:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e17a:	4323      	orrs	r3, r4
 800e17c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	68fa      	ldr	r2, [r7, #12]
 800e18a:	8992      	ldrh	r2, [r2, #12]
 800e18c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e190:	fb02 f200 	mul.w	r2, r2, r0
 800e194:	1a9b      	subs	r3, r3, r2
 800e196:	440b      	add	r3, r1
 800e198:	6879      	ldr	r1, [r7, #4]
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7ff f9cb 	bl	800d536 <st_dword>
			fs->wflag = 1;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	70da      	strb	r2, [r3, #3]
			break;
 800e1a6:	e006      	b.n	800e1b6 <put_fat+0x23a>
			if (res != FR_OK) break;
 800e1a8:	bf00      	nop
 800e1aa:	e004      	b.n	800e1b6 <put_fat+0x23a>
			if (res != FR_OK) break;
 800e1ac:	bf00      	nop
 800e1ae:	e002      	b.n	800e1b6 <put_fat+0x23a>
			if (res != FR_OK) break;
 800e1b0:	bf00      	nop
 800e1b2:	e000      	b.n	800e1b6 <put_fat+0x23a>
			if (res != FR_OK) break;
 800e1b4:	bf00      	nop
		}
	}
	return res;
 800e1b6:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3724      	adds	r7, #36	; 0x24
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd90      	pop	{r4, r7, pc}

0800e1c0 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b08a      	sub	sp, #40	; 0x28
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	60b9      	str	r1, [r7, #8]
 800e1ca:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	3b02      	subs	r3, #2
 800e1d0:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d6:	3b02      	subs	r3, #2
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d301      	bcc.n	800e1e2 <find_bitmap+0x22>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	61fb      	str	r3, [r7, #28]
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	61bb      	str	r3, [r7, #24]
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	08db      	lsrs	r3, r3, #3
 800e1f6:	68f9      	ldr	r1, [r7, #12]
 800e1f8:	8989      	ldrh	r1, [r1, #12]
 800e1fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800e1fe:	4413      	add	r3, r2
 800e200:	4619      	mov	r1, r3
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	f7ff fca8 	bl	800db58 <move_window>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d002      	beq.n	800e214 <find_bitmap+0x54>
 800e20e:	f04f 33ff 	mov.w	r3, #4294967295
 800e212:	e058      	b.n	800e2c6 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	08db      	lsrs	r3, r3, #3
 800e218:	68fa      	ldr	r2, [r7, #12]
 800e21a:	8992      	ldrh	r2, [r2, #12]
 800e21c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e220:	fb02 f201 	mul.w	r2, r2, r1
 800e224:	1a9b      	subs	r3, r3, r2
 800e226:	623b      	str	r3, [r7, #32]
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	f003 0307 	and.w	r3, r3, #7
 800e22e:	2201      	movs	r2, #1
 800e230:	fa02 f303 	lsl.w	r3, r2, r3
 800e234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800e238:	68fa      	ldr	r2, [r7, #12]
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	4413      	add	r3, r2
 800e23e:	3340      	adds	r3, #64	; 0x40
 800e240:	781a      	ldrb	r2, [r3, #0]
 800e242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e246:	4013      	ands	r3, r2
 800e248:	74fb      	strb	r3, [r7, #19]
 800e24a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e24e:	005b      	lsls	r3, r3, #1
 800e250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	3301      	adds	r3, #1
 800e258:	61fb      	str	r3, [r7, #28]
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25e:	3b02      	subs	r3, #2
 800e260:	69fa      	ldr	r2, [r7, #28]
 800e262:	429a      	cmp	r2, r3
 800e264:	d307      	bcc.n	800e276 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800e266:	2300      	movs	r3, #0
 800e268:	61fb      	str	r3, [r7, #28]
 800e26a:	2300      	movs	r3, #0
 800e26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	899b      	ldrh	r3, [r3, #12]
 800e274:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800e276:	7cfb      	ldrb	r3, [r7, #19]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d109      	bne.n	800e290 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	3301      	adds	r3, #1
 800e280:	617b      	str	r3, [r7, #20]
 800e282:	697a      	ldr	r2, [r7, #20]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	429a      	cmp	r2, r3
 800e288:	d106      	bne.n	800e298 <find_bitmap+0xd8>
 800e28a:	69bb      	ldr	r3, [r7, #24]
 800e28c:	3302      	adds	r3, #2
 800e28e:	e01a      	b.n	800e2c6 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	61bb      	str	r3, [r7, #24]
 800e294:	2300      	movs	r3, #0
 800e296:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800e298:	69fa      	ldr	r2, [r7, #28]
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d101      	bne.n	800e2a4 <find_bitmap+0xe4>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	e010      	b.n	800e2c6 <find_bitmap+0x106>
			} while (bm);
 800e2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d1c5      	bne.n	800e238 <find_bitmap+0x78>
			bm = 1;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800e2b2:	6a3b      	ldr	r3, [r7, #32]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	623b      	str	r3, [r7, #32]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	899b      	ldrh	r3, [r3, #12]
 800e2bc:	461a      	mov	r2, r3
 800e2be:	6a3b      	ldr	r3, [r7, #32]
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d3b9      	bcc.n	800e238 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800e2c4:	e793      	b.n	800e1ee <find_bitmap+0x2e>
	}
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3728      	adds	r7, #40	; 0x28
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}

0800e2ce <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b088      	sub	sp, #32
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	60f8      	str	r0, [r7, #12]
 800e2d6:	60b9      	str	r1, [r7, #8]
 800e2d8:	607a      	str	r2, [r7, #4]
 800e2da:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	3b02      	subs	r3, #2
 800e2e0:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	08db      	lsrs	r3, r3, #3
 800e2ea:	68f9      	ldr	r1, [r7, #12]
 800e2ec:	8989      	ldrh	r1, [r1, #12]
 800e2ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800e2f2:	4413      	add	r3, r2
 800e2f4:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	08db      	lsrs	r3, r3, #3
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	8992      	ldrh	r2, [r2, #12]
 800e2fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800e302:	fb02 f201 	mul.w	r2, r2, r1
 800e306:	1a9b      	subs	r3, r3, r2
 800e308:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	f003 0307 	and.w	r3, r3, #7
 800e310:	2201      	movs	r2, #1
 800e312:	fa02 f303 	lsl.w	r3, r2, r3
 800e316:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	617a      	str	r2, [r7, #20]
 800e31e:	4619      	mov	r1, r3
 800e320:	68f8      	ldr	r0, [r7, #12]
 800e322:	f7ff fc19 	bl	800db58 <move_window>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d001      	beq.n	800e330 <change_bitmap+0x62>
 800e32c:	2301      	movs	r3, #1
 800e32e:	e03f      	b.n	800e3b0 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800e330:	68fa      	ldr	r2, [r7, #12]
 800e332:	69bb      	ldr	r3, [r7, #24]
 800e334:	4413      	add	r3, r2
 800e336:	3340      	adds	r3, #64	; 0x40
 800e338:	781a      	ldrb	r2, [r3, #0]
 800e33a:	7ffb      	ldrb	r3, [r7, #31]
 800e33c:	4013      	ands	r3, r2
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	2b00      	cmp	r3, #0
 800e342:	bf14      	ite	ne
 800e344:	2301      	movne	r3, #1
 800e346:	2300      	moveq	r3, #0
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	461a      	mov	r2, r3
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	4293      	cmp	r3, r2
 800e350:	d101      	bne.n	800e356 <change_bitmap+0x88>
 800e352:	2302      	movs	r3, #2
 800e354:	e02c      	b.n	800e3b0 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800e356:	68fa      	ldr	r2, [r7, #12]
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	4413      	add	r3, r2
 800e35c:	3340      	adds	r3, #64	; 0x40
 800e35e:	781a      	ldrb	r2, [r3, #0]
 800e360:	7ffb      	ldrb	r3, [r7, #31]
 800e362:	4053      	eors	r3, r2
 800e364:	b2d9      	uxtb	r1, r3
 800e366:	68fa      	ldr	r2, [r7, #12]
 800e368:	69bb      	ldr	r3, [r7, #24]
 800e36a:	4413      	add	r3, r2
 800e36c:	3340      	adds	r3, #64	; 0x40
 800e36e:	460a      	mov	r2, r1
 800e370:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2201      	movs	r2, #1
 800e376:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	3b01      	subs	r3, #1
 800e37c:	607b      	str	r3, [r7, #4]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d101      	bne.n	800e388 <change_bitmap+0xba>
 800e384:	2300      	movs	r3, #0
 800e386:	e013      	b.n	800e3b0 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800e388:	7ffb      	ldrb	r3, [r7, #31]
 800e38a:	005b      	lsls	r3, r3, #1
 800e38c:	77fb      	strb	r3, [r7, #31]
 800e38e:	7ffb      	ldrb	r3, [r7, #31]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d1cd      	bne.n	800e330 <change_bitmap+0x62>
			bm = 1;
 800e394:	2301      	movs	r3, #1
 800e396:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800e398:	69bb      	ldr	r3, [r7, #24]
 800e39a:	3301      	adds	r3, #1
 800e39c:	61bb      	str	r3, [r7, #24]
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	899b      	ldrh	r3, [r3, #12]
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	69bb      	ldr	r3, [r7, #24]
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d3c2      	bcc.n	800e330 <change_bitmap+0x62>
		i = 0;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800e3ae:	e7b3      	b.n	800e318 <change_bitmap+0x4a>
	}
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3720      	adds	r7, #32
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	79db      	ldrb	r3, [r3, #7]
 800e3c4:	2b03      	cmp	r3, #3
 800e3c6:	d121      	bne.n	800e40c <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	689b      	ldr	r3, [r3, #8]
 800e3cc:	617b      	str	r3, [r7, #20]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	699b      	ldr	r3, [r3, #24]
 800e3d2:	613b      	str	r3, [r7, #16]
 800e3d4:	e014      	b.n	800e400 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6818      	ldr	r0, [r3, #0]
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	461a      	mov	r2, r3
 800e3e0:	6979      	ldr	r1, [r7, #20]
 800e3e2:	f7ff fdcb 	bl	800df7c <put_fat>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800e3ea:	7bfb      	ldrb	r3, [r7, #15]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d001      	beq.n	800e3f4 <fill_first_frag+0x3c>
 800e3f0:	7bfb      	ldrb	r3, [r7, #15]
 800e3f2:	e00c      	b.n	800e40e <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	617b      	str	r3, [r7, #20]
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	3b01      	subs	r3, #1
 800e3fe:	613b      	str	r3, [r7, #16]
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d1e7      	bne.n	800e3d6 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2200      	movs	r2, #0
 800e40a:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800e40c:	2300      	movs	r3, #0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3718      	adds	r7, #24
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b086      	sub	sp, #24
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	60f8      	str	r0, [r7, #12]
 800e41e:	60b9      	str	r1, [r7, #8]
 800e420:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e422:	e020      	b.n	800e466 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	6818      	ldr	r0, [r3, #0]
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	69db      	ldr	r3, [r3, #28]
 800e42c:	68ba      	ldr	r2, [r7, #8]
 800e42e:	1ad3      	subs	r3, r2, r3
 800e430:	1c59      	adds	r1, r3, #1
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	69db      	ldr	r3, [r3, #28]
 800e436:	2b01      	cmp	r3, #1
 800e438:	d905      	bls.n	800e446 <fill_last_frag+0x30>
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	69db      	ldr	r3, [r3, #28]
 800e43e:	68ba      	ldr	r2, [r7, #8]
 800e440:	1ad3      	subs	r3, r2, r3
 800e442:	3302      	adds	r3, #2
 800e444:	e000      	b.n	800e448 <fill_last_frag+0x32>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	461a      	mov	r2, r3
 800e44a:	f7ff fd97 	bl	800df7c <put_fat>
 800e44e:	4603      	mov	r3, r0
 800e450:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800e452:	7dfb      	ldrb	r3, [r7, #23]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d001      	beq.n	800e45c <fill_last_frag+0x46>
 800e458:	7dfb      	ldrb	r3, [r7, #23]
 800e45a:	e009      	b.n	800e470 <fill_last_frag+0x5a>
		obj->n_frag--;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	69db      	ldr	r3, [r3, #28]
 800e460:	1e5a      	subs	r2, r3, #1
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	69db      	ldr	r3, [r3, #28]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1da      	bne.n	800e424 <fill_last_frag+0xe>
	}
	return FR_OK;
 800e46e:	2300      	movs	r3, #0
}
 800e470:	4618      	mov	r0, r3
 800e472:	3718      	adds	r7, #24
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b08a      	sub	sp, #40	; 0x28
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e484:	2300      	movs	r3, #0
 800e486:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	627b      	str	r3, [r7, #36]	; 0x24
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d904      	bls.n	800e4a6 <remove_chain+0x2e>
 800e49c:	69bb      	ldr	r3, [r7, #24]
 800e49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a0:	68ba      	ldr	r2, [r7, #8]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d301      	bcc.n	800e4aa <remove_chain+0x32>
 800e4a6:	2302      	movs	r3, #2
 800e4a8:	e096      	b.n	800e5d8 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d014      	beq.n	800e4da <remove_chain+0x62>
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	2b04      	cmp	r3, #4
 800e4b6:	d103      	bne.n	800e4c0 <remove_chain+0x48>
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	79db      	ldrb	r3, [r3, #7]
 800e4bc:	2b02      	cmp	r3, #2
 800e4be:	d00c      	beq.n	800e4da <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e4c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c4:	6879      	ldr	r1, [r7, #4]
 800e4c6:	69b8      	ldr	r0, [r7, #24]
 800e4c8:	f7ff fd58 	bl	800df7c <put_fat>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e4d0:	7ffb      	ldrb	r3, [r7, #31]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d001      	beq.n	800e4da <remove_chain+0x62>
 800e4d6:	7ffb      	ldrb	r3, [r7, #31]
 800e4d8:	e07e      	b.n	800e5d8 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e4da:	68b9      	ldr	r1, [r7, #8]
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	f7ff fbf9 	bl	800dcd4 <get_fat>
 800e4e2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d055      	beq.n	800e596 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d101      	bne.n	800e4f4 <remove_chain+0x7c>
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	e071      	b.n	800e5d8 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4fa:	d101      	bne.n	800e500 <remove_chain+0x88>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e06b      	b.n	800e5d8 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	2b04      	cmp	r3, #4
 800e506:	d00b      	beq.n	800e520 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e508:	2200      	movs	r2, #0
 800e50a:	68b9      	ldr	r1, [r7, #8]
 800e50c:	69b8      	ldr	r0, [r7, #24]
 800e50e:	f7ff fd35 	bl	800df7c <put_fat>
 800e512:	4603      	mov	r3, r0
 800e514:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e516:	7ffb      	ldrb	r3, [r7, #31]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <remove_chain+0xa8>
 800e51c:	7ffb      	ldrb	r3, [r7, #31]
 800e51e:	e05b      	b.n	800e5d8 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	6a1a      	ldr	r2, [r3, #32]
 800e524:	69bb      	ldr	r3, [r7, #24]
 800e526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e528:	3b02      	subs	r3, #2
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d20b      	bcs.n	800e546 <remove_chain+0xce>
			fs->free_clst++;
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	6a1b      	ldr	r3, [r3, #32]
 800e532:	1c5a      	adds	r2, r3, #1
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	791b      	ldrb	r3, [r3, #4]
 800e53c:	f043 0301 	orr.w	r3, r3, #1
 800e540:	b2da      	uxtb	r2, r3
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800e546:	6a3b      	ldr	r3, [r7, #32]
 800e548:	3301      	adds	r3, #1
 800e54a:	697a      	ldr	r2, [r7, #20]
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d102      	bne.n	800e556 <remove_chain+0xde>
			ecl = nxt;
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	623b      	str	r3, [r7, #32]
 800e554:	e017      	b.n	800e586 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	2b04      	cmp	r3, #4
 800e55c:	d10f      	bne.n	800e57e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800e55e:	6a3a      	ldr	r2, [r7, #32]
 800e560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e562:	1ad3      	subs	r3, r2, r3
 800e564:	1c5a      	adds	r2, r3, #1
 800e566:	2300      	movs	r3, #0
 800e568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e56a:	69b8      	ldr	r0, [r7, #24]
 800e56c:	f7ff feaf 	bl	800e2ce <change_bitmap>
 800e570:	4603      	mov	r3, r0
 800e572:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800e574:	7ffb      	ldrb	r3, [r7, #31]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d001      	beq.n	800e57e <remove_chain+0x106>
 800e57a:	7ffb      	ldrb	r3, [r7, #31]
 800e57c:	e02c      	b.n	800e5d8 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	623b      	str	r3, [r7, #32]
 800e582:	6a3b      	ldr	r3, [r7, #32]
 800e584:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e58e:	68ba      	ldr	r2, [r7, #8]
 800e590:	429a      	cmp	r2, r3
 800e592:	d3a2      	bcc.n	800e4da <remove_chain+0x62>
 800e594:	e000      	b.n	800e598 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800e596:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800e598:	69bb      	ldr	r3, [r7, #24]
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	2b04      	cmp	r3, #4
 800e59e:	d11a      	bne.n	800e5d6 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d103      	bne.n	800e5ae <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	71da      	strb	r2, [r3, #7]
 800e5ac:	e013      	b.n	800e5d6 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	79db      	ldrb	r3, [r3, #7]
 800e5b2:	2b03      	cmp	r3, #3
 800e5b4:	d10f      	bne.n	800e5d6 <remove_chain+0x15e>
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	689b      	ldr	r3, [r3, #8]
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d30a      	bcc.n	800e5d6 <remove_chain+0x15e>
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	689a      	ldr	r2, [r3, #8]
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	699b      	ldr	r3, [r3, #24]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d802      	bhi.n	800e5d6 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2202      	movs	r2, #2
 800e5d4:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800e5d6:	2300      	movs	r3, #0
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3728      	adds	r7, #40	; 0x28
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b088      	sub	sp, #32
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d10d      	bne.n	800e612 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	69db      	ldr	r3, [r3, #28]
 800e5fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d004      	beq.n	800e60c <create_chain+0x2c>
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e606:	69ba      	ldr	r2, [r7, #24]
 800e608:	429a      	cmp	r2, r3
 800e60a:	d31b      	bcc.n	800e644 <create_chain+0x64>
 800e60c:	2301      	movs	r3, #1
 800e60e:	61bb      	str	r3, [r7, #24]
 800e610:	e018      	b.n	800e644 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e612:	6839      	ldr	r1, [r7, #0]
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f7ff fb5d 	bl	800dcd4 <get_fat>
 800e61a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d801      	bhi.n	800e626 <create_chain+0x46>
 800e622:	2301      	movs	r3, #1
 800e624:	e0d9      	b.n	800e7da <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e62c:	d101      	bne.n	800e632 <create_chain+0x52>
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	e0d3      	b.n	800e7da <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e636:	68fa      	ldr	r2, [r7, #12]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d201      	bcs.n	800e640 <create_chain+0x60>
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	e0cc      	b.n	800e7da <create_chain+0x1fa>
		scl = clst;
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	2b04      	cmp	r3, #4
 800e64a:	d164      	bne.n	800e716 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800e64c:	2201      	movs	r2, #1
 800e64e:	69b9      	ldr	r1, [r7, #24]
 800e650:	6938      	ldr	r0, [r7, #16]
 800e652:	f7ff fdb5 	bl	800e1c0 <find_bitmap>
 800e656:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d003      	beq.n	800e666 <create_chain+0x86>
 800e65e:	69fb      	ldr	r3, [r7, #28]
 800e660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e664:	d101      	bne.n	800e66a <create_chain+0x8a>
 800e666:	69fb      	ldr	r3, [r7, #28]
 800e668:	e0b7      	b.n	800e7da <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800e66a:	2301      	movs	r3, #1
 800e66c:	2201      	movs	r2, #1
 800e66e:	69f9      	ldr	r1, [r7, #28]
 800e670:	6938      	ldr	r0, [r7, #16]
 800e672:	f7ff fe2c 	bl	800e2ce <change_bitmap>
 800e676:	4603      	mov	r3, r0
 800e678:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800e67a:	7dfb      	ldrb	r3, [r7, #23]
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d101      	bne.n	800e684 <create_chain+0xa4>
 800e680:	2301      	movs	r3, #1
 800e682:	e0aa      	b.n	800e7da <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800e684:	7dfb      	ldrb	r3, [r7, #23]
 800e686:	2b01      	cmp	r3, #1
 800e688:	d102      	bne.n	800e690 <create_chain+0xb0>
 800e68a:	f04f 33ff 	mov.w	r3, #4294967295
 800e68e:	e0a4      	b.n	800e7da <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d103      	bne.n	800e69e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2202      	movs	r2, #2
 800e69a:	71da      	strb	r2, [r3, #7]
 800e69c:	e011      	b.n	800e6c2 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	79db      	ldrb	r3, [r3, #7]
 800e6a2:	2b02      	cmp	r3, #2
 800e6a4:	d10d      	bne.n	800e6c2 <create_chain+0xe2>
 800e6a6:	69bb      	ldr	r3, [r7, #24]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	69fa      	ldr	r2, [r7, #28]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d008      	beq.n	800e6c2 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	689b      	ldr	r3, [r3, #8]
 800e6b4:	69ba      	ldr	r2, [r7, #24]
 800e6b6:	1ad2      	subs	r2, r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2203      	movs	r2, #3
 800e6c0:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	79db      	ldrb	r3, [r3, #7]
 800e6c6:	2b02      	cmp	r3, #2
 800e6c8:	d064      	beq.n	800e794 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	69fa      	ldr	r2, [r7, #28]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d10b      	bne.n	800e6ec <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	69db      	ldr	r3, [r3, #28]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d003      	beq.n	800e6e4 <create_chain+0x104>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	69db      	ldr	r3, [r3, #28]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	e000      	b.n	800e6e6 <create_chain+0x106>
 800e6e4:	2302      	movs	r3, #2
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	61d3      	str	r3, [r2, #28]
 800e6ea:	e053      	b.n	800e794 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	69db      	ldr	r3, [r3, #28]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d102      	bne.n	800e6fa <create_chain+0x11a>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800e6fa:	69fa      	ldr	r2, [r7, #28]
 800e6fc:	6839      	ldr	r1, [r7, #0]
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f7ff fe89 	bl	800e416 <fill_last_frag>
 800e704:	4603      	mov	r3, r0
 800e706:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800e708:	7dfb      	ldrb	r3, [r7, #23]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d142      	bne.n	800e794 <create_chain+0x1b4>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2201      	movs	r2, #1
 800e712:	61da      	str	r2, [r3, #28]
 800e714:	e03e      	b.n	800e794 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	3301      	adds	r3, #1
 800e71e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e724:	69fa      	ldr	r2, [r7, #28]
 800e726:	429a      	cmp	r2, r3
 800e728:	d307      	bcc.n	800e73a <create_chain+0x15a>
				ncl = 2;
 800e72a:	2302      	movs	r3, #2
 800e72c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e72e:	69fa      	ldr	r2, [r7, #28]
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	429a      	cmp	r2, r3
 800e734:	d901      	bls.n	800e73a <create_chain+0x15a>
 800e736:	2300      	movs	r3, #0
 800e738:	e04f      	b.n	800e7da <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e73a:	69f9      	ldr	r1, [r7, #28]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7ff fac9 	bl	800dcd4 <get_fat>
 800e742:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d00e      	beq.n	800e768 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d003      	beq.n	800e758 <create_chain+0x178>
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e756:	d101      	bne.n	800e75c <create_chain+0x17c>
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	e03e      	b.n	800e7da <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800e75c:	69fa      	ldr	r2, [r7, #28]
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	429a      	cmp	r2, r3
 800e762:	d1da      	bne.n	800e71a <create_chain+0x13a>
 800e764:	2300      	movs	r3, #0
 800e766:	e038      	b.n	800e7da <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800e768:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e76a:	f04f 32ff 	mov.w	r2, #4294967295
 800e76e:	69f9      	ldr	r1, [r7, #28]
 800e770:	6938      	ldr	r0, [r7, #16]
 800e772:	f7ff fc03 	bl	800df7c <put_fat>
 800e776:	4603      	mov	r3, r0
 800e778:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e77a:	7dfb      	ldrb	r3, [r7, #23]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d109      	bne.n	800e794 <create_chain+0x1b4>
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d006      	beq.n	800e794 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e786:	69fa      	ldr	r2, [r7, #28]
 800e788:	6839      	ldr	r1, [r7, #0]
 800e78a:	6938      	ldr	r0, [r7, #16]
 800e78c:	f7ff fbf6 	bl	800df7c <put_fat>
 800e790:	4603      	mov	r3, r0
 800e792:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e794:	7dfb      	ldrb	r3, [r7, #23]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d116      	bne.n	800e7c8 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	69fa      	ldr	r2, [r7, #28]
 800e79e:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	6a1a      	ldr	r2, [r3, #32]
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a8:	3b02      	subs	r3, #2
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d804      	bhi.n	800e7b8 <create_chain+0x1d8>
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	6a1b      	ldr	r3, [r3, #32]
 800e7b2:	1e5a      	subs	r2, r3, #1
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	791b      	ldrb	r3, [r3, #4]
 800e7bc:	f043 0301 	orr.w	r3, r3, #1
 800e7c0:	b2da      	uxtb	r2, r3
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	711a      	strb	r2, [r3, #4]
 800e7c6:	e007      	b.n	800e7d8 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e7c8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d102      	bne.n	800e7d4 <create_chain+0x1f4>
 800e7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e7d2:	e000      	b.n	800e7d6 <create_chain+0x1f6>
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e7d8:	69fb      	ldr	r3, [r7, #28]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3720      	adds	r7, #32
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e7e2:	b590      	push	{r4, r7, lr}
 800e7e4:	b089      	sub	sp, #36	; 0x24
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	60f8      	str	r0, [r7, #12]
 800e7ea:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7f8:	3304      	adds	r3, #4
 800e7fa:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	899b      	ldrh	r3, [r3, #12]
 800e800:	b29b      	uxth	r3, r3
 800e802:	f04f 0400 	mov.w	r4, #0
 800e806:	461a      	mov	r2, r3
 800e808:	4623      	mov	r3, r4
 800e80a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e80e:	f7f1 fd17 	bl	8000240 <__aeabi_uldivmod>
 800e812:	4603      	mov	r3, r0
 800e814:	460c      	mov	r4, r1
 800e816:	4618      	mov	r0, r3
 800e818:	4621      	mov	r1, r4
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	895b      	ldrh	r3, [r3, #10]
 800e81e:	b29b      	uxth	r3, r3
 800e820:	f04f 0400 	mov.w	r4, #0
 800e824:	461a      	mov	r2, r3
 800e826:	4623      	mov	r3, r4
 800e828:	f7f1 fd0a 	bl	8000240 <__aeabi_uldivmod>
 800e82c:	4603      	mov	r3, r0
 800e82e:	460c      	mov	r4, r1
 800e830:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	1d1a      	adds	r2, r3, #4
 800e836:	61ba      	str	r2, [r7, #24]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d101      	bne.n	800e846 <clmt_clust+0x64>
 800e842:	2300      	movs	r3, #0
 800e844:	e010      	b.n	800e868 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 800e846:	69fa      	ldr	r2, [r7, #28]
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d307      	bcc.n	800e85e <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 800e84e:	69fa      	ldr	r2, [r7, #28]
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	1ad3      	subs	r3, r2, r3
 800e854:	61fb      	str	r3, [r7, #28]
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	3304      	adds	r3, #4
 800e85a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e85c:	e7e9      	b.n	800e832 <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 800e85e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	4413      	add	r3, r2
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3724      	adds	r7, #36	; 0x24
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd90      	pop	{r4, r7, pc}

0800e870 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b086      	sub	sp, #24
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	2b04      	cmp	r3, #4
 800e886:	d102      	bne.n	800e88e <dir_sdi+0x1e>
 800e888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e88c:	e001      	b.n	800e892 <dir_sdi+0x22>
 800e88e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	429a      	cmp	r2, r3
 800e896:	d904      	bls.n	800e8a2 <dir_sdi+0x32>
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	f003 031f 	and.w	r3, r3, #31
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d001      	beq.n	800e8a6 <dir_sdi+0x36>
		return FR_INT_ERR;
 800e8a2:	2302      	movs	r3, #2
 800e8a4:	e074      	b.n	800e990 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	683a      	ldr	r2, [r7, #0]
 800e8aa:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	689b      	ldr	r3, [r3, #8]
 800e8b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d109      	bne.n	800e8cc <dir_sdi+0x5c>
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d905      	bls.n	800e8cc <dir_sdi+0x5c>
		clst = fs->dirbase;
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d10c      	bne.n	800e8ec <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	095b      	lsrs	r3, r3, #5
 800e8d6:	693a      	ldr	r2, [r7, #16]
 800e8d8:	8912      	ldrh	r2, [r2, #8]
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d301      	bcc.n	800e8e2 <dir_sdi+0x72>
 800e8de:	2302      	movs	r3, #2
 800e8e0:	e056      	b.n	800e990 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	639a      	str	r2, [r3, #56]	; 0x38
 800e8ea:	e02d      	b.n	800e948 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	895b      	ldrh	r3, [r3, #10]
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	899b      	ldrh	r3, [r3, #12]
 800e8f6:	fb03 f302 	mul.w	r3, r3, r2
 800e8fa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e8fc:	e019      	b.n	800e932 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6979      	ldr	r1, [r7, #20]
 800e902:	4618      	mov	r0, r3
 800e904:	f7ff f9e6 	bl	800dcd4 <get_fat>
 800e908:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e910:	d101      	bne.n	800e916 <dir_sdi+0xa6>
 800e912:	2301      	movs	r3, #1
 800e914:	e03c      	b.n	800e990 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d904      	bls.n	800e926 <dir_sdi+0xb6>
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e920:	697a      	ldr	r2, [r7, #20]
 800e922:	429a      	cmp	r2, r3
 800e924:	d301      	bcc.n	800e92a <dir_sdi+0xba>
 800e926:	2302      	movs	r3, #2
 800e928:	e032      	b.n	800e990 <dir_sdi+0x120>
			ofs -= csz;
 800e92a:	683a      	ldr	r2, [r7, #0]
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e932:	683a      	ldr	r2, [r7, #0]
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	429a      	cmp	r2, r3
 800e938:	d2e1      	bcs.n	800e8fe <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800e93a:	6979      	ldr	r1, [r7, #20]
 800e93c:	6938      	ldr	r0, [r7, #16]
 800e93e:	f7ff f9a9 	bl	800dc94 <clust2sect>
 800e942:	4602      	mov	r2, r0
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	697a      	ldr	r2, [r7, #20]
 800e94c:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <dir_sdi+0xea>
 800e956:	2302      	movs	r3, #2
 800e958:	e01a      	b.n	800e990 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	899b      	ldrh	r3, [r3, #12]
 800e962:	4619      	mov	r1, r3
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	fbb3 f3f1 	udiv	r3, r3, r1
 800e96a:	441a      	add	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	899b      	ldrh	r3, [r3, #12]
 800e97a:	461a      	mov	r2, r3
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e982:	fb02 f200 	mul.w	r2, r2, r0
 800e986:	1a9b      	subs	r3, r3, r2
 800e988:	18ca      	adds	r2, r1, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800e98e:	2300      	movs	r3, #0
}
 800e990:	4618      	mov	r0, r3
 800e992:	3718      	adds	r7, #24
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b086      	sub	sp, #24
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ac:	3320      	adds	r3, #32
 800e9ae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00b      	beq.n	800e9d0 <dir_next+0x38>
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	2b04      	cmp	r3, #4
 800e9be:	d102      	bne.n	800e9c6 <dir_next+0x2e>
 800e9c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9c4:	e001      	b.n	800e9ca <dir_next+0x32>
 800e9c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d801      	bhi.n	800e9d4 <dir_next+0x3c>
 800e9d0:	2304      	movs	r3, #4
 800e9d2:	e0c3      	b.n	800eb5c <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	899b      	ldrh	r3, [r3, #12]
 800e9d8:	461a      	mov	r2, r3
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e9e0:	fb02 f201 	mul.w	r2, r2, r1
 800e9e4:	1a9b      	subs	r3, r3, r2
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	f040 80a5 	bne.w	800eb36 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9f0:	1c5a      	adds	r2, r3, #1
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d10b      	bne.n	800ea16 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	095b      	lsrs	r3, r3, #5
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	8912      	ldrh	r2, [r2, #8]
 800ea06:	4293      	cmp	r3, r2
 800ea08:	f0c0 8095 	bcc.w	800eb36 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	639a      	str	r2, [r3, #56]	; 0x38
 800ea12:	2304      	movs	r3, #4
 800ea14:	e0a2      	b.n	800eb5c <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	899b      	ldrh	r3, [r3, #12]
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	8952      	ldrh	r2, [r2, #10]
 800ea26:	3a01      	subs	r2, #1
 800ea28:	4013      	ands	r3, r2
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f040 8083 	bne.w	800eb36 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ea30:	687a      	ldr	r2, [r7, #4]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea36:	4619      	mov	r1, r3
 800ea38:	4610      	mov	r0, r2
 800ea3a:	f7ff f94b 	bl	800dcd4 <get_fat>
 800ea3e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d801      	bhi.n	800ea4a <dir_next+0xb2>
 800ea46:	2302      	movs	r3, #2
 800ea48:	e088      	b.n	800eb5c <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea50:	d101      	bne.n	800ea56 <dir_next+0xbe>
 800ea52:	2301      	movs	r3, #1
 800ea54:	e082      	b.n	800eb5c <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea5a:	697a      	ldr	r2, [r7, #20]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d360      	bcc.n	800eb22 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d104      	bne.n	800ea70 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	639a      	str	r2, [r3, #56]	; 0x38
 800ea6c:	2304      	movs	r3, #4
 800ea6e:	e075      	b.n	800eb5c <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea76:	4619      	mov	r1, r3
 800ea78:	4610      	mov	r0, r2
 800ea7a:	f7ff fdb1 	bl	800e5e0 <create_chain>
 800ea7e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d101      	bne.n	800ea8a <dir_next+0xf2>
 800ea86:	2307      	movs	r3, #7
 800ea88:	e068      	b.n	800eb5c <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d101      	bne.n	800ea94 <dir_next+0xfc>
 800ea90:	2302      	movs	r3, #2
 800ea92:	e063      	b.n	800eb5c <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea9a:	d101      	bne.n	800eaa0 <dir_next+0x108>
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	e05d      	b.n	800eb5c <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	79db      	ldrb	r3, [r3, #7]
 800eaa4:	f043 0304 	orr.w	r3, r3, #4
 800eaa8:	b2da      	uxtb	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800eaae:	68f8      	ldr	r0, [r7, #12]
 800eab0:	f7ff f80e 	bl	800dad0 <sync_window>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d001      	beq.n	800eabe <dir_next+0x126>
 800eaba:	2301      	movs	r3, #1
 800eabc:	e04e      	b.n	800eb5c <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	899b      	ldrh	r3, [r3, #12]
 800eac8:	461a      	mov	r2, r3
 800eaca:	2100      	movs	r1, #0
 800eacc:	f7fe fe07 	bl	800d6de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ead0:	2300      	movs	r3, #0
 800ead2:	613b      	str	r3, [r7, #16]
 800ead4:	6979      	ldr	r1, [r7, #20]
 800ead6:	68f8      	ldr	r0, [r7, #12]
 800ead8:	f7ff f8dc 	bl	800dc94 <clust2sect>
 800eadc:	4602      	mov	r2, r0
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	63da      	str	r2, [r3, #60]	; 0x3c
 800eae2:	e012      	b.n	800eb0a <dir_next+0x172>
						fs->wflag = 1;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2201      	movs	r2, #1
 800eae8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800eaea:	68f8      	ldr	r0, [r7, #12]
 800eaec:	f7fe fff0 	bl	800dad0 <sync_window>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d001      	beq.n	800eafa <dir_next+0x162>
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	e030      	b.n	800eb5c <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	3301      	adds	r3, #1
 800eafe:	613b      	str	r3, [r7, #16]
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb04:	1c5a      	adds	r2, r3, #1
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	63da      	str	r2, [r3, #60]	; 0x3c
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	895b      	ldrh	r3, [r3, #10]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d3e6      	bcc.n	800eae4 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	1ad2      	subs	r2, r2, r3
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	63da      	str	r2, [r3, #60]	; 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	697a      	ldr	r2, [r7, #20]
 800eb26:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800eb28:	6979      	ldr	r1, [r7, #20]
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f7ff f8b2 	bl	800dc94 <clust2sect>
 800eb30:	4602      	mov	r2, r0
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	68ba      	ldr	r2, [r7, #8]
 800eb3a:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	899b      	ldrh	r3, [r3, #12]
 800eb46:	461a      	mov	r2, r3
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb4e:	fb02 f200 	mul.w	r2, r2, r0
 800eb52:	1a9b      	subs	r3, r3, r2
 800eb54:	18ca      	adds	r2, r1, r3
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800eb5a:	2300      	movs	r3, #0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3718      	adds	r7, #24
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b086      	sub	sp, #24
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800eb74:	2100      	movs	r1, #0
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7ff fe7a 	bl	800e870 <dir_sdi>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb80:	7dfb      	ldrb	r3, [r7, #23]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d140      	bne.n	800ec08 <dir_alloc+0xa4>
		n = 0;
 800eb86:	2300      	movs	r3, #0
 800eb88:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb8e:	4619      	mov	r1, r3
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f7fe ffe1 	bl	800db58 <move_window>
 800eb96:	4603      	mov	r3, r0
 800eb98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eb9a:	7dfb      	ldrb	r3, [r7, #23]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d132      	bne.n	800ec06 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	2b04      	cmp	r3, #4
 800eba6:	d108      	bne.n	800ebba <dir_alloc+0x56>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	b25b      	sxtb	r3, r3
 800ebb0:	43db      	mvns	r3, r3
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	09db      	lsrs	r3, r3, #7
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	e00f      	b.n	800ebda <dir_alloc+0x76>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	2be5      	cmp	r3, #229	; 0xe5
 800ebc2:	d004      	beq.n	800ebce <dir_alloc+0x6a>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d101      	bne.n	800ebd2 <dir_alloc+0x6e>
 800ebce:	2301      	movs	r3, #1
 800ebd0:	e000      	b.n	800ebd4 <dir_alloc+0x70>
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	f003 0301 	and.w	r3, r3, #1
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d007      	beq.n	800ebee <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	613b      	str	r3, [r7, #16]
 800ebe4:	693a      	ldr	r2, [r7, #16]
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d102      	bne.n	800ebf2 <dir_alloc+0x8e>
 800ebec:	e00c      	b.n	800ec08 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ebee:	2300      	movs	r3, #0
 800ebf0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ebf2:	2101      	movs	r1, #1
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f7ff fecf 	bl	800e998 <dir_next>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ebfe:	7dfb      	ldrb	r3, [r7, #23]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d0c2      	beq.n	800eb8a <dir_alloc+0x26>
 800ec04:	e000      	b.n	800ec08 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800ec06:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ec08:	7dfb      	ldrb	r3, [r7, #23]
 800ec0a:	2b04      	cmp	r3, #4
 800ec0c:	d101      	bne.n	800ec12 <dir_alloc+0xae>
 800ec0e:	2307      	movs	r3, #7
 800ec10:	75fb      	strb	r3, [r7, #23]
	return res;
 800ec12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3718      	adds	r7, #24
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	331a      	adds	r3, #26
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fe fb70 	bl	800d310 <ld_word>
 800ec30:	4603      	mov	r3, r0
 800ec32:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	2b03      	cmp	r3, #3
 800ec3a:	d109      	bne.n	800ec50 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	3314      	adds	r3, #20
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fe fb65 	bl	800d310 <ld_word>
 800ec46:	4603      	mov	r3, r0
 800ec48:	041b      	lsls	r3, r3, #16
 800ec4a:	68fa      	ldr	r2, [r7, #12]
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ec50:	68fb      	ldr	r3, [r7, #12]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b084      	sub	sp, #16
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	60f8      	str	r0, [r7, #12]
 800ec62:	60b9      	str	r1, [r7, #8]
 800ec64:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	331a      	adds	r3, #26
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	b292      	uxth	r2, r2
 800ec6e:	4611      	mov	r1, r2
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7fe fc45 	bl	800d500 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	2b03      	cmp	r3, #3
 800ec7c:	d109      	bne.n	800ec92 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	f103 0214 	add.w	r2, r3, #20
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	0c1b      	lsrs	r3, r3, #16
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	4610      	mov	r0, r2
 800ec8e:	f7fe fc37 	bl	800d500 <st_word>
	}
}
 800ec92:	bf00      	nop
 800ec94:	3710      	adds	r7, #16
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
	...

0800ec9c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ec9c:	b590      	push	{r4, r7, lr}
 800ec9e:	b087      	sub	sp, #28
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	331a      	adds	r3, #26
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fe fb30 	bl	800d310 <ld_word>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d001      	beq.n	800ecba <cmp_lfn+0x1e>
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	e059      	b.n	800ed6e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ecc2:	1e5a      	subs	r2, r3, #1
 800ecc4:	4613      	mov	r3, r2
 800ecc6:	005b      	lsls	r3, r3, #1
 800ecc8:	4413      	add	r3, r2
 800ecca:	009b      	lsls	r3, r3, #2
 800eccc:	4413      	add	r3, r2
 800ecce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	81fb      	strh	r3, [r7, #14]
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	613b      	str	r3, [r7, #16]
 800ecd8:	e033      	b.n	800ed42 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ecda:	4a27      	ldr	r2, [pc, #156]	; (800ed78 <cmp_lfn+0xdc>)
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	4413      	add	r3, r2
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	461a      	mov	r2, r3
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	4413      	add	r3, r2
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fe fb11 	bl	800d310 <ld_word>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ecf2:	89fb      	ldrh	r3, [r7, #14]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d01a      	beq.n	800ed2e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	2bfe      	cmp	r3, #254	; 0xfe
 800ecfc:	d812      	bhi.n	800ed24 <cmp_lfn+0x88>
 800ecfe:	89bb      	ldrh	r3, [r7, #12]
 800ed00:	4618      	mov	r0, r3
 800ed02:	f002 fdb7 	bl	8011874 <ff_wtoupper>
 800ed06:	4603      	mov	r3, r0
 800ed08:	461c      	mov	r4, r3
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	1c5a      	adds	r2, r3, #1
 800ed0e:	617a      	str	r2, [r7, #20]
 800ed10:	005b      	lsls	r3, r3, #1
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	4413      	add	r3, r2
 800ed16:	881b      	ldrh	r3, [r3, #0]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f002 fdab 	bl	8011874 <ff_wtoupper>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	429c      	cmp	r4, r3
 800ed22:	d001      	beq.n	800ed28 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ed24:	2300      	movs	r3, #0
 800ed26:	e022      	b.n	800ed6e <cmp_lfn+0xd2>
			}
			wc = uc;
 800ed28:	89bb      	ldrh	r3, [r7, #12]
 800ed2a:	81fb      	strh	r3, [r7, #14]
 800ed2c:	e006      	b.n	800ed3c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ed2e:	89bb      	ldrh	r3, [r7, #12]
 800ed30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d001      	beq.n	800ed3c <cmp_lfn+0xa0>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	e018      	b.n	800ed6e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	613b      	str	r3, [r7, #16]
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	2b0c      	cmp	r3, #12
 800ed46:	d9c8      	bls.n	800ecda <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d00b      	beq.n	800ed6c <cmp_lfn+0xd0>
 800ed54:	89fb      	ldrh	r3, [r7, #14]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d008      	beq.n	800ed6c <cmp_lfn+0xd0>
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	005b      	lsls	r3, r3, #1
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	4413      	add	r3, r2
 800ed62:	881b      	ldrh	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d001      	beq.n	800ed6c <cmp_lfn+0xd0>
 800ed68:	2300      	movs	r3, #0
 800ed6a:	e000      	b.n	800ed6e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ed6c:	2301      	movs	r3, #1
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	371c      	adds	r7, #28
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd90      	pop	{r4, r7, pc}
 800ed76:	bf00      	nop
 800ed78:	080162e0 	.word	0x080162e0

0800ed7c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b086      	sub	sp, #24
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	331a      	adds	r3, #26
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fe fac0 	bl	800d310 <ld_word>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d001      	beq.n	800ed9a <pick_lfn+0x1e>
 800ed96:	2300      	movs	r3, #0
 800ed98:	e04d      	b.n	800ee36 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eda2:	1e5a      	subs	r2, r3, #1
 800eda4:	4613      	mov	r3, r2
 800eda6:	005b      	lsls	r3, r3, #1
 800eda8:	4413      	add	r3, r2
 800edaa:	009b      	lsls	r3, r3, #2
 800edac:	4413      	add	r3, r2
 800edae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800edb0:	2301      	movs	r3, #1
 800edb2:	81fb      	strh	r3, [r7, #14]
 800edb4:	2300      	movs	r3, #0
 800edb6:	613b      	str	r3, [r7, #16]
 800edb8:	e028      	b.n	800ee0c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800edba:	4a21      	ldr	r2, [pc, #132]	; (800ee40 <pick_lfn+0xc4>)
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	4413      	add	r3, r2
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	461a      	mov	r2, r3
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	4413      	add	r3, r2
 800edc8:	4618      	mov	r0, r3
 800edca:	f7fe faa1 	bl	800d310 <ld_word>
 800edce:	4603      	mov	r3, r0
 800edd0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800edd2:	89fb      	ldrh	r3, [r7, #14]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d00f      	beq.n	800edf8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	2bfe      	cmp	r3, #254	; 0xfe
 800eddc:	d901      	bls.n	800ede2 <pick_lfn+0x66>
 800edde:	2300      	movs	r3, #0
 800ede0:	e029      	b.n	800ee36 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ede2:	89bb      	ldrh	r3, [r7, #12]
 800ede4:	81fb      	strh	r3, [r7, #14]
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	1c5a      	adds	r2, r3, #1
 800edea:	617a      	str	r2, [r7, #20]
 800edec:	005b      	lsls	r3, r3, #1
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	4413      	add	r3, r2
 800edf2:	89fa      	ldrh	r2, [r7, #14]
 800edf4:	801a      	strh	r2, [r3, #0]
 800edf6:	e006      	b.n	800ee06 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800edf8:	89bb      	ldrh	r3, [r7, #12]
 800edfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d001      	beq.n	800ee06 <pick_lfn+0x8a>
 800ee02:	2300      	movs	r3, #0
 800ee04:	e017      	b.n	800ee36 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	613b      	str	r3, [r7, #16]
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	2b0c      	cmp	r3, #12
 800ee10:	d9d3      	bls.n	800edba <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d00a      	beq.n	800ee34 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	2bfe      	cmp	r3, #254	; 0xfe
 800ee22:	d901      	bls.n	800ee28 <pick_lfn+0xac>
 800ee24:	2300      	movs	r3, #0
 800ee26:	e006      	b.n	800ee36 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	005b      	lsls	r3, r3, #1
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	4413      	add	r3, r2
 800ee30:	2200      	movs	r2, #0
 800ee32:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ee34:	2301      	movs	r3, #1
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3718      	adds	r7, #24
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	080162e0 	.word	0x080162e0

0800ee44 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b088      	sub	sp, #32
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	60f8      	str	r0, [r7, #12]
 800ee4c:	60b9      	str	r1, [r7, #8]
 800ee4e:	4611      	mov	r1, r2
 800ee50:	461a      	mov	r2, r3
 800ee52:	460b      	mov	r3, r1
 800ee54:	71fb      	strb	r3, [r7, #7]
 800ee56:	4613      	mov	r3, r2
 800ee58:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	330d      	adds	r3, #13
 800ee5e:	79ba      	ldrb	r2, [r7, #6]
 800ee60:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	330b      	adds	r3, #11
 800ee66:	220f      	movs	r2, #15
 800ee68:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	330c      	adds	r3, #12
 800ee6e:	2200      	movs	r2, #0
 800ee70:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	331a      	adds	r3, #26
 800ee76:	2100      	movs	r1, #0
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7fe fb41 	bl	800d500 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ee7e:	79fb      	ldrb	r3, [r7, #7]
 800ee80:	1e5a      	subs	r2, r3, #1
 800ee82:	4613      	mov	r3, r2
 800ee84:	005b      	lsls	r3, r3, #1
 800ee86:	4413      	add	r3, r2
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	4413      	add	r3, r2
 800ee8c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	82fb      	strh	r3, [r7, #22]
 800ee92:	2300      	movs	r3, #0
 800ee94:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ee96:	8afb      	ldrh	r3, [r7, #22]
 800ee98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d007      	beq.n	800eeb0 <put_lfn+0x6c>
 800eea0:	69fb      	ldr	r3, [r7, #28]
 800eea2:	1c5a      	adds	r2, r3, #1
 800eea4:	61fa      	str	r2, [r7, #28]
 800eea6:	005b      	lsls	r3, r3, #1
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	4413      	add	r3, r2
 800eeac:	881b      	ldrh	r3, [r3, #0]
 800eeae:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800eeb0:	4a17      	ldr	r2, [pc, #92]	; (800ef10 <put_lfn+0xcc>)
 800eeb2:	69bb      	ldr	r3, [r7, #24]
 800eeb4:	4413      	add	r3, r2
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	461a      	mov	r2, r3
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	4413      	add	r3, r2
 800eebe:	8afa      	ldrh	r2, [r7, #22]
 800eec0:	4611      	mov	r1, r2
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fe fb1c 	bl	800d500 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800eec8:	8afb      	ldrh	r3, [r7, #22]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d102      	bne.n	800eed4 <put_lfn+0x90>
 800eece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eed2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800eed4:	69bb      	ldr	r3, [r7, #24]
 800eed6:	3301      	adds	r3, #1
 800eed8:	61bb      	str	r3, [r7, #24]
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	2b0c      	cmp	r3, #12
 800eede:	d9da      	bls.n	800ee96 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800eee0:	8afb      	ldrh	r3, [r7, #22]
 800eee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d006      	beq.n	800eef8 <put_lfn+0xb4>
 800eeea:	69fb      	ldr	r3, [r7, #28]
 800eeec:	005b      	lsls	r3, r3, #1
 800eeee:	68fa      	ldr	r2, [r7, #12]
 800eef0:	4413      	add	r3, r2
 800eef2:	881b      	ldrh	r3, [r3, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d103      	bne.n	800ef00 <put_lfn+0xbc>
 800eef8:	79fb      	ldrb	r3, [r7, #7]
 800eefa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eefe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	79fa      	ldrb	r2, [r7, #7]
 800ef04:	701a      	strb	r2, [r3, #0]
}
 800ef06:	bf00      	nop
 800ef08:	3720      	adds	r7, #32
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	080162e0 	.word	0x080162e0

0800ef14 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b08c      	sub	sp, #48	; 0x30
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]
 800ef20:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ef22:	220b      	movs	r2, #11
 800ef24:	68b9      	ldr	r1, [r7, #8]
 800ef26:	68f8      	ldr	r0, [r7, #12]
 800ef28:	f7fe fbb8 	bl	800d69c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	2b05      	cmp	r3, #5
 800ef30:	d929      	bls.n	800ef86 <gen_numname+0x72>
		sr = seq;
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ef36:	e020      	b.n	800ef7a <gen_numname+0x66>
			wc = *lfn++;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	1c9a      	adds	r2, r3, #2
 800ef3c:	607a      	str	r2, [r7, #4]
 800ef3e:	881b      	ldrh	r3, [r3, #0]
 800ef40:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ef42:	2300      	movs	r3, #0
 800ef44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef46:	e015      	b.n	800ef74 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	005a      	lsls	r2, r3, #1
 800ef4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef4e:	f003 0301 	and.w	r3, r3, #1
 800ef52:	4413      	add	r3, r2
 800ef54:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ef56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef58:	085b      	lsrs	r3, r3, #1
 800ef5a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d003      	beq.n	800ef6e <gen_numname+0x5a>
 800ef66:	69fa      	ldr	r2, [r7, #28]
 800ef68:	4b31      	ldr	r3, [pc, #196]	; (800f030 <gen_numname+0x11c>)
 800ef6a:	4053      	eors	r3, r2
 800ef6c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ef6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef70:	3301      	adds	r3, #1
 800ef72:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef76:	2b0f      	cmp	r3, #15
 800ef78:	d9e6      	bls.n	800ef48 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	881b      	ldrh	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d1da      	bne.n	800ef38 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ef86:	2307      	movs	r3, #7
 800ef88:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	b2db      	uxtb	r3, r3
 800ef8e:	f003 030f 	and.w	r3, r3, #15
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	3330      	adds	r3, #48	; 0x30
 800ef96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ef9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef9e:	2b39      	cmp	r3, #57	; 0x39
 800efa0:	d904      	bls.n	800efac <gen_numname+0x98>
 800efa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800efa6:	3307      	adds	r3, #7
 800efa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800efac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efae:	1e5a      	subs	r2, r3, #1
 800efb0:	62ba      	str	r2, [r7, #40]	; 0x28
 800efb2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800efb6:	4413      	add	r3, r2
 800efb8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800efbc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	091b      	lsrs	r3, r3, #4
 800efc4:	603b      	str	r3, [r7, #0]
	} while (seq);
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d1de      	bne.n	800ef8a <gen_numname+0x76>
	ns[i] = '~';
 800efcc:	f107 0214 	add.w	r2, r7, #20
 800efd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd2:	4413      	add	r3, r2
 800efd4:	227e      	movs	r2, #126	; 0x7e
 800efd6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800efd8:	2300      	movs	r3, #0
 800efda:	627b      	str	r3, [r7, #36]	; 0x24
 800efdc:	e002      	b.n	800efe4 <gen_numname+0xd0>
 800efde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe0:	3301      	adds	r3, #1
 800efe2:	627b      	str	r3, [r7, #36]	; 0x24
 800efe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe8:	429a      	cmp	r2, r3
 800efea:	d205      	bcs.n	800eff8 <gen_numname+0xe4>
 800efec:	68fa      	ldr	r2, [r7, #12]
 800efee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff0:	4413      	add	r3, r2
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	2b20      	cmp	r3, #32
 800eff6:	d1f2      	bne.n	800efde <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effa:	2b07      	cmp	r3, #7
 800effc:	d808      	bhi.n	800f010 <gen_numname+0xfc>
 800effe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f000:	1c5a      	adds	r2, r3, #1
 800f002:	62ba      	str	r2, [r7, #40]	; 0x28
 800f004:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f008:	4413      	add	r3, r2
 800f00a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f00e:	e000      	b.n	800f012 <gen_numname+0xfe>
 800f010:	2120      	movs	r1, #32
 800f012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f014:	1c5a      	adds	r2, r3, #1
 800f016:	627a      	str	r2, [r7, #36]	; 0x24
 800f018:	68fa      	ldr	r2, [r7, #12]
 800f01a:	4413      	add	r3, r2
 800f01c:	460a      	mov	r2, r1
 800f01e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f022:	2b07      	cmp	r3, #7
 800f024:	d9e8      	bls.n	800eff8 <gen_numname+0xe4>
}
 800f026:	bf00      	nop
 800f028:	3730      	adds	r7, #48	; 0x30
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	00011021 	.word	0x00011021

0800f034 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f03c:	2300      	movs	r3, #0
 800f03e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f040:	230b      	movs	r3, #11
 800f042:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f044:	7bfb      	ldrb	r3, [r7, #15]
 800f046:	b2da      	uxtb	r2, r3
 800f048:	0852      	lsrs	r2, r2, #1
 800f04a:	01db      	lsls	r3, r3, #7
 800f04c:	4313      	orrs	r3, r2
 800f04e:	b2da      	uxtb	r2, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	1c59      	adds	r1, r3, #1
 800f054:	6079      	str	r1, [r7, #4]
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	4413      	add	r3, r2
 800f05a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	3b01      	subs	r3, #1
 800f060:	60bb      	str	r3, [r7, #8]
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d1ed      	bne.n	800f044 <sum_sfn+0x10>
	return sum;
 800f068:	7bfb      	ldrb	r3, [r7, #15]
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3714      	adds	r7, #20
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr

0800f076 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800f076:	b480      	push	{r7}
 800f078:	b087      	sub	sp, #28
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	3301      	adds	r3, #1
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	3301      	adds	r3, #1
 800f086:	015b      	lsls	r3, r3, #5
 800f088:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800f08a:	2300      	movs	r3, #0
 800f08c:	827b      	strh	r3, [r7, #18]
 800f08e:	2300      	movs	r3, #0
 800f090:	617b      	str	r3, [r7, #20]
 800f092:	e018      	b.n	800f0c6 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	2b02      	cmp	r3, #2
 800f098:	d103      	bne.n	800f0a2 <xdir_sum+0x2c>
			i++;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	3301      	adds	r3, #1
 800f09e:	617b      	str	r3, [r7, #20]
 800f0a0:	e00e      	b.n	800f0c0 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800f0a2:	8a7b      	ldrh	r3, [r7, #18]
 800f0a4:	03db      	lsls	r3, r3, #15
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	8a7b      	ldrh	r3, [r7, #18]
 800f0aa:	085b      	lsrs	r3, r3, #1
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	4413      	add	r3, r2
 800f0b0:	b29a      	uxth	r2, r3
 800f0b2:	6879      	ldr	r1, [r7, #4]
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	440b      	add	r3, r1
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	4413      	add	r3, r2
 800f0be:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	617b      	str	r3, [r7, #20]
 800f0c6:	697a      	ldr	r2, [r7, #20]
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d3e2      	bcc.n	800f094 <xdir_sum+0x1e>
		}
	}
	return sum;
 800f0ce:	8a7b      	ldrh	r3, [r7, #18]
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	371c      	adds	r7, #28
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800f0e8:	e01f      	b.n	800f12a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800f0ea:	89bb      	ldrh	r3, [r7, #12]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f002 fbc1 	bl	8011874 <ff_wtoupper>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800f0f6:	89fb      	ldrh	r3, [r7, #14]
 800f0f8:	03db      	lsls	r3, r3, #15
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	89fb      	ldrh	r3, [r7, #14]
 800f0fe:	085b      	lsrs	r3, r3, #1
 800f100:	b29b      	uxth	r3, r3
 800f102:	4413      	add	r3, r2
 800f104:	b29a      	uxth	r2, r3
 800f106:	89bb      	ldrh	r3, [r7, #12]
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	4413      	add	r3, r2
 800f10e:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800f110:	89fb      	ldrh	r3, [r7, #14]
 800f112:	03db      	lsls	r3, r3, #15
 800f114:	b29a      	uxth	r2, r3
 800f116:	89fb      	ldrh	r3, [r7, #14]
 800f118:	085b      	lsrs	r3, r3, #1
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	4413      	add	r3, r2
 800f11e:	b29a      	uxth	r2, r3
 800f120:	89bb      	ldrh	r3, [r7, #12]
 800f122:	0a1b      	lsrs	r3, r3, #8
 800f124:	b29b      	uxth	r3, r3
 800f126:	4413      	add	r3, r2
 800f128:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	1c9a      	adds	r2, r3, #2
 800f12e:	607a      	str	r2, [r7, #4]
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	81bb      	strh	r3, [r7, #12]
 800f134:	89bb      	ldrh	r3, [r7, #12]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d1d7      	bne.n	800f0ea <xname_sum+0xe>
	}
	return sum;
 800f13a:	89fb      	ldrh	r3, [r7, #14]
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3710      	adds	r7, #16
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800f144:	b590      	push	{r4, r7, lr}
 800f146:	b087      	sub	sp, #28
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	695b      	ldr	r3, [r3, #20]
 800f152:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681a      	ldr	r2, [r3, #0]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f15c:	4619      	mov	r1, r3
 800f15e:	4610      	mov	r0, r2
 800f160:	f7fe fcfa 	bl	800db58 <move_window>
 800f164:	4603      	mov	r3, r0
 800f166:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f168:	7bfb      	ldrb	r3, [r7, #15]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d001      	beq.n	800f172 <load_xdir+0x2e>
 800f16e:	7bfb      	ldrb	r3, [r7, #15]
 800f170:	e09f      	b.n	800f2b2 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	2b85      	cmp	r3, #133	; 0x85
 800f17a:	d001      	beq.n	800f180 <load_xdir+0x3c>
 800f17c:	2302      	movs	r3, #2
 800f17e:	e098      	b.n	800f2b2 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f184:	2220      	movs	r2, #32
 800f186:	4619      	mov	r1, r3
 800f188:	6938      	ldr	r0, [r7, #16]
 800f18a:	f7fe fa87 	bl	800d69c <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	3301      	adds	r3, #1
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	3301      	adds	r3, #1
 800f196:	015b      	lsls	r3, r3, #5
 800f198:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	2b5f      	cmp	r3, #95	; 0x5f
 800f19e:	d903      	bls.n	800f1a8 <load_xdir+0x64>
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f1a6:	d901      	bls.n	800f1ac <load_xdir+0x68>
 800f1a8:	2302      	movs	r3, #2
 800f1aa:	e082      	b.n	800f2b2 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f7ff fbf2 	bl	800e998 <dir_next>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f1b8:	7bfb      	ldrb	r3, [r7, #15]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d001      	beq.n	800f1c2 <load_xdir+0x7e>
 800f1be:	7bfb      	ldrb	r3, [r7, #15]
 800f1c0:	e077      	b.n	800f2b2 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681a      	ldr	r2, [r3, #0]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	4610      	mov	r0, r2
 800f1ce:	f7fe fcc3 	bl	800db58 <move_window>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f1d6:	7bfb      	ldrb	r3, [r7, #15]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d001      	beq.n	800f1e0 <load_xdir+0x9c>
 800f1dc:	7bfb      	ldrb	r3, [r7, #15]
 800f1de:	e068      	b.n	800f2b2 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	2bc0      	cmp	r3, #192	; 0xc0
 800f1e8:	d001      	beq.n	800f1ee <load_xdir+0xaa>
 800f1ea:	2302      	movs	r3, #2
 800f1ec:	e061      	b.n	800f2b2 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	f103 0020 	add.w	r0, r3, #32
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1f8:	2220      	movs	r2, #32
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	f7fe fa4e 	bl	800d69c <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	3323      	adds	r3, #35	; 0x23
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	332c      	adds	r3, #44	; 0x2c
 800f208:	4a2c      	ldr	r2, [pc, #176]	; (800f2bc <load_xdir+0x178>)
 800f20a:	fba2 2303 	umull	r2, r3, r2, r3
 800f20e:	08db      	lsrs	r3, r3, #3
 800f210:	015b      	lsls	r3, r3, #5
 800f212:	68ba      	ldr	r2, [r7, #8]
 800f214:	429a      	cmp	r2, r3
 800f216:	d201      	bcs.n	800f21c <load_xdir+0xd8>
 800f218:	2302      	movs	r3, #2
 800f21a:	e04a      	b.n	800f2b2 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800f21c:	2340      	movs	r3, #64	; 0x40
 800f21e:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800f220:	2100      	movs	r1, #0
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f7ff fbb8 	bl	800e998 <dir_next>
 800f228:	4603      	mov	r3, r0
 800f22a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800f22c:	7bfb      	ldrb	r3, [r7, #15]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d001      	beq.n	800f236 <load_xdir+0xf2>
 800f232:	7bfb      	ldrb	r3, [r7, #15]
 800f234:	e03d      	b.n	800f2b2 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681a      	ldr	r2, [r3, #0]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f23e:	4619      	mov	r1, r3
 800f240:	4610      	mov	r0, r2
 800f242:	f7fe fc89 	bl	800db58 <move_window>
 800f246:	4603      	mov	r3, r0
 800f248:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800f24a:	7bfb      	ldrb	r3, [r7, #15]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d001      	beq.n	800f254 <load_xdir+0x110>
 800f250:	7bfb      	ldrb	r3, [r7, #15]
 800f252:	e02e      	b.n	800f2b2 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	2bc1      	cmp	r3, #193	; 0xc1
 800f25c:	d001      	beq.n	800f262 <load_xdir+0x11e>
 800f25e:	2302      	movs	r3, #2
 800f260:	e027      	b.n	800f2b2 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f268:	d208      	bcs.n	800f27c <load_xdir+0x138>
 800f26a:	693a      	ldr	r2, [r7, #16]
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	18d0      	adds	r0, r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f274:	2220      	movs	r2, #32
 800f276:	4619      	mov	r1, r3
 800f278:	f7fe fa10 	bl	800d69c <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	3320      	adds	r3, #32
 800f280:	617b      	str	r3, [r7, #20]
 800f282:	697a      	ldr	r2, [r7, #20]
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	429a      	cmp	r2, r3
 800f288:	d3ca      	bcc.n	800f220 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f290:	d80e      	bhi.n	800f2b0 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800f292:	6938      	ldr	r0, [r7, #16]
 800f294:	f7ff feef 	bl	800f076 <xdir_sum>
 800f298:	4603      	mov	r3, r0
 800f29a:	461c      	mov	r4, r3
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	3302      	adds	r3, #2
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fe f835 	bl	800d310 <ld_word>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	429c      	cmp	r4, r3
 800f2aa:	d001      	beq.n	800f2b0 <load_xdir+0x16c>
 800f2ac:	2302      	movs	r3, #2
 800f2ae:	e000      	b.n	800f2b2 <load_xdir+0x16e>
	}
	return FR_OK;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	371c      	adds	r7, #28
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd90      	pop	{r4, r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	88888889 	.word	0x88888889

0800f2c0 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800f2c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f2c4:	b084      	sub	sp, #16
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
 800f2ca:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	6a1a      	ldr	r2, [r3, #32]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e0:	b2da      	uxtb	r2, r3
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ea:	469b      	mov	fp, r3
 800f2ec:	f04f 0c00 	mov.w	ip, #0
 800f2f0:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800f2f4:	f04f 0200 	mov.w	r2, #0
 800f2f8:	ea0b 0301 	and.w	r3, fp, r1
 800f2fc:	ea0c 0402 	and.w	r4, ip, r2
 800f300:	687a      	ldr	r2, [r7, #4]
 800f302:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f312:	4619      	mov	r1, r3
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f7ff faab 	bl	800e870 <dir_sdi>
 800f31a:	4603      	mov	r3, r0
 800f31c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f31e:	7bfb      	ldrb	r3, [r7, #15]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d104      	bne.n	800f32e <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7ff ff0d 	bl	800f144 <load_xdir>
 800f32a:	4603      	mov	r3, r0
 800f32c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800f32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f330:	4618      	mov	r0, r3
 800f332:	3710      	adds	r7, #16
 800f334:	46bd      	mov	sp, r7
 800f336:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800f33a <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800f33a:	b590      	push	{r4, r7, lr}
 800f33c:	b087      	sub	sp, #28
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	695b      	ldr	r3, [r3, #20]
 800f348:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	1c9c      	adds	r4, r3, #2
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f7ff fe91 	bl	800f076 <xdir_sum>
 800f354:	4603      	mov	r3, r0
 800f356:	4619      	mov	r1, r3
 800f358:	4620      	mov	r0, r4
 800f35a:	f7fe f8d1 	bl	800d500 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	3301      	adds	r3, #1
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	3301      	adds	r3, #1
 800f366:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f36c:	4619      	mov	r1, r3
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff fa7e 	bl	800e870 <dir_sdi>
 800f374:	4603      	mov	r3, r0
 800f376:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800f378:	e026      	b.n	800f3c8 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f382:	4619      	mov	r1, r3
 800f384:	4610      	mov	r0, r2
 800f386:	f7fe fbe7 	bl	800db58 <move_window>
 800f38a:	4603      	mov	r3, r0
 800f38c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f38e:	7dfb      	ldrb	r3, [r7, #23]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d11d      	bne.n	800f3d0 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f398:	2220      	movs	r2, #32
 800f39a:	68f9      	ldr	r1, [r7, #12]
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7fe f97d 	bl	800d69c <mem_cpy>
		dp->obj.fs->wflag = 1;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	3b01      	subs	r3, #1
 800f3ae:	613b      	str	r3, [r7, #16]
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00e      	beq.n	800f3d4 <store_xdir+0x9a>
		dirb += SZDIRE;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	3320      	adds	r3, #32
 800f3ba:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800f3bc:	2100      	movs	r1, #0
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f7ff faea 	bl	800e998 <dir_next>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800f3c8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d0d5      	beq.n	800f37a <store_xdir+0x40>
 800f3ce:	e002      	b.n	800f3d6 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800f3d0:	bf00      	nop
 800f3d2:	e000      	b.n	800f3d6 <store_xdir+0x9c>
		if (--nent == 0) break;
 800f3d4:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800f3d6:	7dfb      	ldrb	r3, [r7, #23]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d002      	beq.n	800f3e2 <store_xdir+0xa8>
 800f3dc:	7dfb      	ldrb	r3, [r7, #23]
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d101      	bne.n	800f3e6 <store_xdir+0xac>
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
 800f3e4:	e000      	b.n	800f3e8 <store_xdir+0xae>
 800f3e6:	2302      	movs	r3, #2
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	371c      	adds	r7, #28
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd90      	pop	{r4, r7, pc}

0800f3f0 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800f3f0:	b590      	push	{r4, r7, lr}
 800f3f2:	b085      	sub	sp, #20
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800f3fa:	2240      	movs	r2, #64	; 0x40
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f7fe f96d 	bl	800d6de <mem_set>
	dirb[XDIR_Type] = 0x85;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2285      	movs	r2, #133	; 0x85
 800f408:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	3320      	adds	r3, #32
 800f40e:	22c0      	movs	r2, #192	; 0xc0
 800f410:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800f412:	2300      	movs	r3, #0
 800f414:	72bb      	strb	r3, [r7, #10]
 800f416:	2301      	movs	r3, #1
 800f418:	72fb      	strb	r3, [r7, #11]
 800f41a:	2301      	movs	r3, #1
 800f41c:	813b      	strh	r3, [r7, #8]
 800f41e:	2340      	movs	r3, #64	; 0x40
 800f420:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	1c5a      	adds	r2, r3, #1
 800f426:	60fa      	str	r2, [r7, #12]
 800f428:	687a      	ldr	r2, [r7, #4]
 800f42a:	4413      	add	r3, r2
 800f42c:	22c1      	movs	r2, #193	; 0xc1
 800f42e:	701a      	strb	r2, [r3, #0]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	1c5a      	adds	r2, r3, #1
 800f434:	60fa      	str	r2, [r7, #12]
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	4413      	add	r3, r2
 800f43a:	2200      	movs	r2, #0
 800f43c:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800f43e:	893b      	ldrh	r3, [r7, #8]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d00b      	beq.n	800f45c <create_xdir+0x6c>
 800f444:	7abb      	ldrb	r3, [r7, #10]
 800f446:	005b      	lsls	r3, r3, #1
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	4413      	add	r3, r2
 800f44c:	881b      	ldrh	r3, [r3, #0]
 800f44e:	813b      	strh	r3, [r7, #8]
 800f450:	893b      	ldrh	r3, [r7, #8]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d002      	beq.n	800f45c <create_xdir+0x6c>
 800f456:	7abb      	ldrb	r3, [r7, #10]
 800f458:	3301      	adds	r3, #1
 800f45a:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	4413      	add	r3, r2
 800f462:	893a      	ldrh	r2, [r7, #8]
 800f464:	4611      	mov	r1, r2
 800f466:	4618      	mov	r0, r3
 800f468:	f7fe f84a 	bl	800d500 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	3302      	adds	r3, #2
 800f470:	60fb      	str	r3, [r7, #12]
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f003 031f 	and.w	r3, r3, #31
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d1e0      	bne.n	800f43e <create_xdir+0x4e>
		nb++;
 800f47c:	7afb      	ldrb	r3, [r7, #11]
 800f47e:	3301      	adds	r3, #1
 800f480:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800f482:	7abb      	ldrb	r3, [r7, #10]
 800f484:	005b      	lsls	r3, r3, #1
 800f486:	683a      	ldr	r2, [r7, #0]
 800f488:	4413      	add	r3, r2
 800f48a:	881b      	ldrh	r3, [r3, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d1c8      	bne.n	800f422 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	3323      	adds	r3, #35	; 0x23
 800f494:	7aba      	ldrb	r2, [r7, #10]
 800f496:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	3301      	adds	r3, #1
 800f49c:	7afa      	ldrb	r2, [r7, #11]
 800f49e:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800f4a6:	6838      	ldr	r0, [r7, #0]
 800f4a8:	f7ff fe18 	bl	800f0dc <xname_sum>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f7fe f825 	bl	800d500 <st_word>
}
 800f4b6:	bf00      	nop
 800f4b8:	3714      	adds	r7, #20
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd90      	pop	{r4, r7, pc}

0800f4be <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b086      	sub	sp, #24
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
 800f4c6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f4c8:	2304      	movs	r3, #4
 800f4ca:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f4d2:	23ff      	movs	r3, #255	; 0xff
 800f4d4:	757b      	strb	r3, [r7, #21]
 800f4d6:	23ff      	movs	r3, #255	; 0xff
 800f4d8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f4da:	e09f      	b.n	800f61c <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	6938      	ldr	r0, [r7, #16]
 800f4e4:	f7fe fb38 	bl	800db58 <move_window>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f4ec:	7dfb      	ldrb	r3, [r7, #23]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	f040 809a 	bne.w	800f628 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f4fc:	7dbb      	ldrb	r3, [r7, #22]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d102      	bne.n	800f508 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f502:	2304      	movs	r3, #4
 800f504:	75fb      	strb	r3, [r7, #23]
 800f506:	e096      	b.n	800f636 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	2b04      	cmp	r3, #4
 800f50e:	d118      	bne.n	800f542 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800f510:	7dbb      	ldrb	r3, [r7, #22]
 800f512:	2b85      	cmp	r3, #133	; 0x85
 800f514:	d179      	bne.n	800f60a <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f7ff fe10 	bl	800f144 <load_xdir>
 800f524:	4603      	mov	r3, r0
 800f526:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800f528:	7dfb      	ldrb	r3, [r7, #23]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d17e      	bne.n	800f62c <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	695b      	ldr	r3, [r3, #20]
 800f532:	3304      	adds	r3, #4
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f53a:	b2da      	uxtb	r2, r3
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	719a      	strb	r2, [r3, #6]
					}
					break;
 800f540:	e074      	b.n	800f62c <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f546:	330b      	adds	r3, #11
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f54e:	73fb      	strb	r3, [r7, #15]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	7bfa      	ldrb	r2, [r7, #15]
 800f554:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f556:	7dbb      	ldrb	r3, [r7, #22]
 800f558:	2be5      	cmp	r3, #229	; 0xe5
 800f55a:	d00e      	beq.n	800f57a <dir_read+0xbc>
 800f55c:	7dbb      	ldrb	r3, [r7, #22]
 800f55e:	2b2e      	cmp	r3, #46	; 0x2e
 800f560:	d00b      	beq.n	800f57a <dir_read+0xbc>
 800f562:	7bfb      	ldrb	r3, [r7, #15]
 800f564:	f023 0320 	bic.w	r3, r3, #32
 800f568:	2b08      	cmp	r3, #8
 800f56a:	bf0c      	ite	eq
 800f56c:	2301      	moveq	r3, #1
 800f56e:	2300      	movne	r3, #0
 800f570:	b2db      	uxtb	r3, r3
 800f572:	461a      	mov	r2, r3
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	4293      	cmp	r3, r2
 800f578:	d002      	beq.n	800f580 <dir_read+0xc2>
				ord = 0xFF;
 800f57a:	23ff      	movs	r3, #255	; 0xff
 800f57c:	757b      	strb	r3, [r7, #21]
 800f57e:	e044      	b.n	800f60a <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f580:	7bfb      	ldrb	r3, [r7, #15]
 800f582:	2b0f      	cmp	r3, #15
 800f584:	d12f      	bne.n	800f5e6 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f586:	7dbb      	ldrb	r3, [r7, #22]
 800f588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d00d      	beq.n	800f5ac <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f594:	7b5b      	ldrb	r3, [r3, #13]
 800f596:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f598:	7dbb      	ldrb	r3, [r7, #22]
 800f59a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f59e:	75bb      	strb	r3, [r7, #22]
 800f5a0:	7dbb      	ldrb	r3, [r7, #22]
 800f5a2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f5ac:	7dba      	ldrb	r2, [r7, #22]
 800f5ae:	7d7b      	ldrb	r3, [r7, #21]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d115      	bne.n	800f5e0 <dir_read+0x122>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5b8:	330d      	adds	r3, #13
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	7d3a      	ldrb	r2, [r7, #20]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d10e      	bne.n	800f5e0 <dir_read+0x122>
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	691a      	ldr	r2, [r3, #16]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	4610      	mov	r0, r2
 800f5ce:	f7ff fbd5 	bl	800ed7c <pick_lfn>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d003      	beq.n	800f5e0 <dir_read+0x122>
 800f5d8:	7d7b      	ldrb	r3, [r7, #21]
 800f5da:	3b01      	subs	r3, #1
 800f5dc:	b2db      	uxtb	r3, r3
 800f5de:	e000      	b.n	800f5e2 <dir_read+0x124>
 800f5e0:	23ff      	movs	r3, #255	; 0xff
 800f5e2:	757b      	strb	r3, [r7, #21]
 800f5e4:	e011      	b.n	800f60a <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f5e6:	7d7b      	ldrb	r3, [r7, #21]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d109      	bne.n	800f600 <dir_read+0x142>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7ff fd1f 	bl	800f034 <sum_sfn>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	7d3b      	ldrb	r3, [r7, #20]
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d017      	beq.n	800f630 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f04f 32ff 	mov.w	r2, #4294967295
 800f606:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800f608:	e012      	b.n	800f630 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f60a:	2100      	movs	r1, #0
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f7ff f9c3 	bl	800e998 <dir_next>
 800f612:	4603      	mov	r3, r0
 800f614:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f616:	7dfb      	ldrb	r3, [r7, #23]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d10b      	bne.n	800f634 <dir_read+0x176>
	while (dp->sect) {
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f620:	2b00      	cmp	r3, #0
 800f622:	f47f af5b 	bne.w	800f4dc <dir_read+0x1e>
 800f626:	e006      	b.n	800f636 <dir_read+0x178>
		if (res != FR_OK) break;
 800f628:	bf00      	nop
 800f62a:	e004      	b.n	800f636 <dir_read+0x178>
					break;
 800f62c:	bf00      	nop
 800f62e:	e002      	b.n	800f636 <dir_read+0x178>
					break;
 800f630:	bf00      	nop
 800f632:	e000      	b.n	800f636 <dir_read+0x178>
		if (res != FR_OK) break;
 800f634:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f636:	7dfb      	ldrb	r3, [r7, #23]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d002      	beq.n	800f642 <dir_read+0x184>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800f642:	7dfb      	ldrb	r3, [r7, #23]
}
 800f644:	4618      	mov	r0, r3
 800f646:	3718      	adds	r7, #24
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f64c:	b590      	push	{r4, r7, lr}
 800f64e:	b089      	sub	sp, #36	; 0x24
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f65a:	2100      	movs	r1, #0
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f7ff f907 	bl	800e870 <dir_sdi>
 800f662:	4603      	mov	r3, r0
 800f664:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800f666:	7ffb      	ldrb	r3, [r7, #31]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d001      	beq.n	800f670 <dir_find+0x24>
 800f66c:	7ffb      	ldrb	r3, [r7, #31]
 800f66e:	e112      	b.n	800f896 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b04      	cmp	r3, #4
 800f676:	d164      	bne.n	800f742 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	691b      	ldr	r3, [r3, #16]
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7ff fd2d 	bl	800f0dc <xname_sum>
 800f682:	4603      	mov	r3, r0
 800f684:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f686:	e04f      	b.n	800f728 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	695b      	ldr	r3, [r3, #20]
 800f68c:	3324      	adds	r3, #36	; 0x24
 800f68e:	4618      	mov	r0, r3
 800f690:	f7fd fe3e 	bl	800d310 <ld_word>
 800f694:	4603      	mov	r3, r0
 800f696:	461a      	mov	r2, r3
 800f698:	893b      	ldrh	r3, [r7, #8]
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d000      	beq.n	800f6a0 <dir_find+0x54>
 800f69e:	e043      	b.n	800f728 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	695b      	ldr	r3, [r3, #20]
 800f6a4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f6a8:	76fb      	strb	r3, [r7, #27]
 800f6aa:	2340      	movs	r3, #64	; 0x40
 800f6ac:	617b      	str	r3, [r7, #20]
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	613b      	str	r3, [r7, #16]
 800f6b2:	e029      	b.n	800f708 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	f003 031f 	and.w	r3, r3, #31
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d102      	bne.n	800f6c4 <dir_find+0x78>
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	3302      	adds	r3, #2
 800f6c2:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	695a      	ldr	r2, [r3, #20]
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	4413      	add	r3, r2
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fd fe1f 	bl	800d310 <ld_word>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f002 f8cd 	bl	8011874 <ff_wtoupper>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	461c      	mov	r4, r3
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	691a      	ldr	r2, [r3, #16]
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	005b      	lsls	r3, r3, #1
 800f6e6:	4413      	add	r3, r2
 800f6e8:	881b      	ldrh	r3, [r3, #0]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f002 f8c2 	bl	8011874 <ff_wtoupper>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	429c      	cmp	r4, r3
 800f6f4:	d10c      	bne.n	800f710 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f6f6:	7efb      	ldrb	r3, [r7, #27]
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	76fb      	strb	r3, [r7, #27]
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	3302      	adds	r3, #2
 800f700:	617b      	str	r3, [r7, #20]
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	3301      	adds	r3, #1
 800f706:	613b      	str	r3, [r7, #16]
 800f708:	7efb      	ldrb	r3, [r7, #27]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d1d2      	bne.n	800f6b4 <dir_find+0x68>
 800f70e:	e000      	b.n	800f712 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f710:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f712:	7efb      	ldrb	r3, [r7, #27]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d107      	bne.n	800f728 <dir_find+0xdc>
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	691a      	ldr	r2, [r3, #16]
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	005b      	lsls	r3, r3, #1
 800f720:	4413      	add	r3, r2
 800f722:	881b      	ldrh	r3, [r3, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d009      	beq.n	800f73c <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f728:	2100      	movs	r1, #0
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f7ff fec7 	bl	800f4be <dir_read>
 800f730:	4603      	mov	r3, r0
 800f732:	77fb      	strb	r3, [r7, #31]
 800f734:	7ffb      	ldrb	r3, [r7, #31]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d0a6      	beq.n	800f688 <dir_find+0x3c>
 800f73a:	e000      	b.n	800f73e <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f73c:	bf00      	nop
		}
		return res;
 800f73e:	7ffb      	ldrb	r3, [r7, #31]
 800f740:	e0a9      	b.n	800f896 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f742:	23ff      	movs	r3, #255	; 0xff
 800f744:	773b      	strb	r3, [r7, #28]
 800f746:	7f3b      	ldrb	r3, [r7, #28]
 800f748:	777b      	strb	r3, [r7, #29]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f04f 32ff 	mov.w	r2, #4294967295
 800f750:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f756:	4619      	mov	r1, r3
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f7fe f9fd 	bl	800db58 <move_window>
 800f75e:	4603      	mov	r3, r0
 800f760:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800f762:	7ffb      	ldrb	r3, [r7, #31]
 800f764:	2b00      	cmp	r3, #0
 800f766:	f040 8090 	bne.w	800f88a <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f772:	7fbb      	ldrb	r3, [r7, #30]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d102      	bne.n	800f77e <dir_find+0x132>
 800f778:	2304      	movs	r3, #4
 800f77a:	77fb      	strb	r3, [r7, #31]
 800f77c:	e08a      	b.n	800f894 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f782:	330b      	adds	r3, #11
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f78a:	72fb      	strb	r3, [r7, #11]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	7afa      	ldrb	r2, [r7, #11]
 800f790:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f792:	7fbb      	ldrb	r3, [r7, #30]
 800f794:	2be5      	cmp	r3, #229	; 0xe5
 800f796:	d007      	beq.n	800f7a8 <dir_find+0x15c>
 800f798:	7afb      	ldrb	r3, [r7, #11]
 800f79a:	f003 0308 	and.w	r3, r3, #8
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d009      	beq.n	800f7b6 <dir_find+0x16a>
 800f7a2:	7afb      	ldrb	r3, [r7, #11]
 800f7a4:	2b0f      	cmp	r3, #15
 800f7a6:	d006      	beq.n	800f7b6 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f7a8:	23ff      	movs	r3, #255	; 0xff
 800f7aa:	777b      	strb	r3, [r7, #29]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f7b2:	64da      	str	r2, [r3, #76]	; 0x4c
 800f7b4:	e05e      	b.n	800f874 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f7b6:	7afb      	ldrb	r3, [r7, #11]
 800f7b8:	2b0f      	cmp	r3, #15
 800f7ba:	d136      	bne.n	800f82a <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d154      	bne.n	800f874 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f7ca:	7fbb      	ldrb	r3, [r7, #30]
 800f7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d00d      	beq.n	800f7f0 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7d8:	7b5b      	ldrb	r3, [r3, #13]
 800f7da:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f7dc:	7fbb      	ldrb	r3, [r7, #30]
 800f7de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7e2:	77bb      	strb	r3, [r7, #30]
 800f7e4:	7fbb      	ldrb	r3, [r7, #30]
 800f7e6:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f7f0:	7fba      	ldrb	r2, [r7, #30]
 800f7f2:	7f7b      	ldrb	r3, [r7, #29]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d115      	bne.n	800f824 <dir_find+0x1d8>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7fc:	330d      	adds	r3, #13
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	7f3a      	ldrb	r2, [r7, #28]
 800f802:	429a      	cmp	r2, r3
 800f804:	d10e      	bne.n	800f824 <dir_find+0x1d8>
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	691a      	ldr	r2, [r3, #16]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f80e:	4619      	mov	r1, r3
 800f810:	4610      	mov	r0, r2
 800f812:	f7ff fa43 	bl	800ec9c <cmp_lfn>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d003      	beq.n	800f824 <dir_find+0x1d8>
 800f81c:	7f7b      	ldrb	r3, [r7, #29]
 800f81e:	3b01      	subs	r3, #1
 800f820:	b2db      	uxtb	r3, r3
 800f822:	e000      	b.n	800f826 <dir_find+0x1da>
 800f824:	23ff      	movs	r3, #255	; 0xff
 800f826:	777b      	strb	r3, [r7, #29]
 800f828:	e024      	b.n	800f874 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f82a:	7f7b      	ldrb	r3, [r7, #29]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d109      	bne.n	800f844 <dir_find+0x1f8>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f834:	4618      	mov	r0, r3
 800f836:	f7ff fbfd 	bl	800f034 <sum_sfn>
 800f83a:	4603      	mov	r3, r0
 800f83c:	461a      	mov	r2, r3
 800f83e:	7f3b      	ldrb	r3, [r7, #28]
 800f840:	4293      	cmp	r3, r2
 800f842:	d024      	beq.n	800f88e <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f84a:	f003 0301 	and.w	r3, r3, #1
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d10a      	bne.n	800f868 <dir_find+0x21c>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	3340      	adds	r3, #64	; 0x40
 800f85a:	220b      	movs	r2, #11
 800f85c:	4619      	mov	r1, r3
 800f85e:	f7fd ff58 	bl	800d712 <mem_cmp>
 800f862:	4603      	mov	r3, r0
 800f864:	2b00      	cmp	r3, #0
 800f866:	d014      	beq.n	800f892 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f868:	23ff      	movs	r3, #255	; 0xff
 800f86a:	777b      	strb	r3, [r7, #29]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f04f 32ff 	mov.w	r2, #4294967295
 800f872:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f874:	2100      	movs	r1, #0
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f7ff f88e 	bl	800e998 <dir_next>
 800f87c:	4603      	mov	r3, r0
 800f87e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800f880:	7ffb      	ldrb	r3, [r7, #31]
 800f882:	2b00      	cmp	r3, #0
 800f884:	f43f af65 	beq.w	800f752 <dir_find+0x106>
 800f888:	e004      	b.n	800f894 <dir_find+0x248>
		if (res != FR_OK) break;
 800f88a:	bf00      	nop
 800f88c:	e002      	b.n	800f894 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f88e:	bf00      	nop
 800f890:	e000      	b.n	800f894 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f892:	bf00      	nop

	return res;
 800f894:	7ffb      	ldrb	r3, [r7, #31]
}
 800f896:	4618      	mov	r0, r3
 800f898:	3724      	adds	r7, #36	; 0x24
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd90      	pop	{r4, r7, pc}
	...

0800f8a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f8a0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f8a4:	b0a0      	sub	sp, #128	; 0x80
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f8b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d001      	beq.n	800f8c2 <dir_register+0x22>
 800f8be:	2306      	movs	r3, #6
 800f8c0:	e198      	b.n	800fbf4 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	677b      	str	r3, [r7, #116]	; 0x74
 800f8c6:	e002      	b.n	800f8ce <dir_register+0x2e>
 800f8c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	677b      	str	r3, [r7, #116]	; 0x74
 800f8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8d0:	691a      	ldr	r2, [r3, #16]
 800f8d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8d4:	005b      	lsls	r3, r3, #1
 800f8d6:	4413      	add	r3, r2
 800f8d8:	881b      	ldrh	r3, [r3, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1f4      	bne.n	800f8c8 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f8de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	2b04      	cmp	r3, #4
 800f8e4:	f040 80a9 	bne.w	800fa3a <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800f8e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8ea:	330e      	adds	r3, #14
 800f8ec:	4aa7      	ldr	r2, [pc, #668]	; (800fb8c <dir_register+0x2ec>)
 800f8ee:	fba2 2303 	umull	r2, r3, r2, r3
 800f8f2:	08db      	lsrs	r3, r3, #3
 800f8f4:	3302      	adds	r3, #2
 800f8f6:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800f8f8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f7ff f932 	bl	800eb64 <dir_alloc>
 800f900:	4603      	mov	r3, r0
 800f902:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800f906:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d002      	beq.n	800f914 <dir_register+0x74>
 800f90e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f912:	e16f      	b.n	800fbf4 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f918:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f91a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 800f91e:	440b      	add	r3, r1
 800f920:	015b      	lsls	r3, r3, #5
 800f922:	1ad2      	subs	r2, r2, r3
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	689b      	ldr	r3, [r3, #8]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d07a      	beq.n	800fa26 <dir_register+0x186>
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	79db      	ldrb	r3, [r3, #7]
 800f934:	f003 0304 	and.w	r3, r3, #4
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d074      	beq.n	800fa26 <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800f942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f944:	895b      	ldrh	r3, [r3, #10]
 800f946:	4618      	mov	r0, r3
 800f948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f94a:	899b      	ldrh	r3, [r3, #12]
 800f94c:	fb03 f300 	mul.w	r3, r3, r0
 800f950:	469b      	mov	fp, r3
 800f952:	f04f 0c00 	mov.w	ip, #0
 800f956:	eb1b 0301 	adds.w	r3, fp, r1
 800f95a:	eb4c 0402 	adc.w	r4, ip, r2
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4618      	mov	r0, r3
 800f968:	f7fe fd26 	bl	800e3b8 <fill_first_frag>
 800f96c:	4603      	mov	r3, r0
 800f96e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f972:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f976:	2b00      	cmp	r3, #0
 800f978:	d002      	beq.n	800f980 <dir_register+0xe0>
 800f97a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f97e:	e139      	b.n	800fbf4 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f986:	f04f 32ff 	mov.w	r2, #4294967295
 800f98a:	4619      	mov	r1, r3
 800f98c:	f7fe fd43 	bl	800e416 <fill_last_frag>
 800f990:	4603      	mov	r3, r0
 800f992:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f996:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d002      	beq.n	800f9a4 <dir_register+0x104>
 800f99e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9a2:	e127      	b.n	800fbf4 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	f107 0308 	add.w	r3, r7, #8
 800f9aa:	4611      	mov	r1, r2
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7ff fc87 	bl	800f2c0 <load_obj_dir>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f9b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d002      	beq.n	800f9c6 <dir_register+0x126>
 800f9c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9c4:	e116      	b.n	800fbf4 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800f9c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9c8:	695b      	ldr	r3, [r3, #20]
 800f9ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	4623      	mov	r3, r4
 800f9d8:	4608      	mov	r0, r1
 800f9da:	f7fd fdd8 	bl	800d58e <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800f9de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9e0:	695b      	ldr	r3, [r3, #20]
 800f9e2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	4623      	mov	r3, r4
 800f9f0:	4608      	mov	r0, r1
 800f9f2:	f7fd fdcc 	bl	800d58e <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	79da      	ldrb	r2, [r3, #7]
 800f9fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9fc:	695b      	ldr	r3, [r3, #20]
 800f9fe:	3321      	adds	r3, #33	; 0x21
 800fa00:	f042 0201 	orr.w	r2, r2, #1
 800fa04:	b2d2      	uxtb	r2, r2
 800fa06:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800fa08:	f107 0308 	add.w	r3, r7, #8
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7ff fc94 	bl	800f33a <store_xdir>
 800fa12:	4603      	mov	r3, r0
 800fa14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800fa18:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d002      	beq.n	800fa26 <dir_register+0x186>
 800fa20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa24:	e0e6      	b.n	800fbf4 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800fa26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa28:	695a      	ldr	r2, [r3, #20]
 800fa2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa2c:	691b      	ldr	r3, [r3, #16]
 800fa2e:	4619      	mov	r1, r3
 800fa30:	4610      	mov	r0, r2
 800fa32:	f7ff fcdd 	bl	800f3f0 <create_xdir>
		return FR_OK;
 800fa36:	2300      	movs	r3, #0
 800fa38:	e0dc      	b.n	800fbf4 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800fa40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fa44:	220c      	movs	r2, #12
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7fd fe28 	bl	800d69c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800fa4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa50:	f003 0301 	and.w	r3, r3, #1
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d033      	beq.n	800fac0 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2240      	movs	r2, #64	; 0x40
 800fa5c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800fa60:	2301      	movs	r3, #1
 800fa62:	67bb      	str	r3, [r7, #120]	; 0x78
 800fa64:	e016      	b.n	800fa94 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800fa6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa6e:	691a      	ldr	r2, [r3, #16]
 800fa70:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800fa74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa76:	f7ff fa4d 	bl	800ef14 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f7ff fde6 	bl	800f64c <dir_find>
 800fa80:	4603      	mov	r3, r0
 800fa82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800fa86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d106      	bne.n	800fa9c <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 800fa8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa90:	3301      	adds	r3, #1
 800fa92:	67bb      	str	r3, [r7, #120]	; 0x78
 800fa94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa96:	2b63      	cmp	r3, #99	; 0x63
 800fa98:	d9e5      	bls.n	800fa66 <dir_register+0x1c6>
 800fa9a:	e000      	b.n	800fa9e <dir_register+0x1fe>
			if (res != FR_OK) break;
 800fa9c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800fa9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800faa0:	2b64      	cmp	r3, #100	; 0x64
 800faa2:	d101      	bne.n	800faa8 <dir_register+0x208>
 800faa4:	2307      	movs	r3, #7
 800faa6:	e0a5      	b.n	800fbf4 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800faa8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800faac:	2b04      	cmp	r3, #4
 800faae:	d002      	beq.n	800fab6 <dir_register+0x216>
 800fab0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fab4:	e09e      	b.n	800fbf4 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800fab6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800fac0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fac4:	f003 0302 	and.w	r3, r3, #2
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d007      	beq.n	800fadc <dir_register+0x23c>
 800facc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800face:	330c      	adds	r3, #12
 800fad0:	4a2f      	ldr	r2, [pc, #188]	; (800fb90 <dir_register+0x2f0>)
 800fad2:	fba2 2303 	umull	r2, r3, r2, r3
 800fad6:	089b      	lsrs	r3, r3, #2
 800fad8:	3301      	adds	r3, #1
 800fada:	e000      	b.n	800fade <dir_register+0x23e>
 800fadc:	2301      	movs	r3, #1
 800fade:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800fae0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f7ff f83e 	bl	800eb64 <dir_alloc>
 800fae8:	4603      	mov	r3, r0
 800faea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800faee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d14f      	bne.n	800fb96 <dir_register+0x2f6>
 800faf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800faf8:	3b01      	subs	r3, #1
 800fafa:	673b      	str	r3, [r7, #112]	; 0x70
 800fafc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d049      	beq.n	800fb96 <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb08:	015b      	lsls	r3, r3, #5
 800fb0a:	1ad3      	subs	r3, r2, r3
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f7fe feae 	bl	800e870 <dir_sdi>
 800fb14:	4603      	mov	r3, r0
 800fb16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800fb1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d139      	bne.n	800fb96 <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	3340      	adds	r3, #64	; 0x40
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7ff fa84 	bl	800f034 <sum_sfn>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb36:	4619      	mov	r1, r3
 800fb38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fb3a:	f7fe f80d 	bl	800db58 <move_window>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800fb44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d123      	bne.n	800fb94 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800fb4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb4e:	6918      	ldr	r0, [r3, #16]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fb54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb56:	b2da      	uxtb	r2, r3
 800fb58:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fb5c:	f7ff f972 	bl	800ee44 <put_lfn>
				fs->wflag = 1;
 800fb60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb62:	2201      	movs	r2, #1
 800fb64:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800fb66:	2100      	movs	r1, #0
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f7fe ff15 	bl	800e998 <dir_next>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800fb74:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d10c      	bne.n	800fb96 <dir_register+0x2f6>
 800fb7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	673b      	str	r3, [r7, #112]	; 0x70
 800fb82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d1d4      	bne.n	800fb32 <dir_register+0x292>
 800fb88:	e005      	b.n	800fb96 <dir_register+0x2f6>
 800fb8a:	bf00      	nop
 800fb8c:	88888889 	.word	0x88888889
 800fb90:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800fb94:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fb96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d128      	bne.n	800fbf0 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba2:	4619      	mov	r1, r3
 800fba4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fba6:	f7fd ffd7 	bl	800db58 <move_window>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800fbb0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d11b      	bne.n	800fbf0 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbbc:	2220      	movs	r2, #32
 800fbbe:	2100      	movs	r1, #0
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fd fd8c 	bl	800d6de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	3340      	adds	r3, #64	; 0x40
 800fbce:	220b      	movs	r2, #11
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	f7fd fd63 	bl	800d69c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbe0:	330c      	adds	r3, #12
 800fbe2:	f002 0218 	and.w	r2, r2, #24
 800fbe6:	b2d2      	uxtb	r2, r2
 800fbe8:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800fbea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbec:	2201      	movs	r2, #1
 800fbee:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fbf0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3780      	adds	r7, #128	; 0x80
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800fbfe:	bf00      	nop

0800fc00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b08a      	sub	sp, #40	; 0x28
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	613b      	str	r3, [r7, #16]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	691b      	ldr	r3, [r3, #16]
 800fc16:	60fb      	str	r3, [r7, #12]
 800fc18:	2300      	movs	r3, #0
 800fc1a:	617b      	str	r3, [r7, #20]
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	1c5a      	adds	r2, r3, #1
 800fc24:	61ba      	str	r2, [r7, #24]
 800fc26:	693a      	ldr	r2, [r7, #16]
 800fc28:	4413      	add	r3, r2
 800fc2a:	781b      	ldrb	r3, [r3, #0]
 800fc2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800fc2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc30:	2b1f      	cmp	r3, #31
 800fc32:	d940      	bls.n	800fcb6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800fc34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc36:	2b2f      	cmp	r3, #47	; 0x2f
 800fc38:	d006      	beq.n	800fc48 <create_name+0x48>
 800fc3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc3c:	2b5c      	cmp	r3, #92	; 0x5c
 800fc3e:	d110      	bne.n	800fc62 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fc40:	e002      	b.n	800fc48 <create_name+0x48>
 800fc42:	69bb      	ldr	r3, [r7, #24]
 800fc44:	3301      	adds	r3, #1
 800fc46:	61bb      	str	r3, [r7, #24]
 800fc48:	693a      	ldr	r2, [r7, #16]
 800fc4a:	69bb      	ldr	r3, [r7, #24]
 800fc4c:	4413      	add	r3, r2
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	2b2f      	cmp	r3, #47	; 0x2f
 800fc52:	d0f6      	beq.n	800fc42 <create_name+0x42>
 800fc54:	693a      	ldr	r2, [r7, #16]
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	4413      	add	r3, r2
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	2b5c      	cmp	r3, #92	; 0x5c
 800fc5e:	d0f0      	beq.n	800fc42 <create_name+0x42>
			break;
 800fc60:	e02a      	b.n	800fcb8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	2bfe      	cmp	r3, #254	; 0xfe
 800fc66:	d901      	bls.n	800fc6c <create_name+0x6c>
 800fc68:	2306      	movs	r3, #6
 800fc6a:	e177      	b.n	800ff5c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800fc6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800fc72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc74:	2101      	movs	r1, #1
 800fc76:	4618      	mov	r0, r3
 800fc78:	f001 fdc0 	bl	80117fc <ff_convert>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800fc80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d101      	bne.n	800fc8a <create_name+0x8a>
 800fc86:	2306      	movs	r3, #6
 800fc88:	e168      	b.n	800ff5c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800fc8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc8c:	2b7f      	cmp	r3, #127	; 0x7f
 800fc8e:	d809      	bhi.n	800fca4 <create_name+0xa4>
 800fc90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc92:	4619      	mov	r1, r3
 800fc94:	48b3      	ldr	r0, [pc, #716]	; (800ff64 <create_name+0x364>)
 800fc96:	f7fd fd63 	bl	800d760 <chk_chr>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d001      	beq.n	800fca4 <create_name+0xa4>
 800fca0:	2306      	movs	r3, #6
 800fca2:	e15b      	b.n	800ff5c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	1c5a      	adds	r2, r3, #1
 800fca8:	617a      	str	r2, [r7, #20]
 800fcaa:	005b      	lsls	r3, r3, #1
 800fcac:	68fa      	ldr	r2, [r7, #12]
 800fcae:	4413      	add	r3, r2
 800fcb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fcb2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800fcb4:	e7b4      	b.n	800fc20 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800fcb6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fcb8:	693a      	ldr	r2, [r7, #16]
 800fcba:	69bb      	ldr	r3, [r7, #24]
 800fcbc:	441a      	add	r2, r3
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fcc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcc4:	2b1f      	cmp	r3, #31
 800fcc6:	d801      	bhi.n	800fccc <create_name+0xcc>
 800fcc8:	2304      	movs	r3, #4
 800fcca:	e000      	b.n	800fcce <create_name+0xce>
 800fccc:	2300      	movs	r3, #0
 800fcce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fcd2:	e011      	b.n	800fcf8 <create_name+0xf8>
		w = lfn[di - 1];
 800fcd4:	697a      	ldr	r2, [r7, #20]
 800fcd6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fcda:	4413      	add	r3, r2
 800fcdc:	005b      	lsls	r3, r3, #1
 800fcde:	68fa      	ldr	r2, [r7, #12]
 800fce0:	4413      	add	r3, r2
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800fce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fce8:	2b20      	cmp	r3, #32
 800fcea:	d002      	beq.n	800fcf2 <create_name+0xf2>
 800fcec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcee:	2b2e      	cmp	r3, #46	; 0x2e
 800fcf0:	d106      	bne.n	800fd00 <create_name+0x100>
		di--;
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	3b01      	subs	r3, #1
 800fcf6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d1ea      	bne.n	800fcd4 <create_name+0xd4>
 800fcfe:	e000      	b.n	800fd02 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800fd00:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	005b      	lsls	r3, r3, #1
 800fd06:	68fa      	ldr	r2, [r7, #12]
 800fd08:	4413      	add	r3, r2
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d101      	bne.n	800fd18 <create_name+0x118>
 800fd14:	2306      	movs	r3, #6
 800fd16:	e121      	b.n	800ff5c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	3340      	adds	r3, #64	; 0x40
 800fd1c:	220b      	movs	r2, #11
 800fd1e:	2120      	movs	r1, #32
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fd fcdc 	bl	800d6de <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fd26:	2300      	movs	r3, #0
 800fd28:	61bb      	str	r3, [r7, #24]
 800fd2a:	e002      	b.n	800fd32 <create_name+0x132>
 800fd2c:	69bb      	ldr	r3, [r7, #24]
 800fd2e:	3301      	adds	r3, #1
 800fd30:	61bb      	str	r3, [r7, #24]
 800fd32:	69bb      	ldr	r3, [r7, #24]
 800fd34:	005b      	lsls	r3, r3, #1
 800fd36:	68fa      	ldr	r2, [r7, #12]
 800fd38:	4413      	add	r3, r2
 800fd3a:	881b      	ldrh	r3, [r3, #0]
 800fd3c:	2b20      	cmp	r3, #32
 800fd3e:	d0f5      	beq.n	800fd2c <create_name+0x12c>
 800fd40:	69bb      	ldr	r3, [r7, #24]
 800fd42:	005b      	lsls	r3, r3, #1
 800fd44:	68fa      	ldr	r2, [r7, #12]
 800fd46:	4413      	add	r3, r2
 800fd48:	881b      	ldrh	r3, [r3, #0]
 800fd4a:	2b2e      	cmp	r3, #46	; 0x2e
 800fd4c:	d0ee      	beq.n	800fd2c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800fd4e:	69bb      	ldr	r3, [r7, #24]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d009      	beq.n	800fd68 <create_name+0x168>
 800fd54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd58:	f043 0303 	orr.w	r3, r3, #3
 800fd5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800fd60:	e002      	b.n	800fd68 <create_name+0x168>
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	3b01      	subs	r3, #1
 800fd66:	617b      	str	r3, [r7, #20]
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d009      	beq.n	800fd82 <create_name+0x182>
 800fd6e:	697a      	ldr	r2, [r7, #20]
 800fd70:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fd74:	4413      	add	r3, r2
 800fd76:	005b      	lsls	r3, r3, #1
 800fd78:	68fa      	ldr	r2, [r7, #12]
 800fd7a:	4413      	add	r3, r2
 800fd7c:	881b      	ldrh	r3, [r3, #0]
 800fd7e:	2b2e      	cmp	r3, #46	; 0x2e
 800fd80:	d1ef      	bne.n	800fd62 <create_name+0x162>

	i = b = 0; ni = 8;
 800fd82:	2300      	movs	r3, #0
 800fd84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fd88:	2300      	movs	r3, #0
 800fd8a:	623b      	str	r3, [r7, #32]
 800fd8c:	2308      	movs	r3, #8
 800fd8e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800fd90:	69bb      	ldr	r3, [r7, #24]
 800fd92:	1c5a      	adds	r2, r3, #1
 800fd94:	61ba      	str	r2, [r7, #24]
 800fd96:	005b      	lsls	r3, r3, #1
 800fd98:	68fa      	ldr	r2, [r7, #12]
 800fd9a:	4413      	add	r3, r2
 800fd9c:	881b      	ldrh	r3, [r3, #0]
 800fd9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800fda0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f000 8090 	beq.w	800fec8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fda8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdaa:	2b20      	cmp	r3, #32
 800fdac:	d006      	beq.n	800fdbc <create_name+0x1bc>
 800fdae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdb0:	2b2e      	cmp	r3, #46	; 0x2e
 800fdb2:	d10a      	bne.n	800fdca <create_name+0x1ca>
 800fdb4:	69ba      	ldr	r2, [r7, #24]
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d006      	beq.n	800fdca <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800fdbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdc0:	f043 0303 	orr.w	r3, r3, #3
 800fdc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fdc8:	e07d      	b.n	800fec6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800fdca:	6a3a      	ldr	r2, [r7, #32]
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d203      	bcs.n	800fdda <create_name+0x1da>
 800fdd2:	69ba      	ldr	r2, [r7, #24]
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d123      	bne.n	800fe22 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800fdda:	69fb      	ldr	r3, [r7, #28]
 800fddc:	2b0b      	cmp	r3, #11
 800fdde:	d106      	bne.n	800fdee <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800fde0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fde4:	f043 0303 	orr.w	r3, r3, #3
 800fde8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fdec:	e06f      	b.n	800fece <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fdee:	69ba      	ldr	r2, [r7, #24]
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d005      	beq.n	800fe02 <create_name+0x202>
 800fdf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdfa:	f043 0303 	orr.w	r3, r3, #3
 800fdfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800fe02:	69ba      	ldr	r2, [r7, #24]
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d860      	bhi.n	800fecc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	61bb      	str	r3, [r7, #24]
 800fe0e:	2308      	movs	r3, #8
 800fe10:	623b      	str	r3, [r7, #32]
 800fe12:	230b      	movs	r3, #11
 800fe14:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800fe16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe1a:	009b      	lsls	r3, r3, #2
 800fe1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fe20:	e051      	b.n	800fec6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800fe22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe24:	2b7f      	cmp	r3, #127	; 0x7f
 800fe26:	d914      	bls.n	800fe52 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800fe28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f001 fce5 	bl	80117fc <ff_convert>
 800fe32:	4603      	mov	r3, r0
 800fe34:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800fe36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d004      	beq.n	800fe46 <create_name+0x246>
 800fe3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe3e:	3b80      	subs	r3, #128	; 0x80
 800fe40:	4a49      	ldr	r2, [pc, #292]	; (800ff68 <create_name+0x368>)
 800fe42:	5cd3      	ldrb	r3, [r2, r3]
 800fe44:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800fe46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe4a:	f043 0302 	orr.w	r3, r3, #2
 800fe4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800fe52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d007      	beq.n	800fe68 <create_name+0x268>
 800fe58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	4843      	ldr	r0, [pc, #268]	; (800ff6c <create_name+0x36c>)
 800fe5e:	f7fd fc7f 	bl	800d760 <chk_chr>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d008      	beq.n	800fe7a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800fe68:	235f      	movs	r3, #95	; 0x5f
 800fe6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fe6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe70:	f043 0303 	orr.w	r3, r3, #3
 800fe74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fe78:	e01b      	b.n	800feb2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fe7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe7c:	2b40      	cmp	r3, #64	; 0x40
 800fe7e:	d909      	bls.n	800fe94 <create_name+0x294>
 800fe80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe82:	2b5a      	cmp	r3, #90	; 0x5a
 800fe84:	d806      	bhi.n	800fe94 <create_name+0x294>
					b |= 2;
 800fe86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe8a:	f043 0302 	orr.w	r3, r3, #2
 800fe8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fe92:	e00e      	b.n	800feb2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fe94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe96:	2b60      	cmp	r3, #96	; 0x60
 800fe98:	d90b      	bls.n	800feb2 <create_name+0x2b2>
 800fe9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe9c:	2b7a      	cmp	r3, #122	; 0x7a
 800fe9e:	d808      	bhi.n	800feb2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800fea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fea4:	f043 0301 	orr.w	r3, r3, #1
 800fea8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800feac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800feae:	3b20      	subs	r3, #32
 800feb0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800feb2:	6a3b      	ldr	r3, [r7, #32]
 800feb4:	1c5a      	adds	r2, r3, #1
 800feb6:	623a      	str	r2, [r7, #32]
 800feb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800feba:	b2d1      	uxtb	r1, r2
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	4413      	add	r3, r2
 800fec0:	460a      	mov	r2, r1
 800fec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800fec6:	e763      	b.n	800fd90 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800fec8:	bf00      	nop
 800feca:	e000      	b.n	800fece <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800fecc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fed4:	2be5      	cmp	r3, #229	; 0xe5
 800fed6:	d103      	bne.n	800fee0 <create_name+0x2e0>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2205      	movs	r2, #5
 800fedc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	2b08      	cmp	r3, #8
 800fee4:	d104      	bne.n	800fef0 <create_name+0x2f0>
 800fee6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800feea:	009b      	lsls	r3, r3, #2
 800feec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fef0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fef4:	f003 030c 	and.w	r3, r3, #12
 800fef8:	2b0c      	cmp	r3, #12
 800fefa:	d005      	beq.n	800ff08 <create_name+0x308>
 800fefc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff00:	f003 0303 	and.w	r3, r3, #3
 800ff04:	2b03      	cmp	r3, #3
 800ff06:	d105      	bne.n	800ff14 <create_name+0x314>
 800ff08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff0c:	f043 0302 	orr.w	r3, r3, #2
 800ff10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ff14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff18:	f003 0302 	and.w	r3, r3, #2
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d117      	bne.n	800ff50 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ff20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff24:	f003 0303 	and.w	r3, r3, #3
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d105      	bne.n	800ff38 <create_name+0x338>
 800ff2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff30:	f043 0310 	orr.w	r3, r3, #16
 800ff34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ff38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff3c:	f003 030c 	and.w	r3, r3, #12
 800ff40:	2b04      	cmp	r3, #4
 800ff42:	d105      	bne.n	800ff50 <create_name+0x350>
 800ff44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff48:	f043 0308 	orr.w	r3, r3, #8
 800ff4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ff56:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800ff5a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3728      	adds	r7, #40	; 0x28
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	08016158 	.word	0x08016158
 800ff68:	08016260 	.word	0x08016260
 800ff6c:	08016164 	.word	0x08016164

0800ff70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ff70:	b590      	push	{r4, r7, lr}
 800ff72:	b087      	sub	sp, #28
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ff84:	e002      	b.n	800ff8c <follow_path+0x1c>
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	3301      	adds	r3, #1
 800ff8a:	603b      	str	r3, [r7, #0]
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	2b2f      	cmp	r3, #47	; 0x2f
 800ff92:	d0f8      	beq.n	800ff86 <follow_path+0x16>
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	2b5c      	cmp	r3, #92	; 0x5c
 800ff9a:	d0f4      	beq.n	800ff86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	2b1f      	cmp	r3, #31
 800ffae:	d80a      	bhi.n	800ffc6 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2280      	movs	r2, #128	; 0x80
 800ffb4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800ffb8:	2100      	movs	r1, #0
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f7fe fc58 	bl	800e870 <dir_sdi>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	75fb      	strb	r3, [r7, #23]
 800ffc4:	e07c      	b.n	80100c0 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ffc6:	463b      	mov	r3, r7
 800ffc8:	4619      	mov	r1, r3
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f7ff fe18 	bl	800fc00 <create_name>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ffd4:	7dfb      	ldrb	r3, [r7, #23]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d16d      	bne.n	80100b6 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f7ff fb36 	bl	800f64c <dir_find>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ffea:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ffec:	7dfb      	ldrb	r3, [r7, #23]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d00a      	beq.n	8010008 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fff2:	7dfb      	ldrb	r3, [r7, #23]
 800fff4:	2b04      	cmp	r3, #4
 800fff6:	d160      	bne.n	80100ba <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fff8:	7afb      	ldrb	r3, [r7, #11]
 800fffa:	f003 0304 	and.w	r3, r3, #4
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d15b      	bne.n	80100ba <follow_path+0x14a>
 8010002:	2305      	movs	r3, #5
 8010004:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010006:	e058      	b.n	80100ba <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010008:	7afb      	ldrb	r3, [r7, #11]
 801000a:	f003 0304 	and.w	r3, r3, #4
 801000e:	2b00      	cmp	r3, #0
 8010010:	d155      	bne.n	80100be <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	799b      	ldrb	r3, [r3, #6]
 8010016:	f003 0310 	and.w	r3, r3, #16
 801001a:	2b00      	cmp	r3, #0
 801001c:	d102      	bne.n	8010024 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 801001e:	2305      	movs	r3, #5
 8010020:	75fb      	strb	r3, [r7, #23]
 8010022:	e04d      	b.n	80100c0 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	2b04      	cmp	r3, #4
 801002a:	d12f      	bne.n	801008c <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	689a      	ldr	r2, [r3, #8]
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801003a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801003e:	693a      	ldr	r2, [r7, #16]
 8010040:	79d2      	ldrb	r2, [r2, #7]
 8010042:	431a      	orrs	r2, r3
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	695b      	ldr	r3, [r3, #20]
 8010054:	3334      	adds	r3, #52	; 0x34
 8010056:	4618      	mov	r0, r3
 8010058:	f7fd f972 	bl	800d340 <ld_dword>
 801005c:	4602      	mov	r2, r0
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	695b      	ldr	r3, [r3, #20]
 8010066:	3321      	adds	r3, #33	; 0x21
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	f003 0302 	and.w	r3, r3, #2
 801006e:	b2da      	uxtb	r2, r3
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	695b      	ldr	r3, [r3, #20]
 8010078:	3338      	adds	r3, #56	; 0x38
 801007a:	4618      	mov	r0, r3
 801007c:	f7fd f983 	bl	800d386 <ld_qword>
 8010080:	4603      	mov	r3, r0
 8010082:	460c      	mov	r4, r1
 8010084:	693a      	ldr	r2, [r7, #16]
 8010086:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801008a:	e79c      	b.n	800ffc6 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010096:	68fa      	ldr	r2, [r7, #12]
 8010098:	8992      	ldrh	r2, [r2, #12]
 801009a:	fbb3 f0f2 	udiv	r0, r3, r2
 801009e:	fb02 f200 	mul.w	r2, r2, r0
 80100a2:	1a9b      	subs	r3, r3, r2
 80100a4:	440b      	add	r3, r1
 80100a6:	4619      	mov	r1, r3
 80100a8:	68f8      	ldr	r0, [r7, #12]
 80100aa:	f7fe fdb7 	bl	800ec1c <ld_clust>
 80100ae:	4602      	mov	r2, r0
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80100b4:	e787      	b.n	800ffc6 <follow_path+0x56>
			if (res != FR_OK) break;
 80100b6:	bf00      	nop
 80100b8:	e002      	b.n	80100c0 <follow_path+0x150>
				break;
 80100ba:	bf00      	nop
 80100bc:	e000      	b.n	80100c0 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80100be:	bf00      	nop
			}
		}
	}

	return res;
 80100c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	371c      	adds	r7, #28
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd90      	pop	{r4, r7, pc}

080100ca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80100ca:	b480      	push	{r7}
 80100cc:	b087      	sub	sp, #28
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80100d2:	f04f 33ff 	mov.w	r3, #4294967295
 80100d6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d031      	beq.n	8010144 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	617b      	str	r3, [r7, #20]
 80100e6:	e002      	b.n	80100ee <get_ldnumber+0x24>
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	3301      	adds	r3, #1
 80100ec:	617b      	str	r3, [r7, #20]
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	2b1f      	cmp	r3, #31
 80100f4:	d903      	bls.n	80100fe <get_ldnumber+0x34>
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	2b3a      	cmp	r3, #58	; 0x3a
 80100fc:	d1f4      	bne.n	80100e8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	2b3a      	cmp	r3, #58	; 0x3a
 8010104:	d11c      	bne.n	8010140 <get_ldnumber+0x76>
			tp = *path;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	1c5a      	adds	r2, r3, #1
 8010110:	60fa      	str	r2, [r7, #12]
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	3b30      	subs	r3, #48	; 0x30
 8010116:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	2b09      	cmp	r3, #9
 801011c:	d80e      	bhi.n	801013c <get_ldnumber+0x72>
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	429a      	cmp	r2, r3
 8010124:	d10a      	bne.n	801013c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d107      	bne.n	801013c <get_ldnumber+0x72>
					vol = (int)i;
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	3301      	adds	r3, #1
 8010134:	617b      	str	r3, [r7, #20]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	697a      	ldr	r2, [r7, #20]
 801013a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801013c:	693b      	ldr	r3, [r7, #16]
 801013e:	e002      	b.n	8010146 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010140:	2300      	movs	r3, #0
 8010142:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010144:	693b      	ldr	r3, [r7, #16]
}
 8010146:	4618      	mov	r0, r3
 8010148:	371c      	adds	r7, #28
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr
	...

08010154 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2200      	movs	r2, #0
 8010162:	70da      	strb	r2, [r3, #3]
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f04f 32ff 	mov.w	r2, #4294967295
 801016a:	63da      	str	r2, [r3, #60]	; 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801016c:	6839      	ldr	r1, [r7, #0]
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7fd fcf2 	bl	800db58 <move_window>
 8010174:	4603      	mov	r3, r0
 8010176:	2b00      	cmp	r3, #0
 8010178:	d001      	beq.n	801017e <check_fs+0x2a>
 801017a:	2304      	movs	r3, #4
 801017c:	e044      	b.n	8010208 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	3340      	adds	r3, #64	; 0x40
 8010182:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010186:	4618      	mov	r0, r3
 8010188:	f7fd f8c2 	bl	800d310 <ld_word>
 801018c:	4603      	mov	r3, r0
 801018e:	461a      	mov	r2, r3
 8010190:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010194:	429a      	cmp	r2, r3
 8010196:	d001      	beq.n	801019c <check_fs+0x48>
 8010198:	2303      	movs	r3, #3
 801019a:	e035      	b.n	8010208 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80101a2:	2be9      	cmp	r3, #233	; 0xe9
 80101a4:	d009      	beq.n	80101ba <check_fs+0x66>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80101ac:	2beb      	cmp	r3, #235	; 0xeb
 80101ae:	d11e      	bne.n	80101ee <check_fs+0x9a>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101b6:	2b90      	cmp	r3, #144	; 0x90
 80101b8:	d119      	bne.n	80101ee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	3340      	adds	r3, #64	; 0x40
 80101be:	3336      	adds	r3, #54	; 0x36
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fd f8bd 	bl	800d340 <ld_dword>
 80101c6:	4603      	mov	r3, r0
 80101c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80101cc:	4a10      	ldr	r2, [pc, #64]	; (8010210 <check_fs+0xbc>)
 80101ce:	4293      	cmp	r3, r2
 80101d0:	d101      	bne.n	80101d6 <check_fs+0x82>
 80101d2:	2300      	movs	r3, #0
 80101d4:	e018      	b.n	8010208 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	3340      	adds	r3, #64	; 0x40
 80101da:	3352      	adds	r3, #82	; 0x52
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fd f8af 	bl	800d340 <ld_dword>
 80101e2:	4602      	mov	r2, r0
 80101e4:	4b0b      	ldr	r3, [pc, #44]	; (8010214 <check_fs+0xc0>)
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d101      	bne.n	80101ee <check_fs+0x9a>
 80101ea:	2300      	movs	r3, #0
 80101ec:	e00c      	b.n	8010208 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	3340      	adds	r3, #64	; 0x40
 80101f2:	220b      	movs	r2, #11
 80101f4:	4908      	ldr	r1, [pc, #32]	; (8010218 <check_fs+0xc4>)
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fd fa8b 	bl	800d712 <mem_cmp>
 80101fc:	4603      	mov	r3, r0
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d101      	bne.n	8010206 <check_fs+0xb2>
 8010202:	2301      	movs	r3, #1
 8010204:	e000      	b.n	8010208 <check_fs+0xb4>
#endif
	return 2;
 8010206:	2302      	movs	r3, #2
}
 8010208:	4618      	mov	r0, r3
 801020a:	3708      	adds	r7, #8
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}
 8010210:	00544146 	.word	0x00544146
 8010214:	33544146 	.word	0x33544146
 8010218:	0801616c 	.word	0x0801616c

0801021c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801021c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8010220:	b098      	sub	sp, #96	; 0x60
 8010222:	af00      	add	r7, sp, #0
 8010224:	60f8      	str	r0, [r7, #12]
 8010226:	60b9      	str	r1, [r7, #8]
 8010228:	4613      	mov	r3, r2
 801022a:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	2200      	movs	r2, #0
 8010230:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010232:	68f8      	ldr	r0, [r7, #12]
 8010234:	f7ff ff49 	bl	80100ca <get_ldnumber>
 8010238:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 801023a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801023c:	2b00      	cmp	r3, #0
 801023e:	da01      	bge.n	8010244 <find_volume+0x28>
 8010240:	230b      	movs	r3, #11
 8010242:	e370      	b.n	8010926 <find_volume+0x70a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010244:	4aae      	ldr	r2, [pc, #696]	; (8010500 <find_volume+0x2e4>)
 8010246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801024c:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801024e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010250:	2b00      	cmp	r3, #0
 8010252:	d101      	bne.n	8010258 <find_volume+0x3c>
 8010254:	230c      	movs	r3, #12
 8010256:	e366      	b.n	8010926 <find_volume+0x70a>

	ENTER_FF(fs);						/* Lock the volume */
 8010258:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801025a:	f7fd fa9c 	bl	800d796 <lock_fs>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d101      	bne.n	8010268 <find_volume+0x4c>
 8010264:	230f      	movs	r3, #15
 8010266:	e35e      	b.n	8010926 <find_volume+0x70a>
	*rfs = fs;							/* Return pointer to the file system object */
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801026c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801026e:	79fb      	ldrb	r3, [r7, #7]
 8010270:	f023 0301 	bic.w	r3, r3, #1
 8010274:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d01a      	beq.n	80102b4 <find_volume+0x98>
		stat = disk_status(fs->drv);
 801027e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010280:	785b      	ldrb	r3, [r3, #1]
 8010282:	4618      	mov	r0, r3
 8010284:	f7fc ffa6 	bl	800d1d4 <disk_status>
 8010288:	4603      	mov	r3, r0
 801028a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801028e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010292:	f003 0301 	and.w	r3, r3, #1
 8010296:	2b00      	cmp	r3, #0
 8010298:	d10c      	bne.n	80102b4 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801029a:	79fb      	ldrb	r3, [r7, #7]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d007      	beq.n	80102b0 <find_volume+0x94>
 80102a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80102a4:	f003 0304 	and.w	r3, r3, #4
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d001      	beq.n	80102b0 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 80102ac:	230a      	movs	r3, #10
 80102ae:	e33a      	b.n	8010926 <find_volume+0x70a>
			}
			return FR_OK;				/* The file system object is valid */
 80102b0:	2300      	movs	r3, #0
 80102b2:	e338      	b.n	8010926 <find_volume+0x70a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80102b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102b6:	2200      	movs	r2, #0
 80102b8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80102ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102bc:	b2da      	uxtb	r2, r3
 80102be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102c0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80102c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102c4:	785b      	ldrb	r3, [r3, #1]
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fc ff9e 	bl	800d208 <disk_initialize>
 80102cc:	4603      	mov	r3, r0
 80102ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80102d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80102d6:	f003 0301 	and.w	r3, r3, #1
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d001      	beq.n	80102e2 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80102de:	2303      	movs	r3, #3
 80102e0:	e321      	b.n	8010926 <find_volume+0x70a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80102e2:	79fb      	ldrb	r3, [r7, #7]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d007      	beq.n	80102f8 <find_volume+0xdc>
 80102e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80102ec:	f003 0304 	and.w	r3, r3, #4
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d001      	beq.n	80102f8 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 80102f4:	230a      	movs	r3, #10
 80102f6:	e316      	b.n	8010926 <find_volume+0x70a>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80102f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102fa:	7858      	ldrb	r0, [r3, #1]
 80102fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102fe:	330c      	adds	r3, #12
 8010300:	461a      	mov	r2, r3
 8010302:	2102      	movs	r1, #2
 8010304:	f7fc ffe6 	bl	800d2d4 <disk_ioctl>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d001      	beq.n	8010312 <find_volume+0xf6>
 801030e:	2301      	movs	r3, #1
 8010310:	e309      	b.n	8010926 <find_volume+0x70a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010314:	899b      	ldrh	r3, [r3, #12]
 8010316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801031a:	d80d      	bhi.n	8010338 <find_volume+0x11c>
 801031c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801031e:	899b      	ldrh	r3, [r3, #12]
 8010320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010324:	d308      	bcc.n	8010338 <find_volume+0x11c>
 8010326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010328:	899b      	ldrh	r3, [r3, #12]
 801032a:	461a      	mov	r2, r3
 801032c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801032e:	899b      	ldrh	r3, [r3, #12]
 8010330:	3b01      	subs	r3, #1
 8010332:	4013      	ands	r3, r2
 8010334:	2b00      	cmp	r3, #0
 8010336:	d001      	beq.n	801033c <find_volume+0x120>
 8010338:	2301      	movs	r3, #1
 801033a:	e2f4      	b.n	8010926 <find_volume+0x70a>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801033c:	2300      	movs	r3, #0
 801033e:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010340:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010342:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010344:	f7ff ff06 	bl	8010154 <check_fs>
 8010348:	4603      	mov	r3, r0
 801034a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801034e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010352:	2b02      	cmp	r3, #2
 8010354:	d14b      	bne.n	80103ee <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010356:	2300      	movs	r3, #0
 8010358:	64bb      	str	r3, [r7, #72]	; 0x48
 801035a:	e01f      	b.n	801039c <find_volume+0x180>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801035c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801035e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8010362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010364:	011b      	lsls	r3, r3, #4
 8010366:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801036a:	4413      	add	r3, r2
 801036c:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801036e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010370:	3304      	adds	r3, #4
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d006      	beq.n	8010386 <find_volume+0x16a>
 8010378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037a:	3308      	adds	r3, #8
 801037c:	4618      	mov	r0, r3
 801037e:	f7fc ffdf 	bl	800d340 <ld_dword>
 8010382:	4602      	mov	r2, r0
 8010384:	e000      	b.n	8010388 <find_volume+0x16c>
 8010386:	2200      	movs	r2, #0
 8010388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801038a:	009b      	lsls	r3, r3, #2
 801038c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8010390:	440b      	add	r3, r1
 8010392:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010398:	3301      	adds	r3, #1
 801039a:	64bb      	str	r3, [r7, #72]	; 0x48
 801039c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801039e:	2b03      	cmp	r3, #3
 80103a0:	d9dc      	bls.n	801035c <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80103a2:	2300      	movs	r3, #0
 80103a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 80103a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d002      	beq.n	80103b2 <find_volume+0x196>
 80103ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103ae:	3b01      	subs	r3, #1
 80103b0:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 80103b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103b4:	009b      	lsls	r3, r3, #2
 80103b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80103ba:	4413      	add	r3, r2
 80103bc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80103c0:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80103c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d005      	beq.n	80103d4 <find_volume+0x1b8>
 80103c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80103ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80103cc:	f7ff fec2 	bl	8010154 <check_fs>
 80103d0:	4603      	mov	r3, r0
 80103d2:	e000      	b.n	80103d6 <find_volume+0x1ba>
 80103d4:	2303      	movs	r3, #3
 80103d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80103da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d905      	bls.n	80103ee <find_volume+0x1d2>
 80103e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103e4:	3301      	adds	r3, #1
 80103e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80103e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103ea:	2b03      	cmp	r3, #3
 80103ec:	d9e1      	bls.n	80103b2 <find_volume+0x196>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80103ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103f2:	2b04      	cmp	r3, #4
 80103f4:	d101      	bne.n	80103fa <find_volume+0x1de>
 80103f6:	2301      	movs	r3, #1
 80103f8:	e295      	b.n	8010926 <find_volume+0x70a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80103fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d901      	bls.n	8010406 <find_volume+0x1ea>
 8010402:	230d      	movs	r3, #13
 8010404:	e28f      	b.n	8010926 <find_volume+0x70a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8010406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801040a:	2b01      	cmp	r3, #1
 801040c:	f040 8101 	bne.w	8010612 <find_volume+0x3f6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8010410:	230b      	movs	r3, #11
 8010412:	64bb      	str	r3, [r7, #72]	; 0x48
 8010414:	e002      	b.n	801041c <find_volume+0x200>
 8010416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010418:	3301      	adds	r3, #1
 801041a:	64bb      	str	r3, [r7, #72]	; 0x48
 801041c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801041e:	2b3f      	cmp	r3, #63	; 0x3f
 8010420:	d806      	bhi.n	8010430 <find_volume+0x214>
 8010422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010426:	4413      	add	r3, r2
 8010428:	3340      	adds	r3, #64	; 0x40
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d0f2      	beq.n	8010416 <find_volume+0x1fa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8010430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010432:	2b3f      	cmp	r3, #63	; 0x3f
 8010434:	d801      	bhi.n	801043a <find_volume+0x21e>
 8010436:	230d      	movs	r3, #13
 8010438:	e275      	b.n	8010926 <find_volume+0x70a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 801043a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801043c:	3340      	adds	r3, #64	; 0x40
 801043e:	3368      	adds	r3, #104	; 0x68
 8010440:	4618      	mov	r0, r3
 8010442:	f7fc ff65 	bl	800d310 <ld_word>
 8010446:	4603      	mov	r3, r0
 8010448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801044c:	d001      	beq.n	8010452 <find_volume+0x236>
 801044e:	230d      	movs	r3, #13
 8010450:	e269      	b.n	8010926 <find_volume+0x70a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8010452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010454:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8010458:	461a      	mov	r2, r3
 801045a:	2301      	movs	r3, #1
 801045c:	4093      	lsls	r3, r2
 801045e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010460:	8992      	ldrh	r2, [r2, #12]
 8010462:	4293      	cmp	r3, r2
 8010464:	d001      	beq.n	801046a <find_volume+0x24e>
			return FR_NO_FILESYSTEM;
 8010466:	230d      	movs	r3, #13
 8010468:	e25d      	b.n	8010926 <find_volume+0x70a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 801046a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801046c:	3340      	adds	r3, #64	; 0x40
 801046e:	3348      	adds	r3, #72	; 0x48
 8010470:	4618      	mov	r0, r3
 8010472:	f7fc ff88 	bl	800d386 <ld_qword>
 8010476:	460a      	mov	r2, r1
 8010478:	4601      	mov	r1, r0
 801047a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801047c:	469b      	mov	fp, r3
 801047e:	f04f 0c00 	mov.w	ip, #0
 8010482:	eb1b 0301 	adds.w	r3, fp, r1
 8010486:	eb4c 0402 	adc.w	r4, ip, r2
 801048a:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 801048e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010492:	2c01      	cmp	r4, #1
 8010494:	bf08      	it	eq
 8010496:	2b00      	cmpeq	r3, #0
 8010498:	d301      	bcc.n	801049e <find_volume+0x282>
 801049a:	230d      	movs	r3, #13
 801049c:	e243      	b.n	8010926 <find_volume+0x70a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 801049e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104a0:	3340      	adds	r3, #64	; 0x40
 80104a2:	3354      	adds	r3, #84	; 0x54
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fc ff4b 	bl	800d340 <ld_dword>
 80104aa:	4602      	mov	r2, r0
 80104ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104ae:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80104b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104b2:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80104b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104b8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80104ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104bc:	789b      	ldrb	r3, [r3, #2]
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d001      	beq.n	80104c6 <find_volume+0x2aa>
 80104c2:	230d      	movs	r3, #13
 80104c4:	e22f      	b.n	8010926 <find_volume+0x70a>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80104c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104c8:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80104cc:	461a      	mov	r2, r3
 80104ce:	2301      	movs	r3, #1
 80104d0:	4093      	lsls	r3, r2
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104d6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80104d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104da:	895b      	ldrh	r3, [r3, #10]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d101      	bne.n	80104e4 <find_volume+0x2c8>
 80104e0:	230d      	movs	r3, #13
 80104e2:	e220      	b.n	8010926 <find_volume+0x70a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80104e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104e6:	3340      	adds	r3, #64	; 0x40
 80104e8:	335c      	adds	r3, #92	; 0x5c
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fc ff28 	bl	800d340 <ld_dword>
 80104f0:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80104f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f4:	4a03      	ldr	r2, [pc, #12]	; (8010504 <find_volume+0x2e8>)
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d906      	bls.n	8010508 <find_volume+0x2ec>
 80104fa:	230d      	movs	r3, #13
 80104fc:	e213      	b.n	8010926 <find_volume+0x70a>
 80104fe:	bf00      	nop
 8010500:	2000021c 	.word	0x2000021c
 8010504:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8010508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050a:	1c9a      	adds	r2, r3, #2
 801050c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801050e:	625a      	str	r2, [r3, #36]	; 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8010510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010512:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010514:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8010516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010518:	3340      	adds	r3, #64	; 0x40
 801051a:	3358      	adds	r3, #88	; 0x58
 801051c:	4618      	mov	r0, r3
 801051e:	f7fc ff0f 	bl	800d340 <ld_dword>
 8010522:	4602      	mov	r2, r0
 8010524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010526:	441a      	add	r2, r3
 8010528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801052a:	639a      	str	r2, [r3, #56]	; 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 801052c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801052e:	3340      	adds	r3, #64	; 0x40
 8010530:	3350      	adds	r3, #80	; 0x50
 8010532:	4618      	mov	r0, r3
 8010534:	f7fc ff04 	bl	800d340 <ld_dword>
 8010538:	4602      	mov	r2, r0
 801053a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801053c:	441a      	add	r2, r3
 801053e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010540:	631a      	str	r2, [r3, #48]	; 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8010542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010546:	4619      	mov	r1, r3
 8010548:	f04f 0200 	mov.w	r2, #0
 801054c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801054e:	895b      	ldrh	r3, [r3, #10]
 8010550:	4618      	mov	r0, r3
 8010552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010554:	fb03 f300 	mul.w	r3, r3, r0
 8010558:	469b      	mov	fp, r3
 801055a:	f04f 0c00 	mov.w	ip, #0
 801055e:	eb1b 0301 	adds.w	r3, fp, r1
 8010562:	eb4c 0402 	adc.w	r4, ip, r2
 8010566:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801056a:	42a2      	cmp	r2, r4
 801056c:	bf08      	it	eq
 801056e:	4299      	cmpeq	r1, r3
 8010570:	d201      	bcs.n	8010576 <find_volume+0x35a>
 8010572:	230d      	movs	r3, #13
 8010574:	e1d7      	b.n	8010926 <find_volume+0x70a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8010576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010578:	3340      	adds	r3, #64	; 0x40
 801057a:	3360      	adds	r3, #96	; 0x60
 801057c:	4618      	mov	r0, r3
 801057e:	f7fc fedf 	bl	800d340 <ld_dword>
 8010582:	4602      	mov	r2, r0
 8010584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010586:	635a      	str	r2, [r3, #52]	; 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8010588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801058a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801058c:	4619      	mov	r1, r3
 801058e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010590:	f7fd fb80 	bl	800dc94 <clust2sect>
 8010594:	4603      	mov	r3, r0
 8010596:	4619      	mov	r1, r3
 8010598:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801059a:	f7fd fadd 	bl	800db58 <move_window>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d001      	beq.n	80105a8 <find_volume+0x38c>
 80105a4:	2301      	movs	r3, #1
 80105a6:	e1be      	b.n	8010926 <find_volume+0x70a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80105a8:	2300      	movs	r3, #0
 80105aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80105ac:	e015      	b.n	80105da <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80105ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105b2:	4413      	add	r3, r2
 80105b4:	3340      	adds	r3, #64	; 0x40
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	2b81      	cmp	r3, #129	; 0x81
 80105ba:	d10b      	bne.n	80105d4 <find_volume+0x3b8>
 80105bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105be:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80105c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105c4:	3314      	adds	r3, #20
 80105c6:	4413      	add	r3, r2
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7fc feb9 	bl	800d340 <ld_dword>
 80105ce:	4603      	mov	r3, r0
 80105d0:	2b02      	cmp	r3, #2
 80105d2:	d009      	beq.n	80105e8 <find_volume+0x3cc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80105d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105d6:	3320      	adds	r3, #32
 80105d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80105da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105dc:	899b      	ldrh	r3, [r3, #12]
 80105de:	461a      	mov	r2, r3
 80105e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d3e3      	bcc.n	80105ae <find_volume+0x392>
 80105e6:	e000      	b.n	80105ea <find_volume+0x3ce>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80105e8:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 80105ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ec:	899b      	ldrh	r3, [r3, #12]
 80105ee:	461a      	mov	r2, r3
 80105f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105f2:	4293      	cmp	r3, r2
 80105f4:	d101      	bne.n	80105fa <find_volume+0x3de>
 80105f6:	230d      	movs	r3, #13
 80105f8:	e195      	b.n	8010926 <find_volume+0x70a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80105fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010600:	621a      	str	r2, [r3, #32]
 8010602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010604:	6a1a      	ldr	r2, [r3, #32]
 8010606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010608:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 801060a:	2304      	movs	r3, #4
 801060c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010610:	e177      	b.n	8010902 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010614:	3340      	adds	r3, #64	; 0x40
 8010616:	330b      	adds	r3, #11
 8010618:	4618      	mov	r0, r3
 801061a:	f7fc fe79 	bl	800d310 <ld_word>
 801061e:	4603      	mov	r3, r0
 8010620:	461a      	mov	r2, r3
 8010622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010624:	899b      	ldrh	r3, [r3, #12]
 8010626:	429a      	cmp	r2, r3
 8010628:	d001      	beq.n	801062e <find_volume+0x412>
 801062a:	230d      	movs	r3, #13
 801062c:	e17b      	b.n	8010926 <find_volume+0x70a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801062e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010630:	3340      	adds	r3, #64	; 0x40
 8010632:	3316      	adds	r3, #22
 8010634:	4618      	mov	r0, r3
 8010636:	f7fc fe6b 	bl	800d310 <ld_word>
 801063a:	4603      	mov	r3, r0
 801063c:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801063e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010640:	2b00      	cmp	r3, #0
 8010642:	d106      	bne.n	8010652 <find_volume+0x436>
 8010644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010646:	3340      	adds	r3, #64	; 0x40
 8010648:	3324      	adds	r3, #36	; 0x24
 801064a:	4618      	mov	r0, r3
 801064c:	f7fc fe78 	bl	800d340 <ld_dword>
 8010650:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 8010652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010654:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010656:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801065a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801065e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010660:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010664:	789b      	ldrb	r3, [r3, #2]
 8010666:	2b01      	cmp	r3, #1
 8010668:	d005      	beq.n	8010676 <find_volume+0x45a>
 801066a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801066c:	789b      	ldrb	r3, [r3, #2]
 801066e:	2b02      	cmp	r3, #2
 8010670:	d001      	beq.n	8010676 <find_volume+0x45a>
 8010672:	230d      	movs	r3, #13
 8010674:	e157      	b.n	8010926 <find_volume+0x70a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010678:	789b      	ldrb	r3, [r3, #2]
 801067a:	461a      	mov	r2, r3
 801067c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801067e:	fb02 f303 	mul.w	r3, r2, r3
 8010682:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010686:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801068a:	b29a      	uxth	r2, r3
 801068c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801068e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010692:	895b      	ldrh	r3, [r3, #10]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d008      	beq.n	80106aa <find_volume+0x48e>
 8010698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801069a:	895b      	ldrh	r3, [r3, #10]
 801069c:	461a      	mov	r2, r3
 801069e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106a0:	895b      	ldrh	r3, [r3, #10]
 80106a2:	3b01      	subs	r3, #1
 80106a4:	4013      	ands	r3, r2
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d001      	beq.n	80106ae <find_volume+0x492>
 80106aa:	230d      	movs	r3, #13
 80106ac:	e13b      	b.n	8010926 <find_volume+0x70a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80106ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106b0:	3340      	adds	r3, #64	; 0x40
 80106b2:	3311      	adds	r3, #17
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7fc fe2b 	bl	800d310 <ld_word>
 80106ba:	4603      	mov	r3, r0
 80106bc:	461a      	mov	r2, r3
 80106be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106c0:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80106c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106c4:	891b      	ldrh	r3, [r3, #8]
 80106c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106c8:	8992      	ldrh	r2, [r2, #12]
 80106ca:	0952      	lsrs	r2, r2, #5
 80106cc:	b292      	uxth	r2, r2
 80106ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80106d2:	fb02 f201 	mul.w	r2, r2, r1
 80106d6:	1a9b      	subs	r3, r3, r2
 80106d8:	b29b      	uxth	r3, r3
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d001      	beq.n	80106e2 <find_volume+0x4c6>
 80106de:	230d      	movs	r3, #13
 80106e0:	e121      	b.n	8010926 <find_volume+0x70a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80106e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106e4:	3340      	adds	r3, #64	; 0x40
 80106e6:	3313      	adds	r3, #19
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7fc fe11 	bl	800d310 <ld_word>
 80106ee:	4603      	mov	r3, r0
 80106f0:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80106f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d106      	bne.n	8010706 <find_volume+0x4ea>
 80106f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106fa:	3340      	adds	r3, #64	; 0x40
 80106fc:	3320      	adds	r3, #32
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fc fe1e 	bl	800d340 <ld_dword>
 8010704:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010708:	3340      	adds	r3, #64	; 0x40
 801070a:	330e      	adds	r3, #14
 801070c:	4618      	mov	r0, r3
 801070e:	f7fc fdff 	bl	800d310 <ld_word>
 8010712:	4603      	mov	r3, r0
 8010714:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010716:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010718:	2b00      	cmp	r3, #0
 801071a:	d101      	bne.n	8010720 <find_volume+0x504>
 801071c:	230d      	movs	r3, #13
 801071e:	e102      	b.n	8010926 <find_volume+0x70a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010720:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010724:	4413      	add	r3, r2
 8010726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010728:	8911      	ldrh	r1, [r2, #8]
 801072a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801072c:	8992      	ldrh	r2, [r2, #12]
 801072e:	0952      	lsrs	r2, r2, #5
 8010730:	b292      	uxth	r2, r2
 8010732:	fbb1 f2f2 	udiv	r2, r1, r2
 8010736:	b292      	uxth	r2, r2
 8010738:	4413      	add	r3, r2
 801073a:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801073c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801073e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010740:	429a      	cmp	r2, r3
 8010742:	d201      	bcs.n	8010748 <find_volume+0x52c>
 8010744:	230d      	movs	r3, #13
 8010746:	e0ee      	b.n	8010926 <find_volume+0x70a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010748:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801074a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074c:	1ad3      	subs	r3, r2, r3
 801074e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010750:	8952      	ldrh	r2, [r2, #10]
 8010752:	fbb3 f3f2 	udiv	r3, r3, r2
 8010756:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801075a:	2b00      	cmp	r3, #0
 801075c:	d101      	bne.n	8010762 <find_volume+0x546>
 801075e:	230d      	movs	r3, #13
 8010760:	e0e1      	b.n	8010926 <find_volume+0x70a>
		fmt = FS_FAT32;
 8010762:	2303      	movs	r3, #3
 8010764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801076e:	4293      	cmp	r3, r2
 8010770:	d802      	bhi.n	8010778 <find_volume+0x55c>
 8010772:	2302      	movs	r3, #2
 8010774:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801077e:	4293      	cmp	r3, r2
 8010780:	d802      	bhi.n	8010788 <find_volume+0x56c>
 8010782:	2301      	movs	r3, #1
 8010784:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078a:	1c9a      	adds	r2, r3, #2
 801078c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801078e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->volbase = bsect;							/* Volume start sector */
 8010790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010792:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010794:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010796:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801079a:	441a      	add	r2, r3
 801079c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801079e:	631a      	str	r2, [r3, #48]	; 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 80107a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80107a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a4:	441a      	add	r2, r3
 80107a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107a8:	639a      	str	r2, [r3, #56]	; 0x38
		if (fmt == FS_FAT32) {
 80107aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107ae:	2b03      	cmp	r3, #3
 80107b0:	d11e      	bne.n	80107f0 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80107b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107b4:	3340      	adds	r3, #64	; 0x40
 80107b6:	332a      	adds	r3, #42	; 0x2a
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7fc fda9 	bl	800d310 <ld_word>
 80107be:	4603      	mov	r3, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d001      	beq.n	80107c8 <find_volume+0x5ac>
 80107c4:	230d      	movs	r3, #13
 80107c6:	e0ae      	b.n	8010926 <find_volume+0x70a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80107c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107ca:	891b      	ldrh	r3, [r3, #8]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d001      	beq.n	80107d4 <find_volume+0x5b8>
 80107d0:	230d      	movs	r3, #13
 80107d2:	e0a8      	b.n	8010926 <find_volume+0x70a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80107d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107d6:	3340      	adds	r3, #64	; 0x40
 80107d8:	332c      	adds	r3, #44	; 0x2c
 80107da:	4618      	mov	r0, r3
 80107dc:	f7fc fdb0 	bl	800d340 <ld_dword>
 80107e0:	4602      	mov	r2, r0
 80107e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107e4:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80107e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ea:	009b      	lsls	r3, r3, #2
 80107ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80107ee:	e01f      	b.n	8010830 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80107f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107f2:	891b      	ldrh	r3, [r3, #8]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d101      	bne.n	80107fc <find_volume+0x5e0>
 80107f8:	230d      	movs	r3, #13
 80107fa:	e094      	b.n	8010926 <find_volume+0x70a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80107fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010802:	441a      	add	r2, r3
 8010804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010806:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801080c:	2b02      	cmp	r3, #2
 801080e:	d103      	bne.n	8010818 <find_volume+0x5fc>
 8010810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010814:	005b      	lsls	r3, r3, #1
 8010816:	e00a      	b.n	801082e <find_volume+0x612>
 8010818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801081a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801081c:	4613      	mov	r3, r2
 801081e:	005b      	lsls	r3, r3, #1
 8010820:	4413      	add	r3, r2
 8010822:	085a      	lsrs	r2, r3, #1
 8010824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010828:	f003 0301 	and.w	r3, r3, #1
 801082c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801082e:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010836:	899b      	ldrh	r3, [r3, #12]
 8010838:	4619      	mov	r1, r3
 801083a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801083c:	440b      	add	r3, r1
 801083e:	3b01      	subs	r3, #1
 8010840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010842:	8989      	ldrh	r1, [r1, #12]
 8010844:	fbb3 f3f1 	udiv	r3, r3, r1
 8010848:	429a      	cmp	r2, r3
 801084a:	d201      	bcs.n	8010850 <find_volume+0x634>
 801084c:	230d      	movs	r3, #13
 801084e:	e06a      	b.n	8010926 <find_volume+0x70a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010852:	f04f 32ff 	mov.w	r2, #4294967295
 8010856:	621a      	str	r2, [r3, #32]
 8010858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801085a:	6a1a      	ldr	r2, [r3, #32]
 801085c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801085e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 8010860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010862:	2280      	movs	r2, #128	; 0x80
 8010864:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010866:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801086a:	2b03      	cmp	r3, #3
 801086c:	d149      	bne.n	8010902 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801086e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010870:	3340      	adds	r3, #64	; 0x40
 8010872:	3330      	adds	r3, #48	; 0x30
 8010874:	4618      	mov	r0, r3
 8010876:	f7fc fd4b 	bl	800d310 <ld_word>
 801087a:	4603      	mov	r3, r0
 801087c:	2b01      	cmp	r3, #1
 801087e:	d140      	bne.n	8010902 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010882:	3301      	adds	r3, #1
 8010884:	4619      	mov	r1, r3
 8010886:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010888:	f7fd f966 	bl	800db58 <move_window>
 801088c:	4603      	mov	r3, r0
 801088e:	2b00      	cmp	r3, #0
 8010890:	d137      	bne.n	8010902 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 8010892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010894:	2200      	movs	r2, #0
 8010896:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801089a:	3340      	adds	r3, #64	; 0x40
 801089c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fc fd35 	bl	800d310 <ld_word>
 80108a6:	4603      	mov	r3, r0
 80108a8:	461a      	mov	r2, r3
 80108aa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d127      	bne.n	8010902 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80108b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108b4:	3340      	adds	r3, #64	; 0x40
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fc fd42 	bl	800d340 <ld_dword>
 80108bc:	4602      	mov	r2, r0
 80108be:	4b1c      	ldr	r3, [pc, #112]	; (8010930 <find_volume+0x714>)
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d11e      	bne.n	8010902 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80108c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108c6:	3340      	adds	r3, #64	; 0x40
 80108c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fc fd37 	bl	800d340 <ld_dword>
 80108d2:	4602      	mov	r2, r0
 80108d4:	4b17      	ldr	r3, [pc, #92]	; (8010934 <find_volume+0x718>)
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d113      	bne.n	8010902 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80108da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108dc:	3340      	adds	r3, #64	; 0x40
 80108de:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fc fd2c 	bl	800d340 <ld_dword>
 80108e8:	4602      	mov	r2, r0
 80108ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108ec:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80108ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108f0:	3340      	adds	r3, #64	; 0x40
 80108f2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7fc fd22 	bl	800d340 <ld_dword>
 80108fc:	4602      	mov	r2, r0
 80108fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010900:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010904:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8010908:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801090a:	4b0b      	ldr	r3, [pc, #44]	; (8010938 <find_volume+0x71c>)
 801090c:	881b      	ldrh	r3, [r3, #0]
 801090e:	3301      	adds	r3, #1
 8010910:	b29a      	uxth	r2, r3
 8010912:	4b09      	ldr	r3, [pc, #36]	; (8010938 <find_volume+0x71c>)
 8010914:	801a      	strh	r2, [r3, #0]
 8010916:	4b08      	ldr	r3, [pc, #32]	; (8010938 <find_volume+0x71c>)
 8010918:	881a      	ldrh	r2, [r3, #0]
 801091a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801091c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801091e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010920:	f7fd f8b2 	bl	800da88 <clear_lock>
#endif
	return FR_OK;
 8010924:	2300      	movs	r3, #0
}
 8010926:	4618      	mov	r0, r3
 8010928:	3760      	adds	r7, #96	; 0x60
 801092a:	46bd      	mov	sp, r7
 801092c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8010930:	41615252 	.word	0x41615252
 8010934:	61417272 	.word	0x61417272
 8010938:	20000220 	.word	0x20000220

0801093c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b084      	sub	sp, #16
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010946:	2309      	movs	r3, #9
 8010948:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d02e      	beq.n	80109ae <validate+0x72>
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d02a      	beq.n	80109ae <validate+0x72>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d025      	beq.n	80109ae <validate+0x72>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	889a      	ldrh	r2, [r3, #4]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	88db      	ldrh	r3, [r3, #6]
 801096c:	429a      	cmp	r2, r3
 801096e:	d11e      	bne.n	80109ae <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	4618      	mov	r0, r3
 8010976:	f7fc ff0e 	bl	800d796 <lock_fs>
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d014      	beq.n	80109aa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	785b      	ldrb	r3, [r3, #1]
 8010986:	4618      	mov	r0, r3
 8010988:	f7fc fc24 	bl	800d1d4 <disk_status>
 801098c:	4603      	mov	r3, r0
 801098e:	f003 0301 	and.w	r3, r3, #1
 8010992:	2b00      	cmp	r3, #0
 8010994:	d102      	bne.n	801099c <validate+0x60>
				res = FR_OK;
 8010996:	2300      	movs	r3, #0
 8010998:	73fb      	strb	r3, [r7, #15]
 801099a:	e008      	b.n	80109ae <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	2100      	movs	r1, #0
 80109a2:	4618      	mov	r0, r3
 80109a4:	f7fc ff0d 	bl	800d7c2 <unlock_fs>
 80109a8:	e001      	b.n	80109ae <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80109aa:	230f      	movs	r3, #15
 80109ac:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80109ae:	7bfb      	ldrb	r3, [r7, #15]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d102      	bne.n	80109ba <validate+0x7e>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	e000      	b.n	80109bc <validate+0x80>
 80109ba:	2300      	movs	r3, #0
 80109bc:	683a      	ldr	r2, [r7, #0]
 80109be:	6013      	str	r3, [r2, #0]
	return res;
 80109c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3710      	adds	r7, #16
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
	...

080109cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b088      	sub	sp, #32
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	60b9      	str	r1, [r7, #8]
 80109d6:	4613      	mov	r3, r2
 80109d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80109de:	f107 0310 	add.w	r3, r7, #16
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7ff fb71 	bl	80100ca <get_ldnumber>
 80109e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80109ea:	69fb      	ldr	r3, [r7, #28]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	da01      	bge.n	80109f4 <f_mount+0x28>
 80109f0:	230b      	movs	r3, #11
 80109f2:	e048      	b.n	8010a86 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80109f4:	4a26      	ldr	r2, [pc, #152]	; (8010a90 <f_mount+0xc4>)
 80109f6:	69fb      	ldr	r3, [r7, #28]
 80109f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80109fe:	69bb      	ldr	r3, [r7, #24]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d00f      	beq.n	8010a24 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010a04:	69b8      	ldr	r0, [r7, #24]
 8010a06:	f7fd f83f 	bl	800da88 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010a0a:	69bb      	ldr	r3, [r7, #24]
 8010a0c:	699b      	ldr	r3, [r3, #24]
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f000 ffd5 	bl	80119be <ff_del_syncobj>
 8010a14:	4603      	mov	r3, r0
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d101      	bne.n	8010a1e <f_mount+0x52>
 8010a1a:	2302      	movs	r3, #2
 8010a1c:	e033      	b.n	8010a86 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	2200      	movs	r2, #0
 8010a22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d00f      	beq.n	8010a4a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	b2da      	uxtb	r2, r3
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	3318      	adds	r3, #24
 8010a38:	4619      	mov	r1, r3
 8010a3a:	4610      	mov	r0, r2
 8010a3c:	f000 ffa4 	bl	8011988 <ff_cre_syncobj>
 8010a40:	4603      	mov	r3, r0
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d101      	bne.n	8010a4a <f_mount+0x7e>
 8010a46:	2302      	movs	r3, #2
 8010a48:	e01d      	b.n	8010a86 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010a4a:	68fa      	ldr	r2, [r7, #12]
 8010a4c:	4910      	ldr	r1, [pc, #64]	; (8010a90 <f_mount+0xc4>)
 8010a4e:	69fb      	ldr	r3, [r7, #28]
 8010a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d002      	beq.n	8010a60 <f_mount+0x94>
 8010a5a:	79fb      	ldrb	r3, [r7, #7]
 8010a5c:	2b01      	cmp	r3, #1
 8010a5e:	d001      	beq.n	8010a64 <f_mount+0x98>
 8010a60:	2300      	movs	r3, #0
 8010a62:	e010      	b.n	8010a86 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010a64:	f107 010c 	add.w	r1, r7, #12
 8010a68:	f107 0308 	add.w	r3, r7, #8
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f7ff fbd4 	bl	801021c <find_volume>
 8010a74:	4603      	mov	r3, r0
 8010a76:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	7dfa      	ldrb	r2, [r7, #23]
 8010a7c:	4611      	mov	r1, r2
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7fc fe9f 	bl	800d7c2 <unlock_fs>
 8010a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3720      	adds	r7, #32
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}
 8010a8e:	bf00      	nop
 8010a90:	2000021c 	.word	0x2000021c

08010a94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010a94:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8010a98:	b0a4      	sub	sp, #144	; 0x90
 8010a9a:	af00      	add	r7, sp, #0
 8010a9c:	60f8      	str	r0, [r7, #12]
 8010a9e:	60b9      	str	r1, [r7, #8]
 8010aa0:	4613      	mov	r3, r2
 8010aa2:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d101      	bne.n	8010aae <f_open+0x1a>
 8010aaa:	2309      	movs	r3, #9
 8010aac:	e2c9      	b.n	8011042 <f_open+0x5ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010aae:	79fb      	ldrb	r3, [r7, #7]
 8010ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ab4:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010ab6:	79fa      	ldrb	r2, [r7, #7]
 8010ab8:	f107 0114 	add.w	r1, r7, #20
 8010abc:	f107 0308 	add.w	r3, r7, #8
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7ff fbab 	bl	801021c <find_volume>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 8010acc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	f040 82a6 	bne.w	8011022 <f_open+0x58e>
		dj.obj.fs = fs;
 8010ad6:	697b      	ldr	r3, [r7, #20]
 8010ad8:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 8010ada:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8010ade:	f000 ff9a 	bl	8011a16 <ff_memalloc>
 8010ae2:	67f8      	str	r0, [r7, #124]	; 0x7c
 8010ae4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d106      	bne.n	8010af8 <f_open+0x64>
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	2111      	movs	r1, #17
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fc fe67 	bl	800d7c2 <unlock_fs>
 8010af4:	2311      	movs	r3, #17
 8010af6:	e2a4      	b.n	8011042 <f_open+0x5ae>
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010afc:	611a      	str	r2, [r3, #16]
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010b02:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8010b06:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8010b08:	68ba      	ldr	r2, [r7, #8]
 8010b0a:	f107 0318 	add.w	r3, r7, #24
 8010b0e:	4611      	mov	r1, r2
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7ff fa2d 	bl	800ff70 <follow_path>
 8010b16:	4603      	mov	r3, r0
 8010b18:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010b1c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d11a      	bne.n	8010b5a <f_open+0xc6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010b24:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8010b28:	b25b      	sxtb	r3, r3
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	da03      	bge.n	8010b36 <f_open+0xa2>
				res = FR_INVALID_NAME;
 8010b2e:	2306      	movs	r3, #6
 8010b30:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010b34:	e011      	b.n	8010b5a <f_open+0xc6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010b36:	79fb      	ldrb	r3, [r7, #7]
 8010b38:	f023 0301 	bic.w	r3, r3, #1
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	bf14      	ite	ne
 8010b40:	2301      	movne	r3, #1
 8010b42:	2300      	moveq	r3, #0
 8010b44:	b2db      	uxtb	r3, r3
 8010b46:	461a      	mov	r2, r3
 8010b48:	f107 0318 	add.w	r3, r7, #24
 8010b4c:	4611      	mov	r1, r2
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7fc fe52 	bl	800d7f8 <chk_lock>
 8010b54:	4603      	mov	r3, r0
 8010b56:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010b5a:	79fb      	ldrb	r3, [r7, #7]
 8010b5c:	f003 031c 	and.w	r3, r3, #28
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f000 8109 	beq.w	8010d78 <f_open+0x2e4>
			if (res != FR_OK) {					/* No file, create new */
 8010b66:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d017      	beq.n	8010b9e <f_open+0x10a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010b6e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010b72:	2b04      	cmp	r3, #4
 8010b74:	d10e      	bne.n	8010b94 <f_open+0x100>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010b76:	f7fc fe9b 	bl	800d8b0 <enq_lock>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d006      	beq.n	8010b8e <f_open+0xfa>
 8010b80:	f107 0318 	add.w	r3, r7, #24
 8010b84:	4618      	mov	r0, r3
 8010b86:	f7fe fe8b 	bl	800f8a0 <dir_register>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	e000      	b.n	8010b90 <f_open+0xfc>
 8010b8e:	2312      	movs	r3, #18
 8010b90:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010b94:	79fb      	ldrb	r3, [r7, #7]
 8010b96:	f043 0308 	orr.w	r3, r3, #8
 8010b9a:	71fb      	strb	r3, [r7, #7]
 8010b9c:	e010      	b.n	8010bc0 <f_open+0x12c>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010b9e:	7fbb      	ldrb	r3, [r7, #30]
 8010ba0:	f003 0311 	and.w	r3, r3, #17
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d003      	beq.n	8010bb0 <f_open+0x11c>
					res = FR_DENIED;
 8010ba8:	2307      	movs	r3, #7
 8010baa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010bae:	e007      	b.n	8010bc0 <f_open+0x12c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010bb0:	79fb      	ldrb	r3, [r7, #7]
 8010bb2:	f003 0304 	and.w	r3, r3, #4
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d002      	beq.n	8010bc0 <f_open+0x12c>
 8010bba:	2308      	movs	r3, #8
 8010bbc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010bc0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f040 80f1 	bne.w	8010dac <f_open+0x318>
 8010bca:	79fb      	ldrb	r3, [r7, #7]
 8010bcc:	f003 0308 	and.w	r3, r3, #8
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	f000 80eb 	beq.w	8010dac <f_open+0x318>
				dw = GET_FATTIME();
 8010bd6:	f7f9 fafd 	bl	800a1d4 <get_fattime>
 8010bda:	67b8      	str	r0, [r7, #120]	; 0x78
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	2b04      	cmp	r3, #4
 8010be2:	f040 8082 	bne.w	8010cea <f_open+0x256>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8010be6:	697a      	ldr	r2, [r7, #20]
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	695b      	ldr	r3, [r3, #20]
 8010bf0:	3334      	adds	r3, #52	; 0x34
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7fc fba4 	bl	800d340 <ld_dword>
 8010bf8:	4602      	mov	r2, r0
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	695b      	ldr	r3, [r3, #20]
 8010c02:	3338      	adds	r3, #56	; 0x38
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7fc fbbe 	bl	800d386 <ld_qword>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	460c      	mov	r4, r1
 8010c0e:	68fa      	ldr	r2, [r7, #12]
 8010c10:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	695b      	ldr	r3, [r3, #20]
 8010c18:	3321      	adds	r3, #33	; 0x21
 8010c1a:	781b      	ldrb	r3, [r3, #0]
 8010c1c:	f003 0302 	and.w	r3, r3, #2
 8010c20:	b2da      	uxtb	r2, r3
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	695b      	ldr	r3, [r3, #20]
 8010c30:	3308      	adds	r3, #8
 8010c32:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7fc fc7e 	bl	800d536 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	695b      	ldr	r3, [r3, #20]
 8010c3e:	3314      	adds	r3, #20
 8010c40:	2200      	movs	r2, #0
 8010c42:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	695b      	ldr	r3, [r3, #20]
 8010c48:	330c      	adds	r3, #12
 8010c4a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7fc fc72 	bl	800d536 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	695b      	ldr	r3, [r3, #20]
 8010c56:	3315      	adds	r3, #21
 8010c58:	2200      	movs	r2, #0
 8010c5a:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	695b      	ldr	r3, [r3, #20]
 8010c60:	3304      	adds	r3, #4
 8010c62:	2220      	movs	r2, #32
 8010c64:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	695b      	ldr	r3, [r3, #20]
 8010c6a:	3334      	adds	r3, #52	; 0x34
 8010c6c:	2100      	movs	r1, #0
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7fc fc61 	bl	800d536 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	695b      	ldr	r3, [r3, #20]
 8010c78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010c7c:	f04f 0200 	mov.w	r2, #0
 8010c80:	f04f 0300 	mov.w	r3, #0
 8010c84:	4608      	mov	r0, r1
 8010c86:	f7fc fc82 	bl	800d58e <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	695b      	ldr	r3, [r3, #20]
 8010c8e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010c92:	f04f 0200 	mov.w	r2, #0
 8010c96:	f04f 0300 	mov.w	r3, #0
 8010c9a:	4608      	mov	r0, r1
 8010c9c:	f7fc fc77 	bl	800d58e <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	695b      	ldr	r3, [r3, #20]
 8010ca4:	3321      	adds	r3, #33	; 0x21
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8010caa:	f107 0318 	add.w	r3, r7, #24
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7fe fb43 	bl	800f33a <store_xdir>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8010cba:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d174      	bne.n	8010dac <f_open+0x318>
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	689b      	ldr	r3, [r3, #8]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d070      	beq.n	8010dac <f_open+0x318>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8010cca:	68f8      	ldr	r0, [r7, #12]
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	689b      	ldr	r3, [r3, #8]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	f7fd fbd0 	bl	800e478 <remove_chain>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	689a      	ldr	r2, [r3, #8]
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	3a01      	subs	r2, #1
 8010ce6:	61da      	str	r2, [r3, #28]
 8010ce8:	e060      	b.n	8010dac <f_open+0x318>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cec:	330e      	adds	r3, #14
 8010cee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7fc fc20 	bl	800d536 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cf8:	3316      	adds	r3, #22
 8010cfa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fc fc1a 	bl	800d536 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d04:	330b      	adds	r3, #11
 8010d06:	2220      	movs	r2, #32
 8010d08:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010d0e:	4611      	mov	r1, r2
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7fd ff83 	bl	800ec1c <ld_clust>
 8010d16:	6778      	str	r0, [r7, #116]	; 0x74
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7fd ff9b 	bl	800ec5a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d26:	331c      	adds	r3, #28
 8010d28:	2100      	movs	r1, #0
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7fc fc03 	bl	800d536 <st_dword>
					fs->wflag = 1;
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	2201      	movs	r2, #1
 8010d34:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d037      	beq.n	8010dac <f_open+0x318>
						dw = fs->winsect;
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d40:	67bb      	str	r3, [r7, #120]	; 0x78
						res = remove_chain(&dj.obj, cl, 0);
 8010d42:	f107 0318 	add.w	r3, r7, #24
 8010d46:	2200      	movs	r2, #0
 8010d48:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fd fb94 	bl	800e478 <remove_chain>
 8010d50:	4603      	mov	r3, r0
 8010d52:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 8010d56:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d126      	bne.n	8010dac <f_open+0x318>
							res = move_window(fs, dw);
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7fc fef8 	bl	800db58 <move_window>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010d72:	3a01      	subs	r2, #1
 8010d74:	61da      	str	r2, [r3, #28]
 8010d76:	e019      	b.n	8010dac <f_open+0x318>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010d78:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d115      	bne.n	8010dac <f_open+0x318>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010d80:	7fbb      	ldrb	r3, [r7, #30]
 8010d82:	f003 0310 	and.w	r3, r3, #16
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d003      	beq.n	8010d92 <f_open+0x2fe>
					res = FR_NO_FILE;
 8010d8a:	2304      	movs	r3, #4
 8010d8c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010d90:	e00c      	b.n	8010dac <f_open+0x318>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010d92:	79fb      	ldrb	r3, [r7, #7]
 8010d94:	f003 0302 	and.w	r3, r3, #2
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d007      	beq.n	8010dac <f_open+0x318>
 8010d9c:	7fbb      	ldrb	r3, [r7, #30]
 8010d9e:	f003 0301 	and.w	r3, r3, #1
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d002      	beq.n	8010dac <f_open+0x318>
						res = FR_DENIED;
 8010da6:	2307      	movs	r3, #7
 8010da8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010dac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d128      	bne.n	8010e06 <f_open+0x372>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010db4:	79fb      	ldrb	r3, [r7, #7]
 8010db6:	f003 0308 	and.w	r3, r3, #8
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d003      	beq.n	8010dc6 <f_open+0x332>
				mode |= FA_MODIFIED;
 8010dbe:	79fb      	ldrb	r3, [r7, #7]
 8010dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dc4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8010dce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010dd4:	79fb      	ldrb	r3, [r7, #7]
 8010dd6:	f023 0301 	bic.w	r3, r3, #1
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	bf14      	ite	ne
 8010dde:	2301      	movne	r3, #1
 8010de0:	2300      	moveq	r3, #0
 8010de2:	b2db      	uxtb	r3, r3
 8010de4:	461a      	mov	r2, r3
 8010de6:	f107 0318 	add.w	r3, r7, #24
 8010dea:	4611      	mov	r1, r2
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7fc fd81 	bl	800d8f4 <inc_lock>
 8010df2:	4602      	mov	r2, r0
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d102      	bne.n	8010e06 <f_open+0x372>
 8010e00:	2302      	movs	r3, #2
 8010e02:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010e06:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	f040 8106 	bne.w	801101c <f_open+0x588>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	2b04      	cmp	r3, #4
 8010e16:	d12b      	bne.n	8010e70 <f_open+0x3dc>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8010e18:	6a3a      	ldr	r2, [r7, #32]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8010e1e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8010e22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010e26:	7ffa      	ldrb	r2, [r7, #31]
 8010e28:	431a      	orrs	r2, r3
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8010e2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	695b      	ldr	r3, [r3, #20]
 8010e38:	3334      	adds	r3, #52	; 0x34
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f7fc fa80 	bl	800d340 <ld_dword>
 8010e40:	4602      	mov	r2, r0
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	695b      	ldr	r3, [r3, #20]
 8010e4a:	3338      	adds	r3, #56	; 0x38
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7fc fa9a 	bl	800d386 <ld_qword>
 8010e52:	4603      	mov	r3, r0
 8010e54:	460c      	mov	r4, r1
 8010e56:	68fa      	ldr	r2, [r7, #12]
 8010e58:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	695b      	ldr	r3, [r3, #20]
 8010e60:	3321      	adds	r3, #33	; 0x21
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	f003 0302 	and.w	r3, r3, #2
 8010e68:	b2da      	uxtb	r2, r3
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	71da      	strb	r2, [r3, #7]
 8010e6e:	e013      	b.n	8010e98 <f_open+0x404>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e74:	4611      	mov	r1, r2
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7fd fed0 	bl	800ec1c <ld_clust>
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e84:	331c      	adds	r3, #28
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7fc fa5a 	bl	800d340 <ld_dword>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	f04f 0400 	mov.w	r4, #0
 8010e92:	68fa      	ldr	r2, [r7, #12]
 8010e94:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010e9e:	697a      	ldr	r2, [r7, #20]
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	88da      	ldrh	r2, [r3, #6]
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	79fa      	ldrb	r2, [r7, #7]
 8010eb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010ec2:	68fa      	ldr	r2, [r7, #12]
 8010ec4:	f04f 0300 	mov.w	r3, #0
 8010ec8:	f04f 0400 	mov.w	r4, #0
 8010ecc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	3354      	adds	r3, #84	; 0x54
 8010ed4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010ed8:	2100      	movs	r1, #0
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fc fbff 	bl	800d6de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010ee0:	79fb      	ldrb	r3, [r7, #7]
 8010ee2:	f003 0320 	and.w	r3, r3, #32
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	f000 8098 	beq.w	801101c <f_open+0x588>
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010ef2:	4323      	orrs	r3, r4
 8010ef4:	f000 8092 	beq.w	801101c <f_open+0x588>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010efe:	68fa      	ldr	r2, [r7, #12]
 8010f00:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	895b      	ldrh	r3, [r3, #10]
 8010f08:	461a      	mov	r2, r3
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	899b      	ldrh	r3, [r3, #12]
 8010f0e:	fb03 f302 	mul.w	r3, r3, r2
 8010f12:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	689b      	ldr	r3, [r3, #8]
 8010f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010f22:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8010f26:	e024      	b.n	8010f72 <f_open+0x4de>
					clst = get_fat(&fp->obj, clst);
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7fc fed0 	bl	800dcd4 <get_fat>
 8010f34:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 8010f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010f3c:	2b01      	cmp	r3, #1
 8010f3e:	d802      	bhi.n	8010f46 <f_open+0x4b2>
 8010f40:	2302      	movs	r3, #2
 8010f42:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f4e:	d102      	bne.n	8010f56 <f_open+0x4c2>
 8010f50:	2301      	movs	r3, #1
 8010f52:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010f56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f58:	469b      	mov	fp, r3
 8010f5a:	f04f 0c00 	mov.w	ip, #0
 8010f5e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8010f62:	460b      	mov	r3, r1
 8010f64:	4614      	mov	r4, r2
 8010f66:	ebb3 030b 	subs.w	r3, r3, fp
 8010f6a:	eb64 040c 	sbc.w	r4, r4, ip
 8010f6e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8010f72:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d109      	bne.n	8010f8e <f_open+0x4fa>
 8010f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	f04f 0200 	mov.w	r2, #0
 8010f82:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8010f86:	42a2      	cmp	r2, r4
 8010f88:	bf08      	it	eq
 8010f8a:	4299      	cmpeq	r1, r3
 8010f8c:	d3cc      	bcc.n	8010f28 <f_open+0x494>
				}
				fp->clust = clst;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010f94:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010f96:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d13e      	bne.n	801101c <f_open+0x588>
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	899b      	ldrh	r3, [r3, #12]
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	f04f 0400 	mov.w	r4, #0
 8010fa8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010fac:	461a      	mov	r2, r3
 8010fae:	4623      	mov	r3, r4
 8010fb0:	f7ef f946 	bl	8000240 <__aeabi_uldivmod>
 8010fb4:	461c      	mov	r4, r3
 8010fb6:	4613      	mov	r3, r2
 8010fb8:	4323      	orrs	r3, r4
 8010fba:	d02f      	beq.n	801101c <f_open+0x588>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fc fe66 	bl	800dc94 <clust2sect>
 8010fc8:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d103      	bne.n	8010fd8 <f_open+0x544>
						res = FR_INT_ERR;
 8010fd0:	2302      	movs	r3, #2
 8010fd2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010fd6:	e021      	b.n	801101c <f_open+0x588>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	899b      	ldrh	r3, [r3, #12]
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	f04f 0400 	mov.w	r4, #0
 8010fe2:	461a      	mov	r2, r3
 8010fe4:	4623      	mov	r3, r4
 8010fe6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010fea:	f7ef f929 	bl	8000240 <__aeabi_uldivmod>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	460c      	mov	r4, r1
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ff6:	441a      	add	r2, r3
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	7858      	ldrb	r0, [r3, #1]
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801100a:	2301      	movs	r3, #1
 801100c:	f7fc f922 	bl	800d254 <disk_read>
 8011010:	4603      	mov	r3, r0
 8011012:	2b00      	cmp	r3, #0
 8011014:	d002      	beq.n	801101c <f_open+0x588>
 8011016:	2301      	movs	r3, #1
 8011018:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 801101c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801101e:	f000 fd06 	bl	8011a2e <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011022:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011026:	2b00      	cmp	r3, #0
 8011028:	d002      	beq.n	8011030 <f_open+0x59c>
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	2200      	movs	r2, #0
 801102e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8011036:	4611      	mov	r1, r2
 8011038:	4618      	mov	r0, r3
 801103a:	f7fc fbc2 	bl	800d7c2 <unlock_fs>
 801103e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8011042:	4618      	mov	r0, r3
 8011044:	3790      	adds	r7, #144	; 0x90
 8011046:	46bd      	mov	sp, r7
 8011048:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0801104c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801104e:	b08d      	sub	sp, #52	; 0x34
 8011050:	af00      	add	r7, sp, #0
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	60b9      	str	r1, [r7, #8]
 8011056:	607a      	str	r2, [r7, #4]
 8011058:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	2200      	movs	r2, #0
 8011062:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f107 0210 	add.w	r2, r7, #16
 801106a:	4611      	mov	r1, r2
 801106c:	4618      	mov	r0, r3
 801106e:	f7ff fc65 	bl	801093c <validate>
 8011072:	4603      	mov	r3, r0
 8011074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801107c:	2b00      	cmp	r3, #0
 801107e:	d108      	bne.n	8011092 <f_write+0x46>
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801108a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801108e:	2b00      	cmp	r3, #0
 8011090:	d009      	beq.n	80110a6 <f_write+0x5a>
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011098:	4611      	mov	r1, r2
 801109a:	4618      	mov	r0, r3
 801109c:	f7fc fb91 	bl	800d7c2 <unlock_fs>
 80110a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80110a4:	e1d3      	b.n	801144e <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110ac:	f003 0302 	and.w	r3, r3, #2
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d106      	bne.n	80110c2 <f_write+0x76>
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	2107      	movs	r1, #7
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7fc fb82 	bl	800d7c2 <unlock_fs>
 80110be:	2307      	movs	r3, #7
 80110c0:	e1c5      	b.n	801144e <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	2b04      	cmp	r3, #4
 80110c8:	f000 81ac 	beq.w	8011424 <f_write+0x3d8>
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80110d2:	461a      	mov	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	441a      	add	r2, r3
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80110de:	429a      	cmp	r2, r3
 80110e0:	f080 81a0 	bcs.w	8011424 <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80110ea:	43db      	mvns	r3, r3
 80110ec:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80110ee:	e199      	b.n	8011424 <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	899b      	ldrh	r3, [r3, #12]
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	f04f 0400 	mov.w	r4, #0
 8011100:	461a      	mov	r2, r3
 8011102:	4623      	mov	r3, r4
 8011104:	f7ef f89c 	bl	8000240 <__aeabi_uldivmod>
 8011108:	461c      	mov	r4, r3
 801110a:	4613      	mov	r3, r2
 801110c:	4323      	orrs	r3, r4
 801110e:	f040 812a 	bne.w	8011366 <f_write+0x31a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	899b      	ldrh	r3, [r3, #12]
 801111c:	b29b      	uxth	r3, r3
 801111e:	f04f 0400 	mov.w	r4, #0
 8011122:	461a      	mov	r2, r3
 8011124:	4623      	mov	r3, r4
 8011126:	f7ef f88b 	bl	8000240 <__aeabi_uldivmod>
 801112a:	4603      	mov	r3, r0
 801112c:	460c      	mov	r4, r1
 801112e:	461a      	mov	r2, r3
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	895b      	ldrh	r3, [r3, #10]
 8011134:	3b01      	subs	r3, #1
 8011136:	4013      	ands	r3, r2
 8011138:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d152      	bne.n	80111e6 <f_write+0x19a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8011146:	4323      	orrs	r3, r4
 8011148:	d10c      	bne.n	8011164 <f_write+0x118>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	689b      	ldr	r3, [r3, #8]
 801114e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011152:	2b00      	cmp	r3, #0
 8011154:	d11c      	bne.n	8011190 <f_write+0x144>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2100      	movs	r1, #0
 801115a:	4618      	mov	r0, r3
 801115c:	f7fd fa40 	bl	800e5e0 <create_chain>
 8011160:	62b8      	str	r0, [r7, #40]	; 0x28
 8011162:	e015      	b.n	8011190 <f_write+0x144>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011168:	2b00      	cmp	r3, #0
 801116a:	d009      	beq.n	8011180 <f_write+0x134>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8011172:	461a      	mov	r2, r3
 8011174:	4623      	mov	r3, r4
 8011176:	68f8      	ldr	r0, [r7, #12]
 8011178:	f7fd fb33 	bl	800e7e2 <clmt_clust>
 801117c:	62b8      	str	r0, [r7, #40]	; 0x28
 801117e:	e007      	b.n	8011190 <f_write+0x144>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011180:	68fa      	ldr	r2, [r7, #12]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011186:	4619      	mov	r1, r3
 8011188:	4610      	mov	r0, r2
 801118a:	f7fd fa29 	bl	800e5e0 <create_chain>
 801118e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011192:	2b00      	cmp	r3, #0
 8011194:	f000 814b 	beq.w	801142e <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801119a:	2b01      	cmp	r3, #1
 801119c:	d10a      	bne.n	80111b4 <f_write+0x168>
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2202      	movs	r2, #2
 80111a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	2102      	movs	r1, #2
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fc fb09 	bl	800d7c2 <unlock_fs>
 80111b0:	2302      	movs	r3, #2
 80111b2:	e14c      	b.n	801144e <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80111b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ba:	d10a      	bne.n	80111d2 <f_write+0x186>
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2201      	movs	r2, #1
 80111c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	2101      	movs	r1, #1
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7fc fafa 	bl	800d7c2 <unlock_fs>
 80111ce:	2301      	movs	r3, #1
 80111d0:	e13d      	b.n	801144e <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111d6:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	689b      	ldr	r3, [r3, #8]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d102      	bne.n	80111e6 <f_write+0x19a>
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111e4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111ec:	b25b      	sxtb	r3, r3
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	da20      	bge.n	8011234 <f_write+0x1e8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	7858      	ldrb	r0, [r3, #1]
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011200:	2301      	movs	r3, #1
 8011202:	f7fc f847 	bl	800d294 <disk_write>
 8011206:	4603      	mov	r3, r0
 8011208:	2b00      	cmp	r3, #0
 801120a:	d00a      	beq.n	8011222 <f_write+0x1d6>
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2201      	movs	r2, #1
 8011210:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	2101      	movs	r1, #1
 8011218:	4618      	mov	r0, r3
 801121a:	f7fc fad2 	bl	800d7c2 <unlock_fs>
 801121e:	2301      	movs	r3, #1
 8011220:	e115      	b.n	801144e <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801122c:	b2da      	uxtb	r2, r3
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011234:	693a      	ldr	r2, [r7, #16]
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801123a:	4619      	mov	r1, r3
 801123c:	4610      	mov	r0, r2
 801123e:	f7fc fd29 	bl	800dc94 <clust2sect>
 8011242:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d10a      	bne.n	8011260 <f_write+0x214>
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	2202      	movs	r2, #2
 801124e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	2102      	movs	r1, #2
 8011256:	4618      	mov	r0, r3
 8011258:	f7fc fab3 	bl	800d7c2 <unlock_fs>
 801125c:	2302      	movs	r3, #2
 801125e:	e0f6      	b.n	801144e <f_write+0x402>
			sect += csect;
 8011260:	697a      	ldr	r2, [r7, #20]
 8011262:	69bb      	ldr	r3, [r7, #24]
 8011264:	4413      	add	r3, r2
 8011266:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	899b      	ldrh	r3, [r3, #12]
 801126c:	461a      	mov	r2, r3
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	fbb3 f3f2 	udiv	r3, r3, r2
 8011274:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011276:	6a3b      	ldr	r3, [r7, #32]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d04b      	beq.n	8011314 <f_write+0x2c8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801127c:	69ba      	ldr	r2, [r7, #24]
 801127e:	6a3b      	ldr	r3, [r7, #32]
 8011280:	4413      	add	r3, r2
 8011282:	693a      	ldr	r2, [r7, #16]
 8011284:	8952      	ldrh	r2, [r2, #10]
 8011286:	4293      	cmp	r3, r2
 8011288:	d905      	bls.n	8011296 <f_write+0x24a>
					cc = fs->csize - csect;
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	895b      	ldrh	r3, [r3, #10]
 801128e:	461a      	mov	r2, r3
 8011290:	69bb      	ldr	r3, [r7, #24]
 8011292:	1ad3      	subs	r3, r2, r3
 8011294:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	7858      	ldrb	r0, [r3, #1]
 801129a:	6a3b      	ldr	r3, [r7, #32]
 801129c:	697a      	ldr	r2, [r7, #20]
 801129e:	69f9      	ldr	r1, [r7, #28]
 80112a0:	f7fb fff8 	bl	800d294 <disk_write>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d00a      	beq.n	80112c0 <f_write+0x274>
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	2201      	movs	r2, #1
 80112ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	2101      	movs	r1, #1
 80112b6:	4618      	mov	r0, r3
 80112b8:	f7fc fa83 	bl	800d7c2 <unlock_fs>
 80112bc:	2301      	movs	r3, #1
 80112be:	e0c6      	b.n	801144e <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	1ad3      	subs	r3, r2, r3
 80112c8:	6a3a      	ldr	r2, [r7, #32]
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d91a      	bls.n	8011304 <f_write+0x2b8>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	1ad3      	subs	r3, r2, r3
 80112dc:	693a      	ldr	r2, [r7, #16]
 80112de:	8992      	ldrh	r2, [r2, #12]
 80112e0:	fb02 f303 	mul.w	r3, r2, r3
 80112e4:	69fa      	ldr	r2, [r7, #28]
 80112e6:	18d1      	adds	r1, r2, r3
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	899b      	ldrh	r3, [r3, #12]
 80112ec:	461a      	mov	r2, r3
 80112ee:	f7fc f9d5 	bl	800d69c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112fc:	b2da      	uxtb	r2, r3
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	899b      	ldrh	r3, [r3, #12]
 8011308:	461a      	mov	r2, r3
 801130a:	6a3b      	ldr	r3, [r7, #32]
 801130c:	fb02 f303 	mul.w	r3, r2, r3
 8011310:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011312:	e05d      	b.n	80113d0 <f_write+0x384>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011318:	697a      	ldr	r2, [r7, #20]
 801131a:	429a      	cmp	r2, r3
 801131c:	d020      	beq.n	8011360 <f_write+0x314>
				fp->fptr < fp->obj.objsize &&
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801132a:	42a2      	cmp	r2, r4
 801132c:	bf08      	it	eq
 801132e:	4299      	cmpeq	r1, r3
 8011330:	d216      	bcs.n	8011360 <f_write+0x314>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	7858      	ldrb	r0, [r3, #1]
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801133c:	2301      	movs	r3, #1
 801133e:	697a      	ldr	r2, [r7, #20]
 8011340:	f7fb ff88 	bl	800d254 <disk_read>
 8011344:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011346:	2b00      	cmp	r3, #0
 8011348:	d00a      	beq.n	8011360 <f_write+0x314>
					ABORT(fs, FR_DISK_ERR);
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2201      	movs	r2, #1
 801134e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	2101      	movs	r1, #1
 8011356:	4618      	mov	r0, r3
 8011358:	f7fc fa33 	bl	800d7c2 <unlock_fs>
 801135c:	2301      	movs	r3, #1
 801135e:	e076      	b.n	801144e <f_write+0x402>
			}
#endif
			fp->sect = sect;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	697a      	ldr	r2, [r7, #20]
 8011364:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	899b      	ldrh	r3, [r3, #12]
 801136a:	4618      	mov	r0, r3
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8011372:	693a      	ldr	r2, [r7, #16]
 8011374:	8992      	ldrh	r2, [r2, #12]
 8011376:	fbb3 f1f2 	udiv	r1, r3, r2
 801137a:	fb02 f201 	mul.w	r2, r2, r1
 801137e:	1a9b      	subs	r3, r3, r2
 8011380:	1ac3      	subs	r3, r0, r3
 8011382:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	429a      	cmp	r2, r3
 801138a:	d901      	bls.n	8011390 <f_write+0x344>
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	899b      	ldrh	r3, [r3, #12]
 80113a0:	b29b      	uxth	r3, r3
 80113a2:	f04f 0400 	mov.w	r4, #0
 80113a6:	461a      	mov	r2, r3
 80113a8:	4623      	mov	r3, r4
 80113aa:	f7ee ff49 	bl	8000240 <__aeabi_uldivmod>
 80113ae:	461c      	mov	r4, r3
 80113b0:	4613      	mov	r3, r2
 80113b2:	442b      	add	r3, r5
 80113b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113b6:	69f9      	ldr	r1, [r7, #28]
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7fc f96f 	bl	800d69c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80113c8:	b2da      	uxtb	r2, r3
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80113d0:	69fa      	ldr	r2, [r7, #28]
 80113d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d4:	4413      	add	r3, r2
 80113d6:	61fb      	str	r3, [r7, #28]
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80113de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e0:	461d      	mov	r5, r3
 80113e2:	f04f 0600 	mov.w	r6, #0
 80113e6:	186b      	adds	r3, r5, r1
 80113e8:	eb46 0402 	adc.w	r4, r6, r2
 80113ec:	68fa      	ldr	r2, [r7, #12]
 80113ee:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80113f8:	68fa      	ldr	r2, [r7, #12]
 80113fa:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 80113fe:	4294      	cmp	r4, r2
 8011400:	bf08      	it	eq
 8011402:	428b      	cmpeq	r3, r1
 8011404:	d201      	bcs.n	801140a <f_write+0x3be>
 8011406:	460b      	mov	r3, r1
 8011408:	4614      	mov	r4, r2
 801140a:	68fa      	ldr	r2, [r7, #12]
 801140c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011416:	441a      	add	r2, r3
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	601a      	str	r2, [r3, #0]
 801141c:	687a      	ldr	r2, [r7, #4]
 801141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011420:	1ad3      	subs	r3, r2, r3
 8011422:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2b00      	cmp	r3, #0
 8011428:	f47f ae62 	bne.w	80110f0 <f_write+0xa4>
 801142c:	e000      	b.n	8011430 <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801142e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801143a:	b2da      	uxtb	r2, r3
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	2100      	movs	r1, #0
 8011446:	4618      	mov	r0, r3
 8011448:	f7fc f9bb 	bl	800d7c2 <unlock_fs>
 801144c:	2300      	movs	r3, #0
}
 801144e:	4618      	mov	r0, r3
 8011450:	3734      	adds	r7, #52	; 0x34
 8011452:	46bd      	mov	sp, r7
 8011454:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011456 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011456:	b590      	push	{r4, r7, lr}
 8011458:	b09d      	sub	sp, #116	; 0x74
 801145a:	af00      	add	r7, sp, #0
 801145c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8011464:	4611      	mov	r1, r2
 8011466:	4618      	mov	r0, r3
 8011468:	f7ff fa68 	bl	801093c <validate>
 801146c:	4603      	mov	r3, r0
 801146e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 8011472:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011476:	2b00      	cmp	r3, #0
 8011478:	f040 8127 	bne.w	80116ca <f_sync+0x274>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011486:	2b00      	cmp	r3, #0
 8011488:	f000 811f 	beq.w	80116ca <f_sync+0x274>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011492:	b25b      	sxtb	r3, r3
 8011494:	2b00      	cmp	r3, #0
 8011496:	da1c      	bge.n	80114d2 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801149a:	7858      	ldrb	r0, [r3, #1]
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80114a6:	2301      	movs	r3, #1
 80114a8:	f7fb fef4 	bl	800d294 <disk_write>
 80114ac:	4603      	mov	r3, r0
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d006      	beq.n	80114c0 <f_sync+0x6a>
 80114b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114b4:	2101      	movs	r1, #1
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7fc f983 	bl	800d7c2 <unlock_fs>
 80114bc:	2301      	movs	r3, #1
 80114be:	e10d      	b.n	80116dc <f_sync+0x286>
				fp->flag &= (BYTE)~FA_DIRTY;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80114c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114ca:	b2da      	uxtb	r2, r3
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80114d2:	f7f8 fe7f 	bl	800a1d4 <get_fattime>
 80114d6:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80114d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114da:	781b      	ldrb	r3, [r3, #0]
 80114dc:	2b04      	cmp	r3, #4
 80114de:	f040 80a9 	bne.w	8011634 <f_sync+0x1de>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7fc ff67 	bl	800e3b8 <fill_first_frag>
 80114ea:	4603      	mov	r3, r0
 80114ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 80114f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d10a      	bne.n	801150e <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114fe:	f04f 32ff 	mov.w	r2, #4294967295
 8011502:	4619      	mov	r1, r3
 8011504:	f7fc ff87 	bl	800e416 <fill_last_frag>
 8011508:	4603      	mov	r3, r0
 801150a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 801150e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011512:	2b00      	cmp	r3, #0
 8011514:	f040 80d9 	bne.w	80116ca <f_sync+0x274>
					INIT_NAMBUF(fs);
 8011518:	f44f 608c 	mov.w	r0, #1120	; 0x460
 801151c:	f000 fa7b 	bl	8011a16 <ff_memalloc>
 8011520:	6638      	str	r0, [r7, #96]	; 0x60
 8011522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011524:	2b00      	cmp	r3, #0
 8011526:	d106      	bne.n	8011536 <f_sync+0xe0>
 8011528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801152a:	2111      	movs	r1, #17
 801152c:	4618      	mov	r0, r3
 801152e:	f7fc f948 	bl	800d7c2 <unlock_fs>
 8011532:	2311      	movs	r3, #17
 8011534:	e0d2      	b.n	80116dc <f_sync+0x286>
 8011536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011538:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801153a:	611a      	str	r2, [r3, #16]
 801153c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801153e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011540:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8011544:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8011546:	687a      	ldr	r2, [r7, #4]
 8011548:	f107 0308 	add.w	r3, r7, #8
 801154c:	4611      	mov	r1, r2
 801154e:	4618      	mov	r0, r3
 8011550:	f7fd feb6 	bl	800f2c0 <load_obj_dir>
 8011554:	4603      	mov	r3, r0
 8011556:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 801155a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801155e:	2b00      	cmp	r3, #0
 8011560:	d164      	bne.n	801162c <f_sync+0x1d6>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8011562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011564:	695b      	ldr	r3, [r3, #20]
 8011566:	3304      	adds	r3, #4
 8011568:	781a      	ldrb	r2, [r3, #0]
 801156a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801156c:	695b      	ldr	r3, [r3, #20]
 801156e:	3304      	adds	r3, #4
 8011570:	f042 0220 	orr.w	r2, r2, #32
 8011574:	b2d2      	uxtb	r2, r2
 8011576:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	79da      	ldrb	r2, [r3, #7]
 801157c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801157e:	695b      	ldr	r3, [r3, #20]
 8011580:	3321      	adds	r3, #33	; 0x21
 8011582:	f042 0201 	orr.w	r2, r2, #1
 8011586:	b2d2      	uxtb	r2, r2
 8011588:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 801158a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801158c:	695b      	ldr	r3, [r3, #20]
 801158e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	689b      	ldr	r3, [r3, #8]
 8011596:	4619      	mov	r1, r3
 8011598:	4610      	mov	r0, r2
 801159a:	f7fb ffcc 	bl	800d536 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 801159e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115a0:	695b      	ldr	r3, [r3, #20]
 80115a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80115ac:	461a      	mov	r2, r3
 80115ae:	4623      	mov	r3, r4
 80115b0:	4608      	mov	r0, r1
 80115b2:	f7fb ffec 	bl	800d58e <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80115b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115b8:	695b      	ldr	r3, [r3, #20]
 80115ba:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80115c4:	461a      	mov	r2, r3
 80115c6:	4623      	mov	r3, r4
 80115c8:	4608      	mov	r0, r1
 80115ca:	f7fb ffe0 	bl	800d58e <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80115ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115d0:	695b      	ldr	r3, [r3, #20]
 80115d2:	330c      	adds	r3, #12
 80115d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fb ffad 	bl	800d536 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80115dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115de:	695b      	ldr	r3, [r3, #20]
 80115e0:	3315      	adds	r3, #21
 80115e2:	2200      	movs	r2, #0
 80115e4:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80115e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115e8:	695b      	ldr	r3, [r3, #20]
 80115ea:	3310      	adds	r3, #16
 80115ec:	2100      	movs	r1, #0
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fb ffa1 	bl	800d536 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80115f4:	f107 0308 	add.w	r3, r7, #8
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fd fe9e 	bl	800f33a <store_xdir>
 80115fe:	4603      	mov	r3, r0
 8011600:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 8011604:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011608:	2b00      	cmp	r3, #0
 801160a:	d10f      	bne.n	801162c <f_sync+0x1d6>
							res = sync_fs(fs);
 801160c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801160e:	4618      	mov	r0, r3
 8011610:	f7fc fad0 	bl	800dbb4 <sync_fs>
 8011614:	4603      	mov	r3, r0
 8011616:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011624:	b2da      	uxtb	r2, r3
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 801162c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801162e:	f000 f9fe 	bl	8011a2e <ff_memfree>
 8011632:	e04a      	b.n	80116ca <f_sync+0x274>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011634:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801163a:	4619      	mov	r1, r3
 801163c:	4610      	mov	r0, r2
 801163e:	f7fc fa8b 	bl	800db58 <move_window>
 8011642:	4603      	mov	r3, r0
 8011644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8011648:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801164c:	2b00      	cmp	r3, #0
 801164e:	d13c      	bne.n	80116ca <f_sync+0x274>
					dir = fp->dir_ptr;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011654:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011658:	330b      	adds	r3, #11
 801165a:	781a      	ldrb	r2, [r3, #0]
 801165c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801165e:	330b      	adds	r3, #11
 8011660:	f042 0220 	orr.w	r2, r2, #32
 8011664:	b2d2      	uxtb	r2, r2
 8011666:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6818      	ldr	r0, [r3, #0]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	689b      	ldr	r3, [r3, #8]
 8011670:	461a      	mov	r2, r3
 8011672:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011674:	f7fd faf1 	bl	800ec5a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801167a:	f103 021c 	add.w	r2, r3, #28
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8011684:	4619      	mov	r1, r3
 8011686:	4610      	mov	r0, r2
 8011688:	f7fb ff55 	bl	800d536 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801168c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801168e:	3316      	adds	r3, #22
 8011690:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011692:	4618      	mov	r0, r3
 8011694:	f7fb ff4f 	bl	800d536 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801169a:	3312      	adds	r3, #18
 801169c:	2100      	movs	r1, #0
 801169e:	4618      	mov	r0, r3
 80116a0:	f7fb ff2e 	bl	800d500 <st_word>
					fs->wflag = 1;
 80116a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116a6:	2201      	movs	r2, #1
 80116a8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80116aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7fc fa81 	bl	800dbb4 <sync_fs>
 80116b2:	4603      	mov	r3, r0
 80116b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80116be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116c2:	b2da      	uxtb	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80116ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116cc:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80116d0:	4611      	mov	r1, r2
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fc f875 	bl	800d7c2 <unlock_fs>
 80116d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80116dc:	4618      	mov	r0, r3
 80116de:	3774      	adds	r7, #116	; 0x74
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd90      	pop	{r4, r7, pc}

080116e4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f7ff feb2 	bl	8011456 <f_sync>
 80116f2:	4603      	mov	r3, r0
 80116f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80116f6:	7bfb      	ldrb	r3, [r7, #15]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d11d      	bne.n	8011738 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f107 0208 	add.w	r2, r7, #8
 8011702:	4611      	mov	r1, r2
 8011704:	4618      	mov	r0, r3
 8011706:	f7ff f919 	bl	801093c <validate>
 801170a:	4603      	mov	r3, r0
 801170c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801170e:	7bfb      	ldrb	r3, [r7, #15]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d111      	bne.n	8011738 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011718:	4618      	mov	r0, r3
 801171a:	f7fc f979 	bl	800da10 <dec_lock>
 801171e:	4603      	mov	r3, r0
 8011720:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011722:	7bfb      	ldrb	r3, [r7, #15]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d102      	bne.n	801172e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	2200      	movs	r2, #0
 801172c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	2100      	movs	r1, #0
 8011732:	4618      	mov	r0, r3
 8011734:	f7fc f845 	bl	800d7c2 <unlock_fs>
#endif
		}
	}
	return res;
 8011738:	7bfb      	ldrb	r3, [r7, #15]
}
 801173a:	4618      	mov	r0, r3
 801173c:	3710      	adds	r7, #16
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
	...

08011744 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011744:	b480      	push	{r7}
 8011746:	b087      	sub	sp, #28
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	4613      	mov	r3, r2
 8011750:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011752:	2301      	movs	r3, #1
 8011754:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011756:	2300      	movs	r3, #0
 8011758:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801175a:	4b1f      	ldr	r3, [pc, #124]	; (80117d8 <FATFS_LinkDriverEx+0x94>)
 801175c:	7a5b      	ldrb	r3, [r3, #9]
 801175e:	b2db      	uxtb	r3, r3
 8011760:	2b00      	cmp	r3, #0
 8011762:	d131      	bne.n	80117c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011764:	4b1c      	ldr	r3, [pc, #112]	; (80117d8 <FATFS_LinkDriverEx+0x94>)
 8011766:	7a5b      	ldrb	r3, [r3, #9]
 8011768:	b2db      	uxtb	r3, r3
 801176a:	461a      	mov	r2, r3
 801176c:	4b1a      	ldr	r3, [pc, #104]	; (80117d8 <FATFS_LinkDriverEx+0x94>)
 801176e:	2100      	movs	r1, #0
 8011770:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011772:	4b19      	ldr	r3, [pc, #100]	; (80117d8 <FATFS_LinkDriverEx+0x94>)
 8011774:	7a5b      	ldrb	r3, [r3, #9]
 8011776:	b2db      	uxtb	r3, r3
 8011778:	4a17      	ldr	r2, [pc, #92]	; (80117d8 <FATFS_LinkDriverEx+0x94>)
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	4413      	add	r3, r2
 801177e:	68fa      	ldr	r2, [r7, #12]
 8011780:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011782:	4b15      	ldr	r3, [pc, #84]	; (80117d8 <FATFS_LinkDriverEx+0x94>)
 8011784:	7a5b      	ldrb	r3, [r3, #9]
 8011786:	b2db      	uxtb	r3, r3
 8011788:	461a      	mov	r2, r3
 801178a:	4b13      	ldr	r3, [pc, #76]	; (80117d8 <FATFS_LinkDriverEx+0x94>)
 801178c:	4413      	add	r3, r2
 801178e:	79fa      	ldrb	r2, [r7, #7]
 8011790:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011792:	4b11      	ldr	r3, [pc, #68]	; (80117d8 <FATFS_LinkDriverEx+0x94>)
 8011794:	7a5b      	ldrb	r3, [r3, #9]
 8011796:	b2db      	uxtb	r3, r3
 8011798:	1c5a      	adds	r2, r3, #1
 801179a:	b2d1      	uxtb	r1, r2
 801179c:	4a0e      	ldr	r2, [pc, #56]	; (80117d8 <FATFS_LinkDriverEx+0x94>)
 801179e:	7251      	strb	r1, [r2, #9]
 80117a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80117a2:	7dbb      	ldrb	r3, [r7, #22]
 80117a4:	3330      	adds	r3, #48	; 0x30
 80117a6:	b2da      	uxtb	r2, r3
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	3301      	adds	r3, #1
 80117b0:	223a      	movs	r2, #58	; 0x3a
 80117b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	3302      	adds	r3, #2
 80117b8:	222f      	movs	r2, #47	; 0x2f
 80117ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	3303      	adds	r3, #3
 80117c0:	2200      	movs	r2, #0
 80117c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80117c4:	2300      	movs	r3, #0
 80117c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80117c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	371c      	adds	r7, #28
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr
 80117d6:	bf00      	nop
 80117d8:	200002c4 	.word	0x200002c4

080117dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80117e6:	2200      	movs	r2, #0
 80117e8:	6839      	ldr	r1, [r7, #0]
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f7ff ffaa 	bl	8011744 <FATFS_LinkDriverEx>
 80117f0:	4603      	mov	r3, r0
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3708      	adds	r7, #8
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}
	...

080117fc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80117fc:	b480      	push	{r7}
 80117fe:	b085      	sub	sp, #20
 8011800:	af00      	add	r7, sp, #0
 8011802:	4603      	mov	r3, r0
 8011804:	6039      	str	r1, [r7, #0]
 8011806:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011808:	88fb      	ldrh	r3, [r7, #6]
 801180a:	2b7f      	cmp	r3, #127	; 0x7f
 801180c:	d802      	bhi.n	8011814 <ff_convert+0x18>
		c = chr;
 801180e:	88fb      	ldrh	r3, [r7, #6]
 8011810:	81fb      	strh	r3, [r7, #14]
 8011812:	e025      	b.n	8011860 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d00b      	beq.n	8011832 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801181a:	88fb      	ldrh	r3, [r7, #6]
 801181c:	2bff      	cmp	r3, #255	; 0xff
 801181e:	d805      	bhi.n	801182c <ff_convert+0x30>
 8011820:	88fb      	ldrh	r3, [r7, #6]
 8011822:	3b80      	subs	r3, #128	; 0x80
 8011824:	4a12      	ldr	r2, [pc, #72]	; (8011870 <ff_convert+0x74>)
 8011826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801182a:	e000      	b.n	801182e <ff_convert+0x32>
 801182c:	2300      	movs	r3, #0
 801182e:	81fb      	strh	r3, [r7, #14]
 8011830:	e016      	b.n	8011860 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011832:	2300      	movs	r3, #0
 8011834:	81fb      	strh	r3, [r7, #14]
 8011836:	e009      	b.n	801184c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011838:	89fb      	ldrh	r3, [r7, #14]
 801183a:	4a0d      	ldr	r2, [pc, #52]	; (8011870 <ff_convert+0x74>)
 801183c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011840:	88fa      	ldrh	r2, [r7, #6]
 8011842:	429a      	cmp	r2, r3
 8011844:	d006      	beq.n	8011854 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011846:	89fb      	ldrh	r3, [r7, #14]
 8011848:	3301      	adds	r3, #1
 801184a:	81fb      	strh	r3, [r7, #14]
 801184c:	89fb      	ldrh	r3, [r7, #14]
 801184e:	2b7f      	cmp	r3, #127	; 0x7f
 8011850:	d9f2      	bls.n	8011838 <ff_convert+0x3c>
 8011852:	e000      	b.n	8011856 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011854:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011856:	89fb      	ldrh	r3, [r7, #14]
 8011858:	3380      	adds	r3, #128	; 0x80
 801185a:	b29b      	uxth	r3, r3
 801185c:	b2db      	uxtb	r3, r3
 801185e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011860:	89fb      	ldrh	r3, [r7, #14]
}
 8011862:	4618      	mov	r0, r3
 8011864:	3714      	adds	r7, #20
 8011866:	46bd      	mov	sp, r7
 8011868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186c:	4770      	bx	lr
 801186e:	bf00      	nop
 8011870:	080162f0 	.word	0x080162f0

08011874 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011874:	b480      	push	{r7}
 8011876:	b087      	sub	sp, #28
 8011878:	af00      	add	r7, sp, #0
 801187a:	4603      	mov	r3, r0
 801187c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801187e:	88fb      	ldrh	r3, [r7, #6]
 8011880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011884:	d201      	bcs.n	801188a <ff_wtoupper+0x16>
 8011886:	4b3e      	ldr	r3, [pc, #248]	; (8011980 <ff_wtoupper+0x10c>)
 8011888:	e000      	b.n	801188c <ff_wtoupper+0x18>
 801188a:	4b3e      	ldr	r3, [pc, #248]	; (8011984 <ff_wtoupper+0x110>)
 801188c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	1c9a      	adds	r2, r3, #2
 8011892:	617a      	str	r2, [r7, #20]
 8011894:	881b      	ldrh	r3, [r3, #0]
 8011896:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011898:	8a7b      	ldrh	r3, [r7, #18]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d068      	beq.n	8011970 <ff_wtoupper+0xfc>
 801189e:	88fa      	ldrh	r2, [r7, #6]
 80118a0:	8a7b      	ldrh	r3, [r7, #18]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d364      	bcc.n	8011970 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	1c9a      	adds	r2, r3, #2
 80118aa:	617a      	str	r2, [r7, #20]
 80118ac:	881b      	ldrh	r3, [r3, #0]
 80118ae:	823b      	strh	r3, [r7, #16]
 80118b0:	8a3b      	ldrh	r3, [r7, #16]
 80118b2:	0a1b      	lsrs	r3, r3, #8
 80118b4:	81fb      	strh	r3, [r7, #14]
 80118b6:	8a3b      	ldrh	r3, [r7, #16]
 80118b8:	b2db      	uxtb	r3, r3
 80118ba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80118bc:	88fa      	ldrh	r2, [r7, #6]
 80118be:	8a79      	ldrh	r1, [r7, #18]
 80118c0:	8a3b      	ldrh	r3, [r7, #16]
 80118c2:	440b      	add	r3, r1
 80118c4:	429a      	cmp	r2, r3
 80118c6:	da49      	bge.n	801195c <ff_wtoupper+0xe8>
			switch (cmd) {
 80118c8:	89fb      	ldrh	r3, [r7, #14]
 80118ca:	2b08      	cmp	r3, #8
 80118cc:	d84f      	bhi.n	801196e <ff_wtoupper+0xfa>
 80118ce:	a201      	add	r2, pc, #4	; (adr r2, 80118d4 <ff_wtoupper+0x60>)
 80118d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118d4:	080118f9 	.word	0x080118f9
 80118d8:	0801190b 	.word	0x0801190b
 80118dc:	08011921 	.word	0x08011921
 80118e0:	08011929 	.word	0x08011929
 80118e4:	08011931 	.word	0x08011931
 80118e8:	08011939 	.word	0x08011939
 80118ec:	08011941 	.word	0x08011941
 80118f0:	08011949 	.word	0x08011949
 80118f4:	08011951 	.word	0x08011951
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80118f8:	88fa      	ldrh	r2, [r7, #6]
 80118fa:	8a7b      	ldrh	r3, [r7, #18]
 80118fc:	1ad3      	subs	r3, r2, r3
 80118fe:	005b      	lsls	r3, r3, #1
 8011900:	697a      	ldr	r2, [r7, #20]
 8011902:	4413      	add	r3, r2
 8011904:	881b      	ldrh	r3, [r3, #0]
 8011906:	80fb      	strh	r3, [r7, #6]
 8011908:	e027      	b.n	801195a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801190a:	88fa      	ldrh	r2, [r7, #6]
 801190c:	8a7b      	ldrh	r3, [r7, #18]
 801190e:	1ad3      	subs	r3, r2, r3
 8011910:	b29b      	uxth	r3, r3
 8011912:	f003 0301 	and.w	r3, r3, #1
 8011916:	b29b      	uxth	r3, r3
 8011918:	88fa      	ldrh	r2, [r7, #6]
 801191a:	1ad3      	subs	r3, r2, r3
 801191c:	80fb      	strh	r3, [r7, #6]
 801191e:	e01c      	b.n	801195a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011920:	88fb      	ldrh	r3, [r7, #6]
 8011922:	3b10      	subs	r3, #16
 8011924:	80fb      	strh	r3, [r7, #6]
 8011926:	e018      	b.n	801195a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011928:	88fb      	ldrh	r3, [r7, #6]
 801192a:	3b20      	subs	r3, #32
 801192c:	80fb      	strh	r3, [r7, #6]
 801192e:	e014      	b.n	801195a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011930:	88fb      	ldrh	r3, [r7, #6]
 8011932:	3b30      	subs	r3, #48	; 0x30
 8011934:	80fb      	strh	r3, [r7, #6]
 8011936:	e010      	b.n	801195a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011938:	88fb      	ldrh	r3, [r7, #6]
 801193a:	3b1a      	subs	r3, #26
 801193c:	80fb      	strh	r3, [r7, #6]
 801193e:	e00c      	b.n	801195a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011940:	88fb      	ldrh	r3, [r7, #6]
 8011942:	3308      	adds	r3, #8
 8011944:	80fb      	strh	r3, [r7, #6]
 8011946:	e008      	b.n	801195a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011948:	88fb      	ldrh	r3, [r7, #6]
 801194a:	3b50      	subs	r3, #80	; 0x50
 801194c:	80fb      	strh	r3, [r7, #6]
 801194e:	e004      	b.n	801195a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011950:	88fb      	ldrh	r3, [r7, #6]
 8011952:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011956:	80fb      	strh	r3, [r7, #6]
 8011958:	bf00      	nop
			}
			break;
 801195a:	e008      	b.n	801196e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801195c:	89fb      	ldrh	r3, [r7, #14]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d195      	bne.n	801188e <ff_wtoupper+0x1a>
 8011962:	8a3b      	ldrh	r3, [r7, #16]
 8011964:	005b      	lsls	r3, r3, #1
 8011966:	697a      	ldr	r2, [r7, #20]
 8011968:	4413      	add	r3, r2
 801196a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801196c:	e78f      	b.n	801188e <ff_wtoupper+0x1a>
			break;
 801196e:	bf00      	nop
	}

	return chr;
 8011970:	88fb      	ldrh	r3, [r7, #6]
}
 8011972:	4618      	mov	r0, r3
 8011974:	371c      	adds	r7, #28
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr
 801197e:	bf00      	nop
 8011980:	080163f0 	.word	0x080163f0
 8011984:	080165e4 	.word	0x080165e4

08011988 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b084      	sub	sp, #16
 801198c:	af00      	add	r7, sp, #0
 801198e:	4603      	mov	r3, r0
 8011990:	6039      	str	r1, [r7, #0]
 8011992:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8011994:	2200      	movs	r2, #0
 8011996:	2101      	movs	r1, #1
 8011998:	2001      	movs	r0, #1
 801199a:	f000 f9e3 	bl	8011d64 <osSemaphoreNew>
 801199e:	4602      	mov	r2, r0
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	bf14      	ite	ne
 80119ac:	2301      	movne	r3, #1
 80119ae:	2300      	moveq	r3, #0
 80119b0:	b2db      	uxtb	r3, r3
 80119b2:	60fb      	str	r3, [r7, #12]

    return ret;
 80119b4:	68fb      	ldr	r3, [r7, #12]
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3710      	adds	r7, #16
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}

080119be <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80119be:	b580      	push	{r7, lr}
 80119c0:	b082      	sub	sp, #8
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 fb28 	bl	801201c <osSemaphoreDelete>
#endif
    return 1;
 80119cc:	2301      	movs	r3, #1
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3708      	adds	r7, #8
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80119d6:	b580      	push	{r7, lr}
 80119d8:	b084      	sub	sp, #16
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80119de:	2300      	movs	r3, #0
 80119e0:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80119e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f000 fa5a 	bl	8011ea0 <osSemaphoreAcquire>
 80119ec:	4603      	mov	r3, r0
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d101      	bne.n	80119f6 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80119f2:	2301      	movs	r3, #1
 80119f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80119f6:	68fb      	ldr	r3, [r7, #12]
}
 80119f8:	4618      	mov	r0, r3
 80119fa:	3710      	adds	r7, #16
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f000 faaf 	bl	8011f6c <osSemaphoreRelease>
#endif
}
 8011a0e:	bf00      	nop
 8011a10:	3708      	adds	r7, #8
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}

08011a16 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8011a16:	b580      	push	{r7, lr}
 8011a18:	b082      	sub	sp, #8
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f003 fb54 	bl	80150cc <pvPortMalloc>
 8011a24:	4603      	mov	r3, r0
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3708      	adds	r7, #8
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}

08011a2e <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8011a2e:	b580      	push	{r7, lr}
 8011a30:	b082      	sub	sp, #8
 8011a32:	af00      	add	r7, sp, #0
 8011a34:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8011a36:	6878      	ldr	r0, [r7, #4]
 8011a38:	f003 fc10 	bl	801525c <vPortFree>
}
 8011a3c:	bf00      	nop
 8011a3e:	3708      	adds	r7, #8
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}

08011a44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011a44:	b480      	push	{r7}
 8011a46:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8011a48:	bf00      	nop
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a50:	4770      	bx	lr
	...

08011a54 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011a54:	b480      	push	{r7}
 8011a56:	b085      	sub	sp, #20
 8011a58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a5a:	f3ef 8305 	mrs	r3, IPSR
 8011a5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011a60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d10f      	bne.n	8011a86 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a66:	f3ef 8310 	mrs	r3, PRIMASK
 8011a6a:	607b      	str	r3, [r7, #4]
  return(result);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d105      	bne.n	8011a7e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011a72:	f3ef 8311 	mrs	r3, BASEPRI
 8011a76:	603b      	str	r3, [r7, #0]
  return(result);
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d007      	beq.n	8011a8e <osKernelInitialize+0x3a>
 8011a7e:	4b0e      	ldr	r3, [pc, #56]	; (8011ab8 <osKernelInitialize+0x64>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	2b02      	cmp	r3, #2
 8011a84:	d103      	bne.n	8011a8e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8011a86:	f06f 0305 	mvn.w	r3, #5
 8011a8a:	60fb      	str	r3, [r7, #12]
 8011a8c:	e00c      	b.n	8011aa8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011a8e:	4b0a      	ldr	r3, [pc, #40]	; (8011ab8 <osKernelInitialize+0x64>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d105      	bne.n	8011aa2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011a96:	4b08      	ldr	r3, [pc, #32]	; (8011ab8 <osKernelInitialize+0x64>)
 8011a98:	2201      	movs	r2, #1
 8011a9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	60fb      	str	r3, [r7, #12]
 8011aa0:	e002      	b.n	8011aa8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8011aa6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011aa8:	68fb      	ldr	r3, [r7, #12]
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3714      	adds	r7, #20
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab4:	4770      	bx	lr
 8011ab6:	bf00      	nop
 8011ab8:	200002d0 	.word	0x200002d0

08011abc <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8011ac2:	f002 fba1 	bl	8014208 <xTaskGetSchedulerState>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d004      	beq.n	8011ad6 <osKernelGetState+0x1a>
 8011acc:	2b02      	cmp	r3, #2
 8011ace:	d105      	bne.n	8011adc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8011ad0:	2302      	movs	r3, #2
 8011ad2:	607b      	str	r3, [r7, #4]
      break;
 8011ad4:	e00c      	b.n	8011af0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8011ad6:	2303      	movs	r3, #3
 8011ad8:	607b      	str	r3, [r7, #4]
      break;
 8011ada:	e009      	b.n	8011af0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8011adc:	4b07      	ldr	r3, [pc, #28]	; (8011afc <osKernelGetState+0x40>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	2b01      	cmp	r3, #1
 8011ae2:	d102      	bne.n	8011aea <osKernelGetState+0x2e>
        state = osKernelReady;
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8011ae8:	e001      	b.n	8011aee <osKernelGetState+0x32>
        state = osKernelInactive;
 8011aea:	2300      	movs	r3, #0
 8011aec:	607b      	str	r3, [r7, #4]
      break;
 8011aee:	bf00      	nop
  }

  return (state);
 8011af0:	687b      	ldr	r3, [r7, #4]
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3708      	adds	r7, #8
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	200002d0 	.word	0x200002d0

08011b00 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b084      	sub	sp, #16
 8011b04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b06:	f3ef 8305 	mrs	r3, IPSR
 8011b0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8011b0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d10f      	bne.n	8011b32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b12:	f3ef 8310 	mrs	r3, PRIMASK
 8011b16:	607b      	str	r3, [r7, #4]
  return(result);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d105      	bne.n	8011b2a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8011b22:	603b      	str	r3, [r7, #0]
  return(result);
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d007      	beq.n	8011b3a <osKernelStart+0x3a>
 8011b2a:	4b0f      	ldr	r3, [pc, #60]	; (8011b68 <osKernelStart+0x68>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	2b02      	cmp	r3, #2
 8011b30:	d103      	bne.n	8011b3a <osKernelStart+0x3a>
    stat = osErrorISR;
 8011b32:	f06f 0305 	mvn.w	r3, #5
 8011b36:	60fb      	str	r3, [r7, #12]
 8011b38:	e010      	b.n	8011b5c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011b3a:	4b0b      	ldr	r3, [pc, #44]	; (8011b68 <osKernelStart+0x68>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	d109      	bne.n	8011b56 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011b42:	f7ff ff7f 	bl	8011a44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011b46:	4b08      	ldr	r3, [pc, #32]	; (8011b68 <osKernelStart+0x68>)
 8011b48:	2202      	movs	r2, #2
 8011b4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011b4c:	f001 fefe 	bl	801394c <vTaskStartScheduler>
      stat = osOK;
 8011b50:	2300      	movs	r3, #0
 8011b52:	60fb      	str	r3, [r7, #12]
 8011b54:	e002      	b.n	8011b5c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8011b56:	f04f 33ff 	mov.w	r3, #4294967295
 8011b5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011b5c:	68fb      	ldr	r3, [r7, #12]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3710      	adds	r7, #16
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}
 8011b66:	bf00      	nop
 8011b68:	200002d0 	.word	0x200002d0

08011b6c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b72:	f3ef 8305 	mrs	r3, IPSR
 8011b76:	60bb      	str	r3, [r7, #8]
  return(result);
 8011b78:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d10f      	bne.n	8011b9e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8011b82:	607b      	str	r3, [r7, #4]
  return(result);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d105      	bne.n	8011b96 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8011b8e:	603b      	str	r3, [r7, #0]
  return(result);
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d007      	beq.n	8011ba6 <osKernelGetTickCount+0x3a>
 8011b96:	4b08      	ldr	r3, [pc, #32]	; (8011bb8 <osKernelGetTickCount+0x4c>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	2b02      	cmp	r3, #2
 8011b9c:	d103      	bne.n	8011ba6 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8011b9e:	f001 fff9 	bl	8013b94 <xTaskGetTickCountFromISR>
 8011ba2:	60f8      	str	r0, [r7, #12]
 8011ba4:	e002      	b.n	8011bac <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8011ba6:	f001 ffe5 	bl	8013b74 <xTaskGetTickCount>
 8011baa:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8011bac:	68fb      	ldr	r3, [r7, #12]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3710      	adds	r7, #16
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	200002d0 	.word	0x200002d0

08011bbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b090      	sub	sp, #64	; 0x40
 8011bc0:	af04      	add	r7, sp, #16
 8011bc2:	60f8      	str	r0, [r7, #12]
 8011bc4:	60b9      	str	r1, [r7, #8]
 8011bc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bcc:	f3ef 8305 	mrs	r3, IPSR
 8011bd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8011bd2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	f040 808f 	bne.w	8011cf8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bda:	f3ef 8310 	mrs	r3, PRIMASK
 8011bde:	61bb      	str	r3, [r7, #24]
  return(result);
 8011be0:	69bb      	ldr	r3, [r7, #24]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d105      	bne.n	8011bf2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011be6:	f3ef 8311 	mrs	r3, BASEPRI
 8011bea:	617b      	str	r3, [r7, #20]
  return(result);
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d003      	beq.n	8011bfa <osThreadNew+0x3e>
 8011bf2:	4b44      	ldr	r3, [pc, #272]	; (8011d04 <osThreadNew+0x148>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	2b02      	cmp	r3, #2
 8011bf8:	d07e      	beq.n	8011cf8 <osThreadNew+0x13c>
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d07b      	beq.n	8011cf8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011c00:	2380      	movs	r3, #128	; 0x80
 8011c02:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011c04:	2318      	movs	r3, #24
 8011c06:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8011c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c10:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d045      	beq.n	8011ca4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d002      	beq.n	8011c26 <osThreadNew+0x6a>
        name = attr->name;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	699b      	ldr	r3, [r3, #24]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d002      	beq.n	8011c34 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	699b      	ldr	r3, [r3, #24]
 8011c32:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d008      	beq.n	8011c4c <osThreadNew+0x90>
 8011c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c3c:	2b38      	cmp	r3, #56	; 0x38
 8011c3e:	d805      	bhi.n	8011c4c <osThreadNew+0x90>
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	685b      	ldr	r3, [r3, #4]
 8011c44:	f003 0301 	and.w	r3, r3, #1
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d001      	beq.n	8011c50 <osThreadNew+0x94>
        return (NULL);
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	e054      	b.n	8011cfa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	695b      	ldr	r3, [r3, #20]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d003      	beq.n	8011c60 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	695b      	ldr	r3, [r3, #20]
 8011c5c:	089b      	lsrs	r3, r3, #2
 8011c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	689b      	ldr	r3, [r3, #8]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d00e      	beq.n	8011c86 <osThreadNew+0xca>
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	2b5b      	cmp	r3, #91	; 0x5b
 8011c6e:	d90a      	bls.n	8011c86 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d006      	beq.n	8011c86 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	695b      	ldr	r3, [r3, #20]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d002      	beq.n	8011c86 <osThreadNew+0xca>
        mem = 1;
 8011c80:	2301      	movs	r3, #1
 8011c82:	623b      	str	r3, [r7, #32]
 8011c84:	e010      	b.n	8011ca8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	689b      	ldr	r3, [r3, #8]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d10c      	bne.n	8011ca8 <osThreadNew+0xec>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d108      	bne.n	8011ca8 <osThreadNew+0xec>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	691b      	ldr	r3, [r3, #16]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d104      	bne.n	8011ca8 <osThreadNew+0xec>
          mem = 0;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	623b      	str	r3, [r7, #32]
 8011ca2:	e001      	b.n	8011ca8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011ca8:	6a3b      	ldr	r3, [r7, #32]
 8011caa:	2b01      	cmp	r3, #1
 8011cac:	d110      	bne.n	8011cd0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8011cb2:	687a      	ldr	r2, [r7, #4]
 8011cb4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011cb6:	9202      	str	r2, [sp, #8]
 8011cb8:	9301      	str	r3, [sp, #4]
 8011cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbc:	9300      	str	r3, [sp, #0]
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011cc4:	68f8      	ldr	r0, [r7, #12]
 8011cc6:	f001 fc65 	bl	8013594 <xTaskCreateStatic>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	613b      	str	r3, [r7, #16]
 8011cce:	e013      	b.n	8011cf8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8011cd0:	6a3b      	ldr	r3, [r7, #32]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d110      	bne.n	8011cf8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	f107 0310 	add.w	r3, r7, #16
 8011cde:	9301      	str	r3, [sp, #4]
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce2:	9300      	str	r3, [sp, #0]
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ce8:	68f8      	ldr	r0, [r7, #12]
 8011cea:	f001 fcb3 	bl	8013654 <xTaskCreate>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	2b01      	cmp	r3, #1
 8011cf2:	d001      	beq.n	8011cf8 <osThreadNew+0x13c>
          hTask = NULL;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011cf8:	693b      	ldr	r3, [r7, #16]
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3730      	adds	r7, #48	; 0x30
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	200002d0 	.word	0x200002d0

08011d08 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b086      	sub	sp, #24
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d10:	f3ef 8305 	mrs	r3, IPSR
 8011d14:	613b      	str	r3, [r7, #16]
  return(result);
 8011d16:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d10f      	bne.n	8011d3c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8011d20:	60fb      	str	r3, [r7, #12]
  return(result);
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d105      	bne.n	8011d34 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011d28:	f3ef 8311 	mrs	r3, BASEPRI
 8011d2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d007      	beq.n	8011d44 <osDelay+0x3c>
 8011d34:	4b0a      	ldr	r3, [pc, #40]	; (8011d60 <osDelay+0x58>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	2b02      	cmp	r3, #2
 8011d3a:	d103      	bne.n	8011d44 <osDelay+0x3c>
    stat = osErrorISR;
 8011d3c:	f06f 0305 	mvn.w	r3, #5
 8011d40:	617b      	str	r3, [r7, #20]
 8011d42:	e007      	b.n	8011d54 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8011d44:	2300      	movs	r3, #0
 8011d46:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d002      	beq.n	8011d54 <osDelay+0x4c>
      vTaskDelay(ticks);
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f001 fdc6 	bl	80138e0 <vTaskDelay>
    }
  }

  return (stat);
 8011d54:	697b      	ldr	r3, [r7, #20]
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	3718      	adds	r7, #24
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	200002d0 	.word	0x200002d0

08011d64 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b08c      	sub	sp, #48	; 0x30
 8011d68:	af02      	add	r7, sp, #8
 8011d6a:	60f8      	str	r0, [r7, #12]
 8011d6c:	60b9      	str	r1, [r7, #8]
 8011d6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011d70:	2300      	movs	r3, #0
 8011d72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d74:	f3ef 8305 	mrs	r3, IPSR
 8011d78:	61bb      	str	r3, [r7, #24]
  return(result);
 8011d7a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	f040 8087 	bne.w	8011e90 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d82:	f3ef 8310 	mrs	r3, PRIMASK
 8011d86:	617b      	str	r3, [r7, #20]
  return(result);
 8011d88:	697b      	ldr	r3, [r7, #20]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d105      	bne.n	8011d9a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8011d92:	613b      	str	r3, [r7, #16]
  return(result);
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d003      	beq.n	8011da2 <osSemaphoreNew+0x3e>
 8011d9a:	4b40      	ldr	r3, [pc, #256]	; (8011e9c <osSemaphoreNew+0x138>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	2b02      	cmp	r3, #2
 8011da0:	d076      	beq.n	8011e90 <osSemaphoreNew+0x12c>
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d073      	beq.n	8011e90 <osSemaphoreNew+0x12c>
 8011da8:	68ba      	ldr	r2, [r7, #8]
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d86f      	bhi.n	8011e90 <osSemaphoreNew+0x12c>
    mem = -1;
 8011db0:	f04f 33ff 	mov.w	r3, #4294967295
 8011db4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d015      	beq.n	8011de8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	689b      	ldr	r3, [r3, #8]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d006      	beq.n	8011dd2 <osSemaphoreNew+0x6e>
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	68db      	ldr	r3, [r3, #12]
 8011dc8:	2b4f      	cmp	r3, #79	; 0x4f
 8011dca:	d902      	bls.n	8011dd2 <osSemaphoreNew+0x6e>
        mem = 1;
 8011dcc:	2301      	movs	r3, #1
 8011dce:	623b      	str	r3, [r7, #32]
 8011dd0:	e00c      	b.n	8011dec <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	689b      	ldr	r3, [r3, #8]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d108      	bne.n	8011dec <osSemaphoreNew+0x88>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	68db      	ldr	r3, [r3, #12]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d104      	bne.n	8011dec <osSemaphoreNew+0x88>
          mem = 0;
 8011de2:	2300      	movs	r3, #0
 8011de4:	623b      	str	r3, [r7, #32]
 8011de6:	e001      	b.n	8011dec <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8011de8:	2300      	movs	r3, #0
 8011dea:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8011dec:	6a3b      	ldr	r3, [r7, #32]
 8011dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011df2:	d04d      	beq.n	8011e90 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2b01      	cmp	r3, #1
 8011df8:	d129      	bne.n	8011e4e <osSemaphoreNew+0xea>
        if (mem == 1) {
 8011dfa:	6a3b      	ldr	r3, [r7, #32]
 8011dfc:	2b01      	cmp	r3, #1
 8011dfe:	d10b      	bne.n	8011e18 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	689a      	ldr	r2, [r3, #8]
 8011e04:	2303      	movs	r3, #3
 8011e06:	9300      	str	r3, [sp, #0]
 8011e08:	4613      	mov	r3, r2
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	2100      	movs	r1, #0
 8011e0e:	2001      	movs	r0, #1
 8011e10:	f000 fbf8 	bl	8012604 <xQueueGenericCreateStatic>
 8011e14:	6278      	str	r0, [r7, #36]	; 0x24
 8011e16:	e005      	b.n	8011e24 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8011e18:	2203      	movs	r2, #3
 8011e1a:	2100      	movs	r1, #0
 8011e1c:	2001      	movs	r0, #1
 8011e1e:	f000 fc6e 	bl	80126fe <xQueueGenericCreate>
 8011e22:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d022      	beq.n	8011e70 <osSemaphoreNew+0x10c>
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d01f      	beq.n	8011e70 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011e30:	2300      	movs	r3, #0
 8011e32:	2200      	movs	r2, #0
 8011e34:	2100      	movs	r1, #0
 8011e36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e38:	f000 fd34 	bl	80128a4 <xQueueGenericSend>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	2b01      	cmp	r3, #1
 8011e40:	d016      	beq.n	8011e70 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8011e42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e44:	f001 f9d3 	bl	80131ee <vQueueDelete>
            hSemaphore = NULL;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8011e4c:	e010      	b.n	8011e70 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8011e4e:	6a3b      	ldr	r3, [r7, #32]
 8011e50:	2b01      	cmp	r3, #1
 8011e52:	d108      	bne.n	8011e66 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	689b      	ldr	r3, [r3, #8]
 8011e58:	461a      	mov	r2, r3
 8011e5a:	68b9      	ldr	r1, [r7, #8]
 8011e5c:	68f8      	ldr	r0, [r7, #12]
 8011e5e:	f000 fcb2 	bl	80127c6 <xQueueCreateCountingSemaphoreStatic>
 8011e62:	6278      	str	r0, [r7, #36]	; 0x24
 8011e64:	e004      	b.n	8011e70 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011e66:	68b9      	ldr	r1, [r7, #8]
 8011e68:	68f8      	ldr	r0, [r7, #12]
 8011e6a:	f000 fce5 	bl	8012838 <xQueueCreateCountingSemaphore>
 8011e6e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d00c      	beq.n	8011e90 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d003      	beq.n	8011e84 <osSemaphoreNew+0x120>
          name = attr->name;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	61fb      	str	r3, [r7, #28]
 8011e82:	e001      	b.n	8011e88 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8011e84:	2300      	movs	r3, #0
 8011e86:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011e88:	69f9      	ldr	r1, [r7, #28]
 8011e8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e8c:	f001 fafc 	bl	8013488 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3728      	adds	r7, #40	; 0x28
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}
 8011e9a:	bf00      	nop
 8011e9c:	200002d0 	.word	0x200002d0

08011ea0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b088      	sub	sp, #32
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d103      	bne.n	8011ec0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011eb8:	f06f 0303 	mvn.w	r3, #3
 8011ebc:	61fb      	str	r3, [r7, #28]
 8011ebe:	e04b      	b.n	8011f58 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ec0:	f3ef 8305 	mrs	r3, IPSR
 8011ec4:	617b      	str	r3, [r7, #20]
  return(result);
 8011ec6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d10f      	bne.n	8011eec <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8011ed0:	613b      	str	r3, [r7, #16]
  return(result);
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d105      	bne.n	8011ee4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011ed8:	f3ef 8311 	mrs	r3, BASEPRI
 8011edc:	60fb      	str	r3, [r7, #12]
  return(result);
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d026      	beq.n	8011f32 <osSemaphoreAcquire+0x92>
 8011ee4:	4b1f      	ldr	r3, [pc, #124]	; (8011f64 <osSemaphoreAcquire+0xc4>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	2b02      	cmp	r3, #2
 8011eea:	d122      	bne.n	8011f32 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d003      	beq.n	8011efa <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8011ef2:	f06f 0303 	mvn.w	r3, #3
 8011ef6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011ef8:	e02d      	b.n	8011f56 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8011efa:	2300      	movs	r3, #0
 8011efc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011efe:	f107 0308 	add.w	r3, r7, #8
 8011f02:	461a      	mov	r2, r3
 8011f04:	2100      	movs	r1, #0
 8011f06:	69b8      	ldr	r0, [r7, #24]
 8011f08:	f001 f8ee 	bl	80130e8 <xQueueReceiveFromISR>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	d003      	beq.n	8011f1a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8011f12:	f06f 0302 	mvn.w	r3, #2
 8011f16:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011f18:	e01d      	b.n	8011f56 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d01a      	beq.n	8011f56 <osSemaphoreAcquire+0xb6>
 8011f20:	4b11      	ldr	r3, [pc, #68]	; (8011f68 <osSemaphoreAcquire+0xc8>)
 8011f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f26:	601a      	str	r2, [r3, #0]
 8011f28:	f3bf 8f4f 	dsb	sy
 8011f2c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8011f30:	e011      	b.n	8011f56 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011f32:	6839      	ldr	r1, [r7, #0]
 8011f34:	69b8      	ldr	r0, [r7, #24]
 8011f36:	f000 ffc7 	bl	8012ec8 <xQueueSemaphoreTake>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	d00b      	beq.n	8011f58 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d003      	beq.n	8011f4e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8011f46:	f06f 0301 	mvn.w	r3, #1
 8011f4a:	61fb      	str	r3, [r7, #28]
 8011f4c:	e004      	b.n	8011f58 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8011f4e:	f06f 0302 	mvn.w	r3, #2
 8011f52:	61fb      	str	r3, [r7, #28]
 8011f54:	e000      	b.n	8011f58 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8011f56:	bf00      	nop
      }
    }
  }

  return (stat);
 8011f58:	69fb      	ldr	r3, [r7, #28]
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3720      	adds	r7, #32
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	200002d0 	.word	0x200002d0
 8011f68:	e000ed04 	.word	0xe000ed04

08011f6c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b088      	sub	sp, #32
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011f7c:	69bb      	ldr	r3, [r7, #24]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d103      	bne.n	8011f8a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011f82:	f06f 0303 	mvn.w	r3, #3
 8011f86:	61fb      	str	r3, [r7, #28]
 8011f88:	e03e      	b.n	8012008 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f8a:	f3ef 8305 	mrs	r3, IPSR
 8011f8e:	617b      	str	r3, [r7, #20]
  return(result);
 8011f90:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d10f      	bne.n	8011fb6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f96:	f3ef 8310 	mrs	r3, PRIMASK
 8011f9a:	613b      	str	r3, [r7, #16]
  return(result);
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d105      	bne.n	8011fae <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8011fa6:	60fb      	str	r3, [r7, #12]
  return(result);
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d01e      	beq.n	8011fec <osSemaphoreRelease+0x80>
 8011fae:	4b19      	ldr	r3, [pc, #100]	; (8012014 <osSemaphoreRelease+0xa8>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	2b02      	cmp	r3, #2
 8011fb4:	d11a      	bne.n	8011fec <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011fba:	f107 0308 	add.w	r3, r7, #8
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	69b8      	ldr	r0, [r7, #24]
 8011fc2:	f000 fe0d 	bl	8012be0 <xQueueGiveFromISR>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d003      	beq.n	8011fd4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8011fcc:	f06f 0302 	mvn.w	r3, #2
 8011fd0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011fd2:	e018      	b.n	8012006 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d015      	beq.n	8012006 <osSemaphoreRelease+0x9a>
 8011fda:	4b0f      	ldr	r3, [pc, #60]	; (8012018 <osSemaphoreRelease+0xac>)
 8011fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fe0:	601a      	str	r2, [r3, #0]
 8011fe2:	f3bf 8f4f 	dsb	sy
 8011fe6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011fea:	e00c      	b.n	8012006 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011fec:	2300      	movs	r3, #0
 8011fee:	2200      	movs	r2, #0
 8011ff0:	2100      	movs	r1, #0
 8011ff2:	69b8      	ldr	r0, [r7, #24]
 8011ff4:	f000 fc56 	bl	80128a4 <xQueueGenericSend>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	2b01      	cmp	r3, #1
 8011ffc:	d004      	beq.n	8012008 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8011ffe:	f06f 0302 	mvn.w	r3, #2
 8012002:	61fb      	str	r3, [r7, #28]
 8012004:	e000      	b.n	8012008 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012006:	bf00      	nop
    }
  }

  return (stat);
 8012008:	69fb      	ldr	r3, [r7, #28]
}
 801200a:	4618      	mov	r0, r3
 801200c:	3720      	adds	r7, #32
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	200002d0 	.word	0x200002d0
 8012018:	e000ed04 	.word	0xe000ed04

0801201c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801201c:	b580      	push	{r7, lr}
 801201e:	b088      	sub	sp, #32
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012028:	f3ef 8305 	mrs	r3, IPSR
 801202c:	617b      	str	r3, [r7, #20]
  return(result);
 801202e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8012030:	2b00      	cmp	r3, #0
 8012032:	d10f      	bne.n	8012054 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012034:	f3ef 8310 	mrs	r3, PRIMASK
 8012038:	613b      	str	r3, [r7, #16]
  return(result);
 801203a:	693b      	ldr	r3, [r7, #16]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d105      	bne.n	801204c <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012040:	f3ef 8311 	mrs	r3, BASEPRI
 8012044:	60fb      	str	r3, [r7, #12]
  return(result);
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d007      	beq.n	801205c <osSemaphoreDelete+0x40>
 801204c:	4b0d      	ldr	r3, [pc, #52]	; (8012084 <osSemaphoreDelete+0x68>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	2b02      	cmp	r3, #2
 8012052:	d103      	bne.n	801205c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8012054:	f06f 0305 	mvn.w	r3, #5
 8012058:	61fb      	str	r3, [r7, #28]
 801205a:	e00e      	b.n	801207a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 801205c:	69bb      	ldr	r3, [r7, #24]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d103      	bne.n	801206a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8012062:	f06f 0303 	mvn.w	r3, #3
 8012066:	61fb      	str	r3, [r7, #28]
 8012068:	e007      	b.n	801207a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801206a:	69b8      	ldr	r0, [r7, #24]
 801206c:	f001 fa34 	bl	80134d8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8012070:	2300      	movs	r3, #0
 8012072:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8012074:	69b8      	ldr	r0, [r7, #24]
 8012076:	f001 f8ba 	bl	80131ee <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801207a:	69fb      	ldr	r3, [r7, #28]
}
 801207c:	4618      	mov	r0, r3
 801207e:	3720      	adds	r7, #32
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}
 8012084:	200002d0 	.word	0x200002d0

08012088 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012088:	b580      	push	{r7, lr}
 801208a:	b08c      	sub	sp, #48	; 0x30
 801208c:	af02      	add	r7, sp, #8
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	60b9      	str	r1, [r7, #8]
 8012092:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012094:	2300      	movs	r3, #0
 8012096:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012098:	f3ef 8305 	mrs	r3, IPSR
 801209c:	61bb      	str	r3, [r7, #24]
  return(result);
 801209e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d170      	bne.n	8012186 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120a4:	f3ef 8310 	mrs	r3, PRIMASK
 80120a8:	617b      	str	r3, [r7, #20]
  return(result);
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d105      	bne.n	80120bc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80120b0:	f3ef 8311 	mrs	r3, BASEPRI
 80120b4:	613b      	str	r3, [r7, #16]
  return(result);
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d003      	beq.n	80120c4 <osMessageQueueNew+0x3c>
 80120bc:	4b34      	ldr	r3, [pc, #208]	; (8012190 <osMessageQueueNew+0x108>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	2b02      	cmp	r3, #2
 80120c2:	d060      	beq.n	8012186 <osMessageQueueNew+0xfe>
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d05d      	beq.n	8012186 <osMessageQueueNew+0xfe>
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d05a      	beq.n	8012186 <osMessageQueueNew+0xfe>
    mem = -1;
 80120d0:	f04f 33ff 	mov.w	r3, #4294967295
 80120d4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d029      	beq.n	8012130 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	689b      	ldr	r3, [r3, #8]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d012      	beq.n	801210a <osMessageQueueNew+0x82>
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	68db      	ldr	r3, [r3, #12]
 80120e8:	2b4f      	cmp	r3, #79	; 0x4f
 80120ea:	d90e      	bls.n	801210a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d00a      	beq.n	801210a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	695a      	ldr	r2, [r3, #20]
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	68b9      	ldr	r1, [r7, #8]
 80120fc:	fb01 f303 	mul.w	r3, r1, r3
 8012100:	429a      	cmp	r2, r3
 8012102:	d302      	bcc.n	801210a <osMessageQueueNew+0x82>
        mem = 1;
 8012104:	2301      	movs	r3, #1
 8012106:	623b      	str	r3, [r7, #32]
 8012108:	e014      	b.n	8012134 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	689b      	ldr	r3, [r3, #8]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d110      	bne.n	8012134 <osMessageQueueNew+0xac>
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	68db      	ldr	r3, [r3, #12]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d10c      	bne.n	8012134 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801211e:	2b00      	cmp	r3, #0
 8012120:	d108      	bne.n	8012134 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	695b      	ldr	r3, [r3, #20]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d104      	bne.n	8012134 <osMessageQueueNew+0xac>
          mem = 0;
 801212a:	2300      	movs	r3, #0
 801212c:	623b      	str	r3, [r7, #32]
 801212e:	e001      	b.n	8012134 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8012130:	2300      	movs	r3, #0
 8012132:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012134:	6a3b      	ldr	r3, [r7, #32]
 8012136:	2b01      	cmp	r3, #1
 8012138:	d10c      	bne.n	8012154 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	691a      	ldr	r2, [r3, #16]
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6899      	ldr	r1, [r3, #8]
 8012142:	2300      	movs	r3, #0
 8012144:	9300      	str	r3, [sp, #0]
 8012146:	460b      	mov	r3, r1
 8012148:	68b9      	ldr	r1, [r7, #8]
 801214a:	68f8      	ldr	r0, [r7, #12]
 801214c:	f000 fa5a 	bl	8012604 <xQueueGenericCreateStatic>
 8012150:	6278      	str	r0, [r7, #36]	; 0x24
 8012152:	e008      	b.n	8012166 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8012154:	6a3b      	ldr	r3, [r7, #32]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d105      	bne.n	8012166 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801215a:	2200      	movs	r2, #0
 801215c:	68b9      	ldr	r1, [r7, #8]
 801215e:	68f8      	ldr	r0, [r7, #12]
 8012160:	f000 facd 	bl	80126fe <xQueueGenericCreate>
 8012164:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012168:	2b00      	cmp	r3, #0
 801216a:	d00c      	beq.n	8012186 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d003      	beq.n	801217a <osMessageQueueNew+0xf2>
        name = attr->name;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	61fb      	str	r3, [r7, #28]
 8012178:	e001      	b.n	801217e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801217a:	2300      	movs	r3, #0
 801217c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801217e:	69f9      	ldr	r1, [r7, #28]
 8012180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012182:	f001 f981 	bl	8013488 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012188:	4618      	mov	r0, r3
 801218a:	3728      	adds	r7, #40	; 0x28
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}
 8012190:	200002d0 	.word	0x200002d0

08012194 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012194:	b580      	push	{r7, lr}
 8012196:	b08a      	sub	sp, #40	; 0x28
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	603b      	str	r3, [r7, #0]
 80121a0:	4613      	mov	r3, r2
 80121a2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80121a8:	2300      	movs	r3, #0
 80121aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80121ac:	f3ef 8305 	mrs	r3, IPSR
 80121b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80121b2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d10f      	bne.n	80121d8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121b8:	f3ef 8310 	mrs	r3, PRIMASK
 80121bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80121be:	69bb      	ldr	r3, [r7, #24]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d105      	bne.n	80121d0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80121c4:	f3ef 8311 	mrs	r3, BASEPRI
 80121c8:	617b      	str	r3, [r7, #20]
  return(result);
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d02c      	beq.n	801222a <osMessageQueuePut+0x96>
 80121d0:	4b28      	ldr	r3, [pc, #160]	; (8012274 <osMessageQueuePut+0xe0>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	2b02      	cmp	r3, #2
 80121d6:	d128      	bne.n	801222a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80121d8:	6a3b      	ldr	r3, [r7, #32]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d005      	beq.n	80121ea <osMessageQueuePut+0x56>
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d002      	beq.n	80121ea <osMessageQueuePut+0x56>
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d003      	beq.n	80121f2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80121ea:	f06f 0303 	mvn.w	r3, #3
 80121ee:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80121f0:	e039      	b.n	8012266 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80121f2:	2300      	movs	r3, #0
 80121f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80121f6:	f107 0210 	add.w	r2, r7, #16
 80121fa:	2300      	movs	r3, #0
 80121fc:	68b9      	ldr	r1, [r7, #8]
 80121fe:	6a38      	ldr	r0, [r7, #32]
 8012200:	f000 fc52 	bl	8012aa8 <xQueueGenericSendFromISR>
 8012204:	4603      	mov	r3, r0
 8012206:	2b01      	cmp	r3, #1
 8012208:	d003      	beq.n	8012212 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801220a:	f06f 0302 	mvn.w	r3, #2
 801220e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012210:	e029      	b.n	8012266 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8012212:	693b      	ldr	r3, [r7, #16]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d026      	beq.n	8012266 <osMessageQueuePut+0xd2>
 8012218:	4b17      	ldr	r3, [pc, #92]	; (8012278 <osMessageQueuePut+0xe4>)
 801221a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801221e:	601a      	str	r2, [r3, #0]
 8012220:	f3bf 8f4f 	dsb	sy
 8012224:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012228:	e01d      	b.n	8012266 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801222a:	6a3b      	ldr	r3, [r7, #32]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d002      	beq.n	8012236 <osMessageQueuePut+0xa2>
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d103      	bne.n	801223e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8012236:	f06f 0303 	mvn.w	r3, #3
 801223a:	627b      	str	r3, [r7, #36]	; 0x24
 801223c:	e014      	b.n	8012268 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801223e:	2300      	movs	r3, #0
 8012240:	683a      	ldr	r2, [r7, #0]
 8012242:	68b9      	ldr	r1, [r7, #8]
 8012244:	6a38      	ldr	r0, [r7, #32]
 8012246:	f000 fb2d 	bl	80128a4 <xQueueGenericSend>
 801224a:	4603      	mov	r3, r0
 801224c:	2b01      	cmp	r3, #1
 801224e:	d00b      	beq.n	8012268 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d003      	beq.n	801225e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8012256:	f06f 0301 	mvn.w	r3, #1
 801225a:	627b      	str	r3, [r7, #36]	; 0x24
 801225c:	e004      	b.n	8012268 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801225e:	f06f 0302 	mvn.w	r3, #2
 8012262:	627b      	str	r3, [r7, #36]	; 0x24
 8012264:	e000      	b.n	8012268 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012266:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801226a:	4618      	mov	r0, r3
 801226c:	3728      	adds	r7, #40	; 0x28
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	200002d0 	.word	0x200002d0
 8012278:	e000ed04 	.word	0xe000ed04

0801227c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801227c:	b580      	push	{r7, lr}
 801227e:	b08a      	sub	sp, #40	; 0x28
 8012280:	af00      	add	r7, sp, #0
 8012282:	60f8      	str	r0, [r7, #12]
 8012284:	60b9      	str	r1, [r7, #8]
 8012286:	607a      	str	r2, [r7, #4]
 8012288:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801228e:	2300      	movs	r3, #0
 8012290:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012292:	f3ef 8305 	mrs	r3, IPSR
 8012296:	61fb      	str	r3, [r7, #28]
  return(result);
 8012298:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801229a:	2b00      	cmp	r3, #0
 801229c:	d10f      	bne.n	80122be <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801229e:	f3ef 8310 	mrs	r3, PRIMASK
 80122a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80122a4:	69bb      	ldr	r3, [r7, #24]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d105      	bne.n	80122b6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80122aa:	f3ef 8311 	mrs	r3, BASEPRI
 80122ae:	617b      	str	r3, [r7, #20]
  return(result);
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d02c      	beq.n	8012310 <osMessageQueueGet+0x94>
 80122b6:	4b28      	ldr	r3, [pc, #160]	; (8012358 <osMessageQueueGet+0xdc>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	2b02      	cmp	r3, #2
 80122bc:	d128      	bne.n	8012310 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80122be:	6a3b      	ldr	r3, [r7, #32]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d005      	beq.n	80122d0 <osMessageQueueGet+0x54>
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d002      	beq.n	80122d0 <osMessageQueueGet+0x54>
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d003      	beq.n	80122d8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80122d0:	f06f 0303 	mvn.w	r3, #3
 80122d4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80122d6:	e038      	b.n	801234a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80122d8:	2300      	movs	r3, #0
 80122da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80122dc:	f107 0310 	add.w	r3, r7, #16
 80122e0:	461a      	mov	r2, r3
 80122e2:	68b9      	ldr	r1, [r7, #8]
 80122e4:	6a38      	ldr	r0, [r7, #32]
 80122e6:	f000 feff 	bl	80130e8 <xQueueReceiveFromISR>
 80122ea:	4603      	mov	r3, r0
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	d003      	beq.n	80122f8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80122f0:	f06f 0302 	mvn.w	r3, #2
 80122f4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80122f6:	e028      	b.n	801234a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80122f8:	693b      	ldr	r3, [r7, #16]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d025      	beq.n	801234a <osMessageQueueGet+0xce>
 80122fe:	4b17      	ldr	r3, [pc, #92]	; (801235c <osMessageQueueGet+0xe0>)
 8012300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012304:	601a      	str	r2, [r3, #0]
 8012306:	f3bf 8f4f 	dsb	sy
 801230a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801230e:	e01c      	b.n	801234a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012310:	6a3b      	ldr	r3, [r7, #32]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d002      	beq.n	801231c <osMessageQueueGet+0xa0>
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d103      	bne.n	8012324 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801231c:	f06f 0303 	mvn.w	r3, #3
 8012320:	627b      	str	r3, [r7, #36]	; 0x24
 8012322:	e013      	b.n	801234c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012324:	683a      	ldr	r2, [r7, #0]
 8012326:	68b9      	ldr	r1, [r7, #8]
 8012328:	6a38      	ldr	r0, [r7, #32]
 801232a:	f000 fceb 	bl	8012d04 <xQueueReceive>
 801232e:	4603      	mov	r3, r0
 8012330:	2b01      	cmp	r3, #1
 8012332:	d00b      	beq.n	801234c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d003      	beq.n	8012342 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801233a:	f06f 0301 	mvn.w	r3, #1
 801233e:	627b      	str	r3, [r7, #36]	; 0x24
 8012340:	e004      	b.n	801234c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8012342:	f06f 0302 	mvn.w	r3, #2
 8012346:	627b      	str	r3, [r7, #36]	; 0x24
 8012348:	e000      	b.n	801234c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801234a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801234e:	4618      	mov	r0, r3
 8012350:	3728      	adds	r7, #40	; 0x28
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	200002d0 	.word	0x200002d0
 801235c:	e000ed04 	.word	0xe000ed04

08012360 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012360:	b480      	push	{r7}
 8012362:	b085      	sub	sp, #20
 8012364:	af00      	add	r7, sp, #0
 8012366:	60f8      	str	r0, [r7, #12]
 8012368:	60b9      	str	r1, [r7, #8]
 801236a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	4a07      	ldr	r2, [pc, #28]	; (801238c <vApplicationGetIdleTaskMemory+0x2c>)
 8012370:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	4a06      	ldr	r2, [pc, #24]	; (8012390 <vApplicationGetIdleTaskMemory+0x30>)
 8012376:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2280      	movs	r2, #128	; 0x80
 801237c:	601a      	str	r2, [r3, #0]
}
 801237e:	bf00      	nop
 8012380:	3714      	adds	r7, #20
 8012382:	46bd      	mov	sp, r7
 8012384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012388:	4770      	bx	lr
 801238a:	bf00      	nop
 801238c:	200002d4 	.word	0x200002d4
 8012390:	20000330 	.word	0x20000330

08012394 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012394:	b480      	push	{r7}
 8012396:	b085      	sub	sp, #20
 8012398:	af00      	add	r7, sp, #0
 801239a:	60f8      	str	r0, [r7, #12]
 801239c:	60b9      	str	r1, [r7, #8]
 801239e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	4a07      	ldr	r2, [pc, #28]	; (80123c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80123a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	4a06      	ldr	r2, [pc, #24]	; (80123c4 <vApplicationGetTimerTaskMemory+0x30>)
 80123aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80123b2:	601a      	str	r2, [r3, #0]
}
 80123b4:	bf00      	nop
 80123b6:	3714      	adds	r7, #20
 80123b8:	46bd      	mov	sp, r7
 80123ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123be:	4770      	bx	lr
 80123c0:	20000530 	.word	0x20000530
 80123c4:	2000058c 	.word	0x2000058c

080123c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80123c8:	b480      	push	{r7}
 80123ca:	b083      	sub	sp, #12
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f103 0208 	add.w	r2, r3, #8
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	f04f 32ff 	mov.w	r2, #4294967295
 80123e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f103 0208 	add.w	r2, r3, #8
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f103 0208 	add.w	r2, r3, #8
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2200      	movs	r2, #0
 80123fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80123fc:	bf00      	nop
 80123fe:	370c      	adds	r7, #12
 8012400:	46bd      	mov	sp, r7
 8012402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012406:	4770      	bx	lr

08012408 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012408:	b480      	push	{r7}
 801240a:	b083      	sub	sp, #12
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2200      	movs	r2, #0
 8012414:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012416:	bf00      	nop
 8012418:	370c      	adds	r7, #12
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr

08012422 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012422:	b480      	push	{r7}
 8012424:	b085      	sub	sp, #20
 8012426:	af00      	add	r7, sp, #0
 8012428:	6078      	str	r0, [r7, #4]
 801242a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	68fa      	ldr	r2, [r7, #12]
 8012436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	689a      	ldr	r2, [r3, #8]
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	689b      	ldr	r3, [r3, #8]
 8012444:	683a      	ldr	r2, [r7, #0]
 8012446:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	683a      	ldr	r2, [r7, #0]
 801244c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	687a      	ldr	r2, [r7, #4]
 8012452:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	1c5a      	adds	r2, r3, #1
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	601a      	str	r2, [r3, #0]
}
 801245e:	bf00      	nop
 8012460:	3714      	adds	r7, #20
 8012462:	46bd      	mov	sp, r7
 8012464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012468:	4770      	bx	lr

0801246a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801246a:	b480      	push	{r7}
 801246c:	b085      	sub	sp, #20
 801246e:	af00      	add	r7, sp, #0
 8012470:	6078      	str	r0, [r7, #4]
 8012472:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012480:	d103      	bne.n	801248a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	691b      	ldr	r3, [r3, #16]
 8012486:	60fb      	str	r3, [r7, #12]
 8012488:	e00c      	b.n	80124a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	3308      	adds	r3, #8
 801248e:	60fb      	str	r3, [r7, #12]
 8012490:	e002      	b.n	8012498 <vListInsert+0x2e>
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	685b      	ldr	r3, [r3, #4]
 8012496:	60fb      	str	r3, [r7, #12]
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	685b      	ldr	r3, [r3, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	68ba      	ldr	r2, [r7, #8]
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d2f6      	bcs.n	8012492 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	685a      	ldr	r2, [r3, #4]
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	685b      	ldr	r3, [r3, #4]
 80124b0:	683a      	ldr	r2, [r7, #0]
 80124b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	68fa      	ldr	r2, [r7, #12]
 80124b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	683a      	ldr	r2, [r7, #0]
 80124be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	1c5a      	adds	r2, r3, #1
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	601a      	str	r2, [r3, #0]
}
 80124d0:	bf00      	nop
 80124d2:	3714      	adds	r7, #20
 80124d4:	46bd      	mov	sp, r7
 80124d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124da:	4770      	bx	lr

080124dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80124dc:	b480      	push	{r7}
 80124de:	b085      	sub	sp, #20
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	691b      	ldr	r3, [r3, #16]
 80124e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	685b      	ldr	r3, [r3, #4]
 80124ee:	687a      	ldr	r2, [r7, #4]
 80124f0:	6892      	ldr	r2, [r2, #8]
 80124f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	689b      	ldr	r3, [r3, #8]
 80124f8:	687a      	ldr	r2, [r7, #4]
 80124fa:	6852      	ldr	r2, [r2, #4]
 80124fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	685b      	ldr	r3, [r3, #4]
 8012502:	687a      	ldr	r2, [r7, #4]
 8012504:	429a      	cmp	r2, r3
 8012506:	d103      	bne.n	8012510 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	689a      	ldr	r2, [r3, #8]
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2200      	movs	r2, #0
 8012514:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	1e5a      	subs	r2, r3, #1
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	681b      	ldr	r3, [r3, #0]
}
 8012524:	4618      	mov	r0, r3
 8012526:	3714      	adds	r7, #20
 8012528:	46bd      	mov	sp, r7
 801252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252e:	4770      	bx	lr

08012530 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b084      	sub	sp, #16
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d10b      	bne.n	801255c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012548:	b672      	cpsid	i
 801254a:	f383 8811 	msr	BASEPRI, r3
 801254e:	f3bf 8f6f 	isb	sy
 8012552:	f3bf 8f4f 	dsb	sy
 8012556:	b662      	cpsie	i
 8012558:	60bb      	str	r3, [r7, #8]
 801255a:	e7fe      	b.n	801255a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 801255c:	f002 fc94 	bl	8014e88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	681a      	ldr	r2, [r3, #0]
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012568:	68f9      	ldr	r1, [r7, #12]
 801256a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801256c:	fb01 f303 	mul.w	r3, r1, r3
 8012570:	441a      	add	r2, r3
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	2200      	movs	r2, #0
 801257a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	681a      	ldr	r2, [r3, #0]
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801258c:	3b01      	subs	r3, #1
 801258e:	68f9      	ldr	r1, [r7, #12]
 8012590:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012592:	fb01 f303 	mul.w	r3, r1, r3
 8012596:	441a      	add	r2, r3
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	22ff      	movs	r2, #255	; 0xff
 80125a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	22ff      	movs	r2, #255	; 0xff
 80125a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d114      	bne.n	80125dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	691b      	ldr	r3, [r3, #16]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d01a      	beq.n	80125f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	3310      	adds	r3, #16
 80125be:	4618      	mov	r0, r3
 80125c0:	f001 fc64 	bl	8013e8c <xTaskRemoveFromEventList>
 80125c4:	4603      	mov	r3, r0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d012      	beq.n	80125f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80125ca:	4b0d      	ldr	r3, [pc, #52]	; (8012600 <xQueueGenericReset+0xd0>)
 80125cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125d0:	601a      	str	r2, [r3, #0]
 80125d2:	f3bf 8f4f 	dsb	sy
 80125d6:	f3bf 8f6f 	isb	sy
 80125da:	e009      	b.n	80125f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	3310      	adds	r3, #16
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7ff fef1 	bl	80123c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	3324      	adds	r3, #36	; 0x24
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7ff feec 	bl	80123c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80125f0:	f002 fc7c 	bl	8014eec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80125f4:	2301      	movs	r3, #1
}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3710      	adds	r7, #16
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	e000ed04 	.word	0xe000ed04

08012604 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012604:	b580      	push	{r7, lr}
 8012606:	b08e      	sub	sp, #56	; 0x38
 8012608:	af02      	add	r7, sp, #8
 801260a:	60f8      	str	r0, [r7, #12]
 801260c:	60b9      	str	r1, [r7, #8]
 801260e:	607a      	str	r2, [r7, #4]
 8012610:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d10b      	bne.n	8012630 <xQueueGenericCreateStatic+0x2c>
 8012618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801261c:	b672      	cpsid	i
 801261e:	f383 8811 	msr	BASEPRI, r3
 8012622:	f3bf 8f6f 	isb	sy
 8012626:	f3bf 8f4f 	dsb	sy
 801262a:	b662      	cpsie	i
 801262c:	62bb      	str	r3, [r7, #40]	; 0x28
 801262e:	e7fe      	b.n	801262e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d10b      	bne.n	801264e <xQueueGenericCreateStatic+0x4a>
 8012636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801263a:	b672      	cpsid	i
 801263c:	f383 8811 	msr	BASEPRI, r3
 8012640:	f3bf 8f6f 	isb	sy
 8012644:	f3bf 8f4f 	dsb	sy
 8012648:	b662      	cpsie	i
 801264a:	627b      	str	r3, [r7, #36]	; 0x24
 801264c:	e7fe      	b.n	801264c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d002      	beq.n	801265a <xQueueGenericCreateStatic+0x56>
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d001      	beq.n	801265e <xQueueGenericCreateStatic+0x5a>
 801265a:	2301      	movs	r3, #1
 801265c:	e000      	b.n	8012660 <xQueueGenericCreateStatic+0x5c>
 801265e:	2300      	movs	r3, #0
 8012660:	2b00      	cmp	r3, #0
 8012662:	d10b      	bne.n	801267c <xQueueGenericCreateStatic+0x78>
 8012664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012668:	b672      	cpsid	i
 801266a:	f383 8811 	msr	BASEPRI, r3
 801266e:	f3bf 8f6f 	isb	sy
 8012672:	f3bf 8f4f 	dsb	sy
 8012676:	b662      	cpsie	i
 8012678:	623b      	str	r3, [r7, #32]
 801267a:	e7fe      	b.n	801267a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d102      	bne.n	8012688 <xQueueGenericCreateStatic+0x84>
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d101      	bne.n	801268c <xQueueGenericCreateStatic+0x88>
 8012688:	2301      	movs	r3, #1
 801268a:	e000      	b.n	801268e <xQueueGenericCreateStatic+0x8a>
 801268c:	2300      	movs	r3, #0
 801268e:	2b00      	cmp	r3, #0
 8012690:	d10b      	bne.n	80126aa <xQueueGenericCreateStatic+0xa6>
 8012692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012696:	b672      	cpsid	i
 8012698:	f383 8811 	msr	BASEPRI, r3
 801269c:	f3bf 8f6f 	isb	sy
 80126a0:	f3bf 8f4f 	dsb	sy
 80126a4:	b662      	cpsie	i
 80126a6:	61fb      	str	r3, [r7, #28]
 80126a8:	e7fe      	b.n	80126a8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80126aa:	2350      	movs	r3, #80	; 0x50
 80126ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	2b50      	cmp	r3, #80	; 0x50
 80126b2:	d00b      	beq.n	80126cc <xQueueGenericCreateStatic+0xc8>
 80126b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b8:	b672      	cpsid	i
 80126ba:	f383 8811 	msr	BASEPRI, r3
 80126be:	f3bf 8f6f 	isb	sy
 80126c2:	f3bf 8f4f 	dsb	sy
 80126c6:	b662      	cpsie	i
 80126c8:	61bb      	str	r3, [r7, #24]
 80126ca:	e7fe      	b.n	80126ca <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80126cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80126d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d00d      	beq.n	80126f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80126d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126da:	2201      	movs	r2, #1
 80126dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80126e0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80126e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e6:	9300      	str	r3, [sp, #0]
 80126e8:	4613      	mov	r3, r2
 80126ea:	687a      	ldr	r2, [r7, #4]
 80126ec:	68b9      	ldr	r1, [r7, #8]
 80126ee:	68f8      	ldr	r0, [r7, #12]
 80126f0:	f000 f846 	bl	8012780 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80126f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3730      	adds	r7, #48	; 0x30
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}

080126fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80126fe:	b580      	push	{r7, lr}
 8012700:	b08a      	sub	sp, #40	; 0x28
 8012702:	af02      	add	r7, sp, #8
 8012704:	60f8      	str	r0, [r7, #12]
 8012706:	60b9      	str	r1, [r7, #8]
 8012708:	4613      	mov	r3, r2
 801270a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d10b      	bne.n	801272a <xQueueGenericCreate+0x2c>
 8012712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012716:	b672      	cpsid	i
 8012718:	f383 8811 	msr	BASEPRI, r3
 801271c:	f3bf 8f6f 	isb	sy
 8012720:	f3bf 8f4f 	dsb	sy
 8012724:	b662      	cpsie	i
 8012726:	613b      	str	r3, [r7, #16]
 8012728:	e7fe      	b.n	8012728 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d102      	bne.n	8012736 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012730:	2300      	movs	r3, #0
 8012732:	61fb      	str	r3, [r7, #28]
 8012734:	e004      	b.n	8012740 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	68ba      	ldr	r2, [r7, #8]
 801273a:	fb02 f303 	mul.w	r3, r2, r3
 801273e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012740:	69fb      	ldr	r3, [r7, #28]
 8012742:	3350      	adds	r3, #80	; 0x50
 8012744:	4618      	mov	r0, r3
 8012746:	f002 fcc1 	bl	80150cc <pvPortMalloc>
 801274a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801274c:	69bb      	ldr	r3, [r7, #24]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d011      	beq.n	8012776 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012752:	69bb      	ldr	r3, [r7, #24]
 8012754:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	3350      	adds	r3, #80	; 0x50
 801275a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801275c:	69bb      	ldr	r3, [r7, #24]
 801275e:	2200      	movs	r2, #0
 8012760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012764:	79fa      	ldrb	r2, [r7, #7]
 8012766:	69bb      	ldr	r3, [r7, #24]
 8012768:	9300      	str	r3, [sp, #0]
 801276a:	4613      	mov	r3, r2
 801276c:	697a      	ldr	r2, [r7, #20]
 801276e:	68b9      	ldr	r1, [r7, #8]
 8012770:	68f8      	ldr	r0, [r7, #12]
 8012772:	f000 f805 	bl	8012780 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012776:	69bb      	ldr	r3, [r7, #24]
	}
 8012778:	4618      	mov	r0, r3
 801277a:	3720      	adds	r7, #32
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}

08012780 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b084      	sub	sp, #16
 8012784:	af00      	add	r7, sp, #0
 8012786:	60f8      	str	r0, [r7, #12]
 8012788:	60b9      	str	r1, [r7, #8]
 801278a:	607a      	str	r2, [r7, #4]
 801278c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d103      	bne.n	801279c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012794:	69bb      	ldr	r3, [r7, #24]
 8012796:	69ba      	ldr	r2, [r7, #24]
 8012798:	601a      	str	r2, [r3, #0]
 801279a:	e002      	b.n	80127a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801279c:	69bb      	ldr	r3, [r7, #24]
 801279e:	687a      	ldr	r2, [r7, #4]
 80127a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80127a2:	69bb      	ldr	r3, [r7, #24]
 80127a4:	68fa      	ldr	r2, [r7, #12]
 80127a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80127a8:	69bb      	ldr	r3, [r7, #24]
 80127aa:	68ba      	ldr	r2, [r7, #8]
 80127ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80127ae:	2101      	movs	r1, #1
 80127b0:	69b8      	ldr	r0, [r7, #24]
 80127b2:	f7ff febd 	bl	8012530 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80127b6:	69bb      	ldr	r3, [r7, #24]
 80127b8:	78fa      	ldrb	r2, [r7, #3]
 80127ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80127be:	bf00      	nop
 80127c0:	3710      	adds	r7, #16
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}

080127c6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80127c6:	b580      	push	{r7, lr}
 80127c8:	b08a      	sub	sp, #40	; 0x28
 80127ca:	af02      	add	r7, sp, #8
 80127cc:	60f8      	str	r0, [r7, #12]
 80127ce:	60b9      	str	r1, [r7, #8]
 80127d0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d10b      	bne.n	80127f0 <xQueueCreateCountingSemaphoreStatic+0x2a>
 80127d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127dc:	b672      	cpsid	i
 80127de:	f383 8811 	msr	BASEPRI, r3
 80127e2:	f3bf 8f6f 	isb	sy
 80127e6:	f3bf 8f4f 	dsb	sy
 80127ea:	b662      	cpsie	i
 80127ec:	61bb      	str	r3, [r7, #24]
 80127ee:	e7fe      	b.n	80127ee <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80127f0:	68ba      	ldr	r2, [r7, #8]
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d90b      	bls.n	8012810 <xQueueCreateCountingSemaphoreStatic+0x4a>
 80127f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127fc:	b672      	cpsid	i
 80127fe:	f383 8811 	msr	BASEPRI, r3
 8012802:	f3bf 8f6f 	isb	sy
 8012806:	f3bf 8f4f 	dsb	sy
 801280a:	b662      	cpsie	i
 801280c:	617b      	str	r3, [r7, #20]
 801280e:	e7fe      	b.n	801280e <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012810:	2302      	movs	r3, #2
 8012812:	9300      	str	r3, [sp, #0]
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2200      	movs	r2, #0
 8012818:	2100      	movs	r1, #0
 801281a:	68f8      	ldr	r0, [r7, #12]
 801281c:	f7ff fef2 	bl	8012604 <xQueueGenericCreateStatic>
 8012820:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8012822:	69fb      	ldr	r3, [r7, #28]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d002      	beq.n	801282e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012828:	69fb      	ldr	r3, [r7, #28]
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801282e:	69fb      	ldr	r3, [r7, #28]
	}
 8012830:	4618      	mov	r0, r3
 8012832:	3720      	adds	r7, #32
 8012834:	46bd      	mov	sp, r7
 8012836:	bd80      	pop	{r7, pc}

08012838 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012838:	b580      	push	{r7, lr}
 801283a:	b086      	sub	sp, #24
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
 8012840:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d10b      	bne.n	8012860 <xQueueCreateCountingSemaphore+0x28>
 8012848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801284c:	b672      	cpsid	i
 801284e:	f383 8811 	msr	BASEPRI, r3
 8012852:	f3bf 8f6f 	isb	sy
 8012856:	f3bf 8f4f 	dsb	sy
 801285a:	b662      	cpsie	i
 801285c:	613b      	str	r3, [r7, #16]
 801285e:	e7fe      	b.n	801285e <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012860:	683a      	ldr	r2, [r7, #0]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	429a      	cmp	r2, r3
 8012866:	d90b      	bls.n	8012880 <xQueueCreateCountingSemaphore+0x48>
 8012868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801286c:	b672      	cpsid	i
 801286e:	f383 8811 	msr	BASEPRI, r3
 8012872:	f3bf 8f6f 	isb	sy
 8012876:	f3bf 8f4f 	dsb	sy
 801287a:	b662      	cpsie	i
 801287c:	60fb      	str	r3, [r7, #12]
 801287e:	e7fe      	b.n	801287e <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012880:	2202      	movs	r2, #2
 8012882:	2100      	movs	r1, #0
 8012884:	6878      	ldr	r0, [r7, #4]
 8012886:	f7ff ff3a 	bl	80126fe <xQueueGenericCreate>
 801288a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d002      	beq.n	8012898 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	683a      	ldr	r2, [r7, #0]
 8012896:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012898:	697b      	ldr	r3, [r7, #20]
	}
 801289a:	4618      	mov	r0, r3
 801289c:	3718      	adds	r7, #24
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}
	...

080128a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b08e      	sub	sp, #56	; 0x38
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	60f8      	str	r0, [r7, #12]
 80128ac:	60b9      	str	r1, [r7, #8]
 80128ae:	607a      	str	r2, [r7, #4]
 80128b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80128b2:	2300      	movs	r3, #0
 80128b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80128ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d10b      	bne.n	80128d8 <xQueueGenericSend+0x34>
 80128c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128c4:	b672      	cpsid	i
 80128c6:	f383 8811 	msr	BASEPRI, r3
 80128ca:	f3bf 8f6f 	isb	sy
 80128ce:	f3bf 8f4f 	dsb	sy
 80128d2:	b662      	cpsie	i
 80128d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80128d6:	e7fe      	b.n	80128d6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d103      	bne.n	80128e6 <xQueueGenericSend+0x42>
 80128de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d101      	bne.n	80128ea <xQueueGenericSend+0x46>
 80128e6:	2301      	movs	r3, #1
 80128e8:	e000      	b.n	80128ec <xQueueGenericSend+0x48>
 80128ea:	2300      	movs	r3, #0
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d10b      	bne.n	8012908 <xQueueGenericSend+0x64>
 80128f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f4:	b672      	cpsid	i
 80128f6:	f383 8811 	msr	BASEPRI, r3
 80128fa:	f3bf 8f6f 	isb	sy
 80128fe:	f3bf 8f4f 	dsb	sy
 8012902:	b662      	cpsie	i
 8012904:	627b      	str	r3, [r7, #36]	; 0x24
 8012906:	e7fe      	b.n	8012906 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	2b02      	cmp	r3, #2
 801290c:	d103      	bne.n	8012916 <xQueueGenericSend+0x72>
 801290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012912:	2b01      	cmp	r3, #1
 8012914:	d101      	bne.n	801291a <xQueueGenericSend+0x76>
 8012916:	2301      	movs	r3, #1
 8012918:	e000      	b.n	801291c <xQueueGenericSend+0x78>
 801291a:	2300      	movs	r3, #0
 801291c:	2b00      	cmp	r3, #0
 801291e:	d10b      	bne.n	8012938 <xQueueGenericSend+0x94>
 8012920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012924:	b672      	cpsid	i
 8012926:	f383 8811 	msr	BASEPRI, r3
 801292a:	f3bf 8f6f 	isb	sy
 801292e:	f3bf 8f4f 	dsb	sy
 8012932:	b662      	cpsie	i
 8012934:	623b      	str	r3, [r7, #32]
 8012936:	e7fe      	b.n	8012936 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012938:	f001 fc66 	bl	8014208 <xTaskGetSchedulerState>
 801293c:	4603      	mov	r3, r0
 801293e:	2b00      	cmp	r3, #0
 8012940:	d102      	bne.n	8012948 <xQueueGenericSend+0xa4>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d101      	bne.n	801294c <xQueueGenericSend+0xa8>
 8012948:	2301      	movs	r3, #1
 801294a:	e000      	b.n	801294e <xQueueGenericSend+0xaa>
 801294c:	2300      	movs	r3, #0
 801294e:	2b00      	cmp	r3, #0
 8012950:	d10b      	bne.n	801296a <xQueueGenericSend+0xc6>
 8012952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012956:	b672      	cpsid	i
 8012958:	f383 8811 	msr	BASEPRI, r3
 801295c:	f3bf 8f6f 	isb	sy
 8012960:	f3bf 8f4f 	dsb	sy
 8012964:	b662      	cpsie	i
 8012966:	61fb      	str	r3, [r7, #28]
 8012968:	e7fe      	b.n	8012968 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801296a:	f002 fa8d 	bl	8014e88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012976:	429a      	cmp	r2, r3
 8012978:	d302      	bcc.n	8012980 <xQueueGenericSend+0xdc>
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	2b02      	cmp	r3, #2
 801297e:	d129      	bne.n	80129d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012980:	683a      	ldr	r2, [r7, #0]
 8012982:	68b9      	ldr	r1, [r7, #8]
 8012984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012986:	f000 fc6e 	bl	8013266 <prvCopyDataToQueue>
 801298a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012990:	2b00      	cmp	r3, #0
 8012992:	d010      	beq.n	80129b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012996:	3324      	adds	r3, #36	; 0x24
 8012998:	4618      	mov	r0, r3
 801299a:	f001 fa77 	bl	8013e8c <xTaskRemoveFromEventList>
 801299e:	4603      	mov	r3, r0
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d013      	beq.n	80129cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80129a4:	4b3f      	ldr	r3, [pc, #252]	; (8012aa4 <xQueueGenericSend+0x200>)
 80129a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129aa:	601a      	str	r2, [r3, #0]
 80129ac:	f3bf 8f4f 	dsb	sy
 80129b0:	f3bf 8f6f 	isb	sy
 80129b4:	e00a      	b.n	80129cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80129b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d007      	beq.n	80129cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80129bc:	4b39      	ldr	r3, [pc, #228]	; (8012aa4 <xQueueGenericSend+0x200>)
 80129be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129c2:	601a      	str	r2, [r3, #0]
 80129c4:	f3bf 8f4f 	dsb	sy
 80129c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80129cc:	f002 fa8e 	bl	8014eec <vPortExitCritical>
				return pdPASS;
 80129d0:	2301      	movs	r3, #1
 80129d2:	e063      	b.n	8012a9c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d103      	bne.n	80129e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80129da:	f002 fa87 	bl	8014eec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80129de:	2300      	movs	r3, #0
 80129e0:	e05c      	b.n	8012a9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80129e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d106      	bne.n	80129f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80129e8:	f107 0314 	add.w	r3, r7, #20
 80129ec:	4618      	mov	r0, r3
 80129ee:	f001 fab1 	bl	8013f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80129f2:	2301      	movs	r3, #1
 80129f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80129f6:	f002 fa79 	bl	8014eec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80129fa:	f001 f80f 	bl	8013a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80129fe:	f002 fa43 	bl	8014e88 <vPortEnterCritical>
 8012a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a08:	b25b      	sxtb	r3, r3
 8012a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a0e:	d103      	bne.n	8012a18 <xQueueGenericSend+0x174>
 8012a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a12:	2200      	movs	r2, #0
 8012a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a1e:	b25b      	sxtb	r3, r3
 8012a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a24:	d103      	bne.n	8012a2e <xQueueGenericSend+0x18a>
 8012a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a28:	2200      	movs	r2, #0
 8012a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a2e:	f002 fa5d 	bl	8014eec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012a32:	1d3a      	adds	r2, r7, #4
 8012a34:	f107 0314 	add.w	r3, r7, #20
 8012a38:	4611      	mov	r1, r2
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f001 faa0 	bl	8013f80 <xTaskCheckForTimeOut>
 8012a40:	4603      	mov	r3, r0
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d124      	bne.n	8012a90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012a46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a48:	f000 fd05 	bl	8013456 <prvIsQueueFull>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d018      	beq.n	8012a84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a54:	3310      	adds	r3, #16
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	4611      	mov	r1, r2
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f001 f9c4 	bl	8013de8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a62:	f000 fc90 	bl	8013386 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012a66:	f000 ffe7 	bl	8013a38 <xTaskResumeAll>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	f47f af7c 	bne.w	801296a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012a72:	4b0c      	ldr	r3, [pc, #48]	; (8012aa4 <xQueueGenericSend+0x200>)
 8012a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a78:	601a      	str	r2, [r3, #0]
 8012a7a:	f3bf 8f4f 	dsb	sy
 8012a7e:	f3bf 8f6f 	isb	sy
 8012a82:	e772      	b.n	801296a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a86:	f000 fc7e 	bl	8013386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012a8a:	f000 ffd5 	bl	8013a38 <xTaskResumeAll>
 8012a8e:	e76c      	b.n	801296a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a92:	f000 fc78 	bl	8013386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012a96:	f000 ffcf 	bl	8013a38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012a9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	3738      	adds	r7, #56	; 0x38
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}
 8012aa4:	e000ed04 	.word	0xe000ed04

08012aa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b08e      	sub	sp, #56	; 0x38
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	607a      	str	r2, [r7, #4]
 8012ab4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d10b      	bne.n	8012ad8 <xQueueGenericSendFromISR+0x30>
 8012ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac4:	b672      	cpsid	i
 8012ac6:	f383 8811 	msr	BASEPRI, r3
 8012aca:	f3bf 8f6f 	isb	sy
 8012ace:	f3bf 8f4f 	dsb	sy
 8012ad2:	b662      	cpsie	i
 8012ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8012ad6:	e7fe      	b.n	8012ad6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d103      	bne.n	8012ae6 <xQueueGenericSendFromISR+0x3e>
 8012ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d101      	bne.n	8012aea <xQueueGenericSendFromISR+0x42>
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	e000      	b.n	8012aec <xQueueGenericSendFromISR+0x44>
 8012aea:	2300      	movs	r3, #0
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d10b      	bne.n	8012b08 <xQueueGenericSendFromISR+0x60>
 8012af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af4:	b672      	cpsid	i
 8012af6:	f383 8811 	msr	BASEPRI, r3
 8012afa:	f3bf 8f6f 	isb	sy
 8012afe:	f3bf 8f4f 	dsb	sy
 8012b02:	b662      	cpsie	i
 8012b04:	623b      	str	r3, [r7, #32]
 8012b06:	e7fe      	b.n	8012b06 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	2b02      	cmp	r3, #2
 8012b0c:	d103      	bne.n	8012b16 <xQueueGenericSendFromISR+0x6e>
 8012b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	d101      	bne.n	8012b1a <xQueueGenericSendFromISR+0x72>
 8012b16:	2301      	movs	r3, #1
 8012b18:	e000      	b.n	8012b1c <xQueueGenericSendFromISR+0x74>
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d10b      	bne.n	8012b38 <xQueueGenericSendFromISR+0x90>
 8012b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b24:	b672      	cpsid	i
 8012b26:	f383 8811 	msr	BASEPRI, r3
 8012b2a:	f3bf 8f6f 	isb	sy
 8012b2e:	f3bf 8f4f 	dsb	sy
 8012b32:	b662      	cpsie	i
 8012b34:	61fb      	str	r3, [r7, #28]
 8012b36:	e7fe      	b.n	8012b36 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b38:	f002 fa86 	bl	8015048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012b3c:	f3ef 8211 	mrs	r2, BASEPRI
 8012b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b44:	b672      	cpsid	i
 8012b46:	f383 8811 	msr	BASEPRI, r3
 8012b4a:	f3bf 8f6f 	isb	sy
 8012b4e:	f3bf 8f4f 	dsb	sy
 8012b52:	b662      	cpsie	i
 8012b54:	61ba      	str	r2, [r7, #24]
 8012b56:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012b58:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d302      	bcc.n	8012b6e <xQueueGenericSendFromISR+0xc6>
 8012b68:	683b      	ldr	r3, [r7, #0]
 8012b6a:	2b02      	cmp	r3, #2
 8012b6c:	d12c      	bne.n	8012bc8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012b78:	683a      	ldr	r2, [r7, #0]
 8012b7a:	68b9      	ldr	r1, [r7, #8]
 8012b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b7e:	f000 fb72 	bl	8013266 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012b82:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b8a:	d112      	bne.n	8012bb2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d016      	beq.n	8012bc2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b96:	3324      	adds	r3, #36	; 0x24
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f001 f977 	bl	8013e8c <xTaskRemoveFromEventList>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d00e      	beq.n	8012bc2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d00b      	beq.n	8012bc2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2201      	movs	r2, #1
 8012bae:	601a      	str	r2, [r3, #0]
 8012bb0:	e007      	b.n	8012bc2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012bb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012bb6:	3301      	adds	r3, #1
 8012bb8:	b2db      	uxtb	r3, r3
 8012bba:	b25a      	sxtb	r2, r3
 8012bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012bc6:	e001      	b.n	8012bcc <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012bc8:	2300      	movs	r3, #0
 8012bca:	637b      	str	r3, [r7, #52]	; 0x34
 8012bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012bd0:	693b      	ldr	r3, [r7, #16]
 8012bd2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3738      	adds	r7, #56	; 0x38
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b08e      	sub	sp, #56	; 0x38
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d10b      	bne.n	8012c0c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8012bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bf8:	b672      	cpsid	i
 8012bfa:	f383 8811 	msr	BASEPRI, r3
 8012bfe:	f3bf 8f6f 	isb	sy
 8012c02:	f3bf 8f4f 	dsb	sy
 8012c06:	b662      	cpsie	i
 8012c08:	623b      	str	r3, [r7, #32]
 8012c0a:	e7fe      	b.n	8012c0a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d00b      	beq.n	8012c2c <xQueueGiveFromISR+0x4c>
 8012c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c18:	b672      	cpsid	i
 8012c1a:	f383 8811 	msr	BASEPRI, r3
 8012c1e:	f3bf 8f6f 	isb	sy
 8012c22:	f3bf 8f4f 	dsb	sy
 8012c26:	b662      	cpsie	i
 8012c28:	61fb      	str	r3, [r7, #28]
 8012c2a:	e7fe      	b.n	8012c2a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d103      	bne.n	8012c3c <xQueueGiveFromISR+0x5c>
 8012c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c36:	689b      	ldr	r3, [r3, #8]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d101      	bne.n	8012c40 <xQueueGiveFromISR+0x60>
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	e000      	b.n	8012c42 <xQueueGiveFromISR+0x62>
 8012c40:	2300      	movs	r3, #0
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d10b      	bne.n	8012c5e <xQueueGiveFromISR+0x7e>
 8012c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c4a:	b672      	cpsid	i
 8012c4c:	f383 8811 	msr	BASEPRI, r3
 8012c50:	f3bf 8f6f 	isb	sy
 8012c54:	f3bf 8f4f 	dsb	sy
 8012c58:	b662      	cpsie	i
 8012c5a:	61bb      	str	r3, [r7, #24]
 8012c5c:	e7fe      	b.n	8012c5c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012c5e:	f002 f9f3 	bl	8015048 <vPortValidateInterruptPriority>
	__asm volatile
 8012c62:	f3ef 8211 	mrs	r2, BASEPRI
 8012c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c6a:	b672      	cpsid	i
 8012c6c:	f383 8811 	msr	BASEPRI, r3
 8012c70:	f3bf 8f6f 	isb	sy
 8012c74:	f3bf 8f4f 	dsb	sy
 8012c78:	b662      	cpsie	i
 8012c7a:	617a      	str	r2, [r7, #20]
 8012c7c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012c7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d22b      	bcs.n	8012cea <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9e:	1c5a      	adds	r2, r3, #1
 8012ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012ca4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cac:	d112      	bne.n	8012cd4 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d016      	beq.n	8012ce4 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb8:	3324      	adds	r3, #36	; 0x24
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f001 f8e6 	bl	8013e8c <xTaskRemoveFromEventList>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d00e      	beq.n	8012ce4 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d00b      	beq.n	8012ce4 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	2201      	movs	r2, #1
 8012cd0:	601a      	str	r2, [r3, #0]
 8012cd2:	e007      	b.n	8012ce4 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cd8:	3301      	adds	r3, #1
 8012cda:	b2db      	uxtb	r3, r3
 8012cdc:	b25a      	sxtb	r2, r3
 8012cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8012ce8:	e001      	b.n	8012cee <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012cea:	2300      	movs	r3, #0
 8012cec:	637b      	str	r3, [r7, #52]	; 0x34
 8012cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	3738      	adds	r7, #56	; 0x38
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}
	...

08012d04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b08c      	sub	sp, #48	; 0x30
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	60f8      	str	r0, [r7, #12]
 8012d0c:	60b9      	str	r1, [r7, #8]
 8012d0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012d10:	2300      	movs	r3, #0
 8012d12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d10b      	bne.n	8012d36 <xQueueReceive+0x32>
	__asm volatile
 8012d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d22:	b672      	cpsid	i
 8012d24:	f383 8811 	msr	BASEPRI, r3
 8012d28:	f3bf 8f6f 	isb	sy
 8012d2c:	f3bf 8f4f 	dsb	sy
 8012d30:	b662      	cpsie	i
 8012d32:	623b      	str	r3, [r7, #32]
 8012d34:	e7fe      	b.n	8012d34 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d103      	bne.n	8012d44 <xQueueReceive+0x40>
 8012d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d101      	bne.n	8012d48 <xQueueReceive+0x44>
 8012d44:	2301      	movs	r3, #1
 8012d46:	e000      	b.n	8012d4a <xQueueReceive+0x46>
 8012d48:	2300      	movs	r3, #0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d10b      	bne.n	8012d66 <xQueueReceive+0x62>
 8012d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d52:	b672      	cpsid	i
 8012d54:	f383 8811 	msr	BASEPRI, r3
 8012d58:	f3bf 8f6f 	isb	sy
 8012d5c:	f3bf 8f4f 	dsb	sy
 8012d60:	b662      	cpsie	i
 8012d62:	61fb      	str	r3, [r7, #28]
 8012d64:	e7fe      	b.n	8012d64 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012d66:	f001 fa4f 	bl	8014208 <xTaskGetSchedulerState>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d102      	bne.n	8012d76 <xQueueReceive+0x72>
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d101      	bne.n	8012d7a <xQueueReceive+0x76>
 8012d76:	2301      	movs	r3, #1
 8012d78:	e000      	b.n	8012d7c <xQueueReceive+0x78>
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d10b      	bne.n	8012d98 <xQueueReceive+0x94>
 8012d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d84:	b672      	cpsid	i
 8012d86:	f383 8811 	msr	BASEPRI, r3
 8012d8a:	f3bf 8f6f 	isb	sy
 8012d8e:	f3bf 8f4f 	dsb	sy
 8012d92:	b662      	cpsie	i
 8012d94:	61bb      	str	r3, [r7, #24]
 8012d96:	e7fe      	b.n	8012d96 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012d98:	f002 f876 	bl	8014e88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012da0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d01f      	beq.n	8012de8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012da8:	68b9      	ldr	r1, [r7, #8]
 8012daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012dac:	f000 fac5 	bl	801333a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db2:	1e5a      	subs	r2, r3, #1
 8012db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dba:	691b      	ldr	r3, [r3, #16]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d00f      	beq.n	8012de0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dc2:	3310      	adds	r3, #16
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f001 f861 	bl	8013e8c <xTaskRemoveFromEventList>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d007      	beq.n	8012de0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012dd0:	4b3c      	ldr	r3, [pc, #240]	; (8012ec4 <xQueueReceive+0x1c0>)
 8012dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dd6:	601a      	str	r2, [r3, #0]
 8012dd8:	f3bf 8f4f 	dsb	sy
 8012ddc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012de0:	f002 f884 	bl	8014eec <vPortExitCritical>
				return pdPASS;
 8012de4:	2301      	movs	r3, #1
 8012de6:	e069      	b.n	8012ebc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d103      	bne.n	8012df6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012dee:	f002 f87d 	bl	8014eec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012df2:	2300      	movs	r3, #0
 8012df4:	e062      	b.n	8012ebc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d106      	bne.n	8012e0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012dfc:	f107 0310 	add.w	r3, r7, #16
 8012e00:	4618      	mov	r0, r3
 8012e02:	f001 f8a7 	bl	8013f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012e06:	2301      	movs	r3, #1
 8012e08:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012e0a:	f002 f86f 	bl	8014eec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012e0e:	f000 fe05 	bl	8013a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012e12:	f002 f839 	bl	8014e88 <vPortEnterCritical>
 8012e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e1c:	b25b      	sxtb	r3, r3
 8012e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e22:	d103      	bne.n	8012e2c <xQueueReceive+0x128>
 8012e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e26:	2200      	movs	r2, #0
 8012e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012e32:	b25b      	sxtb	r3, r3
 8012e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e38:	d103      	bne.n	8012e42 <xQueueReceive+0x13e>
 8012e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012e42:	f002 f853 	bl	8014eec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012e46:	1d3a      	adds	r2, r7, #4
 8012e48:	f107 0310 	add.w	r3, r7, #16
 8012e4c:	4611      	mov	r1, r2
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f001 f896 	bl	8013f80 <xTaskCheckForTimeOut>
 8012e54:	4603      	mov	r3, r0
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d123      	bne.n	8012ea2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e5c:	f000 fae5 	bl	801342a <prvIsQueueEmpty>
 8012e60:	4603      	mov	r3, r0
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d017      	beq.n	8012e96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e68:	3324      	adds	r3, #36	; 0x24
 8012e6a:	687a      	ldr	r2, [r7, #4]
 8012e6c:	4611      	mov	r1, r2
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f000 ffba 	bl	8013de8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e76:	f000 fa86 	bl	8013386 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012e7a:	f000 fddd 	bl	8013a38 <xTaskResumeAll>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d189      	bne.n	8012d98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8012e84:	4b0f      	ldr	r3, [pc, #60]	; (8012ec4 <xQueueReceive+0x1c0>)
 8012e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e8a:	601a      	str	r2, [r3, #0]
 8012e8c:	f3bf 8f4f 	dsb	sy
 8012e90:	f3bf 8f6f 	isb	sy
 8012e94:	e780      	b.n	8012d98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e98:	f000 fa75 	bl	8013386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012e9c:	f000 fdcc 	bl	8013a38 <xTaskResumeAll>
 8012ea0:	e77a      	b.n	8012d98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ea4:	f000 fa6f 	bl	8013386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012ea8:	f000 fdc6 	bl	8013a38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012eae:	f000 fabc 	bl	801342a <prvIsQueueEmpty>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	f43f af6f 	beq.w	8012d98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012eba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	3730      	adds	r7, #48	; 0x30
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}
 8012ec4:	e000ed04 	.word	0xe000ed04

08012ec8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b08e      	sub	sp, #56	; 0x38
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
 8012ed0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012eda:	2300      	movs	r3, #0
 8012edc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d10b      	bne.n	8012efc <xQueueSemaphoreTake+0x34>
 8012ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee8:	b672      	cpsid	i
 8012eea:	f383 8811 	msr	BASEPRI, r3
 8012eee:	f3bf 8f6f 	isb	sy
 8012ef2:	f3bf 8f4f 	dsb	sy
 8012ef6:	b662      	cpsie	i
 8012ef8:	623b      	str	r3, [r7, #32]
 8012efa:	e7fe      	b.n	8012efa <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d00b      	beq.n	8012f1c <xQueueSemaphoreTake+0x54>
 8012f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f08:	b672      	cpsid	i
 8012f0a:	f383 8811 	msr	BASEPRI, r3
 8012f0e:	f3bf 8f6f 	isb	sy
 8012f12:	f3bf 8f4f 	dsb	sy
 8012f16:	b662      	cpsie	i
 8012f18:	61fb      	str	r3, [r7, #28]
 8012f1a:	e7fe      	b.n	8012f1a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012f1c:	f001 f974 	bl	8014208 <xTaskGetSchedulerState>
 8012f20:	4603      	mov	r3, r0
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d102      	bne.n	8012f2c <xQueueSemaphoreTake+0x64>
 8012f26:	683b      	ldr	r3, [r7, #0]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d101      	bne.n	8012f30 <xQueueSemaphoreTake+0x68>
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	e000      	b.n	8012f32 <xQueueSemaphoreTake+0x6a>
 8012f30:	2300      	movs	r3, #0
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d10b      	bne.n	8012f4e <xQueueSemaphoreTake+0x86>
 8012f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f3a:	b672      	cpsid	i
 8012f3c:	f383 8811 	msr	BASEPRI, r3
 8012f40:	f3bf 8f6f 	isb	sy
 8012f44:	f3bf 8f4f 	dsb	sy
 8012f48:	b662      	cpsie	i
 8012f4a:	61bb      	str	r3, [r7, #24]
 8012f4c:	e7fe      	b.n	8012f4c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012f4e:	f001 ff9b 	bl	8014e88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f56:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d024      	beq.n	8012fa8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f60:	1e5a      	subs	r2, r3, #1
 8012f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f64:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d104      	bne.n	8012f78 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012f6e:	f001 fac5 	bl	80144fc <pvTaskIncrementMutexHeldCount>
 8012f72:	4602      	mov	r2, r0
 8012f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f76:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f7a:	691b      	ldr	r3, [r3, #16]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d00f      	beq.n	8012fa0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f82:	3310      	adds	r3, #16
 8012f84:	4618      	mov	r0, r3
 8012f86:	f000 ff81 	bl	8013e8c <xTaskRemoveFromEventList>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d007      	beq.n	8012fa0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012f90:	4b54      	ldr	r3, [pc, #336]	; (80130e4 <xQueueSemaphoreTake+0x21c>)
 8012f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f96:	601a      	str	r2, [r3, #0]
 8012f98:	f3bf 8f4f 	dsb	sy
 8012f9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012fa0:	f001 ffa4 	bl	8014eec <vPortExitCritical>
				return pdPASS;
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	e098      	b.n	80130da <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d112      	bne.n	8012fd4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d00b      	beq.n	8012fcc <xQueueSemaphoreTake+0x104>
 8012fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb8:	b672      	cpsid	i
 8012fba:	f383 8811 	msr	BASEPRI, r3
 8012fbe:	f3bf 8f6f 	isb	sy
 8012fc2:	f3bf 8f4f 	dsb	sy
 8012fc6:	b662      	cpsie	i
 8012fc8:	617b      	str	r3, [r7, #20]
 8012fca:	e7fe      	b.n	8012fca <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012fcc:	f001 ff8e 	bl	8014eec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	e082      	b.n	80130da <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d106      	bne.n	8012fe8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012fda:	f107 030c 	add.w	r3, r7, #12
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f000 ffb8 	bl	8013f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012fe8:	f001 ff80 	bl	8014eec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012fec:	f000 fd16 	bl	8013a1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012ff0:	f001 ff4a 	bl	8014e88 <vPortEnterCritical>
 8012ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ffa:	b25b      	sxtb	r3, r3
 8012ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013000:	d103      	bne.n	801300a <xQueueSemaphoreTake+0x142>
 8013002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013004:	2200      	movs	r2, #0
 8013006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801300c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013010:	b25b      	sxtb	r3, r3
 8013012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013016:	d103      	bne.n	8013020 <xQueueSemaphoreTake+0x158>
 8013018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801301a:	2200      	movs	r2, #0
 801301c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013020:	f001 ff64 	bl	8014eec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013024:	463a      	mov	r2, r7
 8013026:	f107 030c 	add.w	r3, r7, #12
 801302a:	4611      	mov	r1, r2
 801302c:	4618      	mov	r0, r3
 801302e:	f000 ffa7 	bl	8013f80 <xTaskCheckForTimeOut>
 8013032:	4603      	mov	r3, r0
 8013034:	2b00      	cmp	r3, #0
 8013036:	d132      	bne.n	801309e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013038:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801303a:	f000 f9f6 	bl	801342a <prvIsQueueEmpty>
 801303e:	4603      	mov	r3, r0
 8013040:	2b00      	cmp	r3, #0
 8013042:	d026      	beq.n	8013092 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d109      	bne.n	8013060 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801304c:	f001 ff1c 	bl	8014e88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013052:	689b      	ldr	r3, [r3, #8]
 8013054:	4618      	mov	r0, r3
 8013056:	f001 f8f5 	bl	8014244 <xTaskPriorityInherit>
 801305a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801305c:	f001 ff46 	bl	8014eec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013062:	3324      	adds	r3, #36	; 0x24
 8013064:	683a      	ldr	r2, [r7, #0]
 8013066:	4611      	mov	r1, r2
 8013068:	4618      	mov	r0, r3
 801306a:	f000 febd 	bl	8013de8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801306e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013070:	f000 f989 	bl	8013386 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013074:	f000 fce0 	bl	8013a38 <xTaskResumeAll>
 8013078:	4603      	mov	r3, r0
 801307a:	2b00      	cmp	r3, #0
 801307c:	f47f af67 	bne.w	8012f4e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013080:	4b18      	ldr	r3, [pc, #96]	; (80130e4 <xQueueSemaphoreTake+0x21c>)
 8013082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013086:	601a      	str	r2, [r3, #0]
 8013088:	f3bf 8f4f 	dsb	sy
 801308c:	f3bf 8f6f 	isb	sy
 8013090:	e75d      	b.n	8012f4e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013094:	f000 f977 	bl	8013386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013098:	f000 fcce 	bl	8013a38 <xTaskResumeAll>
 801309c:	e757      	b.n	8012f4e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801309e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130a0:	f000 f971 	bl	8013386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80130a4:	f000 fcc8 	bl	8013a38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80130a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130aa:	f000 f9be 	bl	801342a <prvIsQueueEmpty>
 80130ae:	4603      	mov	r3, r0
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	f43f af4c 	beq.w	8012f4e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80130b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d00d      	beq.n	80130d8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80130bc:	f001 fee4 	bl	8014e88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80130c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130c2:	f000 f8b8 	bl	8013236 <prvGetDisinheritPriorityAfterTimeout>
 80130c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80130c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ca:	689b      	ldr	r3, [r3, #8]
 80130cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80130ce:	4618      	mov	r0, r3
 80130d0:	f001 f990 	bl	80143f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80130d4:	f001 ff0a 	bl	8014eec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80130d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3738      	adds	r7, #56	; 0x38
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
 80130e2:	bf00      	nop
 80130e4:	e000ed04 	.word	0xe000ed04

080130e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b08e      	sub	sp, #56	; 0x38
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	60f8      	str	r0, [r7, #12]
 80130f0:	60b9      	str	r1, [r7, #8]
 80130f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80130f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d10b      	bne.n	8013116 <xQueueReceiveFromISR+0x2e>
 80130fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013102:	b672      	cpsid	i
 8013104:	f383 8811 	msr	BASEPRI, r3
 8013108:	f3bf 8f6f 	isb	sy
 801310c:	f3bf 8f4f 	dsb	sy
 8013110:	b662      	cpsie	i
 8013112:	623b      	str	r3, [r7, #32]
 8013114:	e7fe      	b.n	8013114 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d103      	bne.n	8013124 <xQueueReceiveFromISR+0x3c>
 801311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013120:	2b00      	cmp	r3, #0
 8013122:	d101      	bne.n	8013128 <xQueueReceiveFromISR+0x40>
 8013124:	2301      	movs	r3, #1
 8013126:	e000      	b.n	801312a <xQueueReceiveFromISR+0x42>
 8013128:	2300      	movs	r3, #0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d10b      	bne.n	8013146 <xQueueReceiveFromISR+0x5e>
 801312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013132:	b672      	cpsid	i
 8013134:	f383 8811 	msr	BASEPRI, r3
 8013138:	f3bf 8f6f 	isb	sy
 801313c:	f3bf 8f4f 	dsb	sy
 8013140:	b662      	cpsie	i
 8013142:	61fb      	str	r3, [r7, #28]
 8013144:	e7fe      	b.n	8013144 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013146:	f001 ff7f 	bl	8015048 <vPortValidateInterruptPriority>
	__asm volatile
 801314a:	f3ef 8211 	mrs	r2, BASEPRI
 801314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013152:	b672      	cpsid	i
 8013154:	f383 8811 	msr	BASEPRI, r3
 8013158:	f3bf 8f6f 	isb	sy
 801315c:	f3bf 8f4f 	dsb	sy
 8013160:	b662      	cpsie	i
 8013162:	61ba      	str	r2, [r7, #24]
 8013164:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013166:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013168:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801316e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013172:	2b00      	cmp	r3, #0
 8013174:	d02f      	beq.n	80131d6 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013178:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801317c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013180:	68b9      	ldr	r1, [r7, #8]
 8013182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013184:	f000 f8d9 	bl	801333a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801318a:	1e5a      	subs	r2, r3, #1
 801318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801318e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013190:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013198:	d112      	bne.n	80131c0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801319c:	691b      	ldr	r3, [r3, #16]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d016      	beq.n	80131d0 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131a4:	3310      	adds	r3, #16
 80131a6:	4618      	mov	r0, r3
 80131a8:	f000 fe70 	bl	8013e8c <xTaskRemoveFromEventList>
 80131ac:	4603      	mov	r3, r0
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d00e      	beq.n	80131d0 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d00b      	beq.n	80131d0 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2201      	movs	r2, #1
 80131bc:	601a      	str	r2, [r3, #0]
 80131be:	e007      	b.n	80131d0 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80131c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131c4:	3301      	adds	r3, #1
 80131c6:	b2db      	uxtb	r3, r3
 80131c8:	b25a      	sxtb	r2, r3
 80131ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80131d0:	2301      	movs	r3, #1
 80131d2:	637b      	str	r3, [r7, #52]	; 0x34
 80131d4:	e001      	b.n	80131da <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 80131d6:	2300      	movs	r3, #0
 80131d8:	637b      	str	r3, [r7, #52]	; 0x34
 80131da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80131de:	693b      	ldr	r3, [r7, #16]
 80131e0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80131e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3738      	adds	r7, #56	; 0x38
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}

080131ee <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80131ee:	b580      	push	{r7, lr}
 80131f0:	b084      	sub	sp, #16
 80131f2:	af00      	add	r7, sp, #0
 80131f4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d10b      	bne.n	8013218 <vQueueDelete+0x2a>
	__asm volatile
 8013200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013204:	b672      	cpsid	i
 8013206:	f383 8811 	msr	BASEPRI, r3
 801320a:	f3bf 8f6f 	isb	sy
 801320e:	f3bf 8f4f 	dsb	sy
 8013212:	b662      	cpsie	i
 8013214:	60bb      	str	r3, [r7, #8]
 8013216:	e7fe      	b.n	8013216 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	f000 f95d 	bl	80134d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013224:	2b00      	cmp	r3, #0
 8013226:	d102      	bne.n	801322e <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8013228:	68f8      	ldr	r0, [r7, #12]
 801322a:	f002 f817 	bl	801525c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801322e:	bf00      	nop
 8013230:	3710      	adds	r7, #16
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}

08013236 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013236:	b480      	push	{r7}
 8013238:	b085      	sub	sp, #20
 801323a:	af00      	add	r7, sp, #0
 801323c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013242:	2b00      	cmp	r3, #0
 8013244:	d006      	beq.n	8013254 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013250:	60fb      	str	r3, [r7, #12]
 8013252:	e001      	b.n	8013258 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013254:	2300      	movs	r3, #0
 8013256:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013258:	68fb      	ldr	r3, [r7, #12]
	}
 801325a:	4618      	mov	r0, r3
 801325c:	3714      	adds	r7, #20
 801325e:	46bd      	mov	sp, r7
 8013260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013264:	4770      	bx	lr

08013266 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013266:	b580      	push	{r7, lr}
 8013268:	b086      	sub	sp, #24
 801326a:	af00      	add	r7, sp, #0
 801326c:	60f8      	str	r0, [r7, #12]
 801326e:	60b9      	str	r1, [r7, #8]
 8013270:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013272:	2300      	movs	r3, #0
 8013274:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801327a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013280:	2b00      	cmp	r3, #0
 8013282:	d10d      	bne.n	80132a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d14d      	bne.n	8013328 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	689b      	ldr	r3, [r3, #8]
 8013290:	4618      	mov	r0, r3
 8013292:	f001 f83f 	bl	8014314 <xTaskPriorityDisinherit>
 8013296:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	2200      	movs	r2, #0
 801329c:	609a      	str	r2, [r3, #8]
 801329e:	e043      	b.n	8013328 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d119      	bne.n	80132da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	6858      	ldr	r0, [r3, #4]
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132ae:	461a      	mov	r2, r3
 80132b0:	68b9      	ldr	r1, [r7, #8]
 80132b2:	f002 fe71 	bl	8015f98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	685a      	ldr	r2, [r3, #4]
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132be:	441a      	add	r2, r3
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	685a      	ldr	r2, [r3, #4]
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	689b      	ldr	r3, [r3, #8]
 80132cc:	429a      	cmp	r2, r3
 80132ce:	d32b      	bcc.n	8013328 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	681a      	ldr	r2, [r3, #0]
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	605a      	str	r2, [r3, #4]
 80132d8:	e026      	b.n	8013328 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	68d8      	ldr	r0, [r3, #12]
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132e2:	461a      	mov	r2, r3
 80132e4:	68b9      	ldr	r1, [r7, #8]
 80132e6:	f002 fe57 	bl	8015f98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	68da      	ldr	r2, [r3, #12]
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132f2:	425b      	negs	r3, r3
 80132f4:	441a      	add	r2, r3
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	68da      	ldr	r2, [r3, #12]
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	429a      	cmp	r2, r3
 8013304:	d207      	bcs.n	8013316 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	689a      	ldr	r2, [r3, #8]
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801330e:	425b      	negs	r3, r3
 8013310:	441a      	add	r2, r3
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	2b02      	cmp	r3, #2
 801331a:	d105      	bne.n	8013328 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d002      	beq.n	8013328 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	3b01      	subs	r3, #1
 8013326:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	1c5a      	adds	r2, r3, #1
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013330:	697b      	ldr	r3, [r7, #20]
}
 8013332:	4618      	mov	r0, r3
 8013334:	3718      	adds	r7, #24
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}

0801333a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801333a:	b580      	push	{r7, lr}
 801333c:	b082      	sub	sp, #8
 801333e:	af00      	add	r7, sp, #0
 8013340:	6078      	str	r0, [r7, #4]
 8013342:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013348:	2b00      	cmp	r3, #0
 801334a:	d018      	beq.n	801337e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	68da      	ldr	r2, [r3, #12]
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013354:	441a      	add	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	68da      	ldr	r2, [r3, #12]
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	689b      	ldr	r3, [r3, #8]
 8013362:	429a      	cmp	r2, r3
 8013364:	d303      	bcc.n	801336e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681a      	ldr	r2, [r3, #0]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	68d9      	ldr	r1, [r3, #12]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013376:	461a      	mov	r2, r3
 8013378:	6838      	ldr	r0, [r7, #0]
 801337a:	f002 fe0d 	bl	8015f98 <memcpy>
	}
}
 801337e:	bf00      	nop
 8013380:	3708      	adds	r7, #8
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}

08013386 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013386:	b580      	push	{r7, lr}
 8013388:	b084      	sub	sp, #16
 801338a:	af00      	add	r7, sp, #0
 801338c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801338e:	f001 fd7b 	bl	8014e88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013398:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801339a:	e011      	b.n	80133c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d012      	beq.n	80133ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	3324      	adds	r3, #36	; 0x24
 80133a8:	4618      	mov	r0, r3
 80133aa:	f000 fd6f 	bl	8013e8c <xTaskRemoveFromEventList>
 80133ae:	4603      	mov	r3, r0
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d001      	beq.n	80133b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80133b4:	f000 fe48 	bl	8014048 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80133b8:	7bfb      	ldrb	r3, [r7, #15]
 80133ba:	3b01      	subs	r3, #1
 80133bc:	b2db      	uxtb	r3, r3
 80133be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80133c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	dce9      	bgt.n	801339c <prvUnlockQueue+0x16>
 80133c8:	e000      	b.n	80133cc <prvUnlockQueue+0x46>
					break;
 80133ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	22ff      	movs	r2, #255	; 0xff
 80133d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80133d4:	f001 fd8a 	bl	8014eec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80133d8:	f001 fd56 	bl	8014e88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80133e4:	e011      	b.n	801340a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	691b      	ldr	r3, [r3, #16]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d012      	beq.n	8013414 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	3310      	adds	r3, #16
 80133f2:	4618      	mov	r0, r3
 80133f4:	f000 fd4a 	bl	8013e8c <xTaskRemoveFromEventList>
 80133f8:	4603      	mov	r3, r0
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d001      	beq.n	8013402 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80133fe:	f000 fe23 	bl	8014048 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013402:	7bbb      	ldrb	r3, [r7, #14]
 8013404:	3b01      	subs	r3, #1
 8013406:	b2db      	uxtb	r3, r3
 8013408:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801340a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801340e:	2b00      	cmp	r3, #0
 8013410:	dce9      	bgt.n	80133e6 <prvUnlockQueue+0x60>
 8013412:	e000      	b.n	8013416 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013414:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	22ff      	movs	r2, #255	; 0xff
 801341a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801341e:	f001 fd65 	bl	8014eec <vPortExitCritical>
}
 8013422:	bf00      	nop
 8013424:	3710      	adds	r7, #16
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}

0801342a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801342a:	b580      	push	{r7, lr}
 801342c:	b084      	sub	sp, #16
 801342e:	af00      	add	r7, sp, #0
 8013430:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013432:	f001 fd29 	bl	8014e88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801343a:	2b00      	cmp	r3, #0
 801343c:	d102      	bne.n	8013444 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801343e:	2301      	movs	r3, #1
 8013440:	60fb      	str	r3, [r7, #12]
 8013442:	e001      	b.n	8013448 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013444:	2300      	movs	r3, #0
 8013446:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013448:	f001 fd50 	bl	8014eec <vPortExitCritical>

	return xReturn;
 801344c:	68fb      	ldr	r3, [r7, #12]
}
 801344e:	4618      	mov	r0, r3
 8013450:	3710      	adds	r7, #16
 8013452:	46bd      	mov	sp, r7
 8013454:	bd80      	pop	{r7, pc}

08013456 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013456:	b580      	push	{r7, lr}
 8013458:	b084      	sub	sp, #16
 801345a:	af00      	add	r7, sp, #0
 801345c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801345e:	f001 fd13 	bl	8014e88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801346a:	429a      	cmp	r2, r3
 801346c:	d102      	bne.n	8013474 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801346e:	2301      	movs	r3, #1
 8013470:	60fb      	str	r3, [r7, #12]
 8013472:	e001      	b.n	8013478 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013474:	2300      	movs	r3, #0
 8013476:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013478:	f001 fd38 	bl	8014eec <vPortExitCritical>

	return xReturn;
 801347c:	68fb      	ldr	r3, [r7, #12]
}
 801347e:	4618      	mov	r0, r3
 8013480:	3710      	adds	r7, #16
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}
	...

08013488 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013488:	b480      	push	{r7}
 801348a:	b085      	sub	sp, #20
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013492:	2300      	movs	r3, #0
 8013494:	60fb      	str	r3, [r7, #12]
 8013496:	e014      	b.n	80134c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013498:	4a0e      	ldr	r2, [pc, #56]	; (80134d4 <vQueueAddToRegistry+0x4c>)
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d10b      	bne.n	80134bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80134a4:	490b      	ldr	r1, [pc, #44]	; (80134d4 <vQueueAddToRegistry+0x4c>)
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	683a      	ldr	r2, [r7, #0]
 80134aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80134ae:	4a09      	ldr	r2, [pc, #36]	; (80134d4 <vQueueAddToRegistry+0x4c>)
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	00db      	lsls	r3, r3, #3
 80134b4:	4413      	add	r3, r2
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80134ba:	e005      	b.n	80134c8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	3301      	adds	r3, #1
 80134c0:	60fb      	str	r3, [r7, #12]
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	2b07      	cmp	r3, #7
 80134c6:	d9e7      	bls.n	8013498 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80134c8:	bf00      	nop
 80134ca:	3714      	adds	r7, #20
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr
 80134d4:	200093c8 	.word	0x200093c8

080134d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80134d8:	b480      	push	{r7}
 80134da:	b085      	sub	sp, #20
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80134e0:	2300      	movs	r3, #0
 80134e2:	60fb      	str	r3, [r7, #12]
 80134e4:	e016      	b.n	8013514 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80134e6:	4a10      	ldr	r2, [pc, #64]	; (8013528 <vQueueUnregisterQueue+0x50>)
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	00db      	lsls	r3, r3, #3
 80134ec:	4413      	add	r3, r2
 80134ee:	685b      	ldr	r3, [r3, #4]
 80134f0:	687a      	ldr	r2, [r7, #4]
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d10b      	bne.n	801350e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80134f6:	4a0c      	ldr	r2, [pc, #48]	; (8013528 <vQueueUnregisterQueue+0x50>)
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	2100      	movs	r1, #0
 80134fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013500:	4a09      	ldr	r2, [pc, #36]	; (8013528 <vQueueUnregisterQueue+0x50>)
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	00db      	lsls	r3, r3, #3
 8013506:	4413      	add	r3, r2
 8013508:	2200      	movs	r2, #0
 801350a:	605a      	str	r2, [r3, #4]
				break;
 801350c:	e005      	b.n	801351a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	3301      	adds	r3, #1
 8013512:	60fb      	str	r3, [r7, #12]
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	2b07      	cmp	r3, #7
 8013518:	d9e5      	bls.n	80134e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801351a:	bf00      	nop
 801351c:	3714      	adds	r7, #20
 801351e:	46bd      	mov	sp, r7
 8013520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013524:	4770      	bx	lr
 8013526:	bf00      	nop
 8013528:	200093c8 	.word	0x200093c8

0801352c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801352c:	b580      	push	{r7, lr}
 801352e:	b086      	sub	sp, #24
 8013530:	af00      	add	r7, sp, #0
 8013532:	60f8      	str	r0, [r7, #12]
 8013534:	60b9      	str	r1, [r7, #8]
 8013536:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801353c:	f001 fca4 	bl	8014e88 <vPortEnterCritical>
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013546:	b25b      	sxtb	r3, r3
 8013548:	f1b3 3fff 	cmp.w	r3, #4294967295
 801354c:	d103      	bne.n	8013556 <vQueueWaitForMessageRestricted+0x2a>
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	2200      	movs	r2, #0
 8013552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801355c:	b25b      	sxtb	r3, r3
 801355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013562:	d103      	bne.n	801356c <vQueueWaitForMessageRestricted+0x40>
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	2200      	movs	r2, #0
 8013568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801356c:	f001 fcbe 	bl	8014eec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013574:	2b00      	cmp	r3, #0
 8013576:	d106      	bne.n	8013586 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	3324      	adds	r3, #36	; 0x24
 801357c:	687a      	ldr	r2, [r7, #4]
 801357e:	68b9      	ldr	r1, [r7, #8]
 8013580:	4618      	mov	r0, r3
 8013582:	f000 fc57 	bl	8013e34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013586:	6978      	ldr	r0, [r7, #20]
 8013588:	f7ff fefd 	bl	8013386 <prvUnlockQueue>
	}
 801358c:	bf00      	nop
 801358e:	3718      	adds	r7, #24
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}

08013594 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013594:	b580      	push	{r7, lr}
 8013596:	b08e      	sub	sp, #56	; 0x38
 8013598:	af04      	add	r7, sp, #16
 801359a:	60f8      	str	r0, [r7, #12]
 801359c:	60b9      	str	r1, [r7, #8]
 801359e:	607a      	str	r2, [r7, #4]
 80135a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80135a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d10b      	bne.n	80135c0 <xTaskCreateStatic+0x2c>
 80135a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ac:	b672      	cpsid	i
 80135ae:	f383 8811 	msr	BASEPRI, r3
 80135b2:	f3bf 8f6f 	isb	sy
 80135b6:	f3bf 8f4f 	dsb	sy
 80135ba:	b662      	cpsie	i
 80135bc:	623b      	str	r3, [r7, #32]
 80135be:	e7fe      	b.n	80135be <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80135c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d10b      	bne.n	80135de <xTaskCreateStatic+0x4a>
 80135c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ca:	b672      	cpsid	i
 80135cc:	f383 8811 	msr	BASEPRI, r3
 80135d0:	f3bf 8f6f 	isb	sy
 80135d4:	f3bf 8f4f 	dsb	sy
 80135d8:	b662      	cpsie	i
 80135da:	61fb      	str	r3, [r7, #28]
 80135dc:	e7fe      	b.n	80135dc <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80135de:	235c      	movs	r3, #92	; 0x5c
 80135e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80135e2:	693b      	ldr	r3, [r7, #16]
 80135e4:	2b5c      	cmp	r3, #92	; 0x5c
 80135e6:	d00b      	beq.n	8013600 <xTaskCreateStatic+0x6c>
 80135e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ec:	b672      	cpsid	i
 80135ee:	f383 8811 	msr	BASEPRI, r3
 80135f2:	f3bf 8f6f 	isb	sy
 80135f6:	f3bf 8f4f 	dsb	sy
 80135fa:	b662      	cpsie	i
 80135fc:	61bb      	str	r3, [r7, #24]
 80135fe:	e7fe      	b.n	80135fe <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013600:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013604:	2b00      	cmp	r3, #0
 8013606:	d01e      	beq.n	8013646 <xTaskCreateStatic+0xb2>
 8013608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801360a:	2b00      	cmp	r3, #0
 801360c:	d01b      	beq.n	8013646 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013610:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013616:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801361a:	2202      	movs	r2, #2
 801361c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013620:	2300      	movs	r3, #0
 8013622:	9303      	str	r3, [sp, #12]
 8013624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013626:	9302      	str	r3, [sp, #8]
 8013628:	f107 0314 	add.w	r3, r7, #20
 801362c:	9301      	str	r3, [sp, #4]
 801362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013630:	9300      	str	r3, [sp, #0]
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	68b9      	ldr	r1, [r7, #8]
 8013638:	68f8      	ldr	r0, [r7, #12]
 801363a:	f000 f850 	bl	80136de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801363e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013640:	f000 f8de 	bl	8013800 <prvAddNewTaskToReadyList>
 8013644:	e001      	b.n	801364a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013646:	2300      	movs	r3, #0
 8013648:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801364a:	697b      	ldr	r3, [r7, #20]
	}
 801364c:	4618      	mov	r0, r3
 801364e:	3728      	adds	r7, #40	; 0x28
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}

08013654 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013654:	b580      	push	{r7, lr}
 8013656:	b08c      	sub	sp, #48	; 0x30
 8013658:	af04      	add	r7, sp, #16
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	603b      	str	r3, [r7, #0]
 8013660:	4613      	mov	r3, r2
 8013662:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013664:	88fb      	ldrh	r3, [r7, #6]
 8013666:	009b      	lsls	r3, r3, #2
 8013668:	4618      	mov	r0, r3
 801366a:	f001 fd2f 	bl	80150cc <pvPortMalloc>
 801366e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d00e      	beq.n	8013694 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013676:	205c      	movs	r0, #92	; 0x5c
 8013678:	f001 fd28 	bl	80150cc <pvPortMalloc>
 801367c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801367e:	69fb      	ldr	r3, [r7, #28]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d003      	beq.n	801368c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013684:	69fb      	ldr	r3, [r7, #28]
 8013686:	697a      	ldr	r2, [r7, #20]
 8013688:	631a      	str	r2, [r3, #48]	; 0x30
 801368a:	e005      	b.n	8013698 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801368c:	6978      	ldr	r0, [r7, #20]
 801368e:	f001 fde5 	bl	801525c <vPortFree>
 8013692:	e001      	b.n	8013698 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013694:	2300      	movs	r3, #0
 8013696:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013698:	69fb      	ldr	r3, [r7, #28]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d017      	beq.n	80136ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801369e:	69fb      	ldr	r3, [r7, #28]
 80136a0:	2200      	movs	r2, #0
 80136a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80136a6:	88fa      	ldrh	r2, [r7, #6]
 80136a8:	2300      	movs	r3, #0
 80136aa:	9303      	str	r3, [sp, #12]
 80136ac:	69fb      	ldr	r3, [r7, #28]
 80136ae:	9302      	str	r3, [sp, #8]
 80136b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b2:	9301      	str	r3, [sp, #4]
 80136b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b6:	9300      	str	r3, [sp, #0]
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	68b9      	ldr	r1, [r7, #8]
 80136bc:	68f8      	ldr	r0, [r7, #12]
 80136be:	f000 f80e 	bl	80136de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80136c2:	69f8      	ldr	r0, [r7, #28]
 80136c4:	f000 f89c 	bl	8013800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80136c8:	2301      	movs	r3, #1
 80136ca:	61bb      	str	r3, [r7, #24]
 80136cc:	e002      	b.n	80136d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80136ce:	f04f 33ff 	mov.w	r3, #4294967295
 80136d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80136d4:	69bb      	ldr	r3, [r7, #24]
	}
 80136d6:	4618      	mov	r0, r3
 80136d8:	3720      	adds	r7, #32
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}

080136de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80136de:	b580      	push	{r7, lr}
 80136e0:	b088      	sub	sp, #32
 80136e2:	af00      	add	r7, sp, #0
 80136e4:	60f8      	str	r0, [r7, #12]
 80136e6:	60b9      	str	r1, [r7, #8]
 80136e8:	607a      	str	r2, [r7, #4]
 80136ea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80136ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	009b      	lsls	r3, r3, #2
 80136f4:	461a      	mov	r2, r3
 80136f6:	21a5      	movs	r1, #165	; 0xa5
 80136f8:	f002 fc59 	bl	8015fae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80136fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013700:	6879      	ldr	r1, [r7, #4]
 8013702:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013706:	440b      	add	r3, r1
 8013708:	009b      	lsls	r3, r3, #2
 801370a:	4413      	add	r3, r2
 801370c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	f023 0307 	bic.w	r3, r3, #7
 8013714:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013716:	69bb      	ldr	r3, [r7, #24]
 8013718:	f003 0307 	and.w	r3, r3, #7
 801371c:	2b00      	cmp	r3, #0
 801371e:	d00b      	beq.n	8013738 <prvInitialiseNewTask+0x5a>
 8013720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013724:	b672      	cpsid	i
 8013726:	f383 8811 	msr	BASEPRI, r3
 801372a:	f3bf 8f6f 	isb	sy
 801372e:	f3bf 8f4f 	dsb	sy
 8013732:	b662      	cpsie	i
 8013734:	617b      	str	r3, [r7, #20]
 8013736:	e7fe      	b.n	8013736 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d01f      	beq.n	801377e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801373e:	2300      	movs	r3, #0
 8013740:	61fb      	str	r3, [r7, #28]
 8013742:	e012      	b.n	801376a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013744:	68ba      	ldr	r2, [r7, #8]
 8013746:	69fb      	ldr	r3, [r7, #28]
 8013748:	4413      	add	r3, r2
 801374a:	7819      	ldrb	r1, [r3, #0]
 801374c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801374e:	69fb      	ldr	r3, [r7, #28]
 8013750:	4413      	add	r3, r2
 8013752:	3334      	adds	r3, #52	; 0x34
 8013754:	460a      	mov	r2, r1
 8013756:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013758:	68ba      	ldr	r2, [r7, #8]
 801375a:	69fb      	ldr	r3, [r7, #28]
 801375c:	4413      	add	r3, r2
 801375e:	781b      	ldrb	r3, [r3, #0]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d006      	beq.n	8013772 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013764:	69fb      	ldr	r3, [r7, #28]
 8013766:	3301      	adds	r3, #1
 8013768:	61fb      	str	r3, [r7, #28]
 801376a:	69fb      	ldr	r3, [r7, #28]
 801376c:	2b0f      	cmp	r3, #15
 801376e:	d9e9      	bls.n	8013744 <prvInitialiseNewTask+0x66>
 8013770:	e000      	b.n	8013774 <prvInitialiseNewTask+0x96>
			{
				break;
 8013772:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013776:	2200      	movs	r2, #0
 8013778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801377c:	e003      	b.n	8013786 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013780:	2200      	movs	r2, #0
 8013782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013788:	2b37      	cmp	r3, #55	; 0x37
 801378a:	d901      	bls.n	8013790 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801378c:	2337      	movs	r3, #55	; 0x37
 801378e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013794:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801379a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801379e:	2200      	movs	r2, #0
 80137a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80137a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a4:	3304      	adds	r3, #4
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7fe fe2e 	bl	8012408 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80137ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ae:	3318      	adds	r3, #24
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7fe fe29 	bl	8012408 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80137b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80137c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80137c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80137cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ce:	2200      	movs	r2, #0
 80137d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80137d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d4:	2200      	movs	r2, #0
 80137d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80137da:	683a      	ldr	r2, [r7, #0]
 80137dc:	68f9      	ldr	r1, [r7, #12]
 80137de:	69b8      	ldr	r0, [r7, #24]
 80137e0:	f001 fa48 	bl	8014c74 <pxPortInitialiseStack>
 80137e4:	4602      	mov	r2, r0
 80137e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80137ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d002      	beq.n	80137f6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80137f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80137f6:	bf00      	nop
 80137f8:	3720      	adds	r7, #32
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}
	...

08013800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b082      	sub	sp, #8
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013808:	f001 fb3e 	bl	8014e88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801380c:	4b2d      	ldr	r3, [pc, #180]	; (80138c4 <prvAddNewTaskToReadyList+0xc4>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	3301      	adds	r3, #1
 8013812:	4a2c      	ldr	r2, [pc, #176]	; (80138c4 <prvAddNewTaskToReadyList+0xc4>)
 8013814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013816:	4b2c      	ldr	r3, [pc, #176]	; (80138c8 <prvAddNewTaskToReadyList+0xc8>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d109      	bne.n	8013832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801381e:	4a2a      	ldr	r2, [pc, #168]	; (80138c8 <prvAddNewTaskToReadyList+0xc8>)
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013824:	4b27      	ldr	r3, [pc, #156]	; (80138c4 <prvAddNewTaskToReadyList+0xc4>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	2b01      	cmp	r3, #1
 801382a:	d110      	bne.n	801384e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801382c:	f000 fc30 	bl	8014090 <prvInitialiseTaskLists>
 8013830:	e00d      	b.n	801384e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013832:	4b26      	ldr	r3, [pc, #152]	; (80138cc <prvAddNewTaskToReadyList+0xcc>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d109      	bne.n	801384e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801383a:	4b23      	ldr	r3, [pc, #140]	; (80138c8 <prvAddNewTaskToReadyList+0xc8>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013844:	429a      	cmp	r2, r3
 8013846:	d802      	bhi.n	801384e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013848:	4a1f      	ldr	r2, [pc, #124]	; (80138c8 <prvAddNewTaskToReadyList+0xc8>)
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801384e:	4b20      	ldr	r3, [pc, #128]	; (80138d0 <prvAddNewTaskToReadyList+0xd0>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	3301      	adds	r3, #1
 8013854:	4a1e      	ldr	r2, [pc, #120]	; (80138d0 <prvAddNewTaskToReadyList+0xd0>)
 8013856:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013858:	4b1d      	ldr	r3, [pc, #116]	; (80138d0 <prvAddNewTaskToReadyList+0xd0>)
 801385a:	681a      	ldr	r2, [r3, #0]
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013864:	4b1b      	ldr	r3, [pc, #108]	; (80138d4 <prvAddNewTaskToReadyList+0xd4>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	429a      	cmp	r2, r3
 801386a:	d903      	bls.n	8013874 <prvAddNewTaskToReadyList+0x74>
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013870:	4a18      	ldr	r2, [pc, #96]	; (80138d4 <prvAddNewTaskToReadyList+0xd4>)
 8013872:	6013      	str	r3, [r2, #0]
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013878:	4613      	mov	r3, r2
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	4413      	add	r3, r2
 801387e:	009b      	lsls	r3, r3, #2
 8013880:	4a15      	ldr	r2, [pc, #84]	; (80138d8 <prvAddNewTaskToReadyList+0xd8>)
 8013882:	441a      	add	r2, r3
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	3304      	adds	r3, #4
 8013888:	4619      	mov	r1, r3
 801388a:	4610      	mov	r0, r2
 801388c:	f7fe fdc9 	bl	8012422 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013890:	f001 fb2c 	bl	8014eec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013894:	4b0d      	ldr	r3, [pc, #52]	; (80138cc <prvAddNewTaskToReadyList+0xcc>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d00e      	beq.n	80138ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801389c:	4b0a      	ldr	r3, [pc, #40]	; (80138c8 <prvAddNewTaskToReadyList+0xc8>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d207      	bcs.n	80138ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80138aa:	4b0c      	ldr	r3, [pc, #48]	; (80138dc <prvAddNewTaskToReadyList+0xdc>)
 80138ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138b0:	601a      	str	r2, [r3, #0]
 80138b2:	f3bf 8f4f 	dsb	sy
 80138b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80138ba:	bf00      	nop
 80138bc:	3708      	adds	r7, #8
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
 80138c2:	bf00      	nop
 80138c4:	20000e60 	.word	0x20000e60
 80138c8:	2000098c 	.word	0x2000098c
 80138cc:	20000e6c 	.word	0x20000e6c
 80138d0:	20000e7c 	.word	0x20000e7c
 80138d4:	20000e68 	.word	0x20000e68
 80138d8:	20000990 	.word	0x20000990
 80138dc:	e000ed04 	.word	0xe000ed04

080138e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b084      	sub	sp, #16
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80138e8:	2300      	movs	r3, #0
 80138ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d018      	beq.n	8013924 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80138f2:	4b14      	ldr	r3, [pc, #80]	; (8013944 <vTaskDelay+0x64>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d00b      	beq.n	8013912 <vTaskDelay+0x32>
 80138fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138fe:	b672      	cpsid	i
 8013900:	f383 8811 	msr	BASEPRI, r3
 8013904:	f3bf 8f6f 	isb	sy
 8013908:	f3bf 8f4f 	dsb	sy
 801390c:	b662      	cpsie	i
 801390e:	60bb      	str	r3, [r7, #8]
 8013910:	e7fe      	b.n	8013910 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8013912:	f000 f883 	bl	8013a1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013916:	2100      	movs	r1, #0
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f000 fe03 	bl	8014524 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801391e:	f000 f88b 	bl	8013a38 <xTaskResumeAll>
 8013922:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d107      	bne.n	801393a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801392a:	4b07      	ldr	r3, [pc, #28]	; (8013948 <vTaskDelay+0x68>)
 801392c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013930:	601a      	str	r2, [r3, #0]
 8013932:	f3bf 8f4f 	dsb	sy
 8013936:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801393a:	bf00      	nop
 801393c:	3710      	adds	r7, #16
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}
 8013942:	bf00      	nop
 8013944:	20000e88 	.word	0x20000e88
 8013948:	e000ed04 	.word	0xe000ed04

0801394c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b08a      	sub	sp, #40	; 0x28
 8013950:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013952:	2300      	movs	r3, #0
 8013954:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013956:	2300      	movs	r3, #0
 8013958:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801395a:	463a      	mov	r2, r7
 801395c:	1d39      	adds	r1, r7, #4
 801395e:	f107 0308 	add.w	r3, r7, #8
 8013962:	4618      	mov	r0, r3
 8013964:	f7fe fcfc 	bl	8012360 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013968:	6839      	ldr	r1, [r7, #0]
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	68ba      	ldr	r2, [r7, #8]
 801396e:	9202      	str	r2, [sp, #8]
 8013970:	9301      	str	r3, [sp, #4]
 8013972:	2300      	movs	r3, #0
 8013974:	9300      	str	r3, [sp, #0]
 8013976:	2300      	movs	r3, #0
 8013978:	460a      	mov	r2, r1
 801397a:	4922      	ldr	r1, [pc, #136]	; (8013a04 <vTaskStartScheduler+0xb8>)
 801397c:	4822      	ldr	r0, [pc, #136]	; (8013a08 <vTaskStartScheduler+0xbc>)
 801397e:	f7ff fe09 	bl	8013594 <xTaskCreateStatic>
 8013982:	4602      	mov	r2, r0
 8013984:	4b21      	ldr	r3, [pc, #132]	; (8013a0c <vTaskStartScheduler+0xc0>)
 8013986:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013988:	4b20      	ldr	r3, [pc, #128]	; (8013a0c <vTaskStartScheduler+0xc0>)
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d002      	beq.n	8013996 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013990:	2301      	movs	r3, #1
 8013992:	617b      	str	r3, [r7, #20]
 8013994:	e001      	b.n	801399a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013996:	2300      	movs	r3, #0
 8013998:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	2b01      	cmp	r3, #1
 801399e:	d102      	bne.n	80139a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80139a0:	f000 fe14 	bl	80145cc <xTimerCreateTimerTask>
 80139a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	2b01      	cmp	r3, #1
 80139aa:	d117      	bne.n	80139dc <vTaskStartScheduler+0x90>
 80139ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139b0:	b672      	cpsid	i
 80139b2:	f383 8811 	msr	BASEPRI, r3
 80139b6:	f3bf 8f6f 	isb	sy
 80139ba:	f3bf 8f4f 	dsb	sy
 80139be:	b662      	cpsie	i
 80139c0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80139c2:	4b13      	ldr	r3, [pc, #76]	; (8013a10 <vTaskStartScheduler+0xc4>)
 80139c4:	f04f 32ff 	mov.w	r2, #4294967295
 80139c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80139ca:	4b12      	ldr	r3, [pc, #72]	; (8013a14 <vTaskStartScheduler+0xc8>)
 80139cc:	2201      	movs	r2, #1
 80139ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80139d0:	4b11      	ldr	r3, [pc, #68]	; (8013a18 <vTaskStartScheduler+0xcc>)
 80139d2:	2200      	movs	r2, #0
 80139d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80139d6:	f001 f9db 	bl	8014d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80139da:	e00f      	b.n	80139fc <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139e2:	d10b      	bne.n	80139fc <vTaskStartScheduler+0xb0>
 80139e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e8:	b672      	cpsid	i
 80139ea:	f383 8811 	msr	BASEPRI, r3
 80139ee:	f3bf 8f6f 	isb	sy
 80139f2:	f3bf 8f4f 	dsb	sy
 80139f6:	b662      	cpsie	i
 80139f8:	60fb      	str	r3, [r7, #12]
 80139fa:	e7fe      	b.n	80139fa <vTaskStartScheduler+0xae>
}
 80139fc:	bf00      	nop
 80139fe:	3718      	adds	r7, #24
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}
 8013a04:	080161ac 	.word	0x080161ac
 8013a08:	08014061 	.word	0x08014061
 8013a0c:	20000e84 	.word	0x20000e84
 8013a10:	20000e80 	.word	0x20000e80
 8013a14:	20000e6c 	.word	0x20000e6c
 8013a18:	20000e64 	.word	0x20000e64

08013a1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013a1c:	b480      	push	{r7}
 8013a1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013a20:	4b04      	ldr	r3, [pc, #16]	; (8013a34 <vTaskSuspendAll+0x18>)
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	3301      	adds	r3, #1
 8013a26:	4a03      	ldr	r2, [pc, #12]	; (8013a34 <vTaskSuspendAll+0x18>)
 8013a28:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013a2a:	bf00      	nop
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a32:	4770      	bx	lr
 8013a34:	20000e88 	.word	0x20000e88

08013a38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b084      	sub	sp, #16
 8013a3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013a42:	2300      	movs	r3, #0
 8013a44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013a46:	4b42      	ldr	r3, [pc, #264]	; (8013b50 <xTaskResumeAll+0x118>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d10b      	bne.n	8013a66 <xTaskResumeAll+0x2e>
 8013a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a52:	b672      	cpsid	i
 8013a54:	f383 8811 	msr	BASEPRI, r3
 8013a58:	f3bf 8f6f 	isb	sy
 8013a5c:	f3bf 8f4f 	dsb	sy
 8013a60:	b662      	cpsie	i
 8013a62:	603b      	str	r3, [r7, #0]
 8013a64:	e7fe      	b.n	8013a64 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013a66:	f001 fa0f 	bl	8014e88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013a6a:	4b39      	ldr	r3, [pc, #228]	; (8013b50 <xTaskResumeAll+0x118>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	3b01      	subs	r3, #1
 8013a70:	4a37      	ldr	r2, [pc, #220]	; (8013b50 <xTaskResumeAll+0x118>)
 8013a72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a74:	4b36      	ldr	r3, [pc, #216]	; (8013b50 <xTaskResumeAll+0x118>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d162      	bne.n	8013b42 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013a7c:	4b35      	ldr	r3, [pc, #212]	; (8013b54 <xTaskResumeAll+0x11c>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d05e      	beq.n	8013b42 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013a84:	e02f      	b.n	8013ae6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a86:	4b34      	ldr	r3, [pc, #208]	; (8013b58 <xTaskResumeAll+0x120>)
 8013a88:	68db      	ldr	r3, [r3, #12]
 8013a8a:	68db      	ldr	r3, [r3, #12]
 8013a8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	3318      	adds	r3, #24
 8013a92:	4618      	mov	r0, r3
 8013a94:	f7fe fd22 	bl	80124dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	3304      	adds	r3, #4
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7fe fd1d 	bl	80124dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aa6:	4b2d      	ldr	r3, [pc, #180]	; (8013b5c <xTaskResumeAll+0x124>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	429a      	cmp	r2, r3
 8013aac:	d903      	bls.n	8013ab6 <xTaskResumeAll+0x7e>
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ab2:	4a2a      	ldr	r2, [pc, #168]	; (8013b5c <xTaskResumeAll+0x124>)
 8013ab4:	6013      	str	r3, [r2, #0]
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aba:	4613      	mov	r3, r2
 8013abc:	009b      	lsls	r3, r3, #2
 8013abe:	4413      	add	r3, r2
 8013ac0:	009b      	lsls	r3, r3, #2
 8013ac2:	4a27      	ldr	r2, [pc, #156]	; (8013b60 <xTaskResumeAll+0x128>)
 8013ac4:	441a      	add	r2, r3
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	3304      	adds	r3, #4
 8013aca:	4619      	mov	r1, r3
 8013acc:	4610      	mov	r0, r2
 8013ace:	f7fe fca8 	bl	8012422 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ad6:	4b23      	ldr	r3, [pc, #140]	; (8013b64 <xTaskResumeAll+0x12c>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d302      	bcc.n	8013ae6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013ae0:	4b21      	ldr	r3, [pc, #132]	; (8013b68 <xTaskResumeAll+0x130>)
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013ae6:	4b1c      	ldr	r3, [pc, #112]	; (8013b58 <xTaskResumeAll+0x120>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d1cb      	bne.n	8013a86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d001      	beq.n	8013af8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013af4:	f000 fb68 	bl	80141c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013af8:	4b1c      	ldr	r3, [pc, #112]	; (8013b6c <xTaskResumeAll+0x134>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d010      	beq.n	8013b26 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013b04:	f000 f858 	bl	8013bb8 <xTaskIncrementTick>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d002      	beq.n	8013b14 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8013b0e:	4b16      	ldr	r3, [pc, #88]	; (8013b68 <xTaskResumeAll+0x130>)
 8013b10:	2201      	movs	r2, #1
 8013b12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	3b01      	subs	r3, #1
 8013b18:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d1f1      	bne.n	8013b04 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8013b20:	4b12      	ldr	r3, [pc, #72]	; (8013b6c <xTaskResumeAll+0x134>)
 8013b22:	2200      	movs	r2, #0
 8013b24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013b26:	4b10      	ldr	r3, [pc, #64]	; (8013b68 <xTaskResumeAll+0x130>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d009      	beq.n	8013b42 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013b2e:	2301      	movs	r3, #1
 8013b30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013b32:	4b0f      	ldr	r3, [pc, #60]	; (8013b70 <xTaskResumeAll+0x138>)
 8013b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b38:	601a      	str	r2, [r3, #0]
 8013b3a:	f3bf 8f4f 	dsb	sy
 8013b3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013b42:	f001 f9d3 	bl	8014eec <vPortExitCritical>

	return xAlreadyYielded;
 8013b46:	68bb      	ldr	r3, [r7, #8]
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3710      	adds	r7, #16
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	20000e88 	.word	0x20000e88
 8013b54:	20000e60 	.word	0x20000e60
 8013b58:	20000e20 	.word	0x20000e20
 8013b5c:	20000e68 	.word	0x20000e68
 8013b60:	20000990 	.word	0x20000990
 8013b64:	2000098c 	.word	0x2000098c
 8013b68:	20000e74 	.word	0x20000e74
 8013b6c:	20000e70 	.word	0x20000e70
 8013b70:	e000ed04 	.word	0xe000ed04

08013b74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013b74:	b480      	push	{r7}
 8013b76:	b083      	sub	sp, #12
 8013b78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013b7a:	4b05      	ldr	r3, [pc, #20]	; (8013b90 <xTaskGetTickCount+0x1c>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013b80:	687b      	ldr	r3, [r7, #4]
}
 8013b82:	4618      	mov	r0, r3
 8013b84:	370c      	adds	r7, #12
 8013b86:	46bd      	mov	sp, r7
 8013b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8c:	4770      	bx	lr
 8013b8e:	bf00      	nop
 8013b90:	20000e64 	.word	0x20000e64

08013b94 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b9a:	f001 fa55 	bl	8015048 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013ba2:	4b04      	ldr	r3, [pc, #16]	; (8013bb4 <xTaskGetTickCountFromISR+0x20>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013ba8:	683b      	ldr	r3, [r7, #0]
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	3708      	adds	r7, #8
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}
 8013bb2:	bf00      	nop
 8013bb4:	20000e64 	.word	0x20000e64

08013bb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b086      	sub	sp, #24
 8013bbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013bc2:	4b4f      	ldr	r3, [pc, #316]	; (8013d00 <xTaskIncrementTick+0x148>)
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	f040 808a 	bne.w	8013ce0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013bcc:	4b4d      	ldr	r3, [pc, #308]	; (8013d04 <xTaskIncrementTick+0x14c>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	3301      	adds	r3, #1
 8013bd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013bd4:	4a4b      	ldr	r2, [pc, #300]	; (8013d04 <xTaskIncrementTick+0x14c>)
 8013bd6:	693b      	ldr	r3, [r7, #16]
 8013bd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d121      	bne.n	8013c24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013be0:	4b49      	ldr	r3, [pc, #292]	; (8013d08 <xTaskIncrementTick+0x150>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d00b      	beq.n	8013c02 <xTaskIncrementTick+0x4a>
 8013bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bee:	b672      	cpsid	i
 8013bf0:	f383 8811 	msr	BASEPRI, r3
 8013bf4:	f3bf 8f6f 	isb	sy
 8013bf8:	f3bf 8f4f 	dsb	sy
 8013bfc:	b662      	cpsie	i
 8013bfe:	603b      	str	r3, [r7, #0]
 8013c00:	e7fe      	b.n	8013c00 <xTaskIncrementTick+0x48>
 8013c02:	4b41      	ldr	r3, [pc, #260]	; (8013d08 <xTaskIncrementTick+0x150>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	60fb      	str	r3, [r7, #12]
 8013c08:	4b40      	ldr	r3, [pc, #256]	; (8013d0c <xTaskIncrementTick+0x154>)
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	4a3e      	ldr	r2, [pc, #248]	; (8013d08 <xTaskIncrementTick+0x150>)
 8013c0e:	6013      	str	r3, [r2, #0]
 8013c10:	4a3e      	ldr	r2, [pc, #248]	; (8013d0c <xTaskIncrementTick+0x154>)
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	6013      	str	r3, [r2, #0]
 8013c16:	4b3e      	ldr	r3, [pc, #248]	; (8013d10 <xTaskIncrementTick+0x158>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	3301      	adds	r3, #1
 8013c1c:	4a3c      	ldr	r2, [pc, #240]	; (8013d10 <xTaskIncrementTick+0x158>)
 8013c1e:	6013      	str	r3, [r2, #0]
 8013c20:	f000 fad2 	bl	80141c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013c24:	4b3b      	ldr	r3, [pc, #236]	; (8013d14 <xTaskIncrementTick+0x15c>)
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	693a      	ldr	r2, [r7, #16]
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	d349      	bcc.n	8013cc2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013c2e:	4b36      	ldr	r3, [pc, #216]	; (8013d08 <xTaskIncrementTick+0x150>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d104      	bne.n	8013c42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c38:	4b36      	ldr	r3, [pc, #216]	; (8013d14 <xTaskIncrementTick+0x15c>)
 8013c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c3e:	601a      	str	r2, [r3, #0]
					break;
 8013c40:	e03f      	b.n	8013cc2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c42:	4b31      	ldr	r3, [pc, #196]	; (8013d08 <xTaskIncrementTick+0x150>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	68db      	ldr	r3, [r3, #12]
 8013c4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013c52:	693a      	ldr	r2, [r7, #16]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d203      	bcs.n	8013c62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013c5a:	4a2e      	ldr	r2, [pc, #184]	; (8013d14 <xTaskIncrementTick+0x15c>)
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013c60:	e02f      	b.n	8013cc2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c62:	68bb      	ldr	r3, [r7, #8]
 8013c64:	3304      	adds	r3, #4
 8013c66:	4618      	mov	r0, r3
 8013c68:	f7fe fc38 	bl	80124dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013c6c:	68bb      	ldr	r3, [r7, #8]
 8013c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d004      	beq.n	8013c7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	3318      	adds	r3, #24
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7fe fc2f 	bl	80124dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c82:	4b25      	ldr	r3, [pc, #148]	; (8013d18 <xTaskIncrementTick+0x160>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d903      	bls.n	8013c92 <xTaskIncrementTick+0xda>
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c8e:	4a22      	ldr	r2, [pc, #136]	; (8013d18 <xTaskIncrementTick+0x160>)
 8013c90:	6013      	str	r3, [r2, #0]
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c96:	4613      	mov	r3, r2
 8013c98:	009b      	lsls	r3, r3, #2
 8013c9a:	4413      	add	r3, r2
 8013c9c:	009b      	lsls	r3, r3, #2
 8013c9e:	4a1f      	ldr	r2, [pc, #124]	; (8013d1c <xTaskIncrementTick+0x164>)
 8013ca0:	441a      	add	r2, r3
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	3304      	adds	r3, #4
 8013ca6:	4619      	mov	r1, r3
 8013ca8:	4610      	mov	r0, r2
 8013caa:	f7fe fbba 	bl	8012422 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013cae:	68bb      	ldr	r3, [r7, #8]
 8013cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cb2:	4b1b      	ldr	r3, [pc, #108]	; (8013d20 <xTaskIncrementTick+0x168>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d3b8      	bcc.n	8013c2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013cc0:	e7b5      	b.n	8013c2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013cc2:	4b17      	ldr	r3, [pc, #92]	; (8013d20 <xTaskIncrementTick+0x168>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cc8:	4914      	ldr	r1, [pc, #80]	; (8013d1c <xTaskIncrementTick+0x164>)
 8013cca:	4613      	mov	r3, r2
 8013ccc:	009b      	lsls	r3, r3, #2
 8013cce:	4413      	add	r3, r2
 8013cd0:	009b      	lsls	r3, r3, #2
 8013cd2:	440b      	add	r3, r1
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	2b01      	cmp	r3, #1
 8013cd8:	d907      	bls.n	8013cea <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8013cda:	2301      	movs	r3, #1
 8013cdc:	617b      	str	r3, [r7, #20]
 8013cde:	e004      	b.n	8013cea <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013ce0:	4b10      	ldr	r3, [pc, #64]	; (8013d24 <xTaskIncrementTick+0x16c>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	3301      	adds	r3, #1
 8013ce6:	4a0f      	ldr	r2, [pc, #60]	; (8013d24 <xTaskIncrementTick+0x16c>)
 8013ce8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013cea:	4b0f      	ldr	r3, [pc, #60]	; (8013d28 <xTaskIncrementTick+0x170>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d001      	beq.n	8013cf6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013cf6:	697b      	ldr	r3, [r7, #20]
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	3718      	adds	r7, #24
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}
 8013d00:	20000e88 	.word	0x20000e88
 8013d04:	20000e64 	.word	0x20000e64
 8013d08:	20000e18 	.word	0x20000e18
 8013d0c:	20000e1c 	.word	0x20000e1c
 8013d10:	20000e78 	.word	0x20000e78
 8013d14:	20000e80 	.word	0x20000e80
 8013d18:	20000e68 	.word	0x20000e68
 8013d1c:	20000990 	.word	0x20000990
 8013d20:	2000098c 	.word	0x2000098c
 8013d24:	20000e70 	.word	0x20000e70
 8013d28:	20000e74 	.word	0x20000e74

08013d2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013d2c:	b480      	push	{r7}
 8013d2e:	b085      	sub	sp, #20
 8013d30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013d32:	4b28      	ldr	r3, [pc, #160]	; (8013dd4 <vTaskSwitchContext+0xa8>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d003      	beq.n	8013d42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013d3a:	4b27      	ldr	r3, [pc, #156]	; (8013dd8 <vTaskSwitchContext+0xac>)
 8013d3c:	2201      	movs	r2, #1
 8013d3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013d40:	e042      	b.n	8013dc8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8013d42:	4b25      	ldr	r3, [pc, #148]	; (8013dd8 <vTaskSwitchContext+0xac>)
 8013d44:	2200      	movs	r2, #0
 8013d46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d48:	4b24      	ldr	r3, [pc, #144]	; (8013ddc <vTaskSwitchContext+0xb0>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	60fb      	str	r3, [r7, #12]
 8013d4e:	e011      	b.n	8013d74 <vTaskSwitchContext+0x48>
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d10b      	bne.n	8013d6e <vTaskSwitchContext+0x42>
 8013d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d5a:	b672      	cpsid	i
 8013d5c:	f383 8811 	msr	BASEPRI, r3
 8013d60:	f3bf 8f6f 	isb	sy
 8013d64:	f3bf 8f4f 	dsb	sy
 8013d68:	b662      	cpsie	i
 8013d6a:	607b      	str	r3, [r7, #4]
 8013d6c:	e7fe      	b.n	8013d6c <vTaskSwitchContext+0x40>
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	3b01      	subs	r3, #1
 8013d72:	60fb      	str	r3, [r7, #12]
 8013d74:	491a      	ldr	r1, [pc, #104]	; (8013de0 <vTaskSwitchContext+0xb4>)
 8013d76:	68fa      	ldr	r2, [r7, #12]
 8013d78:	4613      	mov	r3, r2
 8013d7a:	009b      	lsls	r3, r3, #2
 8013d7c:	4413      	add	r3, r2
 8013d7e:	009b      	lsls	r3, r3, #2
 8013d80:	440b      	add	r3, r1
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d0e3      	beq.n	8013d50 <vTaskSwitchContext+0x24>
 8013d88:	68fa      	ldr	r2, [r7, #12]
 8013d8a:	4613      	mov	r3, r2
 8013d8c:	009b      	lsls	r3, r3, #2
 8013d8e:	4413      	add	r3, r2
 8013d90:	009b      	lsls	r3, r3, #2
 8013d92:	4a13      	ldr	r2, [pc, #76]	; (8013de0 <vTaskSwitchContext+0xb4>)
 8013d94:	4413      	add	r3, r2
 8013d96:	60bb      	str	r3, [r7, #8]
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	685b      	ldr	r3, [r3, #4]
 8013d9c:	685a      	ldr	r2, [r3, #4]
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	605a      	str	r2, [r3, #4]
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	685a      	ldr	r2, [r3, #4]
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	3308      	adds	r3, #8
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d104      	bne.n	8013db8 <vTaskSwitchContext+0x8c>
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	685b      	ldr	r3, [r3, #4]
 8013db2:	685a      	ldr	r2, [r3, #4]
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	605a      	str	r2, [r3, #4]
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	685b      	ldr	r3, [r3, #4]
 8013dbc:	68db      	ldr	r3, [r3, #12]
 8013dbe:	4a09      	ldr	r2, [pc, #36]	; (8013de4 <vTaskSwitchContext+0xb8>)
 8013dc0:	6013      	str	r3, [r2, #0]
 8013dc2:	4a06      	ldr	r2, [pc, #24]	; (8013ddc <vTaskSwitchContext+0xb0>)
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	6013      	str	r3, [r2, #0]
}
 8013dc8:	bf00      	nop
 8013dca:	3714      	adds	r7, #20
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd2:	4770      	bx	lr
 8013dd4:	20000e88 	.word	0x20000e88
 8013dd8:	20000e74 	.word	0x20000e74
 8013ddc:	20000e68 	.word	0x20000e68
 8013de0:	20000990 	.word	0x20000990
 8013de4:	2000098c 	.word	0x2000098c

08013de8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b084      	sub	sp, #16
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d10b      	bne.n	8013e10 <vTaskPlaceOnEventList+0x28>
 8013df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dfc:	b672      	cpsid	i
 8013dfe:	f383 8811 	msr	BASEPRI, r3
 8013e02:	f3bf 8f6f 	isb	sy
 8013e06:	f3bf 8f4f 	dsb	sy
 8013e0a:	b662      	cpsie	i
 8013e0c:	60fb      	str	r3, [r7, #12]
 8013e0e:	e7fe      	b.n	8013e0e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013e10:	4b07      	ldr	r3, [pc, #28]	; (8013e30 <vTaskPlaceOnEventList+0x48>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	3318      	adds	r3, #24
 8013e16:	4619      	mov	r1, r3
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f7fe fb26 	bl	801246a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013e1e:	2101      	movs	r1, #1
 8013e20:	6838      	ldr	r0, [r7, #0]
 8013e22:	f000 fb7f 	bl	8014524 <prvAddCurrentTaskToDelayedList>
}
 8013e26:	bf00      	nop
 8013e28:	3710      	adds	r7, #16
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}
 8013e2e:	bf00      	nop
 8013e30:	2000098c 	.word	0x2000098c

08013e34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b086      	sub	sp, #24
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	60f8      	str	r0, [r7, #12]
 8013e3c:	60b9      	str	r1, [r7, #8]
 8013e3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d10b      	bne.n	8013e5e <vTaskPlaceOnEventListRestricted+0x2a>
 8013e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e4a:	b672      	cpsid	i
 8013e4c:	f383 8811 	msr	BASEPRI, r3
 8013e50:	f3bf 8f6f 	isb	sy
 8013e54:	f3bf 8f4f 	dsb	sy
 8013e58:	b662      	cpsie	i
 8013e5a:	617b      	str	r3, [r7, #20]
 8013e5c:	e7fe      	b.n	8013e5c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013e5e:	4b0a      	ldr	r3, [pc, #40]	; (8013e88 <vTaskPlaceOnEventListRestricted+0x54>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	3318      	adds	r3, #24
 8013e64:	4619      	mov	r1, r3
 8013e66:	68f8      	ldr	r0, [r7, #12]
 8013e68:	f7fe fadb 	bl	8012422 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d002      	beq.n	8013e78 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8013e72:	f04f 33ff 	mov.w	r3, #4294967295
 8013e76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013e78:	6879      	ldr	r1, [r7, #4]
 8013e7a:	68b8      	ldr	r0, [r7, #8]
 8013e7c:	f000 fb52 	bl	8014524 <prvAddCurrentTaskToDelayedList>
	}
 8013e80:	bf00      	nop
 8013e82:	3718      	adds	r7, #24
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}
 8013e88:	2000098c 	.word	0x2000098c

08013e8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b086      	sub	sp, #24
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	68db      	ldr	r3, [r3, #12]
 8013e98:	68db      	ldr	r3, [r3, #12]
 8013e9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013e9c:	693b      	ldr	r3, [r7, #16]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d10b      	bne.n	8013eba <xTaskRemoveFromEventList+0x2e>
 8013ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea6:	b672      	cpsid	i
 8013ea8:	f383 8811 	msr	BASEPRI, r3
 8013eac:	f3bf 8f6f 	isb	sy
 8013eb0:	f3bf 8f4f 	dsb	sy
 8013eb4:	b662      	cpsie	i
 8013eb6:	60fb      	str	r3, [r7, #12]
 8013eb8:	e7fe      	b.n	8013eb8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	3318      	adds	r3, #24
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7fe fb0c 	bl	80124dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ec4:	4b1d      	ldr	r3, [pc, #116]	; (8013f3c <xTaskRemoveFromEventList+0xb0>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d11d      	bne.n	8013f08 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	3304      	adds	r3, #4
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7fe fb03 	bl	80124dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eda:	4b19      	ldr	r3, [pc, #100]	; (8013f40 <xTaskRemoveFromEventList+0xb4>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d903      	bls.n	8013eea <xTaskRemoveFromEventList+0x5e>
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee6:	4a16      	ldr	r2, [pc, #88]	; (8013f40 <xTaskRemoveFromEventList+0xb4>)
 8013ee8:	6013      	str	r3, [r2, #0]
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eee:	4613      	mov	r3, r2
 8013ef0:	009b      	lsls	r3, r3, #2
 8013ef2:	4413      	add	r3, r2
 8013ef4:	009b      	lsls	r3, r3, #2
 8013ef6:	4a13      	ldr	r2, [pc, #76]	; (8013f44 <xTaskRemoveFromEventList+0xb8>)
 8013ef8:	441a      	add	r2, r3
 8013efa:	693b      	ldr	r3, [r7, #16]
 8013efc:	3304      	adds	r3, #4
 8013efe:	4619      	mov	r1, r3
 8013f00:	4610      	mov	r0, r2
 8013f02:	f7fe fa8e 	bl	8012422 <vListInsertEnd>
 8013f06:	e005      	b.n	8013f14 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	3318      	adds	r3, #24
 8013f0c:	4619      	mov	r1, r3
 8013f0e:	480e      	ldr	r0, [pc, #56]	; (8013f48 <xTaskRemoveFromEventList+0xbc>)
 8013f10:	f7fe fa87 	bl	8012422 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013f14:	693b      	ldr	r3, [r7, #16]
 8013f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f18:	4b0c      	ldr	r3, [pc, #48]	; (8013f4c <xTaskRemoveFromEventList+0xc0>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d905      	bls.n	8013f2e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013f22:	2301      	movs	r3, #1
 8013f24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013f26:	4b0a      	ldr	r3, [pc, #40]	; (8013f50 <xTaskRemoveFromEventList+0xc4>)
 8013f28:	2201      	movs	r2, #1
 8013f2a:	601a      	str	r2, [r3, #0]
 8013f2c:	e001      	b.n	8013f32 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8013f2e:	2300      	movs	r3, #0
 8013f30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013f32:	697b      	ldr	r3, [r7, #20]
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	3718      	adds	r7, #24
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}
 8013f3c:	20000e88 	.word	0x20000e88
 8013f40:	20000e68 	.word	0x20000e68
 8013f44:	20000990 	.word	0x20000990
 8013f48:	20000e20 	.word	0x20000e20
 8013f4c:	2000098c 	.word	0x2000098c
 8013f50:	20000e74 	.word	0x20000e74

08013f54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013f54:	b480      	push	{r7}
 8013f56:	b083      	sub	sp, #12
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013f5c:	4b06      	ldr	r3, [pc, #24]	; (8013f78 <vTaskInternalSetTimeOutState+0x24>)
 8013f5e:	681a      	ldr	r2, [r3, #0]
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013f64:	4b05      	ldr	r3, [pc, #20]	; (8013f7c <vTaskInternalSetTimeOutState+0x28>)
 8013f66:	681a      	ldr	r2, [r3, #0]
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	605a      	str	r2, [r3, #4]
}
 8013f6c:	bf00      	nop
 8013f6e:	370c      	adds	r7, #12
 8013f70:	46bd      	mov	sp, r7
 8013f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f76:	4770      	bx	lr
 8013f78:	20000e78 	.word	0x20000e78
 8013f7c:	20000e64 	.word	0x20000e64

08013f80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b088      	sub	sp, #32
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
 8013f88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d10b      	bne.n	8013fa8 <xTaskCheckForTimeOut+0x28>
 8013f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f94:	b672      	cpsid	i
 8013f96:	f383 8811 	msr	BASEPRI, r3
 8013f9a:	f3bf 8f6f 	isb	sy
 8013f9e:	f3bf 8f4f 	dsb	sy
 8013fa2:	b662      	cpsie	i
 8013fa4:	613b      	str	r3, [r7, #16]
 8013fa6:	e7fe      	b.n	8013fa6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d10b      	bne.n	8013fc6 <xTaskCheckForTimeOut+0x46>
 8013fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fb2:	b672      	cpsid	i
 8013fb4:	f383 8811 	msr	BASEPRI, r3
 8013fb8:	f3bf 8f6f 	isb	sy
 8013fbc:	f3bf 8f4f 	dsb	sy
 8013fc0:	b662      	cpsie	i
 8013fc2:	60fb      	str	r3, [r7, #12]
 8013fc4:	e7fe      	b.n	8013fc4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8013fc6:	f000 ff5f 	bl	8014e88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013fca:	4b1d      	ldr	r3, [pc, #116]	; (8014040 <xTaskCheckForTimeOut+0xc0>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	685b      	ldr	r3, [r3, #4]
 8013fd4:	69ba      	ldr	r2, [r7, #24]
 8013fd6:	1ad3      	subs	r3, r2, r3
 8013fd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fe2:	d102      	bne.n	8013fea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	61fb      	str	r3, [r7, #28]
 8013fe8:	e023      	b.n	8014032 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	4b15      	ldr	r3, [pc, #84]	; (8014044 <xTaskCheckForTimeOut+0xc4>)
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	429a      	cmp	r2, r3
 8013ff4:	d007      	beq.n	8014006 <xTaskCheckForTimeOut+0x86>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	685b      	ldr	r3, [r3, #4]
 8013ffa:	69ba      	ldr	r2, [r7, #24]
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d302      	bcc.n	8014006 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014000:	2301      	movs	r3, #1
 8014002:	61fb      	str	r3, [r7, #28]
 8014004:	e015      	b.n	8014032 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	697a      	ldr	r2, [r7, #20]
 801400c:	429a      	cmp	r2, r3
 801400e:	d20b      	bcs.n	8014028 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	681a      	ldr	r2, [r3, #0]
 8014014:	697b      	ldr	r3, [r7, #20]
 8014016:	1ad2      	subs	r2, r2, r3
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f7ff ff99 	bl	8013f54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014022:	2300      	movs	r3, #0
 8014024:	61fb      	str	r3, [r7, #28]
 8014026:	e004      	b.n	8014032 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	2200      	movs	r2, #0
 801402c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801402e:	2301      	movs	r3, #1
 8014030:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014032:	f000 ff5b 	bl	8014eec <vPortExitCritical>

	return xReturn;
 8014036:	69fb      	ldr	r3, [r7, #28]
}
 8014038:	4618      	mov	r0, r3
 801403a:	3720      	adds	r7, #32
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}
 8014040:	20000e64 	.word	0x20000e64
 8014044:	20000e78 	.word	0x20000e78

08014048 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014048:	b480      	push	{r7}
 801404a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801404c:	4b03      	ldr	r3, [pc, #12]	; (801405c <vTaskMissedYield+0x14>)
 801404e:	2201      	movs	r2, #1
 8014050:	601a      	str	r2, [r3, #0]
}
 8014052:	bf00      	nop
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr
 801405c:	20000e74 	.word	0x20000e74

08014060 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b082      	sub	sp, #8
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014068:	f000 f852 	bl	8014110 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801406c:	4b06      	ldr	r3, [pc, #24]	; (8014088 <prvIdleTask+0x28>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	2b01      	cmp	r3, #1
 8014072:	d9f9      	bls.n	8014068 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014074:	4b05      	ldr	r3, [pc, #20]	; (801408c <prvIdleTask+0x2c>)
 8014076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801407a:	601a      	str	r2, [r3, #0]
 801407c:	f3bf 8f4f 	dsb	sy
 8014080:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014084:	e7f0      	b.n	8014068 <prvIdleTask+0x8>
 8014086:	bf00      	nop
 8014088:	20000990 	.word	0x20000990
 801408c:	e000ed04 	.word	0xe000ed04

08014090 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b082      	sub	sp, #8
 8014094:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014096:	2300      	movs	r3, #0
 8014098:	607b      	str	r3, [r7, #4]
 801409a:	e00c      	b.n	80140b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801409c:	687a      	ldr	r2, [r7, #4]
 801409e:	4613      	mov	r3, r2
 80140a0:	009b      	lsls	r3, r3, #2
 80140a2:	4413      	add	r3, r2
 80140a4:	009b      	lsls	r3, r3, #2
 80140a6:	4a12      	ldr	r2, [pc, #72]	; (80140f0 <prvInitialiseTaskLists+0x60>)
 80140a8:	4413      	add	r3, r2
 80140aa:	4618      	mov	r0, r3
 80140ac:	f7fe f98c 	bl	80123c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	3301      	adds	r3, #1
 80140b4:	607b      	str	r3, [r7, #4]
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2b37      	cmp	r3, #55	; 0x37
 80140ba:	d9ef      	bls.n	801409c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80140bc:	480d      	ldr	r0, [pc, #52]	; (80140f4 <prvInitialiseTaskLists+0x64>)
 80140be:	f7fe f983 	bl	80123c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80140c2:	480d      	ldr	r0, [pc, #52]	; (80140f8 <prvInitialiseTaskLists+0x68>)
 80140c4:	f7fe f980 	bl	80123c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80140c8:	480c      	ldr	r0, [pc, #48]	; (80140fc <prvInitialiseTaskLists+0x6c>)
 80140ca:	f7fe f97d 	bl	80123c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80140ce:	480c      	ldr	r0, [pc, #48]	; (8014100 <prvInitialiseTaskLists+0x70>)
 80140d0:	f7fe f97a 	bl	80123c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80140d4:	480b      	ldr	r0, [pc, #44]	; (8014104 <prvInitialiseTaskLists+0x74>)
 80140d6:	f7fe f977 	bl	80123c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80140da:	4b0b      	ldr	r3, [pc, #44]	; (8014108 <prvInitialiseTaskLists+0x78>)
 80140dc:	4a05      	ldr	r2, [pc, #20]	; (80140f4 <prvInitialiseTaskLists+0x64>)
 80140de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80140e0:	4b0a      	ldr	r3, [pc, #40]	; (801410c <prvInitialiseTaskLists+0x7c>)
 80140e2:	4a05      	ldr	r2, [pc, #20]	; (80140f8 <prvInitialiseTaskLists+0x68>)
 80140e4:	601a      	str	r2, [r3, #0]
}
 80140e6:	bf00      	nop
 80140e8:	3708      	adds	r7, #8
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}
 80140ee:	bf00      	nop
 80140f0:	20000990 	.word	0x20000990
 80140f4:	20000df0 	.word	0x20000df0
 80140f8:	20000e04 	.word	0x20000e04
 80140fc:	20000e20 	.word	0x20000e20
 8014100:	20000e34 	.word	0x20000e34
 8014104:	20000e4c 	.word	0x20000e4c
 8014108:	20000e18 	.word	0x20000e18
 801410c:	20000e1c 	.word	0x20000e1c

08014110 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014116:	e019      	b.n	801414c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014118:	f000 feb6 	bl	8014e88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801411c:	4b0f      	ldr	r3, [pc, #60]	; (801415c <prvCheckTasksWaitingTermination+0x4c>)
 801411e:	68db      	ldr	r3, [r3, #12]
 8014120:	68db      	ldr	r3, [r3, #12]
 8014122:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	3304      	adds	r3, #4
 8014128:	4618      	mov	r0, r3
 801412a:	f7fe f9d7 	bl	80124dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801412e:	4b0c      	ldr	r3, [pc, #48]	; (8014160 <prvCheckTasksWaitingTermination+0x50>)
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	3b01      	subs	r3, #1
 8014134:	4a0a      	ldr	r2, [pc, #40]	; (8014160 <prvCheckTasksWaitingTermination+0x50>)
 8014136:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014138:	4b0a      	ldr	r3, [pc, #40]	; (8014164 <prvCheckTasksWaitingTermination+0x54>)
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	3b01      	subs	r3, #1
 801413e:	4a09      	ldr	r2, [pc, #36]	; (8014164 <prvCheckTasksWaitingTermination+0x54>)
 8014140:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014142:	f000 fed3 	bl	8014eec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014146:	6878      	ldr	r0, [r7, #4]
 8014148:	f000 f80e 	bl	8014168 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801414c:	4b05      	ldr	r3, [pc, #20]	; (8014164 <prvCheckTasksWaitingTermination+0x54>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d1e1      	bne.n	8014118 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014154:	bf00      	nop
 8014156:	3708      	adds	r7, #8
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}
 801415c:	20000e34 	.word	0x20000e34
 8014160:	20000e60 	.word	0x20000e60
 8014164:	20000e48 	.word	0x20000e48

08014168 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014168:	b580      	push	{r7, lr}
 801416a:	b084      	sub	sp, #16
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014176:	2b00      	cmp	r3, #0
 8014178:	d108      	bne.n	801418c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801417e:	4618      	mov	r0, r3
 8014180:	f001 f86c 	bl	801525c <vPortFree>
				vPortFree( pxTCB );
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f001 f869 	bl	801525c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801418a:	e019      	b.n	80141c0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014192:	2b01      	cmp	r3, #1
 8014194:	d103      	bne.n	801419e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f001 f860 	bl	801525c <vPortFree>
	}
 801419c:	e010      	b.n	80141c0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80141a4:	2b02      	cmp	r3, #2
 80141a6:	d00b      	beq.n	80141c0 <prvDeleteTCB+0x58>
 80141a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ac:	b672      	cpsid	i
 80141ae:	f383 8811 	msr	BASEPRI, r3
 80141b2:	f3bf 8f6f 	isb	sy
 80141b6:	f3bf 8f4f 	dsb	sy
 80141ba:	b662      	cpsie	i
 80141bc:	60fb      	str	r3, [r7, #12]
 80141be:	e7fe      	b.n	80141be <prvDeleteTCB+0x56>
	}
 80141c0:	bf00      	nop
 80141c2:	3710      	adds	r7, #16
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80141c8:	b480      	push	{r7}
 80141ca:	b083      	sub	sp, #12
 80141cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80141ce:	4b0c      	ldr	r3, [pc, #48]	; (8014200 <prvResetNextTaskUnblockTime+0x38>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d104      	bne.n	80141e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80141d8:	4b0a      	ldr	r3, [pc, #40]	; (8014204 <prvResetNextTaskUnblockTime+0x3c>)
 80141da:	f04f 32ff 	mov.w	r2, #4294967295
 80141de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80141e0:	e008      	b.n	80141f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141e2:	4b07      	ldr	r3, [pc, #28]	; (8014200 <prvResetNextTaskUnblockTime+0x38>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	68db      	ldr	r3, [r3, #12]
 80141ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	685b      	ldr	r3, [r3, #4]
 80141f0:	4a04      	ldr	r2, [pc, #16]	; (8014204 <prvResetNextTaskUnblockTime+0x3c>)
 80141f2:	6013      	str	r3, [r2, #0]
}
 80141f4:	bf00      	nop
 80141f6:	370c      	adds	r7, #12
 80141f8:	46bd      	mov	sp, r7
 80141fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fe:	4770      	bx	lr
 8014200:	20000e18 	.word	0x20000e18
 8014204:	20000e80 	.word	0x20000e80

08014208 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014208:	b480      	push	{r7}
 801420a:	b083      	sub	sp, #12
 801420c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801420e:	4b0b      	ldr	r3, [pc, #44]	; (801423c <xTaskGetSchedulerState+0x34>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d102      	bne.n	801421c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014216:	2301      	movs	r3, #1
 8014218:	607b      	str	r3, [r7, #4]
 801421a:	e008      	b.n	801422e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801421c:	4b08      	ldr	r3, [pc, #32]	; (8014240 <xTaskGetSchedulerState+0x38>)
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d102      	bne.n	801422a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014224:	2302      	movs	r3, #2
 8014226:	607b      	str	r3, [r7, #4]
 8014228:	e001      	b.n	801422e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801422a:	2300      	movs	r3, #0
 801422c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801422e:	687b      	ldr	r3, [r7, #4]
	}
 8014230:	4618      	mov	r0, r3
 8014232:	370c      	adds	r7, #12
 8014234:	46bd      	mov	sp, r7
 8014236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423a:	4770      	bx	lr
 801423c:	20000e6c 	.word	0x20000e6c
 8014240:	20000e88 	.word	0x20000e88

08014244 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014244:	b580      	push	{r7, lr}
 8014246:	b084      	sub	sp, #16
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014250:	2300      	movs	r3, #0
 8014252:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d051      	beq.n	80142fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801425e:	4b2a      	ldr	r3, [pc, #168]	; (8014308 <xTaskPriorityInherit+0xc4>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014264:	429a      	cmp	r2, r3
 8014266:	d241      	bcs.n	80142ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	699b      	ldr	r3, [r3, #24]
 801426c:	2b00      	cmp	r3, #0
 801426e:	db06      	blt.n	801427e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014270:	4b25      	ldr	r3, [pc, #148]	; (8014308 <xTaskPriorityInherit+0xc4>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014276:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	6959      	ldr	r1, [r3, #20]
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014286:	4613      	mov	r3, r2
 8014288:	009b      	lsls	r3, r3, #2
 801428a:	4413      	add	r3, r2
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	4a1f      	ldr	r2, [pc, #124]	; (801430c <xTaskPriorityInherit+0xc8>)
 8014290:	4413      	add	r3, r2
 8014292:	4299      	cmp	r1, r3
 8014294:	d122      	bne.n	80142dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	3304      	adds	r3, #4
 801429a:	4618      	mov	r0, r3
 801429c:	f7fe f91e 	bl	80124dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80142a0:	4b19      	ldr	r3, [pc, #100]	; (8014308 <xTaskPriorityInherit+0xc4>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142a6:	68bb      	ldr	r3, [r7, #8]
 80142a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142ae:	4b18      	ldr	r3, [pc, #96]	; (8014310 <xTaskPriorityInherit+0xcc>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	429a      	cmp	r2, r3
 80142b4:	d903      	bls.n	80142be <xTaskPriorityInherit+0x7a>
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142ba:	4a15      	ldr	r2, [pc, #84]	; (8014310 <xTaskPriorityInherit+0xcc>)
 80142bc:	6013      	str	r3, [r2, #0]
 80142be:	68bb      	ldr	r3, [r7, #8]
 80142c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142c2:	4613      	mov	r3, r2
 80142c4:	009b      	lsls	r3, r3, #2
 80142c6:	4413      	add	r3, r2
 80142c8:	009b      	lsls	r3, r3, #2
 80142ca:	4a10      	ldr	r2, [pc, #64]	; (801430c <xTaskPriorityInherit+0xc8>)
 80142cc:	441a      	add	r2, r3
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	3304      	adds	r3, #4
 80142d2:	4619      	mov	r1, r3
 80142d4:	4610      	mov	r0, r2
 80142d6:	f7fe f8a4 	bl	8012422 <vListInsertEnd>
 80142da:	e004      	b.n	80142e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80142dc:	4b0a      	ldr	r3, [pc, #40]	; (8014308 <xTaskPriorityInherit+0xc4>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80142e6:	2301      	movs	r3, #1
 80142e8:	60fb      	str	r3, [r7, #12]
 80142ea:	e008      	b.n	80142fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80142ec:	68bb      	ldr	r3, [r7, #8]
 80142ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80142f0:	4b05      	ldr	r3, [pc, #20]	; (8014308 <xTaskPriorityInherit+0xc4>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142f6:	429a      	cmp	r2, r3
 80142f8:	d201      	bcs.n	80142fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80142fa:	2301      	movs	r3, #1
 80142fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80142fe:	68fb      	ldr	r3, [r7, #12]
	}
 8014300:	4618      	mov	r0, r3
 8014302:	3710      	adds	r7, #16
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}
 8014308:	2000098c 	.word	0x2000098c
 801430c:	20000990 	.word	0x20000990
 8014310:	20000e68 	.word	0x20000e68

08014314 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014314:	b580      	push	{r7, lr}
 8014316:	b086      	sub	sp, #24
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014320:	2300      	movs	r3, #0
 8014322:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d058      	beq.n	80143dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801432a:	4b2f      	ldr	r3, [pc, #188]	; (80143e8 <xTaskPriorityDisinherit+0xd4>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	693a      	ldr	r2, [r7, #16]
 8014330:	429a      	cmp	r2, r3
 8014332:	d00b      	beq.n	801434c <xTaskPriorityDisinherit+0x38>
 8014334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014338:	b672      	cpsid	i
 801433a:	f383 8811 	msr	BASEPRI, r3
 801433e:	f3bf 8f6f 	isb	sy
 8014342:	f3bf 8f4f 	dsb	sy
 8014346:	b662      	cpsie	i
 8014348:	60fb      	str	r3, [r7, #12]
 801434a:	e7fe      	b.n	801434a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 801434c:	693b      	ldr	r3, [r7, #16]
 801434e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014350:	2b00      	cmp	r3, #0
 8014352:	d10b      	bne.n	801436c <xTaskPriorityDisinherit+0x58>
 8014354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014358:	b672      	cpsid	i
 801435a:	f383 8811 	msr	BASEPRI, r3
 801435e:	f3bf 8f6f 	isb	sy
 8014362:	f3bf 8f4f 	dsb	sy
 8014366:	b662      	cpsie	i
 8014368:	60bb      	str	r3, [r7, #8]
 801436a:	e7fe      	b.n	801436a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 801436c:	693b      	ldr	r3, [r7, #16]
 801436e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014370:	1e5a      	subs	r2, r3, #1
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014376:	693b      	ldr	r3, [r7, #16]
 8014378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801437e:	429a      	cmp	r2, r3
 8014380:	d02c      	beq.n	80143dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014382:	693b      	ldr	r3, [r7, #16]
 8014384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014386:	2b00      	cmp	r3, #0
 8014388:	d128      	bne.n	80143dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801438a:	693b      	ldr	r3, [r7, #16]
 801438c:	3304      	adds	r3, #4
 801438e:	4618      	mov	r0, r3
 8014390:	f7fe f8a4 	bl	80124dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014394:	693b      	ldr	r3, [r7, #16]
 8014396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801439c:	693b      	ldr	r3, [r7, #16]
 801439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80143a4:	693b      	ldr	r3, [r7, #16]
 80143a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80143a8:	693b      	ldr	r3, [r7, #16]
 80143aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143ac:	4b0f      	ldr	r3, [pc, #60]	; (80143ec <xTaskPriorityDisinherit+0xd8>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d903      	bls.n	80143bc <xTaskPriorityDisinherit+0xa8>
 80143b4:	693b      	ldr	r3, [r7, #16]
 80143b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143b8:	4a0c      	ldr	r2, [pc, #48]	; (80143ec <xTaskPriorityDisinherit+0xd8>)
 80143ba:	6013      	str	r3, [r2, #0]
 80143bc:	693b      	ldr	r3, [r7, #16]
 80143be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143c0:	4613      	mov	r3, r2
 80143c2:	009b      	lsls	r3, r3, #2
 80143c4:	4413      	add	r3, r2
 80143c6:	009b      	lsls	r3, r3, #2
 80143c8:	4a09      	ldr	r2, [pc, #36]	; (80143f0 <xTaskPriorityDisinherit+0xdc>)
 80143ca:	441a      	add	r2, r3
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	3304      	adds	r3, #4
 80143d0:	4619      	mov	r1, r3
 80143d2:	4610      	mov	r0, r2
 80143d4:	f7fe f825 	bl	8012422 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80143d8:	2301      	movs	r3, #1
 80143da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80143dc:	697b      	ldr	r3, [r7, #20]
	}
 80143de:	4618      	mov	r0, r3
 80143e0:	3718      	adds	r7, #24
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd80      	pop	{r7, pc}
 80143e6:	bf00      	nop
 80143e8:	2000098c 	.word	0x2000098c
 80143ec:	20000e68 	.word	0x20000e68
 80143f0:	20000990 	.word	0x20000990

080143f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b088      	sub	sp, #32
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
 80143fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014402:	2301      	movs	r3, #1
 8014404:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d06c      	beq.n	80144e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801440c:	69bb      	ldr	r3, [r7, #24]
 801440e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014410:	2b00      	cmp	r3, #0
 8014412:	d10b      	bne.n	801442c <vTaskPriorityDisinheritAfterTimeout+0x38>
 8014414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014418:	b672      	cpsid	i
 801441a:	f383 8811 	msr	BASEPRI, r3
 801441e:	f3bf 8f6f 	isb	sy
 8014422:	f3bf 8f4f 	dsb	sy
 8014426:	b662      	cpsie	i
 8014428:	60fb      	str	r3, [r7, #12]
 801442a:	e7fe      	b.n	801442a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801442c:	69bb      	ldr	r3, [r7, #24]
 801442e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014430:	683a      	ldr	r2, [r7, #0]
 8014432:	429a      	cmp	r2, r3
 8014434:	d902      	bls.n	801443c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	61fb      	str	r3, [r7, #28]
 801443a:	e002      	b.n	8014442 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801443c:	69bb      	ldr	r3, [r7, #24]
 801443e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014440:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014442:	69bb      	ldr	r3, [r7, #24]
 8014444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014446:	69fa      	ldr	r2, [r7, #28]
 8014448:	429a      	cmp	r2, r3
 801444a:	d04c      	beq.n	80144e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801444c:	69bb      	ldr	r3, [r7, #24]
 801444e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014450:	697a      	ldr	r2, [r7, #20]
 8014452:	429a      	cmp	r2, r3
 8014454:	d147      	bne.n	80144e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014456:	4b26      	ldr	r3, [pc, #152]	; (80144f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	69ba      	ldr	r2, [r7, #24]
 801445c:	429a      	cmp	r2, r3
 801445e:	d10b      	bne.n	8014478 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8014460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014464:	b672      	cpsid	i
 8014466:	f383 8811 	msr	BASEPRI, r3
 801446a:	f3bf 8f6f 	isb	sy
 801446e:	f3bf 8f4f 	dsb	sy
 8014472:	b662      	cpsie	i
 8014474:	60bb      	str	r3, [r7, #8]
 8014476:	e7fe      	b.n	8014476 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014478:	69bb      	ldr	r3, [r7, #24]
 801447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801447c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801447e:	69bb      	ldr	r3, [r7, #24]
 8014480:	69fa      	ldr	r2, [r7, #28]
 8014482:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014484:	69bb      	ldr	r3, [r7, #24]
 8014486:	699b      	ldr	r3, [r3, #24]
 8014488:	2b00      	cmp	r3, #0
 801448a:	db04      	blt.n	8014496 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801448c:	69fb      	ldr	r3, [r7, #28]
 801448e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014492:	69bb      	ldr	r3, [r7, #24]
 8014494:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014496:	69bb      	ldr	r3, [r7, #24]
 8014498:	6959      	ldr	r1, [r3, #20]
 801449a:	693a      	ldr	r2, [r7, #16]
 801449c:	4613      	mov	r3, r2
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	4413      	add	r3, r2
 80144a2:	009b      	lsls	r3, r3, #2
 80144a4:	4a13      	ldr	r2, [pc, #76]	; (80144f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80144a6:	4413      	add	r3, r2
 80144a8:	4299      	cmp	r1, r3
 80144aa:	d11c      	bne.n	80144e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144ac:	69bb      	ldr	r3, [r7, #24]
 80144ae:	3304      	adds	r3, #4
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7fe f813 	bl	80124dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80144b6:	69bb      	ldr	r3, [r7, #24]
 80144b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144ba:	4b0f      	ldr	r3, [pc, #60]	; (80144f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	429a      	cmp	r2, r3
 80144c0:	d903      	bls.n	80144ca <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80144c2:	69bb      	ldr	r3, [r7, #24]
 80144c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144c6:	4a0c      	ldr	r2, [pc, #48]	; (80144f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80144c8:	6013      	str	r3, [r2, #0]
 80144ca:	69bb      	ldr	r3, [r7, #24]
 80144cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144ce:	4613      	mov	r3, r2
 80144d0:	009b      	lsls	r3, r3, #2
 80144d2:	4413      	add	r3, r2
 80144d4:	009b      	lsls	r3, r3, #2
 80144d6:	4a07      	ldr	r2, [pc, #28]	; (80144f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80144d8:	441a      	add	r2, r3
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	3304      	adds	r3, #4
 80144de:	4619      	mov	r1, r3
 80144e0:	4610      	mov	r0, r2
 80144e2:	f7fd ff9e 	bl	8012422 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80144e6:	bf00      	nop
 80144e8:	3720      	adds	r7, #32
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}
 80144ee:	bf00      	nop
 80144f0:	2000098c 	.word	0x2000098c
 80144f4:	20000990 	.word	0x20000990
 80144f8:	20000e68 	.word	0x20000e68

080144fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80144fc:	b480      	push	{r7}
 80144fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014500:	4b07      	ldr	r3, [pc, #28]	; (8014520 <pvTaskIncrementMutexHeldCount+0x24>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d004      	beq.n	8014512 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014508:	4b05      	ldr	r3, [pc, #20]	; (8014520 <pvTaskIncrementMutexHeldCount+0x24>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801450e:	3201      	adds	r2, #1
 8014510:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8014512:	4b03      	ldr	r3, [pc, #12]	; (8014520 <pvTaskIncrementMutexHeldCount+0x24>)
 8014514:	681b      	ldr	r3, [r3, #0]
	}
 8014516:	4618      	mov	r0, r3
 8014518:	46bd      	mov	sp, r7
 801451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451e:	4770      	bx	lr
 8014520:	2000098c 	.word	0x2000098c

08014524 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b084      	sub	sp, #16
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801452e:	4b21      	ldr	r3, [pc, #132]	; (80145b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014534:	4b20      	ldr	r3, [pc, #128]	; (80145b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	3304      	adds	r3, #4
 801453a:	4618      	mov	r0, r3
 801453c:	f7fd ffce 	bl	80124dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014546:	d10a      	bne.n	801455e <prvAddCurrentTaskToDelayedList+0x3a>
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d007      	beq.n	801455e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801454e:	4b1a      	ldr	r3, [pc, #104]	; (80145b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	3304      	adds	r3, #4
 8014554:	4619      	mov	r1, r3
 8014556:	4819      	ldr	r0, [pc, #100]	; (80145bc <prvAddCurrentTaskToDelayedList+0x98>)
 8014558:	f7fd ff63 	bl	8012422 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801455c:	e026      	b.n	80145ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801455e:	68fa      	ldr	r2, [r7, #12]
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	4413      	add	r3, r2
 8014564:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014566:	4b14      	ldr	r3, [pc, #80]	; (80145b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	68ba      	ldr	r2, [r7, #8]
 801456c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801456e:	68ba      	ldr	r2, [r7, #8]
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	429a      	cmp	r2, r3
 8014574:	d209      	bcs.n	801458a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014576:	4b12      	ldr	r3, [pc, #72]	; (80145c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014578:	681a      	ldr	r2, [r3, #0]
 801457a:	4b0f      	ldr	r3, [pc, #60]	; (80145b8 <prvAddCurrentTaskToDelayedList+0x94>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	3304      	adds	r3, #4
 8014580:	4619      	mov	r1, r3
 8014582:	4610      	mov	r0, r2
 8014584:	f7fd ff71 	bl	801246a <vListInsert>
}
 8014588:	e010      	b.n	80145ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801458a:	4b0e      	ldr	r3, [pc, #56]	; (80145c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801458c:	681a      	ldr	r2, [r3, #0]
 801458e:	4b0a      	ldr	r3, [pc, #40]	; (80145b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	3304      	adds	r3, #4
 8014594:	4619      	mov	r1, r3
 8014596:	4610      	mov	r0, r2
 8014598:	f7fd ff67 	bl	801246a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801459c:	4b0a      	ldr	r3, [pc, #40]	; (80145c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	68ba      	ldr	r2, [r7, #8]
 80145a2:	429a      	cmp	r2, r3
 80145a4:	d202      	bcs.n	80145ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80145a6:	4a08      	ldr	r2, [pc, #32]	; (80145c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80145a8:	68bb      	ldr	r3, [r7, #8]
 80145aa:	6013      	str	r3, [r2, #0]
}
 80145ac:	bf00      	nop
 80145ae:	3710      	adds	r7, #16
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}
 80145b4:	20000e64 	.word	0x20000e64
 80145b8:	2000098c 	.word	0x2000098c
 80145bc:	20000e4c 	.word	0x20000e4c
 80145c0:	20000e1c 	.word	0x20000e1c
 80145c4:	20000e18 	.word	0x20000e18
 80145c8:	20000e80 	.word	0x20000e80

080145cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b08a      	sub	sp, #40	; 0x28
 80145d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80145d2:	2300      	movs	r3, #0
 80145d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80145d6:	f000 fb0d 	bl	8014bf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80145da:	4b1d      	ldr	r3, [pc, #116]	; (8014650 <xTimerCreateTimerTask+0x84>)
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d021      	beq.n	8014626 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80145e2:	2300      	movs	r3, #0
 80145e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80145e6:	2300      	movs	r3, #0
 80145e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80145ea:	1d3a      	adds	r2, r7, #4
 80145ec:	f107 0108 	add.w	r1, r7, #8
 80145f0:	f107 030c 	add.w	r3, r7, #12
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7fd fecd 	bl	8012394 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80145fa:	6879      	ldr	r1, [r7, #4]
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	68fa      	ldr	r2, [r7, #12]
 8014600:	9202      	str	r2, [sp, #8]
 8014602:	9301      	str	r3, [sp, #4]
 8014604:	2302      	movs	r3, #2
 8014606:	9300      	str	r3, [sp, #0]
 8014608:	2300      	movs	r3, #0
 801460a:	460a      	mov	r2, r1
 801460c:	4911      	ldr	r1, [pc, #68]	; (8014654 <xTimerCreateTimerTask+0x88>)
 801460e:	4812      	ldr	r0, [pc, #72]	; (8014658 <xTimerCreateTimerTask+0x8c>)
 8014610:	f7fe ffc0 	bl	8013594 <xTaskCreateStatic>
 8014614:	4602      	mov	r2, r0
 8014616:	4b11      	ldr	r3, [pc, #68]	; (801465c <xTimerCreateTimerTask+0x90>)
 8014618:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801461a:	4b10      	ldr	r3, [pc, #64]	; (801465c <xTimerCreateTimerTask+0x90>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d001      	beq.n	8014626 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014622:	2301      	movs	r3, #1
 8014624:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014626:	697b      	ldr	r3, [r7, #20]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d10b      	bne.n	8014644 <xTimerCreateTimerTask+0x78>
 801462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014630:	b672      	cpsid	i
 8014632:	f383 8811 	msr	BASEPRI, r3
 8014636:	f3bf 8f6f 	isb	sy
 801463a:	f3bf 8f4f 	dsb	sy
 801463e:	b662      	cpsie	i
 8014640:	613b      	str	r3, [r7, #16]
 8014642:	e7fe      	b.n	8014642 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8014644:	697b      	ldr	r3, [r7, #20]
}
 8014646:	4618      	mov	r0, r3
 8014648:	3718      	adds	r7, #24
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
 801464e:	bf00      	nop
 8014650:	20000ebc 	.word	0x20000ebc
 8014654:	080161b4 	.word	0x080161b4
 8014658:	08014799 	.word	0x08014799
 801465c:	20000ec0 	.word	0x20000ec0

08014660 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b08a      	sub	sp, #40	; 0x28
 8014664:	af00      	add	r7, sp, #0
 8014666:	60f8      	str	r0, [r7, #12]
 8014668:	60b9      	str	r1, [r7, #8]
 801466a:	607a      	str	r2, [r7, #4]
 801466c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801466e:	2300      	movs	r3, #0
 8014670:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d10b      	bne.n	8014690 <xTimerGenericCommand+0x30>
 8014678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801467c:	b672      	cpsid	i
 801467e:	f383 8811 	msr	BASEPRI, r3
 8014682:	f3bf 8f6f 	isb	sy
 8014686:	f3bf 8f4f 	dsb	sy
 801468a:	b662      	cpsie	i
 801468c:	623b      	str	r3, [r7, #32]
 801468e:	e7fe      	b.n	801468e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014690:	4b19      	ldr	r3, [pc, #100]	; (80146f8 <xTimerGenericCommand+0x98>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d02a      	beq.n	80146ee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80146a4:	68bb      	ldr	r3, [r7, #8]
 80146a6:	2b05      	cmp	r3, #5
 80146a8:	dc18      	bgt.n	80146dc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80146aa:	f7ff fdad 	bl	8014208 <xTaskGetSchedulerState>
 80146ae:	4603      	mov	r3, r0
 80146b0:	2b02      	cmp	r3, #2
 80146b2:	d109      	bne.n	80146c8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80146b4:	4b10      	ldr	r3, [pc, #64]	; (80146f8 <xTimerGenericCommand+0x98>)
 80146b6:	6818      	ldr	r0, [r3, #0]
 80146b8:	f107 0110 	add.w	r1, r7, #16
 80146bc:	2300      	movs	r3, #0
 80146be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146c0:	f7fe f8f0 	bl	80128a4 <xQueueGenericSend>
 80146c4:	6278      	str	r0, [r7, #36]	; 0x24
 80146c6:	e012      	b.n	80146ee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80146c8:	4b0b      	ldr	r3, [pc, #44]	; (80146f8 <xTimerGenericCommand+0x98>)
 80146ca:	6818      	ldr	r0, [r3, #0]
 80146cc:	f107 0110 	add.w	r1, r7, #16
 80146d0:	2300      	movs	r3, #0
 80146d2:	2200      	movs	r2, #0
 80146d4:	f7fe f8e6 	bl	80128a4 <xQueueGenericSend>
 80146d8:	6278      	str	r0, [r7, #36]	; 0x24
 80146da:	e008      	b.n	80146ee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80146dc:	4b06      	ldr	r3, [pc, #24]	; (80146f8 <xTimerGenericCommand+0x98>)
 80146de:	6818      	ldr	r0, [r3, #0]
 80146e0:	f107 0110 	add.w	r1, r7, #16
 80146e4:	2300      	movs	r3, #0
 80146e6:	683a      	ldr	r2, [r7, #0]
 80146e8:	f7fe f9de 	bl	8012aa8 <xQueueGenericSendFromISR>
 80146ec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80146ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	3728      	adds	r7, #40	; 0x28
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}
 80146f8:	20000ebc 	.word	0x20000ebc

080146fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b088      	sub	sp, #32
 8014700:	af02      	add	r7, sp, #8
 8014702:	6078      	str	r0, [r7, #4]
 8014704:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014706:	4b23      	ldr	r3, [pc, #140]	; (8014794 <prvProcessExpiredTimer+0x98>)
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	68db      	ldr	r3, [r3, #12]
 801470c:	68db      	ldr	r3, [r3, #12]
 801470e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014710:	697b      	ldr	r3, [r7, #20]
 8014712:	3304      	adds	r3, #4
 8014714:	4618      	mov	r0, r3
 8014716:	f7fd fee1 	bl	80124dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801471a:	697b      	ldr	r3, [r7, #20]
 801471c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014720:	f003 0304 	and.w	r3, r3, #4
 8014724:	2b00      	cmp	r3, #0
 8014726:	d023      	beq.n	8014770 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014728:	697b      	ldr	r3, [r7, #20]
 801472a:	699a      	ldr	r2, [r3, #24]
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	18d1      	adds	r1, r2, r3
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	683a      	ldr	r2, [r7, #0]
 8014734:	6978      	ldr	r0, [r7, #20]
 8014736:	f000 f8d3 	bl	80148e0 <prvInsertTimerInActiveList>
 801473a:	4603      	mov	r3, r0
 801473c:	2b00      	cmp	r3, #0
 801473e:	d020      	beq.n	8014782 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014740:	2300      	movs	r3, #0
 8014742:	9300      	str	r3, [sp, #0]
 8014744:	2300      	movs	r3, #0
 8014746:	687a      	ldr	r2, [r7, #4]
 8014748:	2100      	movs	r1, #0
 801474a:	6978      	ldr	r0, [r7, #20]
 801474c:	f7ff ff88 	bl	8014660 <xTimerGenericCommand>
 8014750:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014752:	693b      	ldr	r3, [r7, #16]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d114      	bne.n	8014782 <prvProcessExpiredTimer+0x86>
 8014758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801475c:	b672      	cpsid	i
 801475e:	f383 8811 	msr	BASEPRI, r3
 8014762:	f3bf 8f6f 	isb	sy
 8014766:	f3bf 8f4f 	dsb	sy
 801476a:	b662      	cpsie	i
 801476c:	60fb      	str	r3, [r7, #12]
 801476e:	e7fe      	b.n	801476e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014776:	f023 0301 	bic.w	r3, r3, #1
 801477a:	b2da      	uxtb	r2, r3
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	6a1b      	ldr	r3, [r3, #32]
 8014786:	6978      	ldr	r0, [r7, #20]
 8014788:	4798      	blx	r3
}
 801478a:	bf00      	nop
 801478c:	3718      	adds	r7, #24
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}
 8014792:	bf00      	nop
 8014794:	20000eb4 	.word	0x20000eb4

08014798 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b084      	sub	sp, #16
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80147a0:	f107 0308 	add.w	r3, r7, #8
 80147a4:	4618      	mov	r0, r3
 80147a6:	f000 f857 	bl	8014858 <prvGetNextExpireTime>
 80147aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80147ac:	68bb      	ldr	r3, [r7, #8]
 80147ae:	4619      	mov	r1, r3
 80147b0:	68f8      	ldr	r0, [r7, #12]
 80147b2:	f000 f803 	bl	80147bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80147b6:	f000 f8d5 	bl	8014964 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80147ba:	e7f1      	b.n	80147a0 <prvTimerTask+0x8>

080147bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b084      	sub	sp, #16
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80147c6:	f7ff f929 	bl	8013a1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80147ca:	f107 0308 	add.w	r3, r7, #8
 80147ce:	4618      	mov	r0, r3
 80147d0:	f000 f866 	bl	80148a0 <prvSampleTimeNow>
 80147d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d130      	bne.n	801483e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d10a      	bne.n	80147f8 <prvProcessTimerOrBlockTask+0x3c>
 80147e2:	687a      	ldr	r2, [r7, #4]
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	429a      	cmp	r2, r3
 80147e8:	d806      	bhi.n	80147f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80147ea:	f7ff f925 	bl	8013a38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80147ee:	68f9      	ldr	r1, [r7, #12]
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f7ff ff83 	bl	80146fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80147f6:	e024      	b.n	8014842 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d008      	beq.n	8014810 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80147fe:	4b13      	ldr	r3, [pc, #76]	; (801484c <prvProcessTimerOrBlockTask+0x90>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d101      	bne.n	801480c <prvProcessTimerOrBlockTask+0x50>
 8014808:	2301      	movs	r3, #1
 801480a:	e000      	b.n	801480e <prvProcessTimerOrBlockTask+0x52>
 801480c:	2300      	movs	r3, #0
 801480e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014810:	4b0f      	ldr	r3, [pc, #60]	; (8014850 <prvProcessTimerOrBlockTask+0x94>)
 8014812:	6818      	ldr	r0, [r3, #0]
 8014814:	687a      	ldr	r2, [r7, #4]
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	1ad3      	subs	r3, r2, r3
 801481a:	683a      	ldr	r2, [r7, #0]
 801481c:	4619      	mov	r1, r3
 801481e:	f7fe fe85 	bl	801352c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014822:	f7ff f909 	bl	8013a38 <xTaskResumeAll>
 8014826:	4603      	mov	r3, r0
 8014828:	2b00      	cmp	r3, #0
 801482a:	d10a      	bne.n	8014842 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801482c:	4b09      	ldr	r3, [pc, #36]	; (8014854 <prvProcessTimerOrBlockTask+0x98>)
 801482e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014832:	601a      	str	r2, [r3, #0]
 8014834:	f3bf 8f4f 	dsb	sy
 8014838:	f3bf 8f6f 	isb	sy
}
 801483c:	e001      	b.n	8014842 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801483e:	f7ff f8fb 	bl	8013a38 <xTaskResumeAll>
}
 8014842:	bf00      	nop
 8014844:	3710      	adds	r7, #16
 8014846:	46bd      	mov	sp, r7
 8014848:	bd80      	pop	{r7, pc}
 801484a:	bf00      	nop
 801484c:	20000eb8 	.word	0x20000eb8
 8014850:	20000ebc 	.word	0x20000ebc
 8014854:	e000ed04 	.word	0xe000ed04

08014858 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014858:	b480      	push	{r7}
 801485a:	b085      	sub	sp, #20
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014860:	4b0e      	ldr	r3, [pc, #56]	; (801489c <prvGetNextExpireTime+0x44>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d101      	bne.n	801486e <prvGetNextExpireTime+0x16>
 801486a:	2201      	movs	r2, #1
 801486c:	e000      	b.n	8014870 <prvGetNextExpireTime+0x18>
 801486e:	2200      	movs	r2, #0
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d105      	bne.n	8014888 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801487c:	4b07      	ldr	r3, [pc, #28]	; (801489c <prvGetNextExpireTime+0x44>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	68db      	ldr	r3, [r3, #12]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	60fb      	str	r3, [r7, #12]
 8014886:	e001      	b.n	801488c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014888:	2300      	movs	r3, #0
 801488a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801488c:	68fb      	ldr	r3, [r7, #12]
}
 801488e:	4618      	mov	r0, r3
 8014890:	3714      	adds	r7, #20
 8014892:	46bd      	mov	sp, r7
 8014894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014898:	4770      	bx	lr
 801489a:	bf00      	nop
 801489c:	20000eb4 	.word	0x20000eb4

080148a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b084      	sub	sp, #16
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80148a8:	f7ff f964 	bl	8013b74 <xTaskGetTickCount>
 80148ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80148ae:	4b0b      	ldr	r3, [pc, #44]	; (80148dc <prvSampleTimeNow+0x3c>)
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	68fa      	ldr	r2, [r7, #12]
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d205      	bcs.n	80148c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80148b8:	f000 f936 	bl	8014b28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2201      	movs	r2, #1
 80148c0:	601a      	str	r2, [r3, #0]
 80148c2:	e002      	b.n	80148ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2200      	movs	r2, #0
 80148c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80148ca:	4a04      	ldr	r2, [pc, #16]	; (80148dc <prvSampleTimeNow+0x3c>)
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80148d0:	68fb      	ldr	r3, [r7, #12]
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3710      	adds	r7, #16
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	20000ec4 	.word	0x20000ec4

080148e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b086      	sub	sp, #24
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	60f8      	str	r0, [r7, #12]
 80148e8:	60b9      	str	r1, [r7, #8]
 80148ea:	607a      	str	r2, [r7, #4]
 80148ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80148ee:	2300      	movs	r3, #0
 80148f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	68ba      	ldr	r2, [r7, #8]
 80148f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	68fa      	ldr	r2, [r7, #12]
 80148fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80148fe:	68ba      	ldr	r2, [r7, #8]
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	429a      	cmp	r2, r3
 8014904:	d812      	bhi.n	801492c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014906:	687a      	ldr	r2, [r7, #4]
 8014908:	683b      	ldr	r3, [r7, #0]
 801490a:	1ad2      	subs	r2, r2, r3
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	699b      	ldr	r3, [r3, #24]
 8014910:	429a      	cmp	r2, r3
 8014912:	d302      	bcc.n	801491a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014914:	2301      	movs	r3, #1
 8014916:	617b      	str	r3, [r7, #20]
 8014918:	e01b      	b.n	8014952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801491a:	4b10      	ldr	r3, [pc, #64]	; (801495c <prvInsertTimerInActiveList+0x7c>)
 801491c:	681a      	ldr	r2, [r3, #0]
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	3304      	adds	r3, #4
 8014922:	4619      	mov	r1, r3
 8014924:	4610      	mov	r0, r2
 8014926:	f7fd fda0 	bl	801246a <vListInsert>
 801492a:	e012      	b.n	8014952 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801492c:	687a      	ldr	r2, [r7, #4]
 801492e:	683b      	ldr	r3, [r7, #0]
 8014930:	429a      	cmp	r2, r3
 8014932:	d206      	bcs.n	8014942 <prvInsertTimerInActiveList+0x62>
 8014934:	68ba      	ldr	r2, [r7, #8]
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	429a      	cmp	r2, r3
 801493a:	d302      	bcc.n	8014942 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801493c:	2301      	movs	r3, #1
 801493e:	617b      	str	r3, [r7, #20]
 8014940:	e007      	b.n	8014952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014942:	4b07      	ldr	r3, [pc, #28]	; (8014960 <prvInsertTimerInActiveList+0x80>)
 8014944:	681a      	ldr	r2, [r3, #0]
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	3304      	adds	r3, #4
 801494a:	4619      	mov	r1, r3
 801494c:	4610      	mov	r0, r2
 801494e:	f7fd fd8c 	bl	801246a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014952:	697b      	ldr	r3, [r7, #20]
}
 8014954:	4618      	mov	r0, r3
 8014956:	3718      	adds	r7, #24
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}
 801495c:	20000eb8 	.word	0x20000eb8
 8014960:	20000eb4 	.word	0x20000eb4

08014964 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b08e      	sub	sp, #56	; 0x38
 8014968:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801496a:	e0cc      	b.n	8014b06 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2b00      	cmp	r3, #0
 8014970:	da19      	bge.n	80149a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014972:	1d3b      	adds	r3, r7, #4
 8014974:	3304      	adds	r3, #4
 8014976:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801497a:	2b00      	cmp	r3, #0
 801497c:	d10b      	bne.n	8014996 <prvProcessReceivedCommands+0x32>
 801497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014982:	b672      	cpsid	i
 8014984:	f383 8811 	msr	BASEPRI, r3
 8014988:	f3bf 8f6f 	isb	sy
 801498c:	f3bf 8f4f 	dsb	sy
 8014990:	b662      	cpsie	i
 8014992:	61fb      	str	r3, [r7, #28]
 8014994:	e7fe      	b.n	8014994 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801499c:	6850      	ldr	r0, [r2, #4]
 801499e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149a0:	6892      	ldr	r2, [r2, #8]
 80149a2:	4611      	mov	r1, r2
 80149a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	f2c0 80ab 	blt.w	8014b04 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80149b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b4:	695b      	ldr	r3, [r3, #20]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d004      	beq.n	80149c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80149ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149bc:	3304      	adds	r3, #4
 80149be:	4618      	mov	r0, r3
 80149c0:	f7fd fd8c 	bl	80124dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80149c4:	463b      	mov	r3, r7
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7ff ff6a 	bl	80148a0 <prvSampleTimeNow>
 80149cc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2b09      	cmp	r3, #9
 80149d2:	f200 8098 	bhi.w	8014b06 <prvProcessReceivedCommands+0x1a2>
 80149d6:	a201      	add	r2, pc, #4	; (adr r2, 80149dc <prvProcessReceivedCommands+0x78>)
 80149d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149dc:	08014a05 	.word	0x08014a05
 80149e0:	08014a05 	.word	0x08014a05
 80149e4:	08014a05 	.word	0x08014a05
 80149e8:	08014a7b 	.word	0x08014a7b
 80149ec:	08014a8f 	.word	0x08014a8f
 80149f0:	08014adb 	.word	0x08014adb
 80149f4:	08014a05 	.word	0x08014a05
 80149f8:	08014a05 	.word	0x08014a05
 80149fc:	08014a7b 	.word	0x08014a7b
 8014a00:	08014a8f 	.word	0x08014a8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a0a:	f043 0301 	orr.w	r3, r3, #1
 8014a0e:	b2da      	uxtb	r2, r3
 8014a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014a16:	68ba      	ldr	r2, [r7, #8]
 8014a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a1a:	699b      	ldr	r3, [r3, #24]
 8014a1c:	18d1      	adds	r1, r2, r3
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a24:	f7ff ff5c 	bl	80148e0 <prvInsertTimerInActiveList>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d06b      	beq.n	8014b06 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a30:	6a1b      	ldr	r3, [r3, #32]
 8014a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a3c:	f003 0304 	and.w	r3, r3, #4
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d060      	beq.n	8014b06 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014a44:	68ba      	ldr	r2, [r7, #8]
 8014a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a48:	699b      	ldr	r3, [r3, #24]
 8014a4a:	441a      	add	r2, r3
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	9300      	str	r3, [sp, #0]
 8014a50:	2300      	movs	r3, #0
 8014a52:	2100      	movs	r1, #0
 8014a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a56:	f7ff fe03 	bl	8014660 <xTimerGenericCommand>
 8014a5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014a5c:	6a3b      	ldr	r3, [r7, #32]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d151      	bne.n	8014b06 <prvProcessReceivedCommands+0x1a2>
 8014a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a66:	b672      	cpsid	i
 8014a68:	f383 8811 	msr	BASEPRI, r3
 8014a6c:	f3bf 8f6f 	isb	sy
 8014a70:	f3bf 8f4f 	dsb	sy
 8014a74:	b662      	cpsie	i
 8014a76:	61bb      	str	r3, [r7, #24]
 8014a78:	e7fe      	b.n	8014a78 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a80:	f023 0301 	bic.w	r3, r3, #1
 8014a84:	b2da      	uxtb	r2, r3
 8014a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014a8c:	e03b      	b.n	8014b06 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a94:	f043 0301 	orr.w	r3, r3, #1
 8014a98:	b2da      	uxtb	r2, r3
 8014a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014aa0:	68ba      	ldr	r2, [r7, #8]
 8014aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aa4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aa8:	699b      	ldr	r3, [r3, #24]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d10b      	bne.n	8014ac6 <prvProcessReceivedCommands+0x162>
 8014aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab2:	b672      	cpsid	i
 8014ab4:	f383 8811 	msr	BASEPRI, r3
 8014ab8:	f3bf 8f6f 	isb	sy
 8014abc:	f3bf 8f4f 	dsb	sy
 8014ac0:	b662      	cpsie	i
 8014ac2:	617b      	str	r3, [r7, #20]
 8014ac4:	e7fe      	b.n	8014ac4 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac8:	699a      	ldr	r2, [r3, #24]
 8014aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014acc:	18d1      	adds	r1, r2, r3
 8014ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ad4:	f7ff ff04 	bl	80148e0 <prvInsertTimerInActiveList>
					break;
 8014ad8:	e015      	b.n	8014b06 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ae0:	f003 0302 	and.w	r3, r3, #2
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d103      	bne.n	8014af0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8014ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014aea:	f000 fbb7 	bl	801525c <vPortFree>
 8014aee:	e00a      	b.n	8014b06 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014af6:	f023 0301 	bic.w	r3, r3, #1
 8014afa:	b2da      	uxtb	r2, r3
 8014afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014b02:	e000      	b.n	8014b06 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014b04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014b06:	4b07      	ldr	r3, [pc, #28]	; (8014b24 <prvProcessReceivedCommands+0x1c0>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	1d39      	adds	r1, r7, #4
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7fe f8f8 	bl	8012d04 <xQueueReceive>
 8014b14:	4603      	mov	r3, r0
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	f47f af28 	bne.w	801496c <prvProcessReceivedCommands+0x8>
	}
}
 8014b1c:	bf00      	nop
 8014b1e:	3730      	adds	r7, #48	; 0x30
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}
 8014b24:	20000ebc 	.word	0x20000ebc

08014b28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b088      	sub	sp, #32
 8014b2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014b2e:	e049      	b.n	8014bc4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014b30:	4b2e      	ldr	r3, [pc, #184]	; (8014bec <prvSwitchTimerLists+0xc4>)
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	68db      	ldr	r3, [r3, #12]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b3a:	4b2c      	ldr	r3, [pc, #176]	; (8014bec <prvSwitchTimerLists+0xc4>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	68db      	ldr	r3, [r3, #12]
 8014b42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	3304      	adds	r3, #4
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f7fd fcc7 	bl	80124dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	6a1b      	ldr	r3, [r3, #32]
 8014b52:	68f8      	ldr	r0, [r7, #12]
 8014b54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b5c:	f003 0304 	and.w	r3, r3, #4
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d02f      	beq.n	8014bc4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	699b      	ldr	r3, [r3, #24]
 8014b68:	693a      	ldr	r2, [r7, #16]
 8014b6a:	4413      	add	r3, r2
 8014b6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014b6e:	68ba      	ldr	r2, [r7, #8]
 8014b70:	693b      	ldr	r3, [r7, #16]
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d90e      	bls.n	8014b94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	68ba      	ldr	r2, [r7, #8]
 8014b7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	68fa      	ldr	r2, [r7, #12]
 8014b80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014b82:	4b1a      	ldr	r3, [pc, #104]	; (8014bec <prvSwitchTimerLists+0xc4>)
 8014b84:	681a      	ldr	r2, [r3, #0]
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	3304      	adds	r3, #4
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	4610      	mov	r0, r2
 8014b8e:	f7fd fc6c 	bl	801246a <vListInsert>
 8014b92:	e017      	b.n	8014bc4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014b94:	2300      	movs	r3, #0
 8014b96:	9300      	str	r3, [sp, #0]
 8014b98:	2300      	movs	r3, #0
 8014b9a:	693a      	ldr	r2, [r7, #16]
 8014b9c:	2100      	movs	r1, #0
 8014b9e:	68f8      	ldr	r0, [r7, #12]
 8014ba0:	f7ff fd5e 	bl	8014660 <xTimerGenericCommand>
 8014ba4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d10b      	bne.n	8014bc4 <prvSwitchTimerLists+0x9c>
 8014bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bb0:	b672      	cpsid	i
 8014bb2:	f383 8811 	msr	BASEPRI, r3
 8014bb6:	f3bf 8f6f 	isb	sy
 8014bba:	f3bf 8f4f 	dsb	sy
 8014bbe:	b662      	cpsie	i
 8014bc0:	603b      	str	r3, [r7, #0]
 8014bc2:	e7fe      	b.n	8014bc2 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014bc4:	4b09      	ldr	r3, [pc, #36]	; (8014bec <prvSwitchTimerLists+0xc4>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d1b0      	bne.n	8014b30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014bce:	4b07      	ldr	r3, [pc, #28]	; (8014bec <prvSwitchTimerLists+0xc4>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014bd4:	4b06      	ldr	r3, [pc, #24]	; (8014bf0 <prvSwitchTimerLists+0xc8>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	4a04      	ldr	r2, [pc, #16]	; (8014bec <prvSwitchTimerLists+0xc4>)
 8014bda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014bdc:	4a04      	ldr	r2, [pc, #16]	; (8014bf0 <prvSwitchTimerLists+0xc8>)
 8014bde:	697b      	ldr	r3, [r7, #20]
 8014be0:	6013      	str	r3, [r2, #0]
}
 8014be2:	bf00      	nop
 8014be4:	3718      	adds	r7, #24
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}
 8014bea:	bf00      	nop
 8014bec:	20000eb4 	.word	0x20000eb4
 8014bf0:	20000eb8 	.word	0x20000eb8

08014bf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b082      	sub	sp, #8
 8014bf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014bfa:	f000 f945 	bl	8014e88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014bfe:	4b15      	ldr	r3, [pc, #84]	; (8014c54 <prvCheckForValidListAndQueue+0x60>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d120      	bne.n	8014c48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014c06:	4814      	ldr	r0, [pc, #80]	; (8014c58 <prvCheckForValidListAndQueue+0x64>)
 8014c08:	f7fd fbde 	bl	80123c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014c0c:	4813      	ldr	r0, [pc, #76]	; (8014c5c <prvCheckForValidListAndQueue+0x68>)
 8014c0e:	f7fd fbdb 	bl	80123c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014c12:	4b13      	ldr	r3, [pc, #76]	; (8014c60 <prvCheckForValidListAndQueue+0x6c>)
 8014c14:	4a10      	ldr	r2, [pc, #64]	; (8014c58 <prvCheckForValidListAndQueue+0x64>)
 8014c16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014c18:	4b12      	ldr	r3, [pc, #72]	; (8014c64 <prvCheckForValidListAndQueue+0x70>)
 8014c1a:	4a10      	ldr	r2, [pc, #64]	; (8014c5c <prvCheckForValidListAndQueue+0x68>)
 8014c1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014c1e:	2300      	movs	r3, #0
 8014c20:	9300      	str	r3, [sp, #0]
 8014c22:	4b11      	ldr	r3, [pc, #68]	; (8014c68 <prvCheckForValidListAndQueue+0x74>)
 8014c24:	4a11      	ldr	r2, [pc, #68]	; (8014c6c <prvCheckForValidListAndQueue+0x78>)
 8014c26:	2110      	movs	r1, #16
 8014c28:	200a      	movs	r0, #10
 8014c2a:	f7fd fceb 	bl	8012604 <xQueueGenericCreateStatic>
 8014c2e:	4602      	mov	r2, r0
 8014c30:	4b08      	ldr	r3, [pc, #32]	; (8014c54 <prvCheckForValidListAndQueue+0x60>)
 8014c32:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014c34:	4b07      	ldr	r3, [pc, #28]	; (8014c54 <prvCheckForValidListAndQueue+0x60>)
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d005      	beq.n	8014c48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014c3c:	4b05      	ldr	r3, [pc, #20]	; (8014c54 <prvCheckForValidListAndQueue+0x60>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	490b      	ldr	r1, [pc, #44]	; (8014c70 <prvCheckForValidListAndQueue+0x7c>)
 8014c42:	4618      	mov	r0, r3
 8014c44:	f7fe fc20 	bl	8013488 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014c48:	f000 f950 	bl	8014eec <vPortExitCritical>
}
 8014c4c:	bf00      	nop
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	20000ebc 	.word	0x20000ebc
 8014c58:	20000e8c 	.word	0x20000e8c
 8014c5c:	20000ea0 	.word	0x20000ea0
 8014c60:	20000eb4 	.word	0x20000eb4
 8014c64:	20000eb8 	.word	0x20000eb8
 8014c68:	20000f68 	.word	0x20000f68
 8014c6c:	20000ec8 	.word	0x20000ec8
 8014c70:	080161bc 	.word	0x080161bc

08014c74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014c74:	b480      	push	{r7}
 8014c76:	b085      	sub	sp, #20
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	60f8      	str	r0, [r7, #12]
 8014c7c:	60b9      	str	r1, [r7, #8]
 8014c7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	3b04      	subs	r3, #4
 8014c84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	3b04      	subs	r3, #4
 8014c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014c94:	68bb      	ldr	r3, [r7, #8]
 8014c96:	f023 0201 	bic.w	r2, r3, #1
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	3b04      	subs	r3, #4
 8014ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014ca4:	4a0c      	ldr	r2, [pc, #48]	; (8014cd8 <pxPortInitialiseStack+0x64>)
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	3b14      	subs	r3, #20
 8014cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	3b04      	subs	r3, #4
 8014cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	f06f 0202 	mvn.w	r2, #2
 8014cc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	3b20      	subs	r3, #32
 8014cc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014cca:	68fb      	ldr	r3, [r7, #12]
}
 8014ccc:	4618      	mov	r0, r3
 8014cce:	3714      	adds	r7, #20
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd6:	4770      	bx	lr
 8014cd8:	08014cdd 	.word	0x08014cdd

08014cdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014cdc:	b480      	push	{r7}
 8014cde:	b085      	sub	sp, #20
 8014ce0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014ce6:	4b13      	ldr	r3, [pc, #76]	; (8014d34 <prvTaskExitError+0x58>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cee:	d00b      	beq.n	8014d08 <prvTaskExitError+0x2c>
 8014cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cf4:	b672      	cpsid	i
 8014cf6:	f383 8811 	msr	BASEPRI, r3
 8014cfa:	f3bf 8f6f 	isb	sy
 8014cfe:	f3bf 8f4f 	dsb	sy
 8014d02:	b662      	cpsie	i
 8014d04:	60fb      	str	r3, [r7, #12]
 8014d06:	e7fe      	b.n	8014d06 <prvTaskExitError+0x2a>
 8014d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d0c:	b672      	cpsid	i
 8014d0e:	f383 8811 	msr	BASEPRI, r3
 8014d12:	f3bf 8f6f 	isb	sy
 8014d16:	f3bf 8f4f 	dsb	sy
 8014d1a:	b662      	cpsie	i
 8014d1c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014d1e:	bf00      	nop
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d0fc      	beq.n	8014d20 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014d26:	bf00      	nop
 8014d28:	3714      	adds	r7, #20
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d30:	4770      	bx	lr
 8014d32:	bf00      	nop
 8014d34:	20000104 	.word	0x20000104
	...

08014d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014d40:	4b07      	ldr	r3, [pc, #28]	; (8014d60 <pxCurrentTCBConst2>)
 8014d42:	6819      	ldr	r1, [r3, #0]
 8014d44:	6808      	ldr	r0, [r1, #0]
 8014d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d4a:	f380 8809 	msr	PSP, r0
 8014d4e:	f3bf 8f6f 	isb	sy
 8014d52:	f04f 0000 	mov.w	r0, #0
 8014d56:	f380 8811 	msr	BASEPRI, r0
 8014d5a:	4770      	bx	lr
 8014d5c:	f3af 8000 	nop.w

08014d60 <pxCurrentTCBConst2>:
 8014d60:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014d64:	bf00      	nop
 8014d66:	bf00      	nop

08014d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014d68:	4808      	ldr	r0, [pc, #32]	; (8014d8c <prvPortStartFirstTask+0x24>)
 8014d6a:	6800      	ldr	r0, [r0, #0]
 8014d6c:	6800      	ldr	r0, [r0, #0]
 8014d6e:	f380 8808 	msr	MSP, r0
 8014d72:	f04f 0000 	mov.w	r0, #0
 8014d76:	f380 8814 	msr	CONTROL, r0
 8014d7a:	b662      	cpsie	i
 8014d7c:	b661      	cpsie	f
 8014d7e:	f3bf 8f4f 	dsb	sy
 8014d82:	f3bf 8f6f 	isb	sy
 8014d86:	df00      	svc	0
 8014d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014d8a:	bf00      	nop
 8014d8c:	e000ed08 	.word	0xe000ed08

08014d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b084      	sub	sp, #16
 8014d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014d96:	4b36      	ldr	r3, [pc, #216]	; (8014e70 <xPortStartScheduler+0xe0>)
 8014d98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	b2db      	uxtb	r3, r3
 8014da0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	22ff      	movs	r2, #255	; 0xff
 8014da6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	781b      	ldrb	r3, [r3, #0]
 8014dac:	b2db      	uxtb	r3, r3
 8014dae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014db0:	78fb      	ldrb	r3, [r7, #3]
 8014db2:	b2db      	uxtb	r3, r3
 8014db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014db8:	b2da      	uxtb	r2, r3
 8014dba:	4b2e      	ldr	r3, [pc, #184]	; (8014e74 <xPortStartScheduler+0xe4>)
 8014dbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014dbe:	4b2e      	ldr	r3, [pc, #184]	; (8014e78 <xPortStartScheduler+0xe8>)
 8014dc0:	2207      	movs	r2, #7
 8014dc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014dc4:	e009      	b.n	8014dda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014dc6:	4b2c      	ldr	r3, [pc, #176]	; (8014e78 <xPortStartScheduler+0xe8>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	3b01      	subs	r3, #1
 8014dcc:	4a2a      	ldr	r2, [pc, #168]	; (8014e78 <xPortStartScheduler+0xe8>)
 8014dce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014dd0:	78fb      	ldrb	r3, [r7, #3]
 8014dd2:	b2db      	uxtb	r3, r3
 8014dd4:	005b      	lsls	r3, r3, #1
 8014dd6:	b2db      	uxtb	r3, r3
 8014dd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014dda:	78fb      	ldrb	r3, [r7, #3]
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014de2:	2b80      	cmp	r3, #128	; 0x80
 8014de4:	d0ef      	beq.n	8014dc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014de6:	4b24      	ldr	r3, [pc, #144]	; (8014e78 <xPortStartScheduler+0xe8>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	f1c3 0307 	rsb	r3, r3, #7
 8014dee:	2b04      	cmp	r3, #4
 8014df0:	d00b      	beq.n	8014e0a <xPortStartScheduler+0x7a>
 8014df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014df6:	b672      	cpsid	i
 8014df8:	f383 8811 	msr	BASEPRI, r3
 8014dfc:	f3bf 8f6f 	isb	sy
 8014e00:	f3bf 8f4f 	dsb	sy
 8014e04:	b662      	cpsie	i
 8014e06:	60bb      	str	r3, [r7, #8]
 8014e08:	e7fe      	b.n	8014e08 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014e0a:	4b1b      	ldr	r3, [pc, #108]	; (8014e78 <xPortStartScheduler+0xe8>)
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	021b      	lsls	r3, r3, #8
 8014e10:	4a19      	ldr	r2, [pc, #100]	; (8014e78 <xPortStartScheduler+0xe8>)
 8014e12:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014e14:	4b18      	ldr	r3, [pc, #96]	; (8014e78 <xPortStartScheduler+0xe8>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014e1c:	4a16      	ldr	r2, [pc, #88]	; (8014e78 <xPortStartScheduler+0xe8>)
 8014e1e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	b2da      	uxtb	r2, r3
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014e28:	4b14      	ldr	r3, [pc, #80]	; (8014e7c <xPortStartScheduler+0xec>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	4a13      	ldr	r2, [pc, #76]	; (8014e7c <xPortStartScheduler+0xec>)
 8014e2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014e32:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014e34:	4b11      	ldr	r3, [pc, #68]	; (8014e7c <xPortStartScheduler+0xec>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	4a10      	ldr	r2, [pc, #64]	; (8014e7c <xPortStartScheduler+0xec>)
 8014e3a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014e3e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014e40:	f000 f8d4 	bl	8014fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014e44:	4b0e      	ldr	r3, [pc, #56]	; (8014e80 <xPortStartScheduler+0xf0>)
 8014e46:	2200      	movs	r2, #0
 8014e48:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014e4a:	f000 f8f3 	bl	8015034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014e4e:	4b0d      	ldr	r3, [pc, #52]	; (8014e84 <xPortStartScheduler+0xf4>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	4a0c      	ldr	r2, [pc, #48]	; (8014e84 <xPortStartScheduler+0xf4>)
 8014e54:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014e58:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014e5a:	f7ff ff85 	bl	8014d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014e5e:	f7fe ff65 	bl	8013d2c <vTaskSwitchContext>
	prvTaskExitError();
 8014e62:	f7ff ff3b 	bl	8014cdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014e66:	2300      	movs	r3, #0
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	3710      	adds	r7, #16
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	e000e400 	.word	0xe000e400
 8014e74:	20000fb8 	.word	0x20000fb8
 8014e78:	20000fbc 	.word	0x20000fbc
 8014e7c:	e000ed20 	.word	0xe000ed20
 8014e80:	20000104 	.word	0x20000104
 8014e84:	e000ef34 	.word	0xe000ef34

08014e88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014e88:	b480      	push	{r7}
 8014e8a:	b083      	sub	sp, #12
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e92:	b672      	cpsid	i
 8014e94:	f383 8811 	msr	BASEPRI, r3
 8014e98:	f3bf 8f6f 	isb	sy
 8014e9c:	f3bf 8f4f 	dsb	sy
 8014ea0:	b662      	cpsie	i
 8014ea2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014ea4:	4b0f      	ldr	r3, [pc, #60]	; (8014ee4 <vPortEnterCritical+0x5c>)
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	4a0e      	ldr	r2, [pc, #56]	; (8014ee4 <vPortEnterCritical+0x5c>)
 8014eac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014eae:	4b0d      	ldr	r3, [pc, #52]	; (8014ee4 <vPortEnterCritical+0x5c>)
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	2b01      	cmp	r3, #1
 8014eb4:	d110      	bne.n	8014ed8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014eb6:	4b0c      	ldr	r3, [pc, #48]	; (8014ee8 <vPortEnterCritical+0x60>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	b2db      	uxtb	r3, r3
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d00b      	beq.n	8014ed8 <vPortEnterCritical+0x50>
 8014ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ec4:	b672      	cpsid	i
 8014ec6:	f383 8811 	msr	BASEPRI, r3
 8014eca:	f3bf 8f6f 	isb	sy
 8014ece:	f3bf 8f4f 	dsb	sy
 8014ed2:	b662      	cpsie	i
 8014ed4:	603b      	str	r3, [r7, #0]
 8014ed6:	e7fe      	b.n	8014ed6 <vPortEnterCritical+0x4e>
	}
}
 8014ed8:	bf00      	nop
 8014eda:	370c      	adds	r7, #12
 8014edc:	46bd      	mov	sp, r7
 8014ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee2:	4770      	bx	lr
 8014ee4:	20000104 	.word	0x20000104
 8014ee8:	e000ed04 	.word	0xe000ed04

08014eec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014eec:	b480      	push	{r7}
 8014eee:	b083      	sub	sp, #12
 8014ef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014ef2:	4b12      	ldr	r3, [pc, #72]	; (8014f3c <vPortExitCritical+0x50>)
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d10b      	bne.n	8014f12 <vPortExitCritical+0x26>
 8014efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014efe:	b672      	cpsid	i
 8014f00:	f383 8811 	msr	BASEPRI, r3
 8014f04:	f3bf 8f6f 	isb	sy
 8014f08:	f3bf 8f4f 	dsb	sy
 8014f0c:	b662      	cpsie	i
 8014f0e:	607b      	str	r3, [r7, #4]
 8014f10:	e7fe      	b.n	8014f10 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8014f12:	4b0a      	ldr	r3, [pc, #40]	; (8014f3c <vPortExitCritical+0x50>)
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	3b01      	subs	r3, #1
 8014f18:	4a08      	ldr	r2, [pc, #32]	; (8014f3c <vPortExitCritical+0x50>)
 8014f1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014f1c:	4b07      	ldr	r3, [pc, #28]	; (8014f3c <vPortExitCritical+0x50>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d104      	bne.n	8014f2e <vPortExitCritical+0x42>
 8014f24:	2300      	movs	r3, #0
 8014f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014f2e:	bf00      	nop
 8014f30:	370c      	adds	r7, #12
 8014f32:	46bd      	mov	sp, r7
 8014f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop
 8014f3c:	20000104 	.word	0x20000104

08014f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014f40:	f3ef 8009 	mrs	r0, PSP
 8014f44:	f3bf 8f6f 	isb	sy
 8014f48:	4b15      	ldr	r3, [pc, #84]	; (8014fa0 <pxCurrentTCBConst>)
 8014f4a:	681a      	ldr	r2, [r3, #0]
 8014f4c:	f01e 0f10 	tst.w	lr, #16
 8014f50:	bf08      	it	eq
 8014f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f5a:	6010      	str	r0, [r2, #0]
 8014f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014f64:	b672      	cpsid	i
 8014f66:	f380 8811 	msr	BASEPRI, r0
 8014f6a:	f3bf 8f4f 	dsb	sy
 8014f6e:	f3bf 8f6f 	isb	sy
 8014f72:	b662      	cpsie	i
 8014f74:	f7fe feda 	bl	8013d2c <vTaskSwitchContext>
 8014f78:	f04f 0000 	mov.w	r0, #0
 8014f7c:	f380 8811 	msr	BASEPRI, r0
 8014f80:	bc09      	pop	{r0, r3}
 8014f82:	6819      	ldr	r1, [r3, #0]
 8014f84:	6808      	ldr	r0, [r1, #0]
 8014f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f8a:	f01e 0f10 	tst.w	lr, #16
 8014f8e:	bf08      	it	eq
 8014f90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014f94:	f380 8809 	msr	PSP, r0
 8014f98:	f3bf 8f6f 	isb	sy
 8014f9c:	4770      	bx	lr
 8014f9e:	bf00      	nop

08014fa0 <pxCurrentTCBConst>:
 8014fa0:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014fa4:	bf00      	nop
 8014fa6:	bf00      	nop

08014fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b082      	sub	sp, #8
 8014fac:	af00      	add	r7, sp, #0
	__asm volatile
 8014fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb2:	b672      	cpsid	i
 8014fb4:	f383 8811 	msr	BASEPRI, r3
 8014fb8:	f3bf 8f6f 	isb	sy
 8014fbc:	f3bf 8f4f 	dsb	sy
 8014fc0:	b662      	cpsie	i
 8014fc2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014fc4:	f7fe fdf8 	bl	8013bb8 <xTaskIncrementTick>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d003      	beq.n	8014fd6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014fce:	4b06      	ldr	r3, [pc, #24]	; (8014fe8 <SysTick_Handler+0x40>)
 8014fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fd4:	601a      	str	r2, [r3, #0]
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014fe0:	bf00      	nop
 8014fe2:	3708      	adds	r7, #8
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}
 8014fe8:	e000ed04 	.word	0xe000ed04

08014fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014fec:	b480      	push	{r7}
 8014fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014ff0:	4b0b      	ldr	r3, [pc, #44]	; (8015020 <vPortSetupTimerInterrupt+0x34>)
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014ff6:	4b0b      	ldr	r3, [pc, #44]	; (8015024 <vPortSetupTimerInterrupt+0x38>)
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014ffc:	4b0a      	ldr	r3, [pc, #40]	; (8015028 <vPortSetupTimerInterrupt+0x3c>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	4a0a      	ldr	r2, [pc, #40]	; (801502c <vPortSetupTimerInterrupt+0x40>)
 8015002:	fba2 2303 	umull	r2, r3, r2, r3
 8015006:	099b      	lsrs	r3, r3, #6
 8015008:	4a09      	ldr	r2, [pc, #36]	; (8015030 <vPortSetupTimerInterrupt+0x44>)
 801500a:	3b01      	subs	r3, #1
 801500c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801500e:	4b04      	ldr	r3, [pc, #16]	; (8015020 <vPortSetupTimerInterrupt+0x34>)
 8015010:	2207      	movs	r2, #7
 8015012:	601a      	str	r2, [r3, #0]
}
 8015014:	bf00      	nop
 8015016:	46bd      	mov	sp, r7
 8015018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501c:	4770      	bx	lr
 801501e:	bf00      	nop
 8015020:	e000e010 	.word	0xe000e010
 8015024:	e000e018 	.word	0xe000e018
 8015028:	20000010 	.word	0x20000010
 801502c:	10624dd3 	.word	0x10624dd3
 8015030:	e000e014 	.word	0xe000e014

08015034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015044 <vPortEnableVFP+0x10>
 8015038:	6801      	ldr	r1, [r0, #0]
 801503a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801503e:	6001      	str	r1, [r0, #0]
 8015040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015042:	bf00      	nop
 8015044:	e000ed88 	.word	0xe000ed88

08015048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015048:	b480      	push	{r7}
 801504a:	b085      	sub	sp, #20
 801504c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801504e:	f3ef 8305 	mrs	r3, IPSR
 8015052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	2b0f      	cmp	r3, #15
 8015058:	d915      	bls.n	8015086 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801505a:	4a18      	ldr	r2, [pc, #96]	; (80150bc <vPortValidateInterruptPriority+0x74>)
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	4413      	add	r3, r2
 8015060:	781b      	ldrb	r3, [r3, #0]
 8015062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015064:	4b16      	ldr	r3, [pc, #88]	; (80150c0 <vPortValidateInterruptPriority+0x78>)
 8015066:	781b      	ldrb	r3, [r3, #0]
 8015068:	7afa      	ldrb	r2, [r7, #11]
 801506a:	429a      	cmp	r2, r3
 801506c:	d20b      	bcs.n	8015086 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015072:	b672      	cpsid	i
 8015074:	f383 8811 	msr	BASEPRI, r3
 8015078:	f3bf 8f6f 	isb	sy
 801507c:	f3bf 8f4f 	dsb	sy
 8015080:	b662      	cpsie	i
 8015082:	607b      	str	r3, [r7, #4]
 8015084:	e7fe      	b.n	8015084 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015086:	4b0f      	ldr	r3, [pc, #60]	; (80150c4 <vPortValidateInterruptPriority+0x7c>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801508e:	4b0e      	ldr	r3, [pc, #56]	; (80150c8 <vPortValidateInterruptPriority+0x80>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	429a      	cmp	r2, r3
 8015094:	d90b      	bls.n	80150ae <vPortValidateInterruptPriority+0x66>
 8015096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801509a:	b672      	cpsid	i
 801509c:	f383 8811 	msr	BASEPRI, r3
 80150a0:	f3bf 8f6f 	isb	sy
 80150a4:	f3bf 8f4f 	dsb	sy
 80150a8:	b662      	cpsie	i
 80150aa:	603b      	str	r3, [r7, #0]
 80150ac:	e7fe      	b.n	80150ac <vPortValidateInterruptPriority+0x64>
	}
 80150ae:	bf00      	nop
 80150b0:	3714      	adds	r7, #20
 80150b2:	46bd      	mov	sp, r7
 80150b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b8:	4770      	bx	lr
 80150ba:	bf00      	nop
 80150bc:	e000e3f0 	.word	0xe000e3f0
 80150c0:	20000fb8 	.word	0x20000fb8
 80150c4:	e000ed0c 	.word	0xe000ed0c
 80150c8:	20000fbc 	.word	0x20000fbc

080150cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b08a      	sub	sp, #40	; 0x28
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80150d4:	2300      	movs	r3, #0
 80150d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80150d8:	f7fe fca0 	bl	8013a1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80150dc:	4b5a      	ldr	r3, [pc, #360]	; (8015248 <pvPortMalloc+0x17c>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d101      	bne.n	80150e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80150e4:	f000 f916 	bl	8015314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80150e8:	4b58      	ldr	r3, [pc, #352]	; (801524c <pvPortMalloc+0x180>)
 80150ea:	681a      	ldr	r2, [r3, #0]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	4013      	ands	r3, r2
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	f040 8090 	bne.w	8015216 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d01e      	beq.n	801513a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80150fc:	2208      	movs	r2, #8
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	4413      	add	r3, r2
 8015102:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f003 0307 	and.w	r3, r3, #7
 801510a:	2b00      	cmp	r3, #0
 801510c:	d015      	beq.n	801513a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f023 0307 	bic.w	r3, r3, #7
 8015114:	3308      	adds	r3, #8
 8015116:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f003 0307 	and.w	r3, r3, #7
 801511e:	2b00      	cmp	r3, #0
 8015120:	d00b      	beq.n	801513a <pvPortMalloc+0x6e>
 8015122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015126:	b672      	cpsid	i
 8015128:	f383 8811 	msr	BASEPRI, r3
 801512c:	f3bf 8f6f 	isb	sy
 8015130:	f3bf 8f4f 	dsb	sy
 8015134:	b662      	cpsie	i
 8015136:	617b      	str	r3, [r7, #20]
 8015138:	e7fe      	b.n	8015138 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d06a      	beq.n	8015216 <pvPortMalloc+0x14a>
 8015140:	4b43      	ldr	r3, [pc, #268]	; (8015250 <pvPortMalloc+0x184>)
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	687a      	ldr	r2, [r7, #4]
 8015146:	429a      	cmp	r2, r3
 8015148:	d865      	bhi.n	8015216 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801514a:	4b42      	ldr	r3, [pc, #264]	; (8015254 <pvPortMalloc+0x188>)
 801514c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801514e:	4b41      	ldr	r3, [pc, #260]	; (8015254 <pvPortMalloc+0x188>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015154:	e004      	b.n	8015160 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015162:	685b      	ldr	r3, [r3, #4]
 8015164:	687a      	ldr	r2, [r7, #4]
 8015166:	429a      	cmp	r2, r3
 8015168:	d903      	bls.n	8015172 <pvPortMalloc+0xa6>
 801516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d1f1      	bne.n	8015156 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015172:	4b35      	ldr	r3, [pc, #212]	; (8015248 <pvPortMalloc+0x17c>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015178:	429a      	cmp	r2, r3
 801517a:	d04c      	beq.n	8015216 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801517c:	6a3b      	ldr	r3, [r7, #32]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	2208      	movs	r2, #8
 8015182:	4413      	add	r3, r2
 8015184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015188:	681a      	ldr	r2, [r3, #0]
 801518a:	6a3b      	ldr	r3, [r7, #32]
 801518c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015190:	685a      	ldr	r2, [r3, #4]
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	1ad2      	subs	r2, r2, r3
 8015196:	2308      	movs	r3, #8
 8015198:	005b      	lsls	r3, r3, #1
 801519a:	429a      	cmp	r2, r3
 801519c:	d920      	bls.n	80151e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801519e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	4413      	add	r3, r2
 80151a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80151a6:	69bb      	ldr	r3, [r7, #24]
 80151a8:	f003 0307 	and.w	r3, r3, #7
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d00b      	beq.n	80151c8 <pvPortMalloc+0xfc>
 80151b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151b4:	b672      	cpsid	i
 80151b6:	f383 8811 	msr	BASEPRI, r3
 80151ba:	f3bf 8f6f 	isb	sy
 80151be:	f3bf 8f4f 	dsb	sy
 80151c2:	b662      	cpsie	i
 80151c4:	613b      	str	r3, [r7, #16]
 80151c6:	e7fe      	b.n	80151c6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80151c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ca:	685a      	ldr	r2, [r3, #4]
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	1ad2      	subs	r2, r2, r3
 80151d0:	69bb      	ldr	r3, [r7, #24]
 80151d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80151d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d6:	687a      	ldr	r2, [r7, #4]
 80151d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80151da:	69b8      	ldr	r0, [r7, #24]
 80151dc:	f000 f8fc 	bl	80153d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80151e0:	4b1b      	ldr	r3, [pc, #108]	; (8015250 <pvPortMalloc+0x184>)
 80151e2:	681a      	ldr	r2, [r3, #0]
 80151e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151e6:	685b      	ldr	r3, [r3, #4]
 80151e8:	1ad3      	subs	r3, r2, r3
 80151ea:	4a19      	ldr	r2, [pc, #100]	; (8015250 <pvPortMalloc+0x184>)
 80151ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80151ee:	4b18      	ldr	r3, [pc, #96]	; (8015250 <pvPortMalloc+0x184>)
 80151f0:	681a      	ldr	r2, [r3, #0]
 80151f2:	4b19      	ldr	r3, [pc, #100]	; (8015258 <pvPortMalloc+0x18c>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d203      	bcs.n	8015202 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80151fa:	4b15      	ldr	r3, [pc, #84]	; (8015250 <pvPortMalloc+0x184>)
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	4a16      	ldr	r2, [pc, #88]	; (8015258 <pvPortMalloc+0x18c>)
 8015200:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015204:	685a      	ldr	r2, [r3, #4]
 8015206:	4b11      	ldr	r3, [pc, #68]	; (801524c <pvPortMalloc+0x180>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	431a      	orrs	r2, r3
 801520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801520e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015212:	2200      	movs	r2, #0
 8015214:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015216:	f7fe fc0f 	bl	8013a38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801521a:	69fb      	ldr	r3, [r7, #28]
 801521c:	f003 0307 	and.w	r3, r3, #7
 8015220:	2b00      	cmp	r3, #0
 8015222:	d00b      	beq.n	801523c <pvPortMalloc+0x170>
 8015224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015228:	b672      	cpsid	i
 801522a:	f383 8811 	msr	BASEPRI, r3
 801522e:	f3bf 8f6f 	isb	sy
 8015232:	f3bf 8f4f 	dsb	sy
 8015236:	b662      	cpsie	i
 8015238:	60fb      	str	r3, [r7, #12]
 801523a:	e7fe      	b.n	801523a <pvPortMalloc+0x16e>
	return pvReturn;
 801523c:	69fb      	ldr	r3, [r7, #28]
}
 801523e:	4618      	mov	r0, r3
 8015240:	3728      	adds	r7, #40	; 0x28
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}
 8015246:	bf00      	nop
 8015248:	20004bc8 	.word	0x20004bc8
 801524c:	20004bd4 	.word	0x20004bd4
 8015250:	20004bcc 	.word	0x20004bcc
 8015254:	20004bc0 	.word	0x20004bc0
 8015258:	20004bd0 	.word	0x20004bd0

0801525c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b086      	sub	sp, #24
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d04a      	beq.n	8015304 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801526e:	2308      	movs	r3, #8
 8015270:	425b      	negs	r3, r3
 8015272:	697a      	ldr	r2, [r7, #20]
 8015274:	4413      	add	r3, r2
 8015276:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	685a      	ldr	r2, [r3, #4]
 8015280:	4b22      	ldr	r3, [pc, #136]	; (801530c <vPortFree+0xb0>)
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	4013      	ands	r3, r2
 8015286:	2b00      	cmp	r3, #0
 8015288:	d10b      	bne.n	80152a2 <vPortFree+0x46>
 801528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801528e:	b672      	cpsid	i
 8015290:	f383 8811 	msr	BASEPRI, r3
 8015294:	f3bf 8f6f 	isb	sy
 8015298:	f3bf 8f4f 	dsb	sy
 801529c:	b662      	cpsie	i
 801529e:	60fb      	str	r3, [r7, #12]
 80152a0:	e7fe      	b.n	80152a0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80152a2:	693b      	ldr	r3, [r7, #16]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d00b      	beq.n	80152c2 <vPortFree+0x66>
 80152aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ae:	b672      	cpsid	i
 80152b0:	f383 8811 	msr	BASEPRI, r3
 80152b4:	f3bf 8f6f 	isb	sy
 80152b8:	f3bf 8f4f 	dsb	sy
 80152bc:	b662      	cpsie	i
 80152be:	60bb      	str	r3, [r7, #8]
 80152c0:	e7fe      	b.n	80152c0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80152c2:	693b      	ldr	r3, [r7, #16]
 80152c4:	685a      	ldr	r2, [r3, #4]
 80152c6:	4b11      	ldr	r3, [pc, #68]	; (801530c <vPortFree+0xb0>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	4013      	ands	r3, r2
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d019      	beq.n	8015304 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80152d0:	693b      	ldr	r3, [r7, #16]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d115      	bne.n	8015304 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80152d8:	693b      	ldr	r3, [r7, #16]
 80152da:	685a      	ldr	r2, [r3, #4]
 80152dc:	4b0b      	ldr	r3, [pc, #44]	; (801530c <vPortFree+0xb0>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	43db      	mvns	r3, r3
 80152e2:	401a      	ands	r2, r3
 80152e4:	693b      	ldr	r3, [r7, #16]
 80152e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80152e8:	f7fe fb98 	bl	8013a1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	685a      	ldr	r2, [r3, #4]
 80152f0:	4b07      	ldr	r3, [pc, #28]	; (8015310 <vPortFree+0xb4>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	4413      	add	r3, r2
 80152f6:	4a06      	ldr	r2, [pc, #24]	; (8015310 <vPortFree+0xb4>)
 80152f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80152fa:	6938      	ldr	r0, [r7, #16]
 80152fc:	f000 f86c 	bl	80153d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015300:	f7fe fb9a 	bl	8013a38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015304:	bf00      	nop
 8015306:	3718      	adds	r7, #24
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}
 801530c:	20004bd4 	.word	0x20004bd4
 8015310:	20004bcc 	.word	0x20004bcc

08015314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015314:	b480      	push	{r7}
 8015316:	b085      	sub	sp, #20
 8015318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801531a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801531e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015320:	4b27      	ldr	r3, [pc, #156]	; (80153c0 <prvHeapInit+0xac>)
 8015322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	f003 0307 	and.w	r3, r3, #7
 801532a:	2b00      	cmp	r3, #0
 801532c:	d00c      	beq.n	8015348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	3307      	adds	r3, #7
 8015332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	f023 0307 	bic.w	r3, r3, #7
 801533a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801533c:	68ba      	ldr	r2, [r7, #8]
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	1ad3      	subs	r3, r2, r3
 8015342:	4a1f      	ldr	r2, [pc, #124]	; (80153c0 <prvHeapInit+0xac>)
 8015344:	4413      	add	r3, r2
 8015346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801534c:	4a1d      	ldr	r2, [pc, #116]	; (80153c4 <prvHeapInit+0xb0>)
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015352:	4b1c      	ldr	r3, [pc, #112]	; (80153c4 <prvHeapInit+0xb0>)
 8015354:	2200      	movs	r2, #0
 8015356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	68ba      	ldr	r2, [r7, #8]
 801535c:	4413      	add	r3, r2
 801535e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015360:	2208      	movs	r2, #8
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	1a9b      	subs	r3, r3, r2
 8015366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	f023 0307 	bic.w	r3, r3, #7
 801536e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	4a15      	ldr	r2, [pc, #84]	; (80153c8 <prvHeapInit+0xb4>)
 8015374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015376:	4b14      	ldr	r3, [pc, #80]	; (80153c8 <prvHeapInit+0xb4>)
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	2200      	movs	r2, #0
 801537c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801537e:	4b12      	ldr	r3, [pc, #72]	; (80153c8 <prvHeapInit+0xb4>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	2200      	movs	r2, #0
 8015384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	68fa      	ldr	r2, [r7, #12]
 801538e:	1ad2      	subs	r2, r2, r3
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015394:	4b0c      	ldr	r3, [pc, #48]	; (80153c8 <prvHeapInit+0xb4>)
 8015396:	681a      	ldr	r2, [r3, #0]
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801539c:	683b      	ldr	r3, [r7, #0]
 801539e:	685b      	ldr	r3, [r3, #4]
 80153a0:	4a0a      	ldr	r2, [pc, #40]	; (80153cc <prvHeapInit+0xb8>)
 80153a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	685b      	ldr	r3, [r3, #4]
 80153a8:	4a09      	ldr	r2, [pc, #36]	; (80153d0 <prvHeapInit+0xbc>)
 80153aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80153ac:	4b09      	ldr	r3, [pc, #36]	; (80153d4 <prvHeapInit+0xc0>)
 80153ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80153b2:	601a      	str	r2, [r3, #0]
}
 80153b4:	bf00      	nop
 80153b6:	3714      	adds	r7, #20
 80153b8:	46bd      	mov	sp, r7
 80153ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153be:	4770      	bx	lr
 80153c0:	20000fc0 	.word	0x20000fc0
 80153c4:	20004bc0 	.word	0x20004bc0
 80153c8:	20004bc8 	.word	0x20004bc8
 80153cc:	20004bd0 	.word	0x20004bd0
 80153d0:	20004bcc 	.word	0x20004bcc
 80153d4:	20004bd4 	.word	0x20004bd4

080153d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80153d8:	b480      	push	{r7}
 80153da:	b085      	sub	sp, #20
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80153e0:	4b28      	ldr	r3, [pc, #160]	; (8015484 <prvInsertBlockIntoFreeList+0xac>)
 80153e2:	60fb      	str	r3, [r7, #12]
 80153e4:	e002      	b.n	80153ec <prvInsertBlockIntoFreeList+0x14>
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	60fb      	str	r3, [r7, #12]
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	687a      	ldr	r2, [r7, #4]
 80153f2:	429a      	cmp	r2, r3
 80153f4:	d8f7      	bhi.n	80153e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	685b      	ldr	r3, [r3, #4]
 80153fe:	68ba      	ldr	r2, [r7, #8]
 8015400:	4413      	add	r3, r2
 8015402:	687a      	ldr	r2, [r7, #4]
 8015404:	429a      	cmp	r2, r3
 8015406:	d108      	bne.n	801541a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	685a      	ldr	r2, [r3, #4]
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	685b      	ldr	r3, [r3, #4]
 8015410:	441a      	add	r2, r3
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	685b      	ldr	r3, [r3, #4]
 8015422:	68ba      	ldr	r2, [r7, #8]
 8015424:	441a      	add	r2, r3
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	429a      	cmp	r2, r3
 801542c:	d118      	bne.n	8015460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	681a      	ldr	r2, [r3, #0]
 8015432:	4b15      	ldr	r3, [pc, #84]	; (8015488 <prvInsertBlockIntoFreeList+0xb0>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	429a      	cmp	r2, r3
 8015438:	d00d      	beq.n	8015456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	685a      	ldr	r2, [r3, #4]
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	685b      	ldr	r3, [r3, #4]
 8015444:	441a      	add	r2, r3
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	681a      	ldr	r2, [r3, #0]
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	601a      	str	r2, [r3, #0]
 8015454:	e008      	b.n	8015468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015456:	4b0c      	ldr	r3, [pc, #48]	; (8015488 <prvInsertBlockIntoFreeList+0xb0>)
 8015458:	681a      	ldr	r2, [r3, #0]
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	601a      	str	r2, [r3, #0]
 801545e:	e003      	b.n	8015468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	681a      	ldr	r2, [r3, #0]
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015468:	68fa      	ldr	r2, [r7, #12]
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	429a      	cmp	r2, r3
 801546e:	d002      	beq.n	8015476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	687a      	ldr	r2, [r7, #4]
 8015474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015476:	bf00      	nop
 8015478:	3714      	adds	r7, #20
 801547a:	46bd      	mov	sp, r7
 801547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015480:	4770      	bx	lr
 8015482:	bf00      	nop
 8015484:	20004bc0 	.word	0x20004bc0
 8015488:	20004bc8 	.word	0x20004bc8

0801548c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015490:	2200      	movs	r2, #0
 8015492:	4912      	ldr	r1, [pc, #72]	; (80154dc <MX_USB_DEVICE_Init+0x50>)
 8015494:	4812      	ldr	r0, [pc, #72]	; (80154e0 <MX_USB_DEVICE_Init+0x54>)
 8015496:	f7f6 fd8c 	bl	800bfb2 <USBD_Init>
 801549a:	4603      	mov	r3, r0
 801549c:	2b00      	cmp	r3, #0
 801549e:	d001      	beq.n	80154a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80154a0:	f7eb fd4a 	bl	8000f38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80154a4:	490f      	ldr	r1, [pc, #60]	; (80154e4 <MX_USB_DEVICE_Init+0x58>)
 80154a6:	480e      	ldr	r0, [pc, #56]	; (80154e0 <MX_USB_DEVICE_Init+0x54>)
 80154a8:	f7f6 fdb9 	bl	800c01e <USBD_RegisterClass>
 80154ac:	4603      	mov	r3, r0
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d001      	beq.n	80154b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80154b2:	f7eb fd41 	bl	8000f38 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80154b6:	490c      	ldr	r1, [pc, #48]	; (80154e8 <MX_USB_DEVICE_Init+0x5c>)
 80154b8:	4809      	ldr	r0, [pc, #36]	; (80154e0 <MX_USB_DEVICE_Init+0x54>)
 80154ba:	f7f5 fab5 	bl	800aa28 <USBD_MSC_RegisterStorage>
 80154be:	4603      	mov	r3, r0
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d001      	beq.n	80154c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80154c4:	f7eb fd38 	bl	8000f38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80154c8:	4805      	ldr	r0, [pc, #20]	; (80154e0 <MX_USB_DEVICE_Init+0x54>)
 80154ca:	f7f6 fdc9 	bl	800c060 <USBD_Start>
 80154ce:	4603      	mov	r3, r0
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d001      	beq.n	80154d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80154d4:	f7eb fd30 	bl	8000f38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80154d8:	bf00      	nop
 80154da:	bd80      	pop	{r7, pc}
 80154dc:	20000108 	.word	0x20000108
 80154e0:	20009408 	.word	0x20009408
 80154e4:	2000001c 	.word	0x2000001c
 80154e8:	20000168 	.word	0x20000168

080154ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154ec:	b480      	push	{r7}
 80154ee:	b083      	sub	sp, #12
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	4603      	mov	r3, r0
 80154f4:	6039      	str	r1, [r7, #0]
 80154f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	2212      	movs	r2, #18
 80154fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80154fe:	4b03      	ldr	r3, [pc, #12]	; (801550c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015500:	4618      	mov	r0, r3
 8015502:	370c      	adds	r7, #12
 8015504:	46bd      	mov	sp, r7
 8015506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550a:	4770      	bx	lr
 801550c:	20000128 	.word	0x20000128

08015510 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015510:	b480      	push	{r7}
 8015512:	b083      	sub	sp, #12
 8015514:	af00      	add	r7, sp, #0
 8015516:	4603      	mov	r3, r0
 8015518:	6039      	str	r1, [r7, #0]
 801551a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801551c:	683b      	ldr	r3, [r7, #0]
 801551e:	2204      	movs	r2, #4
 8015520:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015522:	4b03      	ldr	r3, [pc, #12]	; (8015530 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015524:	4618      	mov	r0, r3
 8015526:	370c      	adds	r7, #12
 8015528:	46bd      	mov	sp, r7
 801552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552e:	4770      	bx	lr
 8015530:	20000148 	.word	0x20000148

08015534 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b082      	sub	sp, #8
 8015538:	af00      	add	r7, sp, #0
 801553a:	4603      	mov	r3, r0
 801553c:	6039      	str	r1, [r7, #0]
 801553e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015540:	79fb      	ldrb	r3, [r7, #7]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d105      	bne.n	8015552 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015546:	683a      	ldr	r2, [r7, #0]
 8015548:	4907      	ldr	r1, [pc, #28]	; (8015568 <USBD_FS_ProductStrDescriptor+0x34>)
 801554a:	4808      	ldr	r0, [pc, #32]	; (801556c <USBD_FS_ProductStrDescriptor+0x38>)
 801554c:	f7f7 fd7f 	bl	800d04e <USBD_GetString>
 8015550:	e004      	b.n	801555c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015552:	683a      	ldr	r2, [r7, #0]
 8015554:	4904      	ldr	r1, [pc, #16]	; (8015568 <USBD_FS_ProductStrDescriptor+0x34>)
 8015556:	4805      	ldr	r0, [pc, #20]	; (801556c <USBD_FS_ProductStrDescriptor+0x38>)
 8015558:	f7f7 fd79 	bl	800d04e <USBD_GetString>
  }
  return USBD_StrDesc;
 801555c:	4b02      	ldr	r3, [pc, #8]	; (8015568 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801555e:	4618      	mov	r0, r3
 8015560:	3708      	adds	r7, #8
 8015562:	46bd      	mov	sp, r7
 8015564:	bd80      	pop	{r7, pc}
 8015566:	bf00      	nop
 8015568:	200096d8 	.word	0x200096d8
 801556c:	080161c4 	.word	0x080161c4

08015570 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b082      	sub	sp, #8
 8015574:	af00      	add	r7, sp, #0
 8015576:	4603      	mov	r3, r0
 8015578:	6039      	str	r1, [r7, #0]
 801557a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801557c:	683a      	ldr	r2, [r7, #0]
 801557e:	4904      	ldr	r1, [pc, #16]	; (8015590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015580:	4804      	ldr	r0, [pc, #16]	; (8015594 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015582:	f7f7 fd64 	bl	800d04e <USBD_GetString>
  return USBD_StrDesc;
 8015586:	4b02      	ldr	r3, [pc, #8]	; (8015590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015588:	4618      	mov	r0, r3
 801558a:	3708      	adds	r7, #8
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}
 8015590:	200096d8 	.word	0x200096d8
 8015594:	080161d8 	.word	0x080161d8

08015598 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b082      	sub	sp, #8
 801559c:	af00      	add	r7, sp, #0
 801559e:	4603      	mov	r3, r0
 80155a0:	6039      	str	r1, [r7, #0]
 80155a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80155a4:	683b      	ldr	r3, [r7, #0]
 80155a6:	221a      	movs	r2, #26
 80155a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80155aa:	f000 f855 	bl	8015658 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80155ae:	4b02      	ldr	r3, [pc, #8]	; (80155b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80155b0:	4618      	mov	r0, r3
 80155b2:	3708      	adds	r7, #8
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}
 80155b8:	2000014c 	.word	0x2000014c

080155bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b082      	sub	sp, #8
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	4603      	mov	r3, r0
 80155c4:	6039      	str	r1, [r7, #0]
 80155c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80155c8:	79fb      	ldrb	r3, [r7, #7]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d105      	bne.n	80155da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80155ce:	683a      	ldr	r2, [r7, #0]
 80155d0:	4907      	ldr	r1, [pc, #28]	; (80155f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80155d2:	4808      	ldr	r0, [pc, #32]	; (80155f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80155d4:	f7f7 fd3b 	bl	800d04e <USBD_GetString>
 80155d8:	e004      	b.n	80155e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80155da:	683a      	ldr	r2, [r7, #0]
 80155dc:	4904      	ldr	r1, [pc, #16]	; (80155f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80155de:	4805      	ldr	r0, [pc, #20]	; (80155f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80155e0:	f7f7 fd35 	bl	800d04e <USBD_GetString>
  }
  return USBD_StrDesc;
 80155e4:	4b02      	ldr	r3, [pc, #8]	; (80155f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3708      	adds	r7, #8
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd80      	pop	{r7, pc}
 80155ee:	bf00      	nop
 80155f0:	200096d8 	.word	0x200096d8
 80155f4:	080161ec 	.word	0x080161ec

080155f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	4603      	mov	r3, r0
 8015600:	6039      	str	r1, [r7, #0]
 8015602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015604:	79fb      	ldrb	r3, [r7, #7]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d105      	bne.n	8015616 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801560a:	683a      	ldr	r2, [r7, #0]
 801560c:	4907      	ldr	r1, [pc, #28]	; (801562c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801560e:	4808      	ldr	r0, [pc, #32]	; (8015630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015610:	f7f7 fd1d 	bl	800d04e <USBD_GetString>
 8015614:	e004      	b.n	8015620 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015616:	683a      	ldr	r2, [r7, #0]
 8015618:	4904      	ldr	r1, [pc, #16]	; (801562c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801561a:	4805      	ldr	r0, [pc, #20]	; (8015630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801561c:	f7f7 fd17 	bl	800d04e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015620:	4b02      	ldr	r3, [pc, #8]	; (801562c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015622:	4618      	mov	r0, r3
 8015624:	3708      	adds	r7, #8
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}
 801562a:	bf00      	nop
 801562c:	200096d8 	.word	0x200096d8
 8015630:	080161f8 	.word	0x080161f8

08015634 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015634:	b480      	push	{r7}
 8015636:	b083      	sub	sp, #12
 8015638:	af00      	add	r7, sp, #0
 801563a:	4603      	mov	r3, r0
 801563c:	6039      	str	r1, [r7, #0]
 801563e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	220c      	movs	r2, #12
 8015644:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8015646:	4b03      	ldr	r3, [pc, #12]	; (8015654 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8015648:	4618      	mov	r0, r3
 801564a:	370c      	adds	r7, #12
 801564c:	46bd      	mov	sp, r7
 801564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015652:	4770      	bx	lr
 8015654:	2000013c 	.word	0x2000013c

08015658 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b084      	sub	sp, #16
 801565c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801565e:	4b0f      	ldr	r3, [pc, #60]	; (801569c <Get_SerialNum+0x44>)
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015664:	4b0e      	ldr	r3, [pc, #56]	; (80156a0 <Get_SerialNum+0x48>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801566a:	4b0e      	ldr	r3, [pc, #56]	; (80156a4 <Get_SerialNum+0x4c>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015670:	68fa      	ldr	r2, [r7, #12]
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	4413      	add	r3, r2
 8015676:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d009      	beq.n	8015692 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801567e:	2208      	movs	r2, #8
 8015680:	4909      	ldr	r1, [pc, #36]	; (80156a8 <Get_SerialNum+0x50>)
 8015682:	68f8      	ldr	r0, [r7, #12]
 8015684:	f000 f814 	bl	80156b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015688:	2204      	movs	r2, #4
 801568a:	4908      	ldr	r1, [pc, #32]	; (80156ac <Get_SerialNum+0x54>)
 801568c:	68b8      	ldr	r0, [r7, #8]
 801568e:	f000 f80f 	bl	80156b0 <IntToUnicode>
  }
}
 8015692:	bf00      	nop
 8015694:	3710      	adds	r7, #16
 8015696:	46bd      	mov	sp, r7
 8015698:	bd80      	pop	{r7, pc}
 801569a:	bf00      	nop
 801569c:	1ff0f420 	.word	0x1ff0f420
 80156a0:	1ff0f424 	.word	0x1ff0f424
 80156a4:	1ff0f428 	.word	0x1ff0f428
 80156a8:	2000014e 	.word	0x2000014e
 80156ac:	2000015e 	.word	0x2000015e

080156b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80156b0:	b480      	push	{r7}
 80156b2:	b087      	sub	sp, #28
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	60f8      	str	r0, [r7, #12]
 80156b8:	60b9      	str	r1, [r7, #8]
 80156ba:	4613      	mov	r3, r2
 80156bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80156be:	2300      	movs	r3, #0
 80156c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80156c2:	2300      	movs	r3, #0
 80156c4:	75fb      	strb	r3, [r7, #23]
 80156c6:	e027      	b.n	8015718 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	0f1b      	lsrs	r3, r3, #28
 80156cc:	2b09      	cmp	r3, #9
 80156ce:	d80b      	bhi.n	80156e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	0f1b      	lsrs	r3, r3, #28
 80156d4:	b2da      	uxtb	r2, r3
 80156d6:	7dfb      	ldrb	r3, [r7, #23]
 80156d8:	005b      	lsls	r3, r3, #1
 80156da:	4619      	mov	r1, r3
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	440b      	add	r3, r1
 80156e0:	3230      	adds	r2, #48	; 0x30
 80156e2:	b2d2      	uxtb	r2, r2
 80156e4:	701a      	strb	r2, [r3, #0]
 80156e6:	e00a      	b.n	80156fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	0f1b      	lsrs	r3, r3, #28
 80156ec:	b2da      	uxtb	r2, r3
 80156ee:	7dfb      	ldrb	r3, [r7, #23]
 80156f0:	005b      	lsls	r3, r3, #1
 80156f2:	4619      	mov	r1, r3
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	440b      	add	r3, r1
 80156f8:	3237      	adds	r2, #55	; 0x37
 80156fa:	b2d2      	uxtb	r2, r2
 80156fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	011b      	lsls	r3, r3, #4
 8015702:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015704:	7dfb      	ldrb	r3, [r7, #23]
 8015706:	005b      	lsls	r3, r3, #1
 8015708:	3301      	adds	r3, #1
 801570a:	68ba      	ldr	r2, [r7, #8]
 801570c:	4413      	add	r3, r2
 801570e:	2200      	movs	r2, #0
 8015710:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015712:	7dfb      	ldrb	r3, [r7, #23]
 8015714:	3301      	adds	r3, #1
 8015716:	75fb      	strb	r3, [r7, #23]
 8015718:	7dfa      	ldrb	r2, [r7, #23]
 801571a:	79fb      	ldrb	r3, [r7, #7]
 801571c:	429a      	cmp	r2, r3
 801571e:	d3d3      	bcc.n	80156c8 <IntToUnicode+0x18>
  }
}
 8015720:	bf00      	nop
 8015722:	371c      	adds	r7, #28
 8015724:	46bd      	mov	sp, r7
 8015726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572a:	4770      	bx	lr

0801572c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801572c:	b480      	push	{r7}
 801572e:	b083      	sub	sp, #12
 8015730:	af00      	add	r7, sp, #0
 8015732:	4603      	mov	r3, r0
 8015734:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8015736:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8015738:	4618      	mov	r0, r3
 801573a:	370c      	adds	r7, #12
 801573c:	46bd      	mov	sp, r7
 801573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015742:	4770      	bx	lr

08015744 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b084      	sub	sp, #16
 8015748:	af00      	add	r7, sp, #0
 801574a:	4603      	mov	r3, r0
 801574c:	60b9      	str	r1, [r7, #8]
 801574e:	607a      	str	r2, [r7, #4]
 8015750:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  if(HAL_SD_GetCardInfo(&hsd1,&SDCardInfo)==HAL_OK){
 8015752:	490b      	ldr	r1, [pc, #44]	; (8015780 <STORAGE_GetCapacity_FS+0x3c>)
 8015754:	480b      	ldr	r0, [pc, #44]	; (8015784 <STORAGE_GetCapacity_FS+0x40>)
 8015756:	f7f1 f881 	bl	800685c <HAL_SD_GetCardInfo>
 801575a:	4603      	mov	r3, r0
 801575c:	2b00      	cmp	r3, #0
 801575e:	d10a      	bne.n	8015776 <STORAGE_GetCapacity_FS+0x32>
  *block_num  = SDCardInfo.LogBlockNbr;
 8015760:	4b07      	ldr	r3, [pc, #28]	; (8015780 <STORAGE_GetCapacity_FS+0x3c>)
 8015762:	699a      	ldr	r2, [r3, #24]
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	601a      	str	r2, [r3, #0]
  *block_size = SDCardInfo.LogBlockSize;
 8015768:	4b05      	ldr	r3, [pc, #20]	; (8015780 <STORAGE_GetCapacity_FS+0x3c>)
 801576a:	69db      	ldr	r3, [r3, #28]
 801576c:	b29a      	uxth	r2, r3
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8015772:	2300      	movs	r3, #0
 8015774:	e7ff      	b.n	8015776 <STORAGE_GetCapacity_FS+0x32>
  }
  /* USER CODE END 3 */
}
 8015776:	4618      	mov	r0, r3
 8015778:	3710      	adds	r7, #16
 801577a:	46bd      	mov	sp, r7
 801577c:	bd80      	pop	{r7, pc}
 801577e:	bf00      	nop
 8015780:	20004d10 	.word	0x20004d10
 8015784:	20004c8c 	.word	0x20004c8c

08015788 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8015788:	b480      	push	{r7}
 801578a:	b083      	sub	sp, #12
 801578c:	af00      	add	r7, sp, #0
 801578e:	4603      	mov	r3, r0
 8015790:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015792:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015794:	4618      	mov	r0, r3
 8015796:	370c      	adds	r7, #12
 8015798:	46bd      	mov	sp, r7
 801579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579e:	4770      	bx	lr

080157a0 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80157a0:	b480      	push	{r7}
 80157a2:	b083      	sub	sp, #12
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	4603      	mov	r3, r0
 80157a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80157aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80157ac:	4618      	mov	r0, r3
 80157ae:	370c      	adds	r7, #12
 80157b0:	46bd      	mov	sp, r7
 80157b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b6:	4770      	bx	lr

080157b8 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b086      	sub	sp, #24
 80157bc:	af02      	add	r7, sp, #8
 80157be:	60b9      	str	r1, [r7, #8]
 80157c0:	607a      	str	r2, [r7, #4]
 80157c2:	461a      	mov	r2, r3
 80157c4:	4603      	mov	r3, r0
 80157c6:	73fb      	strb	r3, [r7, #15]
 80157c8:	4613      	mov	r3, r2
 80157ca:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
 if(HAL_SD_ReadBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 80157cc:	89ba      	ldrh	r2, [r7, #12]
 80157ce:	230a      	movs	r3, #10
 80157d0:	9300      	str	r3, [sp, #0]
 80157d2:	4613      	mov	r3, r2
 80157d4:	687a      	ldr	r2, [r7, #4]
 80157d6:	68b9      	ldr	r1, [r7, #8]
 80157d8:	4805      	ldr	r0, [pc, #20]	; (80157f0 <STORAGE_Read_FS+0x38>)
 80157da:	f7ef ffa9 	bl	8005730 <HAL_SD_ReadBlocks>
 80157de:	4603      	mov	r3, r0
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d101      	bne.n	80157e8 <STORAGE_Read_FS+0x30>

  return (USBD_OK);
 80157e4:	2300      	movs	r3, #0
 80157e6:	e7ff      	b.n	80157e8 <STORAGE_Read_FS+0x30>
 }
  /* USER CODE END 6 */
}
 80157e8:	4618      	mov	r0, r3
 80157ea:	3710      	adds	r7, #16
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}
 80157f0:	20004c8c 	.word	0x20004c8c

080157f4 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b086      	sub	sp, #24
 80157f8:	af02      	add	r7, sp, #8
 80157fa:	60b9      	str	r1, [r7, #8]
 80157fc:	607a      	str	r2, [r7, #4]
 80157fe:	461a      	mov	r2, r3
 8015800:	4603      	mov	r3, r0
 8015802:	73fb      	strb	r3, [r7, #15]
 8015804:	4613      	mov	r3, r2
 8015806:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(HAL_SD_WriteBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 8015808:	89ba      	ldrh	r2, [r7, #12]
 801580a:	230a      	movs	r3, #10
 801580c:	9300      	str	r3, [sp, #0]
 801580e:	4613      	mov	r3, r2
 8015810:	687a      	ldr	r2, [r7, #4]
 8015812:	68b9      	ldr	r1, [r7, #8]
 8015814:	4805      	ldr	r0, [pc, #20]	; (801582c <STORAGE_Write_FS+0x38>)
 8015816:	f7f0 f983 	bl	8005b20 <HAL_SD_WriteBlocks>
 801581a:	4603      	mov	r3, r0
 801581c:	2b00      	cmp	r3, #0
 801581e:	d101      	bne.n	8015824 <STORAGE_Write_FS+0x30>

	  return (USBD_OK);
 8015820:	2300      	movs	r3, #0
 8015822:	e7ff      	b.n	8015824 <STORAGE_Write_FS+0x30>
	 }
  /* USER CODE END 7 */
}
 8015824:	4618      	mov	r0, r3
 8015826:	3710      	adds	r7, #16
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}
 801582c:	20004c8c 	.word	0x20004c8c

08015830 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8015830:	b480      	push	{r7}
 8015832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8015834:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8015836:	4618      	mov	r0, r3
 8015838:	46bd      	mov	sp, r7
 801583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583e:	4770      	bx	lr

08015840 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b08a      	sub	sp, #40	; 0x28
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015848:	f107 0314 	add.w	r3, r7, #20
 801584c:	2200      	movs	r2, #0
 801584e:	601a      	str	r2, [r3, #0]
 8015850:	605a      	str	r2, [r3, #4]
 8015852:	609a      	str	r2, [r3, #8]
 8015854:	60da      	str	r2, [r3, #12]
 8015856:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015860:	d13c      	bne.n	80158dc <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015862:	4b20      	ldr	r3, [pc, #128]	; (80158e4 <HAL_PCD_MspInit+0xa4>)
 8015864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015866:	4a1f      	ldr	r2, [pc, #124]	; (80158e4 <HAL_PCD_MspInit+0xa4>)
 8015868:	f043 0301 	orr.w	r3, r3, #1
 801586c:	6313      	str	r3, [r2, #48]	; 0x30
 801586e:	4b1d      	ldr	r3, [pc, #116]	; (80158e4 <HAL_PCD_MspInit+0xa4>)
 8015870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015872:	f003 0301 	and.w	r3, r3, #1
 8015876:	613b      	str	r3, [r7, #16]
 8015878:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 801587a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801587e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015880:	2302      	movs	r3, #2
 8015882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015884:	2300      	movs	r3, #0
 8015886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015888:	2303      	movs	r3, #3
 801588a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801588c:	230a      	movs	r3, #10
 801588e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015890:	f107 0314 	add.w	r3, r7, #20
 8015894:	4619      	mov	r1, r3
 8015896:	4814      	ldr	r0, [pc, #80]	; (80158e8 <HAL_PCD_MspInit+0xa8>)
 8015898:	f7ed f974 	bl	8002b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801589c:	4b11      	ldr	r3, [pc, #68]	; (80158e4 <HAL_PCD_MspInit+0xa4>)
 801589e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158a0:	4a10      	ldr	r2, [pc, #64]	; (80158e4 <HAL_PCD_MspInit+0xa4>)
 80158a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158a6:	6353      	str	r3, [r2, #52]	; 0x34
 80158a8:	4b0e      	ldr	r3, [pc, #56]	; (80158e4 <HAL_PCD_MspInit+0xa4>)
 80158aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80158b0:	60fb      	str	r3, [r7, #12]
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	4b0b      	ldr	r3, [pc, #44]	; (80158e4 <HAL_PCD_MspInit+0xa4>)
 80158b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158b8:	4a0a      	ldr	r2, [pc, #40]	; (80158e4 <HAL_PCD_MspInit+0xa4>)
 80158ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80158be:	6453      	str	r3, [r2, #68]	; 0x44
 80158c0:	4b08      	ldr	r3, [pc, #32]	; (80158e4 <HAL_PCD_MspInit+0xa4>)
 80158c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80158c8:	60bb      	str	r3, [r7, #8]
 80158ca:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 9, 0);
 80158cc:	2200      	movs	r2, #0
 80158ce:	2109      	movs	r1, #9
 80158d0:	2043      	movs	r0, #67	; 0x43
 80158d2:	f7ec fd89 	bl	80023e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80158d6:	2043      	movs	r0, #67	; 0x43
 80158d8:	f7ec fda2 	bl	8002420 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80158dc:	bf00      	nop
 80158de:	3728      	adds	r7, #40	; 0x28
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}
 80158e4:	40023800 	.word	0x40023800
 80158e8:	40020000 	.word	0x40020000

080158ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b082      	sub	sp, #8
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015900:	4619      	mov	r1, r3
 8015902:	4610      	mov	r0, r2
 8015904:	f7f6 fbf7 	bl	800c0f6 <USBD_LL_SetupStage>
}
 8015908:	bf00      	nop
 801590a:	3708      	adds	r7, #8
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}

08015910 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b082      	sub	sp, #8
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
 8015918:	460b      	mov	r3, r1
 801591a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8015922:	78fa      	ldrb	r2, [r7, #3]
 8015924:	6879      	ldr	r1, [r7, #4]
 8015926:	4613      	mov	r3, r2
 8015928:	00db      	lsls	r3, r3, #3
 801592a:	1a9b      	subs	r3, r3, r2
 801592c:	009b      	lsls	r3, r3, #2
 801592e:	440b      	add	r3, r1
 8015930:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015934:	681a      	ldr	r2, [r3, #0]
 8015936:	78fb      	ldrb	r3, [r7, #3]
 8015938:	4619      	mov	r1, r3
 801593a:	f7f6 fc2f 	bl	800c19c <USBD_LL_DataOutStage>
}
 801593e:	bf00      	nop
 8015940:	3708      	adds	r7, #8
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}

08015946 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015946:	b580      	push	{r7, lr}
 8015948:	b082      	sub	sp, #8
 801594a:	af00      	add	r7, sp, #0
 801594c:	6078      	str	r0, [r7, #4]
 801594e:	460b      	mov	r3, r1
 8015950:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8015958:	78fa      	ldrb	r2, [r7, #3]
 801595a:	6879      	ldr	r1, [r7, #4]
 801595c:	4613      	mov	r3, r2
 801595e:	00db      	lsls	r3, r3, #3
 8015960:	1a9b      	subs	r3, r3, r2
 8015962:	009b      	lsls	r3, r3, #2
 8015964:	440b      	add	r3, r1
 8015966:	3348      	adds	r3, #72	; 0x48
 8015968:	681a      	ldr	r2, [r3, #0]
 801596a:	78fb      	ldrb	r3, [r7, #3]
 801596c:	4619      	mov	r1, r3
 801596e:	f7f6 fc78 	bl	800c262 <USBD_LL_DataInStage>
}
 8015972:	bf00      	nop
 8015974:	3708      	adds	r7, #8
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}

0801597a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801597a:	b580      	push	{r7, lr}
 801597c:	b082      	sub	sp, #8
 801597e:	af00      	add	r7, sp, #0
 8015980:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015988:	4618      	mov	r0, r3
 801598a:	f7f6 fd7c 	bl	800c486 <USBD_LL_SOF>
}
 801598e:	bf00      	nop
 8015990:	3708      	adds	r7, #8
 8015992:	46bd      	mov	sp, r7
 8015994:	bd80      	pop	{r7, pc}

08015996 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8015996:	b580      	push	{r7, lr}
 8015998:	b084      	sub	sp, #16
 801599a:	af00      	add	r7, sp, #0
 801599c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801599e:	2301      	movs	r3, #1
 80159a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d102      	bne.n	80159b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80159aa:	2300      	movs	r3, #0
 80159ac:	73fb      	strb	r3, [r7, #15]
 80159ae:	e008      	b.n	80159c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	68db      	ldr	r3, [r3, #12]
 80159b4:	2b02      	cmp	r3, #2
 80159b6:	d102      	bne.n	80159be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80159b8:	2301      	movs	r3, #1
 80159ba:	73fb      	strb	r3, [r7, #15]
 80159bc:	e001      	b.n	80159c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80159be:	f7eb fabb 	bl	8000f38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80159c8:	7bfa      	ldrb	r2, [r7, #15]
 80159ca:	4611      	mov	r1, r2
 80159cc:	4618      	mov	r0, r3
 80159ce:	f7f6 fd1f 	bl	800c410 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80159d8:	4618      	mov	r0, r3
 80159da:	f7f6 fcd8 	bl	800c38e <USBD_LL_Reset>
}
 80159de:	bf00      	nop
 80159e0:	3710      	adds	r7, #16
 80159e2:	46bd      	mov	sp, r7
 80159e4:	bd80      	pop	{r7, pc}
	...

080159e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b082      	sub	sp, #8
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7f6 fd1a 	bl	800c430 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	687a      	ldr	r2, [r7, #4]
 8015a08:	6812      	ldr	r2, [r2, #0]
 8015a0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015a0e:	f043 0301 	orr.w	r3, r3, #1
 8015a12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6a1b      	ldr	r3, [r3, #32]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d005      	beq.n	8015a28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015a1c:	4b04      	ldr	r3, [pc, #16]	; (8015a30 <HAL_PCD_SuspendCallback+0x48>)
 8015a1e:	691b      	ldr	r3, [r3, #16]
 8015a20:	4a03      	ldr	r2, [pc, #12]	; (8015a30 <HAL_PCD_SuspendCallback+0x48>)
 8015a22:	f043 0306 	orr.w	r3, r3, #6
 8015a26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015a28:	bf00      	nop
 8015a2a:	3708      	adds	r7, #8
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}
 8015a30:	e000ed00 	.word	0xe000ed00

08015a34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b082      	sub	sp, #8
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7f6 fd09 	bl	800c45a <USBD_LL_Resume>
}
 8015a48:	bf00      	nop
 8015a4a:	3708      	adds	r7, #8
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}

08015a50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b082      	sub	sp, #8
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
 8015a58:	460b      	mov	r3, r1
 8015a5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015a62:	78fa      	ldrb	r2, [r7, #3]
 8015a64:	4611      	mov	r1, r2
 8015a66:	4618      	mov	r0, r3
 8015a68:	f7f6 fd34 	bl	800c4d4 <USBD_LL_IsoOUTIncomplete>
}
 8015a6c:	bf00      	nop
 8015a6e:	3708      	adds	r7, #8
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}

08015a74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b082      	sub	sp, #8
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
 8015a7c:	460b      	mov	r3, r1
 8015a7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015a86:	78fa      	ldrb	r2, [r7, #3]
 8015a88:	4611      	mov	r1, r2
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f7f6 fd15 	bl	800c4ba <USBD_LL_IsoINIncomplete>
}
 8015a90:	bf00      	nop
 8015a92:	3708      	adds	r7, #8
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd80      	pop	{r7, pc}

08015a98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b082      	sub	sp, #8
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f7f6 fd21 	bl	800c4ee <USBD_LL_DevConnected>
}
 8015aac:	bf00      	nop
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}

08015ab4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7f6 fd1e 	bl	800c504 <USBD_LL_DevDisconnected>
}
 8015ac8:	bf00      	nop
 8015aca:	3708      	adds	r7, #8
 8015acc:	46bd      	mov	sp, r7
 8015ace:	bd80      	pop	{r7, pc}

08015ad0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b082      	sub	sp, #8
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	781b      	ldrb	r3, [r3, #0]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d13c      	bne.n	8015b5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015ae0:	4a20      	ldr	r2, [pc, #128]	; (8015b64 <USBD_LL_Init+0x94>)
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	4a1e      	ldr	r2, [pc, #120]	; (8015b64 <USBD_LL_Init+0x94>)
 8015aec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015af0:	4b1c      	ldr	r3, [pc, #112]	; (8015b64 <USBD_LL_Init+0x94>)
 8015af2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015af6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8015af8:	4b1a      	ldr	r3, [pc, #104]	; (8015b64 <USBD_LL_Init+0x94>)
 8015afa:	2206      	movs	r2, #6
 8015afc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015afe:	4b19      	ldr	r3, [pc, #100]	; (8015b64 <USBD_LL_Init+0x94>)
 8015b00:	2202      	movs	r2, #2
 8015b02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015b04:	4b17      	ldr	r3, [pc, #92]	; (8015b64 <USBD_LL_Init+0x94>)
 8015b06:	2200      	movs	r2, #0
 8015b08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015b0a:	4b16      	ldr	r3, [pc, #88]	; (8015b64 <USBD_LL_Init+0x94>)
 8015b0c:	2202      	movs	r2, #2
 8015b0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015b10:	4b14      	ldr	r3, [pc, #80]	; (8015b64 <USBD_LL_Init+0x94>)
 8015b12:	2200      	movs	r2, #0
 8015b14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015b16:	4b13      	ldr	r3, [pc, #76]	; (8015b64 <USBD_LL_Init+0x94>)
 8015b18:	2200      	movs	r2, #0
 8015b1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015b1c:	4b11      	ldr	r3, [pc, #68]	; (8015b64 <USBD_LL_Init+0x94>)
 8015b1e:	2200      	movs	r2, #0
 8015b20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015b22:	4b10      	ldr	r3, [pc, #64]	; (8015b64 <USBD_LL_Init+0x94>)
 8015b24:	2200      	movs	r2, #0
 8015b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015b28:	4b0e      	ldr	r3, [pc, #56]	; (8015b64 <USBD_LL_Init+0x94>)
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015b2e:	480d      	ldr	r0, [pc, #52]	; (8015b64 <USBD_LL_Init+0x94>)
 8015b30:	f7ed fa1d 	bl	8002f6e <HAL_PCD_Init>
 8015b34:	4603      	mov	r3, r0
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d001      	beq.n	8015b3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015b3a:	f7eb f9fd 	bl	8000f38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015b3e:	2180      	movs	r1, #128	; 0x80
 8015b40:	4808      	ldr	r0, [pc, #32]	; (8015b64 <USBD_LL_Init+0x94>)
 8015b42:	f7ee fbca 	bl	80042da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015b46:	2240      	movs	r2, #64	; 0x40
 8015b48:	2100      	movs	r1, #0
 8015b4a:	4806      	ldr	r0, [pc, #24]	; (8015b64 <USBD_LL_Init+0x94>)
 8015b4c:	f7ee fb7e 	bl	800424c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015b50:	2280      	movs	r2, #128	; 0x80
 8015b52:	2101      	movs	r1, #1
 8015b54:	4803      	ldr	r0, [pc, #12]	; (8015b64 <USBD_LL_Init+0x94>)
 8015b56:	f7ee fb79 	bl	800424c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015b5a:	2300      	movs	r3, #0
}
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	3708      	adds	r7, #8
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}
 8015b64:	200098d8 	.word	0x200098d8

08015b68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b084      	sub	sp, #16
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b70:	2300      	movs	r3, #0
 8015b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b74:	2300      	movs	r3, #0
 8015b76:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7ed fb19 	bl	80031b6 <HAL_PCD_Start>
 8015b84:	4603      	mov	r3, r0
 8015b86:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8015b88:	7bfb      	ldrb	r3, [r7, #15]
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	f000 f99e 	bl	8015ecc <USBD_Get_USB_Status>
 8015b90:	4603      	mov	r3, r0
 8015b92:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3710      	adds	r7, #16
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}

08015b9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015b9e:	b580      	push	{r7, lr}
 8015ba0:	b084      	sub	sp, #16
 8015ba2:	af00      	add	r7, sp, #0
 8015ba4:	6078      	str	r0, [r7, #4]
 8015ba6:	4608      	mov	r0, r1
 8015ba8:	4611      	mov	r1, r2
 8015baa:	461a      	mov	r2, r3
 8015bac:	4603      	mov	r3, r0
 8015bae:	70fb      	strb	r3, [r7, #3]
 8015bb0:	460b      	mov	r3, r1
 8015bb2:	70bb      	strb	r3, [r7, #2]
 8015bb4:	4613      	mov	r3, r2
 8015bb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015bc6:	78bb      	ldrb	r3, [r7, #2]
 8015bc8:	883a      	ldrh	r2, [r7, #0]
 8015bca:	78f9      	ldrb	r1, [r7, #3]
 8015bcc:	f7ed ff19 	bl	8003a02 <HAL_PCD_EP_Open>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bd4:	7bfb      	ldrb	r3, [r7, #15]
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f000 f978 	bl	8015ecc <USBD_Get_USB_Status>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	3710      	adds	r7, #16
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}

08015bea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bea:	b580      	push	{r7, lr}
 8015bec:	b084      	sub	sp, #16
 8015bee:	af00      	add	r7, sp, #0
 8015bf0:	6078      	str	r0, [r7, #4]
 8015bf2:	460b      	mov	r3, r1
 8015bf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c04:	78fa      	ldrb	r2, [r7, #3]
 8015c06:	4611      	mov	r1, r2
 8015c08:	4618      	mov	r0, r3
 8015c0a:	f7ed ff62 	bl	8003ad2 <HAL_PCD_EP_Close>
 8015c0e:	4603      	mov	r3, r0
 8015c10:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8015c12:	7bfb      	ldrb	r3, [r7, #15]
 8015c14:	4618      	mov	r0, r3
 8015c16:	f000 f959 	bl	8015ecc <USBD_Get_USB_Status>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8015c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c20:	4618      	mov	r0, r3
 8015c22:	3710      	adds	r7, #16
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bd80      	pop	{r7, pc}

08015c28 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b084      	sub	sp, #16
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
 8015c30:	460b      	mov	r3, r1
 8015c32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c34:	2300      	movs	r3, #0
 8015c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c38:	2300      	movs	r3, #0
 8015c3a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c42:	78fa      	ldrb	r2, [r7, #3]
 8015c44:	4611      	mov	r1, r2
 8015c46:	4618      	mov	r0, r3
 8015c48:	f7ee f8f4 	bl	8003e34 <HAL_PCD_EP_Flush>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015c50:	7bfb      	ldrb	r3, [r7, #15]
 8015c52:	4618      	mov	r0, r3
 8015c54:	f000 f93a 	bl	8015ecc <USBD_Get_USB_Status>
 8015c58:	4603      	mov	r3, r0
 8015c5a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c5e:	4618      	mov	r0, r3
 8015c60:	3710      	adds	r7, #16
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}

08015c66 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c66:	b580      	push	{r7, lr}
 8015c68:	b084      	sub	sp, #16
 8015c6a:	af00      	add	r7, sp, #0
 8015c6c:	6078      	str	r0, [r7, #4]
 8015c6e:	460b      	mov	r3, r1
 8015c70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c72:	2300      	movs	r3, #0
 8015c74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c76:	2300      	movs	r3, #0
 8015c78:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c80:	78fa      	ldrb	r2, [r7, #3]
 8015c82:	4611      	mov	r1, r2
 8015c84:	4618      	mov	r0, r3
 8015c86:	f7ee f81b 	bl	8003cc0 <HAL_PCD_EP_SetStall>
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c8e:	7bfb      	ldrb	r3, [r7, #15]
 8015c90:	4618      	mov	r0, r3
 8015c92:	f000 f91b 	bl	8015ecc <USBD_Get_USB_Status>
 8015c96:	4603      	mov	r3, r0
 8015c98:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015c9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	3710      	adds	r7, #16
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd80      	pop	{r7, pc}

08015ca4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b084      	sub	sp, #16
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
 8015cac:	460b      	mov	r3, r1
 8015cae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015cbe:	78fa      	ldrb	r2, [r7, #3]
 8015cc0:	4611      	mov	r1, r2
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7ee f860 	bl	8003d88 <HAL_PCD_EP_ClrStall>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8015ccc:	7bfb      	ldrb	r3, [r7, #15]
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f000 f8fc 	bl	8015ecc <USBD_Get_USB_Status>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8015cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3710      	adds	r7, #16
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}

08015ce2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ce2:	b480      	push	{r7}
 8015ce4:	b085      	sub	sp, #20
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	6078      	str	r0, [r7, #4]
 8015cea:	460b      	mov	r3, r1
 8015cec:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015cf4:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8015cf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	da0b      	bge.n	8015d16 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8015cfe:	78fb      	ldrb	r3, [r7, #3]
 8015d00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d04:	68f9      	ldr	r1, [r7, #12]
 8015d06:	4613      	mov	r3, r2
 8015d08:	00db      	lsls	r3, r3, #3
 8015d0a:	1a9b      	subs	r3, r3, r2
 8015d0c:	009b      	lsls	r3, r3, #2
 8015d0e:	440b      	add	r3, r1
 8015d10:	333e      	adds	r3, #62	; 0x3e
 8015d12:	781b      	ldrb	r3, [r3, #0]
 8015d14:	e00b      	b.n	8015d2e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8015d16:	78fb      	ldrb	r3, [r7, #3]
 8015d18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d1c:	68f9      	ldr	r1, [r7, #12]
 8015d1e:	4613      	mov	r3, r2
 8015d20:	00db      	lsls	r3, r3, #3
 8015d22:	1a9b      	subs	r3, r3, r2
 8015d24:	009b      	lsls	r3, r3, #2
 8015d26:	440b      	add	r3, r1
 8015d28:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015d2c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3714      	adds	r7, #20
 8015d32:	46bd      	mov	sp, r7
 8015d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d38:	4770      	bx	lr

08015d3a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015d3a:	b580      	push	{r7, lr}
 8015d3c:	b084      	sub	sp, #16
 8015d3e:	af00      	add	r7, sp, #0
 8015d40:	6078      	str	r0, [r7, #4]
 8015d42:	460b      	mov	r3, r1
 8015d44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d46:	2300      	movs	r3, #0
 8015d48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d54:	78fa      	ldrb	r2, [r7, #3]
 8015d56:	4611      	mov	r1, r2
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7ed fe2d 	bl	80039b8 <HAL_PCD_SetAddress>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d62:	7bfb      	ldrb	r3, [r7, #15]
 8015d64:	4618      	mov	r0, r3
 8015d66:	f000 f8b1 	bl	8015ecc <USBD_Get_USB_Status>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3710      	adds	r7, #16
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}

08015d78 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b086      	sub	sp, #24
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	60f8      	str	r0, [r7, #12]
 8015d80:	607a      	str	r2, [r7, #4]
 8015d82:	603b      	str	r3, [r7, #0]
 8015d84:	460b      	mov	r3, r1
 8015d86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d88:	2300      	movs	r3, #0
 8015d8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015d96:	7af9      	ldrb	r1, [r7, #11]
 8015d98:	683b      	ldr	r3, [r7, #0]
 8015d9a:	687a      	ldr	r2, [r7, #4]
 8015d9c:	f7ed ff46 	bl	8003c2c <HAL_PCD_EP_Transmit>
 8015da0:	4603      	mov	r3, r0
 8015da2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8015da4:	7dfb      	ldrb	r3, [r7, #23]
 8015da6:	4618      	mov	r0, r3
 8015da8:	f000 f890 	bl	8015ecc <USBD_Get_USB_Status>
 8015dac:	4603      	mov	r3, r0
 8015dae:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8015db0:	7dbb      	ldrb	r3, [r7, #22]
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	3718      	adds	r7, #24
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}

08015dba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015dba:	b580      	push	{r7, lr}
 8015dbc:	b086      	sub	sp, #24
 8015dbe:	af00      	add	r7, sp, #0
 8015dc0:	60f8      	str	r0, [r7, #12]
 8015dc2:	607a      	str	r2, [r7, #4]
 8015dc4:	603b      	str	r3, [r7, #0]
 8015dc6:	460b      	mov	r3, r1
 8015dc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015dd8:	7af9      	ldrb	r1, [r7, #11]
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	687a      	ldr	r2, [r7, #4]
 8015dde:	f7ed fec2 	bl	8003b66 <HAL_PCD_EP_Receive>
 8015de2:	4603      	mov	r3, r0
 8015de4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015de6:	7dfb      	ldrb	r3, [r7, #23]
 8015de8:	4618      	mov	r0, r3
 8015dea:	f000 f86f 	bl	8015ecc <USBD_Get_USB_Status>
 8015dee:	4603      	mov	r3, r0
 8015df0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8015df2:	7dbb      	ldrb	r3, [r7, #22]
}
 8015df4:	4618      	mov	r0, r3
 8015df6:	3718      	adds	r7, #24
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	bd80      	pop	{r7, pc}

08015dfc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b082      	sub	sp, #8
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
 8015e04:	460b      	mov	r3, r1
 8015e06:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e0e:	78fa      	ldrb	r2, [r7, #3]
 8015e10:	4611      	mov	r1, r2
 8015e12:	4618      	mov	r0, r3
 8015e14:	f7ed fef2 	bl	8003bfc <HAL_PCD_EP_GetRxCount>
 8015e18:	4603      	mov	r3, r0
}
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	3708      	adds	r7, #8
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}
	...

08015e24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b082      	sub	sp, #8
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
 8015e2c:	460b      	mov	r3, r1
 8015e2e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8015e30:	78fb      	ldrb	r3, [r7, #3]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d002      	beq.n	8015e3c <HAL_PCDEx_LPM_Callback+0x18>
 8015e36:	2b01      	cmp	r3, #1
 8015e38:	d01f      	beq.n	8015e7a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8015e3a:	e03b      	b.n	8015eb4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	6a1b      	ldr	r3, [r3, #32]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d007      	beq.n	8015e54 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015e44:	f000 f83c 	bl	8015ec0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015e48:	4b1c      	ldr	r3, [pc, #112]	; (8015ebc <HAL_PCDEx_LPM_Callback+0x98>)
 8015e4a:	691b      	ldr	r3, [r3, #16]
 8015e4c:	4a1b      	ldr	r2, [pc, #108]	; (8015ebc <HAL_PCDEx_LPM_Callback+0x98>)
 8015e4e:	f023 0306 	bic.w	r3, r3, #6
 8015e52:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	687a      	ldr	r2, [r7, #4]
 8015e60:	6812      	ldr	r2, [r2, #0]
 8015e62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015e66:	f023 0301 	bic.w	r3, r3, #1
 8015e6a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015e72:	4618      	mov	r0, r3
 8015e74:	f7f6 faf1 	bl	800c45a <USBD_LL_Resume>
    break;
 8015e78:	e01c      	b.n	8015eb4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	687a      	ldr	r2, [r7, #4]
 8015e86:	6812      	ldr	r2, [r2, #0]
 8015e88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015e8c:	f043 0301 	orr.w	r3, r3, #1
 8015e90:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f7f6 fac9 	bl	800c430 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	6a1b      	ldr	r3, [r3, #32]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d005      	beq.n	8015eb2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015ea6:	4b05      	ldr	r3, [pc, #20]	; (8015ebc <HAL_PCDEx_LPM_Callback+0x98>)
 8015ea8:	691b      	ldr	r3, [r3, #16]
 8015eaa:	4a04      	ldr	r2, [pc, #16]	; (8015ebc <HAL_PCDEx_LPM_Callback+0x98>)
 8015eac:	f043 0306 	orr.w	r3, r3, #6
 8015eb0:	6113      	str	r3, [r2, #16]
    break;   
 8015eb2:	bf00      	nop
}
 8015eb4:	bf00      	nop
 8015eb6:	3708      	adds	r7, #8
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	bd80      	pop	{r7, pc}
 8015ebc:	e000ed00 	.word	0xe000ed00

08015ec0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015ec4:	f7ea fb88 	bl	80005d8 <SystemClock_Config>
}
 8015ec8:	bf00      	nop
 8015eca:	bd80      	pop	{r7, pc}

08015ecc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015ecc:	b480      	push	{r7}
 8015ece:	b085      	sub	sp, #20
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015eda:	79fb      	ldrb	r3, [r7, #7]
 8015edc:	2b03      	cmp	r3, #3
 8015ede:	d817      	bhi.n	8015f10 <USBD_Get_USB_Status+0x44>
 8015ee0:	a201      	add	r2, pc, #4	; (adr r2, 8015ee8 <USBD_Get_USB_Status+0x1c>)
 8015ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ee6:	bf00      	nop
 8015ee8:	08015ef9 	.word	0x08015ef9
 8015eec:	08015eff 	.word	0x08015eff
 8015ef0:	08015f05 	.word	0x08015f05
 8015ef4:	08015f0b 	.word	0x08015f0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015ef8:	2300      	movs	r3, #0
 8015efa:	73fb      	strb	r3, [r7, #15]
    break;
 8015efc:	e00b      	b.n	8015f16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015efe:	2303      	movs	r3, #3
 8015f00:	73fb      	strb	r3, [r7, #15]
    break;
 8015f02:	e008      	b.n	8015f16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015f04:	2301      	movs	r3, #1
 8015f06:	73fb      	strb	r3, [r7, #15]
    break;
 8015f08:	e005      	b.n	8015f16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015f0a:	2303      	movs	r3, #3
 8015f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8015f0e:	e002      	b.n	8015f16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015f10:	2303      	movs	r3, #3
 8015f12:	73fb      	strb	r3, [r7, #15]
    break;
 8015f14:	bf00      	nop
  }
  return usb_status;
 8015f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f18:	4618      	mov	r0, r3
 8015f1a:	3714      	adds	r7, #20
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f22:	4770      	bx	lr

08015f24 <__errno>:
 8015f24:	4b01      	ldr	r3, [pc, #4]	; (8015f2c <__errno+0x8>)
 8015f26:	6818      	ldr	r0, [r3, #0]
 8015f28:	4770      	bx	lr
 8015f2a:	bf00      	nop
 8015f2c:	20000188 	.word	0x20000188

08015f30 <__libc_init_array>:
 8015f30:	b570      	push	{r4, r5, r6, lr}
 8015f32:	4e0d      	ldr	r6, [pc, #52]	; (8015f68 <__libc_init_array+0x38>)
 8015f34:	4c0d      	ldr	r4, [pc, #52]	; (8015f6c <__libc_init_array+0x3c>)
 8015f36:	1ba4      	subs	r4, r4, r6
 8015f38:	10a4      	asrs	r4, r4, #2
 8015f3a:	2500      	movs	r5, #0
 8015f3c:	42a5      	cmp	r5, r4
 8015f3e:	d109      	bne.n	8015f54 <__libc_init_array+0x24>
 8015f40:	4e0b      	ldr	r6, [pc, #44]	; (8015f70 <__libc_init_array+0x40>)
 8015f42:	4c0c      	ldr	r4, [pc, #48]	; (8015f74 <__libc_init_array+0x44>)
 8015f44:	f000 f8f6 	bl	8016134 <_init>
 8015f48:	1ba4      	subs	r4, r4, r6
 8015f4a:	10a4      	asrs	r4, r4, #2
 8015f4c:	2500      	movs	r5, #0
 8015f4e:	42a5      	cmp	r5, r4
 8015f50:	d105      	bne.n	8015f5e <__libc_init_array+0x2e>
 8015f52:	bd70      	pop	{r4, r5, r6, pc}
 8015f54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f58:	4798      	blx	r3
 8015f5a:	3501      	adds	r5, #1
 8015f5c:	e7ee      	b.n	8015f3c <__libc_init_array+0xc>
 8015f5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f62:	4798      	blx	r3
 8015f64:	3501      	adds	r5, #1
 8015f66:	e7f2      	b.n	8015f4e <__libc_init_array+0x1e>
 8015f68:	080166cc 	.word	0x080166cc
 8015f6c:	080166cc 	.word	0x080166cc
 8015f70:	080166cc 	.word	0x080166cc
 8015f74:	080166d0 	.word	0x080166d0

08015f78 <malloc>:
 8015f78:	4b02      	ldr	r3, [pc, #8]	; (8015f84 <malloc+0xc>)
 8015f7a:	4601      	mov	r1, r0
 8015f7c:	6818      	ldr	r0, [r3, #0]
 8015f7e:	f000 b86d 	b.w	801605c <_malloc_r>
 8015f82:	bf00      	nop
 8015f84:	20000188 	.word	0x20000188

08015f88 <free>:
 8015f88:	4b02      	ldr	r3, [pc, #8]	; (8015f94 <free+0xc>)
 8015f8a:	4601      	mov	r1, r0
 8015f8c:	6818      	ldr	r0, [r3, #0]
 8015f8e:	f000 b817 	b.w	8015fc0 <_free_r>
 8015f92:	bf00      	nop
 8015f94:	20000188 	.word	0x20000188

08015f98 <memcpy>:
 8015f98:	b510      	push	{r4, lr}
 8015f9a:	1e43      	subs	r3, r0, #1
 8015f9c:	440a      	add	r2, r1
 8015f9e:	4291      	cmp	r1, r2
 8015fa0:	d100      	bne.n	8015fa4 <memcpy+0xc>
 8015fa2:	bd10      	pop	{r4, pc}
 8015fa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015fac:	e7f7      	b.n	8015f9e <memcpy+0x6>

08015fae <memset>:
 8015fae:	4402      	add	r2, r0
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	4293      	cmp	r3, r2
 8015fb4:	d100      	bne.n	8015fb8 <memset+0xa>
 8015fb6:	4770      	bx	lr
 8015fb8:	f803 1b01 	strb.w	r1, [r3], #1
 8015fbc:	e7f9      	b.n	8015fb2 <memset+0x4>
	...

08015fc0 <_free_r>:
 8015fc0:	b538      	push	{r3, r4, r5, lr}
 8015fc2:	4605      	mov	r5, r0
 8015fc4:	2900      	cmp	r1, #0
 8015fc6:	d045      	beq.n	8016054 <_free_r+0x94>
 8015fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fcc:	1f0c      	subs	r4, r1, #4
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	bfb8      	it	lt
 8015fd2:	18e4      	addlt	r4, r4, r3
 8015fd4:	f000 f8ac 	bl	8016130 <__malloc_lock>
 8015fd8:	4a1f      	ldr	r2, [pc, #124]	; (8016058 <_free_r+0x98>)
 8015fda:	6813      	ldr	r3, [r2, #0]
 8015fdc:	4610      	mov	r0, r2
 8015fde:	b933      	cbnz	r3, 8015fee <_free_r+0x2e>
 8015fe0:	6063      	str	r3, [r4, #4]
 8015fe2:	6014      	str	r4, [r2, #0]
 8015fe4:	4628      	mov	r0, r5
 8015fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015fea:	f000 b8a2 	b.w	8016132 <__malloc_unlock>
 8015fee:	42a3      	cmp	r3, r4
 8015ff0:	d90c      	bls.n	801600c <_free_r+0x4c>
 8015ff2:	6821      	ldr	r1, [r4, #0]
 8015ff4:	1862      	adds	r2, r4, r1
 8015ff6:	4293      	cmp	r3, r2
 8015ff8:	bf04      	itt	eq
 8015ffa:	681a      	ldreq	r2, [r3, #0]
 8015ffc:	685b      	ldreq	r3, [r3, #4]
 8015ffe:	6063      	str	r3, [r4, #4]
 8016000:	bf04      	itt	eq
 8016002:	1852      	addeq	r2, r2, r1
 8016004:	6022      	streq	r2, [r4, #0]
 8016006:	6004      	str	r4, [r0, #0]
 8016008:	e7ec      	b.n	8015fe4 <_free_r+0x24>
 801600a:	4613      	mov	r3, r2
 801600c:	685a      	ldr	r2, [r3, #4]
 801600e:	b10a      	cbz	r2, 8016014 <_free_r+0x54>
 8016010:	42a2      	cmp	r2, r4
 8016012:	d9fa      	bls.n	801600a <_free_r+0x4a>
 8016014:	6819      	ldr	r1, [r3, #0]
 8016016:	1858      	adds	r0, r3, r1
 8016018:	42a0      	cmp	r0, r4
 801601a:	d10b      	bne.n	8016034 <_free_r+0x74>
 801601c:	6820      	ldr	r0, [r4, #0]
 801601e:	4401      	add	r1, r0
 8016020:	1858      	adds	r0, r3, r1
 8016022:	4282      	cmp	r2, r0
 8016024:	6019      	str	r1, [r3, #0]
 8016026:	d1dd      	bne.n	8015fe4 <_free_r+0x24>
 8016028:	6810      	ldr	r0, [r2, #0]
 801602a:	6852      	ldr	r2, [r2, #4]
 801602c:	605a      	str	r2, [r3, #4]
 801602e:	4401      	add	r1, r0
 8016030:	6019      	str	r1, [r3, #0]
 8016032:	e7d7      	b.n	8015fe4 <_free_r+0x24>
 8016034:	d902      	bls.n	801603c <_free_r+0x7c>
 8016036:	230c      	movs	r3, #12
 8016038:	602b      	str	r3, [r5, #0]
 801603a:	e7d3      	b.n	8015fe4 <_free_r+0x24>
 801603c:	6820      	ldr	r0, [r4, #0]
 801603e:	1821      	adds	r1, r4, r0
 8016040:	428a      	cmp	r2, r1
 8016042:	bf04      	itt	eq
 8016044:	6811      	ldreq	r1, [r2, #0]
 8016046:	6852      	ldreq	r2, [r2, #4]
 8016048:	6062      	str	r2, [r4, #4]
 801604a:	bf04      	itt	eq
 801604c:	1809      	addeq	r1, r1, r0
 801604e:	6021      	streq	r1, [r4, #0]
 8016050:	605c      	str	r4, [r3, #4]
 8016052:	e7c7      	b.n	8015fe4 <_free_r+0x24>
 8016054:	bd38      	pop	{r3, r4, r5, pc}
 8016056:	bf00      	nop
 8016058:	20004bd8 	.word	0x20004bd8

0801605c <_malloc_r>:
 801605c:	b570      	push	{r4, r5, r6, lr}
 801605e:	1ccd      	adds	r5, r1, #3
 8016060:	f025 0503 	bic.w	r5, r5, #3
 8016064:	3508      	adds	r5, #8
 8016066:	2d0c      	cmp	r5, #12
 8016068:	bf38      	it	cc
 801606a:	250c      	movcc	r5, #12
 801606c:	2d00      	cmp	r5, #0
 801606e:	4606      	mov	r6, r0
 8016070:	db01      	blt.n	8016076 <_malloc_r+0x1a>
 8016072:	42a9      	cmp	r1, r5
 8016074:	d903      	bls.n	801607e <_malloc_r+0x22>
 8016076:	230c      	movs	r3, #12
 8016078:	6033      	str	r3, [r6, #0]
 801607a:	2000      	movs	r0, #0
 801607c:	bd70      	pop	{r4, r5, r6, pc}
 801607e:	f000 f857 	bl	8016130 <__malloc_lock>
 8016082:	4a21      	ldr	r2, [pc, #132]	; (8016108 <_malloc_r+0xac>)
 8016084:	6814      	ldr	r4, [r2, #0]
 8016086:	4621      	mov	r1, r4
 8016088:	b991      	cbnz	r1, 80160b0 <_malloc_r+0x54>
 801608a:	4c20      	ldr	r4, [pc, #128]	; (801610c <_malloc_r+0xb0>)
 801608c:	6823      	ldr	r3, [r4, #0]
 801608e:	b91b      	cbnz	r3, 8016098 <_malloc_r+0x3c>
 8016090:	4630      	mov	r0, r6
 8016092:	f000 f83d 	bl	8016110 <_sbrk_r>
 8016096:	6020      	str	r0, [r4, #0]
 8016098:	4629      	mov	r1, r5
 801609a:	4630      	mov	r0, r6
 801609c:	f000 f838 	bl	8016110 <_sbrk_r>
 80160a0:	1c43      	adds	r3, r0, #1
 80160a2:	d124      	bne.n	80160ee <_malloc_r+0x92>
 80160a4:	230c      	movs	r3, #12
 80160a6:	6033      	str	r3, [r6, #0]
 80160a8:	4630      	mov	r0, r6
 80160aa:	f000 f842 	bl	8016132 <__malloc_unlock>
 80160ae:	e7e4      	b.n	801607a <_malloc_r+0x1e>
 80160b0:	680b      	ldr	r3, [r1, #0]
 80160b2:	1b5b      	subs	r3, r3, r5
 80160b4:	d418      	bmi.n	80160e8 <_malloc_r+0x8c>
 80160b6:	2b0b      	cmp	r3, #11
 80160b8:	d90f      	bls.n	80160da <_malloc_r+0x7e>
 80160ba:	600b      	str	r3, [r1, #0]
 80160bc:	50cd      	str	r5, [r1, r3]
 80160be:	18cc      	adds	r4, r1, r3
 80160c0:	4630      	mov	r0, r6
 80160c2:	f000 f836 	bl	8016132 <__malloc_unlock>
 80160c6:	f104 000b 	add.w	r0, r4, #11
 80160ca:	1d23      	adds	r3, r4, #4
 80160cc:	f020 0007 	bic.w	r0, r0, #7
 80160d0:	1ac3      	subs	r3, r0, r3
 80160d2:	d0d3      	beq.n	801607c <_malloc_r+0x20>
 80160d4:	425a      	negs	r2, r3
 80160d6:	50e2      	str	r2, [r4, r3]
 80160d8:	e7d0      	b.n	801607c <_malloc_r+0x20>
 80160da:	428c      	cmp	r4, r1
 80160dc:	684b      	ldr	r3, [r1, #4]
 80160de:	bf16      	itet	ne
 80160e0:	6063      	strne	r3, [r4, #4]
 80160e2:	6013      	streq	r3, [r2, #0]
 80160e4:	460c      	movne	r4, r1
 80160e6:	e7eb      	b.n	80160c0 <_malloc_r+0x64>
 80160e8:	460c      	mov	r4, r1
 80160ea:	6849      	ldr	r1, [r1, #4]
 80160ec:	e7cc      	b.n	8016088 <_malloc_r+0x2c>
 80160ee:	1cc4      	adds	r4, r0, #3
 80160f0:	f024 0403 	bic.w	r4, r4, #3
 80160f4:	42a0      	cmp	r0, r4
 80160f6:	d005      	beq.n	8016104 <_malloc_r+0xa8>
 80160f8:	1a21      	subs	r1, r4, r0
 80160fa:	4630      	mov	r0, r6
 80160fc:	f000 f808 	bl	8016110 <_sbrk_r>
 8016100:	3001      	adds	r0, #1
 8016102:	d0cf      	beq.n	80160a4 <_malloc_r+0x48>
 8016104:	6025      	str	r5, [r4, #0]
 8016106:	e7db      	b.n	80160c0 <_malloc_r+0x64>
 8016108:	20004bd8 	.word	0x20004bd8
 801610c:	20004bdc 	.word	0x20004bdc

08016110 <_sbrk_r>:
 8016110:	b538      	push	{r3, r4, r5, lr}
 8016112:	4c06      	ldr	r4, [pc, #24]	; (801612c <_sbrk_r+0x1c>)
 8016114:	2300      	movs	r3, #0
 8016116:	4605      	mov	r5, r0
 8016118:	4608      	mov	r0, r1
 801611a:	6023      	str	r3, [r4, #0]
 801611c:	f7eb f962 	bl	80013e4 <_sbrk>
 8016120:	1c43      	adds	r3, r0, #1
 8016122:	d102      	bne.n	801612a <_sbrk_r+0x1a>
 8016124:	6823      	ldr	r3, [r4, #0]
 8016126:	b103      	cbz	r3, 801612a <_sbrk_r+0x1a>
 8016128:	602b      	str	r3, [r5, #0]
 801612a:	bd38      	pop	{r3, r4, r5, pc}
 801612c:	20009cdc 	.word	0x20009cdc

08016130 <__malloc_lock>:
 8016130:	4770      	bx	lr

08016132 <__malloc_unlock>:
 8016132:	4770      	bx	lr

08016134 <_init>:
 8016134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016136:	bf00      	nop
 8016138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801613a:	bc08      	pop	{r3}
 801613c:	469e      	mov	lr, r3
 801613e:	4770      	bx	lr

08016140 <_fini>:
 8016140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016142:	bf00      	nop
 8016144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016146:	bc08      	pop	{r3}
 8016148:	469e      	mov	lr, r3
 801614a:	4770      	bx	lr
