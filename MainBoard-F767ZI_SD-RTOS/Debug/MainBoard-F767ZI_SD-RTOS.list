
MainBoard-F767ZI_SD-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef14  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800f114  0800f114  0001f114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f60c  0800f60c  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  0800f60c  0800f60c  0001f60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f614  0800f614  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f614  0800f614  0001f614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f618  0800f618  0001f618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800f61c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c00  20000020  0800f63c  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20008c20  0800f63c  00028c20  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024aa1  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d14  00000000  00000000  00044aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f38  00000000  00000000  00049808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ce8  00000000  00000000  0004b740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d936  00000000  00000000  0004d428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c068  00000000  00000000  0007ad5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010e97b  00000000  00000000  00096dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a5741  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008290  00000000  00000000  001a57bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000020 	.word	0x20000020
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f0fc 	.word	0x0800f0fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000024 	.word	0x20000024
 800023c:	0800f0fc 	.word	0x0800f0fc

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <vApplicationGetIdleTaskMemory+0x2c>)
 8000550:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <vApplicationGetIdleTaskMemory+0x30>)
 8000556:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	2000003c 	.word	0x2000003c
 8000570:	20000090 	.word	0x20000090

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b08e      	sub	sp, #56	; 0x38
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 ffa6 	bl	80014ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f847 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f9c9 	bl	8000918 <MX_GPIO_Init>
  MX_DMA_Init();
 8000586:	f000 f9a1 	bl	80008cc <MX_DMA_Init>
  MX_USART3_UART_Init();
 800058a:	f000 f941 	bl	8000810 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800058e:	f000 f96f 	bl	8000870 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000592:	f000 f8e1 	bl	8000758 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 8000596:	f000 f915 	bl	80007c4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800059a:	f007 f889 	bl	80076b0 <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800059e:	f000 f8cf 	bl	8000740 <MX_NVIC_Init>
  res = f_open(&SDFile, &path[0], FA_CREATE_ALWAYS);
  res = f_close(&SDFile);
  res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);*/

  // CAN Initialization
  CAN_Config();
 80005a2:	f000 fbd9 	bl	8000d58 <CAN_Config>
  HAL_CAN_Start(&hcan1);
 80005a6:	4815      	ldr	r0, [pc, #84]	; (80005fc <main+0x88>)
 80005a8:	f001 f9c6 	bl	8001938 <HAL_CAN_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <main+0x8c>)
 80005ae:	f107 041c 	add.w	r4, r7, #28
 80005b2:	461d      	mov	r5, r3
 80005b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00b ff02 	bl	800c3d0 <osThreadCreate>
 80005cc:	4602      	mov	r2, r0
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <main+0x90>)
 80005d0:	601a      	str	r2, [r3, #0]

  /* definition and creation of SD_Task */
  osThreadDef(SD_Task, StartTask02, osPriorityHigh, 0, 256);
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <main+0x94>)
 80005d4:	463c      	mov	r4, r7
 80005d6:	461d      	mov	r5, r3
 80005d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SD_TaskHandle = osThreadCreate(osThread(SD_Task), NULL);
 80005e4:	463b      	mov	r3, r7
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f00b fef1 	bl	800c3d0 <osThreadCreate>
 80005ee:	4602      	mov	r2, r0
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <main+0x98>)
 80005f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f4:	f00b fec9 	bl	800c38a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x84>
 80005fa:	bf00      	nop
 80005fc:	20006a3c 	.word	0x20006a3c
 8000600:	0800f120 	.word	0x0800f120
 8000604:	20004040 	.word	0x20004040
 8000608:	0800f144 	.word	0x0800f144
 800060c:	200040c4 	.word	0x200040c4

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0b8      	sub	sp, #224	; 0xe0
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00e fd63 	bl	800f0ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2290      	movs	r2, #144	; 0x90
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f00e fd54 	bl	800f0ea <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000642:	f002 fd09 	bl	8003058 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <SystemClock_Config+0x124>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	4a3a      	ldr	r2, [pc, #232]	; (8000734 <SystemClock_Config+0x124>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	6413      	str	r3, [r2, #64]	; 0x40
 8000652:	4b38      	ldr	r3, [pc, #224]	; (8000734 <SystemClock_Config+0x124>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065e:	4b36      	ldr	r3, [pc, #216]	; (8000738 <SystemClock_Config+0x128>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a35      	ldr	r2, [pc, #212]	; (8000738 <SystemClock_Config+0x128>)
 8000664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	4b33      	ldr	r3, [pc, #204]	; (8000738 <SystemClock_Config+0x128>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000676:	2301      	movs	r3, #1
 8000678:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000692:	2304      	movs	r3, #4
 8000694:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000698:	23c0      	movs	r3, #192	; 0xc0
 800069a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fd32 	bl	8003118 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ba:	f000 fc2d 	bl	8000f18 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006be:	f002 fcdb 	bl	8003078 <HAL_PWREx_EnableOverDrive>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006c8:	f000 fc26 	bl	8000f18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006f2:	2106      	movs	r1, #6
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 ffbd 	bl	8003674 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000700:	f000 fc0a 	bl	8000f18 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC1
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <SystemClock_Config+0x12c>)
 8000706:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000708:	2300      	movs	r3, #0
 800070a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000712:	2300      	movs	r3, #0
 8000714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	4618      	mov	r0, r3
 800071e:	f003 f9d3 	bl	8003ac8 <HAL_RCCEx_PeriphCLKConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000728:	f000 fbf6 	bl	8000f18 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	37e0      	adds	r7, #224	; 0xe0
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000
 800073c:	00a00100 	.word	0x00a00100

08000740 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 7, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2107      	movs	r1, #7
 8000748:	2014      	movs	r0, #20
 800074a:	f001 fd79 	bl	8002240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800074e:	2014      	movs	r0, #20
 8000750:	f001 fd92 	bl	8002278 <HAL_NVIC_EnableIRQ>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_CAN1_Init+0x64>)
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <MX_CAN1_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_CAN1_Init+0x64>)
 8000764:	2204      	movs	r2, #4
 8000766:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_CAN1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_CAN1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_CAN1_Init+0x64>)
 8000776:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800077a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_CAN1_Init+0x64>)
 800077e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000782:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <MX_CAN1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_CAN1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_CAN1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_CAN1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = ENABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_CAN1_Init+0x64>)
 800079e:	2201      	movs	r2, #1
 80007a0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_CAN1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_CAN1_Init+0x64>)
 80007aa:	f000 fedd 	bl	8001568 <HAL_CAN_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 fbb0 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20006a3c 	.word	0x20006a3c
 80007c0:	40006400 	.word	0x40006400

080007c4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_SDMMC1_SD_Init+0x44>)
 80007ca:	4a10      	ldr	r2, [pc, #64]	; (800080c <MX_SDMMC1_SD_Init+0x48>)
 80007cc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_SDMMC1_SD_Init+0x44>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_SDMMC1_SD_Init+0x44>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_SDMMC1_SD_Init+0x44>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_SDMMC1_SD_Init+0x44>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_SDMMC1_SD_Init+0x44>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_SDMMC1_SD_Init+0x44>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  // Is Redundant
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_SDMMC1_SD_Init+0x44>)
 80007f4:	f003 fd8e 	bl	8004314 <HAL_SD_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_SDMMC1_SD_Init+0x3e>
  {
	  Error_Handler();
 80007fe:	f000 fb8b 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200044cc 	.word	0x200044cc
 800080c:	40012c00 	.word	0x40012c00

08000810 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_USART3_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000854:	f005 faba 	bl	8005dcc <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 fb5b 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20004044 	.word	0x20004044
 800086c:	40004800 	.word	0x40004800

08000870 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800087a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087e:	2206      	movs	r2, #6
 8000880:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000884:	2202      	movs	r2, #2
 8000886:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000890:	2202      	movs	r2, #2
 8000892:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	f002 fa87 	bl	8002dc6 <HAL_PCD_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 fb2b 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200040c8 	.word	0x200040c8

080008cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_DMA_Init+0x48>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <MX_DMA_Init+0x48>)
 80008d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <MX_DMA_Init+0x48>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2105      	movs	r1, #5
 80008ee:	203b      	movs	r0, #59	; 0x3b
 80008f0:	f001 fca6 	bl	8002240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008f4:	203b      	movs	r0, #59	; 0x3b
 80008f6:	f001 fcbf 	bl	8002278 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2105      	movs	r1, #5
 80008fe:	2045      	movs	r0, #69	; 0x45
 8000900:	f001 fc9e 	bl	8002240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000904:	2045      	movs	r0, #69	; 0x45
 8000906:	f001 fcb7 	bl	8002278 <HAL_NVIC_EnableIRQ>

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	; 0x30
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b6d      	ldr	r3, [pc, #436]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a6c      	ldr	r2, [pc, #432]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b6a      	ldr	r3, [pc, #424]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	4b67      	ldr	r3, [pc, #412]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a66      	ldr	r2, [pc, #408]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b64      	ldr	r3, [pc, #400]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b61      	ldr	r3, [pc, #388]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a60      	ldr	r2, [pc, #384]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b5e      	ldr	r3, [pc, #376]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b5b      	ldr	r3, [pc, #364]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a5a      	ldr	r2, [pc, #360]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b58      	ldr	r3, [pc, #352]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098e:	4b55      	ldr	r3, [pc, #340]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a54      	ldr	r2, [pc, #336]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b52      	ldr	r3, [pc, #328]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a6:	4b4f      	ldr	r3, [pc, #316]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a4e      	ldr	r2, [pc, #312]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b4c      	ldr	r3, [pc, #304]	; (8000ae4 <MX_GPIO_Init+0x1cc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8 
 80009be:	2200      	movs	r2, #0
 80009c0:	f244 3181 	movw	r1, #17281	; 0x4381
 80009c4:	4848      	ldr	r0, [pc, #288]	; (8000ae8 <MX_GPIO_Init+0x1d0>)
 80009c6:	f002 f9cb 	bl	8002d60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	4847      	ldr	r0, [pc, #284]	; (8000aec <MX_GPIO_Init+0x1d4>)
 80009d0:	f002 f9c6 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009da:	4b45      	ldr	r3, [pc, #276]	; (8000af0 <MX_GPIO_Init+0x1d8>)
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4842      	ldr	r0, [pc, #264]	; (8000af4 <MX_GPIO_Init+0x1dc>)
 80009ea:	f001 fff7 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009ee:	2332      	movs	r3, #50	; 0x32
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009fe:	230b      	movs	r3, #11
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	483a      	ldr	r0, [pc, #232]	; (8000af4 <MX_GPIO_Init+0x1dc>)
 8000a0a:	f001 ffe7 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a0e:	2386      	movs	r3, #134	; 0x86
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1e:	230b      	movs	r3, #11
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4833      	ldr	r0, [pc, #204]	; (8000af8 <MX_GPIO_Init+0x1e0>)
 8000a2a:	f001 ffd7 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8 
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8 
 8000a2e:	f244 3381 	movw	r3, #17281	; 0x4381
 8000a32:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4828      	ldr	r0, [pc, #160]	; (8000ae8 <MX_GPIO_Init+0x1d0>)
 8000a48:	f001 ffc8 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5e:	230b      	movs	r3, #11
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	481f      	ldr	r0, [pc, #124]	; (8000ae8 <MX_GPIO_Init+0x1d0>)
 8000a6a:	f001 ffb7 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a76:	2302      	movs	r3, #2
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481a      	ldr	r0, [pc, #104]	; (8000aec <MX_GPIO_Init+0x1d4>)
 8000a82:	f001 ffab 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a86:	2340      	movs	r3, #64	; 0x40
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4813      	ldr	r0, [pc, #76]	; (8000aec <MX_GPIO_Init+0x1d4>)
 8000a9e:	f001 ff9d 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <MX_GPIO_Init+0x1d4>)
 8000ab6:	f001 ff91 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000acc:	230b      	movs	r3, #11
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_GPIO_Init+0x1d4>)
 8000ad8:	f001 ff80 	bl	80029dc <HAL_GPIO_Init>

}
 8000adc:	bf00      	nop
 8000ade:	3730      	adds	r7, #48	; 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	40021800 	.word	0x40021800
 8000af0:	10110000 	.word	0x10110000
 8000af4:	40020800 	.word	0x40020800
 8000af8:	40020000 	.word	0x40020000

08000afc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000b0c:	f002 f928 	bl	8002d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2180      	movs	r1, #128	; 0x80
 8000b14:	4812      	ldr	r0, [pc, #72]	; (8000b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000b16:	f002 f923 	bl	8002d60 <HAL_GPIO_WritePin>
	if(HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0,&RxHeader,RxData) == HAL_OK){
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000b1c:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000b22:	f000 ff4d 	bl	80019c0 <HAL_CAN_GetRxMessage>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		Get_Data();
 8000b2c:	f000 f822 	bl	8000b74 <Get_Data>
		//ind++;
	}
	if(ind >= 32){
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b1f      	cmp	r3, #31
 8000b36:	d903      	bls.n	8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b38:	2102      	movs	r1, #2
 8000b3a:	480c      	ldr	r0, [pc, #48]	; (8000b6c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000b3c:	f001 f878 	bl	8001c30 <HAL_CAN_DeactivateNotification>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000b48:	f002 f90a 	bl	8002d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000b52:	f002 f905 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40020400 	.word	0x40020400
 8000b64:	20006a34 	.word	0x20006a34
 8000b68:	20006ae0 	.word	0x20006ae0
 8000b6c:	20006a3c 	.word	0x20006a3c
 8000b70:	20000290 	.word	0x20000290

08000b74 <Get_Data>:

void Get_Data(){
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
	 *   | |       ID
	 *   | | _______________
	 * -|-|-|x|x|x|x|x|x|x|x|
	 *   9 8 7 6 5 4 3 2 1 0
	 */
	if((RxHeader.StdId>>8) == 0x00){
 8000b78:	4b73      	ldr	r3, [pc, #460]	; (8000d48 <Get_Data+0x1d4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d169      	bne.n	8000c56 <Get_Data+0xe2>
		buffer[ind].Header_H = ((uint8_t)RxHeader.StdId & 0x1F)<<1;
 8000b82:	4b71      	ldr	r3, [pc, #452]	; (8000d48 <Get_Data+0x1d4>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	4a6f      	ldr	r2, [pc, #444]	; (8000d4c <Get_Data+0x1d8>)
 8000b8e:	7812      	ldrb	r2, [r2, #0]
 8000b90:	4610      	mov	r0, r2
 8000b92:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000b96:	b2d9      	uxtb	r1, r3
 8000b98:	4a6d      	ldr	r2, [pc, #436]	; (8000d50 <Get_Data+0x1dc>)
 8000b9a:	0103      	lsls	r3, r0, #4
 8000b9c:	4413      	add	r3, r2
 8000b9e:	460a      	mov	r2, r1
 8000ba0:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_L = RxData[0];
 8000ba2:	4b6a      	ldr	r3, [pc, #424]	; (8000d4c <Get_Data+0x1d8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	4b6a      	ldr	r3, [pc, #424]	; (8000d54 <Get_Data+0x1e0>)
 8000baa:	7819      	ldrb	r1, [r3, #0]
 8000bac:	4a68      	ldr	r2, [pc, #416]	; (8000d50 <Get_Data+0x1dc>)
 8000bae:	0103      	lsls	r3, r0, #4
 8000bb0:	4413      	add	r3, r2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_M = RxData[1];
 8000bb8:	4b64      	ldr	r3, [pc, #400]	; (8000d4c <Get_Data+0x1d8>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	4b65      	ldr	r3, [pc, #404]	; (8000d54 <Get_Data+0x1e0>)
 8000bc0:	7859      	ldrb	r1, [r3, #1]
 8000bc2:	4a63      	ldr	r2, [pc, #396]	; (8000d50 <Get_Data+0x1dc>)
 8000bc4:	0103      	lsls	r3, r0, #4
 8000bc6:	4413      	add	r3, r2
 8000bc8:	3301      	adds	r3, #1
 8000bca:	460a      	mov	r2, r1
 8000bcc:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_H |= (RxData[2] & 0x01);
 8000bce:	4b5f      	ldr	r3, [pc, #380]	; (8000d4c <Get_Data+0x1d8>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	4a5f      	ldr	r2, [pc, #380]	; (8000d50 <Get_Data+0x1dc>)
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b25a      	sxtb	r2, r3
 8000bdc:	4b5d      	ldr	r3, [pc, #372]	; (8000d54 <Get_Data+0x1e0>)
 8000bde:	789b      	ldrb	r3, [r3, #2]
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b25a      	sxtb	r2, r3
 8000bec:	4b57      	ldr	r3, [pc, #348]	; (8000d4c <Get_Data+0x1d8>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b2d1      	uxtb	r1, r2
 8000bf2:	4a57      	ldr	r2, [pc, #348]	; (8000d50 <Get_Data+0x1dc>)
 8000bf4:	011b      	lsls	r3, r3, #4
 8000bf6:	4413      	add	r3, r2
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_L = RxData[4];
 8000bfc:	4b53      	ldr	r3, [pc, #332]	; (8000d4c <Get_Data+0x1d8>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	4b54      	ldr	r3, [pc, #336]	; (8000d54 <Get_Data+0x1e0>)
 8000c04:	7919      	ldrb	r1, [r3, #4]
 8000c06:	4a52      	ldr	r2, [pc, #328]	; (8000d50 <Get_Data+0x1dc>)
 8000c08:	0103      	lsls	r3, r0, #4
 8000c0a:	4413      	add	r3, r2
 8000c0c:	330a      	adds	r3, #10
 8000c0e:	460a      	mov	r2, r1
 8000c10:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_H = RxData[5];
 8000c12:	4b4e      	ldr	r3, [pc, #312]	; (8000d4c <Get_Data+0x1d8>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	4b4e      	ldr	r3, [pc, #312]	; (8000d54 <Get_Data+0x1e0>)
 8000c1a:	7959      	ldrb	r1, [r3, #5]
 8000c1c:	4a4c      	ldr	r2, [pc, #304]	; (8000d50 <Get_Data+0x1dc>)
 8000c1e:	0103      	lsls	r3, r0, #4
 8000c20:	4413      	add	r3, r2
 8000c22:	3309      	adds	r3, #9
 8000c24:	460a      	mov	r2, r1
 8000c26:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_L = RxData[6];
 8000c28:	4b48      	ldr	r3, [pc, #288]	; (8000d4c <Get_Data+0x1d8>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	4b49      	ldr	r3, [pc, #292]	; (8000d54 <Get_Data+0x1e0>)
 8000c30:	7999      	ldrb	r1, [r3, #6]
 8000c32:	4a47      	ldr	r2, [pc, #284]	; (8000d50 <Get_Data+0x1dc>)
 8000c34:	0103      	lsls	r3, r0, #4
 8000c36:	4413      	add	r3, r2
 8000c38:	330a      	adds	r3, #10
 8000c3a:	460a      	mov	r2, r1
 8000c3c:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrY_H = RxData[7];
 8000c3e:	4b43      	ldr	r3, [pc, #268]	; (8000d4c <Get_Data+0x1d8>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	4b43      	ldr	r3, [pc, #268]	; (8000d54 <Get_Data+0x1e0>)
 8000c46:	79d9      	ldrb	r1, [r3, #7]
 8000c48:	4a41      	ldr	r2, [pc, #260]	; (8000d50 <Get_Data+0x1dc>)
 8000c4a:	0103      	lsls	r3, r0, #4
 8000c4c:	4413      	add	r3, r2
 8000c4e:	330b      	adds	r3, #11
 8000c50:	460a      	mov	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_H = RxData[5];
		buffer[ind].Temp_L = RxData[6];
		buffer[ind].Temp_H = RxData[7];
		ind++;
	}
}
 8000c54:	e072      	b.n	8000d3c <Get_Data+0x1c8>
	else if((RxHeader.StdId>>8) == 0x01){
 8000c56:	4b3c      	ldr	r3, [pc, #240]	; (8000d48 <Get_Data+0x1d4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	0a1b      	lsrs	r3, r3, #8
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d16d      	bne.n	8000d3c <Get_Data+0x1c8>
		buffer[ind].Header_H = ((uint8_t)RxHeader.StdId & 0x1F)<<1;
 8000c60:	4b39      	ldr	r3, [pc, #228]	; (8000d48 <Get_Data+0x1d4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4a38      	ldr	r2, [pc, #224]	; (8000d4c <Get_Data+0x1d8>)
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	4610      	mov	r0, r2
 8000c70:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000c74:	b2d9      	uxtb	r1, r3
 8000c76:	4a36      	ldr	r2, [pc, #216]	; (8000d50 <Get_Data+0x1dc>)
 8000c78:	0103      	lsls	r3, r0, #4
 8000c7a:	4413      	add	r3, r2
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccX_L = RxData[0];
 8000c80:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <Get_Data+0x1d8>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <Get_Data+0x1e0>)
 8000c88:	7819      	ldrb	r1, [r3, #0]
 8000c8a:	4a31      	ldr	r2, [pc, #196]	; (8000d50 <Get_Data+0x1dc>)
 8000c8c:	0103      	lsls	r3, r0, #4
 8000c8e:	4413      	add	r3, r2
 8000c90:	3304      	adds	r3, #4
 8000c92:	460a      	mov	r2, r1
 8000c94:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccX_H = RxData[1];
 8000c96:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <Get_Data+0x1d8>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <Get_Data+0x1e0>)
 8000c9e:	7859      	ldrb	r1, [r3, #1]
 8000ca0:	4a2b      	ldr	r2, [pc, #172]	; (8000d50 <Get_Data+0x1dc>)
 8000ca2:	0103      	lsls	r3, r0, #4
 8000ca4:	4413      	add	r3, r2
 8000ca6:	3303      	adds	r3, #3
 8000ca8:	460a      	mov	r2, r1
 8000caa:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccY_L = RxData[2];
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <Get_Data+0x1d8>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <Get_Data+0x1e0>)
 8000cb4:	7899      	ldrb	r1, [r3, #2]
 8000cb6:	4a26      	ldr	r2, [pc, #152]	; (8000d50 <Get_Data+0x1dc>)
 8000cb8:	0103      	lsls	r3, r0, #4
 8000cba:	4413      	add	r3, r2
 8000cbc:	3306      	adds	r3, #6
 8000cbe:	460a      	mov	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccY_H = RxData[3];
 8000cc2:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <Get_Data+0x1d8>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <Get_Data+0x1e0>)
 8000cca:	78d9      	ldrb	r1, [r3, #3]
 8000ccc:	4a20      	ldr	r2, [pc, #128]	; (8000d50 <Get_Data+0x1dc>)
 8000cce:	0103      	lsls	r3, r0, #4
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3305      	adds	r3, #5
 8000cd4:	460a      	mov	r2, r1
 8000cd6:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_L = RxData[4];
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <Get_Data+0x1d8>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <Get_Data+0x1e0>)
 8000ce0:	7919      	ldrb	r1, [r3, #4]
 8000ce2:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <Get_Data+0x1dc>)
 8000ce4:	0103      	lsls	r3, r0, #4
 8000ce6:	4413      	add	r3, r2
 8000ce8:	3308      	adds	r3, #8
 8000cea:	460a      	mov	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_H = RxData[5];
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <Get_Data+0x1d8>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <Get_Data+0x1e0>)
 8000cf6:	7959      	ldrb	r1, [r3, #5]
 8000cf8:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <Get_Data+0x1dc>)
 8000cfa:	0103      	lsls	r3, r0, #4
 8000cfc:	4413      	add	r3, r2
 8000cfe:	3307      	adds	r3, #7
 8000d00:	460a      	mov	r2, r1
 8000d02:	701a      	strb	r2, [r3, #0]
		buffer[ind].Temp_L = RxData[6];
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <Get_Data+0x1d8>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <Get_Data+0x1e0>)
 8000d0c:	7999      	ldrb	r1, [r3, #6]
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <Get_Data+0x1dc>)
 8000d10:	0103      	lsls	r3, r0, #4
 8000d12:	4413      	add	r3, r2
 8000d14:	330e      	adds	r3, #14
 8000d16:	460a      	mov	r2, r1
 8000d18:	701a      	strb	r2, [r3, #0]
		buffer[ind].Temp_H = RxData[7];
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <Get_Data+0x1d8>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <Get_Data+0x1e0>)
 8000d22:	79d9      	ldrb	r1, [r3, #7]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <Get_Data+0x1dc>)
 8000d26:	0103      	lsls	r3, r0, #4
 8000d28:	4413      	add	r3, r2
 8000d2a:	330d      	adds	r3, #13
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	701a      	strb	r2, [r3, #0]
		ind++;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <Get_Data+0x1d8>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <Get_Data+0x1d8>)
 8000d3a:	701a      	strb	r2, [r3, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20006ae0 	.word	0x20006ae0
 8000d4c:	20000290 	.word	0x20000290
 8000d50:	20005750 	.word	0x20005750
 8000d54:	20006a34 	.word	0x20006a34

08000d58 <CAN_Config>:

void CAN_Config(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	TxHeader.StdId = 0x00;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <CAN_Config+0x60>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x00;
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <CAN_Config+0x60>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <CAN_Config+0x60>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_EXT;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <CAN_Config+0x60>)
 8000d70:	2204      	movs	r2, #4
 8000d72:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <CAN_Config+0x60>)
 8000d76:	2208      	movs	r2, #8
 8000d78:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <CAN_Config+0x60>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	751a      	strb	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <CAN_Config+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0x0;
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <CAN_Config+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <CAN_Config+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0;
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <CAN_Config+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <CAN_Config+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <CAN_Config+0x64>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <CAN_Config+0x64>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 8000daa:	4904      	ldr	r1, [pc, #16]	; (8000dbc <CAN_Config+0x64>)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <CAN_Config+0x68>)
 8000dae:	f000 fcd7 	bl	8001760 <HAL_CAN_ConfigFilter>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20006a68 	.word	0x20006a68
 8000dbc:	20004018 	.word	0x20004018
 8000dc0:	20006a3c 	.word	0x20006a3c

08000dc4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f00b fb4b 	bl	800c468 <osDelay>
 8000dd2:	e7fb      	b.n	8000dcc <StartDefaultTask+0x8>

08000dd4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	if(flag == 0){
 8000ddc:	4b39      	ldr	r3, [pc, #228]	; (8000ec4 <StartTask02+0xf0>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d128      	bne.n	8000e36 <StartTask02+0x62>
		res = f_mount(&SDFatFs, SDPath, 1);
 8000de4:	2201      	movs	r2, #1
 8000de6:	4938      	ldr	r1, [pc, #224]	; (8000ec8 <StartTask02+0xf4>)
 8000de8:	4838      	ldr	r0, [pc, #224]	; (8000ecc <StartTask02+0xf8>)
 8000dea:	f00a fa97 	bl	800b31c <f_mount>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b37      	ldr	r3, [pc, #220]	; (8000ed0 <StartTask02+0xfc>)
 8000df4:	701a      	strb	r2, [r3, #0]
		res = f_open(&SDFile, &path[0], FA_CREATE_ALWAYS);
 8000df6:	2208      	movs	r2, #8
 8000df8:	4936      	ldr	r1, [pc, #216]	; (8000ed4 <StartTask02+0x100>)
 8000dfa:	4837      	ldr	r0, [pc, #220]	; (8000ed8 <StartTask02+0x104>)
 8000dfc:	f00a faf2 	bl	800b3e4 <f_open>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <StartTask02+0xfc>)
 8000e06:	701a      	strb	r2, [r3, #0]
		res = f_close(&SDFile);
 8000e08:	4833      	ldr	r0, [pc, #204]	; (8000ed8 <StartTask02+0x104>)
 8000e0a:	f00b f8e0 	bl	800bfce <f_close>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <StartTask02+0xfc>)
 8000e14:	701a      	strb	r2, [r3, #0]
		res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);
 8000e16:	2232      	movs	r2, #50	; 0x32
 8000e18:	492e      	ldr	r1, [pc, #184]	; (8000ed4 <StartTask02+0x100>)
 8000e1a:	482f      	ldr	r0, [pc, #188]	; (8000ed8 <StartTask02+0x104>)
 8000e1c:	f00a fae2 	bl	800b3e4 <f_open>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <StartTask02+0xfc>)
 8000e26:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <StartTask02+0xf0>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e2e:	2102      	movs	r1, #2
 8000e30:	482a      	ldr	r0, [pc, #168]	; (8000edc <StartTask02+0x108>)
 8000e32:	f000 fed7 	bl	8001be4 <HAL_CAN_ActivateNotification>
	}

  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000e36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3a:	4829      	ldr	r0, [pc, #164]	; (8000ee0 <StartTask02+0x10c>)
 8000e3c:	f001 ff78 	bl	8002d30 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d110      	bne.n	8000e68 <StartTask02+0x94>
			HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e46:	2102      	movs	r1, #2
 8000e48:	4824      	ldr	r0, [pc, #144]	; (8000edc <StartTask02+0x108>)
 8000e4a:	f000 fef1 	bl	8001c30 <HAL_CAN_DeactivateNotification>
			res = f_close(&SDFile);
 8000e4e:	4822      	ldr	r0, [pc, #136]	; (8000ed8 <StartTask02+0x104>)
 8000e50:	f00b f8bd 	bl	800bfce <f_close>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <StartTask02+0xfc>)
 8000e5a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	4820      	ldr	r0, [pc, #128]	; (8000ee4 <StartTask02+0x110>)
 8000e62:	f001 ff7d 	bl	8002d60 <HAL_GPIO_WritePin>
 8000e66:	e7e6      	b.n	8000e36 <StartTask02+0x62>
		}
		else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6e:	481d      	ldr	r0, [pc, #116]	; (8000ee4 <StartTask02+0x110>)
 8000e70:	f001 ff76 	bl	8002d60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2101      	movs	r1, #1
 8000e78:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <StartTask02+0x110>)
 8000e7a:	f001 ff71 	bl	8002d60 <HAL_GPIO_WritePin>
			if(ind == 32){
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <StartTask02+0x114>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b20      	cmp	r3, #32
 8000e84:	d111      	bne.n	8000eaa <StartTask02+0xd6>
				res = f_write(&SDFile, buffer, sizeof(buffer), &writeBuff);
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <StartTask02+0x118>)
 8000e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8c:	4918      	ldr	r1, [pc, #96]	; (8000ef0 <StartTask02+0x11c>)
 8000e8e:	4812      	ldr	r0, [pc, #72]	; (8000ed8 <StartTask02+0x104>)
 8000e90:	f00a fd81 	bl	800b996 <f_write>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <StartTask02+0xfc>)
 8000e9a:	701a      	strb	r2, [r3, #0]
				ind = 0;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <StartTask02+0x114>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
				HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <StartTask02+0x108>)
 8000ea6:	f000 fe9d 	bl	8001be4 <HAL_CAN_ActivateNotification>
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <StartTask02+0x110>)
 8000eb2:	f001 ff55 	bl	8002d60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2101      	movs	r1, #1
 8000eba:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <StartTask02+0x110>)
 8000ebc:	f001 ff50 	bl	8002d60 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000ec0:	e7b9      	b.n	8000e36 <StartTask02+0x62>
 8000ec2:	bf00      	nop
 8000ec4:	20000291 	.word	0x20000291
 8000ec8:	20006b4c 	.word	0x20006b4c
 8000ecc:	20005950 	.word	0x20005950
 8000ed0:	20006a64 	.word	0x20006a64
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20006b50 	.word	0x20006b50
 8000edc:	20006a3c 	.word	0x20006a3c
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020400 	.word	0x40020400
 8000ee8:	20000290 	.word	0x20000290
 8000eec:	20006afc 	.word	0x20006afc
 8000ef0:	20005750 	.word	0x20005750

08000ef4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f06:	f000 faed 	bl	80014e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40001000 	.word	0x40001000

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <Error_Handler+0x18>)
 8000f22:	f001 ff36 	bl	8002d92 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000f26:	2064      	movs	r0, #100	; 0x64
 8000f28:	f000 fafc 	bl	8001524 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f2c:	e7f6      	b.n	8000f1c <Error_Handler+0x4>
 8000f2e:	bf00      	nop
 8000f30:	40020400 	.word	0x40020400

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	210f      	movs	r1, #15
 8000f6e:	f06f 0001 	mvn.w	r0, #1
 8000f72:	f001 f965 	bl	8002240 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800

08000f84 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_CAN_MspInit+0x7c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d127      	bne.n	8000ff6 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_CAN_MspInit+0x80>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a16      	ldr	r2, [pc, #88]	; (8001004 <HAL_CAN_MspInit+0x80>)
 8000fac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_CAN_MspInit+0x80>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_CAN_MspInit+0x80>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a10      	ldr	r2, [pc, #64]	; (8001004 <HAL_CAN_MspInit+0x80>)
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_CAN_MspInit+0x80>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fe6:	2309      	movs	r3, #9
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_CAN_MspInit+0x84>)
 8000ff2:	f001 fcf3 	bl	80029dc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40006400 	.word	0x40006400
 8001004:	40023800 	.word	0x40023800
 8001008:	40020c00 	.word	0x40020c00

0800100c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a65      	ldr	r2, [pc, #404]	; (80011c0 <HAL_SD_MspInit+0x1b4>)
 800102a:	4293      	cmp	r3, r2
 800102c:	f040 80c3 	bne.w	80011b6 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001030:	4b64      	ldr	r3, [pc, #400]	; (80011c4 <HAL_SD_MspInit+0x1b8>)
 8001032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001034:	4a63      	ldr	r2, [pc, #396]	; (80011c4 <HAL_SD_MspInit+0x1b8>)
 8001036:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800103a:	6453      	str	r3, [r2, #68]	; 0x44
 800103c:	4b61      	ldr	r3, [pc, #388]	; (80011c4 <HAL_SD_MspInit+0x1b8>)
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001048:	4b5e      	ldr	r3, [pc, #376]	; (80011c4 <HAL_SD_MspInit+0x1b8>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4a5d      	ldr	r2, [pc, #372]	; (80011c4 <HAL_SD_MspInit+0x1b8>)
 800104e:	f043 0304 	orr.w	r3, r3, #4
 8001052:	6313      	str	r3, [r2, #48]	; 0x30
 8001054:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <HAL_SD_MspInit+0x1b8>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001060:	4b58      	ldr	r3, [pc, #352]	; (80011c4 <HAL_SD_MspInit+0x1b8>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	4a57      	ldr	r2, [pc, #348]	; (80011c4 <HAL_SD_MspInit+0x1b8>)
 8001066:	f043 0308 	orr.w	r3, r3, #8
 800106a:	6313      	str	r3, [r2, #48]	; 0x30
 800106c:	4b55      	ldr	r3, [pc, #340]	; (80011c4 <HAL_SD_MspInit+0x1b8>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001078:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800107c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800108a:	230c      	movs	r3, #12
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	484c      	ldr	r0, [pc, #304]	; (80011c8 <HAL_SD_MspInit+0x1bc>)
 8001096:	f001 fca1 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800109a:	2304      	movs	r3, #4
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010aa:	230c      	movs	r3, #12
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4845      	ldr	r0, [pc, #276]	; (80011cc <HAL_SD_MspInit+0x1c0>)
 80010b6:	f001 fc91 	bl	80029dc <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80010ba:	4b45      	ldr	r3, [pc, #276]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 80010bc:	4a45      	ldr	r2, [pc, #276]	; (80011d4 <HAL_SD_MspInit+0x1c8>)
 80010be:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80010c0:	4b43      	ldr	r3, [pc, #268]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 80010c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c8:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 80010ca:	2240      	movs	r2, #64	; 0x40
 80010cc:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ce:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d4:	4b3e      	ldr	r3, [pc, #248]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 80010d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010da:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010dc:	4b3c      	ldr	r3, [pc, #240]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 80010de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010e4:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 80010e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ea:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80010ec:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 80010ee:	2220      	movs	r2, #32
 80010f0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f2:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010f8:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 80010fa:	2204      	movs	r2, #4
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010fe:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 8001100:	2203      	movs	r2, #3
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001104:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 8001106:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800110c:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 800110e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001112:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001114:	482e      	ldr	r0, [pc, #184]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 8001116:	f001 f8bd 	bl	8002294 <HAL_DMA_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8001120:	f7ff fefa 	bl	8000f18 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a2a      	ldr	r2, [pc, #168]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 8001128:	63da      	str	r2, [r3, #60]	; 0x3c
 800112a:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <HAL_SD_MspInit+0x1c4>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 8001130:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 8001132:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <HAL_SD_MspInit+0x1d0>)
 8001134:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 8001138:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800113c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001144:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 800114c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001150:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 8001154:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001158:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 800115c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001160:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 8001164:	2220      	movs	r2, #32
 8001166:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 8001170:	2204      	movs	r2, #4
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 8001176:	2203      	movs	r2, #3
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 800117c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 8001184:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001188:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800118a:	4813      	ldr	r0, [pc, #76]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 800118c:	f001 f882 	bl	8002294 <HAL_DMA_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8001196:	f7ff febf 	bl	8000f18 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <HAL_SD_MspInit+0x1cc>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 6, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2106      	movs	r1, #6
 80011aa:	2031      	movs	r0, #49	; 0x31
 80011ac:	f001 f848 	bl	8002240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80011b0:	2031      	movs	r0, #49	; 0x31
 80011b2:	f001 f861 	bl	8002278 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40012c00 	.word	0x40012c00
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020c00 	.word	0x40020c00
 80011d0:	20006a80 	.word	0x20006a80
 80011d4:	40026458 	.word	0x40026458
 80011d8:	200069b4 	.word	0x200069b4
 80011dc:	400264a0 	.word	0x400264a0

080011e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_UART_MspInit+0x7c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d128      	bne.n	8001254 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_UART_MspInit+0x80>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <HAL_UART_MspInit+0x80>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_UART_MspInit+0x80>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_UART_MspInit+0x80>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_UART_MspInit+0x80>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_UART_MspInit+0x80>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001232:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001244:	2307      	movs	r3, #7
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_UART_MspInit+0x84>)
 8001250:	f001 fbc4 	bl	80029dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40004800 	.word	0x40004800
 8001260:	40023800 	.word	0x40023800
 8001264:	40020c00 	.word	0x40020c00

08001268 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001288:	d134      	bne.n	80012f4 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <HAL_PCD_MspInit+0x94>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <HAL_PCD_MspInit+0x94>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_PCD_MspInit+0x94>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80012a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012b4:	230a      	movs	r3, #10
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4810      	ldr	r0, [pc, #64]	; (8001300 <HAL_PCD_MspInit+0x98>)
 80012c0:	f001 fb8c 	bl	80029dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <HAL_PCD_MspInit+0x94>)
 80012c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <HAL_PCD_MspInit+0x94>)
 80012ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ce:	6353      	str	r3, [r2, #52]	; 0x34
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_PCD_MspInit+0x94>)
 80012d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_PCD_MspInit+0x94>)
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <HAL_PCD_MspInit+0x94>)
 80012e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e6:	6453      	str	r3, [r2, #68]	; 0x44
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <HAL_PCD_MspInit+0x94>)
 80012ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000

08001304 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	; 0x30
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	2036      	movs	r0, #54	; 0x36
 800131a:	f000 ff91 	bl	8002240 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800131e:	2036      	movs	r0, #54	; 0x36
 8001320:	f000 ffaa 	bl	8002278 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <HAL_InitTick+0xa0>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <HAL_InitTick+0xa0>)
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_InitTick+0xa0>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f003 0310 	and.w	r3, r3, #16
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800133c:	f107 0210 	add.w	r2, r7, #16
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fb8c 	bl	8003a64 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800134c:	f002 fb62 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8001350:	4603      	mov	r3, r0
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001358:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <HAL_InitTick+0xa4>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	0c9b      	lsrs	r3, r3, #18
 8001360:	3b01      	subs	r3, #1
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_InitTick+0xa8>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <HAL_InitTick+0xac>)
 8001368:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_InitTick+0xa8>)
 800136c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001370:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001372:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <HAL_InitTick+0xa8>)
 8001374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001376:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_InitTick+0xa8>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_InitTick+0xa8>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <HAL_InitTick+0xa8>)
 8001386:	f004 fabb 	bl	8005900 <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d104      	bne.n	800139a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001390:	4806      	ldr	r0, [pc, #24]	; (80013ac <HAL_InitTick+0xa8>)
 8001392:	f004 faeb 	bl	800596c <HAL_TIM_Base_Start_IT>
 8001396:	4603      	mov	r3, r0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3730      	adds	r7, #48	; 0x30
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	431bde83 	.word	0x431bde83
 80013ac:	20006b00 	.word	0x20006b00
 80013b0:	40001000 	.word	0x40001000

080013b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <CAN1_RX0_IRQHandler+0x10>)
 80013ee:	f000 fc46 	bl	8001c7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20006a3c 	.word	0x20006a3c

080013fc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <SDMMC1_IRQHandler+0x10>)
 8001402:	f003 f9f9 	bl	80047f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200044cc 	.word	0x200044cc

08001410 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM6_DAC_IRQHandler+0x10>)
 8001416:	f004 fad3 	bl	80059c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20006b00 	.word	0x20006b00

08001424 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <DMA2_Stream3_IRQHandler+0x10>)
 800142a:	f001 f863 	bl	80024f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20006a80 	.word	0x20006a80

08001438 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <DMA2_Stream6_IRQHandler+0x10>)
 800143e:	f001 f859 	bl	80024f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200069b4 	.word	0x200069b4

0800144c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <SystemInit+0x28>)
 8001452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001456:	4a07      	ldr	r2, [pc, #28]	; (8001474 <SystemInit+0x28>)
 8001458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800145c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SystemInit+0x28>)
 8001462:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001466:	609a      	str	r2, [r3, #8]
#endif
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800147c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800147e:	e003      	b.n	8001488 <LoopCopyDataInit>

08001480 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001482:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001484:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001486:	3104      	adds	r1, #4

08001488 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800148c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800148e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001490:	d3f6      	bcc.n	8001480 <CopyDataInit>
  ldr  r2, =_sbss
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001494:	e002      	b.n	800149c <LoopFillZerobss>

08001496 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001496:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001498:	f842 3b04 	str.w	r3, [r2], #4

0800149c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800149e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014a0:	d3f9      	bcc.n	8001496 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014a2:	f7ff ffd3 	bl	800144c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f00d fdf1 	bl	800f08c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014aa:	f7ff f863 	bl	8000574 <main>
  bx  lr    
 80014ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80014b4:	0800f61c 	.word	0x0800f61c
  ldr  r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014bc:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 80014c0:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 80014c4:	20008c20 	.word	0x20008c20

080014c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC_IRQHandler>

080014ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ce:	2003      	movs	r0, #3
 80014d0:	f000 feab 	bl	800222a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff ff15 	bl	8001304 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80014da:	f7ff fd2b 	bl	8000f34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000018 	.word	0x20000018
 8001508:	20006b40 	.word	0x20006b40

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20006b40 	.word	0x20006b40

08001524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff ffee 	bl	800150c <HAL_GetTick>
 8001530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d005      	beq.n	800154a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_Delay+0x40>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4413      	add	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800154a:	bf00      	nop
 800154c:	f7ff ffde 	bl	800150c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	429a      	cmp	r2, r3
 800155a:	d8f7      	bhi.n	800154c <HAL_Delay+0x28>
  {
  }
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000018 	.word	0x20000018

08001568 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e0ed      	b.n	8001756 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fcfc 	bl	8000f84 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0202 	bic.w	r2, r2, #2
 800159a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800159c:	f7ff ffb6 	bl	800150c <HAL_GetTick>
 80015a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015a2:	e012      	b.n	80015ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a4:	f7ff ffb2 	bl	800150c <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b0a      	cmp	r3, #10
 80015b0:	d90b      	bls.n	80015ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2205      	movs	r2, #5
 80015c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e0c5      	b.n	8001756 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1e5      	bne.n	80015a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e8:	f7ff ff90 	bl	800150c <HAL_GetTick>
 80015ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ee:	e012      	b.n	8001616 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015f0:	f7ff ff8c 	bl	800150c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b0a      	cmp	r3, #10
 80015fc:	d90b      	bls.n	8001616 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2205      	movs	r2, #5
 800160e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e09f      	b.n	8001756 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0e5      	beq.n	80015f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7e1b      	ldrb	r3, [r3, #24]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d108      	bne.n	800163e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e007      	b.n	800164e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7e5b      	ldrb	r3, [r3, #25]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d108      	bne.n	8001668 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e007      	b.n	8001678 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001676:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7e9b      	ldrb	r3, [r3, #26]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d108      	bne.n	8001692 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0220 	orr.w	r2, r2, #32
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e007      	b.n	80016a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0220 	bic.w	r2, r2, #32
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7edb      	ldrb	r3, [r3, #27]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d108      	bne.n	80016bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0210 	bic.w	r2, r2, #16
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	e007      	b.n	80016cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0210 	orr.w	r2, r2, #16
 80016ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7f1b      	ldrb	r3, [r3, #28]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d108      	bne.n	80016e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0208 	orr.w	r2, r2, #8
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	e007      	b.n	80016f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0208 	bic.w	r2, r2, #8
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7f5b      	ldrb	r3, [r3, #29]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d108      	bne.n	8001710 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0204 	orr.w	r2, r2, #4
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e007      	b.n	8001720 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0204 	bic.w	r2, r2, #4
 800171e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	ea42 0103 	orr.w	r1, r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	1e5a      	subs	r2, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001776:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001778:	7cfb      	ldrb	r3, [r7, #19]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d003      	beq.n	8001786 <HAL_CAN_ConfigFilter+0x26>
 800177e:	7cfb      	ldrb	r3, [r7, #19]
 8001780:	2b02      	cmp	r3, #2
 8001782:	f040 80c7 	bne.w	8001914 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a69      	ldr	r2, [pc, #420]	; (8001930 <HAL_CAN_ConfigFilter+0x1d0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d001      	beq.n	8001794 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001790:	4b68      	ldr	r3, [pc, #416]	; (8001934 <HAL_CAN_ConfigFilter+0x1d4>)
 8001792:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	4a63      	ldr	r2, [pc, #396]	; (8001934 <HAL_CAN_ConfigFilter+0x1d4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d111      	bne.n	80017d0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017b2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	431a      	orrs	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	2201      	movs	r2, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d123      	bne.n	8001842 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	43db      	mvns	r3, r3
 8001804:	401a      	ands	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800181c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3248      	adds	r2, #72	; 0x48
 8001822:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001836:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001838:	6979      	ldr	r1, [r7, #20]
 800183a:	3348      	adds	r3, #72	; 0x48
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	440b      	add	r3, r1
 8001840:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d122      	bne.n	8001890 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	431a      	orrs	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800186a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3248      	adds	r2, #72	; 0x48
 8001870:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001884:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001886:	6979      	ldr	r1, [r7, #20]
 8001888:	3348      	adds	r3, #72	; 0x48
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018aa:	e007      	b.n	80018bc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d109      	bne.n	80018d8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018d6:	e007      	b.n	80018e8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	431a      	orrs	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d107      	bne.n	8001900 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001906:	f023 0201 	bic.w	r2, r3, #1
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	e006      	b.n	8001922 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
  }
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40003400 	.word	0x40003400
 8001934:	40006400 	.word	0x40006400

08001938 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d12e      	bne.n	80019aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001964:	f7ff fdd2 	bl	800150c <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800196a:	e012      	b.n	8001992 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800196c:	f7ff fdce 	bl	800150c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b0a      	cmp	r3, #10
 8001978:	d90b      	bls.n	8001992 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2205      	movs	r2, #5
 800198a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e012      	b.n	80019b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e5      	bne.n	800196c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e006      	b.n	80019b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
  }
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d003      	beq.n	80019e4 <HAL_CAN_GetRxMessage+0x24>
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	f040 80f3 	bne.w	8001bca <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10e      	bne.n	8001a08 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d116      	bne.n	8001a26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0e7      	b.n	8001bd8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d107      	bne.n	8001a26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0d8      	b.n	8001bd8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	331b      	adds	r3, #27
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	4413      	add	r3, r2
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0204 	and.w	r2, r3, #4
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10c      	bne.n	8001a5e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	331b      	adds	r3, #27
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	4413      	add	r3, r2
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0d5b      	lsrs	r3, r3, #21
 8001a54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e00b      	b.n	8001a76 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	331b      	adds	r3, #27
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	4413      	add	r3, r2
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	08db      	lsrs	r3, r3, #3
 8001a6e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	331b      	adds	r3, #27
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	4413      	add	r3, r2
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0202 	and.w	r2, r3, #2
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	331b      	adds	r3, #27
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	4413      	add	r3, r2
 8001a98:	3304      	adds	r3, #4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 020f 	and.w	r2, r3, #15
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	331b      	adds	r3, #27
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	331b      	adds	r3, #27
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3304      	adds	r3, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0a1a      	lsrs	r2, r3, #8
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0c1a      	lsrs	r2, r3, #16
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	3302      	adds	r3, #2
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	4413      	add	r3, r2
 8001b28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0e1a      	lsrs	r2, r3, #24
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	3303      	adds	r3, #3
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0a1a      	lsrs	r2, r3, #8
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	3305      	adds	r3, #5
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	4413      	add	r3, r2
 8001b74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	0c1a      	lsrs	r2, r3, #16
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	3306      	adds	r3, #6
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0e1a      	lsrs	r2, r3, #24
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3307      	adds	r3, #7
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d108      	bne.n	8001bb6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0220 	orr.w	r2, r2, #32
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	e007      	b.n	8001bc6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0220 	orr.w	r2, r2, #32
 8001bc4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e006      	b.n	8001bd8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
  }
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d002      	beq.n	8001c02 <HAL_CAN_ActivateNotification+0x1e>
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d109      	bne.n	8001c16 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6959      	ldr	r1, [r3, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e006      	b.n	8001c24 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
  }
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c40:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d002      	beq.n	8001c4e <HAL_CAN_DeactivateNotification+0x1e>
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d10a      	bne.n	8001c64 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6959      	ldr	r1, [r3, #20]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	43da      	mvns	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e006      	b.n	8001c72 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
  }
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b08a      	sub	sp, #40	; 0x28
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d07c      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d023      	beq.n	8001d16 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f97d 	bl	8001fe0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001ce6:	e016      	b.n	8001d16 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d004      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	e00c      	b.n	8001d16 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d004      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0e:	e002      	b.n	8001d16 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f983 	bl	800201c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d024      	beq.n	8001d6a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f95d 	bl	8001ff4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001d3a:	e016      	b.n	8001d6a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d004      	beq.n	8001d50 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4e:	e00c      	b.n	8001d6a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	e002      	b.n	8001d6a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f963 	bl	8002030 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d024      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f93d 	bl	8002008 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d8e:	e016      	b.n	8001dbe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d004      	beq.n	8001da4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
 8001da2:	e00c      	b.n	8001dbe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
 8001db6:	e002      	b.n	8001dbe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f943 	bl	8002044 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00c      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2210      	movs	r2, #16
 8001de0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00b      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f92a 	bl	8002058 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d009      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7fe fe6d 	bl	8000afc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00c      	beq.n	8001e46 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2210      	movs	r2, #16
 8001e44:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00b      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d006      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2208      	movs	r2, #8
 8001e60:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f90c 	bl	8002080 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f8f3 	bl	800206c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00b      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d006      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8f6 	bl	8002094 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f8ef 	bl	80020a8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d075      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d06c      	beq.n	8001fb8 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d03d      	beq.n	8001fb8 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d038      	beq.n	8001fb8 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f4c:	2b30      	cmp	r3, #48	; 0x30
 8001f4e:	d017      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x302>
 8001f50:	2b30      	cmp	r3, #48	; 0x30
 8001f52:	d804      	bhi.n	8001f5e <HAL_CAN_IRQHandler+0x2e0>
 8001f54:	2b10      	cmp	r3, #16
 8001f56:	d009      	beq.n	8001f6c <HAL_CAN_IRQHandler+0x2ee>
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d00c      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f5c:	e024      	b.n	8001fa8 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001f5e:	2b50      	cmp	r3, #80	; 0x50
 8001f60:	d018      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x316>
 8001f62:	2b60      	cmp	r3, #96	; 0x60
 8001f64:	d01b      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x320>
 8001f66:	2b40      	cmp	r3, #64	; 0x40
 8001f68:	d00f      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x30c>
            break;
 8001f6a:	e01d      	b.n	8001fa8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f043 0308 	orr.w	r3, r3, #8
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f74:	e018      	b.n	8001fa8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f043 0310 	orr.w	r3, r3, #16
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f7e:	e013      	b.n	8001fa8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	f043 0320 	orr.w	r3, r3, #32
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f88:	e00e      	b.n	8001fa8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f92:	e009      	b.n	8001fa8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f9c:	e004      	b.n	8001fa8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fa6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699a      	ldr	r2, [r3, #24]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fb6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f872 	bl	80020bc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3728      	adds	r7, #40	; 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <__NVIC_SetPriorityGrouping+0x40>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fe:	4a04      	ldr	r2, [pc, #16]	; (8002110 <__NVIC_SetPriorityGrouping+0x40>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	60d3      	str	r3, [r2, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00
 8002114:	05fa0000 	.word	0x05fa0000

08002118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db0b      	blt.n	800215e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4907      	ldr	r1, [pc, #28]	; (800216c <__NVIC_EnableIRQ+0x38>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2001      	movs	r0, #1
 8002156:	fa00 f202 	lsl.w	r2, r0, r2
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	; (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	; (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff4c 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002252:	f7ff ff61 	bl	8002118 <__NVIC_GetPriorityGrouping>
 8002256:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	6978      	ldr	r0, [r7, #20]
 800225e:	f7ff ffb1 	bl	80021c4 <NVIC_EncodePriority>
 8002262:	4602      	mov	r2, r0
 8002264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff ff80 	bl	8002170 <__NVIC_SetPriority>
}
 8002270:	bf00      	nop
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff54 	bl	8002134 <__NVIC_EnableIRQ>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022a0:	f7ff f934 	bl	800150c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e099      	b.n	80023e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d0:	e00f      	b.n	80022f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022d2:	f7ff f91b 	bl	800150c <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d908      	bls.n	80022f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2203      	movs	r2, #3
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e078      	b.n	80023e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e8      	bne.n	80022d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4b38      	ldr	r3, [pc, #224]	; (80023ec <HAL_DMA_Init+0x158>)
 800230c:	4013      	ands	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800231e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002336:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4313      	orrs	r3, r2
 8002342:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	2b04      	cmp	r3, #4
 800234a:	d107      	bne.n	800235c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	4313      	orrs	r3, r2
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f023 0307 	bic.w	r3, r3, #7
 8002372:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	2b04      	cmp	r3, #4
 8002384:	d117      	bne.n	80023b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00e      	beq.n	80023b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 faa5 	bl	80028e8 <DMA_CheckFifoParam>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2240      	movs	r2, #64	; 0x40
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023b2:	2301      	movs	r3, #1
 80023b4:	e016      	b.n	80023e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fa5c 	bl	800287c <DMA_CalcBaseAndBitshift>
 80023c4:	4603      	mov	r3, r0
 80023c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023cc:	223f      	movs	r2, #63	; 0x3f
 80023ce:	409a      	lsls	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	e010803f 	.word	0xe010803f

080023f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_DMA_Start_IT+0x26>
 8002412:	2302      	movs	r3, #2
 8002414:	e048      	b.n	80024a8 <HAL_DMA_Start_IT+0xb8>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d137      	bne.n	800249a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2202      	movs	r2, #2
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f9ee 	bl	8002820 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	223f      	movs	r2, #63	; 0x3f
 800244a:	409a      	lsls	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0216 	orr.w	r2, r2, #22
 800245e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800246e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0208 	orr.w	r2, r2, #8
 8002486:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e005      	b.n	80024a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
 80024a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d004      	beq.n	80024ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2280      	movs	r2, #128	; 0x80
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e00c      	b.n	80024e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2205      	movs	r2, #5
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0201 	bic.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002500:	4b92      	ldr	r3, [pc, #584]	; (800274c <HAL_DMA_IRQHandler+0x258>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a92      	ldr	r2, [pc, #584]	; (8002750 <HAL_DMA_IRQHandler+0x25c>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	0a9b      	lsrs	r3, r3, #10
 800250c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	2208      	movs	r2, #8
 8002520:	409a      	lsls	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01a      	beq.n	8002560 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0204 	bic.w	r2, r2, #4
 8002546:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2208      	movs	r2, #8
 800254e:	409a      	lsls	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	2201      	movs	r2, #1
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d012      	beq.n	8002596 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	2201      	movs	r2, #1
 8002584:	409a      	lsls	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	f043 0202 	orr.w	r2, r3, #2
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259a:	2204      	movs	r2, #4
 800259c:	409a      	lsls	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d012      	beq.n	80025cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00b      	beq.n	80025cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	2204      	movs	r2, #4
 80025ba:	409a      	lsls	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f043 0204 	orr.w	r2, r3, #4
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	2210      	movs	r2, #16
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d043      	beq.n	8002664 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d03c      	beq.n	8002664 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	2210      	movs	r2, #16
 80025f0:	409a      	lsls	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d018      	beq.n	8002636 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d108      	bne.n	8002624 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d024      	beq.n	8002664 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	4798      	blx	r3
 8002622:	e01f      	b.n	8002664 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01b      	beq.n	8002664 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
 8002634:	e016      	b.n	8002664 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d107      	bne.n	8002654 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0208 	bic.w	r2, r2, #8
 8002652:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	2220      	movs	r2, #32
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 808e 	beq.w	8002792 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8086 	beq.w	8002792 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	2220      	movs	r2, #32
 800268c:	409a      	lsls	r2, r3
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b05      	cmp	r3, #5
 800269c:	d136      	bne.n	800270c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0216 	bic.w	r2, r2, #22
 80026ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <HAL_DMA_IRQHandler+0x1da>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0208 	bic.w	r2, r2, #8
 80026dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e2:	223f      	movs	r2, #63	; 0x3f
 80026e4:	409a      	lsls	r2, r3
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d07d      	beq.n	80027fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
        }
        return;
 800270a:	e078      	b.n	80027fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d01c      	beq.n	8002754 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d108      	bne.n	800273a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	2b00      	cmp	r3, #0
 800272e:	d030      	beq.n	8002792 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
 8002738:	e02b      	b.n	8002792 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273e:	2b00      	cmp	r3, #0
 8002740:	d027      	beq.n	8002792 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	4798      	blx	r3
 800274a:	e022      	b.n	8002792 <HAL_DMA_IRQHandler+0x29e>
 800274c:	20000010 	.word	0x20000010
 8002750:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10f      	bne.n	8002782 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0210 	bic.w	r2, r2, #16
 8002770:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002796:	2b00      	cmp	r3, #0
 8002798:	d032      	beq.n	8002800 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d022      	beq.n	80027ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2205      	movs	r2, #5
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3301      	adds	r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d307      	bcc.n	80027da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f2      	bne.n	80027be <HAL_DMA_IRQHandler+0x2ca>
 80027d8:	e000      	b.n	80027dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80027da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
 80027fc:	e000      	b.n	8002800 <HAL_DMA_IRQHandler+0x30c>
        return;
 80027fe:	bf00      	nop
    }
  }
}
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop

08002808 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800283c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d108      	bne.n	8002860 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800285e:	e007      	b.n	8002870 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	60da      	str	r2, [r3, #12]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	3b10      	subs	r3, #16
 800288c:	4a13      	ldr	r2, [pc, #76]	; (80028dc <DMA_CalcBaseAndBitshift+0x60>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <DMA_CalcBaseAndBitshift+0x64>)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4413      	add	r3, r2
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d908      	bls.n	80028bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <DMA_CalcBaseAndBitshift+0x68>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	1d1a      	adds	r2, r3, #4
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	659a      	str	r2, [r3, #88]	; 0x58
 80028ba:	e006      	b.n	80028ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <DMA_CalcBaseAndBitshift+0x68>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	aaaaaaab 	.word	0xaaaaaaab
 80028e0:	0800f1b0 	.word	0x0800f1b0
 80028e4:	fffffc00 	.word	0xfffffc00

080028e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d11f      	bne.n	8002942 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d855      	bhi.n	80029b4 <DMA_CheckFifoParam+0xcc>
 8002908:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <DMA_CheckFifoParam+0x28>)
 800290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290e:	bf00      	nop
 8002910:	08002921 	.word	0x08002921
 8002914:	08002933 	.word	0x08002933
 8002918:	08002921 	.word	0x08002921
 800291c:	080029b5 	.word	0x080029b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d045      	beq.n	80029b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002930:	e042      	b.n	80029b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800293a:	d13f      	bne.n	80029bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002940:	e03c      	b.n	80029bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800294a:	d121      	bne.n	8002990 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d836      	bhi.n	80029c0 <DMA_CheckFifoParam+0xd8>
 8002952:	a201      	add	r2, pc, #4	; (adr r2, 8002958 <DMA_CheckFifoParam+0x70>)
 8002954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002958:	08002969 	.word	0x08002969
 800295c:	0800296f 	.word	0x0800296f
 8002960:	08002969 	.word	0x08002969
 8002964:	08002981 	.word	0x08002981
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      break;
 800296c:	e02f      	b.n	80029ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d024      	beq.n	80029c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800297e:	e021      	b.n	80029c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002988:	d11e      	bne.n	80029c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800298e:	e01b      	b.n	80029c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d902      	bls.n	800299c <DMA_CheckFifoParam+0xb4>
 8002996:	2b03      	cmp	r3, #3
 8002998:	d003      	beq.n	80029a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800299a:	e018      	b.n	80029ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      break;
 80029a0:	e015      	b.n	80029ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00e      	beq.n	80029cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
      break;
 80029b2:	e00b      	b.n	80029cc <DMA_CheckFifoParam+0xe4>
      break;
 80029b4:	bf00      	nop
 80029b6:	e00a      	b.n	80029ce <DMA_CheckFifoParam+0xe6>
      break;
 80029b8:	bf00      	nop
 80029ba:	e008      	b.n	80029ce <DMA_CheckFifoParam+0xe6>
      break;
 80029bc:	bf00      	nop
 80029be:	e006      	b.n	80029ce <DMA_CheckFifoParam+0xe6>
      break;
 80029c0:	bf00      	nop
 80029c2:	e004      	b.n	80029ce <DMA_CheckFifoParam+0xe6>
      break;
 80029c4:	bf00      	nop
 80029c6:	e002      	b.n	80029ce <DMA_CheckFifoParam+0xe6>
      break;   
 80029c8:	bf00      	nop
 80029ca:	e000      	b.n	80029ce <DMA_CheckFifoParam+0xe6>
      break;
 80029cc:	bf00      	nop
    }
  } 
  
  return status; 
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029dc:	b480      	push	{r7}
 80029de:	b089      	sub	sp, #36	; 0x24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	e175      	b.n	8002ce8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029fc:	2201      	movs	r2, #1
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	f040 8164 	bne.w	8002ce2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d00b      	beq.n	8002a3a <HAL_GPIO_Init+0x5e>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a2e:	2b11      	cmp	r3, #17
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b12      	cmp	r3, #18
 8002a38:	d130      	bne.n	8002a9c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2203      	movs	r2, #3
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a70:	2201      	movs	r2, #1
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 0201 	and.w	r2, r3, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x100>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b12      	cmp	r3, #18
 8002ada:	d123      	bne.n	8002b24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	08da      	lsrs	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3208      	adds	r2, #8
 8002ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	220f      	movs	r2, #15
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	08da      	lsrs	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3208      	adds	r2, #8
 8002b1e:	69b9      	ldr	r1, [r7, #24]
 8002b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	2203      	movs	r2, #3
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0203 	and.w	r2, r3, #3
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80be 	beq.w	8002ce2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b66:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <HAL_GPIO_Init+0x320>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	4a64      	ldr	r2, [pc, #400]	; (8002cfc <HAL_GPIO_Init+0x320>)
 8002b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b70:	6453      	str	r3, [r2, #68]	; 0x44
 8002b72:	4b62      	ldr	r3, [pc, #392]	; (8002cfc <HAL_GPIO_Init+0x320>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b7e:	4a60      	ldr	r2, [pc, #384]	; (8002d00 <HAL_GPIO_Init+0x324>)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	3302      	adds	r3, #2
 8002b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	220f      	movs	r2, #15
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a57      	ldr	r2, [pc, #348]	; (8002d04 <HAL_GPIO_Init+0x328>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d037      	beq.n	8002c1a <HAL_GPIO_Init+0x23e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a56      	ldr	r2, [pc, #344]	; (8002d08 <HAL_GPIO_Init+0x32c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d031      	beq.n	8002c16 <HAL_GPIO_Init+0x23a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a55      	ldr	r2, [pc, #340]	; (8002d0c <HAL_GPIO_Init+0x330>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d02b      	beq.n	8002c12 <HAL_GPIO_Init+0x236>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a54      	ldr	r2, [pc, #336]	; (8002d10 <HAL_GPIO_Init+0x334>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d025      	beq.n	8002c0e <HAL_GPIO_Init+0x232>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a53      	ldr	r2, [pc, #332]	; (8002d14 <HAL_GPIO_Init+0x338>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01f      	beq.n	8002c0a <HAL_GPIO_Init+0x22e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a52      	ldr	r2, [pc, #328]	; (8002d18 <HAL_GPIO_Init+0x33c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d019      	beq.n	8002c06 <HAL_GPIO_Init+0x22a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a51      	ldr	r2, [pc, #324]	; (8002d1c <HAL_GPIO_Init+0x340>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_GPIO_Init+0x226>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a50      	ldr	r2, [pc, #320]	; (8002d20 <HAL_GPIO_Init+0x344>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00d      	beq.n	8002bfe <HAL_GPIO_Init+0x222>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4f      	ldr	r2, [pc, #316]	; (8002d24 <HAL_GPIO_Init+0x348>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <HAL_GPIO_Init+0x21e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4e      	ldr	r2, [pc, #312]	; (8002d28 <HAL_GPIO_Init+0x34c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_GPIO_Init+0x21a>
 8002bf2:	2309      	movs	r3, #9
 8002bf4:	e012      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	e010      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002bfa:	2308      	movs	r3, #8
 8002bfc:	e00e      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002bfe:	2307      	movs	r3, #7
 8002c00:	e00c      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c02:	2306      	movs	r3, #6
 8002c04:	e00a      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c06:	2305      	movs	r3, #5
 8002c08:	e008      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	e006      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e004      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e002      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <HAL_GPIO_Init+0x240>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	f002 0203 	and.w	r2, r2, #3
 8002c22:	0092      	lsls	r2, r2, #2
 8002c24:	4093      	lsls	r3, r2
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c2c:	4934      	ldr	r1, [pc, #208]	; (8002d00 <HAL_GPIO_Init+0x324>)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	3302      	adds	r3, #2
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c3a:	4b3c      	ldr	r3, [pc, #240]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c5e:	4a33      	ldr	r2, [pc, #204]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c64:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c88:	4a28      	ldr	r2, [pc, #160]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c8e:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb2:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cdc:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <HAL_GPIO_Init+0x350>)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b0f      	cmp	r3, #15
 8002cec:	f67f ae86 	bls.w	80029fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	3724      	adds	r7, #36	; 0x24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40013800 	.word	0x40013800
 8002d04:	40020000 	.word	0x40020000
 8002d08:	40020400 	.word	0x40020400
 8002d0c:	40020800 	.word	0x40020800
 8002d10:	40020c00 	.word	0x40020c00
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40021400 	.word	0x40021400
 8002d1c:	40021800 	.word	0x40021800
 8002d20:	40021c00 	.word	0x40021c00
 8002d24:	40022000 	.word	0x40022000
 8002d28:	40022400 	.word	0x40022400
 8002d2c:	40013c00 	.word	0x40013c00

08002d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	887b      	ldrh	r3, [r7, #2]
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	e001      	b.n	8002d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d70:	787b      	ldrb	r3, [r7, #1]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d7c:	e003      	b.n	8002d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	041a      	lsls	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	619a      	str	r2, [r3, #24]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002daa:	887b      	ldrh	r3, [r7, #2]
 8002dac:	041a      	lsls	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002db2:	e002      	b.n	8002dba <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002db4:	887a      	ldrh	r2, [r7, #2]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	619a      	str	r2, [r3, #24]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc8:	b08f      	sub	sp, #60	; 0x3c
 8002dca:	af0a      	add	r7, sp, #40	; 0x28
 8002dcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e116      	b.n	8003006 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe fa38 	bl	8001268 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f004 f9f2 	bl	8007200 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	687e      	ldr	r6, [r7, #4]
 8002e24:	466d      	mov	r5, sp
 8002e26:	f106 0410 	add.w	r4, r6, #16
 8002e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e36:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e3a:	1d33      	adds	r3, r6, #4
 8002e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3e:	6838      	ldr	r0, [r7, #0]
 8002e40:	f004 f986 	bl	8007150 <USB_CoreInit>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e0d7      	b.n	8003006 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f004 f9e0 	bl	8007222 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e04a      	b.n	8002efe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	333d      	adds	r3, #61	; 0x3d
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	333c      	adds	r3, #60	; 0x3c
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	b298      	uxth	r0, r3
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3342      	adds	r3, #66	; 0x42
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	333f      	adds	r3, #63	; 0x3f
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3344      	adds	r3, #68	; 0x44
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3348      	adds	r3, #72	; 0x48
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3350      	adds	r3, #80	; 0x50
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	3301      	adds	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d3af      	bcc.n	8002e68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	e044      	b.n	8002f98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	3301      	adds	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d3b5      	bcc.n	8002f0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	687e      	ldr	r6, [r7, #4]
 8002faa:	466d      	mov	r5, sp
 8002fac:	f106 0410 	add.w	r4, r6, #16
 8002fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc0:	1d33      	adds	r3, r6, #4
 8002fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc4:	6838      	ldr	r0, [r7, #0]
 8002fc6:	f004 f957 	bl	8007278 <USB_DevInit>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e014      	b.n	8003006 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d102      	bne.n	8002ffa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f80b 	bl	8003010 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f004 fb09 	bl	8007616 <USB_DevDisconnect>

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003010 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_PCDEx_ActivateLPM+0x44>)
 8003040:	4313      	orrs	r3, r2
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	10000003 	.word	0x10000003

08003058 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003066:	6013      	str	r3, [r2, #0]
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40007000 	.word	0x40007000

08003078 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	4b23      	ldr	r3, [pc, #140]	; (8003110 <HAL_PWREx_EnableOverDrive+0x98>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a22      	ldr	r2, [pc, #136]	; (8003110 <HAL_PWREx_EnableOverDrive+0x98>)
 8003088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_PWREx_EnableOverDrive+0x98>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800309a:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <HAL_PWREx_EnableOverDrive+0x9c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1d      	ldr	r2, [pc, #116]	; (8003114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030a6:	f7fe fa31 	bl	800150c <HAL_GetTick>
 80030aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030ac:	e009      	b.n	80030c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030ae:	f7fe fa2d 	bl	800150c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030bc:	d901      	bls.n	80030c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e022      	b.n	8003108 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030c2:	4b14      	ldr	r3, [pc, #80]	; (8003114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ce:	d1ee      	bne.n	80030ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030d0:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0f      	ldr	r2, [pc, #60]	; (8003114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030dc:	f7fe fa16 	bl	800150c <HAL_GetTick>
 80030e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030e2:	e009      	b.n	80030f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030e4:	f7fe fa12 	bl	800150c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f2:	d901      	bls.n	80030f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e007      	b.n	8003108 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003104:	d1ee      	bne.n	80030e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40023800 	.word	0x40023800
 8003114:	40007000 	.word	0x40007000

08003118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e29b      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8087 	beq.w	800324a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800313c:	4b96      	ldr	r3, [pc, #600]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b04      	cmp	r3, #4
 8003146:	d00c      	beq.n	8003162 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003148:	4b93      	ldr	r3, [pc, #588]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b08      	cmp	r3, #8
 8003152:	d112      	bne.n	800317a <HAL_RCC_OscConfig+0x62>
 8003154:	4b90      	ldr	r3, [pc, #576]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003160:	d10b      	bne.n	800317a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003162:	4b8d      	ldr	r3, [pc, #564]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d06c      	beq.n	8003248 <HAL_RCC_OscConfig+0x130>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d168      	bne.n	8003248 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e275      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x7a>
 8003184:	4b84      	ldr	r3, [pc, #528]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a83      	ldr	r2, [pc, #524]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 800318a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	e02e      	b.n	80031f0 <HAL_RCC_OscConfig+0xd8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x9c>
 800319a:	4b7f      	ldr	r3, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a7e      	ldr	r2, [pc, #504]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b7c      	ldr	r3, [pc, #496]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a7b      	ldr	r2, [pc, #492]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e01d      	b.n	80031f0 <HAL_RCC_OscConfig+0xd8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0xc0>
 80031be:	4b76      	ldr	r3, [pc, #472]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a75      	ldr	r2, [pc, #468]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b73      	ldr	r3, [pc, #460]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a72      	ldr	r2, [pc, #456]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e00b      	b.n	80031f0 <HAL_RCC_OscConfig+0xd8>
 80031d8:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a6e      	ldr	r2, [pc, #440]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b6c      	ldr	r3, [pc, #432]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a6b      	ldr	r2, [pc, #428]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80031ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe f988 	bl	800150c <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003200:	f7fe f984 	bl	800150c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e229      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	4b61      	ldr	r3, [pc, #388]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0xe8>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe f974 	bl	800150c <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003228:	f7fe f970 	bl	800150c <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	; 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e215      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	4b57      	ldr	r3, [pc, #348]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x110>
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d069      	beq.n	800332a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003256:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003262:	4b4d      	ldr	r3, [pc, #308]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b08      	cmp	r3, #8
 800326c:	d11c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x190>
 800326e:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_RCC_OscConfig+0x17a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d001      	beq.n	8003292 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e1e9      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003292:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	493d      	ldr	r1, [pc, #244]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a6:	e040      	b.n	800332a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d023      	beq.n	80032f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b0:	4b39      	ldr	r3, [pc, #228]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a38      	ldr	r2, [pc, #224]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe f926 	bl	800150c <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c4:	f7fe f922 	bl	800150c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e1c7      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d6:	4b30      	ldr	r3, [pc, #192]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e2:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4929      	ldr	r1, [pc, #164]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
 80032f6:	e018      	b.n	800332a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a26      	ldr	r2, [pc, #152]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe f902 	bl	800150c <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330c:	f7fe f8fe 	bl	800150c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e1a3      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331e:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d038      	beq.n	80033a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d019      	beq.n	8003372 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333e:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	4a15      	ldr	r2, [pc, #84]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334a:	f7fe f8df 	bl	800150c <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003352:	f7fe f8db 	bl	800150c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e180      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x23a>
 8003370:	e01a      	b.n	80033a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <HAL_RCC_OscConfig+0x280>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337e:	f7fe f8c5 	bl	800150c <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	e00a      	b.n	800339c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003386:	f7fe f8c1 	bl	800150c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d903      	bls.n	800339c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e166      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
 8003398:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800339c:	4b92      	ldr	r3, [pc, #584]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800339e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1ee      	bne.n	8003386 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80a4 	beq.w	80034fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b6:	4b8c      	ldr	r3, [pc, #560]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10d      	bne.n	80033de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	4b89      	ldr	r3, [pc, #548]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	4a88      	ldr	r2, [pc, #544]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033cc:	6413      	str	r3, [r2, #64]	; 0x40
 80033ce:	4b86      	ldr	r3, [pc, #536]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033de:	4b83      	ldr	r3, [pc, #524]	; (80035ec <HAL_RCC_OscConfig+0x4d4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d118      	bne.n	800341c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033ea:	4b80      	ldr	r3, [pc, #512]	; (80035ec <HAL_RCC_OscConfig+0x4d4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a7f      	ldr	r2, [pc, #508]	; (80035ec <HAL_RCC_OscConfig+0x4d4>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f6:	f7fe f889 	bl	800150c <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fe:	f7fe f885 	bl	800150c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b64      	cmp	r3, #100	; 0x64
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e12a      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003410:	4b76      	ldr	r3, [pc, #472]	; (80035ec <HAL_RCC_OscConfig+0x4d4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d106      	bne.n	8003432 <HAL_RCC_OscConfig+0x31a>
 8003424:	4b70      	ldr	r3, [pc, #448]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a6f      	ldr	r2, [pc, #444]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6713      	str	r3, [r2, #112]	; 0x70
 8003430:	e02d      	b.n	800348e <HAL_RCC_OscConfig+0x376>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x33c>
 800343a:	4b6b      	ldr	r3, [pc, #428]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	4a6a      	ldr	r2, [pc, #424]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	6713      	str	r3, [r2, #112]	; 0x70
 8003446:	4b68      	ldr	r3, [pc, #416]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	4a67      	ldr	r2, [pc, #412]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	6713      	str	r3, [r2, #112]	; 0x70
 8003452:	e01c      	b.n	800348e <HAL_RCC_OscConfig+0x376>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d10c      	bne.n	8003476 <HAL_RCC_OscConfig+0x35e>
 800345c:	4b62      	ldr	r3, [pc, #392]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	4a61      	ldr	r2, [pc, #388]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003462:	f043 0304 	orr.w	r3, r3, #4
 8003466:	6713      	str	r3, [r2, #112]	; 0x70
 8003468:	4b5f      	ldr	r3, [pc, #380]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	4a5e      	ldr	r2, [pc, #376]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	; 0x70
 8003474:	e00b      	b.n	800348e <HAL_RCC_OscConfig+0x376>
 8003476:	4b5c      	ldr	r3, [pc, #368]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	4a5b      	ldr	r2, [pc, #364]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	6713      	str	r3, [r2, #112]	; 0x70
 8003482:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	4a58      	ldr	r2, [pc, #352]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003488:	f023 0304 	bic.w	r3, r3, #4
 800348c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d015      	beq.n	80034c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7fe f839 	bl	800150c <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	e00a      	b.n	80034b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349e:	f7fe f835 	bl	800150c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e0d8      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b4:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0ee      	beq.n	800349e <HAL_RCC_OscConfig+0x386>
 80034c0:	e014      	b.n	80034ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c2:	f7fe f823 	bl	800150c <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fe f81f 	bl	800150c <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e0c2      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e0:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ee      	bne.n	80034ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d105      	bne.n	80034fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f2:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a3c      	ldr	r2, [pc, #240]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80ae 	beq.w	8003664 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003508:	4b37      	ldr	r3, [pc, #220]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b08      	cmp	r3, #8
 8003512:	d06d      	beq.n	80035f0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d14b      	bne.n	80035b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351c:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a31      	ldr	r2, [pc, #196]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fd fff0 	bl	800150c <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7fd ffec 	bl	800150c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e091      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	019b      	lsls	r3, r3, #6
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	085b      	lsrs	r3, r3, #1
 8003566:	3b01      	subs	r3, #1
 8003568:	041b      	lsls	r3, r3, #16
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	061b      	lsls	r3, r3, #24
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	071b      	lsls	r3, r3, #28
 800357a:	491b      	ldr	r1, [pc, #108]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 8003586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800358a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fd ffbe 	bl	800150c <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fd ffba 	bl	800150c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e05f      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x47c>
 80035b2:	e057      	b.n	8003664 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fd ffa4 	bl	800150c <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fd ffa0 	bl	800150c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e045      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4b0>
 80035e6:	e03d      	b.n	8003664 <HAL_RCC_OscConfig+0x54c>
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035f0:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <HAL_RCC_OscConfig+0x558>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d030      	beq.n	8003660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d129      	bne.n	8003660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d122      	bne.n	8003660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003620:	4013      	ands	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003626:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003628:	4293      	cmp	r3, r2
 800362a:	d119      	bne.n	8003660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	085b      	lsrs	r3, r3, #1
 8003638:	3b01      	subs	r3, #1
 800363a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d10f      	bne.n	8003660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d107      	bne.n	8003660 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800

08003674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0d0      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800368c:	4b6a      	ldr	r3, [pc, #424]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d910      	bls.n	80036bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b67      	ldr	r3, [pc, #412]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 020f 	bic.w	r2, r3, #15
 80036a2:	4965      	ldr	r1, [pc, #404]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b63      	ldr	r3, [pc, #396]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0b8      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d020      	beq.n	800370a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d4:	4b59      	ldr	r3, [pc, #356]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	4a58      	ldr	r2, [pc, #352]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80036da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ec:	4b53      	ldr	r3, [pc, #332]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a52      	ldr	r2, [pc, #328]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80036f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f8:	4b50      	ldr	r3, [pc, #320]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	494d      	ldr	r1, [pc, #308]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d040      	beq.n	8003798 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d107      	bne.n	800372e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d115      	bne.n	8003756 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e07f      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003736:	4b41      	ldr	r3, [pc, #260]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e073      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003746:	4b3d      	ldr	r3, [pc, #244]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e06b      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003756:	4b39      	ldr	r3, [pc, #228]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f023 0203 	bic.w	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4936      	ldr	r1, [pc, #216]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003768:	f7fd fed0 	bl	800150c <HAL_GetTick>
 800376c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376e:	e00a      	b.n	8003786 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003770:	f7fd fecc 	bl	800150c <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e053      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	4b2d      	ldr	r3, [pc, #180]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 020c 	and.w	r2, r3, #12
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	429a      	cmp	r2, r3
 8003796:	d1eb      	bne.n	8003770 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003798:	4b27      	ldr	r3, [pc, #156]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d210      	bcs.n	80037c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 020f 	bic.w	r2, r3, #15
 80037ae:	4922      	ldr	r1, [pc, #136]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b20      	ldr	r3, [pc, #128]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e032      	b.n	800382e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4916      	ldr	r1, [pc, #88]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	490e      	ldr	r1, [pc, #56]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003806:	f000 f821 	bl	800384c <HAL_RCC_GetSysClockFreq>
 800380a:	4601      	mov	r1, r0
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <HAL_RCC_ClockConfig+0x1cc>)
 8003818:	5cd3      	ldrb	r3, [r2, r3]
 800381a:	fa21 f303 	lsr.w	r3, r1, r3
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <HAL_RCC_ClockConfig+0x1d0>)
 8003820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003822:	4b09      	ldr	r3, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1d4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fd6c 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023c00 	.word	0x40023c00
 800383c:	40023800 	.word	0x40023800
 8003840:	0800f198 	.word	0x0800f198
 8003844:	20000010 	.word	0x20000010
 8003848:	20000014 	.word	0x20000014

0800384c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800384c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	607b      	str	r3, [r7, #4]
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	2300      	movs	r3, #0
 800385c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003862:	4b63      	ldr	r3, [pc, #396]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b04      	cmp	r3, #4
 800386c:	d007      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0x32>
 800386e:	2b08      	cmp	r3, #8
 8003870:	d008      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x38>
 8003872:	2b00      	cmp	r3, #0
 8003874:	f040 80b4 	bne.w	80039e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b5e      	ldr	r3, [pc, #376]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800387a:	60bb      	str	r3, [r7, #8]
      break;
 800387c:	e0b3      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800387e:	4b5e      	ldr	r3, [pc, #376]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003880:	60bb      	str	r3, [r7, #8]
      break;
 8003882:	e0b0      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003884:	4b5a      	ldr	r3, [pc, #360]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800388c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800388e:	4b58      	ldr	r3, [pc, #352]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d04a      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389a:	4b55      	ldr	r3, [pc, #340]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	099b      	lsrs	r3, r3, #6
 80038a0:	f04f 0400 	mov.w	r4, #0
 80038a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	ea03 0501 	and.w	r5, r3, r1
 80038b0:	ea04 0602 	and.w	r6, r4, r2
 80038b4:	4629      	mov	r1, r5
 80038b6:	4632      	mov	r2, r6
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	f04f 0400 	mov.w	r4, #0
 80038c0:	0154      	lsls	r4, r2, #5
 80038c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038c6:	014b      	lsls	r3, r1, #5
 80038c8:	4619      	mov	r1, r3
 80038ca:	4622      	mov	r2, r4
 80038cc:	1b49      	subs	r1, r1, r5
 80038ce:	eb62 0206 	sbc.w	r2, r2, r6
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	f04f 0400 	mov.w	r4, #0
 80038da:	0194      	lsls	r4, r2, #6
 80038dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038e0:	018b      	lsls	r3, r1, #6
 80038e2:	1a5b      	subs	r3, r3, r1
 80038e4:	eb64 0402 	sbc.w	r4, r4, r2
 80038e8:	f04f 0100 	mov.w	r1, #0
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	00e2      	lsls	r2, r4, #3
 80038f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038f6:	00d9      	lsls	r1, r3, #3
 80038f8:	460b      	mov	r3, r1
 80038fa:	4614      	mov	r4, r2
 80038fc:	195b      	adds	r3, r3, r5
 80038fe:	eb44 0406 	adc.w	r4, r4, r6
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	0262      	lsls	r2, r4, #9
 800390c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003910:	0259      	lsls	r1, r3, #9
 8003912:	460b      	mov	r3, r1
 8003914:	4614      	mov	r4, r2
 8003916:	4618      	mov	r0, r3
 8003918:	4621      	mov	r1, r4
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f04f 0400 	mov.w	r4, #0
 8003920:	461a      	mov	r2, r3
 8003922:	4623      	mov	r3, r4
 8003924:	f7fc fc8c 	bl	8000240 <__aeabi_uldivmod>
 8003928:	4603      	mov	r3, r0
 800392a:	460c      	mov	r4, r1
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	e049      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003930:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	f04f 0400 	mov.w	r4, #0
 800393a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	ea03 0501 	and.w	r5, r3, r1
 8003946:	ea04 0602 	and.w	r6, r4, r2
 800394a:	4629      	mov	r1, r5
 800394c:	4632      	mov	r2, r6
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	f04f 0400 	mov.w	r4, #0
 8003956:	0154      	lsls	r4, r2, #5
 8003958:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800395c:	014b      	lsls	r3, r1, #5
 800395e:	4619      	mov	r1, r3
 8003960:	4622      	mov	r2, r4
 8003962:	1b49      	subs	r1, r1, r5
 8003964:	eb62 0206 	sbc.w	r2, r2, r6
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	f04f 0400 	mov.w	r4, #0
 8003970:	0194      	lsls	r4, r2, #6
 8003972:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003976:	018b      	lsls	r3, r1, #6
 8003978:	1a5b      	subs	r3, r3, r1
 800397a:	eb64 0402 	sbc.w	r4, r4, r2
 800397e:	f04f 0100 	mov.w	r1, #0
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	00e2      	lsls	r2, r4, #3
 8003988:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800398c:	00d9      	lsls	r1, r3, #3
 800398e:	460b      	mov	r3, r1
 8003990:	4614      	mov	r4, r2
 8003992:	195b      	adds	r3, r3, r5
 8003994:	eb44 0406 	adc.w	r4, r4, r6
 8003998:	f04f 0100 	mov.w	r1, #0
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	02a2      	lsls	r2, r4, #10
 80039a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039a6:	0299      	lsls	r1, r3, #10
 80039a8:	460b      	mov	r3, r1
 80039aa:	4614      	mov	r4, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	4621      	mov	r1, r4
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f04f 0400 	mov.w	r4, #0
 80039b6:	461a      	mov	r2, r3
 80039b8:	4623      	mov	r3, r4
 80039ba:	f7fc fc41 	bl	8000240 <__aeabi_uldivmod>
 80039be:	4603      	mov	r3, r0
 80039c0:	460c      	mov	r4, r1
 80039c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	3301      	adds	r3, #1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	60bb      	str	r3, [r7, #8]
      break;
 80039de:	e002      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039e2:	60bb      	str	r3, [r7, #8]
      break;
 80039e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e6:	68bb      	ldr	r3, [r7, #8]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	00f42400 	.word	0x00f42400
 80039f8:	007a1200 	.word	0x007a1200

080039fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000010 	.word	0x20000010

08003a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a18:	f7ff fff0 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a1c:	4601      	mov	r1, r0
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0a9b      	lsrs	r3, r3, #10
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4a03      	ldr	r2, [pc, #12]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2a:	5cd3      	ldrb	r3, [r2, r3]
 8003a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	0800f1a8 	.word	0x0800f1a8

08003a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a40:	f7ff ffdc 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a44:	4601      	mov	r1, r0
 8003a46:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	0b5b      	lsrs	r3, r3, #13
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	4a03      	ldr	r2, [pc, #12]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	0800f1a8 	.word	0x0800f1a8

08003a64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	220f      	movs	r2, #15
 8003a72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a74:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0203 	and.w	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003aa6:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <HAL_RCC_GetClockConfig+0x60>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	601a      	str	r2, [r3, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40023c00 	.word	0x40023c00

08003ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d012      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003af0:	4b69      	ldr	r3, [pc, #420]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4a68      	ldr	r2, [pc, #416]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003afa:	6093      	str	r3, [r2, #8]
 8003afc:	4b66      	ldr	r3, [pc, #408]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	4964      	ldr	r1, [pc, #400]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d017      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b22:	4b5d      	ldr	r3, [pc, #372]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	4959      	ldr	r1, [pc, #356]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b40:	d101      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d017      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b5e:	4b4e      	ldr	r3, [pc, #312]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	494a      	ldr	r1, [pc, #296]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 808b 	beq.w	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bac:	4b3a      	ldr	r3, [pc, #232]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	4a39      	ldr	r2, [pc, #228]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb8:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bc4:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a34      	ldr	r2, [pc, #208]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd0:	f7fd fc9c 	bl	800150c <HAL_GetTick>
 8003bd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd8:	f7fd fc98 	bl	800150c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	; 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e38d      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bea:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bf6:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d035      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d02e      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c14:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	4a1a      	ldr	r2, [pc, #104]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c36:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c3c:	4b16      	ldr	r3, [pc, #88]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d114      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fd fc60 	bl	800150c <HAL_GetTick>
 8003c4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fd fc5c 	bl	800150c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e34f      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0ee      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c7e:	d111      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c8e:	400b      	ands	r3, r1
 8003c90:	4901      	ldr	r1, [pc, #4]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40007000 	.word	0x40007000
 8003ca0:	0ffffcff 	.word	0x0ffffcff
 8003ca4:	4bb3      	ldr	r3, [pc, #716]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4ab2      	ldr	r2, [pc, #712]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003caa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cae:	6093      	str	r3, [r2, #8]
 8003cb0:	4bb0      	ldr	r3, [pc, #704]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbc:	49ad      	ldr	r1, [pc, #692]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d010      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cce:	4ba9      	ldr	r3, [pc, #676]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd4:	4aa7      	ldr	r2, [pc, #668]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cde:	4ba5      	ldr	r3, [pc, #660]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	49a2      	ldr	r1, [pc, #648]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cfc:	4b9d      	ldr	r3, [pc, #628]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d0a:	499a      	ldr	r1, [pc, #616]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d1e:	4b95      	ldr	r3, [pc, #596]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d2c:	4991      	ldr	r1, [pc, #580]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d40:	4b8c      	ldr	r3, [pc, #560]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4e:	4989      	ldr	r1, [pc, #548]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d62:	4b84      	ldr	r3, [pc, #528]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	4980      	ldr	r1, [pc, #512]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d84:	4b7b      	ldr	r3, [pc, #492]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8a:	f023 0203 	bic.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	4978      	ldr	r1, [pc, #480]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003da6:	4b73      	ldr	r3, [pc, #460]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dac:	f023 020c 	bic.w	r2, r3, #12
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db4:	496f      	ldr	r1, [pc, #444]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dc8:	4b6a      	ldr	r3, [pc, #424]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd6:	4967      	ldr	r1, [pc, #412]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dea:	4b62      	ldr	r3, [pc, #392]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df8:	495e      	ldr	r1, [pc, #376]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1a:	4956      	ldr	r1, [pc, #344]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e2e:	4b51      	ldr	r3, [pc, #324]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	494d      	ldr	r1, [pc, #308]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e50:	4b48      	ldr	r3, [pc, #288]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5e:	4945      	ldr	r1, [pc, #276]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e72:	4b40      	ldr	r3, [pc, #256]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e80:	493c      	ldr	r1, [pc, #240]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e94:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea2:	4934      	ldr	r1, [pc, #208]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d011      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec4:	492b      	ldr	r1, [pc, #172]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed4:	d101      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ef6:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f04:	491b      	ldr	r1, [pc, #108]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f18:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f28:	4912      	ldr	r1, [pc, #72]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00b      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f3c:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4c:	4909      	ldr	r1, [pc, #36]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00f      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f60:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	e002      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800
 8003f78:	4985      	ldr	r1, [pc, #532]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00b      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f8c:	4b80      	ldr	r3, [pc, #512]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f92:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f9c:	497c      	ldr	r1, [pc, #496]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d005      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fb2:	f040 80d6 	bne.w	8004162 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fb6:	4b76      	ldr	r3, [pc, #472]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a75      	ldr	r2, [pc, #468]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc2:	f7fd faa3 	bl	800150c <HAL_GetTick>
 8003fc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fca:	f7fd fa9f 	bl	800150c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b64      	cmp	r3, #100	; 0x64
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e194      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fdc:	4b6c      	ldr	r3, [pc, #432]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d021      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d11d      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ffc:	4b64      	ldr	r3, [pc, #400]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800400a:	4b61      	ldr	r3, [pc, #388]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800400c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004010:	0e1b      	lsrs	r3, r3, #24
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	019a      	lsls	r2, r3, #6
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	041b      	lsls	r3, r3, #16
 8004022:	431a      	orrs	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	061b      	lsls	r3, r3, #24
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	071b      	lsls	r3, r3, #28
 8004030:	4957      	ldr	r1, [pc, #348]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d004      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004056:	2b00      	cmp	r3, #0
 8004058:	d02e      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004062:	d129      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004064:	4b4a      	ldr	r3, [pc, #296]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800406a:	0c1b      	lsrs	r3, r3, #16
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004072:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004078:	0f1b      	lsrs	r3, r3, #28
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	019a      	lsls	r2, r3, #6
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	041b      	lsls	r3, r3, #16
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	431a      	orrs	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	071b      	lsls	r3, r3, #28
 8004098:	493d      	ldr	r1, [pc, #244]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040a0:	4b3b      	ldr	r3, [pc, #236]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a6:	f023 021f 	bic.w	r2, r3, #31
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	3b01      	subs	r3, #1
 80040b0:	4937      	ldr	r1, [pc, #220]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01d      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040c4:	4b32      	ldr	r3, [pc, #200]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ca:	0e1b      	lsrs	r3, r3, #24
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040d2:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d8:	0f1b      	lsrs	r3, r3, #28
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	019a      	lsls	r2, r3, #6
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	041b      	lsls	r3, r3, #16
 80040ec:	431a      	orrs	r2, r3
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	431a      	orrs	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	071b      	lsls	r3, r3, #28
 80040f8:	4925      	ldr	r1, [pc, #148]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d011      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	019a      	lsls	r2, r3, #6
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	061b      	lsls	r3, r3, #24
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	071b      	lsls	r3, r3, #28
 8004128:	4919      	ldr	r1, [pc, #100]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004130:	4b17      	ldr	r3, [pc, #92]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a16      	ldr	r2, [pc, #88]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004136:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800413a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413c:	f7fd f9e6 	bl	800150c <HAL_GetTick>
 8004140:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004144:	f7fd f9e2 	bl	800150c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e0d7      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004156:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b01      	cmp	r3, #1
 8004166:	f040 80cd 	bne.w	8004304 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a08      	ldr	r2, [pc, #32]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004176:	f7fd f9c9 	bl	800150c <HAL_GetTick>
 800417a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800417c:	e00a      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800417e:	f7fd f9c5 	bl	800150c <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b64      	cmp	r3, #100	; 0x64
 800418a:	d903      	bls.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e0ba      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004190:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004194:	4b5e      	ldr	r3, [pc, #376]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800419c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a0:	d0ed      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d02e      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d12a      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041ca:	4b51      	ldr	r3, [pc, #324]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041d8:	4b4d      	ldr	r3, [pc, #308]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	0f1b      	lsrs	r3, r3, #28
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	019a      	lsls	r2, r3, #6
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	041b      	lsls	r3, r3, #16
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	061b      	lsls	r3, r3, #24
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	071b      	lsls	r3, r3, #28
 80041fe:	4944      	ldr	r1, [pc, #272]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004206:	4b42      	ldr	r3, [pc, #264]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800420c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	493d      	ldr	r1, [pc, #244]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d022      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004234:	d11d      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004236:	4b36      	ldr	r3, [pc, #216]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	0e1b      	lsrs	r3, r3, #24
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004244:	4b32      	ldr	r3, [pc, #200]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	0f1b      	lsrs	r3, r3, #28
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	019a      	lsls	r2, r3, #6
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	431a      	orrs	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	061b      	lsls	r3, r3, #24
 8004264:	431a      	orrs	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	071b      	lsls	r3, r3, #28
 800426a:	4929      	ldr	r1, [pc, #164]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d028      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800427e:	4b24      	ldr	r3, [pc, #144]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004284:	0e1b      	lsrs	r3, r3, #24
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800428c:	4b20      	ldr	r3, [pc, #128]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	0c1b      	lsrs	r3, r3, #16
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	019a      	lsls	r2, r3, #6
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	041b      	lsls	r3, r3, #16
 80042a4:	431a      	orrs	r2, r3
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	061b      	lsls	r3, r3, #24
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	071b      	lsls	r3, r3, #28
 80042b2:	4917      	ldr	r1, [pc, #92]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	4911      	ldr	r1, [pc, #68]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0e      	ldr	r2, [pc, #56]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042dc:	f7fd f916 	bl	800150c <HAL_GetTick>
 80042e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042e4:	f7fd f912 	bl	800150c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e007      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004302:	d1ef      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40023800 	.word	0x40023800

08004314 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e022      	b.n	800436c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d105      	bne.n	800433e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7fc fe67 	bl	800100c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2203      	movs	r2, #3
 8004342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f814 	bl	8004374 <HAL_SD_InitCard>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e00a      	b.n	800436c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004374:	b5b0      	push	{r4, r5, r7, lr}
 8004376:	b08e      	sub	sp, #56	; 0x38
 8004378:	af04      	add	r7, sp, #16
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800438c:	2300      	movs	r3, #0
 800438e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004390:	2376      	movs	r3, #118	; 0x76
 8004392:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681d      	ldr	r5, [r3, #0]
 8004398:	466c      	mov	r4, sp
 800439a:	f107 0314 	add.w	r3, r7, #20
 800439e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043a6:	f107 0308 	add.w	r3, r7, #8
 80043aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043ac:	4628      	mov	r0, r5
 80043ae:	f002 f967 	bl	8006680 <SDMMC_Init>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80043b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e03b      	b.n	800443c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043d2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f002 f99b 	bl	8006714 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ec:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 ffca 	bl	8005388 <SD_PowerON>
 80043f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00b      	beq.n	8004414 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e013      	b.n	800443c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fee9 	bl	80051ec <SD_InitCard>
 800441a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00b      	beq.n	800443a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3728      	adds	r7, #40	; 0x28
 8004440:	46bd      	mov	sp, r7
 8004442:	bdb0      	pop	{r4, r5, r7, pc}

08004444 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08c      	sub	sp, #48	; 0x30
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d107      	bne.n	800446c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0cc      	b.n	8004606 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	f040 80c5 	bne.w	8004604 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	441a      	add	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448a:	429a      	cmp	r2, r3
 800448c:	d907      	bls.n	800449e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e0b3      	b.n	8004606 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2203      	movs	r2, #3
 80044a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2200      	movs	r2, #0
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80044bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	4a53      	ldr	r2, [pc, #332]	; (8004610 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80044c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a52      	ldr	r2, [pc, #328]	; (8004614 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80044cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	2200      	movs	r2, #0
 80044d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3380      	adds	r3, #128	; 0x80
 80044e0:	4619      	mov	r1, r3
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	025b      	lsls	r3, r3, #9
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	f7fd ff81 	bl	80023f0 <HAL_DMA_Start_IT>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d017      	beq.n	8004524 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004502:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a43      	ldr	r2, [pc, #268]	; (8004618 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800450a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e070      	b.n	8004606 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0208 	orr.w	r2, r2, #8
 8004532:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004538:	2b01      	cmp	r3, #1
 800453a:	d002      	beq.n	8004542 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	025b      	lsls	r3, r3, #9
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800454a:	4618      	mov	r0, r3
 800454c:	f002 f976 	bl	800683c <SDMMC_CmdBlockLength>
 8004550:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00f      	beq.n	8004578 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2e      	ldr	r2, [pc, #184]	; (8004618 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800455e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	431a      	orrs	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e046      	b.n	8004606 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004578:	f04f 33ff 	mov.w	r3, #4294967295
 800457c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	025b      	lsls	r3, r3, #9
 8004582:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004584:	2390      	movs	r3, #144	; 0x90
 8004586:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004588:	2302      	movs	r3, #2
 800458a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800458c:	2300      	movs	r3, #0
 800458e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004590:	2301      	movs	r3, #1
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f107 0210 	add.w	r2, r7, #16
 800459c:	4611      	mov	r1, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	f002 f920 	bl	80067e4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d90a      	bls.n	80045c0 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2282      	movs	r2, #130	; 0x82
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045b6:	4618      	mov	r0, r3
 80045b8:	f002 f984 	bl	80068c4 <SDMMC_CmdReadMultiBlock>
 80045bc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80045be:	e009      	b.n	80045d4 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2281      	movs	r2, #129	; 0x81
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045cc:	4618      	mov	r0, r3
 80045ce:	f002 f957 	bl	8006880 <SDMMC_CmdReadSingleBlock>
 80045d2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d012      	beq.n	8004600 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a0e      	ldr	r2, [pc, #56]	; (8004618 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	431a      	orrs	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e002      	b.n	8004606 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	3730      	adds	r7, #48	; 0x30
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	08004ffb 	.word	0x08004ffb
 8004614:	0800506d 	.word	0x0800506d
 8004618:	004005ff 	.word	0x004005ff

0800461c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	; 0x30
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d107      	bne.n	8004644 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0cf      	b.n	80047e4 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	f040 80c8 	bne.w	80047e2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	441a      	add	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004662:	429a      	cmp	r2, r3
 8004664:	d907      	bls.n	8004676 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e0b6      	b.n	80047e4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2203      	movs	r2, #3
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2200      	movs	r2, #0
 8004684:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 021a 	orr.w	r2, r2, #26
 8004694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469a:	4a54      	ldr	r2, [pc, #336]	; (80047ec <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800469c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	4a53      	ldr	r2, [pc, #332]	; (80047f0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80046a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	2200      	movs	r2, #0
 80046ac:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d002      	beq.n	80046bc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	025b      	lsls	r3, r3, #9
 80046ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046c4:	4618      	mov	r0, r3
 80046c6:	f002 f8b9 	bl	800683c <SDMMC_CmdBlockLength>
 80046ca:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00f      	beq.n	80046f2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a47      	ldr	r2, [pc, #284]	; (80047f4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	431a      	orrs	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e078      	b.n	80047e4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d90a      	bls.n	800470e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	22a0      	movs	r2, #160	; 0xa0
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004704:	4618      	mov	r0, r3
 8004706:	f002 f921 	bl	800694c <SDMMC_CmdWriteMultiBlock>
 800470a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800470c:	e009      	b.n	8004722 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2290      	movs	r2, #144	; 0x90
 8004712:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800471a:	4618      	mov	r0, r3
 800471c:	f002 f8f4 	bl	8006908 <SDMMC_CmdWriteSingleBlock>
 8004720:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d012      	beq.n	800474e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a31      	ldr	r2, [pc, #196]	; (80047f4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	431a      	orrs	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e04a      	b.n	80047e4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0208 	orr.w	r2, r2, #8
 800475c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3380      	adds	r3, #128	; 0x80
 800476a:	461a      	mov	r2, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	025b      	lsls	r3, r3, #9
 8004770:	089b      	lsrs	r3, r3, #2
 8004772:	f7fd fe3d 	bl	80023f0 <HAL_DMA_Start_IT>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01a      	beq.n	80047b2 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 021a 	bic.w	r2, r2, #26
 800478a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e018      	b.n	80047e4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
 80047b6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	025b      	lsls	r3, r3, #9
 80047bc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80047be:	2390      	movs	r3, #144	; 0x90
 80047c0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80047ca:	2301      	movs	r3, #1
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f107 0210 	add.w	r2, r7, #16
 80047d6:	4611      	mov	r1, r2
 80047d8:	4618      	mov	r0, r3
 80047da:	f002 f803 	bl	80067e4 <SDMMC_ConfigData>

      return HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e000      	b.n	80047e4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
  }
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3730      	adds	r7, #48	; 0x30
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	08004fd1 	.word	0x08004fd1
 80047f0:	0800506d 	.word	0x0800506d
 80047f4:	004005ff 	.word	0x004005ff

080047f8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_SD_IRQHandler+0x2e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 ffc8 	bl	80057b4 <SD_Read_IT>
 8004824:	e153      	b.n	8004ace <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 808d 	beq.w	8004950 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800483e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4ba3      	ldr	r3, [pc, #652]	; (8004ad8 <HAL_SD_IRQHandler+0x2e0>)
 800484c:	400b      	ands	r3, r1
 800484e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d039      	beq.n	80048de <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <HAL_SD_IRQHandler+0x86>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d011      	beq.n	80048a2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f002 f884 	bl	8006990 <SDMMC_CmdStopTransfer>
 8004888:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f921 	bl	8004ae4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d104      	bne.n	80048ce <HAL_SD_IRQHandler+0xd6>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f002 ff94 	bl	80077fc <HAL_SD_RxCpltCallback>
 80048d4:	e0fb      	b.n	8004ace <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f002 ff86 	bl	80077e8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80048dc:	e0f7      	b.n	8004ace <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80f2 	beq.w	8004ace <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d011      	beq.n	8004918 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f002 f849 	bl	8006990 <SDMMC_CmdStopTransfer>
 80048fe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d008      	beq.n	8004918 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f8e6 	bl	8004ae4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	f040 80d5 	bne.w	8004ace <HAL_SD_IRQHandler+0x2d6>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 80cf 	bne.w	8004ace <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0208 	bic.w	r2, r2, #8
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f002 ff4d 	bl	80077e8 <HAL_SD_TxCpltCallback>
}
 800494e:	e0be      	b.n	8004ace <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_SD_IRQHandler+0x178>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 ff74 	bl	8005856 <SD_Write_IT>
 800496e:	e0ae      	b.n	8004ace <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004976:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 80a7 	beq.w	8004ace <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	f043 0202 	orr.w	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	f043 0208 	orr.w	r2, r3, #8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	f043 0220 	orr.w	r2, r3, #32
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	f043 0210 	orr.w	r2, r3, #16
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004a00:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 ffc2 	bl	8006990 <SDMMC_CmdStopTransfer>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f857 	bl	8004ae4 <HAL_SD_ErrorCallback>
}
 8004a36:	e04a      	b.n	8004ace <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d045      	beq.n	8004ace <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <HAL_SD_IRQHandler+0x25e>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d011      	beq.n	8004a7a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5a:	4a20      	ldr	r2, [pc, #128]	; (8004adc <HAL_SD_IRQHandler+0x2e4>)
 8004a5c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fd fd24 	bl	80024b0 <HAL_DMA_Abort_IT>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d02f      	beq.n	8004ace <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fb4c 	bl	8005110 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004a78:	e029      	b.n	8004ace <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d104      	bne.n	8004a8e <HAL_SD_IRQHandler+0x296>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d011      	beq.n	8004ab2 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <HAL_SD_IRQHandler+0x2e8>)
 8004a94:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fd fd08 	bl	80024b0 <HAL_DMA_Abort_IT>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d013      	beq.n	8004ace <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fb67 	bl	800517e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004ab0:	e00d      	b.n	8004ace <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f002 fe84 	bl	80077d4 <HAL_SD_AbortCallback>
}
 8004acc:	e7ff      	b.n	8004ace <HAL_SD_IRQHandler+0x2d6>
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	ffff3ec5 	.word	0xffff3ec5
 8004adc:	08005111 	.word	0x08005111
 8004ae0:	0800517f 	.word	0x0800517f

08004ae4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b06:	0f9b      	lsrs	r3, r3, #30
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b12:	0e9b      	lsrs	r3, r3, #26
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b24:	0e1b      	lsrs	r3, r3, #24
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b58:	0d1b      	lsrs	r3, r3, #20
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b64:	0c1b      	lsrs	r3, r3, #16
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b76:	0bdb      	lsrs	r3, r3, #15
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b88:	0b9b      	lsrs	r3, r3, #14
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b9a:	0b5b      	lsrs	r3, r3, #13
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bac:	0b1b      	lsrs	r3, r3, #12
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d163      	bne.n	8004c90 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bcc:	009a      	lsls	r2, r3, #2
 8004bce:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004bd8:	0f92      	lsrs	r2, r2, #30
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be4:	0edb      	lsrs	r3, r3, #27
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf6:	0e1b      	lsrs	r3, r3, #24
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c08:	0d5b      	lsrs	r3, r3, #21
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c1a:	0c9b      	lsrs	r3, r3, #18
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2c:	0bdb      	lsrs	r3, r3, #15
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	7e1b      	ldrb	r3, [r3, #24]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	3302      	adds	r3, #2
 8004c50:	2201      	movs	r2, #1
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004c5a:	fb02 f203 	mul.w	r2, r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	7a1b      	ldrb	r3, [r3, #8]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004c7c:	0a52      	lsrs	r2, r2, #9
 8004c7e:	fb02 f203 	mul.w	r2, r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
 8004c8e:	e031      	b.n	8004cf4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d11d      	bne.n	8004cd4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c9c:	041b      	lsls	r3, r3, #16
 8004c9e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca6:	0c1b      	lsrs	r3, r3, #16
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	029a      	lsls	r2, r3, #10
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cc8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	661a      	str	r2, [r3, #96]	; 0x60
 8004cd2:	e00f      	b.n	8004cf4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a58      	ldr	r2, [pc, #352]	; (8004e3c <HAL_SD_GetCardCSD+0x344>)
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e09d      	b.n	8004e30 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cf8:	0b9b      	lsrs	r3, r3, #14
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d0a:	09db      	lsrs	r3, r3, #7
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2c:	0fdb      	lsrs	r3, r3, #31
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d38:	0f5b      	lsrs	r3, r3, #29
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	0e9b      	lsrs	r3, r3, #26
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5c:	0d9b      	lsrs	r3, r3, #22
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6e:	0d5b      	lsrs	r3, r3, #21
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	0c1b      	lsrs	r3, r3, #16
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	0bdb      	lsrs	r3, r3, #15
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	0b9b      	lsrs	r3, r3, #14
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	0b5b      	lsrs	r3, r3, #13
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	0b1b      	lsrs	r3, r3, #12
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dee:	0a9b      	lsrs	r3, r3, #10
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	0a1b      	lsrs	r3, r3, #8
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	004005ff 	.word	0x004005ff

08004e40 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004e98:	b5b0      	push	{r4, r5, r7, lr}
 8004e9a:	b08e      	sub	sp, #56	; 0x38
 8004e9c:	af04      	add	r7, sp, #16
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2203      	movs	r2, #3
 8004ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d02e      	beq.n	8004f10 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb8:	d106      	bne.n	8004ec8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ec6:	e029      	b.n	8004f1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ece:	d10a      	bne.n	8004ee6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fb0f 	bl	80054f4 <SD_WideBus_Enable>
 8004ed6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ee4:	e01a      	b.n	8004f1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fb4c 	bl	800558a <SD_WideBus_Disable>
 8004ef2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
 8004f00:	e00c      	b.n	8004f1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f0e:	e005      	b.n	8004f1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a18      	ldr	r2, [pc, #96]	; (8004f8c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e024      	b.n	8004f82 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681d      	ldr	r5, [r3, #0]
 8004f5e:	466c      	mov	r4, sp
 8004f60:	f107 0318 	add.w	r3, r7, #24
 8004f64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004f6c:	f107 030c 	add.w	r3, r7, #12
 8004f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f72:	4628      	mov	r0, r5
 8004f74:	f001 fb84 	bl	8006680 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3728      	adds	r7, #40	; 0x28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bdb0      	pop	{r4, r5, r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	004005ff 	.word	0x004005ff

08004f90 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004f9c:	f107 030c 	add.w	r3, r7, #12
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fa7e 	bl	80054a4 <SD_SendStatus>
 8004fa8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	0a5b      	lsrs	r3, r3, #9
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004fc6:	693b      	ldr	r3, [r7, #16]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	2b82      	cmp	r3, #130	; 0x82
 800500e:	d111      	bne.n	8005034 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f001 fcbb 	bl	8006990 <SDMMC_CmdStopTransfer>
 800501a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	431a      	orrs	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff fd58 	bl	8004ae4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0208 	bic.w	r2, r2, #8
 8005042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f240 523a 	movw	r2, #1338	; 0x53a
 800504c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f002 fbcd 	bl	80077fc <HAL_SD_RxCpltCallback>
#endif
}
 8005062:	bf00      	nop
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fd fbc4 	bl	8002808 <HAL_DMA_GetError>
 8005080:	4603      	mov	r3, r0
 8005082:	2b02      	cmp	r3, #2
 8005084:	d03e      	beq.n	8005104 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005094:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d002      	beq.n	80050a2 <SD_DMAError+0x36>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d12d      	bne.n	80050fe <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a19      	ldr	r2, [pc, #100]	; (800510c <SD_DMAError+0xa0>)
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80050b8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80050c6:	6978      	ldr	r0, [r7, #20]
 80050c8:	f7ff ff62 	bl	8004f90 <HAL_SD_GetCardState>
 80050cc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b06      	cmp	r3, #6
 80050d2:	d002      	beq.n	80050da <SD_DMAError+0x6e>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d10a      	bne.n	80050f0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 fc56 	bl	8006990 <SDMMC_CmdStopTransfer>
 80050e4:	4602      	mov	r2, r0
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	431a      	orrs	r2, r3
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80050fe:	6978      	ldr	r0, [r7, #20]
 8005100:	f7ff fcf0 	bl	8004ae4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005104:	bf00      	nop
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	004005ff 	.word	0x004005ff

08005110 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f240 523a 	movw	r2, #1338	; 0x53a
 8005126:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff ff31 	bl	8004f90 <HAL_SD_GetCardState>
 800512e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b06      	cmp	r3, #6
 8005142:	d002      	beq.n	800514a <SD_DMATxAbort+0x3a>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b05      	cmp	r3, #5
 8005148:	d10a      	bne.n	8005160 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f001 fc1e 	bl	8006990 <SDMMC_CmdStopTransfer>
 8005154:	4602      	mov	r2, r0
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	431a      	orrs	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	2b00      	cmp	r3, #0
 8005166:	d103      	bne.n	8005170 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f002 fb33 	bl	80077d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800516e:	e002      	b.n	8005176 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff fcb7 	bl	8004ae4 <HAL_SD_ErrorCallback>
}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f240 523a 	movw	r2, #1338	; 0x53a
 8005194:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f7ff fefa 	bl	8004f90 <HAL_SD_GetCardState>
 800519c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b06      	cmp	r3, #6
 80051b0:	d002      	beq.n	80051b8 <SD_DMARxAbort+0x3a>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b05      	cmp	r3, #5
 80051b6:	d10a      	bne.n	80051ce <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f001 fbe7 	bl	8006990 <SDMMC_CmdStopTransfer>
 80051c2:	4602      	mov	r2, r0
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	431a      	orrs	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d103      	bne.n	80051de <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f002 fafc 	bl	80077d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80051dc:	e002      	b.n	80051e4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff fc80 	bl	8004ae4 <HAL_SD_ErrorCallback>
}
 80051e4:	bf00      	nop
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80051ec:	b5b0      	push	{r4, r5, r7, lr}
 80051ee:	b094      	sub	sp, #80	; 0x50
 80051f0:	af04      	add	r7, sp, #16
 80051f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80051f4:	2301      	movs	r3, #1
 80051f6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 fa98 	bl	8006732 <SDMMC_GetPowerState>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d102      	bne.n	800520e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005208:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800520c:	e0b7      	b.n	800537e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	2b03      	cmp	r3, #3
 8005214:	d02f      	beq.n	8005276 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f001 fcc3 	bl	8006ba6 <SDMMC_CmdSendCID>
 8005220:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <SD_InitCard+0x40>
    {
      return errorstate;
 8005228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522a:	e0a8      	b.n	800537e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2100      	movs	r1, #0
 8005232:	4618      	mov	r0, r3
 8005234:	f001 fac3 	bl	80067be <SDMMC_GetResponse>
 8005238:	4602      	mov	r2, r0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2104      	movs	r1, #4
 8005244:	4618      	mov	r0, r3
 8005246:	f001 faba 	bl	80067be <SDMMC_GetResponse>
 800524a:	4602      	mov	r2, r0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2108      	movs	r1, #8
 8005256:	4618      	mov	r0, r3
 8005258:	f001 fab1 	bl	80067be <SDMMC_GetResponse>
 800525c:	4602      	mov	r2, r0
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	210c      	movs	r1, #12
 8005268:	4618      	mov	r0, r3
 800526a:	f001 faa8 	bl	80067be <SDMMC_GetResponse>
 800526e:	4602      	mov	r2, r0
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	2b03      	cmp	r3, #3
 800527c:	d00d      	beq.n	800529a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f107 020e 	add.w	r2, r7, #14
 8005286:	4611      	mov	r1, r2
 8005288:	4618      	mov	r0, r3
 800528a:	f001 fcc9 	bl	8006c20 <SDMMC_CmdSetRelAdd>
 800528e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <SD_InitCard+0xae>
    {
      return errorstate;
 8005296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005298:	e071      	b.n	800537e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d036      	beq.n	8005310 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80052a2:	89fb      	ldrh	r3, [r7, #14]
 80052a4:	461a      	mov	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b2:	041b      	lsls	r3, r3, #16
 80052b4:	4619      	mov	r1, r3
 80052b6:	4610      	mov	r0, r2
 80052b8:	f001 fc93 	bl	8006be2 <SDMMC_CmdSendCSD>
 80052bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80052be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80052c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c6:	e05a      	b.n	800537e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2100      	movs	r1, #0
 80052ce:	4618      	mov	r0, r3
 80052d0:	f001 fa75 	bl	80067be <SDMMC_GetResponse>
 80052d4:	4602      	mov	r2, r0
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2104      	movs	r1, #4
 80052e0:	4618      	mov	r0, r3
 80052e2:	f001 fa6c 	bl	80067be <SDMMC_GetResponse>
 80052e6:	4602      	mov	r2, r0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2108      	movs	r1, #8
 80052f2:	4618      	mov	r0, r3
 80052f4:	f001 fa63 	bl	80067be <SDMMC_GetResponse>
 80052f8:	4602      	mov	r2, r0
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	210c      	movs	r1, #12
 8005304:	4618      	mov	r0, r3
 8005306:	f001 fa5a 	bl	80067be <SDMMC_GetResponse>
 800530a:	4602      	mov	r2, r0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2104      	movs	r1, #4
 8005316:	4618      	mov	r0, r3
 8005318:	f001 fa51 	bl	80067be <SDMMC_GetResponse>
 800531c:	4603      	mov	r3, r0
 800531e:	0d1a      	lsrs	r2, r3, #20
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005324:	f107 0310 	add.w	r3, r7, #16
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff fbe4 	bl	8004af8 <HAL_SD_GetCardCSD>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005336:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800533a:	e020      	b.n	800537e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6819      	ldr	r1, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005344:	041b      	lsls	r3, r3, #16
 8005346:	f04f 0400 	mov.w	r4, #0
 800534a:	461a      	mov	r2, r3
 800534c:	4623      	mov	r3, r4
 800534e:	4608      	mov	r0, r1
 8005350:	f001 fb40 	bl	80069d4 <SDMMC_CmdSelDesel>
 8005354:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <SD_InitCard+0x174>
  {
    return errorstate;
 800535c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535e:	e00e      	b.n	800537e <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681d      	ldr	r5, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	466c      	mov	r4, sp
 8005368:	f103 0210 	add.w	r2, r3, #16
 800536c:	ca07      	ldmia	r2, {r0, r1, r2}
 800536e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005372:	3304      	adds	r3, #4
 8005374:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005376:	4628      	mov	r0, r5
 8005378:	f001 f982 	bl	8006680 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3740      	adds	r7, #64	; 0x40
 8005382:	46bd      	mov	sp, r7
 8005384:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005388 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	2300      	movs	r3, #0
 800539a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f001 fb3a 	bl	8006a1a <SDMMC_CmdGoIdleState>
 80053a6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	e072      	b.n	8005498 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 fb4d 	bl	8006a56 <SDMMC_CmdOperCond>
 80053bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f001 fb23 	bl	8006a1a <SDMMC_CmdGoIdleState>
 80053d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d004      	beq.n	80053e6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	e05b      	b.n	8005498 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d137      	bne.n	800545e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2100      	movs	r1, #0
 80053f4:	4618      	mov	r0, r3
 80053f6:	f001 fb4d 	bl	8006a94 <SDMMC_CmdAppCommand>
 80053fa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d02d      	beq.n	800545e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005402:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005406:	e047      	b.n	8005498 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2100      	movs	r1, #0
 800540e:	4618      	mov	r0, r3
 8005410:	f001 fb40 	bl	8006a94 <SDMMC_CmdAppCommand>
 8005414:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <SD_PowerON+0x98>
    {
      return errorstate;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	e03b      	b.n	8005498 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	491e      	ldr	r1, [pc, #120]	; (80054a0 <SD_PowerON+0x118>)
 8005426:	4618      	mov	r0, r3
 8005428:	f001 fb56 	bl	8006ad8 <SDMMC_CmdAppOperCommand>
 800542c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005434:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005438:	e02e      	b.n	8005498 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2100      	movs	r1, #0
 8005440:	4618      	mov	r0, r3
 8005442:	f001 f9bc 	bl	80067be <SDMMC_GetResponse>
 8005446:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	0fdb      	lsrs	r3, r3, #31
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <SD_PowerON+0xcc>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <SD_PowerON+0xce>
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]

    count++;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	3301      	adds	r3, #1
 800545c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005464:	4293      	cmp	r3, r2
 8005466:	d802      	bhi.n	800546e <SD_PowerON+0xe6>
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0cc      	beq.n	8005408 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005474:	4293      	cmp	r3, r2
 8005476:	d902      	bls.n	800547e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800547c:	e00c      	b.n	8005498 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	645a      	str	r2, [r3, #68]	; 0x44
 800548e:	e002      	b.n	8005496 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	c1100000 	.word	0xc1100000

080054a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d102      	bne.n	80054ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80054b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054b8:	e018      	b.n	80054ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c2:	041b      	lsls	r3, r3, #16
 80054c4:	4619      	mov	r1, r3
 80054c6:	4610      	mov	r0, r2
 80054c8:	f001 fbcb 	bl	8006c62 <SDMMC_CmdSendStatus>
 80054cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	e009      	b.n	80054ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2100      	movs	r1, #0
 80054de:	4618      	mov	r0, r3
 80054e0:	f001 f96d 	bl	80067be <SDMMC_GetResponse>
 80054e4:	4602      	mov	r2, r0
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2100      	movs	r1, #0
 800550a:	4618      	mov	r0, r3
 800550c:	f001 f957 	bl	80067be <SDMMC_GetResponse>
 8005510:	4603      	mov	r3, r0
 8005512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800551a:	d102      	bne.n	8005522 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800551c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005520:	e02f      	b.n	8005582 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005522:	f107 030c 	add.w	r3, r7, #12
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f879 	bl	8005620 <SD_FindSCR>
 800552e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	e023      	b.n	8005582 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01c      	beq.n	800557e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f001 fa9f 	bl	8006a94 <SDMMC_CmdAppCommand>
 8005556:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	e00f      	b.n	8005582 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2102      	movs	r1, #2
 8005568:	4618      	mov	r0, r3
 800556a:	f001 fad9 	bl	8006b20 <SDMMC_CmdBusWidth>
 800556e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	e003      	b.n	8005582 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800557a:	2300      	movs	r3, #0
 800557c:	e001      	b.n	8005582 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800557e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b086      	sub	sp, #24
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	2300      	movs	r3, #0
 8005598:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2100      	movs	r1, #0
 80055a0:	4618      	mov	r0, r3
 80055a2:	f001 f90c 	bl	80067be <SDMMC_GetResponse>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055b0:	d102      	bne.n	80055b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80055b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055b6:	e02f      	b.n	8005618 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80055b8:	f107 030c 	add.w	r3, r7, #12
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f82e 	bl	8005620 <SD_FindSCR>
 80055c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	e023      	b.n	8005618 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01c      	beq.n	8005614 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e2:	041b      	lsls	r3, r3, #16
 80055e4:	4619      	mov	r1, r3
 80055e6:	4610      	mov	r0, r2
 80055e8:	f001 fa54 	bl	8006a94 <SDMMC_CmdAppCommand>
 80055ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	e00f      	b.n	8005618 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 fa8e 	bl	8006b20 <SDMMC_CmdBusWidth>
 8005604:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	e003      	b.n	8005618 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005610:	2300      	movs	r3, #0
 8005612:	e001      	b.n	8005618 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005614:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005620:	b590      	push	{r4, r7, lr}
 8005622:	b08f      	sub	sp, #60	; 0x3c
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800562a:	f7fb ff6f 	bl	800150c <HAL_GetTick>
 800562e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005634:	2300      	movs	r3, #0
 8005636:	60bb      	str	r3, [r7, #8]
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2108      	movs	r1, #8
 8005646:	4618      	mov	r0, r3
 8005648:	f001 f8f8 	bl	800683c <SDMMC_CmdBlockLength>
 800564c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	e0a9      	b.n	80057ac <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	4619      	mov	r1, r3
 8005664:	4610      	mov	r0, r2
 8005666:	f001 fa15 	bl	8006a94 <SDMMC_CmdAppCommand>
 800566a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	e09a      	b.n	80057ac <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005676:	f04f 33ff 	mov.w	r3, #4294967295
 800567a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800567c:	2308      	movs	r3, #8
 800567e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005680:	2330      	movs	r3, #48	; 0x30
 8005682:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005684:	2302      	movs	r3, #2
 8005686:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005688:	2300      	movs	r3, #0
 800568a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800568c:	2301      	movs	r3, #1
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f107 0210 	add.w	r2, r7, #16
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f001 f8a2 	bl	80067e4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 fa5d 	bl	8006b64 <SDMMC_CmdSendSCR>
 80056aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d022      	beq.n	80056f8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	e07a      	b.n	80057ac <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00e      	beq.n	80056e2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6819      	ldr	r1, [r3, #0]
 80056c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	f107 0208 	add.w	r2, r7, #8
 80056d0:	18d4      	adds	r4, r2, r3
 80056d2:	4608      	mov	r0, r1
 80056d4:	f001 f800 	bl	80066d8 <SDMMC_ReadFIFO>
 80056d8:	4603      	mov	r3, r0
 80056da:	6023      	str	r3, [r4, #0]
      index++;
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	3301      	adds	r3, #1
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80056e2:	f7fb ff13 	bl	800150c <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d102      	bne.n	80056f8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80056f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056f6:	e059      	b.n	80057ac <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056fe:	f240 432a 	movw	r3, #1066	; 0x42a
 8005702:	4013      	ands	r3, r2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0d6      	beq.n	80056b6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2208      	movs	r2, #8
 800571c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800571e:	2308      	movs	r3, #8
 8005720:	e044      	b.n	80057ac <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2202      	movs	r2, #2
 8005736:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005738:	2302      	movs	r3, #2
 800573a:	e037      	b.n	80057ac <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2220      	movs	r2, #32
 8005750:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005752:	2320      	movs	r3, #32
 8005754:	e02a      	b.n	80057ac <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f240 523a 	movw	r2, #1338	; 0x53a
 800575e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	061a      	lsls	r2, r3, #24
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	021b      	lsls	r3, r3, #8
 8005768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800576c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	0a1b      	lsrs	r3, r3, #8
 8005772:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005776:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	0e1b      	lsrs	r3, r3, #24
 800577c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	601a      	str	r2, [r3, #0]
    scr++;
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	3304      	adds	r3, #4
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	061a      	lsls	r2, r3, #24
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005794:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	0a1b      	lsrs	r3, r3, #8
 800579a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800579e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	0e1b      	lsrs	r3, r3, #24
 80057a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	373c      	adds	r7, #60	; 0x3c
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd90      	pop	{r4, r7, pc}

080057b4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d03f      	beq.n	800584e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80057ce:	2300      	movs	r3, #0
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	e033      	b.n	800583c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 ff7d 	bl	80066d8 <SDMMC_ReadFIFO>
 80057de:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3301      	adds	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3301      	adds	r3, #1
 8005802:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	3b01      	subs	r3, #1
 8005808:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	0c1b      	lsrs	r3, r3, #16
 800580e:	b2da      	uxtb	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3301      	adds	r3, #1
 8005818:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	3b01      	subs	r3, #1
 800581e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	0e1b      	lsrs	r3, r3, #24
 8005824:	b2da      	uxtb	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	701a      	strb	r2, [r3, #0]
      tmp++;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3301      	adds	r3, #1
 800582e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	3b01      	subs	r3, #1
 8005834:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	3301      	adds	r3, #1
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b07      	cmp	r3, #7
 8005840:	d9c8      	bls.n	80057d4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800584e:	bf00      	nop
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b086      	sub	sp, #24
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d043      	beq.n	80058f8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	e037      	b.n	80058e6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3301      	adds	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	3b01      	subs	r3, #1
 8005886:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	021a      	lsls	r2, r3, #8
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	4313      	orrs	r3, r2
 8005892:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	3b01      	subs	r3, #1
 800589e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	041a      	lsls	r2, r3, #16
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3301      	adds	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	061a      	lsls	r2, r3, #24
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3301      	adds	r3, #1
 80058c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f107 0208 	add.w	r2, r7, #8
 80058d8:	4611      	mov	r1, r2
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 ff09 	bl	80066f2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	3301      	adds	r3, #1
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b07      	cmp	r3, #7
 80058ea:	d9c4      	bls.n	8005876 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80058f8:	bf00      	nop
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e01d      	b.n	800594e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f815 	bl	8005956 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3304      	adds	r3, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4610      	mov	r0, r2
 8005940:	f000 f986 	bl	8005c50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
	...

0800596c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0201 	orr.w	r2, r2, #1
 8005982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <HAL_TIM_Base_Start_IT+0x50>)
 800598c:	4013      	ands	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b06      	cmp	r3, #6
 8005994:	d00b      	beq.n	80059ae <HAL_TIM_Base_Start_IT+0x42>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800599c:	d007      	beq.n	80059ae <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0201 	orr.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	00010007 	.word	0x00010007

080059c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d122      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d11b      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0202 	mvn.w	r2, #2
 80059ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f905 	bl	8005c12 <HAL_TIM_IC_CaptureCallback>
 8005a08:	e005      	b.n	8005a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f8f7 	bl	8005bfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f908 	bl	8005c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d122      	bne.n	8005a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d11b      	bne.n	8005a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0204 	mvn.w	r2, #4
 8005a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8db 	bl	8005c12 <HAL_TIM_IC_CaptureCallback>
 8005a5c:	e005      	b.n	8005a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f8cd 	bl	8005bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f8de 	bl	8005c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d122      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d11b      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0208 	mvn.w	r2, #8
 8005a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2204      	movs	r2, #4
 8005a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f8b1 	bl	8005c12 <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f8a3 	bl	8005bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f8b4 	bl	8005c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	2b10      	cmp	r3, #16
 8005ad0:	d122      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b10      	cmp	r3, #16
 8005ade:	d11b      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0210 	mvn.w	r2, #16
 8005ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2208      	movs	r2, #8
 8005aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f887 	bl	8005c12 <HAL_TIM_IC_CaptureCallback>
 8005b04:	e005      	b.n	8005b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f879 	bl	8005bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f88a 	bl	8005c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d10e      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d107      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0201 	mvn.w	r2, #1
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fb f9d8 	bl	8000ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4e:	2b80      	cmp	r3, #128	; 0x80
 8005b50:	d10e      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5c:	2b80      	cmp	r3, #128	; 0x80
 8005b5e:	d107      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f91a 	bl	8005da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b7e:	d10e      	bne.n	8005b9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b80      	cmp	r3, #128	; 0x80
 8005b8c:	d107      	bne.n	8005b9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f90d 	bl	8005db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba8:	2b40      	cmp	r3, #64	; 0x40
 8005baa:	d10e      	bne.n	8005bca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d107      	bne.n	8005bca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f838 	bl	8005c3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d10e      	bne.n	8005bf6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d107      	bne.n	8005bf6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f06f 0220 	mvn.w	r2, #32
 8005bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f8cd 	bl	8005d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bf6:	bf00      	nop
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
	...

08005c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a40      	ldr	r2, [pc, #256]	; (8005d64 <TIM_Base_SetConfig+0x114>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d013      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6e:	d00f      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3d      	ldr	r2, [pc, #244]	; (8005d68 <TIM_Base_SetConfig+0x118>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00b      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a3c      	ldr	r2, [pc, #240]	; (8005d6c <TIM_Base_SetConfig+0x11c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d007      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a3b      	ldr	r2, [pc, #236]	; (8005d70 <TIM_Base_SetConfig+0x120>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a3a      	ldr	r2, [pc, #232]	; (8005d74 <TIM_Base_SetConfig+0x124>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d108      	bne.n	8005ca2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2f      	ldr	r2, [pc, #188]	; (8005d64 <TIM_Base_SetConfig+0x114>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d02b      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb0:	d027      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2c      	ldr	r2, [pc, #176]	; (8005d68 <TIM_Base_SetConfig+0x118>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d023      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2b      	ldr	r2, [pc, #172]	; (8005d6c <TIM_Base_SetConfig+0x11c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01f      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2a      	ldr	r2, [pc, #168]	; (8005d70 <TIM_Base_SetConfig+0x120>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d01b      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a29      	ldr	r2, [pc, #164]	; (8005d74 <TIM_Base_SetConfig+0x124>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d017      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a28      	ldr	r2, [pc, #160]	; (8005d78 <TIM_Base_SetConfig+0x128>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d013      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <TIM_Base_SetConfig+0x12c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00f      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a26      	ldr	r2, [pc, #152]	; (8005d80 <TIM_Base_SetConfig+0x130>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00b      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a25      	ldr	r2, [pc, #148]	; (8005d84 <TIM_Base_SetConfig+0x134>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d007      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a24      	ldr	r2, [pc, #144]	; (8005d88 <TIM_Base_SetConfig+0x138>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d003      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a23      	ldr	r2, [pc, #140]	; (8005d8c <TIM_Base_SetConfig+0x13c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d108      	bne.n	8005d14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a0a      	ldr	r2, [pc, #40]	; (8005d64 <TIM_Base_SetConfig+0x114>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_Base_SetConfig+0xf8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <TIM_Base_SetConfig+0x124>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d103      	bne.n	8005d50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	615a      	str	r2, [r3, #20]
}
 8005d56:	bf00      	nop
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40010000 	.word	0x40010000
 8005d68:	40000400 	.word	0x40000400
 8005d6c:	40000800 	.word	0x40000800
 8005d70:	40000c00 	.word	0x40000c00
 8005d74:	40010400 	.word	0x40010400
 8005d78:	40014000 	.word	0x40014000
 8005d7c:	40014400 	.word	0x40014400
 8005d80:	40014800 	.word	0x40014800
 8005d84:	40001800 	.word	0x40001800
 8005d88:	40001c00 	.word	0x40001c00
 8005d8c:	40002000 	.word	0x40002000

08005d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e040      	b.n	8005e60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fb f9f6 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2224      	movs	r2, #36	; 0x24
 8005df8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0201 	bic.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f82c 	bl	8005e68 <UART_SetConfig>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e022      	b.n	8005e60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 faca 	bl	80063bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fb51 	bl	8006500 <UART_CheckIdleState>
 8005e5e:	4603      	mov	r3, r0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4bb1      	ldr	r3, [pc, #708]	; (800615c <UART_SetConfig+0x2f4>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6812      	ldr	r2, [r2, #0]
 8005e9e:	6939      	ldr	r1, [r7, #16]
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a9f      	ldr	r2, [pc, #636]	; (8006160 <UART_SetConfig+0x2f8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d121      	bne.n	8005f2c <UART_SetConfig+0xc4>
 8005ee8:	4b9e      	ldr	r3, [pc, #632]	; (8006164 <UART_SetConfig+0x2fc>)
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d816      	bhi.n	8005f24 <UART_SetConfig+0xbc>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <UART_SetConfig+0x94>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f0d 	.word	0x08005f0d
 8005f00:	08005f19 	.word	0x08005f19
 8005f04:	08005f13 	.word	0x08005f13
 8005f08:	08005f1f 	.word	0x08005f1f
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e151      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005f12:	2302      	movs	r3, #2
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e14e      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	77fb      	strb	r3, [r7, #31]
 8005f1c:	e14b      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005f1e:	2308      	movs	r3, #8
 8005f20:	77fb      	strb	r3, [r7, #31]
 8005f22:	e148      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005f24:	2310      	movs	r3, #16
 8005f26:	77fb      	strb	r3, [r7, #31]
 8005f28:	bf00      	nop
 8005f2a:	e144      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a8d      	ldr	r2, [pc, #564]	; (8006168 <UART_SetConfig+0x300>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d134      	bne.n	8005fa0 <UART_SetConfig+0x138>
 8005f36:	4b8b      	ldr	r3, [pc, #556]	; (8006164 <UART_SetConfig+0x2fc>)
 8005f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3c:	f003 030c 	and.w	r3, r3, #12
 8005f40:	2b0c      	cmp	r3, #12
 8005f42:	d829      	bhi.n	8005f98 <UART_SetConfig+0x130>
 8005f44:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <UART_SetConfig+0xe4>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	08005f81 	.word	0x08005f81
 8005f50:	08005f99 	.word	0x08005f99
 8005f54:	08005f99 	.word	0x08005f99
 8005f58:	08005f99 	.word	0x08005f99
 8005f5c:	08005f8d 	.word	0x08005f8d
 8005f60:	08005f99 	.word	0x08005f99
 8005f64:	08005f99 	.word	0x08005f99
 8005f68:	08005f99 	.word	0x08005f99
 8005f6c:	08005f87 	.word	0x08005f87
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005f99 	.word	0x08005f99
 8005f78:	08005f99 	.word	0x08005f99
 8005f7c:	08005f93 	.word	0x08005f93
 8005f80:	2300      	movs	r3, #0
 8005f82:	77fb      	strb	r3, [r7, #31]
 8005f84:	e117      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005f86:	2302      	movs	r3, #2
 8005f88:	77fb      	strb	r3, [r7, #31]
 8005f8a:	e114      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	77fb      	strb	r3, [r7, #31]
 8005f90:	e111      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005f92:	2308      	movs	r3, #8
 8005f94:	77fb      	strb	r3, [r7, #31]
 8005f96:	e10e      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005f98:	2310      	movs	r3, #16
 8005f9a:	77fb      	strb	r3, [r7, #31]
 8005f9c:	bf00      	nop
 8005f9e:	e10a      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a71      	ldr	r2, [pc, #452]	; (800616c <UART_SetConfig+0x304>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d120      	bne.n	8005fec <UART_SetConfig+0x184>
 8005faa:	4b6e      	ldr	r3, [pc, #440]	; (8006164 <UART_SetConfig+0x2fc>)
 8005fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d00f      	beq.n	8005fd8 <UART_SetConfig+0x170>
 8005fb8:	2b10      	cmp	r3, #16
 8005fba:	d802      	bhi.n	8005fc2 <UART_SetConfig+0x15a>
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <UART_SetConfig+0x164>
 8005fc0:	e010      	b.n	8005fe4 <UART_SetConfig+0x17c>
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d005      	beq.n	8005fd2 <UART_SetConfig+0x16a>
 8005fc6:	2b30      	cmp	r3, #48	; 0x30
 8005fc8:	d009      	beq.n	8005fde <UART_SetConfig+0x176>
 8005fca:	e00b      	b.n	8005fe4 <UART_SetConfig+0x17c>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e0f1      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	77fb      	strb	r3, [r7, #31]
 8005fd6:	e0ee      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	e0eb      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005fde:	2308      	movs	r3, #8
 8005fe0:	77fb      	strb	r3, [r7, #31]
 8005fe2:	e0e8      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	77fb      	strb	r3, [r7, #31]
 8005fe8:	bf00      	nop
 8005fea:	e0e4      	b.n	80061b6 <UART_SetConfig+0x34e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a5f      	ldr	r2, [pc, #380]	; (8006170 <UART_SetConfig+0x308>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d120      	bne.n	8006038 <UART_SetConfig+0x1d0>
 8005ff6:	4b5b      	ldr	r3, [pc, #364]	; (8006164 <UART_SetConfig+0x2fc>)
 8005ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006000:	2b40      	cmp	r3, #64	; 0x40
 8006002:	d00f      	beq.n	8006024 <UART_SetConfig+0x1bc>
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d802      	bhi.n	800600e <UART_SetConfig+0x1a6>
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <UART_SetConfig+0x1b0>
 800600c:	e010      	b.n	8006030 <UART_SetConfig+0x1c8>
 800600e:	2b80      	cmp	r3, #128	; 0x80
 8006010:	d005      	beq.n	800601e <UART_SetConfig+0x1b6>
 8006012:	2bc0      	cmp	r3, #192	; 0xc0
 8006014:	d009      	beq.n	800602a <UART_SetConfig+0x1c2>
 8006016:	e00b      	b.n	8006030 <UART_SetConfig+0x1c8>
 8006018:	2300      	movs	r3, #0
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e0cb      	b.n	80061b6 <UART_SetConfig+0x34e>
 800601e:	2302      	movs	r3, #2
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e0c8      	b.n	80061b6 <UART_SetConfig+0x34e>
 8006024:	2304      	movs	r3, #4
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e0c5      	b.n	80061b6 <UART_SetConfig+0x34e>
 800602a:	2308      	movs	r3, #8
 800602c:	77fb      	strb	r3, [r7, #31]
 800602e:	e0c2      	b.n	80061b6 <UART_SetConfig+0x34e>
 8006030:	2310      	movs	r3, #16
 8006032:	77fb      	strb	r3, [r7, #31]
 8006034:	bf00      	nop
 8006036:	e0be      	b.n	80061b6 <UART_SetConfig+0x34e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a4d      	ldr	r2, [pc, #308]	; (8006174 <UART_SetConfig+0x30c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d124      	bne.n	800608c <UART_SetConfig+0x224>
 8006042:	4b48      	ldr	r3, [pc, #288]	; (8006164 <UART_SetConfig+0x2fc>)
 8006044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006050:	d012      	beq.n	8006078 <UART_SetConfig+0x210>
 8006052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006056:	d802      	bhi.n	800605e <UART_SetConfig+0x1f6>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <UART_SetConfig+0x204>
 800605c:	e012      	b.n	8006084 <UART_SetConfig+0x21c>
 800605e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006062:	d006      	beq.n	8006072 <UART_SetConfig+0x20a>
 8006064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006068:	d009      	beq.n	800607e <UART_SetConfig+0x216>
 800606a:	e00b      	b.n	8006084 <UART_SetConfig+0x21c>
 800606c:	2300      	movs	r3, #0
 800606e:	77fb      	strb	r3, [r7, #31]
 8006070:	e0a1      	b.n	80061b6 <UART_SetConfig+0x34e>
 8006072:	2302      	movs	r3, #2
 8006074:	77fb      	strb	r3, [r7, #31]
 8006076:	e09e      	b.n	80061b6 <UART_SetConfig+0x34e>
 8006078:	2304      	movs	r3, #4
 800607a:	77fb      	strb	r3, [r7, #31]
 800607c:	e09b      	b.n	80061b6 <UART_SetConfig+0x34e>
 800607e:	2308      	movs	r3, #8
 8006080:	77fb      	strb	r3, [r7, #31]
 8006082:	e098      	b.n	80061b6 <UART_SetConfig+0x34e>
 8006084:	2310      	movs	r3, #16
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	bf00      	nop
 800608a:	e094      	b.n	80061b6 <UART_SetConfig+0x34e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a39      	ldr	r2, [pc, #228]	; (8006178 <UART_SetConfig+0x310>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d124      	bne.n	80060e0 <UART_SetConfig+0x278>
 8006096:	4b33      	ldr	r3, [pc, #204]	; (8006164 <UART_SetConfig+0x2fc>)
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a4:	d012      	beq.n	80060cc <UART_SetConfig+0x264>
 80060a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060aa:	d802      	bhi.n	80060b2 <UART_SetConfig+0x24a>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <UART_SetConfig+0x258>
 80060b0:	e012      	b.n	80060d8 <UART_SetConfig+0x270>
 80060b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b6:	d006      	beq.n	80060c6 <UART_SetConfig+0x25e>
 80060b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060bc:	d009      	beq.n	80060d2 <UART_SetConfig+0x26a>
 80060be:	e00b      	b.n	80060d8 <UART_SetConfig+0x270>
 80060c0:	2301      	movs	r3, #1
 80060c2:	77fb      	strb	r3, [r7, #31]
 80060c4:	e077      	b.n	80061b6 <UART_SetConfig+0x34e>
 80060c6:	2302      	movs	r3, #2
 80060c8:	77fb      	strb	r3, [r7, #31]
 80060ca:	e074      	b.n	80061b6 <UART_SetConfig+0x34e>
 80060cc:	2304      	movs	r3, #4
 80060ce:	77fb      	strb	r3, [r7, #31]
 80060d0:	e071      	b.n	80061b6 <UART_SetConfig+0x34e>
 80060d2:	2308      	movs	r3, #8
 80060d4:	77fb      	strb	r3, [r7, #31]
 80060d6:	e06e      	b.n	80061b6 <UART_SetConfig+0x34e>
 80060d8:	2310      	movs	r3, #16
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	bf00      	nop
 80060de:	e06a      	b.n	80061b6 <UART_SetConfig+0x34e>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a25      	ldr	r2, [pc, #148]	; (800617c <UART_SetConfig+0x314>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d124      	bne.n	8006134 <UART_SetConfig+0x2cc>
 80060ea:	4b1e      	ldr	r3, [pc, #120]	; (8006164 <UART_SetConfig+0x2fc>)
 80060ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80060f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f8:	d012      	beq.n	8006120 <UART_SetConfig+0x2b8>
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fe:	d802      	bhi.n	8006106 <UART_SetConfig+0x29e>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <UART_SetConfig+0x2ac>
 8006104:	e012      	b.n	800612c <UART_SetConfig+0x2c4>
 8006106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610a:	d006      	beq.n	800611a <UART_SetConfig+0x2b2>
 800610c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006110:	d009      	beq.n	8006126 <UART_SetConfig+0x2be>
 8006112:	e00b      	b.n	800612c <UART_SetConfig+0x2c4>
 8006114:	2300      	movs	r3, #0
 8006116:	77fb      	strb	r3, [r7, #31]
 8006118:	e04d      	b.n	80061b6 <UART_SetConfig+0x34e>
 800611a:	2302      	movs	r3, #2
 800611c:	77fb      	strb	r3, [r7, #31]
 800611e:	e04a      	b.n	80061b6 <UART_SetConfig+0x34e>
 8006120:	2304      	movs	r3, #4
 8006122:	77fb      	strb	r3, [r7, #31]
 8006124:	e047      	b.n	80061b6 <UART_SetConfig+0x34e>
 8006126:	2308      	movs	r3, #8
 8006128:	77fb      	strb	r3, [r7, #31]
 800612a:	e044      	b.n	80061b6 <UART_SetConfig+0x34e>
 800612c:	2310      	movs	r3, #16
 800612e:	77fb      	strb	r3, [r7, #31]
 8006130:	bf00      	nop
 8006132:	e040      	b.n	80061b6 <UART_SetConfig+0x34e>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a11      	ldr	r2, [pc, #68]	; (8006180 <UART_SetConfig+0x318>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d139      	bne.n	80061b2 <UART_SetConfig+0x34a>
 800613e:	4b09      	ldr	r3, [pc, #36]	; (8006164 <UART_SetConfig+0x2fc>)
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800614c:	d027      	beq.n	800619e <UART_SetConfig+0x336>
 800614e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006152:	d817      	bhi.n	8006184 <UART_SetConfig+0x31c>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01c      	beq.n	8006192 <UART_SetConfig+0x32a>
 8006158:	e027      	b.n	80061aa <UART_SetConfig+0x342>
 800615a:	bf00      	nop
 800615c:	efff69f3 	.word	0xefff69f3
 8006160:	40011000 	.word	0x40011000
 8006164:	40023800 	.word	0x40023800
 8006168:	40004400 	.word	0x40004400
 800616c:	40004800 	.word	0x40004800
 8006170:	40004c00 	.word	0x40004c00
 8006174:	40005000 	.word	0x40005000
 8006178:	40011400 	.word	0x40011400
 800617c:	40007800 	.word	0x40007800
 8006180:	40007c00 	.word	0x40007c00
 8006184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006188:	d006      	beq.n	8006198 <UART_SetConfig+0x330>
 800618a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800618e:	d009      	beq.n	80061a4 <UART_SetConfig+0x33c>
 8006190:	e00b      	b.n	80061aa <UART_SetConfig+0x342>
 8006192:	2300      	movs	r3, #0
 8006194:	77fb      	strb	r3, [r7, #31]
 8006196:	e00e      	b.n	80061b6 <UART_SetConfig+0x34e>
 8006198:	2302      	movs	r3, #2
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e00b      	b.n	80061b6 <UART_SetConfig+0x34e>
 800619e:	2304      	movs	r3, #4
 80061a0:	77fb      	strb	r3, [r7, #31]
 80061a2:	e008      	b.n	80061b6 <UART_SetConfig+0x34e>
 80061a4:	2308      	movs	r3, #8
 80061a6:	77fb      	strb	r3, [r7, #31]
 80061a8:	e005      	b.n	80061b6 <UART_SetConfig+0x34e>
 80061aa:	2310      	movs	r3, #16
 80061ac:	77fb      	strb	r3, [r7, #31]
 80061ae:	bf00      	nop
 80061b0:	e001      	b.n	80061b6 <UART_SetConfig+0x34e>
 80061b2:	2310      	movs	r3, #16
 80061b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061be:	d17f      	bne.n	80062c0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80061c0:	7ffb      	ldrb	r3, [r7, #31]
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d85c      	bhi.n	8006280 <UART_SetConfig+0x418>
 80061c6:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <UART_SetConfig+0x364>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	080061f1 	.word	0x080061f1
 80061d0:	08006211 	.word	0x08006211
 80061d4:	08006231 	.word	0x08006231
 80061d8:	08006281 	.word	0x08006281
 80061dc:	08006249 	.word	0x08006249
 80061e0:	08006281 	.word	0x08006281
 80061e4:	08006281 	.word	0x08006281
 80061e8:	08006281 	.word	0x08006281
 80061ec:	08006269 	.word	0x08006269
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f0:	f7fd fc10 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 80061f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	005a      	lsls	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	085b      	lsrs	r3, r3, #1
 8006200:	441a      	add	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	fbb2 f3f3 	udiv	r3, r2, r3
 800620a:	b29b      	uxth	r3, r3
 800620c:	61bb      	str	r3, [r7, #24]
        break;
 800620e:	e03a      	b.n	8006286 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006210:	f7fd fc14 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8006214:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	005a      	lsls	r2, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	441a      	add	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	fbb2 f3f3 	udiv	r3, r2, r3
 800622a:	b29b      	uxth	r3, r3
 800622c:	61bb      	str	r3, [r7, #24]
        break;
 800622e:	e02a      	b.n	8006286 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	085a      	lsrs	r2, r3, #1
 8006236:	4b5f      	ldr	r3, [pc, #380]	; (80063b4 <UART_SetConfig+0x54c>)
 8006238:	4413      	add	r3, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6852      	ldr	r2, [r2, #4]
 800623e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006242:	b29b      	uxth	r3, r3
 8006244:	61bb      	str	r3, [r7, #24]
        break;
 8006246:	e01e      	b.n	8006286 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006248:	f7fd fb00 	bl	800384c <HAL_RCC_GetSysClockFreq>
 800624c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	005a      	lsls	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	085b      	lsrs	r3, r3, #1
 8006258:	441a      	add	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006262:	b29b      	uxth	r3, r3
 8006264:	61bb      	str	r3, [r7, #24]
        break;
 8006266:	e00e      	b.n	8006286 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	085b      	lsrs	r3, r3, #1
 800626e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	fbb2 f3f3 	udiv	r3, r2, r3
 800627a:	b29b      	uxth	r3, r3
 800627c:	61bb      	str	r3, [r7, #24]
        break;
 800627e:	e002      	b.n	8006286 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	75fb      	strb	r3, [r7, #23]
        break;
 8006284:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b0f      	cmp	r3, #15
 800628a:	d916      	bls.n	80062ba <UART_SetConfig+0x452>
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006292:	d212      	bcs.n	80062ba <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	b29b      	uxth	r3, r3
 8006298:	f023 030f 	bic.w	r3, r3, #15
 800629c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	085b      	lsrs	r3, r3, #1
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	897b      	ldrh	r3, [r7, #10]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	897a      	ldrh	r2, [r7, #10]
 80062b6:	60da      	str	r2, [r3, #12]
 80062b8:	e070      	b.n	800639c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	75fb      	strb	r3, [r7, #23]
 80062be:	e06d      	b.n	800639c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80062c0:	7ffb      	ldrb	r3, [r7, #31]
 80062c2:	2b08      	cmp	r3, #8
 80062c4:	d859      	bhi.n	800637a <UART_SetConfig+0x512>
 80062c6:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <UART_SetConfig+0x464>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	080062f1 	.word	0x080062f1
 80062d0:	0800630f 	.word	0x0800630f
 80062d4:	0800632d 	.word	0x0800632d
 80062d8:	0800637b 	.word	0x0800637b
 80062dc:	08006345 	.word	0x08006345
 80062e0:	0800637b 	.word	0x0800637b
 80062e4:	0800637b 	.word	0x0800637b
 80062e8:	0800637b 	.word	0x0800637b
 80062ec:	08006363 	.word	0x08006363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f0:	f7fd fb90 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 80062f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	085a      	lsrs	r2, r3, #1
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	441a      	add	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	fbb2 f3f3 	udiv	r3, r2, r3
 8006308:	b29b      	uxth	r3, r3
 800630a:	61bb      	str	r3, [r7, #24]
        break;
 800630c:	e038      	b.n	8006380 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800630e:	f7fd fb95 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8006312:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	085a      	lsrs	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	441a      	add	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	fbb2 f3f3 	udiv	r3, r2, r3
 8006326:	b29b      	uxth	r3, r3
 8006328:	61bb      	str	r3, [r7, #24]
        break;
 800632a:	e029      	b.n	8006380 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	085a      	lsrs	r2, r3, #1
 8006332:	4b21      	ldr	r3, [pc, #132]	; (80063b8 <UART_SetConfig+0x550>)
 8006334:	4413      	add	r3, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6852      	ldr	r2, [r2, #4]
 800633a:	fbb3 f3f2 	udiv	r3, r3, r2
 800633e:	b29b      	uxth	r3, r3
 8006340:	61bb      	str	r3, [r7, #24]
        break;
 8006342:	e01d      	b.n	8006380 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006344:	f7fd fa82 	bl	800384c <HAL_RCC_GetSysClockFreq>
 8006348:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	085a      	lsrs	r2, r3, #1
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	441a      	add	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	fbb2 f3f3 	udiv	r3, r2, r3
 800635c:	b29b      	uxth	r3, r3
 800635e:	61bb      	str	r3, [r7, #24]
        break;
 8006360:	e00e      	b.n	8006380 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	b29b      	uxth	r3, r3
 8006376:	61bb      	str	r3, [r7, #24]
        break;
 8006378:	e002      	b.n	8006380 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	75fb      	strb	r3, [r7, #23]
        break;
 800637e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2b0f      	cmp	r3, #15
 8006384:	d908      	bls.n	8006398 <UART_SetConfig+0x530>
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638c:	d204      	bcs.n	8006398 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	60da      	str	r2, [r3, #12]
 8006396:	e001      	b.n	800639c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	01e84800 	.word	0x01e84800
 80063b8:	00f42400 	.word	0x00f42400

080063bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	f003 0308 	and.w	r3, r3, #8
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01a      	beq.n	80064d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ba:	d10a      	bne.n	80064d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	605a      	str	r2, [r3, #4]
  }
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af02      	add	r7, sp, #8
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800650e:	f7fa fffd 	bl	800150c <HAL_GetTick>
 8006512:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b08      	cmp	r3, #8
 8006520:	d10e      	bne.n	8006540 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006522:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f82a 	bl	800658a <UART_WaitOnFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e020      	b.n	8006582 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b04      	cmp	r3, #4
 800654c:	d10e      	bne.n	800656c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800654e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f814 	bl	800658a <UART_WaitOnFlagUntilTimeout>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e00a      	b.n	8006582 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	603b      	str	r3, [r7, #0]
 8006596:	4613      	mov	r3, r2
 8006598:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800659a:	e05d      	b.n	8006658 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a2:	d059      	beq.n	8006658 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a4:	f7fa ffb2 	bl	800150c <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d302      	bcc.n	80065ba <UART_WaitOnFlagUntilTimeout+0x30>
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d11b      	bne.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0201 	bic.w	r2, r2, #1
 80065d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2220      	movs	r2, #32
 80065de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e042      	b.n	8006678 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d02b      	beq.n	8006658 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800660a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660e:	d123      	bne.n	8006658 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006618:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006628:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0201 	bic.w	r2, r2, #1
 8006638:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2220      	movs	r2, #32
 800663e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2220      	movs	r2, #32
 800664a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e00f      	b.n	8006678 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69da      	ldr	r2, [r3, #28]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	4013      	ands	r3, r2
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	429a      	cmp	r2, r3
 8006666:	bf0c      	ite	eq
 8006668:	2301      	moveq	r3, #1
 800666a:	2300      	movne	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	429a      	cmp	r2, r3
 8006674:	d092      	beq.n	800659c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006680:	b084      	sub	sp, #16
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	f107 001c 	add.w	r0, r7, #28
 800668e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006696:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006698:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800669a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800669e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80066a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80066a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80066aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <SDMMC_Init+0x54>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	b004      	add	sp, #16
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	ffff8100 	.word	0xffff8100

080066d8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2203      	movs	r2, #3
 8006720:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006722:	2002      	movs	r0, #2
 8006724:	f7fa fefe 	bl	8001524 <HAL_Delay>
  
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0303 	and.w	r3, r3, #3
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800676e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006774:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800677a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <SDMMC_SendCommand+0x50>)
 8006788:	4013      	ands	r3, r2
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	fffff000 	.word	0xfffff000

080067a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	b2db      	uxtb	r3, r3
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3314      	adds	r3, #20
 80067cc:	461a      	mov	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	4413      	add	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
}  
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800680a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006810:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006816:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800682e:	2300      	movs	r3, #0

}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800684a:	2310      	movs	r3, #16
 800684c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800684e:	2340      	movs	r3, #64	; 0x40
 8006850:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800685a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800685c:	f107 0308 	add.w	r3, r7, #8
 8006860:	4619      	mov	r1, r3
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff ff74 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006868:	f241 3288 	movw	r2, #5000	; 0x1388
 800686c:	2110      	movs	r1, #16
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fa42 	bl	8006cf8 <SDMMC_GetCmdResp1>
 8006874:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006876:	69fb      	ldr	r3, [r7, #28]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3720      	adds	r7, #32
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800688e:	2311      	movs	r3, #17
 8006890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006892:	2340      	movs	r3, #64	; 0x40
 8006894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800689a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800689e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068a0:	f107 0308 	add.w	r3, r7, #8
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff ff52 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80068ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b0:	2111      	movs	r1, #17
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fa20 	bl	8006cf8 <SDMMC_GetCmdResp1>
 80068b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068ba:	69fb      	ldr	r3, [r7, #28]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3720      	adds	r7, #32
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80068d2:	2312      	movs	r3, #18
 80068d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068d6:	2340      	movs	r3, #64	; 0x40
 80068d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068da:	2300      	movs	r3, #0
 80068dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068e4:	f107 0308 	add.w	r3, r7, #8
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff ff30 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80068f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f4:	2112      	movs	r1, #18
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f9fe 	bl	8006cf8 <SDMMC_GetCmdResp1>
 80068fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068fe:	69fb      	ldr	r3, [r7, #28]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3720      	adds	r7, #32
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006916:	2318      	movs	r3, #24
 8006918:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800691a:	2340      	movs	r3, #64	; 0x40
 800691c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006926:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006928:	f107 0308 	add.w	r3, r7, #8
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7ff ff0e 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006934:	f241 3288 	movw	r2, #5000	; 0x1388
 8006938:	2118      	movs	r1, #24
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f9dc 	bl	8006cf8 <SDMMC_GetCmdResp1>
 8006940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006942:	69fb      	ldr	r3, [r7, #28]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3720      	adds	r7, #32
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800695a:	2319      	movs	r3, #25
 800695c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800695e:	2340      	movs	r3, #64	; 0x40
 8006960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800696a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800696c:	f107 0308 	add.w	r3, r7, #8
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff feec 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006978:	f241 3288 	movw	r2, #5000	; 0x1388
 800697c:	2119      	movs	r1, #25
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f9ba 	bl	8006cf8 <SDMMC_GetCmdResp1>
 8006984:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006986:	69fb      	ldr	r3, [r7, #28]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800699c:	230c      	movs	r3, #12
 800699e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069a0:	2340      	movs	r3, #64	; 0x40
 80069a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069ae:	f107 0308 	add.w	r3, r7, #8
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff fecb 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80069ba:	4a05      	ldr	r2, [pc, #20]	; (80069d0 <SDMMC_CmdStopTransfer+0x40>)
 80069bc:	210c      	movs	r1, #12
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f99a 	bl	8006cf8 <SDMMC_GetCmdResp1>
 80069c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069c6:	69fb      	ldr	r3, [r7, #28]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3720      	adds	r7, #32
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	05f5e100 	.word	0x05f5e100

080069d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08a      	sub	sp, #40	; 0x28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80069e4:	2307      	movs	r3, #7
 80069e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069e8:	2340      	movs	r3, #64	; 0x40
 80069ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069ec:	2300      	movs	r3, #0
 80069ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069f4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069f6:	f107 0310 	add.w	r3, r7, #16
 80069fa:	4619      	mov	r1, r3
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff fea7 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a06:	2107      	movs	r1, #7
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f975 	bl	8006cf8 <SDMMC_GetCmdResp1>
 8006a0e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3728      	adds	r7, #40	; 0x28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b088      	sub	sp, #32
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a38:	f107 0308 	add.w	r3, r7, #8
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff fe86 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f92f 	bl	8006ca8 <SDMMC_GetCmdError>
 8006a4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3720      	adds	r7, #32
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b088      	sub	sp, #32
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006a5e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006a62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006a64:	2308      	movs	r3, #8
 8006a66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a68:	2340      	movs	r3, #64	; 0x40
 8006a6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a76:	f107 0308 	add.w	r3, r7, #8
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff fe67 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fb18 	bl	80070b8 <SDMMC_GetCmdResp7>
 8006a88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a8a:	69fb      	ldr	r3, [r7, #28]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3720      	adds	r7, #32
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b088      	sub	sp, #32
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006aa2:	2337      	movs	r3, #55	; 0x37
 8006aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006aa6:	2340      	movs	r3, #64	; 0x40
 8006aa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ab2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ab4:	f107 0308 	add.w	r3, r7, #8
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fe48 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac4:	2137      	movs	r1, #55	; 0x37
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f916 	bl	8006cf8 <SDMMC_GetCmdResp1>
 8006acc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ace:	69fb      	ldr	r3, [r7, #28]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	4b0d      	ldr	r3, [pc, #52]	; (8006b1c <SDMMC_CmdAppOperCommand+0x44>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006aea:	2329      	movs	r3, #41	; 0x29
 8006aec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006aee:	2340      	movs	r3, #64	; 0x40
 8006af0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006af2:	2300      	movs	r3, #0
 8006af4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006afa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006afc:	f107 0308 	add.w	r3, r7, #8
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff fe24 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fa27 	bl	8006f5c <SDMMC_GetCmdResp3>
 8006b0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b10:	69fb      	ldr	r3, [r7, #28]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	80100000 	.word	0x80100000

08006b20 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006b2e:	2306      	movs	r3, #6
 8006b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b40:	f107 0308 	add.w	r3, r7, #8
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff fe02 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b50:	2106      	movs	r1, #6
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f8d0 	bl	8006cf8 <SDMMC_GetCmdResp1>
 8006b58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b5a:	69fb      	ldr	r3, [r7, #28]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3720      	adds	r7, #32
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006b70:	2333      	movs	r3, #51	; 0x33
 8006b72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b74:	2340      	movs	r3, #64	; 0x40
 8006b76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b82:	f107 0308 	add.w	r3, r7, #8
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff fde1 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b92:	2133      	movs	r1, #51	; 0x33
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f8af 	bl	8006cf8 <SDMMC_GetCmdResp1>
 8006b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b9c:	69fb      	ldr	r3, [r7, #28]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b088      	sub	sp, #32
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006bb6:	23c0      	movs	r3, #192	; 0xc0
 8006bb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006bc4:	f107 0308 	add.w	r3, r7, #8
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff fdc0 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f97d 	bl	8006ed0 <SDMMC_GetCmdResp2>
 8006bd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3720      	adds	r7, #32
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b088      	sub	sp, #32
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006bf0:	2309      	movs	r3, #9
 8006bf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006bf4:	23c0      	movs	r3, #192	; 0xc0
 8006bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c02:	f107 0308 	add.w	r3, r7, #8
 8006c06:	4619      	mov	r1, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff fda1 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f95e 	bl	8006ed0 <SDMMC_GetCmdResp2>
 8006c14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c16:	69fb      	ldr	r3, [r7, #28]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3720      	adds	r7, #32
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c32:	2340      	movs	r3, #64	; 0x40
 8006c34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c36:	2300      	movs	r3, #0
 8006c38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c40:	f107 0308 	add.w	r3, r7, #8
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff fd82 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	2103      	movs	r1, #3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f9bd 	bl	8006fd0 <SDMMC_GetCmdResp6>
 8006c56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c58:	69fb      	ldr	r3, [r7, #28]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3720      	adds	r7, #32
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b088      	sub	sp, #32
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006c70:	230d      	movs	r3, #13
 8006c72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c74:	2340      	movs	r3, #64	; 0x40
 8006c76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c82:	f107 0308 	add.w	r3, r7, #8
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff fd61 	bl	8006750 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c92:	210d      	movs	r1, #13
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f82f 	bl	8006cf8 <SDMMC_GetCmdResp1>
 8006c9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3720      	adds	r7, #32
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006ca8:	b490      	push	{r4, r7}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <SDMMC_GetCmdError+0x48>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a0f      	ldr	r2, [pc, #60]	; (8006cf4 <SDMMC_GetCmdError+0x4c>)
 8006cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cba:	0a5b      	lsrs	r3, r3, #9
 8006cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006cc4:	4623      	mov	r3, r4
 8006cc6:	1e5c      	subs	r4, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d102      	bne.n	8006cd2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ccc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cd0:	e009      	b.n	8006ce6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0f2      	beq.n	8006cc4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	22c5      	movs	r2, #197	; 0xc5
 8006ce2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bc90      	pop	{r4, r7}
 8006cee:	4770      	bx	lr
 8006cf0:	20000010 	.word	0x20000010
 8006cf4:	10624dd3 	.word	0x10624dd3

08006cf8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	460b      	mov	r3, r1
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006d06:	4b6f      	ldr	r3, [pc, #444]	; (8006ec4 <SDMMC_GetCmdResp1+0x1cc>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a6f      	ldr	r2, [pc, #444]	; (8006ec8 <SDMMC_GetCmdResp1+0x1d0>)
 8006d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d10:	0a5b      	lsrs	r3, r3, #9
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006d18:	4623      	mov	r3, r4
 8006d1a:	1e5c      	subs	r4, r3, #1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d24:	e0c9      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f0      	beq.n	8006d18 <SDMMC_GetCmdResp1+0x20>
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1eb      	bne.n	8006d18 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2204      	movs	r2, #4
 8006d50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d52:	2304      	movs	r3, #4
 8006d54:	e0b1      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2201      	movs	r2, #1
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e0a6      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	22c5      	movs	r2, #197	; 0xc5
 8006d70:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7ff fd16 	bl	80067a4 <SDMMC_GetCommandResponse>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	7afb      	ldrb	r3, [r7, #11]
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d001      	beq.n	8006d86 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e099      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006d86:	2100      	movs	r1, #0
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f7ff fd18 	bl	80067be <SDMMC_GetResponse>
 8006d8e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4b4e      	ldr	r3, [pc, #312]	; (8006ecc <SDMMC_GetCmdResp1+0x1d4>)
 8006d94:	4013      	ands	r3, r2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e08d      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	da02      	bge.n	8006daa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006da4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006da8:	e087      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006db4:	2340      	movs	r3, #64	; 0x40
 8006db6:	e080      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006dc2:	2380      	movs	r3, #128	; 0x80
 8006dc4:	e079      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dd4:	e071      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006de4:	e069      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df4:	e061      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006e00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e04:	e059      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e14:	e051      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e24:	e049      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006e30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e34:	e041      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e44:	e039      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e54:	e031      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006e60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e64:	e029      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006e70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e74:	e021      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006e80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e84:	e019      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006e90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e94:	e011      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006ea0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ea4:	e009      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006eb0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006eb4:	e001      	b.n	8006eba <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006eb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd90      	pop	{r4, r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000010 	.word	0x20000010
 8006ec8:	10624dd3 	.word	0x10624dd3
 8006ecc:	fdffe008 	.word	0xfdffe008

08006ed0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006ed0:	b490      	push	{r4, r7}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ed8:	4b1e      	ldr	r3, [pc, #120]	; (8006f54 <SDMMC_GetCmdResp2+0x84>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <SDMMC_GetCmdResp2+0x88>)
 8006ede:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee2:	0a5b      	lsrs	r3, r3, #9
 8006ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006eec:	4623      	mov	r3, r4
 8006eee:	1e5c      	subs	r4, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ef4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ef8:	e026      	b.n	8006f48 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0f0      	beq.n	8006eec <SDMMC_GetCmdResp2+0x1c>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1eb      	bne.n	8006eec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d004      	beq.n	8006f2a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2204      	movs	r2, #4
 8006f24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f26:	2304      	movs	r3, #4
 8006f28:	e00e      	b.n	8006f48 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d004      	beq.n	8006f40 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e003      	b.n	8006f48 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	22c5      	movs	r2, #197	; 0xc5
 8006f44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc90      	pop	{r4, r7}
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	20000010 	.word	0x20000010
 8006f58:	10624dd3 	.word	0x10624dd3

08006f5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006f5c:	b490      	push	{r4, r7}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f64:	4b18      	ldr	r3, [pc, #96]	; (8006fc8 <SDMMC_GetCmdResp3+0x6c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a18      	ldr	r2, [pc, #96]	; (8006fcc <SDMMC_GetCmdResp3+0x70>)
 8006f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6e:	0a5b      	lsrs	r3, r3, #9
 8006f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006f78:	4623      	mov	r3, r4
 8006f7a:	1e5c      	subs	r4, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d102      	bne.n	8006f86 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f84:	e01b      	b.n	8006fbe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0f0      	beq.n	8006f78 <SDMMC_GetCmdResp3+0x1c>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1eb      	bne.n	8006f78 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d004      	beq.n	8006fb6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2204      	movs	r2, #4
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fb2:	2304      	movs	r3, #4
 8006fb4:	e003      	b.n	8006fbe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	22c5      	movs	r2, #197	; 0xc5
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc90      	pop	{r4, r7}
 8006fc6:	4770      	bx	lr
 8006fc8:	20000010 	.word	0x20000010
 8006fcc:	10624dd3 	.word	0x10624dd3

08006fd0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006fd0:	b590      	push	{r4, r7, lr}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fde:	4b34      	ldr	r3, [pc, #208]	; (80070b0 <SDMMC_GetCmdResp6+0xe0>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a34      	ldr	r2, [pc, #208]	; (80070b4 <SDMMC_GetCmdResp6+0xe4>)
 8006fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe8:	0a5b      	lsrs	r3, r3, #9
 8006fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fee:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006ff2:	4623      	mov	r3, r4
 8006ff4:	1e5c      	subs	r4, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d102      	bne.n	8007000 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ffa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ffe:	e052      	b.n	80070a6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007004:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0f0      	beq.n	8006ff2 <SDMMC_GetCmdResp6+0x22>
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1eb      	bne.n	8006ff2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701e:	f003 0304 	and.w	r3, r3, #4
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2204      	movs	r2, #4
 800702a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800702c:	2304      	movs	r3, #4
 800702e:	e03a      	b.n	80070a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d004      	beq.n	8007046 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007042:	2301      	movs	r3, #1
 8007044:	e02f      	b.n	80070a6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff fbac 	bl	80067a4 <SDMMC_GetCommandResponse>
 800704c:	4603      	mov	r3, r0
 800704e:	461a      	mov	r2, r3
 8007050:	7afb      	ldrb	r3, [r7, #11]
 8007052:	4293      	cmp	r3, r2
 8007054:	d001      	beq.n	800705a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007056:	2301      	movs	r3, #1
 8007058:	e025      	b.n	80070a6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	22c5      	movs	r2, #197	; 0xc5
 800705e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007060:	2100      	movs	r1, #0
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f7ff fbab 	bl	80067be <SDMMC_GetResponse>
 8007068:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d106      	bne.n	8007082 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	0c1b      	lsrs	r3, r3, #16
 8007078:	b29a      	uxth	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800707e:	2300      	movs	r3, #0
 8007080:	e011      	b.n	80070a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800708c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007090:	e009      	b.n	80070a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800709c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070a0:	e001      	b.n	80070a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80070a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd90      	pop	{r4, r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20000010 	.word	0x20000010
 80070b4:	10624dd3 	.word	0x10624dd3

080070b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80070b8:	b490      	push	{r4, r7}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070c0:	4b21      	ldr	r3, [pc, #132]	; (8007148 <SDMMC_GetCmdResp7+0x90>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a21      	ldr	r2, [pc, #132]	; (800714c <SDMMC_GetCmdResp7+0x94>)
 80070c6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ca:	0a5b      	lsrs	r3, r3, #9
 80070cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80070d4:	4623      	mov	r3, r4
 80070d6:	1e5c      	subs	r4, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d102      	bne.n	80070e2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070e0:	e02c      	b.n	800713c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0f0      	beq.n	80070d4 <SDMMC_GetCmdResp7+0x1c>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1eb      	bne.n	80070d4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b00      	cmp	r3, #0
 8007106:	d004      	beq.n	8007112 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2204      	movs	r2, #4
 800710c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800710e:	2304      	movs	r3, #4
 8007110:	e014      	b.n	800713c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d004      	beq.n	8007128 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007124:	2301      	movs	r3, #1
 8007126:	e009      	b.n	800713c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2240      	movs	r2, #64	; 0x40
 8007138:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800713a:	2300      	movs	r3, #0
  
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bc90      	pop	{r4, r7}
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	20000010 	.word	0x20000010
 800714c:	10624dd3 	.word	0x10624dd3

08007150 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007150:	b084      	sub	sp, #16
 8007152:	b580      	push	{r7, lr}
 8007154:	b084      	sub	sp, #16
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	f107 001c 	add.w	r0, r7, #28
 800715e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	2b01      	cmp	r3, #1
 8007166:	d120      	bne.n	80071aa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	4b20      	ldr	r3, [pc, #128]	; (80071fc <USB_CoreInit+0xac>)
 800717a:	4013      	ands	r3, r2
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800718c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718e:	2b01      	cmp	r3, #1
 8007190:	d105      	bne.n	800719e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa52 	bl	8007648 <USB_CoreReset>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]
 80071a8:	e010      	b.n	80071cc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa46 	bl	8007648 <USB_CoreReset>
 80071bc:	4603      	mov	r3, r0
 80071be:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d10b      	bne.n	80071ea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f043 0206 	orr.w	r2, r3, #6
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f043 0220 	orr.w	r2, r3, #32
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071f6:	b004      	add	sp, #16
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	ffbdffbf 	.word	0xffbdffbf

08007200 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f023 0201 	bic.w	r2, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d106      	bne.n	800724e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60da      	str	r2, [r3, #12]
 800724c:	e00b      	b.n	8007266 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d106      	bne.n	8007262 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	60da      	str	r2, [r3, #12]
 8007260:	e001      	b.n	8007266 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e003      	b.n	800726e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007266:	2032      	movs	r0, #50	; 0x32
 8007268:	f7fa f95c 	bl	8001524 <HAL_Delay>

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
	...

08007278 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007278:	b084      	sub	sp, #16
 800727a:	b580      	push	{r7, lr}
 800727c:	b086      	sub	sp, #24
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007292:	2300      	movs	r3, #0
 8007294:	613b      	str	r3, [r7, #16]
 8007296:	e009      	b.n	80072ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	3340      	adds	r3, #64	; 0x40
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	2200      	movs	r2, #0
 80072a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	3301      	adds	r3, #1
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b0e      	cmp	r3, #14
 80072b0:	d9f2      	bls.n	8007298 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d11c      	bne.n	80072f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072c6:	f043 0302 	orr.w	r3, r3, #2
 80072ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	e005      	b.n	80072fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007304:	461a      	mov	r2, r3
 8007306:	2300      	movs	r3, #0
 8007308:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007310:	4619      	mov	r1, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007318:	461a      	mov	r2, r3
 800731a:	680b      	ldr	r3, [r1, #0]
 800731c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	2b01      	cmp	r3, #1
 8007322:	d10c      	bne.n	800733e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	2b00      	cmp	r3, #0
 8007328:	d104      	bne.n	8007334 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800732a:	2100      	movs	r1, #0
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f959 	bl	80075e4 <USB_SetDevSpeed>
 8007332:	e018      	b.n	8007366 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007334:	2101      	movs	r1, #1
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f954 	bl	80075e4 <USB_SetDevSpeed>
 800733c:	e013      	b.n	8007366 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007340:	2b03      	cmp	r3, #3
 8007342:	d10c      	bne.n	800735e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800734a:	2100      	movs	r1, #0
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f949 	bl	80075e4 <USB_SetDevSpeed>
 8007352:	e008      	b.n	8007366 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007354:	2101      	movs	r1, #1
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f944 	bl	80075e4 <USB_SetDevSpeed>
 800735c:	e003      	b.n	8007366 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800735e:	2103      	movs	r1, #3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f93f 	bl	80075e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007366:	2110      	movs	r1, #16
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f8f3 	bl	8007554 <USB_FlushTxFifo>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f911 	bl	80075a0 <USB_FlushRxFifo>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738e:	461a      	mov	r2, r3
 8007390:	2300      	movs	r3, #0
 8007392:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739a:	461a      	mov	r2, r3
 800739c:	2300      	movs	r3, #0
 800739e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a6:	461a      	mov	r2, r3
 80073a8:	2300      	movs	r3, #0
 80073aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073ac:	2300      	movs	r3, #0
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	e043      	b.n	800743a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c8:	d118      	bne.n	80073fc <USB_DevInit+0x184>
    {
      if (i == 0U)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	461a      	mov	r2, r3
 80073de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	e013      	b.n	800740e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f2:	461a      	mov	r2, r3
 80073f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	e008      	b.n	800740e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007408:	461a      	mov	r2, r3
 800740a:	2300      	movs	r3, #0
 800740c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741a:	461a      	mov	r2, r3
 800741c:	2300      	movs	r3, #0
 800741e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	461a      	mov	r2, r3
 800742e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007432:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	3301      	adds	r3, #1
 8007438:	613b      	str	r3, [r7, #16]
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	429a      	cmp	r2, r3
 8007440:	d3b7      	bcc.n	80073b2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	e043      	b.n	80074d0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800745a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800745e:	d118      	bne.n	8007492 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10a      	bne.n	800747c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007472:	461a      	mov	r2, r3
 8007474:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	e013      	b.n	80074a4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007488:	461a      	mov	r2, r3
 800748a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	e008      	b.n	80074a4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749e:	461a      	mov	r2, r3
 80074a0:	2300      	movs	r3, #0
 80074a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b0:	461a      	mov	r2, r3
 80074b2:	2300      	movs	r3, #0
 80074b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c2:	461a      	mov	r2, r3
 80074c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	3301      	adds	r3, #1
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d3b7      	bcc.n	8007448 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80074f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	f043 0210 	orr.w	r2, r3, #16
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699a      	ldr	r2, [r3, #24]
 8007510:	4b0e      	ldr	r3, [pc, #56]	; (800754c <USB_DevInit+0x2d4>)
 8007512:	4313      	orrs	r3, r2
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	f043 0208 	orr.w	r2, r3, #8
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800752a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752c:	2b01      	cmp	r3, #1
 800752e:	d105      	bne.n	800753c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	699a      	ldr	r2, [r3, #24]
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <USB_DevInit+0x2d8>)
 8007536:	4313      	orrs	r3, r2
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007548:	b004      	add	sp, #16
 800754a:	4770      	bx	lr
 800754c:	803c3800 	.word	0x803c3800
 8007550:	40000004 	.word	0x40000004

08007554 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	019b      	lsls	r3, r3, #6
 8007566:	f043 0220 	orr.w	r2, r3, #32
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4a09      	ldr	r2, [pc, #36]	; (800759c <USB_FlushTxFifo+0x48>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d901      	bls.n	8007580 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e006      	b.n	800758e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f003 0320 	and.w	r3, r3, #32
 8007588:	2b20      	cmp	r3, #32
 800758a:	d0f0      	beq.n	800756e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	00030d40 	.word	0x00030d40

080075a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2210      	movs	r2, #16
 80075b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3301      	adds	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <USB_FlushRxFifo+0x40>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d901      	bls.n	80075c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e006      	b.n	80075d2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b10      	cmp	r3, #16
 80075ce:	d0f0      	beq.n	80075b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	00030d40 	.word	0x00030d40

080075e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	68f9      	ldr	r1, [r7, #12]
 8007600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007604:	4313      	orrs	r3, r2
 8007606:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007630:	f043 0302 	orr.w	r3, r3, #2
 8007634:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007636:	2003      	movs	r0, #3
 8007638:	f7f9 ff74 	bl	8001524 <HAL_Delay>

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3301      	adds	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4a13      	ldr	r2, [pc, #76]	; (80076ac <USB_CoreReset+0x64>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d901      	bls.n	8007666 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e01b      	b.n	800769e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	daf2      	bge.n	8007654 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f043 0201 	orr.w	r2, r3, #1
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3301      	adds	r3, #1
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4a09      	ldr	r2, [pc, #36]	; (80076ac <USB_CoreReset+0x64>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d901      	bls.n	8007690 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e006      	b.n	800769e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b01      	cmp	r3, #1
 800769a:	d0f0      	beq.n	800767e <USB_CoreReset+0x36>

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	00030d40 	.word	0x00030d40

080076b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80076b4:	4904      	ldr	r1, [pc, #16]	; (80076c8 <MX_FATFS_Init+0x18>)
 80076b6:	4805      	ldr	r0, [pc, #20]	; (80076cc <MX_FATFS_Init+0x1c>)
 80076b8:	f004 fd04 	bl	800c0c4 <FATFS_LinkDriver>
 80076bc:	4603      	mov	r3, r0
 80076be:	461a      	mov	r2, r3
 80076c0:	4b03      	ldr	r3, [pc, #12]	; (80076d0 <MX_FATFS_Init+0x20>)
 80076c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80076c4:	bf00      	nop
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20006b4c 	.word	0x20006b4c
 80076cc:	0800f1b8 	.word	0x0800f1b8
 80076d0:	20006b48 	.word	0x20006b48

080076d4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80076d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80076da:	4618      	mov	r0, r3
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80076ee:	f000 f896 	bl	800781e <BSP_SD_IsDetected>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d001      	beq.n	80076fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80076f8:	2302      	movs	r3, #2
 80076fa:	e012      	b.n	8007722 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80076fc:	480b      	ldr	r0, [pc, #44]	; (800772c <BSP_SD_Init+0x48>)
 80076fe:	f7fc fe09 	bl	8004314 <HAL_SD_Init>
 8007702:	4603      	mov	r3, r0
 8007704:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d109      	bne.n	8007720 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800770c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007710:	4806      	ldr	r0, [pc, #24]	; (800772c <BSP_SD_Init+0x48>)
 8007712:	f7fd fbc1 	bl	8004e98 <HAL_SD_ConfigWideBusOperation>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007720:	79fb      	ldrb	r3, [r7, #7]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	200044cc 	.word	0x200044cc

08007730 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	68f9      	ldr	r1, [r7, #12]
 8007746:	4806      	ldr	r0, [pc, #24]	; (8007760 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007748:	f7fc fe7c 	bl	8004444 <HAL_SD_ReadBlocks_DMA>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007756:	7dfb      	ldrb	r3, [r7, #23]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	200044cc 	.word	0x200044cc

08007764 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	68f9      	ldr	r1, [r7, #12]
 800777a:	4806      	ldr	r0, [pc, #24]	; (8007794 <BSP_SD_WriteBlocks_DMA+0x30>)
 800777c:	f7fc ff4e 	bl	800461c <HAL_SD_WriteBlocks_DMA>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800778a:	7dfb      	ldrb	r3, [r7, #23]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	200044cc 	.word	0x200044cc

08007798 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800779c:	4805      	ldr	r0, [pc, #20]	; (80077b4 <BSP_SD_GetCardState+0x1c>)
 800779e:	f7fd fbf7 	bl	8004f90 <HAL_SD_GetCardState>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	bf14      	ite	ne
 80077a8:	2301      	movne	r3, #1
 80077aa:	2300      	moveq	r3, #0
 80077ac:	b2db      	uxtb	r3, r3
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	200044cc 	.word	0x200044cc

080077b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	4803      	ldr	r0, [pc, #12]	; (80077d0 <BSP_SD_GetCardInfo+0x18>)
 80077c4:	f7fd fb3c 	bl	8004e40 <HAL_SD_GetCardInfo>
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	200044cc 	.word	0x200044cc

080077d4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80077dc:	f000 f818 	bl	8007810 <BSP_SD_AbortCallback>
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80077f0:	f000 f9c4 	bl	8007b7c <BSP_SD_WriteCpltCallback>
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007804:	f000 f9c8 	bl	8007b98 <BSP_SD_ReadCpltCallback>
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007810:	b480      	push	{r7}
 8007812:	af00      	add	r7, sp, #0

}
 8007814:	bf00      	nop
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007824:	2301      	movs	r3, #1
 8007826:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8007828:	f000 f80c 	bl	8007844 <BSP_PlatformIsDetected>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007832:	2300      	movs	r3, #0
 8007834:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007836:	79fb      	ldrb	r3, [r7, #7]
 8007838:	b2db      	uxtb	r3, r3
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800784a:	2301      	movs	r3, #1
 800784c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800784e:	2104      	movs	r1, #4
 8007850:	4806      	ldr	r0, [pc, #24]	; (800786c <BSP_PlatformIsDetected+0x28>)
 8007852:	f7fb fa6d 	bl	8002d30 <HAL_GPIO_ReadPin>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800785c:	2300      	movs	r3, #0
 800785e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8007860:	79fb      	ldrb	r3, [r7, #7]
}  
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	40021800 	.word	0x40021800

08007870 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8007878:	f004 fd9a 	bl	800c3b0 <osKernelSysTick>
 800787c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800787e:	e006      	b.n	800788e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007880:	f7ff ff8a 	bl	8007798 <BSP_SD_GetCardState>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800788a:	2300      	movs	r3, #0
 800788c:	e009      	b.n	80078a2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800788e:	f004 fd8f 	bl	800c3b0 <osKernelSysTick>
 8007892:	4602      	mov	r2, r0
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	429a      	cmp	r2, r3
 800789c:	d8f0      	bhi.n	8007880 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800789e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80078b6:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <SD_CheckStatus+0x38>)
 80078b8:	2201      	movs	r2, #1
 80078ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80078bc:	f7ff ff6c 	bl	8007798 <BSP_SD_GetCardState>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d107      	bne.n	80078d6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80078c6:	4b07      	ldr	r3, [pc, #28]	; (80078e4 <SD_CheckStatus+0x38>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	f023 0301 	bic.w	r3, r3, #1
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	4b04      	ldr	r3, [pc, #16]	; (80078e4 <SD_CheckStatus+0x38>)
 80078d4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80078d6:	4b03      	ldr	r3, [pc, #12]	; (80078e4 <SD_CheckStatus+0x38>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	b2db      	uxtb	r3, r3
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	20000019 	.word	0x20000019

080078e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80078e8:	b590      	push	{r4, r7, lr}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	4603      	mov	r3, r0
 80078f0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 80078f2:	4b20      	ldr	r3, [pc, #128]	; (8007974 <SD_initialize+0x8c>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80078f8:	f004 fd4e 	bl	800c398 <osKernelRunning>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d030      	beq.n	8007964 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8007902:	f7ff feef 	bl	80076e4 <BSP_SD_Init>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d107      	bne.n	800791c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800790c:	79fb      	ldrb	r3, [r7, #7]
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff ffcc 	bl	80078ac <SD_CheckStatus>
 8007914:	4603      	mov	r3, r0
 8007916:	461a      	mov	r2, r3
 8007918:	4b16      	ldr	r3, [pc, #88]	; (8007974 <SD_initialize+0x8c>)
 800791a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800791c:	4b15      	ldr	r3, [pc, #84]	; (8007974 <SD_initialize+0x8c>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b01      	cmp	r3, #1
 8007924:	d01e      	beq.n	8007964 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8007926:	4b14      	ldr	r3, [pc, #80]	; (8007978 <SD_initialize+0x90>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10e      	bne.n	800794c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800792e:	4b13      	ldr	r3, [pc, #76]	; (800797c <SD_initialize+0x94>)
 8007930:	f107 0408 	add.w	r4, r7, #8
 8007934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800793a:	f107 0308 	add.w	r3, r7, #8
 800793e:	2100      	movs	r1, #0
 8007940:	4618      	mov	r0, r3
 8007942:	f004 fe70 	bl	800c626 <osMessageCreate>
 8007946:	4602      	mov	r2, r0
 8007948:	4b0b      	ldr	r3, [pc, #44]	; (8007978 <SD_initialize+0x90>)
 800794a:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <SD_initialize+0x90>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d107      	bne.n	8007964 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8007954:	4b07      	ldr	r3, [pc, #28]	; (8007974 <SD_initialize+0x8c>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	f043 0301 	orr.w	r3, r3, #1
 800795e:	b2da      	uxtb	r2, r3
 8007960:	4b04      	ldr	r3, [pc, #16]	; (8007974 <SD_initialize+0x8c>)
 8007962:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8007964:	4b03      	ldr	r3, [pc, #12]	; (8007974 <SD_initialize+0x8c>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	b2db      	uxtb	r3, r3
}
 800796a:	4618      	mov	r0, r3
 800796c:	371c      	adds	r7, #28
 800796e:	46bd      	mov	sp, r7
 8007970:	bd90      	pop	{r4, r7, pc}
 8007972:	bf00      	nop
 8007974:	20000019 	.word	0x20000019
 8007978:	20000294 	.word	0x20000294
 800797c:	0800f160 	.word	0x0800f160

08007980 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff ff8d 	bl	80078ac <SD_CheckStatus>
 8007992:	4603      	mov	r3, r0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08a      	sub	sp, #40	; 0x28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	607a      	str	r2, [r7, #4]
 80079a6:	603b      	str	r3, [r7, #0]
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80079b2:	f247 5030 	movw	r0, #30000	; 0x7530
 80079b6:	f7ff ff5b 	bl	8007870 <SD_CheckStatusWithTimeout>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	da02      	bge.n	80079c6 <SD_read+0x2a>
  {
    return res;
 80079c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079c4:	e032      	b.n	8007a2c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	6879      	ldr	r1, [r7, #4]
 80079ca:	68b8      	ldr	r0, [r7, #8]
 80079cc:	f7ff feb0 	bl	8007730 <BSP_SD_ReadBlocks_DMA>
 80079d0:	4603      	mov	r3, r0
 80079d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 80079d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d124      	bne.n	8007a28 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80079de:	4b15      	ldr	r3, [pc, #84]	; (8007a34 <SD_read+0x98>)
 80079e0:	6819      	ldr	r1, [r3, #0]
 80079e2:	f107 0314 	add.w	r3, r7, #20
 80079e6:	f247 5230 	movw	r2, #30000	; 0x7530
 80079ea:	4618      	mov	r0, r3
 80079ec:	f004 fe84 	bl	800c6f8 <osMessageGet>

    if (event.status == osEventMessage)
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2b10      	cmp	r3, #16
 80079f4:	d118      	bne.n	8007a28 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d115      	bne.n	8007a28 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80079fc:	f004 fcd8 	bl	800c3b0 <osKernelSysTick>
 8007a00:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007a02:	e008      	b.n	8007a16 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007a04:	f7ff fec8 	bl	8007798 <BSP_SD_GetCardState>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d103      	bne.n	8007a16 <SD_read+0x7a>
              {
                res = RES_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007a14:	e008      	b.n	8007a28 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007a16:	f004 fccb 	bl	800c3b0 <osKernelSysTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	f247 522f 	movw	r2, #29999	; 0x752f
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d9ed      	bls.n	8007a04 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3728      	adds	r7, #40	; 0x28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20000294 	.word	0x20000294

08007a38 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
 8007a42:	603b      	str	r3, [r7, #0]
 8007a44:	4603      	mov	r3, r0
 8007a46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007a4e:	f247 5030 	movw	r0, #30000	; 0x7530
 8007a52:	f7ff ff0d 	bl	8007870 <SD_CheckStatusWithTimeout>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	da02      	bge.n	8007a62 <SD_write+0x2a>
  {
    return res;
 8007a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a60:	e02e      	b.n	8007ac0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	6879      	ldr	r1, [r7, #4]
 8007a66:	68b8      	ldr	r0, [r7, #8]
 8007a68:	f7ff fe7c 	bl	8007764 <BSP_SD_WriteBlocks_DMA>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d124      	bne.n	8007abc <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007a72:	4b15      	ldr	r3, [pc, #84]	; (8007ac8 <SD_write+0x90>)
 8007a74:	6819      	ldr	r1, [r3, #0]
 8007a76:	f107 0314 	add.w	r3, r7, #20
 8007a7a:	f247 5230 	movw	r2, #30000	; 0x7530
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f004 fe3a 	bl	800c6f8 <osMessageGet>

    if (event.status == osEventMessage)
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b10      	cmp	r3, #16
 8007a88:	d118      	bne.n	8007abc <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d115      	bne.n	8007abc <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8007a90:	f004 fc8e 	bl	800c3b0 <osKernelSysTick>
 8007a94:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007a96:	e008      	b.n	8007aaa <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007a98:	f7ff fe7e 	bl	8007798 <BSP_SD_GetCardState>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d103      	bne.n	8007aaa <SD_write+0x72>
          {
            res = RES_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8007aa8:	e008      	b.n	8007abc <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007aaa:	f004 fc81 	bl	800c3b0 <osKernelSysTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	f247 522f 	movw	r2, #29999	; 0x752f
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d9ed      	bls.n	8007a98 <SD_write+0x60>
    }

  }
#endif

  return res;
 8007abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3728      	adds	r7, #40	; 0x28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	20000294 	.word	0x20000294

08007acc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08c      	sub	sp, #48	; 0x30
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	603a      	str	r2, [r7, #0]
 8007ad6:	71fb      	strb	r3, [r7, #7]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007ae2:	4b25      	ldr	r3, [pc, #148]	; (8007b78 <SD_ioctl+0xac>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <SD_ioctl+0x28>
 8007af0:	2303      	movs	r3, #3
 8007af2:	e03c      	b.n	8007b6e <SD_ioctl+0xa2>

  switch (cmd)
 8007af4:	79bb      	ldrb	r3, [r7, #6]
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d834      	bhi.n	8007b64 <SD_ioctl+0x98>
 8007afa:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <SD_ioctl+0x34>)
 8007afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b00:	08007b11 	.word	0x08007b11
 8007b04:	08007b19 	.word	0x08007b19
 8007b08:	08007b31 	.word	0x08007b31
 8007b0c:	08007b4b 	.word	0x08007b4b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b16:	e028      	b.n	8007b6a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007b18:	f107 030c 	add.w	r3, r7, #12
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff fe4b 	bl	80077b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b2e:	e01c      	b.n	8007b6a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007b30:	f107 030c 	add.w	r3, r7, #12
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7ff fe3f 	bl	80077b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b48:	e00f      	b.n	8007b6a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007b4a:	f107 030c 	add.w	r3, r7, #12
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff fe32 	bl	80077b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	0a5a      	lsrs	r2, r3, #9
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b62:	e002      	b.n	8007b6a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007b64:	2304      	movs	r3, #4
 8007b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3730      	adds	r7, #48	; 0x30
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20000019 	.word	0x20000019

08007b7c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8007b80:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <BSP_SD_WriteCpltCallback+0x18>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2200      	movs	r2, #0
 8007b86:	2102      	movs	r1, #2
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f004 fd75 	bl	800c678 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007b8e:	bf00      	nop
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	20000294 	.word	0x20000294

08007b98 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8007b9c:	4b04      	ldr	r3, [pc, #16]	; (8007bb0 <BSP_SD_ReadCpltCallback+0x18>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f004 fd67 	bl	800c678 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007baa:	bf00      	nop
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000294 	.word	0x20000294

08007bb4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	4a08      	ldr	r2, [pc, #32]	; (8007be4 <disk_status+0x30>)
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	79fa      	ldrb	r2, [r7, #7]
 8007bcc:	4905      	ldr	r1, [pc, #20]	; (8007be4 <disk_status+0x30>)
 8007bce:	440a      	add	r2, r1
 8007bd0:	7a12      	ldrb	r2, [r2, #8]
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	4798      	blx	r3
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	200002c0 	.word	0x200002c0

08007be8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007bf6:	79fb      	ldrb	r3, [r7, #7]
 8007bf8:	4a0d      	ldr	r2, [pc, #52]	; (8007c30 <disk_initialize+0x48>)
 8007bfa:	5cd3      	ldrb	r3, [r2, r3]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d111      	bne.n	8007c24 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	4a0b      	ldr	r2, [pc, #44]	; (8007c30 <disk_initialize+0x48>)
 8007c04:	2101      	movs	r1, #1
 8007c06:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007c08:	79fb      	ldrb	r3, [r7, #7]
 8007c0a:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <disk_initialize+0x48>)
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	79fa      	ldrb	r2, [r7, #7]
 8007c16:	4906      	ldr	r1, [pc, #24]	; (8007c30 <disk_initialize+0x48>)
 8007c18:	440a      	add	r2, r1
 8007c1a:	7a12      	ldrb	r2, [r2, #8]
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	4798      	blx	r3
 8007c20:	4603      	mov	r3, r0
 8007c22:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	200002c0 	.word	0x200002c0

08007c34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007c34:	b590      	push	{r4, r7, lr}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	607a      	str	r2, [r7, #4]
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	4a0a      	ldr	r2, [pc, #40]	; (8007c70 <disk_read+0x3c>)
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	689c      	ldr	r4, [r3, #8]
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	4a07      	ldr	r2, [pc, #28]	; (8007c70 <disk_read+0x3c>)
 8007c54:	4413      	add	r3, r2
 8007c56:	7a18      	ldrb	r0, [r3, #8]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	68b9      	ldr	r1, [r7, #8]
 8007c5e:	47a0      	blx	r4
 8007c60:	4603      	mov	r3, r0
 8007c62:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	371c      	adds	r7, #28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd90      	pop	{r4, r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	200002c0 	.word	0x200002c0

08007c74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007c74:	b590      	push	{r4, r7, lr}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	607a      	str	r2, [r7, #4]
 8007c7e:	603b      	str	r3, [r7, #0]
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	4a0a      	ldr	r2, [pc, #40]	; (8007cb0 <disk_write+0x3c>)
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	68dc      	ldr	r4, [r3, #12]
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	4a07      	ldr	r2, [pc, #28]	; (8007cb0 <disk_write+0x3c>)
 8007c94:	4413      	add	r3, r2
 8007c96:	7a18      	ldrb	r0, [r3, #8]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	47a0      	blx	r4
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd90      	pop	{r4, r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200002c0 	.word	0x200002c0

08007cb4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	603a      	str	r2, [r7, #0]
 8007cbe:	71fb      	strb	r3, [r7, #7]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	4a09      	ldr	r2, [pc, #36]	; (8007cec <disk_ioctl+0x38>)
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	79fa      	ldrb	r2, [r7, #7]
 8007cd2:	4906      	ldr	r1, [pc, #24]	; (8007cec <disk_ioctl+0x38>)
 8007cd4:	440a      	add	r2, r1
 8007cd6:	7a10      	ldrb	r0, [r2, #8]
 8007cd8:	79b9      	ldrb	r1, [r7, #6]
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	4798      	blx	r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73fb      	strb	r3, [r7, #15]
  return res;
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	200002c0 	.word	0x200002c0

08007cf0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007d00:	89fb      	ldrh	r3, [r7, #14]
 8007d02:	021b      	lsls	r3, r3, #8
 8007d04:	b21a      	sxth	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	b21b      	sxth	r3, r3
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	b21b      	sxth	r3, r3
 8007d10:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007d12:	89fb      	ldrh	r3, [r7, #14]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	3303      	adds	r3, #3
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	021b      	lsls	r3, r3, #8
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	3202      	adds	r2, #2
 8007d38:	7812      	ldrb	r2, [r2, #0]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	021b      	lsls	r3, r3, #8
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	3201      	adds	r2, #1
 8007d46:	7812      	ldrb	r2, [r2, #0]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	021b      	lsls	r3, r3, #8
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	7812      	ldrb	r2, [r2, #0]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]
	return rv;
 8007d58:	68fb      	ldr	r3, [r7, #12]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8007d66:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3307      	adds	r3, #7
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f04f 0400 	mov.w	r4, #0
 8007d7c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 8007d80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d84:	f04f 0b00 	mov.w	fp, #0
 8007d88:	f04f 0c00 	mov.w	ip, #0
 8007d8c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007d90:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007d94:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	3206      	adds	r2, #6
 8007d9c:	7812      	ldrb	r2, [r2, #0]
 8007d9e:	b2d1      	uxtb	r1, r2
 8007da0:	f04f 0200 	mov.w	r2, #0
 8007da4:	ea4b 0301 	orr.w	r3, fp, r1
 8007da8:	ea4c 0402 	orr.w	r4, ip, r2
 8007dac:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 8007db0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007db4:	f04f 0b00 	mov.w	fp, #0
 8007db8:	f04f 0c00 	mov.w	ip, #0
 8007dbc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007dc0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007dc4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	3205      	adds	r2, #5
 8007dcc:	7812      	ldrb	r2, [r2, #0]
 8007dce:	b2d1      	uxtb	r1, r2
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	ea4b 0301 	orr.w	r3, fp, r1
 8007dd8:	ea4c 0402 	orr.w	r4, ip, r2
 8007ddc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 8007de0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007de4:	f04f 0b00 	mov.w	fp, #0
 8007de8:	f04f 0c00 	mov.w	ip, #0
 8007dec:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007df0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007df4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	3204      	adds	r2, #4
 8007dfc:	7812      	ldrb	r2, [r2, #0]
 8007dfe:	b2d1      	uxtb	r1, r2
 8007e00:	f04f 0200 	mov.w	r2, #0
 8007e04:	ea4b 0301 	orr.w	r3, fp, r1
 8007e08:	ea4c 0402 	orr.w	r4, ip, r2
 8007e0c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8007e10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e14:	f04f 0b00 	mov.w	fp, #0
 8007e18:	f04f 0c00 	mov.w	ip, #0
 8007e1c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007e20:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007e24:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	3203      	adds	r2, #3
 8007e2c:	7812      	ldrb	r2, [r2, #0]
 8007e2e:	b2d1      	uxtb	r1, r2
 8007e30:	f04f 0200 	mov.w	r2, #0
 8007e34:	ea4b 0301 	orr.w	r3, fp, r1
 8007e38:	ea4c 0402 	orr.w	r4, ip, r2
 8007e3c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 8007e40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e44:	f04f 0b00 	mov.w	fp, #0
 8007e48:	f04f 0c00 	mov.w	ip, #0
 8007e4c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007e50:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007e54:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	3202      	adds	r2, #2
 8007e5c:	7812      	ldrb	r2, [r2, #0]
 8007e5e:	b2d1      	uxtb	r1, r2
 8007e60:	f04f 0200 	mov.w	r2, #0
 8007e64:	ea4b 0301 	orr.w	r3, fp, r1
 8007e68:	ea4c 0402 	orr.w	r4, ip, r2
 8007e6c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 8007e70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e74:	f04f 0b00 	mov.w	fp, #0
 8007e78:	f04f 0c00 	mov.w	ip, #0
 8007e7c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007e80:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007e84:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	3201      	adds	r2, #1
 8007e8c:	7812      	ldrb	r2, [r2, #0]
 8007e8e:	b2d1      	uxtb	r1, r2
 8007e90:	f04f 0200 	mov.w	r2, #0
 8007e94:	ea4b 0301 	orr.w	r3, fp, r1
 8007e98:	ea4c 0402 	orr.w	r4, ip, r2
 8007e9c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 8007ea0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ea4:	f04f 0b00 	mov.w	fp, #0
 8007ea8:	f04f 0c00 	mov.w	ip, #0
 8007eac:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007eb0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007eb4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	7812      	ldrb	r2, [r2, #0]
 8007ebc:	b2d1      	uxtb	r1, r2
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	ea4b 0301 	orr.w	r3, fp, r1
 8007ec6:	ea4c 0402 	orr.w	r4, ip, r2
 8007eca:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 8007ece:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8007ede:	4770      	bx	lr

08007ee0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	607a      	str	r2, [r7, #4]
 8007ef2:	887a      	ldrh	r2, [r7, #2]
 8007ef4:	b2d2      	uxtb	r2, r2
 8007ef6:	701a      	strb	r2, [r3, #0]
 8007ef8:	887b      	ldrh	r3, [r7, #2]
 8007efa:	0a1b      	lsrs	r3, r3, #8
 8007efc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	887a      	ldrh	r2, [r7, #2]
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	701a      	strb	r2, [r3, #0]
}
 8007f0a:	bf00      	nop
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007f16:	b480      	push	{r7}
 8007f18:	b083      	sub	sp, #12
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	607a      	str	r2, [r7, #4]
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	b2d2      	uxtb	r2, r2
 8007f2a:	701a      	strb	r2, [r3, #0]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	0a1b      	lsrs	r3, r3, #8
 8007f30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	b2d2      	uxtb	r2, r2
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	0a1b      	lsrs	r3, r3, #8
 8007f42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	607a      	str	r2, [r7, #4]
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	b2d2      	uxtb	r2, r2
 8007f4e:	701a      	strb	r2, [r3, #0]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	0a1b      	lsrs	r3, r3, #8
 8007f54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	b2d2      	uxtb	r2, r2
 8007f60:	701a      	strb	r2, [r3, #0]
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8007f6e:	b490      	push	{r4, r7}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	1c5a      	adds	r2, r3, #1
 8007f7e:	60fa      	str	r2, [r7, #12]
 8007f80:	783a      	ldrb	r2, [r7, #0]
 8007f82:	701a      	strb	r2, [r3, #0]
 8007f84:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f88:	f04f 0300 	mov.w	r3, #0
 8007f8c:	f04f 0400 	mov.w	r4, #0
 8007f90:	0a0b      	lsrs	r3, r1, #8
 8007f92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007f96:	0a14      	lsrs	r4, r2, #8
 8007f98:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	60fa      	str	r2, [r7, #12]
 8007fa2:	783a      	ldrb	r2, [r7, #0]
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007faa:	f04f 0300 	mov.w	r3, #0
 8007fae:	f04f 0400 	mov.w	r4, #0
 8007fb2:	0a0b      	lsrs	r3, r1, #8
 8007fb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007fb8:	0a14      	lsrs	r4, r2, #8
 8007fba:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	60fa      	str	r2, [r7, #12]
 8007fc4:	783a      	ldrb	r2, [r7, #0]
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	f04f 0400 	mov.w	r4, #0
 8007fd4:	0a0b      	lsrs	r3, r1, #8
 8007fd6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007fda:	0a14      	lsrs	r4, r2, #8
 8007fdc:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	60fa      	str	r2, [r7, #12]
 8007fe6:	783a      	ldrb	r2, [r7, #0]
 8007fe8:	701a      	strb	r2, [r3, #0]
 8007fea:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007fee:	f04f 0300 	mov.w	r3, #0
 8007ff2:	f04f 0400 	mov.w	r4, #0
 8007ff6:	0a0b      	lsrs	r3, r1, #8
 8007ff8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007ffc:	0a14      	lsrs	r4, r2, #8
 8007ffe:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	60fa      	str	r2, [r7, #12]
 8008008:	783a      	ldrb	r2, [r7, #0]
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008010:	f04f 0300 	mov.w	r3, #0
 8008014:	f04f 0400 	mov.w	r4, #0
 8008018:	0a0b      	lsrs	r3, r1, #8
 800801a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800801e:	0a14      	lsrs	r4, r2, #8
 8008020:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	60fa      	str	r2, [r7, #12]
 800802a:	783a      	ldrb	r2, [r7, #0]
 800802c:	701a      	strb	r2, [r3, #0]
 800802e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008032:	f04f 0300 	mov.w	r3, #0
 8008036:	f04f 0400 	mov.w	r4, #0
 800803a:	0a0b      	lsrs	r3, r1, #8
 800803c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008040:	0a14      	lsrs	r4, r2, #8
 8008042:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	60fa      	str	r2, [r7, #12]
 800804c:	783a      	ldrb	r2, [r7, #0]
 800804e:	701a      	strb	r2, [r3, #0]
 8008050:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008054:	f04f 0300 	mov.w	r3, #0
 8008058:	f04f 0400 	mov.w	r4, #0
 800805c:	0a0b      	lsrs	r3, r1, #8
 800805e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008062:	0a14      	lsrs	r4, r2, #8
 8008064:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	60fa      	str	r2, [r7, #12]
 800806e:	783a      	ldrb	r2, [r7, #0]
 8008070:	701a      	strb	r2, [r3, #0]
}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bc90      	pop	{r4, r7}
 800807a:	4770      	bx	lr

0800807c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00d      	beq.n	80080b2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	1c53      	adds	r3, r2, #1
 800809a:	613b      	str	r3, [r7, #16]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	1c59      	adds	r1, r3, #1
 80080a0:	6179      	str	r1, [r7, #20]
 80080a2:	7812      	ldrb	r2, [r2, #0]
 80080a4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	607b      	str	r3, [r7, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1f1      	bne.n	8008096 <mem_cpy+0x1a>
	}
}
 80080b2:	bf00      	nop
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80080be:	b480      	push	{r7}
 80080c0:	b087      	sub	sp, #28
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	617a      	str	r2, [r7, #20]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	b2d2      	uxtb	r2, r2
 80080d8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3b01      	subs	r3, #1
 80080de:	607b      	str	r3, [r7, #4]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1f3      	bne.n	80080ce <mem_set+0x10>
}
 80080e6:	bf00      	nop
 80080e8:	371c      	adds	r7, #28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80080f2:	b480      	push	{r7}
 80080f4:	b089      	sub	sp, #36	; 0x24
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	61fb      	str	r3, [r7, #28]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	61fa      	str	r2, [r7, #28]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	4619      	mov	r1, r3
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	61ba      	str	r2, [r7, #24]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	1acb      	subs	r3, r1, r3
 800811e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3b01      	subs	r3, #1
 8008124:	607b      	str	r3, [r7, #4]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <mem_cmp+0x40>
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0eb      	beq.n	800810a <mem_cmp+0x18>

	return r;
 8008132:	697b      	ldr	r3, [r7, #20]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3724      	adds	r7, #36	; 0x24
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800814a:	e002      	b.n	8008152 <chk_chr+0x12>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3301      	adds	r3, #1
 8008150:	607b      	str	r3, [r7, #4]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d005      	beq.n	8008166 <chk_chr+0x26>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	4293      	cmp	r3, r2
 8008164:	d1f2      	bne.n	800814c <chk_chr+0xc>
	return *str;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	781b      	ldrb	r3, [r3, #0]
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d009      	beq.n	8008198 <lock_fs+0x22>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	4618      	mov	r0, r3
 800818a:	f004 f89d 	bl	800c2c8 <ff_req_grant>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <lock_fs+0x22>
 8008194:	2301      	movs	r3, #1
 8008196:	e000      	b.n	800819a <lock_fs+0x24>
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b082      	sub	sp, #8
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	460b      	mov	r3, r1
 80081ac:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00d      	beq.n	80081d0 <unlock_fs+0x2e>
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2b0c      	cmp	r3, #12
 80081b8:	d00a      	beq.n	80081d0 <unlock_fs+0x2e>
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	2b0b      	cmp	r3, #11
 80081be:	d007      	beq.n	80081d0 <unlock_fs+0x2e>
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	2b0f      	cmp	r3, #15
 80081c4:	d004      	beq.n	80081d0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f004 f891 	bl	800c2f2 <ff_rel_grant>
	}
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80081e2:	2300      	movs	r3, #0
 80081e4:	60bb      	str	r3, [r7, #8]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	60fb      	str	r3, [r7, #12]
 80081ea:	e029      	b.n	8008240 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80081ec:	4a27      	ldr	r2, [pc, #156]	; (800828c <chk_lock+0xb4>)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	4413      	add	r3, r2
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d01d      	beq.n	8008236 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80081fa:	4a24      	ldr	r2, [pc, #144]	; (800828c <chk_lock+0xb4>)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	011b      	lsls	r3, r3, #4
 8008200:	4413      	add	r3, r2
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	429a      	cmp	r2, r3
 800820a:	d116      	bne.n	800823a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800820c:	4a1f      	ldr	r2, [pc, #124]	; (800828c <chk_lock+0xb4>)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	4413      	add	r3, r2
 8008214:	3304      	adds	r3, #4
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800821c:	429a      	cmp	r2, r3
 800821e:	d10c      	bne.n	800823a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008220:	4a1a      	ldr	r2, [pc, #104]	; (800828c <chk_lock+0xb4>)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	4413      	add	r3, r2
 8008228:	3308      	adds	r3, #8
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8008230:	429a      	cmp	r2, r3
 8008232:	d102      	bne.n	800823a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008234:	e007      	b.n	8008246 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008236:	2301      	movs	r3, #1
 8008238:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	3301      	adds	r3, #1
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d9d2      	bls.n	80081ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d109      	bne.n	8008260 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d102      	bne.n	8008258 <chk_lock+0x80>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b02      	cmp	r3, #2
 8008256:	d101      	bne.n	800825c <chk_lock+0x84>
 8008258:	2300      	movs	r3, #0
 800825a:	e010      	b.n	800827e <chk_lock+0xa6>
 800825c:	2312      	movs	r3, #18
 800825e:	e00e      	b.n	800827e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d108      	bne.n	8008278 <chk_lock+0xa0>
 8008266:	4a09      	ldr	r2, [pc, #36]	; (800828c <chk_lock+0xb4>)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	011b      	lsls	r3, r3, #4
 800826c:	4413      	add	r3, r2
 800826e:	330c      	adds	r3, #12
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008276:	d101      	bne.n	800827c <chk_lock+0xa4>
 8008278:	2310      	movs	r3, #16
 800827a:	e000      	b.n	800827e <chk_lock+0xa6>
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	200002a0 	.word	0x200002a0

08008290 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008296:	2300      	movs	r3, #0
 8008298:	607b      	str	r3, [r7, #4]
 800829a:	e002      	b.n	80082a2 <enq_lock+0x12>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3301      	adds	r3, #1
 80082a0:	607b      	str	r3, [r7, #4]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d806      	bhi.n	80082b6 <enq_lock+0x26>
 80082a8:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <enq_lock+0x40>)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	011b      	lsls	r3, r3, #4
 80082ae:	4413      	add	r3, r2
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1f2      	bne.n	800829c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	bf14      	ite	ne
 80082bc:	2301      	movne	r3, #1
 80082be:	2300      	moveq	r3, #0
 80082c0:	b2db      	uxtb	r3, r3
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	200002a0 	.word	0x200002a0

080082d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80082de:	2300      	movs	r3, #0
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	e01f      	b.n	8008324 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80082e4:	4a41      	ldr	r2, [pc, #260]	; (80083ec <inc_lock+0x118>)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	011b      	lsls	r3, r3, #4
 80082ea:	4413      	add	r3, r2
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d113      	bne.n	800831e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80082f6:	4a3d      	ldr	r2, [pc, #244]	; (80083ec <inc_lock+0x118>)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	011b      	lsls	r3, r3, #4
 80082fc:	4413      	add	r3, r2
 80082fe:	3304      	adds	r3, #4
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008306:	429a      	cmp	r2, r3
 8008308:	d109      	bne.n	800831e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800830a:	4a38      	ldr	r2, [pc, #224]	; (80083ec <inc_lock+0x118>)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	011b      	lsls	r3, r3, #4
 8008310:	4413      	add	r3, r2
 8008312:	3308      	adds	r3, #8
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800831a:	429a      	cmp	r2, r3
 800831c:	d006      	beq.n	800832c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3301      	adds	r3, #1
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d9dc      	bls.n	80082e4 <inc_lock+0x10>
 800832a:	e000      	b.n	800832e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800832c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2b02      	cmp	r3, #2
 8008332:	d132      	bne.n	800839a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008334:	2300      	movs	r3, #0
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	e002      	b.n	8008340 <inc_lock+0x6c>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d806      	bhi.n	8008354 <inc_lock+0x80>
 8008346:	4a29      	ldr	r2, [pc, #164]	; (80083ec <inc_lock+0x118>)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	011b      	lsls	r3, r3, #4
 800834c:	4413      	add	r3, r2
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f2      	bne.n	800833a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d101      	bne.n	800835e <inc_lock+0x8a>
 800835a:	2300      	movs	r3, #0
 800835c:	e040      	b.n	80083e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4922      	ldr	r1, [pc, #136]	; (80083ec <inc_lock+0x118>)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	440b      	add	r3, r1
 800836a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	491e      	ldr	r1, [pc, #120]	; (80083ec <inc_lock+0x118>)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	011b      	lsls	r3, r3, #4
 8008376:	440b      	add	r3, r1
 8008378:	3304      	adds	r3, #4
 800837a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008380:	491a      	ldr	r1, [pc, #104]	; (80083ec <inc_lock+0x118>)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	011b      	lsls	r3, r3, #4
 8008386:	440b      	add	r3, r1
 8008388:	3308      	adds	r3, #8
 800838a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800838c:	4a17      	ldr	r2, [pc, #92]	; (80083ec <inc_lock+0x118>)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	4413      	add	r3, r2
 8008394:	330c      	adds	r3, #12
 8008396:	2200      	movs	r2, #0
 8008398:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d009      	beq.n	80083b4 <inc_lock+0xe0>
 80083a0:	4a12      	ldr	r2, [pc, #72]	; (80083ec <inc_lock+0x118>)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	011b      	lsls	r3, r3, #4
 80083a6:	4413      	add	r3, r2
 80083a8:	330c      	adds	r3, #12
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <inc_lock+0xe0>
 80083b0:	2300      	movs	r3, #0
 80083b2:	e015      	b.n	80083e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d108      	bne.n	80083cc <inc_lock+0xf8>
 80083ba:	4a0c      	ldr	r2, [pc, #48]	; (80083ec <inc_lock+0x118>)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	011b      	lsls	r3, r3, #4
 80083c0:	4413      	add	r3, r2
 80083c2:	330c      	adds	r3, #12
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	3301      	adds	r3, #1
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	e001      	b.n	80083d0 <inc_lock+0xfc>
 80083cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083d0:	4906      	ldr	r1, [pc, #24]	; (80083ec <inc_lock+0x118>)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	011b      	lsls	r3, r3, #4
 80083d6:	440b      	add	r3, r1
 80083d8:	330c      	adds	r3, #12
 80083da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3301      	adds	r3, #1
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	200002a0 	.word	0x200002a0

080083f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3b01      	subs	r3, #1
 80083fc:	607b      	str	r3, [r7, #4]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d825      	bhi.n	8008450 <dec_lock+0x60>
		n = Files[i].ctr;
 8008404:	4a17      	ldr	r2, [pc, #92]	; (8008464 <dec_lock+0x74>)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	4413      	add	r3, r2
 800840c:	330c      	adds	r3, #12
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008412:	89fb      	ldrh	r3, [r7, #14]
 8008414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008418:	d101      	bne.n	800841e <dec_lock+0x2e>
 800841a:	2300      	movs	r3, #0
 800841c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800841e:	89fb      	ldrh	r3, [r7, #14]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <dec_lock+0x3a>
 8008424:	89fb      	ldrh	r3, [r7, #14]
 8008426:	3b01      	subs	r3, #1
 8008428:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800842a:	4a0e      	ldr	r2, [pc, #56]	; (8008464 <dec_lock+0x74>)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	4413      	add	r3, r2
 8008432:	330c      	adds	r3, #12
 8008434:	89fa      	ldrh	r2, [r7, #14]
 8008436:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008438:	89fb      	ldrh	r3, [r7, #14]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d105      	bne.n	800844a <dec_lock+0x5a>
 800843e:	4a09      	ldr	r2, [pc, #36]	; (8008464 <dec_lock+0x74>)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	011b      	lsls	r3, r3, #4
 8008444:	4413      	add	r3, r2
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	737b      	strb	r3, [r7, #13]
 800844e:	e001      	b.n	8008454 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008450:	2302      	movs	r3, #2
 8008452:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008454:	7b7b      	ldrb	r3, [r7, #13]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	200002a0 	.word	0x200002a0

08008468 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008470:	2300      	movs	r3, #0
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	e010      	b.n	8008498 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008476:	4a0d      	ldr	r2, [pc, #52]	; (80084ac <clear_lock+0x44>)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	011b      	lsls	r3, r3, #4
 800847c:	4413      	add	r3, r2
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	429a      	cmp	r2, r3
 8008484:	d105      	bne.n	8008492 <clear_lock+0x2a>
 8008486:	4a09      	ldr	r2, [pc, #36]	; (80084ac <clear_lock+0x44>)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	4413      	add	r3, r2
 800848e:	2200      	movs	r2, #0
 8008490:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3301      	adds	r3, #1
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d9eb      	bls.n	8008476 <clear_lock+0xe>
	}
}
 800849e:	bf00      	nop
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	200002a0 	.word	0x200002a0

080084b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	78db      	ldrb	r3, [r3, #3]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d034      	beq.n	800852e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7858      	ldrb	r0, [r3, #1]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80084d4:	2301      	movs	r3, #1
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	f7ff fbcc 	bl	8007c74 <disk_write>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	73fb      	strb	r3, [r7, #15]
 80084e6:	e022      	b.n	800852e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	1ad2      	subs	r2, r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d217      	bcs.n	800852e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	789b      	ldrb	r3, [r3, #2]
 8008502:	613b      	str	r3, [r7, #16]
 8008504:	e010      	b.n	8008528 <sync_window+0x78>
					wsect += fs->fsize;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	4413      	add	r3, r2
 800850e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	7858      	ldrb	r0, [r3, #1]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800851a:	2301      	movs	r3, #1
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	f7ff fba9 	bl	8007c74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	3b01      	subs	r3, #1
 8008526:	613b      	str	r3, [r7, #16]
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d8eb      	bhi.n	8008506 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800852e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	429a      	cmp	r2, r3
 800854e:	d01b      	beq.n	8008588 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff ffad 	bl	80084b0 <sync_window>
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d113      	bne.n	8008588 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	7858      	ldrb	r0, [r3, #1]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800856a:	2301      	movs	r3, #1
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	f7ff fb61 	bl	8007c34 <disk_read>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008578:	f04f 33ff 	mov.w	r3, #4294967295
 800857c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800857e:	2301      	movs	r3, #1
 8008580:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
	return res;
 8008588:	7bfb      	ldrb	r3, [r7, #15]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff ff87 	bl	80084b0 <sync_window>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d159      	bne.n	8008660 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d149      	bne.n	8008648 <sync_fs+0xb4>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	791b      	ldrb	r3, [r3, #4]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d145      	bne.n	8008648 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	899b      	ldrh	r3, [r3, #12]
 80085c6:	461a      	mov	r2, r3
 80085c8:	2100      	movs	r1, #0
 80085ca:	f7ff fd78 	bl	80080be <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3340      	adds	r3, #64	; 0x40
 80085d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80085d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff fc80 	bl	8007ee0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	3340      	adds	r3, #64	; 0x40
 80085e4:	4921      	ldr	r1, [pc, #132]	; (800866c <sync_fs+0xd8>)
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff fc95 	bl	8007f16 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3340      	adds	r3, #64	; 0x40
 80085f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80085f4:	491e      	ldr	r1, [pc, #120]	; (8008670 <sync_fs+0xdc>)
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff fc8d 	bl	8007f16 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3340      	adds	r3, #64	; 0x40
 8008600:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	4619      	mov	r1, r3
 800860a:	4610      	mov	r0, r2
 800860c:	f7ff fc83 	bl	8007f16 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3340      	adds	r3, #64	; 0x40
 8008614:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7ff fc79 	bl	8007f16 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	63da      	str	r2, [r3, #60]	; 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	7858      	ldrb	r0, [r3, #1]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800863c:	2301      	movs	r3, #1
 800863e:	f7ff fb19 	bl	8007c74 <disk_write>
			fs->fsi_flag = 0;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	785b      	ldrb	r3, [r3, #1]
 800864c:	2200      	movs	r2, #0
 800864e:	2100      	movs	r1, #0
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff fb2f 	bl	8007cb4 <disk_ioctl>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <sync_fs+0xcc>
 800865c:	2301      	movs	r3, #1
 800865e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008660:	7bfb      	ldrb	r3, [r7, #15]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	41615252 	.word	0x41615252
 8008670:	61417272 	.word	0x61417272

08008674 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	3b02      	subs	r3, #2
 8008682:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	3b02      	subs	r3, #2
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	429a      	cmp	r2, r3
 800868e:	d301      	bcc.n	8008694 <clust2sect+0x20>
 8008690:	2300      	movs	r3, #0
 8008692:	e008      	b.n	80086a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	895b      	ldrh	r3, [r3, #10]
 8008698:	461a      	mov	r2, r3
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	fb03 f202 	mul.w	r2, r3, r2
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a4:	4413      	add	r3, r2
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
	...

080086b4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80086b4:	b590      	push	{r4, r7, lr}
 80086b6:	b089      	sub	sp, #36	; 0x24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d904      	bls.n	80086d4 <get_fat+0x20>
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d302      	bcc.n	80086da <get_fat+0x26>
		val = 1;	/* Internal error */
 80086d4:	2301      	movs	r3, #1
 80086d6:	61fb      	str	r3, [r7, #28]
 80086d8:	e13a      	b.n	8008950 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80086da:	f04f 33ff 	mov.w	r3, #4294967295
 80086de:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	3b01      	subs	r3, #1
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	f200 8126 	bhi.w	8008938 <get_fat+0x284>
 80086ec:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <get_fat+0x40>)
 80086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f2:	bf00      	nop
 80086f4:	08008705 	.word	0x08008705
 80086f8:	080087b3 	.word	0x080087b3
 80086fc:	080087ff 	.word	0x080087ff
 8008700:	0800884f 	.word	0x0800884f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	085b      	lsrs	r3, r3, #1
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	4413      	add	r3, r2
 8008710:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	899b      	ldrh	r3, [r3, #12]
 800871a:	4619      	mov	r1, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008722:	4413      	add	r3, r2
 8008724:	4619      	mov	r1, r3
 8008726:	69b8      	ldr	r0, [r7, #24]
 8008728:	f7ff ff06 	bl	8008538 <move_window>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	f040 8105 	bne.w	800893e <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	60fa      	str	r2, [r7, #12]
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	8992      	ldrh	r2, [r2, #12]
 800873e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008742:	fb02 f201 	mul.w	r2, r2, r1
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	4413      	add	r3, r2
 800874c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008750:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	899b      	ldrh	r3, [r3, #12]
 800875a:	4619      	mov	r1, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008762:	4413      	add	r3, r2
 8008764:	4619      	mov	r1, r3
 8008766:	69b8      	ldr	r0, [r7, #24]
 8008768:	f7ff fee6 	bl	8008538 <move_window>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	f040 80e7 	bne.w	8008942 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	899b      	ldrh	r3, [r3, #12]
 8008778:	461a      	mov	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008780:	fb02 f201 	mul.w	r2, r2, r1
 8008784:	1a9b      	subs	r3, r3, r2
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	4413      	add	r3, r2
 800878a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800878e:	021b      	lsls	r3, r3, #8
 8008790:	461a      	mov	r2, r3
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	4313      	orrs	r3, r2
 8008796:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d002      	beq.n	80087a8 <get_fat+0xf4>
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	091b      	lsrs	r3, r3, #4
 80087a6:	e002      	b.n	80087ae <get_fat+0xfa>
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087ae:	61fb      	str	r3, [r7, #28]
			break;
 80087b0:	e0ce      	b.n	8008950 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	899b      	ldrh	r3, [r3, #12]
 80087ba:	085b      	lsrs	r3, r3, #1
 80087bc:	b29b      	uxth	r3, r3
 80087be:	4619      	mov	r1, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80087c6:	4413      	add	r3, r2
 80087c8:	4619      	mov	r1, r3
 80087ca:	69b8      	ldr	r0, [r7, #24]
 80087cc:	f7ff feb4 	bl	8008538 <move_window>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f040 80b7 	bne.w	8008946 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	8992      	ldrh	r2, [r2, #12]
 80087e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80087ea:	fb02 f200 	mul.w	r2, r2, r0
 80087ee:	1a9b      	subs	r3, r3, r2
 80087f0:	440b      	add	r3, r1
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7ff fa7c 	bl	8007cf0 <ld_word>
 80087f8:	4603      	mov	r3, r0
 80087fa:	61fb      	str	r3, [r7, #28]
			break;
 80087fc:	e0a8      	b.n	8008950 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	899b      	ldrh	r3, [r3, #12]
 8008806:	089b      	lsrs	r3, r3, #2
 8008808:	b29b      	uxth	r3, r3
 800880a:	4619      	mov	r1, r3
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008812:	4413      	add	r3, r2
 8008814:	4619      	mov	r1, r3
 8008816:	69b8      	ldr	r0, [r7, #24]
 8008818:	f7ff fe8e 	bl	8008538 <move_window>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	f040 8093 	bne.w	800894a <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	69ba      	ldr	r2, [r7, #24]
 8008830:	8992      	ldrh	r2, [r2, #12]
 8008832:	fbb3 f0f2 	udiv	r0, r3, r2
 8008836:	fb02 f200 	mul.w	r2, r2, r0
 800883a:	1a9b      	subs	r3, r3, r2
 800883c:	440b      	add	r3, r1
 800883e:	4618      	mov	r0, r3
 8008840:	f7ff fa6e 	bl	8007d20 <ld_dword>
 8008844:	4603      	mov	r3, r0
 8008846:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800884a:	61fb      	str	r3, [r7, #28]
			break;
 800884c:	e080      	b.n	8008950 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8008854:	4323      	orrs	r3, r4
 8008856:	d06f      	beq.n	8008938 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8008868:	f113 30ff 	adds.w	r0, r3, #4294967295
 800886c:	f144 31ff 	adc.w	r1, r4, #4294967295
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	899b      	ldrh	r3, [r3, #12]
 8008874:	b29b      	uxth	r3, r3
 8008876:	f04f 0400 	mov.w	r4, #0
 800887a:	461a      	mov	r2, r3
 800887c:	4623      	mov	r3, r4
 800887e:	f7f7 fcdf 	bl	8000240 <__aeabi_uldivmod>
 8008882:	4603      	mov	r3, r0
 8008884:	460c      	mov	r4, r1
 8008886:	461a      	mov	r2, r3
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	895b      	ldrh	r3, [r3, #10]
 800888c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008890:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	79db      	ldrb	r3, [r3, #7]
 8008896:	2b02      	cmp	r3, #2
 8008898:	d10e      	bne.n	80088b8 <get_fat+0x204>
					if (cofs <= clen) {
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d80a      	bhi.n	80088b8 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d002      	beq.n	80088b0 <get_fat+0x1fc>
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	3301      	adds	r3, #1
 80088ae:	e001      	b.n	80088b4 <get_fat+0x200>
 80088b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80088b4:	61fb      	str	r3, [r7, #28]
						break;
 80088b6:	e04b      	b.n	8008950 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	79db      	ldrb	r3, [r3, #7]
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d108      	bne.n	80088d2 <get_fat+0x21e>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d203      	bcs.n	80088d2 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	3301      	adds	r3, #1
 80088ce:	61fb      	str	r3, [r7, #28]
					break;
 80088d0:	e03e      	b.n	8008950 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	79db      	ldrb	r3, [r3, #7]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d02e      	beq.n	8008938 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80088e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80088e6:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80088e8:	e032      	b.n	8008950 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	899b      	ldrh	r3, [r3, #12]
 80088f2:	089b      	lsrs	r3, r3, #2
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	4619      	mov	r1, r3
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80088fe:	4413      	add	r3, r2
 8008900:	4619      	mov	r1, r3
 8008902:	69b8      	ldr	r0, [r7, #24]
 8008904:	f7ff fe18 	bl	8008538 <move_window>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d11f      	bne.n	800894e <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	8992      	ldrh	r2, [r2, #12]
 800891c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008920:	fb02 f200 	mul.w	r2, r2, r0
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	440b      	add	r3, r1
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff f9f9 	bl	8007d20 <ld_dword>
 800892e:	4603      	mov	r3, r0
 8008930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008934:	61fb      	str	r3, [r7, #28]
					break;
 8008936:	e00b      	b.n	8008950 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008938:	2301      	movs	r3, #1
 800893a:	61fb      	str	r3, [r7, #28]
 800893c:	e008      	b.n	8008950 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800893e:	bf00      	nop
 8008940:	e006      	b.n	8008950 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008942:	bf00      	nop
 8008944:	e004      	b.n	8008950 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008946:	bf00      	nop
 8008948:	e002      	b.n	8008950 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800894a:	bf00      	nop
 800894c:	e000      	b.n	8008950 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800894e:	bf00      	nop
		}
	}

	return val;
 8008950:	69fb      	ldr	r3, [r7, #28]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3724      	adds	r7, #36	; 0x24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd90      	pop	{r4, r7, pc}
 800895a:	bf00      	nop

0800895c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800895c:	b590      	push	{r4, r7, lr}
 800895e:	b089      	sub	sp, #36	; 0x24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008968:	2302      	movs	r3, #2
 800896a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b01      	cmp	r3, #1
 8008970:	f240 8111 	bls.w	8008b96 <put_fat+0x23a>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	429a      	cmp	r2, r3
 800897c:	f080 810b 	bcs.w	8008b96 <put_fat+0x23a>
		switch (fs->fs_type) {
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	3b01      	subs	r3, #1
 8008986:	2b03      	cmp	r3, #3
 8008988:	f200 8105 	bhi.w	8008b96 <put_fat+0x23a>
 800898c:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <put_fat+0x38>)
 800898e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008992:	bf00      	nop
 8008994:	080089a5 	.word	0x080089a5
 8008998:	08008aa9 	.word	0x08008aa9
 800899c:	08008aff 	.word	0x08008aff
 80089a0:	08008aff 	.word	0x08008aff
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	61bb      	str	r3, [r7, #24]
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	085b      	lsrs	r3, r3, #1
 80089ac:	69ba      	ldr	r2, [r7, #24]
 80089ae:	4413      	add	r3, r2
 80089b0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	899b      	ldrh	r3, [r3, #12]
 80089ba:	4619      	mov	r1, r3
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	fbb3 f3f1 	udiv	r3, r3, r1
 80089c2:	4413      	add	r3, r2
 80089c4:	4619      	mov	r1, r3
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f7ff fdb6 	bl	8008538 <move_window>
 80089cc:	4603      	mov	r3, r0
 80089ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089d0:	7ffb      	ldrb	r3, [r7, #31]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f040 80d8 	bne.w	8008b88 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	61ba      	str	r2, [r7, #24]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	8992      	ldrh	r2, [r2, #12]
 80089e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80089ec:	fb02 f200 	mul.w	r2, r2, r0
 80089f0:	1a9b      	subs	r3, r3, r2
 80089f2:	440b      	add	r3, r1
 80089f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00d      	beq.n	8008a1c <put_fat+0xc0>
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	b25b      	sxtb	r3, r3
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	b25a      	sxtb	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	011b      	lsls	r3, r3, #4
 8008a12:	b25b      	sxtb	r3, r3
 8008a14:	4313      	orrs	r3, r2
 8008a16:	b25b      	sxtb	r3, r3
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	e001      	b.n	8008a20 <put_fat+0xc4>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2201      	movs	r2, #1
 8008a28:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	899b      	ldrh	r3, [r3, #12]
 8008a32:	4619      	mov	r1, r3
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a3a:	4413      	add	r3, r2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f7ff fd7a 	bl	8008538 <move_window>
 8008a44:	4603      	mov	r3, r0
 8008a46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a48:	7ffb      	ldrb	r3, [r7, #31]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f040 809e 	bne.w	8008b8c <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	899b      	ldrh	r3, [r3, #12]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a62:	fb02 f200 	mul.w	r2, r2, r0
 8008a66:	1a9b      	subs	r3, r3, r2
 8008a68:	440b      	add	r3, r1
 8008a6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <put_fat+0x122>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	091b      	lsrs	r3, r3, #4
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	e00e      	b.n	8008a9c <put_fat+0x140>
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	b25b      	sxtb	r3, r3
 8008a84:	f023 030f 	bic.w	r3, r3, #15
 8008a88:	b25a      	sxtb	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	0a1b      	lsrs	r3, r3, #8
 8008a8e:	b25b      	sxtb	r3, r3
 8008a90:	f003 030f 	and.w	r3, r3, #15
 8008a94:	b25b      	sxtb	r3, r3
 8008a96:	4313      	orrs	r3, r2
 8008a98:	b25b      	sxtb	r3, r3
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	70da      	strb	r2, [r3, #3]
			break;
 8008aa6:	e076      	b.n	8008b96 <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	899b      	ldrh	r3, [r3, #12]
 8008ab0:	085b      	lsrs	r3, r3, #1
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008abc:	4413      	add	r3, r2
 8008abe:	4619      	mov	r1, r3
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff fd39 	bl	8008538 <move_window>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008aca:	7ffb      	ldrb	r3, [r7, #31]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d15f      	bne.n	8008b90 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	8992      	ldrh	r2, [r2, #12]
 8008ade:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ae2:	fb02 f200 	mul.w	r2, r2, r0
 8008ae6:	1a9b      	subs	r3, r3, r2
 8008ae8:	440b      	add	r3, r1
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	b292      	uxth	r2, r2
 8008aee:	4611      	mov	r1, r2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7ff f9f5 	bl	8007ee0 <st_word>
			fs->wflag = 1;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	70da      	strb	r2, [r3, #3]
			break;
 8008afc:	e04b      	b.n	8008b96 <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	899b      	ldrh	r3, [r3, #12]
 8008b06:	089b      	lsrs	r3, r3, #2
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b12:	4413      	add	r3, r2
 8008b14:	4619      	mov	r1, r3
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7ff fd0e 	bl	8008538 <move_window>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b20:	7ffb      	ldrb	r3, [r7, #31]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d136      	bne.n	8008b94 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d017      	beq.n	8008b5e <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	8992      	ldrh	r2, [r2, #12]
 8008b42:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b46:	fb02 f200 	mul.w	r2, r2, r0
 8008b4a:	1a9b      	subs	r3, r3, r2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7ff f8e6 	bl	8007d20 <ld_dword>
 8008b54:	4603      	mov	r3, r0
 8008b56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b5a:	4323      	orrs	r3, r4
 8008b5c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	8992      	ldrh	r2, [r2, #12]
 8008b6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b70:	fb02 f200 	mul.w	r2, r2, r0
 8008b74:	1a9b      	subs	r3, r3, r2
 8008b76:	440b      	add	r3, r1
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7ff f9cb 	bl	8007f16 <st_dword>
			fs->wflag = 1;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2201      	movs	r2, #1
 8008b84:	70da      	strb	r2, [r3, #3]
			break;
 8008b86:	e006      	b.n	8008b96 <put_fat+0x23a>
			if (res != FR_OK) break;
 8008b88:	bf00      	nop
 8008b8a:	e004      	b.n	8008b96 <put_fat+0x23a>
			if (res != FR_OK) break;
 8008b8c:	bf00      	nop
 8008b8e:	e002      	b.n	8008b96 <put_fat+0x23a>
			if (res != FR_OK) break;
 8008b90:	bf00      	nop
 8008b92:	e000      	b.n	8008b96 <put_fat+0x23a>
			if (res != FR_OK) break;
 8008b94:	bf00      	nop
		}
	}
	return res;
 8008b96:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3724      	adds	r7, #36	; 0x24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd90      	pop	{r4, r7, pc}

08008ba0 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b08a      	sub	sp, #40	; 0x28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	3b02      	subs	r3, #2
 8008bb0:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	3b02      	subs	r3, #2
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d301      	bcc.n	8008bc2 <find_bitmap+0x22>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	61fb      	str	r3, [r7, #28]
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	61bb      	str	r3, [r7, #24]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	08db      	lsrs	r3, r3, #3
 8008bd6:	68f9      	ldr	r1, [r7, #12]
 8008bd8:	8989      	ldrh	r1, [r1, #12]
 8008bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bde:	4413      	add	r3, r2
 8008be0:	4619      	mov	r1, r3
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f7ff fca8 	bl	8008538 <move_window>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <find_bitmap+0x54>
 8008bee:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf2:	e058      	b.n	8008ca6 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	08db      	lsrs	r3, r3, #3
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	8992      	ldrh	r2, [r2, #12]
 8008bfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c00:	fb02 f201 	mul.w	r2, r2, r1
 8008c04:	1a9b      	subs	r3, r3, r2
 8008c06:	623b      	str	r3, [r7, #32]
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	f003 0307 	and.w	r3, r3, #7
 8008c0e:	2201      	movs	r2, #1
 8008c10:	fa02 f303 	lsl.w	r3, r2, r3
 8008c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	3340      	adds	r3, #64	; 0x40
 8008c20:	781a      	ldrb	r2, [r3, #0]
 8008c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c26:	4013      	ands	r3, r2
 8008c28:	74fb      	strb	r3, [r7, #19]
 8008c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	3301      	adds	r3, #1
 8008c38:	61fb      	str	r3, [r7, #28]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3e:	3b02      	subs	r3, #2
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d307      	bcc.n	8008c56 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8008c46:	2300      	movs	r3, #0
 8008c48:	61fb      	str	r3, [r7, #28]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	899b      	ldrh	r3, [r3, #12]
 8008c54:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8008c56:	7cfb      	ldrb	r3, [r7, #19]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d109      	bne.n	8008c70 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	617b      	str	r3, [r7, #20]
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d106      	bne.n	8008c78 <find_bitmap+0xd8>
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	3302      	adds	r3, #2
 8008c6e:	e01a      	b.n	8008ca6 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	61bb      	str	r3, [r7, #24]
 8008c74:	2300      	movs	r3, #0
 8008c76:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8008c78:	69fa      	ldr	r2, [r7, #28]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d101      	bne.n	8008c84 <find_bitmap+0xe4>
 8008c80:	2300      	movs	r3, #0
 8008c82:	e010      	b.n	8008ca6 <find_bitmap+0x106>
			} while (bm);
 8008c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1c5      	bne.n	8008c18 <find_bitmap+0x78>
			bm = 1;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	3301      	adds	r3, #1
 8008c96:	623b      	str	r3, [r7, #32]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	899b      	ldrh	r3, [r3, #12]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d3b9      	bcc.n	8008c18 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8008ca4:	e793      	b.n	8008bce <find_bitmap+0x2e>
	}
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3728      	adds	r7, #40	; 0x28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b088      	sub	sp, #32
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	607a      	str	r2, [r7, #4]
 8008cba:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	3b02      	subs	r3, #2
 8008cc0:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	08db      	lsrs	r3, r3, #3
 8008cca:	68f9      	ldr	r1, [r7, #12]
 8008ccc:	8989      	ldrh	r1, [r1, #12]
 8008cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cd2:	4413      	add	r3, r2
 8008cd4:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	08db      	lsrs	r3, r3, #3
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	8992      	ldrh	r2, [r2, #12]
 8008cde:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ce2:	fb02 f201 	mul.w	r2, r2, r1
 8008ce6:	1a9b      	subs	r3, r3, r2
 8008ce8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f003 0307 	and.w	r3, r3, #7
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf6:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	617a      	str	r2, [r7, #20]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f7ff fc19 	bl	8008538 <move_window>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <change_bitmap+0x62>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e03f      	b.n	8008d90 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	4413      	add	r3, r2
 8008d16:	3340      	adds	r3, #64	; 0x40
 8008d18:	781a      	ldrb	r2, [r3, #0]
 8008d1a:	7ffb      	ldrb	r3, [r7, #31]
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	bf14      	ite	ne
 8008d24:	2301      	movne	r3, #1
 8008d26:	2300      	moveq	r3, #0
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d101      	bne.n	8008d36 <change_bitmap+0x88>
 8008d32:	2302      	movs	r3, #2
 8008d34:	e02c      	b.n	8008d90 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	3340      	adds	r3, #64	; 0x40
 8008d3e:	781a      	ldrb	r2, [r3, #0]
 8008d40:	7ffb      	ldrb	r3, [r7, #31]
 8008d42:	4053      	eors	r3, r2
 8008d44:	b2d9      	uxtb	r1, r3
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	3340      	adds	r3, #64	; 0x40
 8008d4e:	460a      	mov	r2, r1
 8008d50:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2201      	movs	r2, #1
 8008d56:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	607b      	str	r3, [r7, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <change_bitmap+0xba>
 8008d64:	2300      	movs	r3, #0
 8008d66:	e013      	b.n	8008d90 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8008d68:	7ffb      	ldrb	r3, [r7, #31]
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	77fb      	strb	r3, [r7, #31]
 8008d6e:	7ffb      	ldrb	r3, [r7, #31]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1cd      	bne.n	8008d10 <change_bitmap+0x62>
			bm = 1;
 8008d74:	2301      	movs	r3, #1
 8008d76:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	61bb      	str	r3, [r7, #24]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	899b      	ldrh	r3, [r3, #12]
 8008d82:	461a      	mov	r2, r3
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d3c2      	bcc.n	8008d10 <change_bitmap+0x62>
		i = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008d8e:	e7b3      	b.n	8008cf8 <change_bitmap+0x4a>
	}
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3720      	adds	r7, #32
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	79db      	ldrb	r3, [r3, #7]
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d121      	bne.n	8008dec <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	617b      	str	r3, [r7, #20]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	613b      	str	r3, [r7, #16]
 8008db4:	e014      	b.n	8008de0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6818      	ldr	r0, [r3, #0]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	6979      	ldr	r1, [r7, #20]
 8008dc2:	f7ff fdcb 	bl	800895c <put_fat>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <fill_first_frag+0x3c>
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
 8008dd2:	e00c      	b.n	8008dee <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	617b      	str	r3, [r7, #20]
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	613b      	str	r3, [r7, #16]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1e7      	bne.n	8008db6 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b086      	sub	sp, #24
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008e02:	e020      	b.n	8008e46 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6818      	ldr	r0, [r3, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	1c59      	adds	r1, r3, #1
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d905      	bls.n	8008e26 <fill_last_frag+0x30>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	3302      	adds	r3, #2
 8008e24:	e000      	b.n	8008e28 <fill_last_frag+0x32>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	f7ff fd97 	bl	800895c <put_fat>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8008e32:	7dfb      	ldrb	r3, [r7, #23]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <fill_last_frag+0x46>
 8008e38:	7dfb      	ldrb	r3, [r7, #23]
 8008e3a:	e009      	b.n	8008e50 <fill_last_frag+0x5a>
		obj->n_frag--;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	1e5a      	subs	r2, r3, #1
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	69db      	ldr	r3, [r3, #28]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1da      	bne.n	8008e04 <fill_last_frag+0xe>
	}
	return FR_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08a      	sub	sp, #40	; 0x28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d904      	bls.n	8008e86 <remove_chain+0x2e>
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d301      	bcc.n	8008e8a <remove_chain+0x32>
 8008e86:	2302      	movs	r3, #2
 8008e88:	e096      	b.n	8008fb8 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d014      	beq.n	8008eba <remove_chain+0x62>
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d103      	bne.n	8008ea0 <remove_chain+0x48>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	79db      	ldrb	r3, [r3, #7]
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d00c      	beq.n	8008eba <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	69b8      	ldr	r0, [r7, #24]
 8008ea8:	f7ff fd58 	bl	800895c <put_fat>
 8008eac:	4603      	mov	r3, r0
 8008eae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008eb0:	7ffb      	ldrb	r3, [r7, #31]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <remove_chain+0x62>
 8008eb6:	7ffb      	ldrb	r3, [r7, #31]
 8008eb8:	e07e      	b.n	8008fb8 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008eba:	68b9      	ldr	r1, [r7, #8]
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7ff fbf9 	bl	80086b4 <get_fat>
 8008ec2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d055      	beq.n	8008f76 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d101      	bne.n	8008ed4 <remove_chain+0x7c>
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	e071      	b.n	8008fb8 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eda:	d101      	bne.n	8008ee0 <remove_chain+0x88>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e06b      	b.n	8008fb8 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	d00b      	beq.n	8008f00 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008ee8:	2200      	movs	r2, #0
 8008eea:	68b9      	ldr	r1, [r7, #8]
 8008eec:	69b8      	ldr	r0, [r7, #24]
 8008eee:	f7ff fd35 	bl	800895c <put_fat>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008ef6:	7ffb      	ldrb	r3, [r7, #31]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <remove_chain+0xa8>
 8008efc:	7ffb      	ldrb	r3, [r7, #31]
 8008efe:	e05b      	b.n	8008fb8 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	6a1a      	ldr	r2, [r3, #32]
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f08:	3b02      	subs	r3, #2
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d20b      	bcs.n	8008f26 <remove_chain+0xce>
			fs->free_clst++;
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	791b      	ldrb	r3, [r3, #4]
 8008f1c:	f043 0301 	orr.w	r3, r3, #1
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d102      	bne.n	8008f36 <remove_chain+0xde>
			ecl = nxt;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	623b      	str	r3, [r7, #32]
 8008f34:	e017      	b.n	8008f66 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	d10f      	bne.n	8008f5e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8008f3e:	6a3a      	ldr	r2, [r7, #32]
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	2300      	movs	r3, #0
 8008f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f4a:	69b8      	ldr	r0, [r7, #24]
 8008f4c:	f7ff feaf 	bl	8008cae <change_bitmap>
 8008f50:	4603      	mov	r3, r0
 8008f52:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8008f54:	7ffb      	ldrb	r3, [r7, #31]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <remove_chain+0x106>
 8008f5a:	7ffb      	ldrb	r3, [r7, #31]
 8008f5c:	e02c      	b.n	8008fb8 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	623b      	str	r3, [r7, #32]
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d3a2      	bcc.n	8008eba <remove_chain+0x62>
 8008f74:	e000      	b.n	8008f78 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8008f76:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d11a      	bne.n	8008fb6 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d103      	bne.n	8008f8e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	71da      	strb	r2, [r3, #7]
 8008f8c:	e013      	b.n	8008fb6 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	79db      	ldrb	r3, [r3, #7]
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d10f      	bne.n	8008fb6 <remove_chain+0x15e>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d30a      	bcc.n	8008fb6 <remove_chain+0x15e>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	689a      	ldr	r2, [r3, #8]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	4413      	add	r3, r2
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d802      	bhi.n	8008fb6 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3728      	adds	r7, #40	; 0x28
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10d      	bne.n	8008ff2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d004      	beq.n	8008fec <create_chain+0x2c>
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d31b      	bcc.n	8009024 <create_chain+0x64>
 8008fec:	2301      	movs	r3, #1
 8008fee:	61bb      	str	r3, [r7, #24]
 8008ff0:	e018      	b.n	8009024 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff fb5d 	bl	80086b4 <get_fat>
 8008ffa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d801      	bhi.n	8009006 <create_chain+0x46>
 8009002:	2301      	movs	r3, #1
 8009004:	e0d9      	b.n	80091ba <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900c:	d101      	bne.n	8009012 <create_chain+0x52>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	e0d3      	b.n	80091ba <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	429a      	cmp	r2, r3
 800901a:	d201      	bcs.n	8009020 <create_chain+0x60>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	e0cc      	b.n	80091ba <create_chain+0x1fa>
		scl = clst;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b04      	cmp	r3, #4
 800902a:	d164      	bne.n	80090f6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800902c:	2201      	movs	r2, #1
 800902e:	69b9      	ldr	r1, [r7, #24]
 8009030:	6938      	ldr	r0, [r7, #16]
 8009032:	f7ff fdb5 	bl	8008ba0 <find_bitmap>
 8009036:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <create_chain+0x86>
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009044:	d101      	bne.n	800904a <create_chain+0x8a>
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	e0b7      	b.n	80091ba <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800904a:	2301      	movs	r3, #1
 800904c:	2201      	movs	r2, #1
 800904e:	69f9      	ldr	r1, [r7, #28]
 8009050:	6938      	ldr	r0, [r7, #16]
 8009052:	f7ff fe2c 	bl	8008cae <change_bitmap>
 8009056:	4603      	mov	r3, r0
 8009058:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800905a:	7dfb      	ldrb	r3, [r7, #23]
 800905c:	2b02      	cmp	r3, #2
 800905e:	d101      	bne.n	8009064 <create_chain+0xa4>
 8009060:	2301      	movs	r3, #1
 8009062:	e0aa      	b.n	80091ba <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8009064:	7dfb      	ldrb	r3, [r7, #23]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d102      	bne.n	8009070 <create_chain+0xb0>
 800906a:	f04f 33ff 	mov.w	r3, #4294967295
 800906e:	e0a4      	b.n	80091ba <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d103      	bne.n	800907e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2202      	movs	r2, #2
 800907a:	71da      	strb	r2, [r3, #7]
 800907c:	e011      	b.n	80090a2 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	79db      	ldrb	r3, [r3, #7]
 8009082:	2b02      	cmp	r3, #2
 8009084:	d10d      	bne.n	80090a2 <create_chain+0xe2>
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	3301      	adds	r3, #1
 800908a:	69fa      	ldr	r2, [r7, #28]
 800908c:	429a      	cmp	r2, r3
 800908e:	d008      	beq.n	80090a2 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	1ad2      	subs	r2, r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2203      	movs	r2, #3
 80090a0:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	79db      	ldrb	r3, [r3, #7]
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d064      	beq.n	8009174 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	3301      	adds	r3, #1
 80090ae:	69fa      	ldr	r2, [r7, #28]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d10b      	bne.n	80090cc <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <create_chain+0x104>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	3301      	adds	r3, #1
 80090c2:	e000      	b.n	80090c6 <create_chain+0x106>
 80090c4:	2302      	movs	r3, #2
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	61d3      	str	r3, [r2, #28]
 80090ca:	e053      	b.n	8009174 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d102      	bne.n	80090da <create_chain+0x11a>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff fe89 	bl	8008df6 <fill_last_frag>
 80090e4:	4603      	mov	r3, r0
 80090e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80090e8:	7dfb      	ldrb	r3, [r7, #23]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d142      	bne.n	8009174 <create_chain+0x1b4>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	61da      	str	r2, [r3, #28]
 80090f4:	e03e      	b.n	8009174 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	3301      	adds	r3, #1
 80090fe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	69fa      	ldr	r2, [r7, #28]
 8009106:	429a      	cmp	r2, r3
 8009108:	d307      	bcc.n	800911a <create_chain+0x15a>
				ncl = 2;
 800910a:	2302      	movs	r3, #2
 800910c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800910e:	69fa      	ldr	r2, [r7, #28]
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	429a      	cmp	r2, r3
 8009114:	d901      	bls.n	800911a <create_chain+0x15a>
 8009116:	2300      	movs	r3, #0
 8009118:	e04f      	b.n	80091ba <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800911a:	69f9      	ldr	r1, [r7, #28]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7ff fac9 	bl	80086b4 <get_fat>
 8009122:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00e      	beq.n	8009148 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d003      	beq.n	8009138 <create_chain+0x178>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009136:	d101      	bne.n	800913c <create_chain+0x17c>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	e03e      	b.n	80091ba <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800913c:	69fa      	ldr	r2, [r7, #28]
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	429a      	cmp	r2, r3
 8009142:	d1da      	bne.n	80090fa <create_chain+0x13a>
 8009144:	2300      	movs	r3, #0
 8009146:	e038      	b.n	80091ba <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8009148:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800914a:	f04f 32ff 	mov.w	r2, #4294967295
 800914e:	69f9      	ldr	r1, [r7, #28]
 8009150:	6938      	ldr	r0, [r7, #16]
 8009152:	f7ff fc03 	bl	800895c <put_fat>
 8009156:	4603      	mov	r3, r0
 8009158:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800915a:	7dfb      	ldrb	r3, [r7, #23]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d109      	bne.n	8009174 <create_chain+0x1b4>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d006      	beq.n	8009174 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009166:	69fa      	ldr	r2, [r7, #28]
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6938      	ldr	r0, [r7, #16]
 800916c:	f7ff fbf6 	bl	800895c <put_fat>
 8009170:	4603      	mov	r3, r0
 8009172:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d116      	bne.n	80091a8 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	69fa      	ldr	r2, [r7, #28]
 800917e:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	6a1a      	ldr	r2, [r3, #32]
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009188:	3b02      	subs	r3, #2
 800918a:	429a      	cmp	r2, r3
 800918c:	d804      	bhi.n	8009198 <create_chain+0x1d8>
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	1e5a      	subs	r2, r3, #1
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	791b      	ldrb	r3, [r3, #4]
 800919c:	f043 0301 	orr.w	r3, r3, #1
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	711a      	strb	r2, [r3, #4]
 80091a6:	e007      	b.n	80091b8 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80091a8:	7dfb      	ldrb	r3, [r7, #23]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d102      	bne.n	80091b4 <create_chain+0x1f4>
 80091ae:	f04f 33ff 	mov.w	r3, #4294967295
 80091b2:	e000      	b.n	80091b6 <create_chain+0x1f6>
 80091b4:	2301      	movs	r3, #1
 80091b6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80091b8:	69fb      	ldr	r3, [r7, #28]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3720      	adds	r7, #32
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b086      	sub	sp, #24
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b04      	cmp	r3, #4
 80091d8:	d102      	bne.n	80091e0 <dir_sdi+0x1e>
 80091da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091de:	e001      	b.n	80091e4 <dir_sdi+0x22>
 80091e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d904      	bls.n	80091f4 <dir_sdi+0x32>
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	f003 031f 	and.w	r3, r3, #31
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <dir_sdi+0x36>
		return FR_INT_ERR;
 80091f4:	2302      	movs	r3, #2
 80091f6:	e074      	b.n	80092e2 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d109      	bne.n	800921e <dir_sdi+0x5c>
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d905      	bls.n	800921e <dir_sdi+0x5c>
		clst = fs->dirbase;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009216:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10c      	bne.n	800923e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	095b      	lsrs	r3, r3, #5
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	8912      	ldrh	r2, [r2, #8]
 800922c:	4293      	cmp	r3, r2
 800922e:	d301      	bcc.n	8009234 <dir_sdi+0x72>
 8009230:	2302      	movs	r3, #2
 8009232:	e056      	b.n	80092e2 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	639a      	str	r2, [r3, #56]	; 0x38
 800923c:	e02d      	b.n	800929a <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	895b      	ldrh	r3, [r3, #10]
 8009242:	461a      	mov	r2, r3
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	899b      	ldrh	r3, [r3, #12]
 8009248:	fb03 f302 	mul.w	r3, r3, r2
 800924c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800924e:	e019      	b.n	8009284 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6979      	ldr	r1, [r7, #20]
 8009254:	4618      	mov	r0, r3
 8009256:	f7ff fa2d 	bl	80086b4 <get_fat>
 800925a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009262:	d101      	bne.n	8009268 <dir_sdi+0xa6>
 8009264:	2301      	movs	r3, #1
 8009266:	e03c      	b.n	80092e2 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d904      	bls.n	8009278 <dir_sdi+0xb6>
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	429a      	cmp	r2, r3
 8009276:	d301      	bcc.n	800927c <dir_sdi+0xba>
 8009278:	2302      	movs	r3, #2
 800927a:	e032      	b.n	80092e2 <dir_sdi+0x120>
			ofs -= csz;
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	429a      	cmp	r2, r3
 800928a:	d2e1      	bcs.n	8009250 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800928c:	6979      	ldr	r1, [r7, #20]
 800928e:	6938      	ldr	r0, [r7, #16]
 8009290:	f7ff f9f0 	bl	8008674 <clust2sect>
 8009294:	4602      	mov	r2, r0
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <dir_sdi+0xea>
 80092a8:	2302      	movs	r3, #2
 80092aa:	e01a      	b.n	80092e2 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	899b      	ldrh	r3, [r3, #12]
 80092b4:	4619      	mov	r1, r3
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80092bc:	441a      	add	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	899b      	ldrh	r3, [r3, #12]
 80092cc:	461a      	mov	r2, r3
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80092d4:	fb02 f200 	mul.w	r2, r2, r0
 80092d8:	1a9b      	subs	r3, r3, r2
 80092da:	18ca      	adds	r2, r1, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b086      	sub	sp, #24
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fe:	3320      	adds	r3, #32
 8009300:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00b      	beq.n	8009322 <dir_next+0x38>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	2b04      	cmp	r3, #4
 8009310:	d102      	bne.n	8009318 <dir_next+0x2e>
 8009312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009316:	e001      	b.n	800931c <dir_next+0x32>
 8009318:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	429a      	cmp	r2, r3
 8009320:	d801      	bhi.n	8009326 <dir_next+0x3c>
 8009322:	2304      	movs	r3, #4
 8009324:	e0c3      	b.n	80094ae <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	899b      	ldrh	r3, [r3, #12]
 800932a:	461a      	mov	r2, r3
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009332:	fb02 f201 	mul.w	r2, r2, r1
 8009336:	1a9b      	subs	r3, r3, r2
 8009338:	2b00      	cmp	r3, #0
 800933a:	f040 80a5 	bne.w	8009488 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10b      	bne.n	8009368 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	095b      	lsrs	r3, r3, #5
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	8912      	ldrh	r2, [r2, #8]
 8009358:	4293      	cmp	r3, r2
 800935a:	f0c0 8095 	bcc.w	8009488 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	639a      	str	r2, [r3, #56]	; 0x38
 8009364:	2304      	movs	r3, #4
 8009366:	e0a2      	b.n	80094ae <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	899b      	ldrh	r3, [r3, #12]
 800936c:	461a      	mov	r2, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	fbb3 f3f2 	udiv	r3, r3, r2
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	8952      	ldrh	r2, [r2, #10]
 8009378:	3a01      	subs	r2, #1
 800937a:	4013      	ands	r3, r2
 800937c:	2b00      	cmp	r3, #0
 800937e:	f040 8083 	bne.w	8009488 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009388:	4619      	mov	r1, r3
 800938a:	4610      	mov	r0, r2
 800938c:	f7ff f992 	bl	80086b4 <get_fat>
 8009390:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d801      	bhi.n	800939c <dir_next+0xb2>
 8009398:	2302      	movs	r3, #2
 800939a:	e088      	b.n	80094ae <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a2:	d101      	bne.n	80093a8 <dir_next+0xbe>
 80093a4:	2301      	movs	r3, #1
 80093a6:	e082      	b.n	80094ae <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d360      	bcc.n	8009474 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d104      	bne.n	80093c2 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	639a      	str	r2, [r3, #56]	; 0x38
 80093be:	2304      	movs	r3, #4
 80093c0:	e075      	b.n	80094ae <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c8:	4619      	mov	r1, r3
 80093ca:	4610      	mov	r0, r2
 80093cc:	f7ff fdf8 	bl	8008fc0 <create_chain>
 80093d0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d101      	bne.n	80093dc <dir_next+0xf2>
 80093d8:	2307      	movs	r3, #7
 80093da:	e068      	b.n	80094ae <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d101      	bne.n	80093e6 <dir_next+0xfc>
 80093e2:	2302      	movs	r3, #2
 80093e4:	e063      	b.n	80094ae <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ec:	d101      	bne.n	80093f2 <dir_next+0x108>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e05d      	b.n	80094ae <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	79db      	ldrb	r3, [r3, #7]
 80093f6:	f043 0304 	orr.w	r3, r3, #4
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff f855 	bl	80084b0 <sync_window>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <dir_next+0x126>
 800940c:	2301      	movs	r3, #1
 800940e:	e04e      	b.n	80094ae <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	899b      	ldrh	r3, [r3, #12]
 800941a:	461a      	mov	r2, r3
 800941c:	2100      	movs	r1, #0
 800941e:	f7fe fe4e 	bl	80080be <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009422:	2300      	movs	r3, #0
 8009424:	613b      	str	r3, [r7, #16]
 8009426:	6979      	ldr	r1, [r7, #20]
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f7ff f923 	bl	8008674 <clust2sect>
 800942e:	4602      	mov	r2, r0
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	63da      	str	r2, [r3, #60]	; 0x3c
 8009434:	e012      	b.n	800945c <dir_next+0x172>
						fs->wflag = 1;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2201      	movs	r2, #1
 800943a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7ff f837 	bl	80084b0 <sync_window>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <dir_next+0x162>
 8009448:	2301      	movs	r3, #1
 800944a:	e030      	b.n	80094ae <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	3301      	adds	r3, #1
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	63da      	str	r2, [r3, #60]	; 0x3c
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	895b      	ldrh	r3, [r3, #10]
 8009460:	461a      	mov	r2, r3
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	4293      	cmp	r3, r2
 8009466:	d3e6      	bcc.n	8009436 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	1ad2      	subs	r2, r2, r3
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	63da      	str	r2, [r3, #60]	; 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800947a:	6979      	ldr	r1, [r7, #20]
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f7ff f8f9 	bl	8008674 <clust2sect>
 8009482:	4602      	mov	r2, r0
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	899b      	ldrh	r3, [r3, #12]
 8009498:	461a      	mov	r2, r3
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	fbb3 f0f2 	udiv	r0, r3, r2
 80094a0:	fb02 f200 	mul.w	r2, r2, r0
 80094a4:	1a9b      	subs	r3, r3, r2
 80094a6:	18ca      	adds	r2, r1, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b086      	sub	sp, #24
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80094c6:	2100      	movs	r1, #0
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7ff fe7a 	bl	80091c2 <dir_sdi>
 80094ce:	4603      	mov	r3, r0
 80094d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d140      	bne.n	800955a <dir_alloc+0xa4>
		n = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e0:	4619      	mov	r1, r3
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f7ff f828 	bl	8008538 <move_window>
 80094e8:	4603      	mov	r3, r0
 80094ea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d132      	bne.n	8009558 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	d108      	bne.n	800950c <dir_alloc+0x56>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	b25b      	sxtb	r3, r3
 8009502:	43db      	mvns	r3, r3
 8009504:	b2db      	uxtb	r3, r3
 8009506:	09db      	lsrs	r3, r3, #7
 8009508:	b2db      	uxtb	r3, r3
 800950a:	e00f      	b.n	800952c <dir_alloc+0x76>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	2be5      	cmp	r3, #229	; 0xe5
 8009514:	d004      	beq.n	8009520 <dir_alloc+0x6a>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d101      	bne.n	8009524 <dir_alloc+0x6e>
 8009520:	2301      	movs	r3, #1
 8009522:	e000      	b.n	8009526 <dir_alloc+0x70>
 8009524:	2300      	movs	r3, #0
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	d007      	beq.n	8009540 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	3301      	adds	r3, #1
 8009534:	613b      	str	r3, [r7, #16]
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	429a      	cmp	r2, r3
 800953c:	d102      	bne.n	8009544 <dir_alloc+0x8e>
 800953e:	e00c      	b.n	800955a <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009540:	2300      	movs	r3, #0
 8009542:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009544:	2101      	movs	r1, #1
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7ff fecf 	bl	80092ea <dir_next>
 800954c:	4603      	mov	r3, r0
 800954e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009550:	7dfb      	ldrb	r3, [r7, #23]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0c2      	beq.n	80094dc <dir_alloc+0x26>
 8009556:	e000      	b.n	800955a <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8009558:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800955a:	7dfb      	ldrb	r3, [r7, #23]
 800955c:	2b04      	cmp	r3, #4
 800955e:	d101      	bne.n	8009564 <dir_alloc+0xae>
 8009560:	2307      	movs	r3, #7
 8009562:	75fb      	strb	r3, [r7, #23]
	return res;
 8009564:	7dfb      	ldrb	r3, [r7, #23]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	331a      	adds	r3, #26
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe fbb7 	bl	8007cf0 <ld_word>
 8009582:	4603      	mov	r3, r0
 8009584:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	2b03      	cmp	r3, #3
 800958c:	d109      	bne.n	80095a2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	3314      	adds	r3, #20
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe fbac 	bl	8007cf0 <ld_word>
 8009598:	4603      	mov	r3, r0
 800959a:	041b      	lsls	r3, r3, #16
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	4313      	orrs	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80095a2:	68fb      	ldr	r3, [r7, #12]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	331a      	adds	r3, #26
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	b292      	uxth	r2, r2
 80095c0:	4611      	mov	r1, r2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe fc8c 	bl	8007ee0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b03      	cmp	r3, #3
 80095ce:	d109      	bne.n	80095e4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	f103 0214 	add.w	r2, r3, #20
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	0c1b      	lsrs	r3, r3, #16
 80095da:	b29b      	uxth	r3, r3
 80095dc:	4619      	mov	r1, r3
 80095de:	4610      	mov	r0, r2
 80095e0:	f7fe fc7e 	bl	8007ee0 <st_word>
	}
}
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80095ec:	b590      	push	{r4, r7, lr}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	331a      	adds	r3, #26
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fe fb78 	bl	8007cf0 <ld_word>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <cmp_lfn+0x1e>
 8009606:	2300      	movs	r3, #0
 8009608:	e059      	b.n	80096be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009612:	1e5a      	subs	r2, r3, #1
 8009614:	4613      	mov	r3, r2
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	4413      	add	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009620:	2301      	movs	r3, #1
 8009622:	81fb      	strh	r3, [r7, #14]
 8009624:	2300      	movs	r3, #0
 8009626:	613b      	str	r3, [r7, #16]
 8009628:	e033      	b.n	8009692 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800962a:	4a27      	ldr	r2, [pc, #156]	; (80096c8 <cmp_lfn+0xdc>)
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	4413      	add	r3, r2
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	4413      	add	r3, r2
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe fb59 	bl	8007cf0 <ld_word>
 800963e:	4603      	mov	r3, r0
 8009640:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009642:	89fb      	ldrh	r3, [r7, #14]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d01a      	beq.n	800967e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	2bfe      	cmp	r3, #254	; 0xfe
 800964c:	d812      	bhi.n	8009674 <cmp_lfn+0x88>
 800964e:	89bb      	ldrh	r3, [r7, #12]
 8009650:	4618      	mov	r0, r3
 8009652:	f002 fd83 	bl	800c15c <ff_wtoupper>
 8009656:	4603      	mov	r3, r0
 8009658:	461c      	mov	r4, r3
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	617a      	str	r2, [r7, #20]
 8009660:	005b      	lsls	r3, r3, #1
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	4413      	add	r3, r2
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	4618      	mov	r0, r3
 800966a:	f002 fd77 	bl	800c15c <ff_wtoupper>
 800966e:	4603      	mov	r3, r0
 8009670:	429c      	cmp	r4, r3
 8009672:	d001      	beq.n	8009678 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009674:	2300      	movs	r3, #0
 8009676:	e022      	b.n	80096be <cmp_lfn+0xd2>
			}
			wc = uc;
 8009678:	89bb      	ldrh	r3, [r7, #12]
 800967a:	81fb      	strh	r3, [r7, #14]
 800967c:	e006      	b.n	800968c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800967e:	89bb      	ldrh	r3, [r7, #12]
 8009680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009684:	4293      	cmp	r3, r2
 8009686:	d001      	beq.n	800968c <cmp_lfn+0xa0>
 8009688:	2300      	movs	r3, #0
 800968a:	e018      	b.n	80096be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	3301      	adds	r3, #1
 8009690:	613b      	str	r3, [r7, #16]
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2b0c      	cmp	r3, #12
 8009696:	d9c8      	bls.n	800962a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00b      	beq.n	80096bc <cmp_lfn+0xd0>
 80096a4:	89fb      	ldrh	r3, [r7, #14]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d008      	beq.n	80096bc <cmp_lfn+0xd0>
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	005b      	lsls	r3, r3, #1
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	4413      	add	r3, r2
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <cmp_lfn+0xd0>
 80096b8:	2300      	movs	r3, #0
 80096ba:	e000      	b.n	80096be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80096bc:	2301      	movs	r3, #1
}
 80096be:	4618      	mov	r0, r3
 80096c0:	371c      	adds	r7, #28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd90      	pop	{r4, r7, pc}
 80096c6:	bf00      	nop
 80096c8:	0800f24c 	.word	0x0800f24c

080096cc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	331a      	adds	r3, #26
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fe fb08 	bl	8007cf0 <ld_word>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <pick_lfn+0x1e>
 80096e6:	2300      	movs	r3, #0
 80096e8:	e04d      	b.n	8009786 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096f2:	1e5a      	subs	r2, r3, #1
 80096f4:	4613      	mov	r3, r2
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	4413      	add	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4413      	add	r3, r2
 80096fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009700:	2301      	movs	r3, #1
 8009702:	81fb      	strh	r3, [r7, #14]
 8009704:	2300      	movs	r3, #0
 8009706:	613b      	str	r3, [r7, #16]
 8009708:	e028      	b.n	800975c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800970a:	4a21      	ldr	r2, [pc, #132]	; (8009790 <pick_lfn+0xc4>)
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	4413      	add	r3, r2
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	4413      	add	r3, r2
 8009718:	4618      	mov	r0, r3
 800971a:	f7fe fae9 	bl	8007cf0 <ld_word>
 800971e:	4603      	mov	r3, r0
 8009720:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009722:	89fb      	ldrh	r3, [r7, #14]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00f      	beq.n	8009748 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	2bfe      	cmp	r3, #254	; 0xfe
 800972c:	d901      	bls.n	8009732 <pick_lfn+0x66>
 800972e:	2300      	movs	r3, #0
 8009730:	e029      	b.n	8009786 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009732:	89bb      	ldrh	r3, [r7, #12]
 8009734:	81fb      	strh	r3, [r7, #14]
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	1c5a      	adds	r2, r3, #1
 800973a:	617a      	str	r2, [r7, #20]
 800973c:	005b      	lsls	r3, r3, #1
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	4413      	add	r3, r2
 8009742:	89fa      	ldrh	r2, [r7, #14]
 8009744:	801a      	strh	r2, [r3, #0]
 8009746:	e006      	b.n	8009756 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009748:	89bb      	ldrh	r3, [r7, #12]
 800974a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800974e:	4293      	cmp	r3, r2
 8009750:	d001      	beq.n	8009756 <pick_lfn+0x8a>
 8009752:	2300      	movs	r3, #0
 8009754:	e017      	b.n	8009786 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	3301      	adds	r3, #1
 800975a:	613b      	str	r3, [r7, #16]
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	2b0c      	cmp	r3, #12
 8009760:	d9d3      	bls.n	800970a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2bfe      	cmp	r3, #254	; 0xfe
 8009772:	d901      	bls.n	8009778 <pick_lfn+0xac>
 8009774:	2300      	movs	r3, #0
 8009776:	e006      	b.n	8009786 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	005b      	lsls	r3, r3, #1
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	4413      	add	r3, r2
 8009780:	2200      	movs	r2, #0
 8009782:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8009784:	2301      	movs	r3, #1
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	0800f24c 	.word	0x0800f24c

08009794 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b088      	sub	sp, #32
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	4611      	mov	r1, r2
 80097a0:	461a      	mov	r2, r3
 80097a2:	460b      	mov	r3, r1
 80097a4:	71fb      	strb	r3, [r7, #7]
 80097a6:	4613      	mov	r3, r2
 80097a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	330d      	adds	r3, #13
 80097ae:	79ba      	ldrb	r2, [r7, #6]
 80097b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	330b      	adds	r3, #11
 80097b6:	220f      	movs	r2, #15
 80097b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	330c      	adds	r3, #12
 80097be:	2200      	movs	r2, #0
 80097c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	331a      	adds	r3, #26
 80097c6:	2100      	movs	r1, #0
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fe fb89 	bl	8007ee0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	1e5a      	subs	r2, r3, #1
 80097d2:	4613      	mov	r3, r2
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80097de:	2300      	movs	r3, #0
 80097e0:	82fb      	strh	r3, [r7, #22]
 80097e2:	2300      	movs	r3, #0
 80097e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80097e6:	8afb      	ldrh	r3, [r7, #22]
 80097e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d007      	beq.n	8009800 <put_lfn+0x6c>
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	61fa      	str	r2, [r7, #28]
 80097f6:	005b      	lsls	r3, r3, #1
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	4413      	add	r3, r2
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009800:	4a17      	ldr	r2, [pc, #92]	; (8009860 <put_lfn+0xcc>)
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	4413      	add	r3, r2
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	461a      	mov	r2, r3
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	4413      	add	r3, r2
 800980e:	8afa      	ldrh	r2, [r7, #22]
 8009810:	4611      	mov	r1, r2
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe fb64 	bl	8007ee0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009818:	8afb      	ldrh	r3, [r7, #22]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d102      	bne.n	8009824 <put_lfn+0x90>
 800981e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009822:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	3301      	adds	r3, #1
 8009828:	61bb      	str	r3, [r7, #24]
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	2b0c      	cmp	r3, #12
 800982e:	d9da      	bls.n	80097e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009830:	8afb      	ldrh	r3, [r7, #22]
 8009832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009836:	4293      	cmp	r3, r2
 8009838:	d006      	beq.n	8009848 <put_lfn+0xb4>
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	005b      	lsls	r3, r3, #1
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	4413      	add	r3, r2
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d103      	bne.n	8009850 <put_lfn+0xbc>
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800984e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	79fa      	ldrb	r2, [r7, #7]
 8009854:	701a      	strb	r2, [r3, #0]
}
 8009856:	bf00      	nop
 8009858:	3720      	adds	r7, #32
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	0800f24c 	.word	0x0800f24c

08009864 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b08c      	sub	sp, #48	; 0x30
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
 8009870:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009872:	220b      	movs	r2, #11
 8009874:	68b9      	ldr	r1, [r7, #8]
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f7fe fc00 	bl	800807c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2b05      	cmp	r3, #5
 8009880:	d929      	bls.n	80098d6 <gen_numname+0x72>
		sr = seq;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009886:	e020      	b.n	80098ca <gen_numname+0x66>
			wc = *lfn++;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	1c9a      	adds	r2, r3, #2
 800988c:	607a      	str	r2, [r7, #4]
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009892:	2300      	movs	r3, #0
 8009894:	62bb      	str	r3, [r7, #40]	; 0x28
 8009896:	e015      	b.n	80098c4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	005a      	lsls	r2, r3, #1
 800989c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	4413      	add	r3, r2
 80098a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80098a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80098a8:	085b      	lsrs	r3, r3, #1
 80098aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <gen_numname+0x5a>
 80098b6:	69fa      	ldr	r2, [r7, #28]
 80098b8:	4b31      	ldr	r3, [pc, #196]	; (8009980 <gen_numname+0x11c>)
 80098ba:	4053      	eors	r3, r2
 80098bc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	3301      	adds	r3, #1
 80098c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	2b0f      	cmp	r3, #15
 80098c8:	d9e6      	bls.n	8009898 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	881b      	ldrh	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1da      	bne.n	8009888 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80098d6:	2307      	movs	r3, #7
 80098d8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f003 030f 	and.w	r3, r3, #15
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	3330      	adds	r3, #48	; 0x30
 80098e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80098ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098ee:	2b39      	cmp	r3, #57	; 0x39
 80098f0:	d904      	bls.n	80098fc <gen_numname+0x98>
 80098f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098f6:	3307      	adds	r3, #7
 80098f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	1e5a      	subs	r2, r3, #1
 8009900:	62ba      	str	r2, [r7, #40]	; 0x28
 8009902:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009906:	4413      	add	r3, r2
 8009908:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800990c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	091b      	lsrs	r3, r3, #4
 8009914:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1de      	bne.n	80098da <gen_numname+0x76>
	ns[i] = '~';
 800991c:	f107 0214 	add.w	r2, r7, #20
 8009920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009922:	4413      	add	r3, r2
 8009924:	227e      	movs	r2, #126	; 0x7e
 8009926:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009928:	2300      	movs	r3, #0
 800992a:	627b      	str	r3, [r7, #36]	; 0x24
 800992c:	e002      	b.n	8009934 <gen_numname+0xd0>
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	3301      	adds	r3, #1
 8009932:	627b      	str	r3, [r7, #36]	; 0x24
 8009934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009938:	429a      	cmp	r2, r3
 800993a:	d205      	bcs.n	8009948 <gen_numname+0xe4>
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009940:	4413      	add	r3, r2
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	2b20      	cmp	r3, #32
 8009946:	d1f2      	bne.n	800992e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994a:	2b07      	cmp	r3, #7
 800994c:	d808      	bhi.n	8009960 <gen_numname+0xfc>
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	62ba      	str	r2, [r7, #40]	; 0x28
 8009954:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009958:	4413      	add	r3, r2
 800995a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800995e:	e000      	b.n	8009962 <gen_numname+0xfe>
 8009960:	2120      	movs	r1, #32
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	627a      	str	r2, [r7, #36]	; 0x24
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	4413      	add	r3, r2
 800996c:	460a      	mov	r2, r1
 800996e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	2b07      	cmp	r3, #7
 8009974:	d9e8      	bls.n	8009948 <gen_numname+0xe4>
}
 8009976:	bf00      	nop
 8009978:	3730      	adds	r7, #48	; 0x30
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	00011021 	.word	0x00011021

08009984 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800998c:	2300      	movs	r3, #0
 800998e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009990:	230b      	movs	r3, #11
 8009992:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	b2da      	uxtb	r2, r3
 8009998:	0852      	lsrs	r2, r2, #1
 800999a:	01db      	lsls	r3, r3, #7
 800999c:	4313      	orrs	r3, r2
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	1c59      	adds	r1, r3, #1
 80099a4:	6079      	str	r1, [r7, #4]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	4413      	add	r3, r2
 80099aa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	60bb      	str	r3, [r7, #8]
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1ed      	bne.n	8009994 <sum_sfn+0x10>
	return sum;
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80099c6:	b480      	push	{r7}
 80099c8:	b087      	sub	sp, #28
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	3301      	adds	r3, #1
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	3301      	adds	r3, #1
 80099d6:	015b      	lsls	r3, r3, #5
 80099d8:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80099da:	2300      	movs	r3, #0
 80099dc:	827b      	strh	r3, [r7, #18]
 80099de:	2300      	movs	r3, #0
 80099e0:	617b      	str	r3, [r7, #20]
 80099e2:	e018      	b.n	8009a16 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d103      	bne.n	80099f2 <xdir_sum+0x2c>
			i++;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	3301      	adds	r3, #1
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	e00e      	b.n	8009a10 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80099f2:	8a7b      	ldrh	r3, [r7, #18]
 80099f4:	03db      	lsls	r3, r3, #15
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	8a7b      	ldrh	r3, [r7, #18]
 80099fa:	085b      	lsrs	r3, r3, #1
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	4413      	add	r3, r2
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	440b      	add	r3, r1
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	4413      	add	r3, r2
 8009a0e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	3301      	adds	r3, #1
 8009a14:	617b      	str	r3, [r7, #20]
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d3e2      	bcc.n	80099e4 <xdir_sum+0x1e>
		}
	}
	return sum;
 8009a1e:	8a7b      	ldrh	r3, [r7, #18]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	371c      	adds	r7, #28
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8009a38:	e01f      	b.n	8009a7a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8009a3a:	89bb      	ldrh	r3, [r7, #12]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f002 fb8d 	bl	800c15c <ff_wtoupper>
 8009a42:	4603      	mov	r3, r0
 8009a44:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8009a46:	89fb      	ldrh	r3, [r7, #14]
 8009a48:	03db      	lsls	r3, r3, #15
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	89fb      	ldrh	r3, [r7, #14]
 8009a4e:	085b      	lsrs	r3, r3, #1
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	4413      	add	r3, r2
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	89bb      	ldrh	r3, [r7, #12]
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	4413      	add	r3, r2
 8009a5e:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8009a60:	89fb      	ldrh	r3, [r7, #14]
 8009a62:	03db      	lsls	r3, r3, #15
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	89fb      	ldrh	r3, [r7, #14]
 8009a68:	085b      	lsrs	r3, r3, #1
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	89bb      	ldrh	r3, [r7, #12]
 8009a72:	0a1b      	lsrs	r3, r3, #8
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	4413      	add	r3, r2
 8009a78:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	1c9a      	adds	r2, r3, #2
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	81bb      	strh	r3, [r7, #12]
 8009a84:	89bb      	ldrh	r3, [r7, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1d7      	bne.n	8009a3a <xname_sum+0xe>
	}
	return sum;
 8009a8a:	89fb      	ldrh	r3, [r7, #14]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8009a94:	b590      	push	{r4, r7, lr}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aac:	4619      	mov	r1, r3
 8009aae:	4610      	mov	r0, r2
 8009ab0:	f7fe fd42 	bl	8008538 <move_window>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <load_xdir+0x2e>
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	e09f      	b.n	8009c02 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b85      	cmp	r3, #133	; 0x85
 8009aca:	d001      	beq.n	8009ad0 <load_xdir+0x3c>
 8009acc:	2302      	movs	r3, #2
 8009ace:	e098      	b.n	8009c02 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6938      	ldr	r0, [r7, #16]
 8009ada:	f7fe facf 	bl	800807c <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	015b      	lsls	r3, r3, #5
 8009ae8:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	2b5f      	cmp	r3, #95	; 0x5f
 8009aee:	d903      	bls.n	8009af8 <load_xdir+0x64>
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009af6:	d901      	bls.n	8009afc <load_xdir+0x68>
 8009af8:	2302      	movs	r3, #2
 8009afa:	e082      	b.n	8009c02 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8009afc:	2100      	movs	r1, #0
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7ff fbf3 	bl	80092ea <dir_next>
 8009b04:	4603      	mov	r3, r0
 8009b06:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <load_xdir+0x7e>
 8009b0e:	7bfb      	ldrb	r3, [r7, #15]
 8009b10:	e077      	b.n	8009c02 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	f7fe fd0b 	bl	8008538 <move_window>
 8009b22:	4603      	mov	r3, r0
 8009b24:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <load_xdir+0x9c>
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	e068      	b.n	8009c02 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	2bc0      	cmp	r3, #192	; 0xc0
 8009b38:	d001      	beq.n	8009b3e <load_xdir+0xaa>
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	e061      	b.n	8009c02 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	f103 0020 	add.w	r0, r3, #32
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b48:	2220      	movs	r2, #32
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	f7fe fa96 	bl	800807c <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	3323      	adds	r3, #35	; 0x23
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	332c      	adds	r3, #44	; 0x2c
 8009b58:	4a2c      	ldr	r2, [pc, #176]	; (8009c0c <load_xdir+0x178>)
 8009b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b5e:	08db      	lsrs	r3, r3, #3
 8009b60:	015b      	lsls	r3, r3, #5
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d201      	bcs.n	8009b6c <load_xdir+0xd8>
 8009b68:	2302      	movs	r3, #2
 8009b6a:	e04a      	b.n	8009c02 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8009b6c:	2340      	movs	r3, #64	; 0x40
 8009b6e:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8009b70:	2100      	movs	r1, #0
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7ff fbb9 	bl	80092ea <dir_next>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <load_xdir+0xf2>
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
 8009b84:	e03d      	b.n	8009c02 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8e:	4619      	mov	r1, r3
 8009b90:	4610      	mov	r0, r2
 8009b92:	f7fe fcd1 	bl	8008538 <move_window>
 8009b96:	4603      	mov	r3, r0
 8009b98:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <load_xdir+0x110>
 8009ba0:	7bfb      	ldrb	r3, [r7, #15]
 8009ba2:	e02e      	b.n	8009c02 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2bc1      	cmp	r3, #193	; 0xc1
 8009bac:	d001      	beq.n	8009bb2 <load_xdir+0x11e>
 8009bae:	2302      	movs	r3, #2
 8009bb0:	e027      	b.n	8009c02 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009bb8:	d208      	bcs.n	8009bcc <load_xdir+0x138>
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	18d0      	adds	r0, r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	f7fe fa58 	bl	800807c <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	3320      	adds	r3, #32
 8009bd0:	617b      	str	r3, [r7, #20]
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d3ca      	bcc.n	8009b70 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009be0:	d80e      	bhi.n	8009c00 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8009be2:	6938      	ldr	r0, [r7, #16]
 8009be4:	f7ff feef 	bl	80099c6 <xdir_sum>
 8009be8:	4603      	mov	r3, r0
 8009bea:	461c      	mov	r4, r3
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	3302      	adds	r3, #2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fe f87d 	bl	8007cf0 <ld_word>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	429c      	cmp	r4, r3
 8009bfa:	d001      	beq.n	8009c00 <load_xdir+0x16c>
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	e000      	b.n	8009c02 <load_xdir+0x16e>
	}
	return FR_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	371c      	adds	r7, #28
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd90      	pop	{r4, r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	88888889 	.word	0x88888889

08009c10 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8009c10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009c14:	b084      	sub	sp, #16
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	6a1a      	ldr	r2, [r3, #32]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	469b      	mov	fp, r3
 8009c3c:	f04f 0c00 	mov.w	ip, #0
 8009c40:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8009c44:	f04f 0200 	mov.w	r2, #0
 8009c48:	ea0b 0301 	and.w	r3, fp, r1
 8009c4c:	ea0c 0402 	and.w	r4, ip, r2
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7ff faac 	bl	80091c2 <dir_sdi>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009c6e:	7bfb      	ldrb	r3, [r7, #15]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d104      	bne.n	8009c7e <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7ff ff0d 	bl	8009a94 <load_xdir>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009c8a <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8009c8a:	b590      	push	{r4, r7, lr}
 8009c8c:	b087      	sub	sp, #28
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	695b      	ldr	r3, [r3, #20]
 8009c98:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	1c9c      	adds	r4, r3, #2
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f7ff fe91 	bl	80099c6 <xdir_sum>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f7fe f919 	bl	8007ee0 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7ff fa7f 	bl	80091c2 <dir_sdi>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8009cc8:	e026      	b.n	8009d18 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	f7fe fc2f 	bl	8008538 <move_window>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009cde:	7dfb      	ldrb	r3, [r7, #23]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d11d      	bne.n	8009d20 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce8:	2220      	movs	r2, #32
 8009cea:	68f9      	ldr	r1, [r7, #12]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fe f9c5 	bl	800807c <mem_cpy>
		dp->obj.fs->wflag = 1;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	613b      	str	r3, [r7, #16]
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00e      	beq.n	8009d24 <store_xdir+0x9a>
		dirb += SZDIRE;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3320      	adds	r3, #32
 8009d0a:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7ff faeb 	bl	80092ea <dir_next>
 8009d14:	4603      	mov	r3, r0
 8009d16:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8009d18:	7dfb      	ldrb	r3, [r7, #23]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d0d5      	beq.n	8009cca <store_xdir+0x40>
 8009d1e:	e002      	b.n	8009d26 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8009d20:	bf00      	nop
 8009d22:	e000      	b.n	8009d26 <store_xdir+0x9c>
		if (--nent == 0) break;
 8009d24:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8009d26:	7dfb      	ldrb	r3, [r7, #23]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <store_xdir+0xa8>
 8009d2c:	7dfb      	ldrb	r3, [r7, #23]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d101      	bne.n	8009d36 <store_xdir+0xac>
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
 8009d34:	e000      	b.n	8009d38 <store_xdir+0xae>
 8009d36:	2302      	movs	r3, #2
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	371c      	adds	r7, #28
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd90      	pop	{r4, r7, pc}

08009d40 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8009d40:	b590      	push	{r4, r7, lr}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8009d4a:	2240      	movs	r2, #64	; 0x40
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7fe f9b5 	bl	80080be <mem_set>
	dirb[XDIR_Type] = 0x85;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2285      	movs	r2, #133	; 0x85
 8009d58:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3320      	adds	r3, #32
 8009d5e:	22c0      	movs	r2, #192	; 0xc0
 8009d60:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8009d62:	2300      	movs	r3, #0
 8009d64:	72bb      	strb	r3, [r7, #10]
 8009d66:	2301      	movs	r3, #1
 8009d68:	72fb      	strb	r3, [r7, #11]
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	813b      	strh	r3, [r7, #8]
 8009d6e:	2340      	movs	r3, #64	; 0x40
 8009d70:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	60fa      	str	r2, [r7, #12]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	22c1      	movs	r2, #193	; 0xc1
 8009d7e:	701a      	strb	r2, [r3, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	1c5a      	adds	r2, r3, #1
 8009d84:	60fa      	str	r2, [r7, #12]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	4413      	add	r3, r2
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8009d8e:	893b      	ldrh	r3, [r7, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00b      	beq.n	8009dac <create_xdir+0x6c>
 8009d94:	7abb      	ldrb	r3, [r7, #10]
 8009d96:	005b      	lsls	r3, r3, #1
 8009d98:	683a      	ldr	r2, [r7, #0]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	881b      	ldrh	r3, [r3, #0]
 8009d9e:	813b      	strh	r3, [r7, #8]
 8009da0:	893b      	ldrh	r3, [r7, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d002      	beq.n	8009dac <create_xdir+0x6c>
 8009da6:	7abb      	ldrb	r3, [r7, #10]
 8009da8:	3301      	adds	r3, #1
 8009daa:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	4413      	add	r3, r2
 8009db2:	893a      	ldrh	r2, [r7, #8]
 8009db4:	4611      	mov	r1, r2
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe f892 	bl	8007ee0 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3302      	adds	r3, #2
 8009dc0:	60fb      	str	r3, [r7, #12]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f003 031f 	and.w	r3, r3, #31
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1e0      	bne.n	8009d8e <create_xdir+0x4e>
		nb++;
 8009dcc:	7afb      	ldrb	r3, [r7, #11]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8009dd2:	7abb      	ldrb	r3, [r7, #10]
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	4413      	add	r3, r2
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1c8      	bne.n	8009d72 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3323      	adds	r3, #35	; 0x23
 8009de4:	7aba      	ldrb	r2, [r7, #10]
 8009de6:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	3301      	adds	r3, #1
 8009dec:	7afa      	ldrb	r2, [r7, #11]
 8009dee:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8009df6:	6838      	ldr	r0, [r7, #0]
 8009df8:	f7ff fe18 	bl	8009a2c <xname_sum>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4620      	mov	r0, r4
 8009e02:	f7fe f86d 	bl	8007ee0 <st_word>
}
 8009e06:	bf00      	nop
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd90      	pop	{r4, r7, pc}

08009e0e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b086      	sub	sp, #24
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009e18:	2304      	movs	r3, #4
 8009e1a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8009e22:	23ff      	movs	r3, #255	; 0xff
 8009e24:	757b      	strb	r3, [r7, #21]
 8009e26:	23ff      	movs	r3, #255	; 0xff
 8009e28:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8009e2a:	e09f      	b.n	8009f6c <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e30:	4619      	mov	r1, r3
 8009e32:	6938      	ldr	r0, [r7, #16]
 8009e34:	f7fe fb80 	bl	8008538 <move_window>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f040 809a 	bne.w	8009f78 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8009e4c:	7dbb      	ldrb	r3, [r7, #22]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d102      	bne.n	8009e58 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009e52:	2304      	movs	r3, #4
 8009e54:	75fb      	strb	r3, [r7, #23]
 8009e56:	e096      	b.n	8009f86 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b04      	cmp	r3, #4
 8009e5e:	d118      	bne.n	8009e92 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8009e60:	7dbb      	ldrb	r3, [r7, #22]
 8009e62:	2b85      	cmp	r3, #133	; 0x85
 8009e64:	d179      	bne.n	8009f5a <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff fe10 	bl	8009a94 <load_xdir>
 8009e74:	4603      	mov	r3, r0
 8009e76:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d17e      	bne.n	8009f7c <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	3304      	adds	r3, #4
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	719a      	strb	r2, [r3, #6]
					}
					break;
 8009e90:	e074      	b.n	8009f7c <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e96:	330b      	adds	r3, #11
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e9e:	73fb      	strb	r3, [r7, #15]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7bfa      	ldrb	r2, [r7, #15]
 8009ea4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009ea6:	7dbb      	ldrb	r3, [r7, #22]
 8009ea8:	2be5      	cmp	r3, #229	; 0xe5
 8009eaa:	d00e      	beq.n	8009eca <dir_read+0xbc>
 8009eac:	7dbb      	ldrb	r3, [r7, #22]
 8009eae:	2b2e      	cmp	r3, #46	; 0x2e
 8009eb0:	d00b      	beq.n	8009eca <dir_read+0xbc>
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
 8009eb4:	f023 0320 	bic.w	r3, r3, #32
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	bf0c      	ite	eq
 8009ebc:	2301      	moveq	r3, #1
 8009ebe:	2300      	movne	r3, #0
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d002      	beq.n	8009ed0 <dir_read+0xc2>
				ord = 0xFF;
 8009eca:	23ff      	movs	r3, #255	; 0xff
 8009ecc:	757b      	strb	r3, [r7, #21]
 8009ece:	e044      	b.n	8009f5a <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
 8009ed2:	2b0f      	cmp	r3, #15
 8009ed4:	d12f      	bne.n	8009f36 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8009ed6:	7dbb      	ldrb	r3, [r7, #22]
 8009ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00d      	beq.n	8009efc <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ee4:	7b5b      	ldrb	r3, [r3, #13]
 8009ee6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8009ee8:	7dbb      	ldrb	r3, [r7, #22]
 8009eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eee:	75bb      	strb	r3, [r7, #22]
 8009ef0:	7dbb      	ldrb	r3, [r7, #22]
 8009ef2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009efc:	7dba      	ldrb	r2, [r7, #22]
 8009efe:	7d7b      	ldrb	r3, [r7, #21]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d115      	bne.n	8009f30 <dir_read+0x122>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f08:	330d      	adds	r3, #13
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	7d3a      	ldrb	r2, [r7, #20]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d10e      	bne.n	8009f30 <dir_read+0x122>
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	691a      	ldr	r2, [r3, #16]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	f7ff fbd5 	bl	80096cc <pick_lfn>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d003      	beq.n	8009f30 <dir_read+0x122>
 8009f28:	7d7b      	ldrb	r3, [r7, #21]
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	e000      	b.n	8009f32 <dir_read+0x124>
 8009f30:	23ff      	movs	r3, #255	; 0xff
 8009f32:	757b      	strb	r3, [r7, #21]
 8009f34:	e011      	b.n	8009f5a <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8009f36:	7d7b      	ldrb	r3, [r7, #21]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d109      	bne.n	8009f50 <dir_read+0x142>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7ff fd1f 	bl	8009984 <sum_sfn>
 8009f46:	4603      	mov	r3, r0
 8009f48:	461a      	mov	r2, r3
 8009f4a:	7d3b      	ldrb	r3, [r7, #20]
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d017      	beq.n	8009f80 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f04f 32ff 	mov.w	r2, #4294967295
 8009f56:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8009f58:	e012      	b.n	8009f80 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff f9c4 	bl	80092ea <dir_next>
 8009f62:	4603      	mov	r3, r0
 8009f64:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10b      	bne.n	8009f84 <dir_read+0x176>
	while (dp->sect) {
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f47f af5b 	bne.w	8009e2c <dir_read+0x1e>
 8009f76:	e006      	b.n	8009f86 <dir_read+0x178>
		if (res != FR_OK) break;
 8009f78:	bf00      	nop
 8009f7a:	e004      	b.n	8009f86 <dir_read+0x178>
					break;
 8009f7c:	bf00      	nop
 8009f7e:	e002      	b.n	8009f86 <dir_read+0x178>
					break;
 8009f80:	bf00      	nop
 8009f82:	e000      	b.n	8009f86 <dir_read+0x178>
		if (res != FR_OK) break;
 8009f84:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <dir_read+0x184>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8009f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009f9c:	b590      	push	{r4, r7, lr}
 8009f9e:	b089      	sub	sp, #36	; 0x24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009faa:	2100      	movs	r1, #0
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff f908 	bl	80091c2 <dir_sdi>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8009fb6:	7ffb      	ldrb	r3, [r7, #31]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <dir_find+0x24>
 8009fbc:	7ffb      	ldrb	r3, [r7, #31]
 8009fbe:	e112      	b.n	800a1e6 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b04      	cmp	r3, #4
 8009fc6:	d164      	bne.n	800a092 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff fd2d 	bl	8009a2c <xname_sum>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009fd6:	e04f      	b.n	800a078 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	3324      	adds	r3, #36	; 0x24
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fd fe86 	bl	8007cf0 <ld_word>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	893b      	ldrh	r3, [r7, #8]
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d000      	beq.n	8009ff0 <dir_find+0x54>
 8009fee:	e043      	b.n	800a078 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009ff8:	76fb      	strb	r3, [r7, #27]
 8009ffa:	2340      	movs	r3, #64	; 0x40
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	2300      	movs	r3, #0
 800a000:	613b      	str	r3, [r7, #16]
 800a002:	e029      	b.n	800a058 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	f003 031f 	and.w	r3, r3, #31
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d102      	bne.n	800a014 <dir_find+0x78>
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	3302      	adds	r3, #2
 800a012:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	695a      	ldr	r2, [r3, #20]
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	4413      	add	r3, r2
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fd fe67 	bl	8007cf0 <ld_word>
 800a022:	4603      	mov	r3, r0
 800a024:	4618      	mov	r0, r3
 800a026:	f002 f899 	bl	800c15c <ff_wtoupper>
 800a02a:	4603      	mov	r3, r0
 800a02c:	461c      	mov	r4, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	691a      	ldr	r2, [r3, #16]
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	005b      	lsls	r3, r3, #1
 800a036:	4413      	add	r3, r2
 800a038:	881b      	ldrh	r3, [r3, #0]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f002 f88e 	bl	800c15c <ff_wtoupper>
 800a040:	4603      	mov	r3, r0
 800a042:	429c      	cmp	r4, r3
 800a044:	d10c      	bne.n	800a060 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800a046:	7efb      	ldrb	r3, [r7, #27]
 800a048:	3b01      	subs	r3, #1
 800a04a:	76fb      	strb	r3, [r7, #27]
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	3302      	adds	r3, #2
 800a050:	617b      	str	r3, [r7, #20]
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	3301      	adds	r3, #1
 800a056:	613b      	str	r3, [r7, #16]
 800a058:	7efb      	ldrb	r3, [r7, #27]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1d2      	bne.n	800a004 <dir_find+0x68>
 800a05e:	e000      	b.n	800a062 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800a060:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800a062:	7efb      	ldrb	r3, [r7, #27]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d107      	bne.n	800a078 <dir_find+0xdc>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	691a      	ldr	r2, [r3, #16]
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	005b      	lsls	r3, r3, #1
 800a070:	4413      	add	r3, r2
 800a072:	881b      	ldrh	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d009      	beq.n	800a08c <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800a078:	2100      	movs	r1, #0
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff fec7 	bl	8009e0e <dir_read>
 800a080:	4603      	mov	r3, r0
 800a082:	77fb      	strb	r3, [r7, #31]
 800a084:	7ffb      	ldrb	r3, [r7, #31]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d0a6      	beq.n	8009fd8 <dir_find+0x3c>
 800a08a:	e000      	b.n	800a08e <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800a08c:	bf00      	nop
		}
		return res;
 800a08e:	7ffb      	ldrb	r3, [r7, #31]
 800a090:	e0a9      	b.n	800a1e6 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a092:	23ff      	movs	r3, #255	; 0xff
 800a094:	773b      	strb	r3, [r7, #28]
 800a096:	7f3b      	ldrb	r3, [r7, #28]
 800a098:	777b      	strb	r3, [r7, #29]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f7fe fa45 	bl	8008538 <move_window>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800a0b2:	7ffb      	ldrb	r3, [r7, #31]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f040 8090 	bne.w	800a1da <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a0c2:	7fbb      	ldrb	r3, [r7, #30]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d102      	bne.n	800a0ce <dir_find+0x132>
 800a0c8:	2304      	movs	r3, #4
 800a0ca:	77fb      	strb	r3, [r7, #31]
 800a0cc:	e08a      	b.n	800a1e4 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d2:	330b      	adds	r3, #11
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0da:	72fb      	strb	r3, [r7, #11]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	7afa      	ldrb	r2, [r7, #11]
 800a0e0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a0e2:	7fbb      	ldrb	r3, [r7, #30]
 800a0e4:	2be5      	cmp	r3, #229	; 0xe5
 800a0e6:	d007      	beq.n	800a0f8 <dir_find+0x15c>
 800a0e8:	7afb      	ldrb	r3, [r7, #11]
 800a0ea:	f003 0308 	and.w	r3, r3, #8
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d009      	beq.n	800a106 <dir_find+0x16a>
 800a0f2:	7afb      	ldrb	r3, [r7, #11]
 800a0f4:	2b0f      	cmp	r3, #15
 800a0f6:	d006      	beq.n	800a106 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a0f8:	23ff      	movs	r3, #255	; 0xff
 800a0fa:	777b      	strb	r3, [r7, #29]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a102:	64da      	str	r2, [r3, #76]	; 0x4c
 800a104:	e05e      	b.n	800a1c4 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a106:	7afb      	ldrb	r3, [r7, #11]
 800a108:	2b0f      	cmp	r3, #15
 800a10a:	d136      	bne.n	800a17a <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a116:	2b00      	cmp	r3, #0
 800a118:	d154      	bne.n	800a1c4 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a11a:	7fbb      	ldrb	r3, [r7, #30]
 800a11c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00d      	beq.n	800a140 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a128:	7b5b      	ldrb	r3, [r3, #13]
 800a12a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a12c:	7fbb      	ldrb	r3, [r7, #30]
 800a12e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a132:	77bb      	strb	r3, [r7, #30]
 800a134:	7fbb      	ldrb	r3, [r7, #30]
 800a136:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a140:	7fba      	ldrb	r2, [r7, #30]
 800a142:	7f7b      	ldrb	r3, [r7, #29]
 800a144:	429a      	cmp	r2, r3
 800a146:	d115      	bne.n	800a174 <dir_find+0x1d8>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a14c:	330d      	adds	r3, #13
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	7f3a      	ldrb	r2, [r7, #28]
 800a152:	429a      	cmp	r2, r3
 800a154:	d10e      	bne.n	800a174 <dir_find+0x1d8>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	691a      	ldr	r2, [r3, #16]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a15e:	4619      	mov	r1, r3
 800a160:	4610      	mov	r0, r2
 800a162:	f7ff fa43 	bl	80095ec <cmp_lfn>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d003      	beq.n	800a174 <dir_find+0x1d8>
 800a16c:	7f7b      	ldrb	r3, [r7, #29]
 800a16e:	3b01      	subs	r3, #1
 800a170:	b2db      	uxtb	r3, r3
 800a172:	e000      	b.n	800a176 <dir_find+0x1da>
 800a174:	23ff      	movs	r3, #255	; 0xff
 800a176:	777b      	strb	r3, [r7, #29]
 800a178:	e024      	b.n	800a1c4 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a17a:	7f7b      	ldrb	r3, [r7, #29]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d109      	bne.n	800a194 <dir_find+0x1f8>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a184:	4618      	mov	r0, r3
 800a186:	f7ff fbfd 	bl	8009984 <sum_sfn>
 800a18a:	4603      	mov	r3, r0
 800a18c:	461a      	mov	r2, r3
 800a18e:	7f3b      	ldrb	r3, [r7, #28]
 800a190:	4293      	cmp	r3, r2
 800a192:	d024      	beq.n	800a1de <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10a      	bne.n	800a1b8 <dir_find+0x21c>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	3340      	adds	r3, #64	; 0x40
 800a1aa:	220b      	movs	r2, #11
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	f7fd ffa0 	bl	80080f2 <mem_cmp>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d014      	beq.n	800a1e2 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a1b8:	23ff      	movs	r3, #255	; 0xff
 800a1ba:	777b      	strb	r3, [r7, #29]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c2:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff f88f 	bl	80092ea <dir_next>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800a1d0:	7ffb      	ldrb	r3, [r7, #31]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f43f af65 	beq.w	800a0a2 <dir_find+0x106>
 800a1d8:	e004      	b.n	800a1e4 <dir_find+0x248>
		if (res != FR_OK) break;
 800a1da:	bf00      	nop
 800a1dc:	e002      	b.n	800a1e4 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a1de:	bf00      	nop
 800a1e0:	e000      	b.n	800a1e4 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a1e2:	bf00      	nop

	return res;
 800a1e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3724      	adds	r7, #36	; 0x24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd90      	pop	{r4, r7, pc}
	...

0800a1f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a1f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a1f4:	b0a0      	sub	sp, #128	; 0x80
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a206:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <dir_register+0x22>
 800a20e:	2306      	movs	r3, #6
 800a210:	e198      	b.n	800a544 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a212:	2300      	movs	r3, #0
 800a214:	677b      	str	r3, [r7, #116]	; 0x74
 800a216:	e002      	b.n	800a21e <dir_register+0x2e>
 800a218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a21a:	3301      	adds	r3, #1
 800a21c:	677b      	str	r3, [r7, #116]	; 0x74
 800a21e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a220:	691a      	ldr	r2, [r3, #16]
 800a222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a224:	005b      	lsls	r3, r3, #1
 800a226:	4413      	add	r3, r2
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1f4      	bne.n	800a218 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a22e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	2b04      	cmp	r3, #4
 800a234:	f040 80a9 	bne.w	800a38a <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800a238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a23a:	330e      	adds	r3, #14
 800a23c:	4aa7      	ldr	r2, [pc, #668]	; (800a4dc <dir_register+0x2ec>)
 800a23e:	fba2 2303 	umull	r2, r3, r2, r3
 800a242:	08db      	lsrs	r3, r3, #3
 800a244:	3302      	adds	r3, #2
 800a246:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800a248:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7ff f933 	bl	80094b6 <dir_alloc>
 800a250:	4603      	mov	r3, r0
 800a252:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800a256:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <dir_register+0x74>
 800a25e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a262:	e16f      	b.n	800a544 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a268:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a26a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 800a26e:	440b      	add	r3, r1
 800a270:	015b      	lsls	r3, r3, #5
 800a272:	1ad2      	subs	r2, r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d07a      	beq.n	800a376 <dir_register+0x186>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	79db      	ldrb	r3, [r3, #7]
 800a284:	f003 0304 	and.w	r3, r3, #4
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d074      	beq.n	800a376 <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800a292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a294:	895b      	ldrh	r3, [r3, #10]
 800a296:	4618      	mov	r0, r3
 800a298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a29a:	899b      	ldrh	r3, [r3, #12]
 800a29c:	fb03 f300 	mul.w	r3, r3, r0
 800a2a0:	469b      	mov	fp, r3
 800a2a2:	f04f 0c00 	mov.w	ip, #0
 800a2a6:	eb1b 0301 	adds.w	r3, fp, r1
 800a2aa:	eb4c 0402 	adc.w	r4, ip, r2
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fe fd6e 	bl	8008d98 <fill_first_frag>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800a2c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <dir_register+0xe0>
 800a2ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a2ce:	e139      	b.n	800a544 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2da:	4619      	mov	r1, r3
 800a2dc:	f7fe fd8b 	bl	8008df6 <fill_last_frag>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800a2e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d002      	beq.n	800a2f4 <dir_register+0x104>
 800a2ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a2f2:	e127      	b.n	800a544 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	f107 0308 	add.w	r3, r7, #8
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7ff fc87 	bl	8009c10 <load_obj_dir>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800a308:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <dir_register+0x126>
 800a310:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a314:	e116      	b.n	800a544 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800a316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a318:	695b      	ldr	r3, [r3, #20]
 800a31a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a324:	461a      	mov	r2, r3
 800a326:	4623      	mov	r3, r4
 800a328:	4608      	mov	r0, r1
 800a32a:	f7fd fe20 	bl	8007f6e <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800a32e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a33c:	461a      	mov	r2, r3
 800a33e:	4623      	mov	r3, r4
 800a340:	4608      	mov	r0, r1
 800a342:	f7fd fe14 	bl	8007f6e <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	79da      	ldrb	r2, [r3, #7]
 800a34a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	3321      	adds	r3, #33	; 0x21
 800a350:	f042 0201 	orr.w	r2, r2, #1
 800a354:	b2d2      	uxtb	r2, r2
 800a356:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800a358:	f107 0308 	add.w	r3, r7, #8
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7ff fc94 	bl	8009c8a <store_xdir>
 800a362:	4603      	mov	r3, r0
 800a364:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800a368:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <dir_register+0x186>
 800a370:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a374:	e0e6      	b.n	800a544 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800a376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a378:	695a      	ldr	r2, [r3, #20]
 800a37a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f7ff fcdd 	bl	8009d40 <create_xdir>
		return FR_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	e0dc      	b.n	800a544 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800a390:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a394:	220c      	movs	r2, #12
 800a396:	4618      	mov	r0, r3
 800a398:	f7fd fe70 	bl	800807c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a39c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d033      	beq.n	800a410 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2240      	movs	r2, #64	; 0x40
 800a3ac:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3b4:	e016      	b.n	800a3e4 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800a3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3be:	691a      	ldr	r2, [r3, #16]
 800a3c0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800a3c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3c6:	f7ff fa4d 	bl	8009864 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7ff fde6 	bl	8009f9c <dir_find>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800a3d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d106      	bne.n	800a3ec <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 800a3de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3e6:	2b63      	cmp	r3, #99	; 0x63
 800a3e8:	d9e5      	bls.n	800a3b6 <dir_register+0x1c6>
 800a3ea:	e000      	b.n	800a3ee <dir_register+0x1fe>
			if (res != FR_OK) break;
 800a3ec:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a3ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3f0:	2b64      	cmp	r3, #100	; 0x64
 800a3f2:	d101      	bne.n	800a3f8 <dir_register+0x208>
 800a3f4:	2307      	movs	r3, #7
 800a3f6:	e0a5      	b.n	800a544 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a3f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d002      	beq.n	800a406 <dir_register+0x216>
 800a400:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a404:	e09e      	b.n	800a544 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a406:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a410:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d007      	beq.n	800a42c <dir_register+0x23c>
 800a41c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a41e:	330c      	adds	r3, #12
 800a420:	4a2f      	ldr	r2, [pc, #188]	; (800a4e0 <dir_register+0x2f0>)
 800a422:	fba2 2303 	umull	r2, r3, r2, r3
 800a426:	089b      	lsrs	r3, r3, #2
 800a428:	3301      	adds	r3, #1
 800a42a:	e000      	b.n	800a42e <dir_register+0x23e>
 800a42c:	2301      	movs	r3, #1
 800a42e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a430:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f7ff f83f 	bl	80094b6 <dir_alloc>
 800a438:	4603      	mov	r3, r0
 800a43a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a43e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a442:	2b00      	cmp	r3, #0
 800a444:	d14f      	bne.n	800a4e6 <dir_register+0x2f6>
 800a446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a448:	3b01      	subs	r3, #1
 800a44a:	673b      	str	r3, [r7, #112]	; 0x70
 800a44c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d049      	beq.n	800a4e6 <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a458:	015b      	lsls	r3, r3, #5
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7fe feaf 	bl	80091c2 <dir_sdi>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800a46a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d139      	bne.n	800a4e6 <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3340      	adds	r3, #64	; 0x40
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff fa84 	bl	8009984 <sum_sfn>
 800a47c:	4603      	mov	r3, r0
 800a47e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a486:	4619      	mov	r1, r3
 800a488:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a48a:	f7fe f855 	bl	8008538 <move_window>
 800a48e:	4603      	mov	r3, r0
 800a490:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800a494:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d123      	bne.n	800a4e4 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a49c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a49e:	6918      	ldr	r0, [r3, #16]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a4a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800a4ac:	f7ff f972 	bl	8009794 <put_lfn>
				fs->wflag = 1;
 800a4b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7fe ff16 	bl	80092ea <dir_next>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800a4c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10c      	bne.n	800a4e6 <dir_register+0x2f6>
 800a4cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	673b      	str	r3, [r7, #112]	; 0x70
 800a4d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1d4      	bne.n	800a482 <dir_register+0x292>
 800a4d8:	e005      	b.n	800a4e6 <dir_register+0x2f6>
 800a4da:	bf00      	nop
 800a4dc:	88888889 	.word	0x88888889
 800a4e0:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800a4e4:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a4e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d128      	bne.n	800a540 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a4f6:	f7fe f81f 	bl	8008538 <move_window>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800a500:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a504:	2b00      	cmp	r3, #0
 800a506:	d11b      	bne.n	800a540 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a50c:	2220      	movs	r2, #32
 800a50e:	2100      	movs	r1, #0
 800a510:	4618      	mov	r0, r3
 800a512:	f7fd fdd4 	bl	80080be <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	3340      	adds	r3, #64	; 0x40
 800a51e:	220b      	movs	r2, #11
 800a520:	4619      	mov	r1, r3
 800a522:	f7fd fdab 	bl	800807c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a530:	330c      	adds	r3, #12
 800a532:	f002 0218 	and.w	r2, r2, #24
 800a536:	b2d2      	uxtb	r2, r2
 800a538:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a53c:	2201      	movs	r2, #1
 800a53e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a540:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a544:	4618      	mov	r0, r3
 800a546:	3780      	adds	r7, #128	; 0x80
 800a548:	46bd      	mov	sp, r7
 800a54a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a54e:	bf00      	nop

0800a550 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b08a      	sub	sp, #40	; 0x28
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	613b      	str	r3, [r7, #16]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	60fb      	str	r3, [r7, #12]
 800a568:	2300      	movs	r3, #0
 800a56a:	617b      	str	r3, [r7, #20]
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	1c5a      	adds	r2, r3, #1
 800a574:	61ba      	str	r2, [r7, #24]
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	4413      	add	r3, r2
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a57e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a580:	2b1f      	cmp	r3, #31
 800a582:	d940      	bls.n	800a606 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a586:	2b2f      	cmp	r3, #47	; 0x2f
 800a588:	d006      	beq.n	800a598 <create_name+0x48>
 800a58a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a58c:	2b5c      	cmp	r3, #92	; 0x5c
 800a58e:	d110      	bne.n	800a5b2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a590:	e002      	b.n	800a598 <create_name+0x48>
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	3301      	adds	r3, #1
 800a596:	61bb      	str	r3, [r7, #24]
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	4413      	add	r3, r2
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	2b2f      	cmp	r3, #47	; 0x2f
 800a5a2:	d0f6      	beq.n	800a592 <create_name+0x42>
 800a5a4:	693a      	ldr	r2, [r7, #16]
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	2b5c      	cmp	r3, #92	; 0x5c
 800a5ae:	d0f0      	beq.n	800a592 <create_name+0x42>
			break;
 800a5b0:	e02a      	b.n	800a608 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	2bfe      	cmp	r3, #254	; 0xfe
 800a5b6:	d901      	bls.n	800a5bc <create_name+0x6c>
 800a5b8:	2306      	movs	r3, #6
 800a5ba:	e177      	b.n	800a8ac <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a5bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a5c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f001 fd8c 	bl	800c0e4 <ff_convert>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a5d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <create_name+0x8a>
 800a5d6:	2306      	movs	r3, #6
 800a5d8:	e168      	b.n	800a8ac <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a5da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5dc:	2b7f      	cmp	r3, #127	; 0x7f
 800a5de:	d809      	bhi.n	800a5f4 <create_name+0xa4>
 800a5e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	48b3      	ldr	r0, [pc, #716]	; (800a8b4 <create_name+0x364>)
 800a5e6:	f7fd fdab 	bl	8008140 <chk_chr>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <create_name+0xa4>
 800a5f0:	2306      	movs	r3, #6
 800a5f2:	e15b      	b.n	800a8ac <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	617a      	str	r2, [r7, #20]
 800a5fa:	005b      	lsls	r3, r3, #1
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	4413      	add	r3, r2
 800a600:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a602:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a604:	e7b4      	b.n	800a570 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a606:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	441a      	add	r2, r3
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a614:	2b1f      	cmp	r3, #31
 800a616:	d801      	bhi.n	800a61c <create_name+0xcc>
 800a618:	2304      	movs	r3, #4
 800a61a:	e000      	b.n	800a61e <create_name+0xce>
 800a61c:	2300      	movs	r3, #0
 800a61e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a622:	e011      	b.n	800a648 <create_name+0xf8>
		w = lfn[di - 1];
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a62a:	4413      	add	r3, r2
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	4413      	add	r3, r2
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a638:	2b20      	cmp	r3, #32
 800a63a:	d002      	beq.n	800a642 <create_name+0xf2>
 800a63c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a63e:	2b2e      	cmp	r3, #46	; 0x2e
 800a640:	d106      	bne.n	800a650 <create_name+0x100>
		di--;
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	3b01      	subs	r3, #1
 800a646:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1ea      	bne.n	800a624 <create_name+0xd4>
 800a64e:	e000      	b.n	800a652 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a650:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	005b      	lsls	r3, r3, #1
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	4413      	add	r3, r2
 800a65a:	2200      	movs	r2, #0
 800a65c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <create_name+0x118>
 800a664:	2306      	movs	r3, #6
 800a666:	e121      	b.n	800a8ac <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3340      	adds	r3, #64	; 0x40
 800a66c:	220b      	movs	r2, #11
 800a66e:	2120      	movs	r1, #32
 800a670:	4618      	mov	r0, r3
 800a672:	f7fd fd24 	bl	80080be <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a676:	2300      	movs	r3, #0
 800a678:	61bb      	str	r3, [r7, #24]
 800a67a:	e002      	b.n	800a682 <create_name+0x132>
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	3301      	adds	r3, #1
 800a680:	61bb      	str	r3, [r7, #24]
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	4413      	add	r3, r2
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	2b20      	cmp	r3, #32
 800a68e:	d0f5      	beq.n	800a67c <create_name+0x12c>
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	005b      	lsls	r3, r3, #1
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	4413      	add	r3, r2
 800a698:	881b      	ldrh	r3, [r3, #0]
 800a69a:	2b2e      	cmp	r3, #46	; 0x2e
 800a69c:	d0ee      	beq.n	800a67c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d009      	beq.n	800a6b8 <create_name+0x168>
 800a6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6a8:	f043 0303 	orr.w	r3, r3, #3
 800a6ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a6b0:	e002      	b.n	800a6b8 <create_name+0x168>
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	617b      	str	r3, [r7, #20]
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d009      	beq.n	800a6d2 <create_name+0x182>
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a6c4:	4413      	add	r3, r2
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a6d0:	d1ef      	bne.n	800a6b2 <create_name+0x162>

	i = b = 0; ni = 8;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a6d8:	2300      	movs	r3, #0
 800a6da:	623b      	str	r3, [r7, #32]
 800a6dc:	2308      	movs	r3, #8
 800a6de:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	1c5a      	adds	r2, r3, #1
 800a6e4:	61ba      	str	r2, [r7, #24]
 800a6e6:	005b      	lsls	r3, r3, #1
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a6f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f000 8090 	beq.w	800a818 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a6f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6fa:	2b20      	cmp	r3, #32
 800a6fc:	d006      	beq.n	800a70c <create_name+0x1bc>
 800a6fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a700:	2b2e      	cmp	r3, #46	; 0x2e
 800a702:	d10a      	bne.n	800a71a <create_name+0x1ca>
 800a704:	69ba      	ldr	r2, [r7, #24]
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d006      	beq.n	800a71a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a710:	f043 0303 	orr.w	r3, r3, #3
 800a714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a718:	e07d      	b.n	800a816 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a71a:	6a3a      	ldr	r2, [r7, #32]
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d203      	bcs.n	800a72a <create_name+0x1da>
 800a722:	69ba      	ldr	r2, [r7, #24]
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	429a      	cmp	r2, r3
 800a728:	d123      	bne.n	800a772 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	2b0b      	cmp	r3, #11
 800a72e:	d106      	bne.n	800a73e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a734:	f043 0303 	orr.w	r3, r3, #3
 800a738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a73c:	e06f      	b.n	800a81e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a73e:	69ba      	ldr	r2, [r7, #24]
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	429a      	cmp	r2, r3
 800a744:	d005      	beq.n	800a752 <create_name+0x202>
 800a746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a74a:	f043 0303 	orr.w	r3, r3, #3
 800a74e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a752:	69ba      	ldr	r2, [r7, #24]
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	429a      	cmp	r2, r3
 800a758:	d860      	bhi.n	800a81c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	61bb      	str	r3, [r7, #24]
 800a75e:	2308      	movs	r3, #8
 800a760:	623b      	str	r3, [r7, #32]
 800a762:	230b      	movs	r3, #11
 800a764:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a766:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a770:	e051      	b.n	800a816 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a774:	2b7f      	cmp	r3, #127	; 0x7f
 800a776:	d914      	bls.n	800a7a2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a77a:	2100      	movs	r1, #0
 800a77c:	4618      	mov	r0, r3
 800a77e:	f001 fcb1 	bl	800c0e4 <ff_convert>
 800a782:	4603      	mov	r3, r0
 800a784:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d004      	beq.n	800a796 <create_name+0x246>
 800a78c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a78e:	3b80      	subs	r3, #128	; 0x80
 800a790:	4a49      	ldr	r2, [pc, #292]	; (800a8b8 <create_name+0x368>)
 800a792:	5cd3      	ldrb	r3, [r2, r3]
 800a794:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a79a:	f043 0302 	orr.w	r3, r3, #2
 800a79e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a7a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d007      	beq.n	800a7b8 <create_name+0x268>
 800a7a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4843      	ldr	r0, [pc, #268]	; (800a8bc <create_name+0x36c>)
 800a7ae:	f7fd fcc7 	bl	8008140 <chk_chr>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d008      	beq.n	800a7ca <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a7b8:	235f      	movs	r3, #95	; 0x5f
 800a7ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7c0:	f043 0303 	orr.w	r3, r3, #3
 800a7c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7c8:	e01b      	b.n	800a802 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a7ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7cc:	2b40      	cmp	r3, #64	; 0x40
 800a7ce:	d909      	bls.n	800a7e4 <create_name+0x294>
 800a7d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7d2:	2b5a      	cmp	r3, #90	; 0x5a
 800a7d4:	d806      	bhi.n	800a7e4 <create_name+0x294>
					b |= 2;
 800a7d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7da:	f043 0302 	orr.w	r3, r3, #2
 800a7de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a7e2:	e00e      	b.n	800a802 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a7e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7e6:	2b60      	cmp	r3, #96	; 0x60
 800a7e8:	d90b      	bls.n	800a802 <create_name+0x2b2>
 800a7ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7ec:	2b7a      	cmp	r3, #122	; 0x7a
 800a7ee:	d808      	bhi.n	800a802 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a7f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7f4:	f043 0301 	orr.w	r3, r3, #1
 800a7f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a7fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7fe:	3b20      	subs	r3, #32
 800a800:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	623a      	str	r2, [r7, #32]
 800a808:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a80a:	b2d1      	uxtb	r1, r2
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	4413      	add	r3, r2
 800a810:	460a      	mov	r2, r1
 800a812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800a816:	e763      	b.n	800a6e0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a818:	bf00      	nop
 800a81a:	e000      	b.n	800a81e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800a81c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a824:	2be5      	cmp	r3, #229	; 0xe5
 800a826:	d103      	bne.n	800a830 <create_name+0x2e0>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2205      	movs	r2, #5
 800a82c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	2b08      	cmp	r3, #8
 800a834:	d104      	bne.n	800a840 <create_name+0x2f0>
 800a836:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a840:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a844:	f003 030c 	and.w	r3, r3, #12
 800a848:	2b0c      	cmp	r3, #12
 800a84a:	d005      	beq.n	800a858 <create_name+0x308>
 800a84c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a850:	f003 0303 	and.w	r3, r3, #3
 800a854:	2b03      	cmp	r3, #3
 800a856:	d105      	bne.n	800a864 <create_name+0x314>
 800a858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a85c:	f043 0302 	orr.w	r3, r3, #2
 800a860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a868:	f003 0302 	and.w	r3, r3, #2
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d117      	bne.n	800a8a0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a870:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a874:	f003 0303 	and.w	r3, r3, #3
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d105      	bne.n	800a888 <create_name+0x338>
 800a87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a880:	f043 0310 	orr.w	r3, r3, #16
 800a884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a888:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a88c:	f003 030c 	and.w	r3, r3, #12
 800a890:	2b04      	cmp	r3, #4
 800a892:	d105      	bne.n	800a8a0 <create_name+0x350>
 800a894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a898:	f043 0308 	orr.w	r3, r3, #8
 800a89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a8a6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800a8aa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3728      	adds	r7, #40	; 0x28
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	0800f170 	.word	0x0800f170
 800a8b8:	0800f1cc 	.word	0x0800f1cc
 800a8bc:	0800f17c 	.word	0x0800f17c

0800a8c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a8c0:	b590      	push	{r4, r7, lr}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a8d4:	e002      	b.n	800a8dc <follow_path+0x1c>
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	603b      	str	r3, [r7, #0]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	2b2f      	cmp	r3, #47	; 0x2f
 800a8e2:	d0f8      	beq.n	800a8d6 <follow_path+0x16>
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	2b5c      	cmp	r3, #92	; 0x5c
 800a8ea:	d0f4      	beq.n	800a8d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	2b1f      	cmp	r3, #31
 800a8fe:	d80a      	bhi.n	800a916 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2280      	movs	r2, #128	; 0x80
 800a904:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800a908:	2100      	movs	r1, #0
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7fe fc59 	bl	80091c2 <dir_sdi>
 800a910:	4603      	mov	r3, r0
 800a912:	75fb      	strb	r3, [r7, #23]
 800a914:	e07c      	b.n	800aa10 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a916:	463b      	mov	r3, r7
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7ff fe18 	bl	800a550 <create_name>
 800a920:	4603      	mov	r3, r0
 800a922:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a924:	7dfb      	ldrb	r3, [r7, #23]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d16d      	bne.n	800aa06 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7ff fb36 	bl	8009f9c <dir_find>
 800a930:	4603      	mov	r3, r0
 800a932:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a93a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a93c:	7dfb      	ldrb	r3, [r7, #23]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00a      	beq.n	800a958 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a942:	7dfb      	ldrb	r3, [r7, #23]
 800a944:	2b04      	cmp	r3, #4
 800a946:	d160      	bne.n	800aa0a <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a948:	7afb      	ldrb	r3, [r7, #11]
 800a94a:	f003 0304 	and.w	r3, r3, #4
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d15b      	bne.n	800aa0a <follow_path+0x14a>
 800a952:	2305      	movs	r3, #5
 800a954:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a956:	e058      	b.n	800aa0a <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a958:	7afb      	ldrb	r3, [r7, #11]
 800a95a:	f003 0304 	and.w	r3, r3, #4
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d155      	bne.n	800aa0e <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	799b      	ldrb	r3, [r3, #6]
 800a966:	f003 0310 	and.w	r3, r3, #16
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d102      	bne.n	800a974 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800a96e:	2305      	movs	r3, #5
 800a970:	75fb      	strb	r3, [r7, #23]
 800a972:	e04d      	b.n	800aa10 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2b04      	cmp	r3, #4
 800a97a:	d12f      	bne.n	800a9dc <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	689a      	ldr	r2, [r3, #8]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a98a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	79d2      	ldrb	r2, [r2, #7]
 800a992:	431a      	orrs	r2, r3
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	3334      	adds	r3, #52	; 0x34
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fd f9ba 	bl	8007d20 <ld_dword>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	3321      	adds	r3, #33	; 0x21
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	f003 0302 	and.w	r3, r3, #2
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	3338      	adds	r3, #56	; 0x38
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fd f9cb 	bl	8007d66 <ld_qword>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	693a      	ldr	r2, [r7, #16]
 800a9d6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800a9da:	e79c      	b.n	800a916 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	8992      	ldrh	r2, [r2, #12]
 800a9ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9ee:	fb02 f200 	mul.w	r2, r2, r0
 800a9f2:	1a9b      	subs	r3, r3, r2
 800a9f4:	440b      	add	r3, r1
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f7fe fdb8 	bl	800956e <ld_clust>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aa04:	e787      	b.n	800a916 <follow_path+0x56>
			if (res != FR_OK) break;
 800aa06:	bf00      	nop
 800aa08:	e002      	b.n	800aa10 <follow_path+0x150>
				break;
 800aa0a:	bf00      	nop
 800aa0c:	e000      	b.n	800aa10 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aa0e:	bf00      	nop
			}
		}
	}

	return res;
 800aa10:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	371c      	adds	r7, #28
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd90      	pop	{r4, r7, pc}

0800aa1a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b087      	sub	sp, #28
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800aa22:	f04f 33ff 	mov.w	r3, #4294967295
 800aa26:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d031      	beq.n	800aa94 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	617b      	str	r3, [r7, #20]
 800aa36:	e002      	b.n	800aa3e <get_ldnumber+0x24>
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	617b      	str	r3, [r7, #20]
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	2b1f      	cmp	r3, #31
 800aa44:	d903      	bls.n	800aa4e <get_ldnumber+0x34>
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	2b3a      	cmp	r3, #58	; 0x3a
 800aa4c:	d1f4      	bne.n	800aa38 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	2b3a      	cmp	r3, #58	; 0x3a
 800aa54:	d11c      	bne.n	800aa90 <get_ldnumber+0x76>
			tp = *path;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	1c5a      	adds	r2, r3, #1
 800aa60:	60fa      	str	r2, [r7, #12]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	3b30      	subs	r3, #48	; 0x30
 800aa66:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2b09      	cmp	r3, #9
 800aa6c:	d80e      	bhi.n	800aa8c <get_ldnumber+0x72>
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d10a      	bne.n	800aa8c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d107      	bne.n	800aa8c <get_ldnumber+0x72>
					vol = (int)i;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	3301      	adds	r3, #1
 800aa84:	617b      	str	r3, [r7, #20]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	e002      	b.n	800aa96 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800aa90:	2300      	movs	r3, #0
 800aa92:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800aa94:	693b      	ldr	r3, [r7, #16]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	371c      	adds	r7, #28
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
	...

0800aaa4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	70da      	strb	r2, [r3, #3]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f04f 32ff 	mov.w	r2, #4294967295
 800aaba:	63da      	str	r2, [r3, #60]	; 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aabc:	6839      	ldr	r1, [r7, #0]
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7fd fd3a 	bl	8008538 <move_window>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <check_fs+0x2a>
 800aaca:	2304      	movs	r3, #4
 800aacc:	e044      	b.n	800ab58 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	3340      	adds	r3, #64	; 0x40
 800aad2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fd f90a 	bl	8007cf0 <ld_word>
 800aadc:	4603      	mov	r3, r0
 800aade:	461a      	mov	r2, r3
 800aae0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d001      	beq.n	800aaec <check_fs+0x48>
 800aae8:	2303      	movs	r3, #3
 800aaea:	e035      	b.n	800ab58 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aaf2:	2be9      	cmp	r3, #233	; 0xe9
 800aaf4:	d009      	beq.n	800ab0a <check_fs+0x66>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aafc:	2beb      	cmp	r3, #235	; 0xeb
 800aafe:	d11e      	bne.n	800ab3e <check_fs+0x9a>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab06:	2b90      	cmp	r3, #144	; 0x90
 800ab08:	d119      	bne.n	800ab3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3340      	adds	r3, #64	; 0x40
 800ab0e:	3336      	adds	r3, #54	; 0x36
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fd f905 	bl	8007d20 <ld_dword>
 800ab16:	4603      	mov	r3, r0
 800ab18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ab1c:	4a10      	ldr	r2, [pc, #64]	; (800ab60 <check_fs+0xbc>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d101      	bne.n	800ab26 <check_fs+0x82>
 800ab22:	2300      	movs	r3, #0
 800ab24:	e018      	b.n	800ab58 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	3340      	adds	r3, #64	; 0x40
 800ab2a:	3352      	adds	r3, #82	; 0x52
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fd f8f7 	bl	8007d20 <ld_dword>
 800ab32:	4602      	mov	r2, r0
 800ab34:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <check_fs+0xc0>)
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d101      	bne.n	800ab3e <check_fs+0x9a>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	e00c      	b.n	800ab58 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	3340      	adds	r3, #64	; 0x40
 800ab42:	220b      	movs	r2, #11
 800ab44:	4908      	ldr	r1, [pc, #32]	; (800ab68 <check_fs+0xc4>)
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fd fad3 	bl	80080f2 <mem_cmp>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <check_fs+0xb2>
 800ab52:	2301      	movs	r3, #1
 800ab54:	e000      	b.n	800ab58 <check_fs+0xb4>
#endif
	return 2;
 800ab56:	2302      	movs	r3, #2
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	00544146 	.word	0x00544146
 800ab64:	33544146 	.word	0x33544146
 800ab68:	0800f184 	.word	0x0800f184

0800ab6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ab6c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ab70:	b098      	sub	sp, #96	; 0x60
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	60f8      	str	r0, [r7, #12]
 800ab76:	60b9      	str	r1, [r7, #8]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7ff ff49 	bl	800aa1a <get_ldnumber>
 800ab88:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	da01      	bge.n	800ab94 <find_volume+0x28>
 800ab90:	230b      	movs	r3, #11
 800ab92:	e370      	b.n	800b276 <find_volume+0x70a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ab94:	4aae      	ldr	r2, [pc, #696]	; (800ae50 <find_volume+0x2e4>)
 800ab96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab9c:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ab9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <find_volume+0x3c>
 800aba4:	230c      	movs	r3, #12
 800aba6:	e366      	b.n	800b276 <find_volume+0x70a>

	ENTER_FF(fs);						/* Lock the volume */
 800aba8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800abaa:	f7fd fae4 	bl	8008176 <lock_fs>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <find_volume+0x4c>
 800abb4:	230f      	movs	r3, #15
 800abb6:	e35e      	b.n	800b276 <find_volume+0x70a>
	*rfs = fs;							/* Return pointer to the file system object */
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abbc:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800abbe:	79fb      	ldrb	r3, [r7, #7]
 800abc0:	f023 0301 	bic.w	r3, r3, #1
 800abc4:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800abc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d01a      	beq.n	800ac04 <find_volume+0x98>
		stat = disk_status(fs->drv);
 800abce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd0:	785b      	ldrb	r3, [r3, #1]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fc ffee 	bl	8007bb4 <disk_status>
 800abd8:	4603      	mov	r3, r0
 800abda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800abde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10c      	bne.n	800ac04 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800abea:	79fb      	ldrb	r3, [r7, #7]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d007      	beq.n	800ac00 <find_volume+0x94>
 800abf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800abf4:	f003 0304 	and.w	r3, r3, #4
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800abfc:	230a      	movs	r3, #10
 800abfe:	e33a      	b.n	800b276 <find_volume+0x70a>
			}
			return FR_OK;				/* The file system object is valid */
 800ac00:	2300      	movs	r3, #0
 800ac02:	e338      	b.n	800b276 <find_volume+0x70a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ac04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac06:	2200      	movs	r2, #0
 800ac08:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ac0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac10:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ac12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac14:	785b      	ldrb	r3, [r3, #1]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fc ffe6 	bl	8007be8 <disk_initialize>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ac22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac26:	f003 0301 	and.w	r3, r3, #1
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d001      	beq.n	800ac32 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ac2e:	2303      	movs	r3, #3
 800ac30:	e321      	b.n	800b276 <find_volume+0x70a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ac32:	79fb      	ldrb	r3, [r7, #7]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d007      	beq.n	800ac48 <find_volume+0xdc>
 800ac38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac3c:	f003 0304 	and.w	r3, r3, #4
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d001      	beq.n	800ac48 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800ac44:	230a      	movs	r3, #10
 800ac46:	e316      	b.n	800b276 <find_volume+0x70a>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ac48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac4a:	7858      	ldrb	r0, [r3, #1]
 800ac4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac4e:	330c      	adds	r3, #12
 800ac50:	461a      	mov	r2, r3
 800ac52:	2102      	movs	r1, #2
 800ac54:	f7fd f82e 	bl	8007cb4 <disk_ioctl>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <find_volume+0xf6>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e309      	b.n	800b276 <find_volume+0x70a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ac62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac64:	899b      	ldrh	r3, [r3, #12]
 800ac66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac6a:	d80d      	bhi.n	800ac88 <find_volume+0x11c>
 800ac6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac6e:	899b      	ldrh	r3, [r3, #12]
 800ac70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac74:	d308      	bcc.n	800ac88 <find_volume+0x11c>
 800ac76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac78:	899b      	ldrh	r3, [r3, #12]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac7e:	899b      	ldrh	r3, [r3, #12]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	4013      	ands	r3, r2
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d001      	beq.n	800ac8c <find_volume+0x120>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e2f4      	b.n	800b276 <find_volume+0x70a>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ac90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac92:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ac94:	f7ff ff06 	bl	800aaa4 <check_fs>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ac9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	d14b      	bne.n	800ad3e <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aca6:	2300      	movs	r3, #0
 800aca8:	64bb      	str	r3, [r7, #72]	; 0x48
 800acaa:	e01f      	b.n	800acec <find_volume+0x180>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800acac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acae:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800acb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acb4:	011b      	lsls	r3, r3, #4
 800acb6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800acba:	4413      	add	r3, r2
 800acbc:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	3304      	adds	r3, #4
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d006      	beq.n	800acd6 <find_volume+0x16a>
 800acc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acca:	3308      	adds	r3, #8
 800accc:	4618      	mov	r0, r3
 800acce:	f7fd f827 	bl	8007d20 <ld_dword>
 800acd2:	4602      	mov	r2, r0
 800acd4:	e000      	b.n	800acd8 <find_volume+0x16c>
 800acd6:	2200      	movs	r2, #0
 800acd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800ace0:	440b      	add	r3, r1
 800ace2:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ace6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ace8:	3301      	adds	r3, #1
 800acea:	64bb      	str	r3, [r7, #72]	; 0x48
 800acec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acee:	2b03      	cmp	r3, #3
 800acf0:	d9dc      	bls.n	800acac <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800acf2:	2300      	movs	r3, #0
 800acf4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800acf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <find_volume+0x196>
 800acfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acfe:	3b01      	subs	r3, #1
 800ad00:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ad02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800ad10:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ad12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d005      	beq.n	800ad24 <find_volume+0x1b8>
 800ad18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad1a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ad1c:	f7ff fec2 	bl	800aaa4 <check_fs>
 800ad20:	4603      	mov	r3, r0
 800ad22:	e000      	b.n	800ad26 <find_volume+0x1ba>
 800ad24:	2303      	movs	r3, #3
 800ad26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ad2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d905      	bls.n	800ad3e <find_volume+0x1d2>
 800ad32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad34:	3301      	adds	r3, #1
 800ad36:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad3a:	2b03      	cmp	r3, #3
 800ad3c:	d9e1      	bls.n	800ad02 <find_volume+0x196>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ad3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad42:	2b04      	cmp	r3, #4
 800ad44:	d101      	bne.n	800ad4a <find_volume+0x1de>
 800ad46:	2301      	movs	r3, #1
 800ad48:	e295      	b.n	800b276 <find_volume+0x70a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ad4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d901      	bls.n	800ad56 <find_volume+0x1ea>
 800ad52:	230d      	movs	r3, #13
 800ad54:	e28f      	b.n	800b276 <find_volume+0x70a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800ad56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	f040 8101 	bne.w	800af62 <find_volume+0x3f6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800ad60:	230b      	movs	r3, #11
 800ad62:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad64:	e002      	b.n	800ad6c <find_volume+0x200>
 800ad66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad68:	3301      	adds	r3, #1
 800ad6a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad6e:	2b3f      	cmp	r3, #63	; 0x3f
 800ad70:	d806      	bhi.n	800ad80 <find_volume+0x214>
 800ad72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad76:	4413      	add	r3, r2
 800ad78:	3340      	adds	r3, #64	; 0x40
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d0f2      	beq.n	800ad66 <find_volume+0x1fa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ad80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad82:	2b3f      	cmp	r3, #63	; 0x3f
 800ad84:	d801      	bhi.n	800ad8a <find_volume+0x21e>
 800ad86:	230d      	movs	r3, #13
 800ad88:	e275      	b.n	800b276 <find_volume+0x70a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ad8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad8c:	3340      	adds	r3, #64	; 0x40
 800ad8e:	3368      	adds	r3, #104	; 0x68
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fc ffad 	bl	8007cf0 <ld_word>
 800ad96:	4603      	mov	r3, r0
 800ad98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad9c:	d001      	beq.n	800ada2 <find_volume+0x236>
 800ad9e:	230d      	movs	r3, #13
 800ada0:	e269      	b.n	800b276 <find_volume+0x70a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800ada2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ada4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800ada8:	461a      	mov	r2, r3
 800adaa:	2301      	movs	r3, #1
 800adac:	4093      	lsls	r3, r2
 800adae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adb0:	8992      	ldrh	r2, [r2, #12]
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d001      	beq.n	800adba <find_volume+0x24e>
			return FR_NO_FILESYSTEM;
 800adb6:	230d      	movs	r3, #13
 800adb8:	e25d      	b.n	800b276 <find_volume+0x70a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800adba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adbc:	3340      	adds	r3, #64	; 0x40
 800adbe:	3348      	adds	r3, #72	; 0x48
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fc ffd0 	bl	8007d66 <ld_qword>
 800adc6:	460a      	mov	r2, r1
 800adc8:	4601      	mov	r1, r0
 800adca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800adcc:	469b      	mov	fp, r3
 800adce:	f04f 0c00 	mov.w	ip, #0
 800add2:	eb1b 0301 	adds.w	r3, fp, r1
 800add6:	eb4c 0402 	adc.w	r4, ip, r2
 800adda:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800adde:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ade2:	2c01      	cmp	r4, #1
 800ade4:	bf08      	it	eq
 800ade6:	2b00      	cmpeq	r3, #0
 800ade8:	d301      	bcc.n	800adee <find_volume+0x282>
 800adea:	230d      	movs	r3, #13
 800adec:	e243      	b.n	800b276 <find_volume+0x70a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800adee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adf0:	3340      	adds	r3, #64	; 0x40
 800adf2:	3354      	adds	r3, #84	; 0x54
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fc ff93 	bl	8007d20 <ld_dword>
 800adfa:	4602      	mov	r2, r0
 800adfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adfe:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800ae00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae02:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 800ae06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae08:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800ae0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae0c:	789b      	ldrb	r3, [r3, #2]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d001      	beq.n	800ae16 <find_volume+0x2aa>
 800ae12:	230d      	movs	r3, #13
 800ae14:	e22f      	b.n	800b276 <find_volume+0x70a>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800ae16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae18:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	2301      	movs	r3, #1
 800ae20:	4093      	lsls	r3, r2
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae26:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800ae28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae2a:	895b      	ldrh	r3, [r3, #10]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <find_volume+0x2c8>
 800ae30:	230d      	movs	r3, #13
 800ae32:	e220      	b.n	800b276 <find_volume+0x70a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800ae34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae36:	3340      	adds	r3, #64	; 0x40
 800ae38:	335c      	adds	r3, #92	; 0x5c
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fc ff70 	bl	8007d20 <ld_dword>
 800ae40:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800ae42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae44:	4a03      	ldr	r2, [pc, #12]	; (800ae54 <find_volume+0x2e8>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d906      	bls.n	800ae58 <find_volume+0x2ec>
 800ae4a:	230d      	movs	r3, #13
 800ae4c:	e213      	b.n	800b276 <find_volume+0x70a>
 800ae4e:	bf00      	nop
 800ae50:	20000298 	.word	0x20000298
 800ae54:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800ae58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5a:	1c9a      	adds	r2, r3, #2
 800ae5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae5e:	625a      	str	r2, [r3, #36]	; 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800ae60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae64:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800ae66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae68:	3340      	adds	r3, #64	; 0x40
 800ae6a:	3358      	adds	r3, #88	; 0x58
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fc ff57 	bl	8007d20 <ld_dword>
 800ae72:	4602      	mov	r2, r0
 800ae74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae76:	441a      	add	r2, r3
 800ae78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae7a:	639a      	str	r2, [r3, #56]	; 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800ae7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae7e:	3340      	adds	r3, #64	; 0x40
 800ae80:	3350      	adds	r3, #80	; 0x50
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fc ff4c 	bl	8007d20 <ld_dword>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae8c:	441a      	add	r2, r3
 800ae8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae90:	631a      	str	r2, [r3, #48]	; 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800ae92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae96:	4619      	mov	r1, r3
 800ae98:	f04f 0200 	mov.w	r2, #0
 800ae9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae9e:	895b      	ldrh	r3, [r3, #10]
 800aea0:	4618      	mov	r0, r3
 800aea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea4:	fb03 f300 	mul.w	r3, r3, r0
 800aea8:	469b      	mov	fp, r3
 800aeaa:	f04f 0c00 	mov.w	ip, #0
 800aeae:	eb1b 0301 	adds.w	r3, fp, r1
 800aeb2:	eb4c 0402 	adc.w	r4, ip, r2
 800aeb6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aeba:	42a2      	cmp	r2, r4
 800aebc:	bf08      	it	eq
 800aebe:	4299      	cmpeq	r1, r3
 800aec0:	d201      	bcs.n	800aec6 <find_volume+0x35a>
 800aec2:	230d      	movs	r3, #13
 800aec4:	e1d7      	b.n	800b276 <find_volume+0x70a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800aec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec8:	3340      	adds	r3, #64	; 0x40
 800aeca:	3360      	adds	r3, #96	; 0x60
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fc ff27 	bl	8007d20 <ld_dword>
 800aed2:	4602      	mov	r2, r0
 800aed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed6:	635a      	str	r2, [r3, #52]	; 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800aed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aedc:	4619      	mov	r1, r3
 800aede:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800aee0:	f7fd fbc8 	bl	8008674 <clust2sect>
 800aee4:	4603      	mov	r3, r0
 800aee6:	4619      	mov	r1, r3
 800aee8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800aeea:	f7fd fb25 	bl	8008538 <move_window>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <find_volume+0x38c>
 800aef4:	2301      	movs	r3, #1
 800aef6:	e1be      	b.n	800b276 <find_volume+0x70a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800aef8:	2300      	movs	r3, #0
 800aefa:	64bb      	str	r3, [r7, #72]	; 0x48
 800aefc:	e015      	b.n	800af2a <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800aefe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af02:	4413      	add	r3, r2
 800af04:	3340      	adds	r3, #64	; 0x40
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	2b81      	cmp	r3, #129	; 0x81
 800af0a:	d10b      	bne.n	800af24 <find_volume+0x3b8>
 800af0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af0e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800af12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af14:	3314      	adds	r3, #20
 800af16:	4413      	add	r3, r2
 800af18:	4618      	mov	r0, r3
 800af1a:	f7fc ff01 	bl	8007d20 <ld_dword>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b02      	cmp	r3, #2
 800af22:	d009      	beq.n	800af38 <find_volume+0x3cc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800af24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af26:	3320      	adds	r3, #32
 800af28:	64bb      	str	r3, [r7, #72]	; 0x48
 800af2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af2c:	899b      	ldrh	r3, [r3, #12]
 800af2e:	461a      	mov	r2, r3
 800af30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af32:	4293      	cmp	r3, r2
 800af34:	d3e3      	bcc.n	800aefe <find_volume+0x392>
 800af36:	e000      	b.n	800af3a <find_volume+0x3ce>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800af38:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800af3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af3c:	899b      	ldrh	r3, [r3, #12]
 800af3e:	461a      	mov	r2, r3
 800af40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af42:	4293      	cmp	r3, r2
 800af44:	d101      	bne.n	800af4a <find_volume+0x3de>
 800af46:	230d      	movs	r3, #13
 800af48:	e195      	b.n	800b276 <find_volume+0x70a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800af4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af4c:	f04f 32ff 	mov.w	r2, #4294967295
 800af50:	621a      	str	r2, [r3, #32]
 800af52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af54:	6a1a      	ldr	r2, [r3, #32]
 800af56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af58:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800af5a:	2304      	movs	r3, #4
 800af5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800af60:	e177      	b.n	800b252 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800af62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af64:	3340      	adds	r3, #64	; 0x40
 800af66:	330b      	adds	r3, #11
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fc fec1 	bl	8007cf0 <ld_word>
 800af6e:	4603      	mov	r3, r0
 800af70:	461a      	mov	r2, r3
 800af72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af74:	899b      	ldrh	r3, [r3, #12]
 800af76:	429a      	cmp	r2, r3
 800af78:	d001      	beq.n	800af7e <find_volume+0x412>
 800af7a:	230d      	movs	r3, #13
 800af7c:	e17b      	b.n	800b276 <find_volume+0x70a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800af7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af80:	3340      	adds	r3, #64	; 0x40
 800af82:	3316      	adds	r3, #22
 800af84:	4618      	mov	r0, r3
 800af86:	f7fc feb3 	bl	8007cf0 <ld_word>
 800af8a:	4603      	mov	r3, r0
 800af8c:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800af8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af90:	2b00      	cmp	r3, #0
 800af92:	d106      	bne.n	800afa2 <find_volume+0x436>
 800af94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af96:	3340      	adds	r3, #64	; 0x40
 800af98:	3324      	adds	r3, #36	; 0x24
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fc fec0 	bl	8007d20 <ld_dword>
 800afa0:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800afa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afa6:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800afa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afaa:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800afae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afb0:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800afb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afb4:	789b      	ldrb	r3, [r3, #2]
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d005      	beq.n	800afc6 <find_volume+0x45a>
 800afba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afbc:	789b      	ldrb	r3, [r3, #2]
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d001      	beq.n	800afc6 <find_volume+0x45a>
 800afc2:	230d      	movs	r3, #13
 800afc4:	e157      	b.n	800b276 <find_volume+0x70a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800afc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afc8:	789b      	ldrb	r3, [r3, #2]
 800afca:	461a      	mov	r2, r3
 800afcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afce:	fb02 f303 	mul.w	r3, r2, r3
 800afd2:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800afd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afd6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800afda:	b29a      	uxth	r2, r3
 800afdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afde:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800afe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afe2:	895b      	ldrh	r3, [r3, #10]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d008      	beq.n	800affa <find_volume+0x48e>
 800afe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afea:	895b      	ldrh	r3, [r3, #10]
 800afec:	461a      	mov	r2, r3
 800afee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aff0:	895b      	ldrh	r3, [r3, #10]
 800aff2:	3b01      	subs	r3, #1
 800aff4:	4013      	ands	r3, r2
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <find_volume+0x492>
 800affa:	230d      	movs	r3, #13
 800affc:	e13b      	b.n	800b276 <find_volume+0x70a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800affe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b000:	3340      	adds	r3, #64	; 0x40
 800b002:	3311      	adds	r3, #17
 800b004:	4618      	mov	r0, r3
 800b006:	f7fc fe73 	bl	8007cf0 <ld_word>
 800b00a:	4603      	mov	r3, r0
 800b00c:	461a      	mov	r2, r3
 800b00e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b010:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b014:	891b      	ldrh	r3, [r3, #8]
 800b016:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b018:	8992      	ldrh	r2, [r2, #12]
 800b01a:	0952      	lsrs	r2, r2, #5
 800b01c:	b292      	uxth	r2, r2
 800b01e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b022:	fb02 f201 	mul.w	r2, r2, r1
 800b026:	1a9b      	subs	r3, r3, r2
 800b028:	b29b      	uxth	r3, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <find_volume+0x4c6>
 800b02e:	230d      	movs	r3, #13
 800b030:	e121      	b.n	800b276 <find_volume+0x70a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b034:	3340      	adds	r3, #64	; 0x40
 800b036:	3313      	adds	r3, #19
 800b038:	4618      	mov	r0, r3
 800b03a:	f7fc fe59 	bl	8007cf0 <ld_word>
 800b03e:	4603      	mov	r3, r0
 800b040:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b044:	2b00      	cmp	r3, #0
 800b046:	d106      	bne.n	800b056 <find_volume+0x4ea>
 800b048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b04a:	3340      	adds	r3, #64	; 0x40
 800b04c:	3320      	adds	r3, #32
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fc fe66 	bl	8007d20 <ld_dword>
 800b054:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b058:	3340      	adds	r3, #64	; 0x40
 800b05a:	330e      	adds	r3, #14
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fc fe47 	bl	8007cf0 <ld_word>
 800b062:	4603      	mov	r3, r0
 800b064:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b066:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d101      	bne.n	800b070 <find_volume+0x504>
 800b06c:	230d      	movs	r3, #13
 800b06e:	e102      	b.n	800b276 <find_volume+0x70a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b070:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b074:	4413      	add	r3, r2
 800b076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b078:	8911      	ldrh	r1, [r2, #8]
 800b07a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b07c:	8992      	ldrh	r2, [r2, #12]
 800b07e:	0952      	lsrs	r2, r2, #5
 800b080:	b292      	uxth	r2, r2
 800b082:	fbb1 f2f2 	udiv	r2, r1, r2
 800b086:	b292      	uxth	r2, r2
 800b088:	4413      	add	r3, r2
 800b08a:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b08c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	429a      	cmp	r2, r3
 800b092:	d201      	bcs.n	800b098 <find_volume+0x52c>
 800b094:	230d      	movs	r3, #13
 800b096:	e0ee      	b.n	800b276 <find_volume+0x70a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b098:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0a0:	8952      	ldrh	r2, [r2, #10]
 800b0a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <find_volume+0x546>
 800b0ae:	230d      	movs	r3, #13
 800b0b0:	e0e1      	b.n	800b276 <find_volume+0x70a>
		fmt = FS_FAT32;
 800b0b2:	2303      	movs	r3, #3
 800b0b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ba:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d802      	bhi.n	800b0c8 <find_volume+0x55c>
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ca:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d802      	bhi.n	800b0d8 <find_volume+0x56c>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0da:	1c9a      	adds	r2, r3, #2
 800b0dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0de:	625a      	str	r2, [r3, #36]	; 0x24
		fs->volbase = bsect;							/* Volume start sector */
 800b0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0e4:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b0e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b0e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0ea:	441a      	add	r2, r3
 800b0ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ee:	631a      	str	r2, [r3, #48]	; 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 800b0f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	441a      	add	r2, r3
 800b0f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0f8:	639a      	str	r2, [r3, #56]	; 0x38
		if (fmt == FS_FAT32) {
 800b0fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	d11e      	bne.n	800b140 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b104:	3340      	adds	r3, #64	; 0x40
 800b106:	332a      	adds	r3, #42	; 0x2a
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fc fdf1 	bl	8007cf0 <ld_word>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d001      	beq.n	800b118 <find_volume+0x5ac>
 800b114:	230d      	movs	r3, #13
 800b116:	e0ae      	b.n	800b276 <find_volume+0x70a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b11a:	891b      	ldrh	r3, [r3, #8]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <find_volume+0x5b8>
 800b120:	230d      	movs	r3, #13
 800b122:	e0a8      	b.n	800b276 <find_volume+0x70a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b126:	3340      	adds	r3, #64	; 0x40
 800b128:	332c      	adds	r3, #44	; 0x2c
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7fc fdf8 	bl	8007d20 <ld_dword>
 800b130:	4602      	mov	r2, r0
 800b132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b134:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b13e:	e01f      	b.n	800b180 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b142:	891b      	ldrh	r3, [r3, #8]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <find_volume+0x5e0>
 800b148:	230d      	movs	r3, #13
 800b14a:	e094      	b.n	800b276 <find_volume+0x70a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b14e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b152:	441a      	add	r2, r3
 800b154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b156:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d103      	bne.n	800b168 <find_volume+0x5fc>
 800b160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b164:	005b      	lsls	r3, r3, #1
 800b166:	e00a      	b.n	800b17e <find_volume+0x612>
 800b168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b16a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b16c:	4613      	mov	r3, r2
 800b16e:	005b      	lsls	r3, r3, #1
 800b170:	4413      	add	r3, r2
 800b172:	085a      	lsrs	r2, r3, #1
 800b174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b178:	f003 0301 	and.w	r3, r3, #1
 800b17c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b17e:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b186:	899b      	ldrh	r3, [r3, #12]
 800b188:	4619      	mov	r1, r3
 800b18a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b18c:	440b      	add	r3, r1
 800b18e:	3b01      	subs	r3, #1
 800b190:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b192:	8989      	ldrh	r1, [r1, #12]
 800b194:	fbb3 f3f1 	udiv	r3, r3, r1
 800b198:	429a      	cmp	r2, r3
 800b19a:	d201      	bcs.n	800b1a0 <find_volume+0x634>
 800b19c:	230d      	movs	r3, #13
 800b19e:	e06a      	b.n	800b276 <find_volume+0x70a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a6:	621a      	str	r2, [r3, #32]
 800b1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1aa:	6a1a      	ldr	r2, [r3, #32]
 800b1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ae:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 800b1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b2:	2280      	movs	r2, #128	; 0x80
 800b1b4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b1b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1ba:	2b03      	cmp	r3, #3
 800b1bc:	d149      	bne.n	800b252 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c0:	3340      	adds	r3, #64	; 0x40
 800b1c2:	3330      	adds	r3, #48	; 0x30
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fc fd93 	bl	8007cf0 <ld_word>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d140      	bne.n	800b252 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b1d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b1d8:	f7fd f9ae 	bl	8008538 <move_window>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d137      	bne.n	800b252 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800b1e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b1e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ea:	3340      	adds	r3, #64	; 0x40
 800b1ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7fc fd7d 	bl	8007cf0 <ld_word>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d127      	bne.n	800b252 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b204:	3340      	adds	r3, #64	; 0x40
 800b206:	4618      	mov	r0, r3
 800b208:	f7fc fd8a 	bl	8007d20 <ld_dword>
 800b20c:	4602      	mov	r2, r0
 800b20e:	4b1c      	ldr	r3, [pc, #112]	; (800b280 <find_volume+0x714>)
 800b210:	429a      	cmp	r2, r3
 800b212:	d11e      	bne.n	800b252 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b216:	3340      	adds	r3, #64	; 0x40
 800b218:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7fc fd7f 	bl	8007d20 <ld_dword>
 800b222:	4602      	mov	r2, r0
 800b224:	4b17      	ldr	r3, [pc, #92]	; (800b284 <find_volume+0x718>)
 800b226:	429a      	cmp	r2, r3
 800b228:	d113      	bne.n	800b252 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b22a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b22c:	3340      	adds	r3, #64	; 0x40
 800b22e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b232:	4618      	mov	r0, r3
 800b234:	f7fc fd74 	bl	8007d20 <ld_dword>
 800b238:	4602      	mov	r2, r0
 800b23a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b23c:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b240:	3340      	adds	r3, #64	; 0x40
 800b242:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b246:	4618      	mov	r0, r3
 800b248:	f7fc fd6a 	bl	8007d20 <ld_dword>
 800b24c:	4602      	mov	r2, r0
 800b24e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b250:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b254:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b258:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b25a:	4b0b      	ldr	r3, [pc, #44]	; (800b288 <find_volume+0x71c>)
 800b25c:	881b      	ldrh	r3, [r3, #0]
 800b25e:	3301      	adds	r3, #1
 800b260:	b29a      	uxth	r2, r3
 800b262:	4b09      	ldr	r3, [pc, #36]	; (800b288 <find_volume+0x71c>)
 800b264:	801a      	strh	r2, [r3, #0]
 800b266:	4b08      	ldr	r3, [pc, #32]	; (800b288 <find_volume+0x71c>)
 800b268:	881a      	ldrh	r2, [r3, #0]
 800b26a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b26c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b26e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b270:	f7fd f8fa 	bl	8008468 <clear_lock>
#endif
	return FR_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3760      	adds	r7, #96	; 0x60
 800b27a:	46bd      	mov	sp, r7
 800b27c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b280:	41615252 	.word	0x41615252
 800b284:	61417272 	.word	0x61417272
 800b288:	2000029c 	.word	0x2000029c

0800b28c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b296:	2309      	movs	r3, #9
 800b298:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d02e      	beq.n	800b2fe <validate+0x72>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d02a      	beq.n	800b2fe <validate+0x72>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d025      	beq.n	800b2fe <validate+0x72>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	889a      	ldrh	r2, [r3, #4]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	88db      	ldrh	r3, [r3, #6]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d11e      	bne.n	800b2fe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fc ff56 	bl	8008176 <lock_fs>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d014      	beq.n	800b2fa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	785b      	ldrb	r3, [r3, #1]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fc fc6c 	bl	8007bb4 <disk_status>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d102      	bne.n	800b2ec <validate+0x60>
				res = FR_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	73fb      	strb	r3, [r7, #15]
 800b2ea:	e008      	b.n	800b2fe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fc ff55 	bl	80081a2 <unlock_fs>
 800b2f8:	e001      	b.n	800b2fe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b2fa:	230f      	movs	r3, #15
 800b2fc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d102      	bne.n	800b30a <validate+0x7e>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	e000      	b.n	800b30c <validate+0x80>
 800b30a:	2300      	movs	r3, #0
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	6013      	str	r3, [r2, #0]
	return res;
 800b310:	7bfb      	ldrb	r3, [r7, #15]
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
	...

0800b31c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b088      	sub	sp, #32
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	4613      	mov	r3, r2
 800b328:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b32e:	f107 0310 	add.w	r3, r7, #16
 800b332:	4618      	mov	r0, r3
 800b334:	f7ff fb71 	bl	800aa1a <get_ldnumber>
 800b338:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	da01      	bge.n	800b344 <f_mount+0x28>
 800b340:	230b      	movs	r3, #11
 800b342:	e048      	b.n	800b3d6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b344:	4a26      	ldr	r2, [pc, #152]	; (800b3e0 <f_mount+0xc4>)
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b34c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00f      	beq.n	800b374 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b354:	69b8      	ldr	r0, [r7, #24]
 800b356:	f7fd f887 	bl	8008468 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	699b      	ldr	r3, [r3, #24]
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 ffa6 	bl	800c2b0 <ff_del_syncobj>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d101      	bne.n	800b36e <f_mount+0x52>
 800b36a:	2302      	movs	r3, #2
 800b36c:	e033      	b.n	800b3d6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	2200      	movs	r2, #0
 800b372:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00f      	beq.n	800b39a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	b2da      	uxtb	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	3318      	adds	r3, #24
 800b388:	4619      	mov	r1, r3
 800b38a:	4610      	mov	r0, r2
 800b38c:	f000 ff70 	bl	800c270 <ff_cre_syncobj>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <f_mount+0x7e>
 800b396:	2302      	movs	r3, #2
 800b398:	e01d      	b.n	800b3d6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	4910      	ldr	r1, [pc, #64]	; (800b3e0 <f_mount+0xc4>)
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d002      	beq.n	800b3b0 <f_mount+0x94>
 800b3aa:	79fb      	ldrb	r3, [r7, #7]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d001      	beq.n	800b3b4 <f_mount+0x98>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	e010      	b.n	800b3d6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b3b4:	f107 010c 	add.w	r1, r7, #12
 800b3b8:	f107 0308 	add.w	r3, r7, #8
 800b3bc:	2200      	movs	r2, #0
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7ff fbd4 	bl	800ab6c <find_volume>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	7dfa      	ldrb	r2, [r7, #23]
 800b3cc:	4611      	mov	r1, r2
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fc fee7 	bl	80081a2 <unlock_fs>
 800b3d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3720      	adds	r7, #32
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	20000298 	.word	0x20000298

0800b3e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b3e4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b3e8:	b0a4      	sub	sp, #144	; 0x90
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	60f8      	str	r0, [r7, #12]
 800b3ee:	60b9      	str	r1, [r7, #8]
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d101      	bne.n	800b3fe <f_open+0x1a>
 800b3fa:	2309      	movs	r3, #9
 800b3fc:	e2c6      	b.n	800b98c <f_open+0x5a8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b3fe:	79fb      	ldrb	r3, [r7, #7]
 800b400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b404:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b406:	79fa      	ldrb	r2, [r7, #7]
 800b408:	f107 0114 	add.w	r1, r7, #20
 800b40c:	f107 0308 	add.w	r3, r7, #8
 800b410:	4618      	mov	r0, r3
 800b412:	f7ff fbab 	bl	800ab6c <find_volume>
 800b416:	4603      	mov	r3, r0
 800b418:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 800b41c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b420:	2b00      	cmp	r3, #0
 800b422:	f040 82a3 	bne.w	800b96c <f_open+0x588>
		dj.obj.fs = fs;
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 800b42a:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800b42e:	f000 ff6b 	bl	800c308 <ff_memalloc>
 800b432:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b434:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b436:	2b00      	cmp	r3, #0
 800b438:	d106      	bne.n	800b448 <f_open+0x64>
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2111      	movs	r1, #17
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fc feaf 	bl	80081a2 <unlock_fs>
 800b444:	2311      	movs	r3, #17
 800b446:	e2a1      	b.n	800b98c <f_open+0x5a8>
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b44c:	611a      	str	r2, [r3, #16]
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b452:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800b456:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	f107 0318 	add.w	r3, r7, #24
 800b45e:	4611      	mov	r1, r2
 800b460:	4618      	mov	r0, r3
 800b462:	f7ff fa2d 	bl	800a8c0 <follow_path>
 800b466:	4603      	mov	r3, r0
 800b468:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b46c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b470:	2b00      	cmp	r3, #0
 800b472:	d11a      	bne.n	800b4aa <f_open+0xc6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b474:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b478:	b25b      	sxtb	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	da03      	bge.n	800b486 <f_open+0xa2>
				res = FR_INVALID_NAME;
 800b47e:	2306      	movs	r3, #6
 800b480:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800b484:	e011      	b.n	800b4aa <f_open+0xc6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b486:	79fb      	ldrb	r3, [r7, #7]
 800b488:	f023 0301 	bic.w	r3, r3, #1
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	bf14      	ite	ne
 800b490:	2301      	movne	r3, #1
 800b492:	2300      	moveq	r3, #0
 800b494:	b2db      	uxtb	r3, r3
 800b496:	461a      	mov	r2, r3
 800b498:	f107 0318 	add.w	r3, r7, #24
 800b49c:	4611      	mov	r1, r2
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7fc fe9a 	bl	80081d8 <chk_lock>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b4aa:	79fb      	ldrb	r3, [r7, #7]
 800b4ac:	f003 031c 	and.w	r3, r3, #28
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f000 8109 	beq.w	800b6c8 <f_open+0x2e4>
			if (res != FR_OK) {					/* No file, create new */
 800b4b6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d017      	beq.n	800b4ee <f_open+0x10a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b4be:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b4c2:	2b04      	cmp	r3, #4
 800b4c4:	d10e      	bne.n	800b4e4 <f_open+0x100>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b4c6:	f7fc fee3 	bl	8008290 <enq_lock>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d006      	beq.n	800b4de <f_open+0xfa>
 800b4d0:	f107 0318 	add.w	r3, r7, #24
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fe fe8b 	bl	800a1f0 <dir_register>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	e000      	b.n	800b4e0 <f_open+0xfc>
 800b4de:	2312      	movs	r3, #18
 800b4e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b4e4:	79fb      	ldrb	r3, [r7, #7]
 800b4e6:	f043 0308 	orr.w	r3, r3, #8
 800b4ea:	71fb      	strb	r3, [r7, #7]
 800b4ec:	e010      	b.n	800b510 <f_open+0x12c>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b4ee:	7fbb      	ldrb	r3, [r7, #30]
 800b4f0:	f003 0311 	and.w	r3, r3, #17
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d003      	beq.n	800b500 <f_open+0x11c>
					res = FR_DENIED;
 800b4f8:	2307      	movs	r3, #7
 800b4fa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800b4fe:	e007      	b.n	800b510 <f_open+0x12c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b500:	79fb      	ldrb	r3, [r7, #7]
 800b502:	f003 0304 	and.w	r3, r3, #4
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <f_open+0x12c>
 800b50a:	2308      	movs	r3, #8
 800b50c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b510:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b514:	2b00      	cmp	r3, #0
 800b516:	f040 80f1 	bne.w	800b6fc <f_open+0x318>
 800b51a:	79fb      	ldrb	r3, [r7, #7]
 800b51c:	f003 0308 	and.w	r3, r3, #8
 800b520:	2b00      	cmp	r3, #0
 800b522:	f000 80eb 	beq.w	800b6fc <f_open+0x318>
				dw = GET_FATTIME();
 800b526:	f7fc f8d5 	bl	80076d4 <get_fattime>
 800b52a:	67b8      	str	r0, [r7, #120]	; 0x78
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	2b04      	cmp	r3, #4
 800b532:	f040 8082 	bne.w	800b63a <f_open+0x256>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	695b      	ldr	r3, [r3, #20]
 800b540:	3334      	adds	r3, #52	; 0x34
 800b542:	4618      	mov	r0, r3
 800b544:	f7fc fbec 	bl	8007d20 <ld_dword>
 800b548:	4602      	mov	r2, r0
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	695b      	ldr	r3, [r3, #20]
 800b552:	3338      	adds	r3, #56	; 0x38
 800b554:	4618      	mov	r0, r3
 800b556:	f7fc fc06 	bl	8007d66 <ld_qword>
 800b55a:	4603      	mov	r3, r0
 800b55c:	460c      	mov	r4, r1
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	695b      	ldr	r3, [r3, #20]
 800b568:	3321      	adds	r3, #33	; 0x21
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	f003 0302 	and.w	r3, r3, #2
 800b570:	b2da      	uxtb	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	3308      	adds	r3, #8
 800b582:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b584:	4618      	mov	r0, r3
 800b586:	f7fc fcc6 	bl	8007f16 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	695b      	ldr	r3, [r3, #20]
 800b58e:	3314      	adds	r3, #20
 800b590:	2200      	movs	r2, #0
 800b592:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	695b      	ldr	r3, [r3, #20]
 800b598:	330c      	adds	r3, #12
 800b59a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fc fcba 	bl	8007f16 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	695b      	ldr	r3, [r3, #20]
 800b5a6:	3315      	adds	r3, #21
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	695b      	ldr	r3, [r3, #20]
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	2220      	movs	r2, #32
 800b5b4:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	3334      	adds	r3, #52	; 0x34
 800b5bc:	2100      	movs	r1, #0
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fc fca9 	bl	8007f16 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	695b      	ldr	r3, [r3, #20]
 800b5c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b5cc:	f04f 0200 	mov.w	r2, #0
 800b5d0:	f04f 0300 	mov.w	r3, #0
 800b5d4:	4608      	mov	r0, r1
 800b5d6:	f7fc fcca 	bl	8007f6e <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b5e2:	f04f 0200 	mov.w	r2, #0
 800b5e6:	f04f 0300 	mov.w	r3, #0
 800b5ea:	4608      	mov	r0, r1
 800b5ec:	f7fc fcbf 	bl	8007f6e <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	3321      	adds	r3, #33	; 0x21
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800b5fa:	f107 0318 	add.w	r3, r7, #24
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fe fb43 	bl	8009c8a <store_xdir>
 800b604:	4603      	mov	r3, r0
 800b606:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800b60a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d174      	bne.n	800b6fc <f_open+0x318>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d070      	beq.n	800b6fc <f_open+0x318>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	2200      	movs	r2, #0
 800b622:	4619      	mov	r1, r3
 800b624:	f7fd fc18 	bl	8008e58 <remove_chain>
 800b628:	4603      	mov	r3, r0
 800b62a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	689a      	ldr	r2, [r3, #8]
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	3a01      	subs	r2, #1
 800b636:	61da      	str	r2, [r3, #28]
 800b638:	e060      	b.n	800b6fc <f_open+0x318>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b63a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b63c:	330e      	adds	r3, #14
 800b63e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b640:	4618      	mov	r0, r3
 800b642:	f7fc fc68 	bl	8007f16 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b648:	3316      	adds	r3, #22
 800b64a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7fc fc62 	bl	8007f16 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b654:	330b      	adds	r3, #11
 800b656:	2220      	movs	r2, #32
 800b658:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b65e:	4611      	mov	r1, r2
 800b660:	4618      	mov	r0, r3
 800b662:	f7fd ff84 	bl	800956e <ld_clust>
 800b666:	6778      	str	r0, [r7, #116]	; 0x74
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b66c:	2200      	movs	r2, #0
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fd ff9c 	bl	80095ac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b676:	331c      	adds	r3, #28
 800b678:	2100      	movs	r1, #0
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fc fc4b 	bl	8007f16 <st_dword>
					fs->wflag = 1;
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	2201      	movs	r2, #1
 800b684:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d037      	beq.n	800b6fc <f_open+0x318>
						dw = fs->winsect;
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b690:	67bb      	str	r3, [r7, #120]	; 0x78
						res = remove_chain(&dj.obj, cl, 0);
 800b692:	f107 0318 	add.w	r3, r7, #24
 800b696:	2200      	movs	r2, #0
 800b698:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fd fbdc 	bl	8008e58 <remove_chain>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 800b6a6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d126      	bne.n	800b6fc <f_open+0x318>
							res = move_window(fs, dw);
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fc ff40 	bl	8008538 <move_window>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b6c2:	3a01      	subs	r2, #1
 800b6c4:	61da      	str	r2, [r3, #28]
 800b6c6:	e019      	b.n	800b6fc <f_open+0x318>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b6c8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d115      	bne.n	800b6fc <f_open+0x318>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b6d0:	7fbb      	ldrb	r3, [r7, #30]
 800b6d2:	f003 0310 	and.w	r3, r3, #16
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <f_open+0x2fe>
					res = FR_NO_FILE;
 800b6da:	2304      	movs	r3, #4
 800b6dc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800b6e0:	e00c      	b.n	800b6fc <f_open+0x318>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b6e2:	79fb      	ldrb	r3, [r7, #7]
 800b6e4:	f003 0302 	and.w	r3, r3, #2
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d007      	beq.n	800b6fc <f_open+0x318>
 800b6ec:	7fbb      	ldrb	r3, [r7, #30]
 800b6ee:	f003 0301 	and.w	r3, r3, #1
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d002      	beq.n	800b6fc <f_open+0x318>
						res = FR_DENIED;
 800b6f6:	2307      	movs	r3, #7
 800b6f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b6fc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b700:	2b00      	cmp	r3, #0
 800b702:	d128      	bne.n	800b756 <f_open+0x372>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b704:	79fb      	ldrb	r3, [r7, #7]
 800b706:	f003 0308 	and.w	r3, r3, #8
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d003      	beq.n	800b716 <f_open+0x332>
				mode |= FA_MODIFIED;
 800b70e:	79fb      	ldrb	r3, [r7, #7]
 800b710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b714:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800b71e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b724:	79fb      	ldrb	r3, [r7, #7]
 800b726:	f023 0301 	bic.w	r3, r3, #1
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	bf14      	ite	ne
 800b72e:	2301      	movne	r3, #1
 800b730:	2300      	moveq	r3, #0
 800b732:	b2db      	uxtb	r3, r3
 800b734:	461a      	mov	r2, r3
 800b736:	f107 0318 	add.w	r3, r7, #24
 800b73a:	4611      	mov	r1, r2
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fc fdc9 	bl	80082d4 <inc_lock>
 800b742:	4602      	mov	r2, r0
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d102      	bne.n	800b756 <f_open+0x372>
 800b750:	2302      	movs	r3, #2
 800b752:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b756:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f040 8103 	bne.w	800b966 <f_open+0x582>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	2b04      	cmp	r3, #4
 800b766:	d12b      	bne.n	800b7c0 <f_open+0x3dc>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800b768:	6a3a      	ldr	r2, [r7, #32]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800b76e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800b772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b776:	7ffa      	ldrb	r2, [r7, #31]
 800b778:	431a      	orrs	r2, r3
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800b77e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	695b      	ldr	r3, [r3, #20]
 800b788:	3334      	adds	r3, #52	; 0x34
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fc fac8 	bl	8007d20 <ld_dword>
 800b790:	4602      	mov	r2, r0
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	3338      	adds	r3, #56	; 0x38
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fc fae2 	bl	8007d66 <ld_qword>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	3321      	adds	r3, #33	; 0x21
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	f003 0302 	and.w	r3, r3, #2
 800b7b8:	b2da      	uxtb	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	71da      	strb	r2, [r3, #7]
 800b7be:	e013      	b.n	800b7e8 <f_open+0x404>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fd fed1 	bl	800956e <ld_clust>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b7d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7d4:	331c      	adds	r3, #28
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fc faa2 	bl	8007d20 <ld_dword>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	f04f 0400 	mov.w	r4, #0
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	88da      	ldrh	r2, [r3, #6]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	79fa      	ldrb	r2, [r7, #7]
 800b7fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	f04f 0300 	mov.w	r3, #0
 800b812:	f04f 0400 	mov.w	r4, #0
 800b816:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	3350      	adds	r3, #80	; 0x50
 800b81e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b822:	2100      	movs	r1, #0
 800b824:	4618      	mov	r0, r3
 800b826:	f7fc fc4a 	bl	80080be <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b82a:	79fb      	ldrb	r3, [r7, #7]
 800b82c:	f003 0320 	and.w	r3, r3, #32
 800b830:	2b00      	cmp	r3, #0
 800b832:	f000 8098 	beq.w	800b966 <f_open+0x582>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800b83c:	4323      	orrs	r3, r4
 800b83e:	f000 8092 	beq.w	800b966 <f_open+0x582>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	895b      	ldrh	r3, [r3, #10]
 800b852:	461a      	mov	r2, r3
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	899b      	ldrh	r3, [r3, #12]
 800b858:	fb03 f302 	mul.w	r3, r3, r2
 800b85c:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800b86c:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 800b870:	e024      	b.n	800b8bc <f_open+0x4d8>
					clst = get_fat(&fp->obj, clst);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fc ff1b 	bl	80086b4 <get_fat>
 800b87e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 800b882:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b886:	2b01      	cmp	r3, #1
 800b888:	d802      	bhi.n	800b890 <f_open+0x4ac>
 800b88a:	2302      	movs	r3, #2
 800b88c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b898:	d102      	bne.n	800b8a0 <f_open+0x4bc>
 800b89a:	2301      	movs	r3, #1
 800b89c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b8a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8a2:	469b      	mov	fp, r3
 800b8a4:	f04f 0c00 	mov.w	ip, #0
 800b8a8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4614      	mov	r4, r2
 800b8b0:	ebb3 030b 	subs.w	r3, r3, fp
 800b8b4:	eb64 040c 	sbc.w	r4, r4, ip
 800b8b8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 800b8bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d109      	bne.n	800b8d8 <f_open+0x4f4>
 800b8c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	f04f 0200 	mov.w	r2, #0
 800b8cc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800b8d0:	42a2      	cmp	r2, r4
 800b8d2:	bf08      	it	eq
 800b8d4:	4299      	cmpeq	r1, r3
 800b8d6:	d3cc      	bcc.n	800b872 <f_open+0x48e>
				}
				fp->clust = clst;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b8de:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b8e0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d13e      	bne.n	800b966 <f_open+0x582>
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	899b      	ldrh	r3, [r3, #12]
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	f04f 0400 	mov.w	r4, #0
 800b8f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	4623      	mov	r3, r4
 800b8fa:	f7f4 fca1 	bl	8000240 <__aeabi_uldivmod>
 800b8fe:	461c      	mov	r4, r3
 800b900:	4613      	mov	r3, r2
 800b902:	4323      	orrs	r3, r4
 800b904:	d02f      	beq.n	800b966 <f_open+0x582>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fc feb1 	bl	8008674 <clust2sect>
 800b912:	66f8      	str	r0, [r7, #108]	; 0x6c
 800b914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b916:	2b00      	cmp	r3, #0
 800b918:	d103      	bne.n	800b922 <f_open+0x53e>
						res = FR_INT_ERR;
 800b91a:	2302      	movs	r3, #2
 800b91c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800b920:	e021      	b.n	800b966 <f_open+0x582>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	899b      	ldrh	r3, [r3, #12]
 800b926:	b29b      	uxth	r3, r3
 800b928:	f04f 0400 	mov.w	r4, #0
 800b92c:	461a      	mov	r2, r3
 800b92e:	4623      	mov	r3, r4
 800b930:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b934:	f7f4 fc84 	bl	8000240 <__aeabi_uldivmod>
 800b938:	4603      	mov	r3, r0
 800b93a:	460c      	mov	r4, r1
 800b93c:	461a      	mov	r2, r3
 800b93e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b940:	441a      	add	r2, r3
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	7858      	ldrb	r0, [r3, #1]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b954:	2301      	movs	r3, #1
 800b956:	f7fc f96d 	bl	8007c34 <disk_read>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <f_open+0x582>
 800b960:	2301      	movs	r3, #1
 800b962:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 800b966:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800b968:	f000 fcda 	bl	800c320 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b96c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b970:	2b00      	cmp	r3, #0
 800b972:	d002      	beq.n	800b97a <f_open+0x596>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800b980:	4611      	mov	r1, r2
 800b982:	4618      	mov	r0, r3
 800b984:	f7fc fc0d 	bl	80081a2 <unlock_fs>
 800b988:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3790      	adds	r7, #144	; 0x90
 800b990:	46bd      	mov	sp, r7
 800b992:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b996 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b996:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b998:	b08d      	sub	sp, #52	; 0x34
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	60f8      	str	r0, [r7, #12]
 800b99e:	60b9      	str	r1, [r7, #8]
 800b9a0:	607a      	str	r2, [r7, #4]
 800b9a2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f107 0210 	add.w	r2, r7, #16
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff fc68 	bl	800b28c <validate>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b9c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d108      	bne.n	800b9dc <f_write+0x46>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b9d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b9d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d009      	beq.n	800b9f0 <f_write+0x5a>
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b9e2:	4611      	mov	r1, r2
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fc fbdc 	bl	80081a2 <unlock_fs>
 800b9ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9ee:	e1a3      	b.n	800bd38 <f_write+0x3a2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b9f6:	f003 0302 	and.w	r3, r3, #2
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d106      	bne.n	800ba0c <f_write+0x76>
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	2107      	movs	r1, #7
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fc fbcd 	bl	80081a2 <unlock_fs>
 800ba08:	2307      	movs	r3, #7
 800ba0a:	e195      	b.n	800bd38 <f_write+0x3a2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	2b04      	cmp	r3, #4
 800ba12:	f000 817c 	beq.w	800bd0e <f_write+0x378>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	441a      	add	r2, r3
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	f080 8170 	bcs.w	800bd0e <f_write+0x378>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800ba34:	43db      	mvns	r3, r3
 800ba36:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ba38:	e169      	b.n	800bd0e <f_write+0x378>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	899b      	ldrh	r3, [r3, #12]
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	f04f 0400 	mov.w	r4, #0
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	4623      	mov	r3, r4
 800ba4e:	f7f4 fbf7 	bl	8000240 <__aeabi_uldivmod>
 800ba52:	461c      	mov	r4, r3
 800ba54:	4613      	mov	r3, r2
 800ba56:	4323      	orrs	r3, r4
 800ba58:	f040 80fa 	bne.w	800bc50 <f_write+0x2ba>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	899b      	ldrh	r3, [r3, #12]
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	f04f 0400 	mov.w	r4, #0
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	4623      	mov	r3, r4
 800ba70:	f7f4 fbe6 	bl	8000240 <__aeabi_uldivmod>
 800ba74:	4603      	mov	r3, r0
 800ba76:	460c      	mov	r4, r1
 800ba78:	461a      	mov	r2, r3
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	895b      	ldrh	r3, [r3, #10]
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	4013      	ands	r3, r2
 800ba82:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d144      	bne.n	800bb14 <f_write+0x17e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800ba90:	4323      	orrs	r3, r4
 800ba92:	d10c      	bne.n	800baae <f_write+0x118>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ba9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10e      	bne.n	800babe <f_write+0x128>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2100      	movs	r1, #0
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fd fa8b 	bl	8008fc0 <create_chain>
 800baaa:	62b8      	str	r0, [r7, #40]	; 0x28
 800baac:	e007      	b.n	800babe <f_write+0x128>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab4:	4619      	mov	r1, r3
 800bab6:	4610      	mov	r0, r2
 800bab8:	f7fd fa82 	bl	8008fc0 <create_chain>
 800babc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800babe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f000 8129 	beq.w	800bd18 <f_write+0x382>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d10a      	bne.n	800bae2 <f_write+0x14c>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2202      	movs	r2, #2
 800bad0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	2102      	movs	r1, #2
 800bad8:	4618      	mov	r0, r3
 800bada:	f7fc fb62 	bl	80081a2 <unlock_fs>
 800bade:	2302      	movs	r3, #2
 800bae0:	e12a      	b.n	800bd38 <f_write+0x3a2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae8:	d10a      	bne.n	800bb00 <f_write+0x16a>
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2201      	movs	r2, #1
 800baee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	2101      	movs	r1, #1
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fc fb53 	bl	80081a2 <unlock_fs>
 800bafc:	2301      	movs	r3, #1
 800bafe:	e11b      	b.n	800bd38 <f_write+0x3a2>
				fp->clust = clst;			/* Update current cluster */
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb04:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d102      	bne.n	800bb14 <f_write+0x17e>
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb12:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb1a:	b25b      	sxtb	r3, r3
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	da20      	bge.n	800bb62 <f_write+0x1cc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	7858      	ldrb	r0, [r3, #1]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb2e:	2301      	movs	r3, #1
 800bb30:	f7fc f8a0 	bl	8007c74 <disk_write>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00a      	beq.n	800bb50 <f_write+0x1ba>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	2101      	movs	r1, #1
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fc fb2b 	bl	80081a2 <unlock_fs>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e0f3      	b.n	800bd38 <f_write+0x3a2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bb62:	693a      	ldr	r2, [r7, #16]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb68:	4619      	mov	r1, r3
 800bb6a:	4610      	mov	r0, r2
 800bb6c:	f7fc fd82 	bl	8008674 <clust2sect>
 800bb70:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10a      	bne.n	800bb8e <f_write+0x1f8>
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2202      	movs	r2, #2
 800bb7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	2102      	movs	r1, #2
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fc fb0c 	bl	80081a2 <unlock_fs>
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	e0d4      	b.n	800bd38 <f_write+0x3a2>
			sect += csect;
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	4413      	add	r3, r2
 800bb94:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	899b      	ldrh	r3, [r3, #12]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bba2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d029      	beq.n	800bbfe <f_write+0x268>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bbaa:	69ba      	ldr	r2, [r7, #24]
 800bbac:	6a3b      	ldr	r3, [r7, #32]
 800bbae:	4413      	add	r3, r2
 800bbb0:	693a      	ldr	r2, [r7, #16]
 800bbb2:	8952      	ldrh	r2, [r2, #10]
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d905      	bls.n	800bbc4 <f_write+0x22e>
					cc = fs->csize - csect;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	895b      	ldrh	r3, [r3, #10]
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	1ad3      	subs	r3, r2, r3
 800bbc2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	7858      	ldrb	r0, [r3, #1]
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	69f9      	ldr	r1, [r7, #28]
 800bbce:	f7fc f851 	bl	8007c74 <disk_write>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00a      	beq.n	800bbee <f_write+0x258>
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	2101      	movs	r1, #1
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fc fadc 	bl	80081a2 <unlock_fs>
 800bbea:	2301      	movs	r3, #1
 800bbec:	e0a4      	b.n	800bd38 <f_write+0x3a2>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	899b      	ldrh	r3, [r3, #12]
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	fb02 f303 	mul.w	r3, r2, r3
 800bbfa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bbfc:	e05d      	b.n	800bcba <f_write+0x324>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc02:	697a      	ldr	r2, [r7, #20]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d020      	beq.n	800bc4a <f_write+0x2b4>
				fp->fptr < fp->obj.objsize &&
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bc14:	42a2      	cmp	r2, r4
 800bc16:	bf08      	it	eq
 800bc18:	4299      	cmpeq	r1, r3
 800bc1a:	d216      	bcs.n	800bc4a <f_write+0x2b4>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	7858      	ldrb	r0, [r3, #1]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800bc26:	2301      	movs	r3, #1
 800bc28:	697a      	ldr	r2, [r7, #20]
 800bc2a:	f7fc f803 	bl	8007c34 <disk_read>
 800bc2e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00a      	beq.n	800bc4a <f_write+0x2b4>
					ABORT(fs, FR_DISK_ERR);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	2101      	movs	r1, #1
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fc faae 	bl	80081a2 <unlock_fs>
 800bc46:	2301      	movs	r3, #1
 800bc48:	e076      	b.n	800bd38 <f_write+0x3a2>
			}
#endif
			fp->sect = sect;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	899b      	ldrh	r3, [r3, #12]
 800bc54:	4618      	mov	r0, r3
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	8992      	ldrh	r2, [r2, #12]
 800bc60:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc64:	fb02 f201 	mul.w	r2, r2, r1
 800bc68:	1a9b      	subs	r3, r3, r2
 800bc6a:	1ac3      	subs	r3, r0, r3
 800bc6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bc6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d901      	bls.n	800bc7a <f_write+0x2e4>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	899b      	ldrh	r3, [r3, #12]
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	f04f 0400 	mov.w	r4, #0
 800bc90:	461a      	mov	r2, r3
 800bc92:	4623      	mov	r3, r4
 800bc94:	f7f4 fad4 	bl	8000240 <__aeabi_uldivmod>
 800bc98:	461c      	mov	r4, r3
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	442b      	add	r3, r5
 800bc9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bca0:	69f9      	ldr	r1, [r7, #28]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fc f9ea 	bl	800807c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bcae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bcba:	69fa      	ldr	r2, [r7, #28]
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbe:	4413      	add	r3, r2
 800bcc0:	61fb      	str	r3, [r7, #28]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcca:	461d      	mov	r5, r3
 800bccc:	f04f 0600 	mov.w	r6, #0
 800bcd0:	186b      	adds	r3, r5, r1
 800bcd2:	eb46 0402 	adc.w	r4, r6, r2
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 800bce8:	4294      	cmp	r4, r2
 800bcea:	bf08      	it	eq
 800bcec:	428b      	cmpeq	r3, r1
 800bcee:	d201      	bcs.n	800bcf4 <f_write+0x35e>
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4614      	mov	r4, r2
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd00:	441a      	add	r2, r3
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	601a      	str	r2, [r3, #0]
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f47f ae92 	bne.w	800ba3a <f_write+0xa4>
 800bd16:	e000      	b.n	800bd1a <f_write+0x384>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bd18:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd24:	b2da      	uxtb	r2, r3
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	2100      	movs	r1, #0
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7fc fa36 	bl	80081a2 <unlock_fs>
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3734      	adds	r7, #52	; 0x34
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd40 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bd40:	b590      	push	{r4, r7, lr}
 800bd42:	b09d      	sub	sp, #116	; 0x74
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800bd4e:	4611      	mov	r1, r2
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7ff fa9b 	bl	800b28c <validate>
 800bd56:	4603      	mov	r3, r0
 800bd58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800bd5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	f040 8127 	bne.w	800bfb4 <f_sync+0x274>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 811f 	beq.w	800bfb4 <f_sync+0x274>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd7c:	b25b      	sxtb	r3, r3
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	da1c      	bge.n	800bdbc <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bd82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd84:	7858      	ldrb	r0, [r3, #1]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd90:	2301      	movs	r3, #1
 800bd92:	f7fb ff6f 	bl	8007c74 <disk_write>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d006      	beq.n	800bdaa <f_sync+0x6a>
 800bd9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd9e:	2101      	movs	r1, #1
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fc f9fe 	bl	80081a2 <unlock_fs>
 800bda6:	2301      	movs	r3, #1
 800bda8:	e10d      	b.n	800bfc6 <f_sync+0x286>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bdb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdb4:	b2da      	uxtb	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bdbc:	f7fb fc8a 	bl	80076d4 <get_fattime>
 800bdc0:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800bdc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b04      	cmp	r3, #4
 800bdc8:	f040 80a9 	bne.w	800bf1e <f_sync+0x1de>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fc ffe2 	bl	8008d98 <fill_first_frag>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800bdda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10a      	bne.n	800bdf8 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdec:	4619      	mov	r1, r3
 800bdee:	f7fd f802 	bl	8008df6 <fill_last_frag>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 800bdf8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f040 80d9 	bne.w	800bfb4 <f_sync+0x274>
					INIT_NAMBUF(fs);
 800be02:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800be06:	f000 fa7f 	bl	800c308 <ff_memalloc>
 800be0a:	6638      	str	r0, [r7, #96]	; 0x60
 800be0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d106      	bne.n	800be20 <f_sync+0xe0>
 800be12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be14:	2111      	movs	r1, #17
 800be16:	4618      	mov	r0, r3
 800be18:	f7fc f9c3 	bl	80081a2 <unlock_fs>
 800be1c:	2311      	movs	r3, #17
 800be1e:	e0d2      	b.n	800bfc6 <f_sync+0x286>
 800be20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be24:	611a      	str	r2, [r3, #16]
 800be26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be2a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800be2e:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	f107 0308 	add.w	r3, r7, #8
 800be36:	4611      	mov	r1, r2
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fd fee9 	bl	8009c10 <load_obj_dir>
 800be3e:	4603      	mov	r3, r0
 800be40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 800be44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d164      	bne.n	800bf16 <f_sync+0x1d6>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800be4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be4e:	695b      	ldr	r3, [r3, #20]
 800be50:	3304      	adds	r3, #4
 800be52:	781a      	ldrb	r2, [r3, #0]
 800be54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be56:	695b      	ldr	r3, [r3, #20]
 800be58:	3304      	adds	r3, #4
 800be5a:	f042 0220 	orr.w	r2, r2, #32
 800be5e:	b2d2      	uxtb	r2, r2
 800be60:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	79da      	ldrb	r2, [r3, #7]
 800be66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be68:	695b      	ldr	r3, [r3, #20]
 800be6a:	3321      	adds	r3, #33	; 0x21
 800be6c:	f042 0201 	orr.w	r2, r2, #1
 800be70:	b2d2      	uxtb	r2, r2
 800be72:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800be74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be76:	695b      	ldr	r3, [r3, #20]
 800be78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	4619      	mov	r1, r3
 800be82:	4610      	mov	r0, r2
 800be84:	f7fc f847 	bl	8007f16 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800be88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800be96:	461a      	mov	r2, r3
 800be98:	4623      	mov	r3, r4
 800be9a:	4608      	mov	r0, r1
 800be9c:	f7fc f867 	bl	8007f6e <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800bea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800beae:	461a      	mov	r2, r3
 800beb0:	4623      	mov	r3, r4
 800beb2:	4608      	mov	r0, r1
 800beb4:	f7fc f85b 	bl	8007f6e <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800beb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beba:	695b      	ldr	r3, [r3, #20]
 800bebc:	330c      	adds	r3, #12
 800bebe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7fc f828 	bl	8007f16 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800bec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bec8:	695b      	ldr	r3, [r3, #20]
 800beca:	3315      	adds	r3, #21
 800becc:	2200      	movs	r2, #0
 800bece:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800bed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bed2:	695b      	ldr	r3, [r3, #20]
 800bed4:	3310      	adds	r3, #16
 800bed6:	2100      	movs	r1, #0
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fc f81c 	bl	8007f16 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800bede:	f107 0308 	add.w	r3, r7, #8
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fd fed1 	bl	8009c8a <store_xdir>
 800bee8:	4603      	mov	r3, r0
 800beea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 800beee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d10f      	bne.n	800bf16 <f_sync+0x1d6>
							res = sync_fs(fs);
 800bef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bef8:	4618      	mov	r0, r3
 800befa:	f7fc fb4b 	bl	8008594 <sync_fs>
 800befe:	4603      	mov	r3, r0
 800bf00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 800bf16:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800bf18:	f000 fa02 	bl	800c320 <ff_memfree>
 800bf1c:	e04a      	b.n	800bfb4 <f_sync+0x274>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bf1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf24:	4619      	mov	r1, r3
 800bf26:	4610      	mov	r0, r2
 800bf28:	f7fc fb06 	bl	8008538 <move_window>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800bf32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d13c      	bne.n	800bfb4 <f_sync+0x274>
					dir = fp->dir_ptr;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf3e:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bf40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf42:	330b      	adds	r3, #11
 800bf44:	781a      	ldrb	r2, [r3, #0]
 800bf46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf48:	330b      	adds	r3, #11
 800bf4a:	f042 0220 	orr.w	r2, r2, #32
 800bf4e:	b2d2      	uxtb	r2, r2
 800bf50:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6818      	ldr	r0, [r3, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bf5e:	f7fd fb25 	bl	80095ac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bf62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf64:	f103 021c 	add.w	r2, r3, #28
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4610      	mov	r0, r2
 800bf72:	f7fb ffd0 	bl	8007f16 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bf76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf78:	3316      	adds	r3, #22
 800bf7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fb ffca 	bl	8007f16 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bf82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf84:	3312      	adds	r3, #18
 800bf86:	2100      	movs	r1, #0
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7fb ffa9 	bl	8007ee0 <st_word>
					fs->wflag = 1;
 800bf8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf90:	2201      	movs	r2, #1
 800bf92:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bf94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fc fafc 	bl	8008594 <sync_fs>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfac:	b2da      	uxtb	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bfb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfb6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800bfba:	4611      	mov	r1, r2
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fc f8f0 	bl	80081a2 <unlock_fs>
 800bfc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3774      	adds	r7, #116	; 0x74
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd90      	pop	{r4, r7, pc}

0800bfce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b084      	sub	sp, #16
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7ff feb2 	bl	800bd40 <f_sync>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bfe0:	7bfb      	ldrb	r3, [r7, #15]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d11d      	bne.n	800c022 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f107 0208 	add.w	r2, r7, #8
 800bfec:	4611      	mov	r1, r2
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7ff f94c 	bl	800b28c <validate>
 800bff4:	4603      	mov	r3, r0
 800bff6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bff8:	7bfb      	ldrb	r3, [r7, #15]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d111      	bne.n	800c022 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c002:	4618      	mov	r0, r3
 800c004:	f7fc f9f4 	bl	80083f0 <dec_lock>
 800c008:	4603      	mov	r3, r0
 800c00a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c00c:	7bfb      	ldrb	r3, [r7, #15]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d102      	bne.n	800c018 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2100      	movs	r1, #0
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fc f8c0 	bl	80081a2 <unlock_fs>
#endif
		}
	}
	return res;
 800c022:	7bfb      	ldrb	r3, [r7, #15]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b087      	sub	sp, #28
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	4613      	mov	r3, r2
 800c038:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c03a:	2301      	movs	r3, #1
 800c03c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c03e:	2300      	movs	r3, #0
 800c040:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c042:	4b1f      	ldr	r3, [pc, #124]	; (800c0c0 <FATFS_LinkDriverEx+0x94>)
 800c044:	7a5b      	ldrb	r3, [r3, #9]
 800c046:	b2db      	uxtb	r3, r3
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d131      	bne.n	800c0b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c04c:	4b1c      	ldr	r3, [pc, #112]	; (800c0c0 <FATFS_LinkDriverEx+0x94>)
 800c04e:	7a5b      	ldrb	r3, [r3, #9]
 800c050:	b2db      	uxtb	r3, r3
 800c052:	461a      	mov	r2, r3
 800c054:	4b1a      	ldr	r3, [pc, #104]	; (800c0c0 <FATFS_LinkDriverEx+0x94>)
 800c056:	2100      	movs	r1, #0
 800c058:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c05a:	4b19      	ldr	r3, [pc, #100]	; (800c0c0 <FATFS_LinkDriverEx+0x94>)
 800c05c:	7a5b      	ldrb	r3, [r3, #9]
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	4a17      	ldr	r2, [pc, #92]	; (800c0c0 <FATFS_LinkDriverEx+0x94>)
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	68fa      	ldr	r2, [r7, #12]
 800c068:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c06a:	4b15      	ldr	r3, [pc, #84]	; (800c0c0 <FATFS_LinkDriverEx+0x94>)
 800c06c:	7a5b      	ldrb	r3, [r3, #9]
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	461a      	mov	r2, r3
 800c072:	4b13      	ldr	r3, [pc, #76]	; (800c0c0 <FATFS_LinkDriverEx+0x94>)
 800c074:	4413      	add	r3, r2
 800c076:	79fa      	ldrb	r2, [r7, #7]
 800c078:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c07a:	4b11      	ldr	r3, [pc, #68]	; (800c0c0 <FATFS_LinkDriverEx+0x94>)
 800c07c:	7a5b      	ldrb	r3, [r3, #9]
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	1c5a      	adds	r2, r3, #1
 800c082:	b2d1      	uxtb	r1, r2
 800c084:	4a0e      	ldr	r2, [pc, #56]	; (800c0c0 <FATFS_LinkDriverEx+0x94>)
 800c086:	7251      	strb	r1, [r2, #9]
 800c088:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c08a:	7dbb      	ldrb	r3, [r7, #22]
 800c08c:	3330      	adds	r3, #48	; 0x30
 800c08e:	b2da      	uxtb	r2, r3
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	3301      	adds	r3, #1
 800c098:	223a      	movs	r2, #58	; 0x3a
 800c09a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	3302      	adds	r3, #2
 800c0a0:	222f      	movs	r2, #47	; 0x2f
 800c0a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	3303      	adds	r3, #3
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	371c      	adds	r7, #28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	200002c0 	.word	0x200002c0

0800c0c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f7ff ffaa 	bl	800c02c <FATFS_LinkDriverEx>
 800c0d8:	4603      	mov	r3, r0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
	...

0800c0e4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	6039      	str	r1, [r7, #0]
 800c0ee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c0f0:	88fb      	ldrh	r3, [r7, #6]
 800c0f2:	2b7f      	cmp	r3, #127	; 0x7f
 800c0f4:	d802      	bhi.n	800c0fc <ff_convert+0x18>
		c = chr;
 800c0f6:	88fb      	ldrh	r3, [r7, #6]
 800c0f8:	81fb      	strh	r3, [r7, #14]
 800c0fa:	e025      	b.n	800c148 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00b      	beq.n	800c11a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c102:	88fb      	ldrh	r3, [r7, #6]
 800c104:	2bff      	cmp	r3, #255	; 0xff
 800c106:	d805      	bhi.n	800c114 <ff_convert+0x30>
 800c108:	88fb      	ldrh	r3, [r7, #6]
 800c10a:	3b80      	subs	r3, #128	; 0x80
 800c10c:	4a12      	ldr	r2, [pc, #72]	; (800c158 <ff_convert+0x74>)
 800c10e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c112:	e000      	b.n	800c116 <ff_convert+0x32>
 800c114:	2300      	movs	r3, #0
 800c116:	81fb      	strh	r3, [r7, #14]
 800c118:	e016      	b.n	800c148 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c11a:	2300      	movs	r3, #0
 800c11c:	81fb      	strh	r3, [r7, #14]
 800c11e:	e009      	b.n	800c134 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c120:	89fb      	ldrh	r3, [r7, #14]
 800c122:	4a0d      	ldr	r2, [pc, #52]	; (800c158 <ff_convert+0x74>)
 800c124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c128:	88fa      	ldrh	r2, [r7, #6]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d006      	beq.n	800c13c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c12e:	89fb      	ldrh	r3, [r7, #14]
 800c130:	3301      	adds	r3, #1
 800c132:	81fb      	strh	r3, [r7, #14]
 800c134:	89fb      	ldrh	r3, [r7, #14]
 800c136:	2b7f      	cmp	r3, #127	; 0x7f
 800c138:	d9f2      	bls.n	800c120 <ff_convert+0x3c>
 800c13a:	e000      	b.n	800c13e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c13c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c13e:	89fb      	ldrh	r3, [r7, #14]
 800c140:	3380      	adds	r3, #128	; 0x80
 800c142:	b29b      	uxth	r3, r3
 800c144:	b2db      	uxtb	r3, r3
 800c146:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c148:	89fb      	ldrh	r3, [r7, #14]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3714      	adds	r7, #20
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	0800f25c 	.word	0x0800f25c

0800c15c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b087      	sub	sp, #28
 800c160:	af00      	add	r7, sp, #0
 800c162:	4603      	mov	r3, r0
 800c164:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c166:	88fb      	ldrh	r3, [r7, #6]
 800c168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c16c:	d201      	bcs.n	800c172 <ff_wtoupper+0x16>
 800c16e:	4b3e      	ldr	r3, [pc, #248]	; (800c268 <ff_wtoupper+0x10c>)
 800c170:	e000      	b.n	800c174 <ff_wtoupper+0x18>
 800c172:	4b3e      	ldr	r3, [pc, #248]	; (800c26c <ff_wtoupper+0x110>)
 800c174:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	1c9a      	adds	r2, r3, #2
 800c17a:	617a      	str	r2, [r7, #20]
 800c17c:	881b      	ldrh	r3, [r3, #0]
 800c17e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c180:	8a7b      	ldrh	r3, [r7, #18]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d068      	beq.n	800c258 <ff_wtoupper+0xfc>
 800c186:	88fa      	ldrh	r2, [r7, #6]
 800c188:	8a7b      	ldrh	r3, [r7, #18]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d364      	bcc.n	800c258 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	1c9a      	adds	r2, r3, #2
 800c192:	617a      	str	r2, [r7, #20]
 800c194:	881b      	ldrh	r3, [r3, #0]
 800c196:	823b      	strh	r3, [r7, #16]
 800c198:	8a3b      	ldrh	r3, [r7, #16]
 800c19a:	0a1b      	lsrs	r3, r3, #8
 800c19c:	81fb      	strh	r3, [r7, #14]
 800c19e:	8a3b      	ldrh	r3, [r7, #16]
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c1a4:	88fa      	ldrh	r2, [r7, #6]
 800c1a6:	8a79      	ldrh	r1, [r7, #18]
 800c1a8:	8a3b      	ldrh	r3, [r7, #16]
 800c1aa:	440b      	add	r3, r1
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	da49      	bge.n	800c244 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c1b0:	89fb      	ldrh	r3, [r7, #14]
 800c1b2:	2b08      	cmp	r3, #8
 800c1b4:	d84f      	bhi.n	800c256 <ff_wtoupper+0xfa>
 800c1b6:	a201      	add	r2, pc, #4	; (adr r2, 800c1bc <ff_wtoupper+0x60>)
 800c1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1bc:	0800c1e1 	.word	0x0800c1e1
 800c1c0:	0800c1f3 	.word	0x0800c1f3
 800c1c4:	0800c209 	.word	0x0800c209
 800c1c8:	0800c211 	.word	0x0800c211
 800c1cc:	0800c219 	.word	0x0800c219
 800c1d0:	0800c221 	.word	0x0800c221
 800c1d4:	0800c229 	.word	0x0800c229
 800c1d8:	0800c231 	.word	0x0800c231
 800c1dc:	0800c239 	.word	0x0800c239
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c1e0:	88fa      	ldrh	r2, [r7, #6]
 800c1e2:	8a7b      	ldrh	r3, [r7, #18]
 800c1e4:	1ad3      	subs	r3, r2, r3
 800c1e6:	005b      	lsls	r3, r3, #1
 800c1e8:	697a      	ldr	r2, [r7, #20]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	80fb      	strh	r3, [r7, #6]
 800c1f0:	e027      	b.n	800c242 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c1f2:	88fa      	ldrh	r2, [r7, #6]
 800c1f4:	8a7b      	ldrh	r3, [r7, #18]
 800c1f6:	1ad3      	subs	r3, r2, r3
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	f003 0301 	and.w	r3, r3, #1
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	88fa      	ldrh	r2, [r7, #6]
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	80fb      	strh	r3, [r7, #6]
 800c206:	e01c      	b.n	800c242 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c208:	88fb      	ldrh	r3, [r7, #6]
 800c20a:	3b10      	subs	r3, #16
 800c20c:	80fb      	strh	r3, [r7, #6]
 800c20e:	e018      	b.n	800c242 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c210:	88fb      	ldrh	r3, [r7, #6]
 800c212:	3b20      	subs	r3, #32
 800c214:	80fb      	strh	r3, [r7, #6]
 800c216:	e014      	b.n	800c242 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c218:	88fb      	ldrh	r3, [r7, #6]
 800c21a:	3b30      	subs	r3, #48	; 0x30
 800c21c:	80fb      	strh	r3, [r7, #6]
 800c21e:	e010      	b.n	800c242 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c220:	88fb      	ldrh	r3, [r7, #6]
 800c222:	3b1a      	subs	r3, #26
 800c224:	80fb      	strh	r3, [r7, #6]
 800c226:	e00c      	b.n	800c242 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c228:	88fb      	ldrh	r3, [r7, #6]
 800c22a:	3308      	adds	r3, #8
 800c22c:	80fb      	strh	r3, [r7, #6]
 800c22e:	e008      	b.n	800c242 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c230:	88fb      	ldrh	r3, [r7, #6]
 800c232:	3b50      	subs	r3, #80	; 0x50
 800c234:	80fb      	strh	r3, [r7, #6]
 800c236:	e004      	b.n	800c242 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c238:	88fb      	ldrh	r3, [r7, #6]
 800c23a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c23e:	80fb      	strh	r3, [r7, #6]
 800c240:	bf00      	nop
			}
			break;
 800c242:	e008      	b.n	800c256 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c244:	89fb      	ldrh	r3, [r7, #14]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d195      	bne.n	800c176 <ff_wtoupper+0x1a>
 800c24a:	8a3b      	ldrh	r3, [r7, #16]
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	697a      	ldr	r2, [r7, #20]
 800c250:	4413      	add	r3, r2
 800c252:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c254:	e78f      	b.n	800c176 <ff_wtoupper+0x1a>
			break;
 800c256:	bf00      	nop
	}

	return chr;
 800c258:	88fb      	ldrh	r3, [r7, #6]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	371c      	adds	r7, #28
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	0800f35c 	.word	0x0800f35c
 800c26c:	0800f550 	.word	0x0800f550

0800c270 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	4603      	mov	r3, r0
 800c278:	6039      	str	r1, [r7, #0]
 800c27a:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800c27c:	2300      	movs	r3, #0
 800c27e:	60fb      	str	r3, [r7, #12]
 800c280:	2300      	movs	r3, #0
 800c282:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c284:	f107 030c 	add.w	r3, r7, #12
 800c288:	2101      	movs	r1, #1
 800c28a:	4618      	mov	r0, r3
 800c28c:	f000 f900 	bl	800c490 <osSemaphoreCreate>
 800c290:	4602      	mov	r2, r0
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	bf14      	ite	ne
 800c29e:	2301      	movne	r3, #1
 800c2a0:	2300      	moveq	r3, #0
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	617b      	str	r3, [r7, #20]

    return ret;
 800c2a6:	697b      	ldr	r3, [r7, #20]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3718      	adds	r7, #24
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f9a1 	bl	800c600 <osSemaphoreDelete>
#endif
    return 1;
 800c2be:	2301      	movs	r3, #1
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c2d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 f90d 	bl	800c4f8 <osSemaphoreWait>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d101      	bne.n	800c2e8 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b082      	sub	sp, #8
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f94a 	bl	800c594 <osSemaphoreRelease>
#endif
}
 800c300:	bf00      	nop
 800c302:	3708      	adds	r7, #8
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f002 fcdb 	bl	800eccc <pvPortMalloc>
 800c316:	4603      	mov	r3, r0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f002 fd97 	bl	800ee5c <vPortFree>
}
 800c32e:	bf00      	nop
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c336:	b480      	push	{r7}
 800c338:	b085      	sub	sp, #20
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	4603      	mov	r3, r0
 800c33e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c340:	2300      	movs	r3, #0
 800c342:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c348:	2b84      	cmp	r3, #132	; 0x84
 800c34a:	d005      	beq.n	800c358 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c34c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	4413      	add	r3, r2
 800c354:	3303      	adds	r3, #3
 800c356:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c358:	68fb      	ldr	r3, [r7, #12]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3714      	adds	r7, #20
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr

0800c366 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c366:	b480      	push	{r7}
 800c368:	b083      	sub	sp, #12
 800c36a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c36c:	f3ef 8305 	mrs	r3, IPSR
 800c370:	607b      	str	r3, [r7, #4]
  return(result);
 800c372:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c374:	2b00      	cmp	r3, #0
 800c376:	bf14      	ite	ne
 800c378:	2301      	movne	r3, #1
 800c37a:	2300      	moveq	r3, #0
 800c37c:	b2db      	uxtb	r3, r3
}
 800c37e:	4618      	mov	r0, r3
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c38e:	f001 fc0d 	bl	800dbac <vTaskStartScheduler>
  
  return osOK;
 800c392:	2300      	movs	r3, #0
}
 800c394:	4618      	mov	r0, r3
 800c396:	bd80      	pop	{r7, pc}

0800c398 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c39c:	f002 f830 	bl	800e400 <xTaskGetSchedulerState>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d101      	bne.n	800c3aa <osKernelRunning+0x12>
    return 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	e000      	b.n	800c3ac <osKernelRunning+0x14>
  else
    return 1;
 800c3aa:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c3b4:	f7ff ffd7 	bl	800c366 <inHandlerMode>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d003      	beq.n	800c3c6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c3be:	f001 fd13 	bl	800dde8 <xTaskGetTickCountFromISR>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	e002      	b.n	800c3cc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c3c6:	f001 fcff 	bl	800ddc8 <xTaskGetTickCount>
 800c3ca:	4603      	mov	r3, r0
  }
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3d2:	b089      	sub	sp, #36	; 0x24
 800c3d4:	af04      	add	r7, sp, #16
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	695b      	ldr	r3, [r3, #20]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d020      	beq.n	800c424 <osThreadCreate+0x54>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d01c      	beq.n	800c424 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	685c      	ldr	r4, [r3, #4]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681d      	ldr	r5, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	691e      	ldr	r6, [r3, #16]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7ff ff9a 	bl	800c336 <makeFreeRtosPriority>
 800c402:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c40c:	9202      	str	r2, [sp, #8]
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	9100      	str	r1, [sp, #0]
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	4632      	mov	r2, r6
 800c416:	4629      	mov	r1, r5
 800c418:	4620      	mov	r0, r4
 800c41a:	f001 f9f9 	bl	800d810 <xTaskCreateStatic>
 800c41e:	4603      	mov	r3, r0
 800c420:	60fb      	str	r3, [r7, #12]
 800c422:	e01c      	b.n	800c45e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	685c      	ldr	r4, [r3, #4]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c430:	b29e      	uxth	r6, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c438:	4618      	mov	r0, r3
 800c43a:	f7ff ff7c 	bl	800c336 <makeFreeRtosPriority>
 800c43e:	4602      	mov	r2, r0
 800c440:	f107 030c 	add.w	r3, r7, #12
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	9200      	str	r2, [sp, #0]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	4632      	mov	r2, r6
 800c44c:	4629      	mov	r1, r5
 800c44e:	4620      	mov	r0, r4
 800c450:	f001 fa3e 	bl	800d8d0 <xTaskCreate>
 800c454:	4603      	mov	r3, r0
 800c456:	2b01      	cmp	r3, #1
 800c458:	d001      	beq.n	800c45e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c45a:	2300      	movs	r3, #0
 800c45c:	e000      	b.n	800c460 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c45e:	68fb      	ldr	r3, [r7, #12]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3714      	adds	r7, #20
 800c464:	46bd      	mov	sp, r7
 800c466:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c468 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d001      	beq.n	800c47e <osDelay+0x16>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	e000      	b.n	800c480 <osDelay+0x18>
 800c47e:	2301      	movs	r3, #1
 800c480:	4618      	mov	r0, r3
 800c482:	f001 fb5d 	bl	800db40 <vTaskDelay>
  
  return osOK;
 800c486:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3710      	adds	r7, #16
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af02      	add	r7, sp, #8
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d010      	beq.n	800c4c4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d10b      	bne.n	800c4c0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	685a      	ldr	r2, [r3, #4]
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	2001      	movs	r0, #1
 800c4b8:	f000 fab0 	bl	800ca1c <xQueueGenericCreateStatic>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	e016      	b.n	800c4ee <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	e014      	b.n	800c4ee <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d110      	bne.n	800c4ec <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800c4ca:	2203      	movs	r2, #3
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	2001      	movs	r0, #1
 800c4d0:	f000 fb21 	bl	800cb16 <xQueueGenericCreate>
 800c4d4:	60f8      	str	r0, [r7, #12]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d005      	beq.n	800c4e8 <osSemaphoreCreate+0x58>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	2200      	movs	r2, #0
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	f000 fb78 	bl	800cbd8 <xQueueGenericSend>
      return sema;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	e000      	b.n	800c4ee <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c4ec:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
	...

0800c4f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c502:	2300      	movs	r3, #0
 800c504:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d101      	bne.n	800c510 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c50c:	2380      	movs	r3, #128	; 0x80
 800c50e:	e03a      	b.n	800c586 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c510:	2300      	movs	r3, #0
 800c512:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c51a:	d103      	bne.n	800c524 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c51c:	f04f 33ff 	mov.w	r3, #4294967295
 800c520:	60fb      	str	r3, [r7, #12]
 800c522:	e009      	b.n	800c538 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d006      	beq.n	800c538 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <osSemaphoreWait+0x40>
      ticks = 1;
 800c534:	2301      	movs	r3, #1
 800c536:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c538:	f7ff ff15 	bl	800c366 <inHandlerMode>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d017      	beq.n	800c572 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c542:	f107 0308 	add.w	r3, r7, #8
 800c546:	461a      	mov	r2, r3
 800c548:	2100      	movs	r1, #0
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 ff66 	bl	800d41c <xQueueReceiveFromISR>
 800c550:	4603      	mov	r3, r0
 800c552:	2b01      	cmp	r3, #1
 800c554:	d001      	beq.n	800c55a <osSemaphoreWait+0x62>
      return osErrorOS;
 800c556:	23ff      	movs	r3, #255	; 0xff
 800c558:	e015      	b.n	800c586 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d011      	beq.n	800c584 <osSemaphoreWait+0x8c>
 800c560:	4b0b      	ldr	r3, [pc, #44]	; (800c590 <osSemaphoreWait+0x98>)
 800c562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c566:	601a      	str	r2, [r3, #0]
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	e008      	b.n	800c584 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c572:	68f9      	ldr	r1, [r7, #12]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 fe41 	bl	800d1fc <xQueueSemaphoreTake>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d001      	beq.n	800c584 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c580:	23ff      	movs	r3, #255	; 0xff
 800c582:	e000      	b.n	800c586 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	e000ed04 	.word	0xe000ed04

0800c594 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c5a4:	f7ff fedf 	bl	800c366 <inHandlerMode>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d016      	beq.n	800c5dc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c5ae:	f107 0308 	add.w	r3, r7, #8
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fcad 	bl	800cf14 <xQueueGiveFromISR>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d001      	beq.n	800c5c4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c5c0:	23ff      	movs	r3, #255	; 0xff
 800c5c2:	e017      	b.n	800c5f4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d013      	beq.n	800c5f2 <osSemaphoreRelease+0x5e>
 800c5ca:	4b0c      	ldr	r3, [pc, #48]	; (800c5fc <osSemaphoreRelease+0x68>)
 800c5cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5d0:	601a      	str	r2, [r3, #0]
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	e00a      	b.n	800c5f2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c5dc:	2300      	movs	r3, #0
 800c5de:	2200      	movs	r2, #0
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 faf8 	bl	800cbd8 <xQueueGenericSend>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d001      	beq.n	800c5f2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c5ee:	23ff      	movs	r3, #255	; 0xff
 800c5f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3710      	adds	r7, #16
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	e000ed04 	.word	0xe000ed04

0800c600 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c608:	f7ff fead 	bl	800c366 <inHandlerMode>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c612:	2382      	movs	r3, #130	; 0x82
 800c614:	e003      	b.n	800c61e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 ff83 	bl	800d522 <vQueueDelete>

  return osOK; 
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3708      	adds	r7, #8
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c626:	b590      	push	{r4, r7, lr}
 800c628:	b085      	sub	sp, #20
 800c62a:	af02      	add	r7, sp, #8
 800c62c:	6078      	str	r0, [r7, #4]
 800c62e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d012      	beq.n	800c65e <osMessageCreate+0x38>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00e      	beq.n	800c65e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6818      	ldr	r0, [r3, #0]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6859      	ldr	r1, [r3, #4]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	689a      	ldr	r2, [r3, #8]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	68dc      	ldr	r4, [r3, #12]
 800c650:	2300      	movs	r3, #0
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	4623      	mov	r3, r4
 800c656:	f000 f9e1 	bl	800ca1c <xQueueGenericCreateStatic>
 800c65a:	4603      	mov	r3, r0
 800c65c:	e008      	b.n	800c670 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6818      	ldr	r0, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	4619      	mov	r1, r3
 800c66a:	f000 fa54 	bl	800cb16 <xQueueGenericCreate>
 800c66e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c670:	4618      	mov	r0, r3
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	bd90      	pop	{r4, r7, pc}

0800c678 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c684:	2300      	movs	r3, #0
 800c686:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <osMessagePut+0x1e>
    ticks = 1;
 800c692:	2301      	movs	r3, #1
 800c694:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c696:	f7ff fe66 	bl	800c366 <inHandlerMode>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d018      	beq.n	800c6d2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c6a0:	f107 0210 	add.w	r2, r7, #16
 800c6a4:	f107 0108 	add.w	r1, r7, #8
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f000 fb96 	bl	800cddc <xQueueGenericSendFromISR>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d001      	beq.n	800c6ba <osMessagePut+0x42>
      return osErrorOS;
 800c6b6:	23ff      	movs	r3, #255	; 0xff
 800c6b8:	e018      	b.n	800c6ec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d014      	beq.n	800c6ea <osMessagePut+0x72>
 800c6c0:	4b0c      	ldr	r3, [pc, #48]	; (800c6f4 <osMessagePut+0x7c>)
 800c6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6c6:	601a      	str	r2, [r3, #0]
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	e00b      	b.n	800c6ea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c6d2:	f107 0108 	add.w	r1, r7, #8
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	68f8      	ldr	r0, [r7, #12]
 800c6dc:	f000 fa7c 	bl	800cbd8 <xQueueGenericSend>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d001      	beq.n	800c6ea <osMessagePut+0x72>
      return osErrorOS;
 800c6e6:	23ff      	movs	r3, #255	; 0xff
 800c6e8:	e000      	b.n	800c6ec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3718      	adds	r7, #24
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	e000ed04 	.word	0xe000ed04

0800c6f8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c6f8:	b590      	push	{r4, r7, lr}
 800c6fa:	b08b      	sub	sp, #44	; 0x2c
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d10a      	bne.n	800c728 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c712:	2380      	movs	r3, #128	; 0x80
 800c714:	617b      	str	r3, [r7, #20]
    return event;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	461c      	mov	r4, r3
 800c71a:	f107 0314 	add.w	r3, r7, #20
 800c71e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c726:	e054      	b.n	800c7d2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c728:	2300      	movs	r3, #0
 800c72a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c72c:	2300      	movs	r3, #0
 800c72e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c736:	d103      	bne.n	800c740 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c738:	f04f 33ff 	mov.w	r3, #4294967295
 800c73c:	627b      	str	r3, [r7, #36]	; 0x24
 800c73e:	e009      	b.n	800c754 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d006      	beq.n	800c754 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d101      	bne.n	800c754 <osMessageGet+0x5c>
      ticks = 1;
 800c750:	2301      	movs	r3, #1
 800c752:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c754:	f7ff fe07 	bl	800c366 <inHandlerMode>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d01c      	beq.n	800c798 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c75e:	f107 0220 	add.w	r2, r7, #32
 800c762:	f107 0314 	add.w	r3, r7, #20
 800c766:	3304      	adds	r3, #4
 800c768:	4619      	mov	r1, r3
 800c76a:	68b8      	ldr	r0, [r7, #8]
 800c76c:	f000 fe56 	bl	800d41c <xQueueReceiveFromISR>
 800c770:	4603      	mov	r3, r0
 800c772:	2b01      	cmp	r3, #1
 800c774:	d102      	bne.n	800c77c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c776:	2310      	movs	r3, #16
 800c778:	617b      	str	r3, [r7, #20]
 800c77a:	e001      	b.n	800c780 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c77c:	2300      	movs	r3, #0
 800c77e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c780:	6a3b      	ldr	r3, [r7, #32]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d01d      	beq.n	800c7c2 <osMessageGet+0xca>
 800c786:	4b15      	ldr	r3, [pc, #84]	; (800c7dc <osMessageGet+0xe4>)
 800c788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c78c:	601a      	str	r2, [r3, #0]
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	f3bf 8f6f 	isb	sy
 800c796:	e014      	b.n	800c7c2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c798:	f107 0314 	add.w	r3, r7, #20
 800c79c:	3304      	adds	r3, #4
 800c79e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	68b8      	ldr	r0, [r7, #8]
 800c7a4:	f000 fc48 	bl	800d038 <xQueueReceive>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d102      	bne.n	800c7b4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c7ae:	2310      	movs	r3, #16
 800c7b0:	617b      	str	r3, [r7, #20]
 800c7b2:	e006      	b.n	800c7c2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d101      	bne.n	800c7be <osMessageGet+0xc6>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e000      	b.n	800c7c0 <osMessageGet+0xc8>
 800c7be:	2340      	movs	r3, #64	; 0x40
 800c7c0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	461c      	mov	r4, r3
 800c7c6:	f107 0314 	add.w	r3, r7, #20
 800c7ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c7ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c7d2:	68f8      	ldr	r0, [r7, #12]
 800c7d4:	372c      	adds	r7, #44	; 0x2c
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd90      	pop	{r4, r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	e000ed04 	.word	0xe000ed04

0800c7e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f103 0208 	add.w	r2, r3, #8
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f103 0208 	add.w	r2, r3, #8
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f103 0208 	add.w	r2, r3, #8
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c814:	bf00      	nop
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c82e:	bf00      	nop
 800c830:	370c      	adds	r7, #12
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr

0800c83a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c83a:	b480      	push	{r7}
 800c83c:	b085      	sub	sp, #20
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	689a      	ldr	r2, [r3, #8]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	683a      	ldr	r2, [r7, #0]
 800c864:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	1c5a      	adds	r2, r3, #1
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	601a      	str	r2, [r3, #0]
}
 800c876:	bf00      	nop
 800c878:	3714      	adds	r7, #20
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c882:	b480      	push	{r7}
 800c884:	b085      	sub	sp, #20
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
 800c88a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c898:	d103      	bne.n	800c8a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	60fb      	str	r3, [r7, #12]
 800c8a0:	e00c      	b.n	800c8bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	3308      	adds	r3, #8
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	e002      	b.n	800c8b0 <vListInsert+0x2e>
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	60fb      	str	r3, [r7, #12]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d2f6      	bcs.n	800c8aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	683a      	ldr	r2, [r7, #0]
 800c8d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	1c5a      	adds	r2, r3, #1
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	601a      	str	r2, [r3, #0]
}
 800c8e8:	bf00      	nop
 800c8ea:	3714      	adds	r7, #20
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	6892      	ldr	r2, [r2, #8]
 800c90a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	6852      	ldr	r2, [r2, #4]
 800c914:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d103      	bne.n	800c928 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	689a      	ldr	r2, [r3, #8]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	1e5a      	subs	r2, r3, #1
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3714      	adds	r7, #20
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10b      	bne.n	800c974 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c960:	b672      	cpsid	i
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	b662      	cpsie	i
 800c970:	60bb      	str	r3, [r7, #8]
 800c972:	e7fe      	b.n	800c972 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c974:	f002 f888 	bl	800ea88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c980:	68f9      	ldr	r1, [r7, #12]
 800c982:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c984:	fb01 f303 	mul.w	r3, r1, r3
 800c988:	441a      	add	r2, r3
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2200      	movs	r2, #0
 800c992:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	68f9      	ldr	r1, [r7, #12]
 800c9a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9aa:	fb01 f303 	mul.w	r3, r1, r3
 800c9ae:	441a      	add	r2, r3
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	22ff      	movs	r2, #255	; 0xff
 800c9b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	22ff      	movs	r2, #255	; 0xff
 800c9c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d114      	bne.n	800c9f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d01a      	beq.n	800ca08 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3310      	adds	r3, #16
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f001 fb54 	bl	800e084 <xTaskRemoveFromEventList>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d012      	beq.n	800ca08 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c9e2:	4b0d      	ldr	r3, [pc, #52]	; (800ca18 <xQueueGenericReset+0xd0>)
 800c9e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9e8:	601a      	str	r2, [r3, #0]
 800c9ea:	f3bf 8f4f 	dsb	sy
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	e009      	b.n	800ca08 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	3310      	adds	r3, #16
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7ff fef1 	bl	800c7e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	3324      	adds	r3, #36	; 0x24
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff feec 	bl	800c7e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ca08:	f002 f870 	bl	800eaec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ca0c:	2301      	movs	r3, #1
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	e000ed04 	.word	0xe000ed04

0800ca1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b08e      	sub	sp, #56	; 0x38
 800ca20:	af02      	add	r7, sp, #8
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	607a      	str	r2, [r7, #4]
 800ca28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d10b      	bne.n	800ca48 <xQueueGenericCreateStatic+0x2c>
 800ca30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca34:	b672      	cpsid	i
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	b662      	cpsie	i
 800ca44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca46:	e7fe      	b.n	800ca46 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d10b      	bne.n	800ca66 <xQueueGenericCreateStatic+0x4a>
 800ca4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca52:	b672      	cpsid	i
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	b662      	cpsie	i
 800ca62:	627b      	str	r3, [r7, #36]	; 0x24
 800ca64:	e7fe      	b.n	800ca64 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d002      	beq.n	800ca72 <xQueueGenericCreateStatic+0x56>
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d001      	beq.n	800ca76 <xQueueGenericCreateStatic+0x5a>
 800ca72:	2301      	movs	r3, #1
 800ca74:	e000      	b.n	800ca78 <xQueueGenericCreateStatic+0x5c>
 800ca76:	2300      	movs	r3, #0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10b      	bne.n	800ca94 <xQueueGenericCreateStatic+0x78>
 800ca7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca80:	b672      	cpsid	i
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	b662      	cpsie	i
 800ca90:	623b      	str	r3, [r7, #32]
 800ca92:	e7fe      	b.n	800ca92 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d102      	bne.n	800caa0 <xQueueGenericCreateStatic+0x84>
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d101      	bne.n	800caa4 <xQueueGenericCreateStatic+0x88>
 800caa0:	2301      	movs	r3, #1
 800caa2:	e000      	b.n	800caa6 <xQueueGenericCreateStatic+0x8a>
 800caa4:	2300      	movs	r3, #0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d10b      	bne.n	800cac2 <xQueueGenericCreateStatic+0xa6>
 800caaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caae:	b672      	cpsid	i
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	b662      	cpsie	i
 800cabe:	61fb      	str	r3, [r7, #28]
 800cac0:	e7fe      	b.n	800cac0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cac2:	2348      	movs	r3, #72	; 0x48
 800cac4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	2b48      	cmp	r3, #72	; 0x48
 800caca:	d00b      	beq.n	800cae4 <xQueueGenericCreateStatic+0xc8>
 800cacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad0:	b672      	cpsid	i
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	b662      	cpsie	i
 800cae0:	61bb      	str	r3, [r7, #24]
 800cae2:	e7fe      	b.n	800cae2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cae4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caec:	2b00      	cmp	r3, #0
 800caee:	d00d      	beq.n	800cb0c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800caf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf2:	2201      	movs	r2, #1
 800caf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800caf8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafe:	9300      	str	r3, [sp, #0]
 800cb00:	4613      	mov	r3, r2
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	68b9      	ldr	r1, [r7, #8]
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f000 f846 	bl	800cb98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3730      	adds	r7, #48	; 0x30
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b08a      	sub	sp, #40	; 0x28
 800cb1a:	af02      	add	r7, sp, #8
 800cb1c:	60f8      	str	r0, [r7, #12]
 800cb1e:	60b9      	str	r1, [r7, #8]
 800cb20:	4613      	mov	r3, r2
 800cb22:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d10b      	bne.n	800cb42 <xQueueGenericCreate+0x2c>
 800cb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2e:	b672      	cpsid	i
 800cb30:	f383 8811 	msr	BASEPRI, r3
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	b662      	cpsie	i
 800cb3e:	613b      	str	r3, [r7, #16]
 800cb40:	e7fe      	b.n	800cb40 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d102      	bne.n	800cb4e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	61fb      	str	r3, [r7, #28]
 800cb4c:	e004      	b.n	800cb58 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	fb02 f303 	mul.w	r3, r2, r3
 800cb56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	3348      	adds	r3, #72	; 0x48
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f002 f8b5 	bl	800eccc <pvPortMalloc>
 800cb62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d011      	beq.n	800cb8e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	3348      	adds	r3, #72	; 0x48
 800cb72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb7c:	79fa      	ldrb	r2, [r7, #7]
 800cb7e:	69bb      	ldr	r3, [r7, #24]
 800cb80:	9300      	str	r3, [sp, #0]
 800cb82:	4613      	mov	r3, r2
 800cb84:	697a      	ldr	r2, [r7, #20]
 800cb86:	68b9      	ldr	r1, [r7, #8]
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	f000 f805 	bl	800cb98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb8e:	69bb      	ldr	r3, [r7, #24]
	}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3720      	adds	r7, #32
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	607a      	str	r2, [r7, #4]
 800cba4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d103      	bne.n	800cbb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	69ba      	ldr	r2, [r7, #24]
 800cbb0:	601a      	str	r2, [r3, #0]
 800cbb2:	e002      	b.n	800cbba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cbc6:	2101      	movs	r1, #1
 800cbc8:	69b8      	ldr	r0, [r7, #24]
 800cbca:	f7ff febd 	bl	800c948 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cbce:	bf00      	nop
 800cbd0:	3710      	adds	r7, #16
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
	...

0800cbd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08e      	sub	sp, #56	; 0x38
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
 800cbe4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10b      	bne.n	800cc0c <xQueueGenericSend+0x34>
 800cbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf8:	b672      	cpsid	i
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	b662      	cpsie	i
 800cc08:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc0a:	e7fe      	b.n	800cc0a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d103      	bne.n	800cc1a <xQueueGenericSend+0x42>
 800cc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d101      	bne.n	800cc1e <xQueueGenericSend+0x46>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e000      	b.n	800cc20 <xQueueGenericSend+0x48>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10b      	bne.n	800cc3c <xQueueGenericSend+0x64>
 800cc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc28:	b672      	cpsid	i
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	b662      	cpsie	i
 800cc38:	627b      	str	r3, [r7, #36]	; 0x24
 800cc3a:	e7fe      	b.n	800cc3a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	d103      	bne.n	800cc4a <xQueueGenericSend+0x72>
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d101      	bne.n	800cc4e <xQueueGenericSend+0x76>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e000      	b.n	800cc50 <xQueueGenericSend+0x78>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10b      	bne.n	800cc6c <xQueueGenericSend+0x94>
 800cc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc58:	b672      	cpsid	i
 800cc5a:	f383 8811 	msr	BASEPRI, r3
 800cc5e:	f3bf 8f6f 	isb	sy
 800cc62:	f3bf 8f4f 	dsb	sy
 800cc66:	b662      	cpsie	i
 800cc68:	623b      	str	r3, [r7, #32]
 800cc6a:	e7fe      	b.n	800cc6a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc6c:	f001 fbc8 	bl	800e400 <xTaskGetSchedulerState>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d102      	bne.n	800cc7c <xQueueGenericSend+0xa4>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d101      	bne.n	800cc80 <xQueueGenericSend+0xa8>
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	e000      	b.n	800cc82 <xQueueGenericSend+0xaa>
 800cc80:	2300      	movs	r3, #0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d10b      	bne.n	800cc9e <xQueueGenericSend+0xc6>
 800cc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8a:	b672      	cpsid	i
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	b662      	cpsie	i
 800cc9a:	61fb      	str	r3, [r7, #28]
 800cc9c:	e7fe      	b.n	800cc9c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc9e:	f001 fef3 	bl	800ea88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d302      	bcc.n	800ccb4 <xQueueGenericSend+0xdc>
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	2b02      	cmp	r3, #2
 800ccb2:	d129      	bne.n	800cd08 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ccb4:	683a      	ldr	r2, [r7, #0]
 800ccb6:	68b9      	ldr	r1, [r7, #8]
 800ccb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccba:	f000 fc6e 	bl	800d59a <prvCopyDataToQueue>
 800ccbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d010      	beq.n	800ccea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccca:	3324      	adds	r3, #36	; 0x24
 800cccc:	4618      	mov	r0, r3
 800ccce:	f001 f9d9 	bl	800e084 <xTaskRemoveFromEventList>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d013      	beq.n	800cd00 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ccd8:	4b3f      	ldr	r3, [pc, #252]	; (800cdd8 <xQueueGenericSend+0x200>)
 800ccda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccde:	601a      	str	r2, [r3, #0]
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	e00a      	b.n	800cd00 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ccea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d007      	beq.n	800cd00 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ccf0:	4b39      	ldr	r3, [pc, #228]	; (800cdd8 <xQueueGenericSend+0x200>)
 800ccf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccf6:	601a      	str	r2, [r3, #0]
 800ccf8:	f3bf 8f4f 	dsb	sy
 800ccfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cd00:	f001 fef4 	bl	800eaec <vPortExitCritical>
				return pdPASS;
 800cd04:	2301      	movs	r3, #1
 800cd06:	e063      	b.n	800cdd0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d103      	bne.n	800cd16 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd0e:	f001 feed 	bl	800eaec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cd12:	2300      	movs	r3, #0
 800cd14:	e05c      	b.n	800cdd0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d106      	bne.n	800cd2a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd1c:	f107 0314 	add.w	r3, r7, #20
 800cd20:	4618      	mov	r0, r3
 800cd22:	f001 fa13 	bl	800e14c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd26:	2301      	movs	r3, #1
 800cd28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd2a:	f001 fedf 	bl	800eaec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd2e:	f000 ff9f 	bl	800dc70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd32:	f001 fea9 	bl	800ea88 <vPortEnterCritical>
 800cd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd3c:	b25b      	sxtb	r3, r3
 800cd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd42:	d103      	bne.n	800cd4c <xQueueGenericSend+0x174>
 800cd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd46:	2200      	movs	r2, #0
 800cd48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd52:	b25b      	sxtb	r3, r3
 800cd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd58:	d103      	bne.n	800cd62 <xQueueGenericSend+0x18a>
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd62:	f001 fec3 	bl	800eaec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd66:	1d3a      	adds	r2, r7, #4
 800cd68:	f107 0314 	add.w	r3, r7, #20
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f001 fa02 	bl	800e178 <xTaskCheckForTimeOut>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d124      	bne.n	800cdc4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cd7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd7c:	f000 fd05 	bl	800d78a <prvIsQueueFull>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d018      	beq.n	800cdb8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	3310      	adds	r3, #16
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f001 f952 	bl	800e038 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd96:	f000 fc90 	bl	800d6ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd9a:	f000 ff77 	bl	800dc8c <xTaskResumeAll>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f47f af7c 	bne.w	800cc9e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cda6:	4b0c      	ldr	r3, [pc, #48]	; (800cdd8 <xQueueGenericSend+0x200>)
 800cda8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdac:	601a      	str	r2, [r3, #0]
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	f3bf 8f6f 	isb	sy
 800cdb6:	e772      	b.n	800cc9e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cdb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdba:	f000 fc7e 	bl	800d6ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cdbe:	f000 ff65 	bl	800dc8c <xTaskResumeAll>
 800cdc2:	e76c      	b.n	800cc9e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cdc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdc6:	f000 fc78 	bl	800d6ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdca:	f000 ff5f 	bl	800dc8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cdce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3738      	adds	r7, #56	; 0x38
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	e000ed04 	.word	0xe000ed04

0800cddc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b08e      	sub	sp, #56	; 0x38
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	607a      	str	r2, [r7, #4]
 800cde8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10b      	bne.n	800ce0c <xQueueGenericSendFromISR+0x30>
 800cdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf8:	b672      	cpsid	i
 800cdfa:	f383 8811 	msr	BASEPRI, r3
 800cdfe:	f3bf 8f6f 	isb	sy
 800ce02:	f3bf 8f4f 	dsb	sy
 800ce06:	b662      	cpsie	i
 800ce08:	627b      	str	r3, [r7, #36]	; 0x24
 800ce0a:	e7fe      	b.n	800ce0a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d103      	bne.n	800ce1a <xQueueGenericSendFromISR+0x3e>
 800ce12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d101      	bne.n	800ce1e <xQueueGenericSendFromISR+0x42>
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	e000      	b.n	800ce20 <xQueueGenericSendFromISR+0x44>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d10b      	bne.n	800ce3c <xQueueGenericSendFromISR+0x60>
 800ce24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce28:	b672      	cpsid	i
 800ce2a:	f383 8811 	msr	BASEPRI, r3
 800ce2e:	f3bf 8f6f 	isb	sy
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	b662      	cpsie	i
 800ce38:	623b      	str	r3, [r7, #32]
 800ce3a:	e7fe      	b.n	800ce3a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	2b02      	cmp	r3, #2
 800ce40:	d103      	bne.n	800ce4a <xQueueGenericSendFromISR+0x6e>
 800ce42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d101      	bne.n	800ce4e <xQueueGenericSendFromISR+0x72>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e000      	b.n	800ce50 <xQueueGenericSendFromISR+0x74>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d10b      	bne.n	800ce6c <xQueueGenericSendFromISR+0x90>
 800ce54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce58:	b672      	cpsid	i
 800ce5a:	f383 8811 	msr	BASEPRI, r3
 800ce5e:	f3bf 8f6f 	isb	sy
 800ce62:	f3bf 8f4f 	dsb	sy
 800ce66:	b662      	cpsie	i
 800ce68:	61fb      	str	r3, [r7, #28]
 800ce6a:	e7fe      	b.n	800ce6a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce6c:	f001 feec 	bl	800ec48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ce70:	f3ef 8211 	mrs	r2, BASEPRI
 800ce74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce78:	b672      	cpsid	i
 800ce7a:	f383 8811 	msr	BASEPRI, r3
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	b662      	cpsie	i
 800ce88:	61ba      	str	r2, [r7, #24]
 800ce8a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ce8c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d302      	bcc.n	800cea2 <xQueueGenericSendFromISR+0xc6>
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	2b02      	cmp	r3, #2
 800cea0:	d12c      	bne.n	800cefc <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ceac:	683a      	ldr	r2, [r7, #0]
 800ceae:	68b9      	ldr	r1, [r7, #8]
 800ceb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceb2:	f000 fb72 	bl	800d59a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ceb6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ceba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cebe:	d112      	bne.n	800cee6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d016      	beq.n	800cef6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceca:	3324      	adds	r3, #36	; 0x24
 800cecc:	4618      	mov	r0, r3
 800cece:	f001 f8d9 	bl	800e084 <xTaskRemoveFromEventList>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d00e      	beq.n	800cef6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00b      	beq.n	800cef6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2201      	movs	r2, #1
 800cee2:	601a      	str	r2, [r3, #0]
 800cee4:	e007      	b.n	800cef6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cee6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ceea:	3301      	adds	r3, #1
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	b25a      	sxtb	r2, r3
 800cef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cef6:	2301      	movs	r3, #1
 800cef8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800cefa:	e001      	b.n	800cf00 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cefc:	2300      	movs	r3, #0
 800cefe:	637b      	str	r3, [r7, #52]	; 0x34
 800cf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf02:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3738      	adds	r7, #56	; 0x38
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b08e      	sub	sp, #56	; 0x38
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d10b      	bne.n	800cf40 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2c:	b672      	cpsid	i
 800cf2e:	f383 8811 	msr	BASEPRI, r3
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	b662      	cpsie	i
 800cf3c:	623b      	str	r3, [r7, #32]
 800cf3e:	e7fe      	b.n	800cf3e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00b      	beq.n	800cf60 <xQueueGiveFromISR+0x4c>
 800cf48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4c:	b672      	cpsid	i
 800cf4e:	f383 8811 	msr	BASEPRI, r3
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	b662      	cpsie	i
 800cf5c:	61fb      	str	r3, [r7, #28]
 800cf5e:	e7fe      	b.n	800cf5e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d103      	bne.n	800cf70 <xQueueGiveFromISR+0x5c>
 800cf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d101      	bne.n	800cf74 <xQueueGiveFromISR+0x60>
 800cf70:	2301      	movs	r3, #1
 800cf72:	e000      	b.n	800cf76 <xQueueGiveFromISR+0x62>
 800cf74:	2300      	movs	r3, #0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10b      	bne.n	800cf92 <xQueueGiveFromISR+0x7e>
 800cf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7e:	b672      	cpsid	i
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	b662      	cpsie	i
 800cf8e:	61bb      	str	r3, [r7, #24]
 800cf90:	e7fe      	b.n	800cf90 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf92:	f001 fe59 	bl	800ec48 <vPortValidateInterruptPriority>
	__asm volatile
 800cf96:	f3ef 8211 	mrs	r2, BASEPRI
 800cf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9e:	b672      	cpsid	i
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	b662      	cpsie	i
 800cfae:	617a      	str	r2, [r7, #20]
 800cfb0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cfb2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d22b      	bcs.n	800d01e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd2:	1c5a      	adds	r2, r3, #1
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cfd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cfdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe0:	d112      	bne.n	800d008 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d016      	beq.n	800d018 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfec:	3324      	adds	r3, #36	; 0x24
 800cfee:	4618      	mov	r0, r3
 800cff0:	f001 f848 	bl	800e084 <xTaskRemoveFromEventList>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00e      	beq.n	800d018 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00b      	beq.n	800d018 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	2201      	movs	r2, #1
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	e007      	b.n	800d018 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d00c:	3301      	adds	r3, #1
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	b25a      	sxtb	r2, r3
 800d012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d018:	2301      	movs	r3, #1
 800d01a:	637b      	str	r3, [r7, #52]	; 0x34
 800d01c:	e001      	b.n	800d022 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d01e:	2300      	movs	r3, #0
 800d020:	637b      	str	r3, [r7, #52]	; 0x34
 800d022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d024:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3738      	adds	r7, #56	; 0x38
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
	...

0800d038 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b08c      	sub	sp, #48	; 0x30
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d044:	2300      	movs	r3, #0
 800d046:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d10b      	bne.n	800d06a <xQueueReceive+0x32>
	__asm volatile
 800d052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d056:	b672      	cpsid	i
 800d058:	f383 8811 	msr	BASEPRI, r3
 800d05c:	f3bf 8f6f 	isb	sy
 800d060:	f3bf 8f4f 	dsb	sy
 800d064:	b662      	cpsie	i
 800d066:	623b      	str	r3, [r7, #32]
 800d068:	e7fe      	b.n	800d068 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d103      	bne.n	800d078 <xQueueReceive+0x40>
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d074:	2b00      	cmp	r3, #0
 800d076:	d101      	bne.n	800d07c <xQueueReceive+0x44>
 800d078:	2301      	movs	r3, #1
 800d07a:	e000      	b.n	800d07e <xQueueReceive+0x46>
 800d07c:	2300      	movs	r3, #0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d10b      	bne.n	800d09a <xQueueReceive+0x62>
 800d082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d086:	b672      	cpsid	i
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	b662      	cpsie	i
 800d096:	61fb      	str	r3, [r7, #28]
 800d098:	e7fe      	b.n	800d098 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d09a:	f001 f9b1 	bl	800e400 <xTaskGetSchedulerState>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d102      	bne.n	800d0aa <xQueueReceive+0x72>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d101      	bne.n	800d0ae <xQueueReceive+0x76>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e000      	b.n	800d0b0 <xQueueReceive+0x78>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10b      	bne.n	800d0cc <xQueueReceive+0x94>
 800d0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b8:	b672      	cpsid	i
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	b662      	cpsie	i
 800d0c8:	61bb      	str	r3, [r7, #24]
 800d0ca:	e7fe      	b.n	800d0ca <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0cc:	f001 fcdc 	bl	800ea88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d01f      	beq.n	800d11c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0dc:	68b9      	ldr	r1, [r7, #8]
 800d0de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0e0:	f000 fac5 	bl	800d66e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e6:	1e5a      	subs	r2, r3, #1
 800d0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00f      	beq.n	800d114 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f6:	3310      	adds	r3, #16
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f000 ffc3 	bl	800e084 <xTaskRemoveFromEventList>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d007      	beq.n	800d114 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d104:	4b3c      	ldr	r3, [pc, #240]	; (800d1f8 <xQueueReceive+0x1c0>)
 800d106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d10a:	601a      	str	r2, [r3, #0]
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d114:	f001 fcea 	bl	800eaec <vPortExitCritical>
				return pdPASS;
 800d118:	2301      	movs	r3, #1
 800d11a:	e069      	b.n	800d1f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d103      	bne.n	800d12a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d122:	f001 fce3 	bl	800eaec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d126:	2300      	movs	r3, #0
 800d128:	e062      	b.n	800d1f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d106      	bne.n	800d13e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d130:	f107 0310 	add.w	r3, r7, #16
 800d134:	4618      	mov	r0, r3
 800d136:	f001 f809 	bl	800e14c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d13a:	2301      	movs	r3, #1
 800d13c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d13e:	f001 fcd5 	bl	800eaec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d142:	f000 fd95 	bl	800dc70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d146:	f001 fc9f 	bl	800ea88 <vPortEnterCritical>
 800d14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d150:	b25b      	sxtb	r3, r3
 800d152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d156:	d103      	bne.n	800d160 <xQueueReceive+0x128>
 800d158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15a:	2200      	movs	r2, #0
 800d15c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d166:	b25b      	sxtb	r3, r3
 800d168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16c:	d103      	bne.n	800d176 <xQueueReceive+0x13e>
 800d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d170:	2200      	movs	r2, #0
 800d172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d176:	f001 fcb9 	bl	800eaec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d17a:	1d3a      	adds	r2, r7, #4
 800d17c:	f107 0310 	add.w	r3, r7, #16
 800d180:	4611      	mov	r1, r2
 800d182:	4618      	mov	r0, r3
 800d184:	f000 fff8 	bl	800e178 <xTaskCheckForTimeOut>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d123      	bne.n	800d1d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d18e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d190:	f000 fae5 	bl	800d75e <prvIsQueueEmpty>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d017      	beq.n	800d1ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19c:	3324      	adds	r3, #36	; 0x24
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	4611      	mov	r1, r2
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f000 ff48 	bl	800e038 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1aa:	f000 fa86 	bl	800d6ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1ae:	f000 fd6d 	bl	800dc8c <xTaskResumeAll>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d189      	bne.n	800d0cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d1b8:	4b0f      	ldr	r3, [pc, #60]	; (800d1f8 <xQueueReceive+0x1c0>)
 800d1ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1be:	601a      	str	r2, [r3, #0]
 800d1c0:	f3bf 8f4f 	dsb	sy
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	e780      	b.n	800d0cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1cc:	f000 fa75 	bl	800d6ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1d0:	f000 fd5c 	bl	800dc8c <xTaskResumeAll>
 800d1d4:	e77a      	b.n	800d0cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d1d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1d8:	f000 fa6f 	bl	800d6ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1dc:	f000 fd56 	bl	800dc8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1e2:	f000 fabc 	bl	800d75e <prvIsQueueEmpty>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f43f af6f 	beq.w	800d0cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d1ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3730      	adds	r7, #48	; 0x30
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	e000ed04 	.word	0xe000ed04

0800d1fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b08e      	sub	sp, #56	; 0x38
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d206:	2300      	movs	r3, #0
 800d208:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d20e:	2300      	movs	r3, #0
 800d210:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10b      	bne.n	800d230 <xQueueSemaphoreTake+0x34>
 800d218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21c:	b672      	cpsid	i
 800d21e:	f383 8811 	msr	BASEPRI, r3
 800d222:	f3bf 8f6f 	isb	sy
 800d226:	f3bf 8f4f 	dsb	sy
 800d22a:	b662      	cpsie	i
 800d22c:	623b      	str	r3, [r7, #32]
 800d22e:	e7fe      	b.n	800d22e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00b      	beq.n	800d250 <xQueueSemaphoreTake+0x54>
 800d238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23c:	b672      	cpsid	i
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	b662      	cpsie	i
 800d24c:	61fb      	str	r3, [r7, #28]
 800d24e:	e7fe      	b.n	800d24e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d250:	f001 f8d6 	bl	800e400 <xTaskGetSchedulerState>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d102      	bne.n	800d260 <xQueueSemaphoreTake+0x64>
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d101      	bne.n	800d264 <xQueueSemaphoreTake+0x68>
 800d260:	2301      	movs	r3, #1
 800d262:	e000      	b.n	800d266 <xQueueSemaphoreTake+0x6a>
 800d264:	2300      	movs	r3, #0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d10b      	bne.n	800d282 <xQueueSemaphoreTake+0x86>
 800d26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26e:	b672      	cpsid	i
 800d270:	f383 8811 	msr	BASEPRI, r3
 800d274:	f3bf 8f6f 	isb	sy
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	b662      	cpsie	i
 800d27e:	61bb      	str	r3, [r7, #24]
 800d280:	e7fe      	b.n	800d280 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d282:	f001 fc01 	bl	800ea88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d28a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d024      	beq.n	800d2dc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d294:	1e5a      	subs	r2, r3, #1
 800d296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d298:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d104      	bne.n	800d2ac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d2a2:	f001 fa6f 	bl	800e784 <pvTaskIncrementMutexHeldCount>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00f      	beq.n	800d2d4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b6:	3310      	adds	r3, #16
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 fee3 	bl	800e084 <xTaskRemoveFromEventList>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d007      	beq.n	800d2d4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2c4:	4b54      	ldr	r3, [pc, #336]	; (800d418 <xQueueSemaphoreTake+0x21c>)
 800d2c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2ca:	601a      	str	r2, [r3, #0]
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2d4:	f001 fc0a 	bl	800eaec <vPortExitCritical>
				return pdPASS;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	e098      	b.n	800d40e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d112      	bne.n	800d308 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00b      	beq.n	800d300 <xQueueSemaphoreTake+0x104>
 800d2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ec:	b672      	cpsid	i
 800d2ee:	f383 8811 	msr	BASEPRI, r3
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	b662      	cpsie	i
 800d2fc:	617b      	str	r3, [r7, #20]
 800d2fe:	e7fe      	b.n	800d2fe <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d300:	f001 fbf4 	bl	800eaec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d304:	2300      	movs	r3, #0
 800d306:	e082      	b.n	800d40e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d106      	bne.n	800d31c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d30e:	f107 030c 	add.w	r3, r7, #12
 800d312:	4618      	mov	r0, r3
 800d314:	f000 ff1a 	bl	800e14c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d318:	2301      	movs	r3, #1
 800d31a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d31c:	f001 fbe6 	bl	800eaec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d320:	f000 fca6 	bl	800dc70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d324:	f001 fbb0 	bl	800ea88 <vPortEnterCritical>
 800d328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d32e:	b25b      	sxtb	r3, r3
 800d330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d334:	d103      	bne.n	800d33e <xQueueSemaphoreTake+0x142>
 800d336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d338:	2200      	movs	r2, #0
 800d33a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d344:	b25b      	sxtb	r3, r3
 800d346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d34a:	d103      	bne.n	800d354 <xQueueSemaphoreTake+0x158>
 800d34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d354:	f001 fbca 	bl	800eaec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d358:	463a      	mov	r2, r7
 800d35a:	f107 030c 	add.w	r3, r7, #12
 800d35e:	4611      	mov	r1, r2
 800d360:	4618      	mov	r0, r3
 800d362:	f000 ff09 	bl	800e178 <xTaskCheckForTimeOut>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d132      	bne.n	800d3d2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d36c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d36e:	f000 f9f6 	bl	800d75e <prvIsQueueEmpty>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d026      	beq.n	800d3c6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d109      	bne.n	800d394 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d380:	f001 fb82 	bl	800ea88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	4618      	mov	r0, r3
 800d38a:	f001 f857 	bl	800e43c <xTaskPriorityInherit>
 800d38e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d390:	f001 fbac 	bl	800eaec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d396:	3324      	adds	r3, #36	; 0x24
 800d398:	683a      	ldr	r2, [r7, #0]
 800d39a:	4611      	mov	r1, r2
 800d39c:	4618      	mov	r0, r3
 800d39e:	f000 fe4b 	bl	800e038 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d3a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3a4:	f000 f989 	bl	800d6ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d3a8:	f000 fc70 	bl	800dc8c <xTaskResumeAll>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f47f af67 	bne.w	800d282 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d3b4:	4b18      	ldr	r3, [pc, #96]	; (800d418 <xQueueSemaphoreTake+0x21c>)
 800d3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ba:	601a      	str	r2, [r3, #0]
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	f3bf 8f6f 	isb	sy
 800d3c4:	e75d      	b.n	800d282 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d3c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3c8:	f000 f977 	bl	800d6ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3cc:	f000 fc5e 	bl	800dc8c <xTaskResumeAll>
 800d3d0:	e757      	b.n	800d282 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d3d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3d4:	f000 f971 	bl	800d6ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3d8:	f000 fc58 	bl	800dc8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3de:	f000 f9be 	bl	800d75e <prvIsQueueEmpty>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f43f af4c 	beq.w	800d282 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00d      	beq.n	800d40c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d3f0:	f001 fb4a 	bl	800ea88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d3f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3f6:	f000 f8b8 	bl	800d56a <prvGetDisinheritPriorityAfterTimeout>
 800d3fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fe:	689b      	ldr	r3, [r3, #8]
 800d400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d402:	4618      	mov	r0, r3
 800d404:	f001 f922 	bl	800e64c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d408:	f001 fb70 	bl	800eaec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d40c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3738      	adds	r7, #56	; 0x38
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	e000ed04 	.word	0xe000ed04

0800d41c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b08e      	sub	sp, #56	; 0x38
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d10b      	bne.n	800d44a <xQueueReceiveFromISR+0x2e>
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	b672      	cpsid	i
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	b662      	cpsie	i
 800d446:	623b      	str	r3, [r7, #32]
 800d448:	e7fe      	b.n	800d448 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d103      	bne.n	800d458 <xQueueReceiveFromISR+0x3c>
 800d450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d454:	2b00      	cmp	r3, #0
 800d456:	d101      	bne.n	800d45c <xQueueReceiveFromISR+0x40>
 800d458:	2301      	movs	r3, #1
 800d45a:	e000      	b.n	800d45e <xQueueReceiveFromISR+0x42>
 800d45c:	2300      	movs	r3, #0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10b      	bne.n	800d47a <xQueueReceiveFromISR+0x5e>
 800d462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d466:	b672      	cpsid	i
 800d468:	f383 8811 	msr	BASEPRI, r3
 800d46c:	f3bf 8f6f 	isb	sy
 800d470:	f3bf 8f4f 	dsb	sy
 800d474:	b662      	cpsie	i
 800d476:	61fb      	str	r3, [r7, #28]
 800d478:	e7fe      	b.n	800d478 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d47a:	f001 fbe5 	bl	800ec48 <vPortValidateInterruptPriority>
	__asm volatile
 800d47e:	f3ef 8211 	mrs	r2, BASEPRI
 800d482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d486:	b672      	cpsid	i
 800d488:	f383 8811 	msr	BASEPRI, r3
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	b662      	cpsie	i
 800d496:	61ba      	str	r2, [r7, #24]
 800d498:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d49a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d49c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d02f      	beq.n	800d50a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4b4:	68b9      	ldr	r1, [r7, #8]
 800d4b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4b8:	f000 f8d9 	bl	800d66e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4be:	1e5a      	subs	r2, r3, #1
 800d4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d4c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4cc:	d112      	bne.n	800d4f4 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d016      	beq.n	800d504 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d8:	3310      	adds	r3, #16
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 fdd2 	bl	800e084 <xTaskRemoveFromEventList>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00e      	beq.n	800d504 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00b      	beq.n	800d504 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	601a      	str	r2, [r3, #0]
 800d4f2:	e007      	b.n	800d504 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d4f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	b25a      	sxtb	r2, r3
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d504:	2301      	movs	r3, #1
 800d506:	637b      	str	r3, [r7, #52]	; 0x34
 800d508:	e001      	b.n	800d50e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d50a:	2300      	movs	r3, #0
 800d50c:	637b      	str	r3, [r7, #52]	; 0x34
 800d50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d510:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3738      	adds	r7, #56	; 0x38
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b084      	sub	sp, #16
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d10b      	bne.n	800d54c <vQueueDelete+0x2a>
	__asm volatile
 800d534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d538:	b672      	cpsid	i
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	b662      	cpsie	i
 800d548:	60bb      	str	r3, [r7, #8]
 800d54a:	e7fe      	b.n	800d54a <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d54c:	68f8      	ldr	r0, [r7, #12]
 800d54e:	f000 f935 	bl	800d7bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d102      	bne.n	800d562 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d55c:	68f8      	ldr	r0, [r7, #12]
 800d55e:	f001 fc7d 	bl	800ee5c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d562:	bf00      	nop
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d56a:	b480      	push	{r7}
 800d56c:	b085      	sub	sp, #20
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d576:	2b00      	cmp	r3, #0
 800d578:	d006      	beq.n	800d588 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f1c3 0307 	rsb	r3, r3, #7
 800d584:	60fb      	str	r3, [r7, #12]
 800d586:	e001      	b.n	800d58c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d588:	2300      	movs	r3, #0
 800d58a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d58c:	68fb      	ldr	r3, [r7, #12]
	}
 800d58e:	4618      	mov	r0, r3
 800d590:	3714      	adds	r7, #20
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr

0800d59a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b086      	sub	sp, #24
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	60f8      	str	r0, [r7, #12]
 800d5a2:	60b9      	str	r1, [r7, #8]
 800d5a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d10d      	bne.n	800d5d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d14d      	bne.n	800d65c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	689b      	ldr	r3, [r3, #8]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f000 ffb9 	bl	800e53c <xTaskPriorityDisinherit>
 800d5ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	609a      	str	r2, [r3, #8]
 800d5d2:	e043      	b.n	800d65c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d119      	bne.n	800d60e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	6858      	ldr	r0, [r3, #4]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	68b9      	ldr	r1, [r7, #8]
 800d5e6:	f001 fd75 	bl	800f0d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	685a      	ldr	r2, [r3, #4]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f2:	441a      	add	r2, r3
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	685a      	ldr	r2, [r3, #4]
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	429a      	cmp	r2, r3
 800d602:	d32b      	bcc.n	800d65c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	605a      	str	r2, [r3, #4]
 800d60c:	e026      	b.n	800d65c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	68d8      	ldr	r0, [r3, #12]
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d616:	461a      	mov	r2, r3
 800d618:	68b9      	ldr	r1, [r7, #8]
 800d61a:	f001 fd5b 	bl	800f0d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	68da      	ldr	r2, [r3, #12]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d626:	425b      	negs	r3, r3
 800d628:	441a      	add	r2, r3
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	68da      	ldr	r2, [r3, #12]
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	429a      	cmp	r2, r3
 800d638:	d207      	bcs.n	800d64a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	689a      	ldr	r2, [r3, #8]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d642:	425b      	negs	r3, r3
 800d644:	441a      	add	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	d105      	bne.n	800d65c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d002      	beq.n	800d65c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	3b01      	subs	r3, #1
 800d65a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	1c5a      	adds	r2, r3, #1
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d664:	697b      	ldr	r3, [r7, #20]
}
 800d666:	4618      	mov	r0, r3
 800d668:	3718      	adds	r7, #24
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b082      	sub	sp, #8
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
 800d676:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d018      	beq.n	800d6b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	68da      	ldr	r2, [r3, #12]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d688:	441a      	add	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	68da      	ldr	r2, [r3, #12]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	429a      	cmp	r2, r3
 800d698:	d303      	bcc.n	800d6a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	68d9      	ldr	r1, [r3, #12]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	6838      	ldr	r0, [r7, #0]
 800d6ae:	f001 fd11 	bl	800f0d4 <memcpy>
	}
}
 800d6b2:	bf00      	nop
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b084      	sub	sp, #16
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d6c2:	f001 f9e1 	bl	800ea88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6ce:	e011      	b.n	800d6f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d012      	beq.n	800d6fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	3324      	adds	r3, #36	; 0x24
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f000 fcd1 	bl	800e084 <xTaskRemoveFromEventList>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d001      	beq.n	800d6ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d6e8:	f000 fdaa 	bl	800e240 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d6ec:	7bfb      	ldrb	r3, [r7, #15]
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	dce9      	bgt.n	800d6d0 <prvUnlockQueue+0x16>
 800d6fc:	e000      	b.n	800d700 <prvUnlockQueue+0x46>
					break;
 800d6fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	22ff      	movs	r2, #255	; 0xff
 800d704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d708:	f001 f9f0 	bl	800eaec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d70c:	f001 f9bc 	bl	800ea88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d716:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d718:	e011      	b.n	800d73e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	691b      	ldr	r3, [r3, #16]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d012      	beq.n	800d748 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	3310      	adds	r3, #16
 800d726:	4618      	mov	r0, r3
 800d728:	f000 fcac 	bl	800e084 <xTaskRemoveFromEventList>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d001      	beq.n	800d736 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d732:	f000 fd85 	bl	800e240 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d736:	7bbb      	ldrb	r3, [r7, #14]
 800d738:	3b01      	subs	r3, #1
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d73e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d742:	2b00      	cmp	r3, #0
 800d744:	dce9      	bgt.n	800d71a <prvUnlockQueue+0x60>
 800d746:	e000      	b.n	800d74a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d748:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	22ff      	movs	r2, #255	; 0xff
 800d74e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d752:	f001 f9cb 	bl	800eaec <vPortExitCritical>
}
 800d756:	bf00      	nop
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b084      	sub	sp, #16
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d766:	f001 f98f 	bl	800ea88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d102      	bne.n	800d778 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d772:	2301      	movs	r3, #1
 800d774:	60fb      	str	r3, [r7, #12]
 800d776:	e001      	b.n	800d77c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d778:	2300      	movs	r3, #0
 800d77a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d77c:	f001 f9b6 	bl	800eaec <vPortExitCritical>

	return xReturn;
 800d780:	68fb      	ldr	r3, [r7, #12]
}
 800d782:	4618      	mov	r0, r3
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b084      	sub	sp, #16
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d792:	f001 f979 	bl	800ea88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d102      	bne.n	800d7a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	60fb      	str	r3, [r7, #12]
 800d7a6:	e001      	b.n	800d7ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7ac:	f001 f99e 	bl	800eaec <vPortExitCritical>

	return xReturn;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
	...

0800d7bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d7bc:	b480      	push	{r7}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	60fb      	str	r3, [r7, #12]
 800d7c8:	e016      	b.n	800d7f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d7ca:	4a10      	ldr	r2, [pc, #64]	; (800d80c <vQueueUnregisterQueue+0x50>)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	00db      	lsls	r3, r3, #3
 800d7d0:	4413      	add	r3, r2
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d10b      	bne.n	800d7f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d7da:	4a0c      	ldr	r2, [pc, #48]	; (800d80c <vQueueUnregisterQueue+0x50>)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2100      	movs	r1, #0
 800d7e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d7e4:	4a09      	ldr	r2, [pc, #36]	; (800d80c <vQueueUnregisterQueue+0x50>)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	00db      	lsls	r3, r3, #3
 800d7ea:	4413      	add	r3, r2
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	605a      	str	r2, [r3, #4]
				break;
 800d7f0:	e005      	b.n	800d7fe <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	60fb      	str	r3, [r7, #12]
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2b07      	cmp	r3, #7
 800d7fc:	d9e5      	bls.n	800d7ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d7fe:	bf00      	nop
 800d800:	3714      	adds	r7, #20
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop
 800d80c:	20008be0 	.word	0x20008be0

0800d810 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d810:	b580      	push	{r7, lr}
 800d812:	b08e      	sub	sp, #56	; 0x38
 800d814:	af04      	add	r7, sp, #16
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
 800d81c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10b      	bne.n	800d83c <xTaskCreateStatic+0x2c>
 800d824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d828:	b672      	cpsid	i
 800d82a:	f383 8811 	msr	BASEPRI, r3
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	b662      	cpsie	i
 800d838:	623b      	str	r3, [r7, #32]
 800d83a:	e7fe      	b.n	800d83a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10b      	bne.n	800d85a <xTaskCreateStatic+0x4a>
 800d842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d846:	b672      	cpsid	i
 800d848:	f383 8811 	msr	BASEPRI, r3
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	b662      	cpsie	i
 800d856:	61fb      	str	r3, [r7, #28]
 800d858:	e7fe      	b.n	800d858 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d85a:	2354      	movs	r3, #84	; 0x54
 800d85c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	2b54      	cmp	r3, #84	; 0x54
 800d862:	d00b      	beq.n	800d87c <xTaskCreateStatic+0x6c>
 800d864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d868:	b672      	cpsid	i
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	b662      	cpsie	i
 800d878:	61bb      	str	r3, [r7, #24]
 800d87a:	e7fe      	b.n	800d87a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d87c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d880:	2b00      	cmp	r3, #0
 800d882:	d01e      	beq.n	800d8c2 <xTaskCreateStatic+0xb2>
 800d884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d886:	2b00      	cmp	r3, #0
 800d888:	d01b      	beq.n	800d8c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d892:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d896:	2202      	movs	r2, #2
 800d898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d89c:	2300      	movs	r3, #0
 800d89e:	9303      	str	r3, [sp, #12]
 800d8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a2:	9302      	str	r3, [sp, #8]
 800d8a4:	f107 0314 	add.w	r3, r7, #20
 800d8a8:	9301      	str	r3, [sp, #4]
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	68b9      	ldr	r1, [r7, #8]
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f000 f850 	bl	800d95a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8bc:	f000 f8d6 	bl	800da6c <prvAddNewTaskToReadyList>
 800d8c0:	e001      	b.n	800d8c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d8c6:	697b      	ldr	r3, [r7, #20]
	}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3728      	adds	r7, #40	; 0x28
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b08c      	sub	sp, #48	; 0x30
 800d8d4:	af04      	add	r7, sp, #16
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	603b      	str	r3, [r7, #0]
 800d8dc:	4613      	mov	r3, r2
 800d8de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8e0:	88fb      	ldrh	r3, [r7, #6]
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f001 f9f1 	bl	800eccc <pvPortMalloc>
 800d8ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00e      	beq.n	800d910 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d8f2:	2054      	movs	r0, #84	; 0x54
 800d8f4:	f001 f9ea 	bl	800eccc <pvPortMalloc>
 800d8f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d003      	beq.n	800d908 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	631a      	str	r2, [r3, #48]	; 0x30
 800d906:	e005      	b.n	800d914 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d908:	6978      	ldr	r0, [r7, #20]
 800d90a:	f001 faa7 	bl	800ee5c <vPortFree>
 800d90e:	e001      	b.n	800d914 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d910:	2300      	movs	r3, #0
 800d912:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d017      	beq.n	800d94a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	2200      	movs	r2, #0
 800d91e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d922:	88fa      	ldrh	r2, [r7, #6]
 800d924:	2300      	movs	r3, #0
 800d926:	9303      	str	r3, [sp, #12]
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	9302      	str	r3, [sp, #8]
 800d92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92e:	9301      	str	r3, [sp, #4]
 800d930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	68b9      	ldr	r1, [r7, #8]
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f000 f80e 	bl	800d95a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d93e:	69f8      	ldr	r0, [r7, #28]
 800d940:	f000 f894 	bl	800da6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d944:	2301      	movs	r3, #1
 800d946:	61bb      	str	r3, [r7, #24]
 800d948:	e002      	b.n	800d950 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d94a:	f04f 33ff 	mov.w	r3, #4294967295
 800d94e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d950:	69bb      	ldr	r3, [r7, #24]
	}
 800d952:	4618      	mov	r0, r3
 800d954:	3720      	adds	r7, #32
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b088      	sub	sp, #32
 800d95e:	af00      	add	r7, sp, #0
 800d960:	60f8      	str	r0, [r7, #12]
 800d962:	60b9      	str	r1, [r7, #8]
 800d964:	607a      	str	r2, [r7, #4]
 800d966:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d96c:	6879      	ldr	r1, [r7, #4]
 800d96e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d972:	440b      	add	r3, r1
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	4413      	add	r3, r2
 800d978:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	f023 0307 	bic.w	r3, r3, #7
 800d980:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	f003 0307 	and.w	r3, r3, #7
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00b      	beq.n	800d9a4 <prvInitialiseNewTask+0x4a>
 800d98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d990:	b672      	cpsid	i
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	b662      	cpsie	i
 800d9a0:	617b      	str	r3, [r7, #20]
 800d9a2:	e7fe      	b.n	800d9a2 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d01f      	beq.n	800d9ea <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	61fb      	str	r3, [r7, #28]
 800d9ae:	e012      	b.n	800d9d6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	7819      	ldrb	r1, [r3, #0]
 800d9b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ba:	69fb      	ldr	r3, [r7, #28]
 800d9bc:	4413      	add	r3, r2
 800d9be:	3334      	adds	r3, #52	; 0x34
 800d9c0:	460a      	mov	r2, r1
 800d9c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d9c4:	68ba      	ldr	r2, [r7, #8]
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d006      	beq.n	800d9de <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	61fb      	str	r3, [r7, #28]
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	2b0f      	cmp	r3, #15
 800d9da:	d9e9      	bls.n	800d9b0 <prvInitialiseNewTask+0x56>
 800d9dc:	e000      	b.n	800d9e0 <prvInitialiseNewTask+0x86>
			{
				break;
 800d9de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d9e8:	e003      	b.n	800d9f2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f4:	2b06      	cmp	r3, #6
 800d9f6:	d901      	bls.n	800d9fc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d9f8:	2306      	movs	r3, #6
 800d9fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da06:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800da08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da0a:	2200      	movs	r2, #0
 800da0c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da10:	3304      	adds	r3, #4
 800da12:	4618      	mov	r0, r3
 800da14:	f7fe ff04 	bl	800c820 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1a:	3318      	adds	r3, #24
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fe feff 	bl	800c820 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2a:	f1c3 0207 	rsb	r2, r3, #7
 800da2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3a:	2200      	movs	r2, #0
 800da3c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	2200      	movs	r2, #0
 800da42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	68f9      	ldr	r1, [r7, #12]
 800da4a:	69b8      	ldr	r0, [r7, #24]
 800da4c:	f000 ff14 	bl	800e878 <pxPortInitialiseStack>
 800da50:	4602      	mov	r2, r0
 800da52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800da56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d002      	beq.n	800da62 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800da5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da62:	bf00      	nop
 800da64:	3720      	adds	r7, #32
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
	...

0800da6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800da74:	f001 f808 	bl	800ea88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800da78:	4b2a      	ldr	r3, [pc, #168]	; (800db24 <prvAddNewTaskToReadyList+0xb8>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	3301      	adds	r3, #1
 800da7e:	4a29      	ldr	r2, [pc, #164]	; (800db24 <prvAddNewTaskToReadyList+0xb8>)
 800da80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800da82:	4b29      	ldr	r3, [pc, #164]	; (800db28 <prvAddNewTaskToReadyList+0xbc>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d109      	bne.n	800da9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800da8a:	4a27      	ldr	r2, [pc, #156]	; (800db28 <prvAddNewTaskToReadyList+0xbc>)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800da90:	4b24      	ldr	r3, [pc, #144]	; (800db24 <prvAddNewTaskToReadyList+0xb8>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2b01      	cmp	r3, #1
 800da96:	d110      	bne.n	800daba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800da98:	f000 fbf6 	bl	800e288 <prvInitialiseTaskLists>
 800da9c:	e00d      	b.n	800daba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800da9e:	4b23      	ldr	r3, [pc, #140]	; (800db2c <prvAddNewTaskToReadyList+0xc0>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d109      	bne.n	800daba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800daa6:	4b20      	ldr	r3, [pc, #128]	; (800db28 <prvAddNewTaskToReadyList+0xbc>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d802      	bhi.n	800daba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dab4:	4a1c      	ldr	r2, [pc, #112]	; (800db28 <prvAddNewTaskToReadyList+0xbc>)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800daba:	4b1d      	ldr	r3, [pc, #116]	; (800db30 <prvAddNewTaskToReadyList+0xc4>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	3301      	adds	r3, #1
 800dac0:	4a1b      	ldr	r2, [pc, #108]	; (800db30 <prvAddNewTaskToReadyList+0xc4>)
 800dac2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac8:	2201      	movs	r2, #1
 800daca:	409a      	lsls	r2, r3
 800dacc:	4b19      	ldr	r3, [pc, #100]	; (800db34 <prvAddNewTaskToReadyList+0xc8>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4313      	orrs	r3, r2
 800dad2:	4a18      	ldr	r2, [pc, #96]	; (800db34 <prvAddNewTaskToReadyList+0xc8>)
 800dad4:	6013      	str	r3, [r2, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dada:	4613      	mov	r3, r2
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	4413      	add	r3, r2
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	4a15      	ldr	r2, [pc, #84]	; (800db38 <prvAddNewTaskToReadyList+0xcc>)
 800dae4:	441a      	add	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	3304      	adds	r3, #4
 800daea:	4619      	mov	r1, r3
 800daec:	4610      	mov	r0, r2
 800daee:	f7fe fea4 	bl	800c83a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800daf2:	f000 fffb 	bl	800eaec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800daf6:	4b0d      	ldr	r3, [pc, #52]	; (800db2c <prvAddNewTaskToReadyList+0xc0>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00e      	beq.n	800db1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dafe:	4b0a      	ldr	r3, [pc, #40]	; (800db28 <prvAddNewTaskToReadyList+0xbc>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db08:	429a      	cmp	r2, r3
 800db0a:	d207      	bcs.n	800db1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800db0c:	4b0b      	ldr	r3, [pc, #44]	; (800db3c <prvAddNewTaskToReadyList+0xd0>)
 800db0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db12:	601a      	str	r2, [r3, #0]
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db1c:	bf00      	nop
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	200003cc 	.word	0x200003cc
 800db28:	200002cc 	.word	0x200002cc
 800db2c:	200003d8 	.word	0x200003d8
 800db30:	200003e8 	.word	0x200003e8
 800db34:	200003d4 	.word	0x200003d4
 800db38:	200002d0 	.word	0x200002d0
 800db3c:	e000ed04 	.word	0xe000ed04

0800db40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db48:	2300      	movs	r3, #0
 800db4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d018      	beq.n	800db84 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db52:	4b14      	ldr	r3, [pc, #80]	; (800dba4 <vTaskDelay+0x64>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00b      	beq.n	800db72 <vTaskDelay+0x32>
 800db5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5e:	b672      	cpsid	i
 800db60:	f383 8811 	msr	BASEPRI, r3
 800db64:	f3bf 8f6f 	isb	sy
 800db68:	f3bf 8f4f 	dsb	sy
 800db6c:	b662      	cpsie	i
 800db6e:	60bb      	str	r3, [r7, #8]
 800db70:	e7fe      	b.n	800db70 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800db72:	f000 f87d 	bl	800dc70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db76:	2100      	movs	r1, #0
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 fe17 	bl	800e7ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db7e:	f000 f885 	bl	800dc8c <xTaskResumeAll>
 800db82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d107      	bne.n	800db9a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800db8a:	4b07      	ldr	r3, [pc, #28]	; (800dba8 <vTaskDelay+0x68>)
 800db8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db90:	601a      	str	r2, [r3, #0]
 800db92:	f3bf 8f4f 	dsb	sy
 800db96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db9a:	bf00      	nop
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	200003f4 	.word	0x200003f4
 800dba8:	e000ed04 	.word	0xe000ed04

0800dbac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b08a      	sub	sp, #40	; 0x28
 800dbb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dbba:	463a      	mov	r2, r7
 800dbbc:	1d39      	adds	r1, r7, #4
 800dbbe:	f107 0308 	add.w	r3, r7, #8
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7f2 fcbc 	bl	8000540 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dbc8:	6839      	ldr	r1, [r7, #0]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	9202      	str	r2, [sp, #8]
 800dbd0:	9301      	str	r3, [sp, #4]
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	9300      	str	r3, [sp, #0]
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	460a      	mov	r2, r1
 800dbda:	491f      	ldr	r1, [pc, #124]	; (800dc58 <vTaskStartScheduler+0xac>)
 800dbdc:	481f      	ldr	r0, [pc, #124]	; (800dc5c <vTaskStartScheduler+0xb0>)
 800dbde:	f7ff fe17 	bl	800d810 <xTaskCreateStatic>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	4b1e      	ldr	r3, [pc, #120]	; (800dc60 <vTaskStartScheduler+0xb4>)
 800dbe6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dbe8:	4b1d      	ldr	r3, [pc, #116]	; (800dc60 <vTaskStartScheduler+0xb4>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d002      	beq.n	800dbf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	617b      	str	r3, [r7, #20]
 800dbf4:	e001      	b.n	800dbfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d117      	bne.n	800dc30 <vTaskStartScheduler+0x84>
 800dc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc04:	b672      	cpsid	i
 800dc06:	f383 8811 	msr	BASEPRI, r3
 800dc0a:	f3bf 8f6f 	isb	sy
 800dc0e:	f3bf 8f4f 	dsb	sy
 800dc12:	b662      	cpsie	i
 800dc14:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc16:	4b13      	ldr	r3, [pc, #76]	; (800dc64 <vTaskStartScheduler+0xb8>)
 800dc18:	f04f 32ff 	mov.w	r2, #4294967295
 800dc1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc1e:	4b12      	ldr	r3, [pc, #72]	; (800dc68 <vTaskStartScheduler+0xbc>)
 800dc20:	2201      	movs	r2, #1
 800dc22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc24:	4b11      	ldr	r3, [pc, #68]	; (800dc6c <vTaskStartScheduler+0xc0>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc2a:	f000 feb1 	bl	800e990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc2e:	e00f      	b.n	800dc50 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc36:	d10b      	bne.n	800dc50 <vTaskStartScheduler+0xa4>
 800dc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3c:	b672      	cpsid	i
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	b662      	cpsie	i
 800dc4c:	60fb      	str	r3, [r7, #12]
 800dc4e:	e7fe      	b.n	800dc4e <vTaskStartScheduler+0xa2>
}
 800dc50:	bf00      	nop
 800dc52:	3718      	adds	r7, #24
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	0800f190 	.word	0x0800f190
 800dc5c:	0800e259 	.word	0x0800e259
 800dc60:	200003f0 	.word	0x200003f0
 800dc64:	200003ec 	.word	0x200003ec
 800dc68:	200003d8 	.word	0x200003d8
 800dc6c:	200003d0 	.word	0x200003d0

0800dc70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dc70:	b480      	push	{r7}
 800dc72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800dc74:	4b04      	ldr	r3, [pc, #16]	; (800dc88 <vTaskSuspendAll+0x18>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	4a03      	ldr	r2, [pc, #12]	; (800dc88 <vTaskSuspendAll+0x18>)
 800dc7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800dc7e:	bf00      	nop
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr
 800dc88:	200003f4 	.word	0x200003f4

0800dc8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dc92:	2300      	movs	r3, #0
 800dc94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dc96:	2300      	movs	r3, #0
 800dc98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dc9a:	4b42      	ldr	r3, [pc, #264]	; (800dda4 <xTaskResumeAll+0x118>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d10b      	bne.n	800dcba <xTaskResumeAll+0x2e>
 800dca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca6:	b672      	cpsid	i
 800dca8:	f383 8811 	msr	BASEPRI, r3
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f3bf 8f4f 	dsb	sy
 800dcb4:	b662      	cpsie	i
 800dcb6:	603b      	str	r3, [r7, #0]
 800dcb8:	e7fe      	b.n	800dcb8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dcba:	f000 fee5 	bl	800ea88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dcbe:	4b39      	ldr	r3, [pc, #228]	; (800dda4 <xTaskResumeAll+0x118>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	4a37      	ldr	r2, [pc, #220]	; (800dda4 <xTaskResumeAll+0x118>)
 800dcc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcc8:	4b36      	ldr	r3, [pc, #216]	; (800dda4 <xTaskResumeAll+0x118>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d161      	bne.n	800dd94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dcd0:	4b35      	ldr	r3, [pc, #212]	; (800dda8 <xTaskResumeAll+0x11c>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d05d      	beq.n	800dd94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dcd8:	e02e      	b.n	800dd38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcda:	4b34      	ldr	r3, [pc, #208]	; (800ddac <xTaskResumeAll+0x120>)
 800dcdc:	68db      	ldr	r3, [r3, #12]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	3318      	adds	r3, #24
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fe fe04 	bl	800c8f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	3304      	adds	r3, #4
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7fe fdff 	bl	800c8f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	409a      	lsls	r2, r3
 800dcfe:	4b2c      	ldr	r3, [pc, #176]	; (800ddb0 <xTaskResumeAll+0x124>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	4a2a      	ldr	r2, [pc, #168]	; (800ddb0 <xTaskResumeAll+0x124>)
 800dd06:	6013      	str	r3, [r2, #0]
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	4413      	add	r3, r2
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	4a27      	ldr	r2, [pc, #156]	; (800ddb4 <xTaskResumeAll+0x128>)
 800dd16:	441a      	add	r2, r3
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	3304      	adds	r3, #4
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	4610      	mov	r0, r2
 800dd20:	f7fe fd8b 	bl	800c83a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd28:	4b23      	ldr	r3, [pc, #140]	; (800ddb8 <xTaskResumeAll+0x12c>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d302      	bcc.n	800dd38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dd32:	4b22      	ldr	r3, [pc, #136]	; (800ddbc <xTaskResumeAll+0x130>)
 800dd34:	2201      	movs	r2, #1
 800dd36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd38:	4b1c      	ldr	r3, [pc, #112]	; (800ddac <xTaskResumeAll+0x120>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1cc      	bne.n	800dcda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d001      	beq.n	800dd4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dd46:	f000 fb3b 	bl	800e3c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dd4a:	4b1d      	ldr	r3, [pc, #116]	; (800ddc0 <xTaskResumeAll+0x134>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d010      	beq.n	800dd78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dd56:	f000 f859 	bl	800de0c <xTaskIncrementTick>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d002      	beq.n	800dd66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dd60:	4b16      	ldr	r3, [pc, #88]	; (800ddbc <xTaskResumeAll+0x130>)
 800dd62:	2201      	movs	r2, #1
 800dd64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	3b01      	subs	r3, #1
 800dd6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1f1      	bne.n	800dd56 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800dd72:	4b13      	ldr	r3, [pc, #76]	; (800ddc0 <xTaskResumeAll+0x134>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dd78:	4b10      	ldr	r3, [pc, #64]	; (800ddbc <xTaskResumeAll+0x130>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d009      	beq.n	800dd94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dd80:	2301      	movs	r3, #1
 800dd82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dd84:	4b0f      	ldr	r3, [pc, #60]	; (800ddc4 <xTaskResumeAll+0x138>)
 800dd86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd8a:	601a      	str	r2, [r3, #0]
 800dd8c:	f3bf 8f4f 	dsb	sy
 800dd90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd94:	f000 feaa 	bl	800eaec <vPortExitCritical>

	return xAlreadyYielded;
 800dd98:	68bb      	ldr	r3, [r7, #8]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	200003f4 	.word	0x200003f4
 800dda8:	200003cc 	.word	0x200003cc
 800ddac:	2000038c 	.word	0x2000038c
 800ddb0:	200003d4 	.word	0x200003d4
 800ddb4:	200002d0 	.word	0x200002d0
 800ddb8:	200002cc 	.word	0x200002cc
 800ddbc:	200003e0 	.word	0x200003e0
 800ddc0:	200003dc 	.word	0x200003dc
 800ddc4:	e000ed04 	.word	0xe000ed04

0800ddc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ddce:	4b05      	ldr	r3, [pc, #20]	; (800dde4 <xTaskGetTickCount+0x1c>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ddd4:	687b      	ldr	r3, [r7, #4]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	370c      	adds	r7, #12
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	200003d0 	.word	0x200003d0

0800dde8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ddee:	f000 ff2b 	bl	800ec48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ddf6:	4b04      	ldr	r3, [pc, #16]	; (800de08 <xTaskGetTickCountFromISR+0x20>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ddfc:	683b      	ldr	r3, [r7, #0]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	200003d0 	.word	0x200003d0

0800de0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b086      	sub	sp, #24
 800de10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800de12:	2300      	movs	r3, #0
 800de14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de16:	4b4f      	ldr	r3, [pc, #316]	; (800df54 <xTaskIncrementTick+0x148>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f040 8089 	bne.w	800df32 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800de20:	4b4d      	ldr	r3, [pc, #308]	; (800df58 <xTaskIncrementTick+0x14c>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	3301      	adds	r3, #1
 800de26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800de28:	4a4b      	ldr	r2, [pc, #300]	; (800df58 <xTaskIncrementTick+0x14c>)
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d121      	bne.n	800de78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800de34:	4b49      	ldr	r3, [pc, #292]	; (800df5c <xTaskIncrementTick+0x150>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00b      	beq.n	800de56 <xTaskIncrementTick+0x4a>
 800de3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de42:	b672      	cpsid	i
 800de44:	f383 8811 	msr	BASEPRI, r3
 800de48:	f3bf 8f6f 	isb	sy
 800de4c:	f3bf 8f4f 	dsb	sy
 800de50:	b662      	cpsie	i
 800de52:	603b      	str	r3, [r7, #0]
 800de54:	e7fe      	b.n	800de54 <xTaskIncrementTick+0x48>
 800de56:	4b41      	ldr	r3, [pc, #260]	; (800df5c <xTaskIncrementTick+0x150>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	60fb      	str	r3, [r7, #12]
 800de5c:	4b40      	ldr	r3, [pc, #256]	; (800df60 <xTaskIncrementTick+0x154>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a3e      	ldr	r2, [pc, #248]	; (800df5c <xTaskIncrementTick+0x150>)
 800de62:	6013      	str	r3, [r2, #0]
 800de64:	4a3e      	ldr	r2, [pc, #248]	; (800df60 <xTaskIncrementTick+0x154>)
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	6013      	str	r3, [r2, #0]
 800de6a:	4b3e      	ldr	r3, [pc, #248]	; (800df64 <xTaskIncrementTick+0x158>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	3301      	adds	r3, #1
 800de70:	4a3c      	ldr	r2, [pc, #240]	; (800df64 <xTaskIncrementTick+0x158>)
 800de72:	6013      	str	r3, [r2, #0]
 800de74:	f000 faa4 	bl	800e3c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800de78:	4b3b      	ldr	r3, [pc, #236]	; (800df68 <xTaskIncrementTick+0x15c>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	693a      	ldr	r2, [r7, #16]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d348      	bcc.n	800df14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de82:	4b36      	ldr	r3, [pc, #216]	; (800df5c <xTaskIncrementTick+0x150>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d104      	bne.n	800de96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de8c:	4b36      	ldr	r3, [pc, #216]	; (800df68 <xTaskIncrementTick+0x15c>)
 800de8e:	f04f 32ff 	mov.w	r2, #4294967295
 800de92:	601a      	str	r2, [r3, #0]
					break;
 800de94:	e03e      	b.n	800df14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de96:	4b31      	ldr	r3, [pc, #196]	; (800df5c <xTaskIncrementTick+0x150>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	68db      	ldr	r3, [r3, #12]
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dea6:	693a      	ldr	r2, [r7, #16]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d203      	bcs.n	800deb6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800deae:	4a2e      	ldr	r2, [pc, #184]	; (800df68 <xTaskIncrementTick+0x15c>)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800deb4:	e02e      	b.n	800df14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	3304      	adds	r3, #4
 800deba:	4618      	mov	r0, r3
 800debc:	f7fe fd1a 	bl	800c8f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d004      	beq.n	800ded2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	3318      	adds	r3, #24
 800decc:	4618      	mov	r0, r3
 800dece:	f7fe fd11 	bl	800c8f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded6:	2201      	movs	r2, #1
 800ded8:	409a      	lsls	r2, r3
 800deda:	4b24      	ldr	r3, [pc, #144]	; (800df6c <xTaskIncrementTick+0x160>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4313      	orrs	r3, r2
 800dee0:	4a22      	ldr	r2, [pc, #136]	; (800df6c <xTaskIncrementTick+0x160>)
 800dee2:	6013      	str	r3, [r2, #0]
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dee8:	4613      	mov	r3, r2
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	4413      	add	r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	4a1f      	ldr	r2, [pc, #124]	; (800df70 <xTaskIncrementTick+0x164>)
 800def2:	441a      	add	r2, r3
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	3304      	adds	r3, #4
 800def8:	4619      	mov	r1, r3
 800defa:	4610      	mov	r0, r2
 800defc:	f7fe fc9d 	bl	800c83a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df04:	4b1b      	ldr	r3, [pc, #108]	; (800df74 <xTaskIncrementTick+0x168>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d3b9      	bcc.n	800de82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800df0e:	2301      	movs	r3, #1
 800df10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df12:	e7b6      	b.n	800de82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df14:	4b17      	ldr	r3, [pc, #92]	; (800df74 <xTaskIncrementTick+0x168>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1a:	4915      	ldr	r1, [pc, #84]	; (800df70 <xTaskIncrementTick+0x164>)
 800df1c:	4613      	mov	r3, r2
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	4413      	add	r3, r2
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	440b      	add	r3, r1
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d907      	bls.n	800df3c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800df2c:	2301      	movs	r3, #1
 800df2e:	617b      	str	r3, [r7, #20]
 800df30:	e004      	b.n	800df3c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800df32:	4b11      	ldr	r3, [pc, #68]	; (800df78 <xTaskIncrementTick+0x16c>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	3301      	adds	r3, #1
 800df38:	4a0f      	ldr	r2, [pc, #60]	; (800df78 <xTaskIncrementTick+0x16c>)
 800df3a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800df3c:	4b0f      	ldr	r3, [pc, #60]	; (800df7c <xTaskIncrementTick+0x170>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d001      	beq.n	800df48 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800df44:	2301      	movs	r3, #1
 800df46:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800df48:	697b      	ldr	r3, [r7, #20]
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3718      	adds	r7, #24
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	200003f4 	.word	0x200003f4
 800df58:	200003d0 	.word	0x200003d0
 800df5c:	20000384 	.word	0x20000384
 800df60:	20000388 	.word	0x20000388
 800df64:	200003e4 	.word	0x200003e4
 800df68:	200003ec 	.word	0x200003ec
 800df6c:	200003d4 	.word	0x200003d4
 800df70:	200002d0 	.word	0x200002d0
 800df74:	200002cc 	.word	0x200002cc
 800df78:	200003dc 	.word	0x200003dc
 800df7c:	200003e0 	.word	0x200003e0

0800df80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800df80:	b480      	push	{r7}
 800df82:	b087      	sub	sp, #28
 800df84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800df86:	4b27      	ldr	r3, [pc, #156]	; (800e024 <vTaskSwitchContext+0xa4>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d003      	beq.n	800df96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800df8e:	4b26      	ldr	r3, [pc, #152]	; (800e028 <vTaskSwitchContext+0xa8>)
 800df90:	2201      	movs	r2, #1
 800df92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800df94:	e040      	b.n	800e018 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800df96:	4b24      	ldr	r3, [pc, #144]	; (800e028 <vTaskSwitchContext+0xa8>)
 800df98:	2200      	movs	r2, #0
 800df9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df9c:	4b23      	ldr	r3, [pc, #140]	; (800e02c <vTaskSwitchContext+0xac>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	fab3 f383 	clz	r3, r3
 800dfa8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dfaa:	7afb      	ldrb	r3, [r7, #11]
 800dfac:	f1c3 031f 	rsb	r3, r3, #31
 800dfb0:	617b      	str	r3, [r7, #20]
 800dfb2:	491f      	ldr	r1, [pc, #124]	; (800e030 <vTaskSwitchContext+0xb0>)
 800dfb4:	697a      	ldr	r2, [r7, #20]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	440b      	add	r3, r1
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d10b      	bne.n	800dfde <vTaskSwitchContext+0x5e>
	__asm volatile
 800dfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfca:	b672      	cpsid	i
 800dfcc:	f383 8811 	msr	BASEPRI, r3
 800dfd0:	f3bf 8f6f 	isb	sy
 800dfd4:	f3bf 8f4f 	dsb	sy
 800dfd8:	b662      	cpsie	i
 800dfda:	607b      	str	r3, [r7, #4]
 800dfdc:	e7fe      	b.n	800dfdc <vTaskSwitchContext+0x5c>
 800dfde:	697a      	ldr	r2, [r7, #20]
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	4413      	add	r3, r2
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	4a11      	ldr	r2, [pc, #68]	; (800e030 <vTaskSwitchContext+0xb0>)
 800dfea:	4413      	add	r3, r2
 800dfec:	613b      	str	r3, [r7, #16]
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	685a      	ldr	r2, [r3, #4]
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	605a      	str	r2, [r3, #4]
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	685a      	ldr	r2, [r3, #4]
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	3308      	adds	r3, #8
 800e000:	429a      	cmp	r2, r3
 800e002:	d104      	bne.n	800e00e <vTaskSwitchContext+0x8e>
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	685a      	ldr	r2, [r3, #4]
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	605a      	str	r2, [r3, #4]
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	68db      	ldr	r3, [r3, #12]
 800e014:	4a07      	ldr	r2, [pc, #28]	; (800e034 <vTaskSwitchContext+0xb4>)
 800e016:	6013      	str	r3, [r2, #0]
}
 800e018:	bf00      	nop
 800e01a:	371c      	adds	r7, #28
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr
 800e024:	200003f4 	.word	0x200003f4
 800e028:	200003e0 	.word	0x200003e0
 800e02c:	200003d4 	.word	0x200003d4
 800e030:	200002d0 	.word	0x200002d0
 800e034:	200002cc 	.word	0x200002cc

0800e038 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d10b      	bne.n	800e060 <vTaskPlaceOnEventList+0x28>
 800e048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04c:	b672      	cpsid	i
 800e04e:	f383 8811 	msr	BASEPRI, r3
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	f3bf 8f4f 	dsb	sy
 800e05a:	b662      	cpsie	i
 800e05c:	60fb      	str	r3, [r7, #12]
 800e05e:	e7fe      	b.n	800e05e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e060:	4b07      	ldr	r3, [pc, #28]	; (800e080 <vTaskPlaceOnEventList+0x48>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	3318      	adds	r3, #24
 800e066:	4619      	mov	r1, r3
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f7fe fc0a 	bl	800c882 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e06e:	2101      	movs	r1, #1
 800e070:	6838      	ldr	r0, [r7, #0]
 800e072:	f000 fb9b 	bl	800e7ac <prvAddCurrentTaskToDelayedList>
}
 800e076:	bf00      	nop
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	200002cc 	.word	0x200002cc

0800e084 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b086      	sub	sp, #24
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d10b      	bne.n	800e0b2 <xTaskRemoveFromEventList+0x2e>
 800e09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09e:	b672      	cpsid	i
 800e0a0:	f383 8811 	msr	BASEPRI, r3
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	f3bf 8f4f 	dsb	sy
 800e0ac:	b662      	cpsie	i
 800e0ae:	60fb      	str	r3, [r7, #12]
 800e0b0:	e7fe      	b.n	800e0b0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	3318      	adds	r3, #24
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fe fc1c 	bl	800c8f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0bc:	4b1d      	ldr	r3, [pc, #116]	; (800e134 <xTaskRemoveFromEventList+0xb0>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d11c      	bne.n	800e0fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	3304      	adds	r3, #4
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7fe fc13 	bl	800c8f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	409a      	lsls	r2, r3
 800e0d6:	4b18      	ldr	r3, [pc, #96]	; (800e138 <xTaskRemoveFromEventList+0xb4>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	4a16      	ldr	r2, [pc, #88]	; (800e138 <xTaskRemoveFromEventList+0xb4>)
 800e0de:	6013      	str	r3, [r2, #0]
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e4:	4613      	mov	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	4413      	add	r3, r2
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	4a13      	ldr	r2, [pc, #76]	; (800e13c <xTaskRemoveFromEventList+0xb8>)
 800e0ee:	441a      	add	r2, r3
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	3304      	adds	r3, #4
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	4610      	mov	r0, r2
 800e0f8:	f7fe fb9f 	bl	800c83a <vListInsertEnd>
 800e0fc:	e005      	b.n	800e10a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	3318      	adds	r3, #24
 800e102:	4619      	mov	r1, r3
 800e104:	480e      	ldr	r0, [pc, #56]	; (800e140 <xTaskRemoveFromEventList+0xbc>)
 800e106:	f7fe fb98 	bl	800c83a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e10e:	4b0d      	ldr	r3, [pc, #52]	; (800e144 <xTaskRemoveFromEventList+0xc0>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e114:	429a      	cmp	r2, r3
 800e116:	d905      	bls.n	800e124 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e118:	2301      	movs	r3, #1
 800e11a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e11c:	4b0a      	ldr	r3, [pc, #40]	; (800e148 <xTaskRemoveFromEventList+0xc4>)
 800e11e:	2201      	movs	r2, #1
 800e120:	601a      	str	r2, [r3, #0]
 800e122:	e001      	b.n	800e128 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e124:	2300      	movs	r3, #0
 800e126:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e128:	697b      	ldr	r3, [r7, #20]
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3718      	adds	r7, #24
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	200003f4 	.word	0x200003f4
 800e138:	200003d4 	.word	0x200003d4
 800e13c:	200002d0 	.word	0x200002d0
 800e140:	2000038c 	.word	0x2000038c
 800e144:	200002cc 	.word	0x200002cc
 800e148:	200003e0 	.word	0x200003e0

0800e14c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e154:	4b06      	ldr	r3, [pc, #24]	; (800e170 <vTaskInternalSetTimeOutState+0x24>)
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e15c:	4b05      	ldr	r3, [pc, #20]	; (800e174 <vTaskInternalSetTimeOutState+0x28>)
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	605a      	str	r2, [r3, #4]
}
 800e164:	bf00      	nop
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr
 800e170:	200003e4 	.word	0x200003e4
 800e174:	200003d0 	.word	0x200003d0

0800e178 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d10b      	bne.n	800e1a0 <xTaskCheckForTimeOut+0x28>
 800e188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e18c:	b672      	cpsid	i
 800e18e:	f383 8811 	msr	BASEPRI, r3
 800e192:	f3bf 8f6f 	isb	sy
 800e196:	f3bf 8f4f 	dsb	sy
 800e19a:	b662      	cpsie	i
 800e19c:	613b      	str	r3, [r7, #16]
 800e19e:	e7fe      	b.n	800e19e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10b      	bne.n	800e1be <xTaskCheckForTimeOut+0x46>
 800e1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1aa:	b672      	cpsid	i
 800e1ac:	f383 8811 	msr	BASEPRI, r3
 800e1b0:	f3bf 8f6f 	isb	sy
 800e1b4:	f3bf 8f4f 	dsb	sy
 800e1b8:	b662      	cpsie	i
 800e1ba:	60fb      	str	r3, [r7, #12]
 800e1bc:	e7fe      	b.n	800e1bc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800e1be:	f000 fc63 	bl	800ea88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e1c2:	4b1d      	ldr	r3, [pc, #116]	; (800e238 <xTaskCheckForTimeOut+0xc0>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	69ba      	ldr	r2, [r7, #24]
 800e1ce:	1ad3      	subs	r3, r2, r3
 800e1d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1da:	d102      	bne.n	800e1e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	61fb      	str	r3, [r7, #28]
 800e1e0:	e023      	b.n	800e22a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681a      	ldr	r2, [r3, #0]
 800e1e6:	4b15      	ldr	r3, [pc, #84]	; (800e23c <xTaskCheckForTimeOut+0xc4>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d007      	beq.n	800e1fe <xTaskCheckForTimeOut+0x86>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	69ba      	ldr	r2, [r7, #24]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d302      	bcc.n	800e1fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	61fb      	str	r3, [r7, #28]
 800e1fc:	e015      	b.n	800e22a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	697a      	ldr	r2, [r7, #20]
 800e204:	429a      	cmp	r2, r3
 800e206:	d20b      	bcs.n	800e220 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	1ad2      	subs	r2, r2, r3
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f7ff ff99 	bl	800e14c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e21a:	2300      	movs	r3, #0
 800e21c:	61fb      	str	r3, [r7, #28]
 800e21e:	e004      	b.n	800e22a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	2200      	movs	r2, #0
 800e224:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e226:	2301      	movs	r3, #1
 800e228:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e22a:	f000 fc5f 	bl	800eaec <vPortExitCritical>

	return xReturn;
 800e22e:	69fb      	ldr	r3, [r7, #28]
}
 800e230:	4618      	mov	r0, r3
 800e232:	3720      	adds	r7, #32
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	200003d0 	.word	0x200003d0
 800e23c:	200003e4 	.word	0x200003e4

0800e240 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e240:	b480      	push	{r7}
 800e242:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e244:	4b03      	ldr	r3, [pc, #12]	; (800e254 <vTaskMissedYield+0x14>)
 800e246:	2201      	movs	r2, #1
 800e248:	601a      	str	r2, [r3, #0]
}
 800e24a:	bf00      	nop
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	200003e0 	.word	0x200003e0

0800e258 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e260:	f000 f852 	bl	800e308 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e264:	4b06      	ldr	r3, [pc, #24]	; (800e280 <prvIdleTask+0x28>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d9f9      	bls.n	800e260 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e26c:	4b05      	ldr	r3, [pc, #20]	; (800e284 <prvIdleTask+0x2c>)
 800e26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e272:	601a      	str	r2, [r3, #0]
 800e274:	f3bf 8f4f 	dsb	sy
 800e278:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e27c:	e7f0      	b.n	800e260 <prvIdleTask+0x8>
 800e27e:	bf00      	nop
 800e280:	200002d0 	.word	0x200002d0
 800e284:	e000ed04 	.word	0xe000ed04

0800e288 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e28e:	2300      	movs	r3, #0
 800e290:	607b      	str	r3, [r7, #4]
 800e292:	e00c      	b.n	800e2ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	4613      	mov	r3, r2
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	4413      	add	r3, r2
 800e29c:	009b      	lsls	r3, r3, #2
 800e29e:	4a12      	ldr	r2, [pc, #72]	; (800e2e8 <prvInitialiseTaskLists+0x60>)
 800e2a0:	4413      	add	r3, r2
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fe fa9c 	bl	800c7e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	607b      	str	r3, [r7, #4]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2b06      	cmp	r3, #6
 800e2b2:	d9ef      	bls.n	800e294 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e2b4:	480d      	ldr	r0, [pc, #52]	; (800e2ec <prvInitialiseTaskLists+0x64>)
 800e2b6:	f7fe fa93 	bl	800c7e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e2ba:	480d      	ldr	r0, [pc, #52]	; (800e2f0 <prvInitialiseTaskLists+0x68>)
 800e2bc:	f7fe fa90 	bl	800c7e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e2c0:	480c      	ldr	r0, [pc, #48]	; (800e2f4 <prvInitialiseTaskLists+0x6c>)
 800e2c2:	f7fe fa8d 	bl	800c7e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e2c6:	480c      	ldr	r0, [pc, #48]	; (800e2f8 <prvInitialiseTaskLists+0x70>)
 800e2c8:	f7fe fa8a 	bl	800c7e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e2cc:	480b      	ldr	r0, [pc, #44]	; (800e2fc <prvInitialiseTaskLists+0x74>)
 800e2ce:	f7fe fa87 	bl	800c7e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e2d2:	4b0b      	ldr	r3, [pc, #44]	; (800e300 <prvInitialiseTaskLists+0x78>)
 800e2d4:	4a05      	ldr	r2, [pc, #20]	; (800e2ec <prvInitialiseTaskLists+0x64>)
 800e2d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e2d8:	4b0a      	ldr	r3, [pc, #40]	; (800e304 <prvInitialiseTaskLists+0x7c>)
 800e2da:	4a05      	ldr	r2, [pc, #20]	; (800e2f0 <prvInitialiseTaskLists+0x68>)
 800e2dc:	601a      	str	r2, [r3, #0]
}
 800e2de:	bf00      	nop
 800e2e0:	3708      	adds	r7, #8
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	200002d0 	.word	0x200002d0
 800e2ec:	2000035c 	.word	0x2000035c
 800e2f0:	20000370 	.word	0x20000370
 800e2f4:	2000038c 	.word	0x2000038c
 800e2f8:	200003a0 	.word	0x200003a0
 800e2fc:	200003b8 	.word	0x200003b8
 800e300:	20000384 	.word	0x20000384
 800e304:	20000388 	.word	0x20000388

0800e308 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b082      	sub	sp, #8
 800e30c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e30e:	e019      	b.n	800e344 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e310:	f000 fbba 	bl	800ea88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e314:	4b0f      	ldr	r3, [pc, #60]	; (800e354 <prvCheckTasksWaitingTermination+0x4c>)
 800e316:	68db      	ldr	r3, [r3, #12]
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	3304      	adds	r3, #4
 800e320:	4618      	mov	r0, r3
 800e322:	f7fe fae7 	bl	800c8f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e326:	4b0c      	ldr	r3, [pc, #48]	; (800e358 <prvCheckTasksWaitingTermination+0x50>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	3b01      	subs	r3, #1
 800e32c:	4a0a      	ldr	r2, [pc, #40]	; (800e358 <prvCheckTasksWaitingTermination+0x50>)
 800e32e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e330:	4b0a      	ldr	r3, [pc, #40]	; (800e35c <prvCheckTasksWaitingTermination+0x54>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	3b01      	subs	r3, #1
 800e336:	4a09      	ldr	r2, [pc, #36]	; (800e35c <prvCheckTasksWaitingTermination+0x54>)
 800e338:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e33a:	f000 fbd7 	bl	800eaec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 f80e 	bl	800e360 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e344:	4b05      	ldr	r3, [pc, #20]	; (800e35c <prvCheckTasksWaitingTermination+0x54>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d1e1      	bne.n	800e310 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e34c:	bf00      	nop
 800e34e:	3708      	adds	r7, #8
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	200003a0 	.word	0x200003a0
 800e358:	200003cc 	.word	0x200003cc
 800e35c:	200003b4 	.word	0x200003b4

0800e360 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d108      	bne.n	800e384 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e376:	4618      	mov	r0, r3
 800e378:	f000 fd70 	bl	800ee5c <vPortFree>
				vPortFree( pxTCB );
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 fd6d 	bl	800ee5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e382:	e019      	b.n	800e3b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d103      	bne.n	800e396 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 fd64 	bl	800ee5c <vPortFree>
	}
 800e394:	e010      	b.n	800e3b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d00b      	beq.n	800e3b8 <prvDeleteTCB+0x58>
 800e3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a4:	b672      	cpsid	i
 800e3a6:	f383 8811 	msr	BASEPRI, r3
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	b662      	cpsie	i
 800e3b4:	60fb      	str	r3, [r7, #12]
 800e3b6:	e7fe      	b.n	800e3b6 <prvDeleteTCB+0x56>
	}
 800e3b8:	bf00      	nop
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3c6:	4b0c      	ldr	r3, [pc, #48]	; (800e3f8 <prvResetNextTaskUnblockTime+0x38>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d104      	bne.n	800e3da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e3d0:	4b0a      	ldr	r3, [pc, #40]	; (800e3fc <prvResetNextTaskUnblockTime+0x3c>)
 800e3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e3d8:	e008      	b.n	800e3ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3da:	4b07      	ldr	r3, [pc, #28]	; (800e3f8 <prvResetNextTaskUnblockTime+0x38>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	68db      	ldr	r3, [r3, #12]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	4a04      	ldr	r2, [pc, #16]	; (800e3fc <prvResetNextTaskUnblockTime+0x3c>)
 800e3ea:	6013      	str	r3, [r2, #0]
}
 800e3ec:	bf00      	nop
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr
 800e3f8:	20000384 	.word	0x20000384
 800e3fc:	200003ec 	.word	0x200003ec

0800e400 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e400:	b480      	push	{r7}
 800e402:	b083      	sub	sp, #12
 800e404:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e406:	4b0b      	ldr	r3, [pc, #44]	; (800e434 <xTaskGetSchedulerState+0x34>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d102      	bne.n	800e414 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e40e:	2301      	movs	r3, #1
 800e410:	607b      	str	r3, [r7, #4]
 800e412:	e008      	b.n	800e426 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e414:	4b08      	ldr	r3, [pc, #32]	; (800e438 <xTaskGetSchedulerState+0x38>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d102      	bne.n	800e422 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e41c:	2302      	movs	r3, #2
 800e41e:	607b      	str	r3, [r7, #4]
 800e420:	e001      	b.n	800e426 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e422:	2300      	movs	r3, #0
 800e424:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e426:	687b      	ldr	r3, [r7, #4]
	}
 800e428:	4618      	mov	r0, r3
 800e42a:	370c      	adds	r7, #12
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr
 800e434:	200003d8 	.word	0x200003d8
 800e438:	200003f4 	.word	0x200003f4

0800e43c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e448:	2300      	movs	r3, #0
 800e44a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d069      	beq.n	800e526 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e456:	4b36      	ldr	r3, [pc, #216]	; (800e530 <xTaskPriorityInherit+0xf4>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d259      	bcs.n	800e514 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	2b00      	cmp	r3, #0
 800e466:	db06      	blt.n	800e476 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e468:	4b31      	ldr	r3, [pc, #196]	; (800e530 <xTaskPriorityInherit+0xf4>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e46e:	f1c3 0207 	rsb	r2, r3, #7
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	6959      	ldr	r1, [r3, #20]
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e47e:	4613      	mov	r3, r2
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4413      	add	r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4a2b      	ldr	r2, [pc, #172]	; (800e534 <xTaskPriorityInherit+0xf8>)
 800e488:	4413      	add	r3, r2
 800e48a:	4299      	cmp	r1, r3
 800e48c:	d13a      	bne.n	800e504 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	3304      	adds	r3, #4
 800e492:	4618      	mov	r0, r3
 800e494:	f7fe fa2e 	bl	800c8f4 <uxListRemove>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d115      	bne.n	800e4ca <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a2:	4924      	ldr	r1, [pc, #144]	; (800e534 <xTaskPriorityInherit+0xf8>)
 800e4a4:	4613      	mov	r3, r2
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	4413      	add	r3, r2
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	440b      	add	r3, r1
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10a      	bne.n	800e4ca <xTaskPriorityInherit+0x8e>
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e4be:	43da      	mvns	r2, r3
 800e4c0:	4b1d      	ldr	r3, [pc, #116]	; (800e538 <xTaskPriorityInherit+0xfc>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4013      	ands	r3, r2
 800e4c6:	4a1c      	ldr	r2, [pc, #112]	; (800e538 <xTaskPriorityInherit+0xfc>)
 800e4c8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4ca:	4b19      	ldr	r3, [pc, #100]	; (800e530 <xTaskPriorityInherit+0xf4>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4d8:	2201      	movs	r2, #1
 800e4da:	409a      	lsls	r2, r3
 800e4dc:	4b16      	ldr	r3, [pc, #88]	; (800e538 <xTaskPriorityInherit+0xfc>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4313      	orrs	r3, r2
 800e4e2:	4a15      	ldr	r2, [pc, #84]	; (800e538 <xTaskPriorityInherit+0xfc>)
 800e4e4:	6013      	str	r3, [r2, #0]
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	4413      	add	r3, r2
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	4a10      	ldr	r2, [pc, #64]	; (800e534 <xTaskPriorityInherit+0xf8>)
 800e4f4:	441a      	add	r2, r3
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	3304      	adds	r3, #4
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	f7fe f99c 	bl	800c83a <vListInsertEnd>
 800e502:	e004      	b.n	800e50e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e504:	4b0a      	ldr	r3, [pc, #40]	; (800e530 <xTaskPriorityInherit+0xf4>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e50e:	2301      	movs	r3, #1
 800e510:	60fb      	str	r3, [r7, #12]
 800e512:	e008      	b.n	800e526 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e518:	4b05      	ldr	r3, [pc, #20]	; (800e530 <xTaskPriorityInherit+0xf4>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e51e:	429a      	cmp	r2, r3
 800e520:	d201      	bcs.n	800e526 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e522:	2301      	movs	r3, #1
 800e524:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e526:	68fb      	ldr	r3, [r7, #12]
	}
 800e528:	4618      	mov	r0, r3
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	200002cc 	.word	0x200002cc
 800e534:	200002d0 	.word	0x200002d0
 800e538:	200003d4 	.word	0x200003d4

0800e53c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b086      	sub	sp, #24
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e548:	2300      	movs	r3, #0
 800e54a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d070      	beq.n	800e634 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e552:	4b3b      	ldr	r3, [pc, #236]	; (800e640 <xTaskPriorityDisinherit+0x104>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	693a      	ldr	r2, [r7, #16]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d00b      	beq.n	800e574 <xTaskPriorityDisinherit+0x38>
 800e55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e560:	b672      	cpsid	i
 800e562:	f383 8811 	msr	BASEPRI, r3
 800e566:	f3bf 8f6f 	isb	sy
 800e56a:	f3bf 8f4f 	dsb	sy
 800e56e:	b662      	cpsie	i
 800e570:	60fb      	str	r3, [r7, #12]
 800e572:	e7fe      	b.n	800e572 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d10b      	bne.n	800e594 <xTaskPriorityDisinherit+0x58>
 800e57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e580:	b672      	cpsid	i
 800e582:	f383 8811 	msr	BASEPRI, r3
 800e586:	f3bf 8f6f 	isb	sy
 800e58a:	f3bf 8f4f 	dsb	sy
 800e58e:	b662      	cpsie	i
 800e590:	60bb      	str	r3, [r7, #8]
 800e592:	e7fe      	b.n	800e592 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e598:	1e5a      	subs	r2, r3, #1
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d044      	beq.n	800e634 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d140      	bne.n	800e634 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	3304      	adds	r3, #4
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fe f99c 	bl	800c8f4 <uxListRemove>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d115      	bne.n	800e5ee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c6:	491f      	ldr	r1, [pc, #124]	; (800e644 <xTaskPriorityDisinherit+0x108>)
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	4413      	add	r3, r2
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	440b      	add	r3, r1
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d10a      	bne.n	800e5ee <xTaskPriorityDisinherit+0xb2>
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5dc:	2201      	movs	r2, #1
 800e5de:	fa02 f303 	lsl.w	r3, r2, r3
 800e5e2:	43da      	mvns	r2, r3
 800e5e4:	4b18      	ldr	r3, [pc, #96]	; (800e648 <xTaskPriorityDisinherit+0x10c>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4013      	ands	r3, r2
 800e5ea:	4a17      	ldr	r2, [pc, #92]	; (800e648 <xTaskPriorityDisinherit+0x10c>)
 800e5ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5fa:	f1c3 0207 	rsb	r2, r3, #7
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e606:	2201      	movs	r2, #1
 800e608:	409a      	lsls	r2, r3
 800e60a:	4b0f      	ldr	r3, [pc, #60]	; (800e648 <xTaskPriorityDisinherit+0x10c>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4313      	orrs	r3, r2
 800e610:	4a0d      	ldr	r2, [pc, #52]	; (800e648 <xTaskPriorityDisinherit+0x10c>)
 800e612:	6013      	str	r3, [r2, #0]
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e618:	4613      	mov	r3, r2
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	4413      	add	r3, r2
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	4a08      	ldr	r2, [pc, #32]	; (800e644 <xTaskPriorityDisinherit+0x108>)
 800e622:	441a      	add	r2, r3
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	3304      	adds	r3, #4
 800e628:	4619      	mov	r1, r3
 800e62a:	4610      	mov	r0, r2
 800e62c:	f7fe f905 	bl	800c83a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e630:	2301      	movs	r3, #1
 800e632:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e634:	697b      	ldr	r3, [r7, #20]
	}
 800e636:	4618      	mov	r0, r3
 800e638:	3718      	adds	r7, #24
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	200002cc 	.word	0x200002cc
 800e644:	200002d0 	.word	0x200002d0
 800e648:	200003d4 	.word	0x200003d4

0800e64c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b088      	sub	sp, #32
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e65a:	2301      	movs	r3, #1
 800e65c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	f000 8085 	beq.w	800e770 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d10b      	bne.n	800e686 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e672:	b672      	cpsid	i
 800e674:	f383 8811 	msr	BASEPRI, r3
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	f3bf 8f4f 	dsb	sy
 800e680:	b662      	cpsie	i
 800e682:	60fb      	str	r3, [r7, #12]
 800e684:	e7fe      	b.n	800e684 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e68a:	683a      	ldr	r2, [r7, #0]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d902      	bls.n	800e696 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	61fb      	str	r3, [r7, #28]
 800e694:	e002      	b.n	800e69c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e69a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e69c:	69bb      	ldr	r3, [r7, #24]
 800e69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6a0:	69fa      	ldr	r2, [r7, #28]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d064      	beq.n	800e770 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e6a6:	69bb      	ldr	r3, [r7, #24]
 800e6a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6aa:	697a      	ldr	r2, [r7, #20]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d15f      	bne.n	800e770 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e6b0:	4b31      	ldr	r3, [pc, #196]	; (800e778 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	69ba      	ldr	r2, [r7, #24]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d10b      	bne.n	800e6d2 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6be:	b672      	cpsid	i
 800e6c0:	f383 8811 	msr	BASEPRI, r3
 800e6c4:	f3bf 8f6f 	isb	sy
 800e6c8:	f3bf 8f4f 	dsb	sy
 800e6cc:	b662      	cpsie	i
 800e6ce:	60bb      	str	r3, [r7, #8]
 800e6d0:	e7fe      	b.n	800e6d0 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e6d8:	69bb      	ldr	r3, [r7, #24]
 800e6da:	69fa      	ldr	r2, [r7, #28]
 800e6dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	699b      	ldr	r3, [r3, #24]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	db04      	blt.n	800e6f0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	f1c3 0207 	rsb	r2, r3, #7
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e6f0:	69bb      	ldr	r3, [r7, #24]
 800e6f2:	6959      	ldr	r1, [r3, #20]
 800e6f4:	693a      	ldr	r2, [r7, #16]
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	4413      	add	r3, r2
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	4a1f      	ldr	r2, [pc, #124]	; (800e77c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e700:	4413      	add	r3, r2
 800e702:	4299      	cmp	r1, r3
 800e704:	d134      	bne.n	800e770 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	3304      	adds	r3, #4
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7fe f8f2 	bl	800c8f4 <uxListRemove>
 800e710:	4603      	mov	r3, r0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d115      	bne.n	800e742 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e71a:	4918      	ldr	r1, [pc, #96]	; (800e77c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e71c:	4613      	mov	r3, r2
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	4413      	add	r3, r2
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	440b      	add	r3, r1
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d10a      	bne.n	800e742 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e730:	2201      	movs	r2, #1
 800e732:	fa02 f303 	lsl.w	r3, r2, r3
 800e736:	43da      	mvns	r2, r3
 800e738:	4b11      	ldr	r3, [pc, #68]	; (800e780 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4013      	ands	r3, r2
 800e73e:	4a10      	ldr	r2, [pc, #64]	; (800e780 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e740:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e746:	2201      	movs	r2, #1
 800e748:	409a      	lsls	r2, r3
 800e74a:	4b0d      	ldr	r3, [pc, #52]	; (800e780 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4313      	orrs	r3, r2
 800e750:	4a0b      	ldr	r2, [pc, #44]	; (800e780 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e752:	6013      	str	r3, [r2, #0]
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e758:	4613      	mov	r3, r2
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	4413      	add	r3, r2
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	4a06      	ldr	r2, [pc, #24]	; (800e77c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e762:	441a      	add	r2, r3
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	3304      	adds	r3, #4
 800e768:	4619      	mov	r1, r3
 800e76a:	4610      	mov	r0, r2
 800e76c:	f7fe f865 	bl	800c83a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e770:	bf00      	nop
 800e772:	3720      	adds	r7, #32
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	200002cc 	.word	0x200002cc
 800e77c:	200002d0 	.word	0x200002d0
 800e780:	200003d4 	.word	0x200003d4

0800e784 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e784:	b480      	push	{r7}
 800e786:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e788:	4b07      	ldr	r3, [pc, #28]	; (800e7a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d004      	beq.n	800e79a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e790:	4b05      	ldr	r3, [pc, #20]	; (800e7a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e796:	3201      	adds	r2, #1
 800e798:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e79a:	4b03      	ldr	r3, [pc, #12]	; (800e7a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e79c:	681b      	ldr	r3, [r3, #0]
	}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr
 800e7a8:	200002cc 	.word	0x200002cc

0800e7ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e7b6:	4b29      	ldr	r3, [pc, #164]	; (800e85c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7bc:	4b28      	ldr	r3, [pc, #160]	; (800e860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	3304      	adds	r3, #4
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fe f896 	bl	800c8f4 <uxListRemove>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d10b      	bne.n	800e7e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e7ce:	4b24      	ldr	r3, [pc, #144]	; (800e860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e7da:	43da      	mvns	r2, r3
 800e7dc:	4b21      	ldr	r3, [pc, #132]	; (800e864 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4013      	ands	r3, r2
 800e7e2:	4a20      	ldr	r2, [pc, #128]	; (800e864 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e7e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ec:	d10a      	bne.n	800e804 <prvAddCurrentTaskToDelayedList+0x58>
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d007      	beq.n	800e804 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7f4:	4b1a      	ldr	r3, [pc, #104]	; (800e860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	3304      	adds	r3, #4
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	481a      	ldr	r0, [pc, #104]	; (800e868 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e7fe:	f7fe f81c 	bl	800c83a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e802:	e026      	b.n	800e852 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4413      	add	r3, r2
 800e80a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e80c:	4b14      	ldr	r3, [pc, #80]	; (800e860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	68ba      	ldr	r2, [r7, #8]
 800e812:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d209      	bcs.n	800e830 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e81c:	4b13      	ldr	r3, [pc, #76]	; (800e86c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	4b0f      	ldr	r3, [pc, #60]	; (800e860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	3304      	adds	r3, #4
 800e826:	4619      	mov	r1, r3
 800e828:	4610      	mov	r0, r2
 800e82a:	f7fe f82a 	bl	800c882 <vListInsert>
}
 800e82e:	e010      	b.n	800e852 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e830:	4b0f      	ldr	r3, [pc, #60]	; (800e870 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	4b0a      	ldr	r3, [pc, #40]	; (800e860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	3304      	adds	r3, #4
 800e83a:	4619      	mov	r1, r3
 800e83c:	4610      	mov	r0, r2
 800e83e:	f7fe f820 	bl	800c882 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e842:	4b0c      	ldr	r3, [pc, #48]	; (800e874 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	68ba      	ldr	r2, [r7, #8]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d202      	bcs.n	800e852 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e84c:	4a09      	ldr	r2, [pc, #36]	; (800e874 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	6013      	str	r3, [r2, #0]
}
 800e852:	bf00      	nop
 800e854:	3710      	adds	r7, #16
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	200003d0 	.word	0x200003d0
 800e860:	200002cc 	.word	0x200002cc
 800e864:	200003d4 	.word	0x200003d4
 800e868:	200003b8 	.word	0x200003b8
 800e86c:	20000388 	.word	0x20000388
 800e870:	20000384 	.word	0x20000384
 800e874:	200003ec 	.word	0x200003ec

0800e878 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e878:	b480      	push	{r7}
 800e87a:	b085      	sub	sp, #20
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	3b04      	subs	r3, #4
 800e888:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	3b04      	subs	r3, #4
 800e896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	f023 0201 	bic.w	r2, r3, #1
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	3b04      	subs	r3, #4
 800e8a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e8a8:	4a0c      	ldr	r2, [pc, #48]	; (800e8dc <pxPortInitialiseStack+0x64>)
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	3b14      	subs	r3, #20
 800e8b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	3b04      	subs	r3, #4
 800e8be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f06f 0202 	mvn.w	r2, #2
 800e8c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	3b20      	subs	r3, #32
 800e8cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3714      	adds	r7, #20
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr
 800e8dc:	0800e8e1 	.word	0x0800e8e1

0800e8e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b085      	sub	sp, #20
 800e8e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e8ea:	4b13      	ldr	r3, [pc, #76]	; (800e938 <prvTaskExitError+0x58>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f2:	d00b      	beq.n	800e90c <prvTaskExitError+0x2c>
 800e8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f8:	b672      	cpsid	i
 800e8fa:	f383 8811 	msr	BASEPRI, r3
 800e8fe:	f3bf 8f6f 	isb	sy
 800e902:	f3bf 8f4f 	dsb	sy
 800e906:	b662      	cpsie	i
 800e908:	60fb      	str	r3, [r7, #12]
 800e90a:	e7fe      	b.n	800e90a <prvTaskExitError+0x2a>
 800e90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e910:	b672      	cpsid	i
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	b662      	cpsie	i
 800e920:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e922:	bf00      	nop
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d0fc      	beq.n	800e924 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e92a:	bf00      	nop
 800e92c:	3714      	adds	r7, #20
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr
 800e936:	bf00      	nop
 800e938:	2000001c 	.word	0x2000001c
 800e93c:	00000000 	.word	0x00000000

0800e940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e940:	4b07      	ldr	r3, [pc, #28]	; (800e960 <pxCurrentTCBConst2>)
 800e942:	6819      	ldr	r1, [r3, #0]
 800e944:	6808      	ldr	r0, [r1, #0]
 800e946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94a:	f380 8809 	msr	PSP, r0
 800e94e:	f3bf 8f6f 	isb	sy
 800e952:	f04f 0000 	mov.w	r0, #0
 800e956:	f380 8811 	msr	BASEPRI, r0
 800e95a:	4770      	bx	lr
 800e95c:	f3af 8000 	nop.w

0800e960 <pxCurrentTCBConst2>:
 800e960:	200002cc 	.word	0x200002cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e964:	bf00      	nop
 800e966:	bf00      	nop

0800e968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e968:	4808      	ldr	r0, [pc, #32]	; (800e98c <prvPortStartFirstTask+0x24>)
 800e96a:	6800      	ldr	r0, [r0, #0]
 800e96c:	6800      	ldr	r0, [r0, #0]
 800e96e:	f380 8808 	msr	MSP, r0
 800e972:	f04f 0000 	mov.w	r0, #0
 800e976:	f380 8814 	msr	CONTROL, r0
 800e97a:	b662      	cpsie	i
 800e97c:	b661      	cpsie	f
 800e97e:	f3bf 8f4f 	dsb	sy
 800e982:	f3bf 8f6f 	isb	sy
 800e986:	df00      	svc	0
 800e988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e98a:	bf00      	nop
 800e98c:	e000ed08 	.word	0xe000ed08

0800e990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e996:	4b36      	ldr	r3, [pc, #216]	; (800ea70 <xPortStartScheduler+0xe0>)
 800e998:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	22ff      	movs	r2, #255	; 0xff
 800e9a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	b2db      	uxtb	r3, r3
 800e9ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e9b0:	78fb      	ldrb	r3, [r7, #3]
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e9b8:	b2da      	uxtb	r2, r3
 800e9ba:	4b2e      	ldr	r3, [pc, #184]	; (800ea74 <xPortStartScheduler+0xe4>)
 800e9bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e9be:	4b2e      	ldr	r3, [pc, #184]	; (800ea78 <xPortStartScheduler+0xe8>)
 800e9c0:	2207      	movs	r2, #7
 800e9c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9c4:	e009      	b.n	800e9da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e9c6:	4b2c      	ldr	r3, [pc, #176]	; (800ea78 <xPortStartScheduler+0xe8>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	3b01      	subs	r3, #1
 800e9cc:	4a2a      	ldr	r2, [pc, #168]	; (800ea78 <xPortStartScheduler+0xe8>)
 800e9ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e9d0:	78fb      	ldrb	r3, [r7, #3]
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	005b      	lsls	r3, r3, #1
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9da:	78fb      	ldrb	r3, [r7, #3]
 800e9dc:	b2db      	uxtb	r3, r3
 800e9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9e2:	2b80      	cmp	r3, #128	; 0x80
 800e9e4:	d0ef      	beq.n	800e9c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e9e6:	4b24      	ldr	r3, [pc, #144]	; (800ea78 <xPortStartScheduler+0xe8>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f1c3 0307 	rsb	r3, r3, #7
 800e9ee:	2b04      	cmp	r3, #4
 800e9f0:	d00b      	beq.n	800ea0a <xPortStartScheduler+0x7a>
 800e9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f6:	b672      	cpsid	i
 800e9f8:	f383 8811 	msr	BASEPRI, r3
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	f3bf 8f4f 	dsb	sy
 800ea04:	b662      	cpsie	i
 800ea06:	60bb      	str	r3, [r7, #8]
 800ea08:	e7fe      	b.n	800ea08 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ea0a:	4b1b      	ldr	r3, [pc, #108]	; (800ea78 <xPortStartScheduler+0xe8>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	021b      	lsls	r3, r3, #8
 800ea10:	4a19      	ldr	r2, [pc, #100]	; (800ea78 <xPortStartScheduler+0xe8>)
 800ea12:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ea14:	4b18      	ldr	r3, [pc, #96]	; (800ea78 <xPortStartScheduler+0xe8>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ea1c:	4a16      	ldr	r2, [pc, #88]	; (800ea78 <xPortStartScheduler+0xe8>)
 800ea1e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	b2da      	uxtb	r2, r3
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ea28:	4b14      	ldr	r3, [pc, #80]	; (800ea7c <xPortStartScheduler+0xec>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a13      	ldr	r2, [pc, #76]	; (800ea7c <xPortStartScheduler+0xec>)
 800ea2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ea32:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ea34:	4b11      	ldr	r3, [pc, #68]	; (800ea7c <xPortStartScheduler+0xec>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4a10      	ldr	r2, [pc, #64]	; (800ea7c <xPortStartScheduler+0xec>)
 800ea3a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ea3e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ea40:	f000 f8d4 	bl	800ebec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ea44:	4b0e      	ldr	r3, [pc, #56]	; (800ea80 <xPortStartScheduler+0xf0>)
 800ea46:	2200      	movs	r2, #0
 800ea48:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ea4a:	f000 f8f3 	bl	800ec34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ea4e:	4b0d      	ldr	r3, [pc, #52]	; (800ea84 <xPortStartScheduler+0xf4>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	4a0c      	ldr	r2, [pc, #48]	; (800ea84 <xPortStartScheduler+0xf4>)
 800ea54:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ea58:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ea5a:	f7ff ff85 	bl	800e968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ea5e:	f7ff fa8f 	bl	800df80 <vTaskSwitchContext>
	prvTaskExitError();
 800ea62:	f7ff ff3d 	bl	800e8e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ea66:	2300      	movs	r3, #0
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3710      	adds	r7, #16
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	e000e400 	.word	0xe000e400
 800ea74:	200003f8 	.word	0x200003f8
 800ea78:	200003fc 	.word	0x200003fc
 800ea7c:	e000ed20 	.word	0xe000ed20
 800ea80:	2000001c 	.word	0x2000001c
 800ea84:	e000ef34 	.word	0xe000ef34

0800ea88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea92:	b672      	cpsid	i
 800ea94:	f383 8811 	msr	BASEPRI, r3
 800ea98:	f3bf 8f6f 	isb	sy
 800ea9c:	f3bf 8f4f 	dsb	sy
 800eaa0:	b662      	cpsie	i
 800eaa2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eaa4:	4b0f      	ldr	r3, [pc, #60]	; (800eae4 <vPortEnterCritical+0x5c>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	4a0e      	ldr	r2, [pc, #56]	; (800eae4 <vPortEnterCritical+0x5c>)
 800eaac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eaae:	4b0d      	ldr	r3, [pc, #52]	; (800eae4 <vPortEnterCritical+0x5c>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d110      	bne.n	800ead8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eab6:	4b0c      	ldr	r3, [pc, #48]	; (800eae8 <vPortEnterCritical+0x60>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d00b      	beq.n	800ead8 <vPortEnterCritical+0x50>
 800eac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac4:	b672      	cpsid	i
 800eac6:	f383 8811 	msr	BASEPRI, r3
 800eaca:	f3bf 8f6f 	isb	sy
 800eace:	f3bf 8f4f 	dsb	sy
 800ead2:	b662      	cpsie	i
 800ead4:	603b      	str	r3, [r7, #0]
 800ead6:	e7fe      	b.n	800ead6 <vPortEnterCritical+0x4e>
	}
}
 800ead8:	bf00      	nop
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr
 800eae4:	2000001c 	.word	0x2000001c
 800eae8:	e000ed04 	.word	0xe000ed04

0800eaec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eaf2:	4b12      	ldr	r3, [pc, #72]	; (800eb3c <vPortExitCritical+0x50>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d10b      	bne.n	800eb12 <vPortExitCritical+0x26>
 800eafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eafe:	b672      	cpsid	i
 800eb00:	f383 8811 	msr	BASEPRI, r3
 800eb04:	f3bf 8f6f 	isb	sy
 800eb08:	f3bf 8f4f 	dsb	sy
 800eb0c:	b662      	cpsie	i
 800eb0e:	607b      	str	r3, [r7, #4]
 800eb10:	e7fe      	b.n	800eb10 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800eb12:	4b0a      	ldr	r3, [pc, #40]	; (800eb3c <vPortExitCritical+0x50>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	3b01      	subs	r3, #1
 800eb18:	4a08      	ldr	r2, [pc, #32]	; (800eb3c <vPortExitCritical+0x50>)
 800eb1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eb1c:	4b07      	ldr	r3, [pc, #28]	; (800eb3c <vPortExitCritical+0x50>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d104      	bne.n	800eb2e <vPortExitCritical+0x42>
 800eb24:	2300      	movs	r3, #0
 800eb26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800eb2e:	bf00      	nop
 800eb30:	370c      	adds	r7, #12
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	2000001c 	.word	0x2000001c

0800eb40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eb40:	f3ef 8009 	mrs	r0, PSP
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	4b15      	ldr	r3, [pc, #84]	; (800eba0 <pxCurrentTCBConst>)
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	f01e 0f10 	tst.w	lr, #16
 800eb50:	bf08      	it	eq
 800eb52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eb56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb5a:	6010      	str	r0, [r2, #0]
 800eb5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eb60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eb64:	b672      	cpsid	i
 800eb66:	f380 8811 	msr	BASEPRI, r0
 800eb6a:	f3bf 8f4f 	dsb	sy
 800eb6e:	f3bf 8f6f 	isb	sy
 800eb72:	b662      	cpsie	i
 800eb74:	f7ff fa04 	bl	800df80 <vTaskSwitchContext>
 800eb78:	f04f 0000 	mov.w	r0, #0
 800eb7c:	f380 8811 	msr	BASEPRI, r0
 800eb80:	bc09      	pop	{r0, r3}
 800eb82:	6819      	ldr	r1, [r3, #0]
 800eb84:	6808      	ldr	r0, [r1, #0]
 800eb86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb8a:	f01e 0f10 	tst.w	lr, #16
 800eb8e:	bf08      	it	eq
 800eb90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eb94:	f380 8809 	msr	PSP, r0
 800eb98:	f3bf 8f6f 	isb	sy
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop

0800eba0 <pxCurrentTCBConst>:
 800eba0:	200002cc 	.word	0x200002cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eba4:	bf00      	nop
 800eba6:	bf00      	nop

0800eba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
	__asm volatile
 800ebae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb2:	b672      	cpsid	i
 800ebb4:	f383 8811 	msr	BASEPRI, r3
 800ebb8:	f3bf 8f6f 	isb	sy
 800ebbc:	f3bf 8f4f 	dsb	sy
 800ebc0:	b662      	cpsie	i
 800ebc2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ebc4:	f7ff f922 	bl	800de0c <xTaskIncrementTick>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d003      	beq.n	800ebd6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ebce:	4b06      	ldr	r3, [pc, #24]	; (800ebe8 <SysTick_Handler+0x40>)
 800ebd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebd4:	601a      	str	r2, [r3, #0]
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ebe0:	bf00      	nop
 800ebe2:	3708      	adds	r7, #8
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	e000ed04 	.word	0xe000ed04

0800ebec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ebec:	b480      	push	{r7}
 800ebee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ebf0:	4b0b      	ldr	r3, [pc, #44]	; (800ec20 <vPortSetupTimerInterrupt+0x34>)
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ebf6:	4b0b      	ldr	r3, [pc, #44]	; (800ec24 <vPortSetupTimerInterrupt+0x38>)
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ebfc:	4b0a      	ldr	r3, [pc, #40]	; (800ec28 <vPortSetupTimerInterrupt+0x3c>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4a0a      	ldr	r2, [pc, #40]	; (800ec2c <vPortSetupTimerInterrupt+0x40>)
 800ec02:	fba2 2303 	umull	r2, r3, r2, r3
 800ec06:	099b      	lsrs	r3, r3, #6
 800ec08:	4a09      	ldr	r2, [pc, #36]	; (800ec30 <vPortSetupTimerInterrupt+0x44>)
 800ec0a:	3b01      	subs	r3, #1
 800ec0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ec0e:	4b04      	ldr	r3, [pc, #16]	; (800ec20 <vPortSetupTimerInterrupt+0x34>)
 800ec10:	2207      	movs	r2, #7
 800ec12:	601a      	str	r2, [r3, #0]
}
 800ec14:	bf00      	nop
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop
 800ec20:	e000e010 	.word	0xe000e010
 800ec24:	e000e018 	.word	0xe000e018
 800ec28:	20000010 	.word	0x20000010
 800ec2c:	10624dd3 	.word	0x10624dd3
 800ec30:	e000e014 	.word	0xe000e014

0800ec34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ec34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ec44 <vPortEnableVFP+0x10>
 800ec38:	6801      	ldr	r1, [r0, #0]
 800ec3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ec3e:	6001      	str	r1, [r0, #0]
 800ec40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ec42:	bf00      	nop
 800ec44:	e000ed88 	.word	0xe000ed88

0800ec48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ec48:	b480      	push	{r7}
 800ec4a:	b085      	sub	sp, #20
 800ec4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ec4e:	f3ef 8305 	mrs	r3, IPSR
 800ec52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2b0f      	cmp	r3, #15
 800ec58:	d915      	bls.n	800ec86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ec5a:	4a18      	ldr	r2, [pc, #96]	; (800ecbc <vPortValidateInterruptPriority+0x74>)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	4413      	add	r3, r2
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec64:	4b16      	ldr	r3, [pc, #88]	; (800ecc0 <vPortValidateInterruptPriority+0x78>)
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	7afa      	ldrb	r2, [r7, #11]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d20b      	bcs.n	800ec86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ec6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec72:	b672      	cpsid	i
 800ec74:	f383 8811 	msr	BASEPRI, r3
 800ec78:	f3bf 8f6f 	isb	sy
 800ec7c:	f3bf 8f4f 	dsb	sy
 800ec80:	b662      	cpsie	i
 800ec82:	607b      	str	r3, [r7, #4]
 800ec84:	e7fe      	b.n	800ec84 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec86:	4b0f      	ldr	r3, [pc, #60]	; (800ecc4 <vPortValidateInterruptPriority+0x7c>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ec8e:	4b0e      	ldr	r3, [pc, #56]	; (800ecc8 <vPortValidateInterruptPriority+0x80>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d90b      	bls.n	800ecae <vPortValidateInterruptPriority+0x66>
 800ec96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9a:	b672      	cpsid	i
 800ec9c:	f383 8811 	msr	BASEPRI, r3
 800eca0:	f3bf 8f6f 	isb	sy
 800eca4:	f3bf 8f4f 	dsb	sy
 800eca8:	b662      	cpsie	i
 800ecaa:	603b      	str	r3, [r7, #0]
 800ecac:	e7fe      	b.n	800ecac <vPortValidateInterruptPriority+0x64>
	}
 800ecae:	bf00      	nop
 800ecb0:	3714      	adds	r7, #20
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	e000e3f0 	.word	0xe000e3f0
 800ecc0:	200003f8 	.word	0x200003f8
 800ecc4:	e000ed0c 	.word	0xe000ed0c
 800ecc8:	200003fc 	.word	0x200003fc

0800eccc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b08a      	sub	sp, #40	; 0x28
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ecd8:	f7fe ffca 	bl	800dc70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ecdc:	4b5a      	ldr	r3, [pc, #360]	; (800ee48 <pvPortMalloc+0x17c>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d101      	bne.n	800ece8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ece4:	f000 f916 	bl	800ef14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ece8:	4b58      	ldr	r3, [pc, #352]	; (800ee4c <pvPortMalloc+0x180>)
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	4013      	ands	r3, r2
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f040 8090 	bne.w	800ee16 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d01e      	beq.n	800ed3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ecfc:	2208      	movs	r2, #8
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	4413      	add	r3, r2
 800ed02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f003 0307 	and.w	r3, r3, #7
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d015      	beq.n	800ed3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f023 0307 	bic.w	r3, r3, #7
 800ed14:	3308      	adds	r3, #8
 800ed16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f003 0307 	and.w	r3, r3, #7
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00b      	beq.n	800ed3a <pvPortMalloc+0x6e>
 800ed22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed26:	b672      	cpsid	i
 800ed28:	f383 8811 	msr	BASEPRI, r3
 800ed2c:	f3bf 8f6f 	isb	sy
 800ed30:	f3bf 8f4f 	dsb	sy
 800ed34:	b662      	cpsie	i
 800ed36:	617b      	str	r3, [r7, #20]
 800ed38:	e7fe      	b.n	800ed38 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d06a      	beq.n	800ee16 <pvPortMalloc+0x14a>
 800ed40:	4b43      	ldr	r3, [pc, #268]	; (800ee50 <pvPortMalloc+0x184>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d865      	bhi.n	800ee16 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ed4a:	4b42      	ldr	r3, [pc, #264]	; (800ee54 <pvPortMalloc+0x188>)
 800ed4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ed4e:	4b41      	ldr	r3, [pc, #260]	; (800ee54 <pvPortMalloc+0x188>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed54:	e004      	b.n	800ed60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ed56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d903      	bls.n	800ed72 <pvPortMalloc+0xa6>
 800ed6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d1f1      	bne.n	800ed56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed72:	4b35      	ldr	r3, [pc, #212]	; (800ee48 <pvPortMalloc+0x17c>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d04c      	beq.n	800ee16 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed7c:	6a3b      	ldr	r3, [r7, #32]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	2208      	movs	r2, #8
 800ed82:	4413      	add	r3, r2
 800ed84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	6a3b      	ldr	r3, [r7, #32]
 800ed8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed90:	685a      	ldr	r2, [r3, #4]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	1ad2      	subs	r2, r2, r3
 800ed96:	2308      	movs	r3, #8
 800ed98:	005b      	lsls	r3, r3, #1
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d920      	bls.n	800ede0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4413      	add	r3, r2
 800eda4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	f003 0307 	and.w	r3, r3, #7
 800edac:	2b00      	cmp	r3, #0
 800edae:	d00b      	beq.n	800edc8 <pvPortMalloc+0xfc>
 800edb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb4:	b672      	cpsid	i
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	b662      	cpsie	i
 800edc4:	613b      	str	r3, [r7, #16]
 800edc6:	e7fe      	b.n	800edc6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800edc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edca:	685a      	ldr	r2, [r3, #4]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	1ad2      	subs	r2, r2, r3
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800edd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800edda:	69b8      	ldr	r0, [r7, #24]
 800eddc:	f000 f8fc 	bl	800efd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ede0:	4b1b      	ldr	r3, [pc, #108]	; (800ee50 <pvPortMalloc+0x184>)
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	4a19      	ldr	r2, [pc, #100]	; (800ee50 <pvPortMalloc+0x184>)
 800edec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800edee:	4b18      	ldr	r3, [pc, #96]	; (800ee50 <pvPortMalloc+0x184>)
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	4b19      	ldr	r3, [pc, #100]	; (800ee58 <pvPortMalloc+0x18c>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d203      	bcs.n	800ee02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800edfa:	4b15      	ldr	r3, [pc, #84]	; (800ee50 <pvPortMalloc+0x184>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	4a16      	ldr	r2, [pc, #88]	; (800ee58 <pvPortMalloc+0x18c>)
 800ee00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ee02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee04:	685a      	ldr	r2, [r3, #4]
 800ee06:	4b11      	ldr	r3, [pc, #68]	; (800ee4c <pvPortMalloc+0x180>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	431a      	orrs	r2, r3
 800ee0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ee10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee12:	2200      	movs	r2, #0
 800ee14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ee16:	f7fe ff39 	bl	800dc8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	f003 0307 	and.w	r3, r3, #7
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d00b      	beq.n	800ee3c <pvPortMalloc+0x170>
 800ee24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee28:	b672      	cpsid	i
 800ee2a:	f383 8811 	msr	BASEPRI, r3
 800ee2e:	f3bf 8f6f 	isb	sy
 800ee32:	f3bf 8f4f 	dsb	sy
 800ee36:	b662      	cpsie	i
 800ee38:	60fb      	str	r3, [r7, #12]
 800ee3a:	e7fe      	b.n	800ee3a <pvPortMalloc+0x16e>
	return pvReturn;
 800ee3c:	69fb      	ldr	r3, [r7, #28]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3728      	adds	r7, #40	; 0x28
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	20004008 	.word	0x20004008
 800ee4c:	20004014 	.word	0x20004014
 800ee50:	2000400c 	.word	0x2000400c
 800ee54:	20004000 	.word	0x20004000
 800ee58:	20004010 	.word	0x20004010

0800ee5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d04a      	beq.n	800ef04 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee6e:	2308      	movs	r3, #8
 800ee70:	425b      	negs	r3, r3
 800ee72:	697a      	ldr	r2, [r7, #20]
 800ee74:	4413      	add	r3, r2
 800ee76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	685a      	ldr	r2, [r3, #4]
 800ee80:	4b22      	ldr	r3, [pc, #136]	; (800ef0c <vPortFree+0xb0>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	4013      	ands	r3, r2
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d10b      	bne.n	800eea2 <vPortFree+0x46>
 800ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8e:	b672      	cpsid	i
 800ee90:	f383 8811 	msr	BASEPRI, r3
 800ee94:	f3bf 8f6f 	isb	sy
 800ee98:	f3bf 8f4f 	dsb	sy
 800ee9c:	b662      	cpsie	i
 800ee9e:	60fb      	str	r3, [r7, #12]
 800eea0:	e7fe      	b.n	800eea0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d00b      	beq.n	800eec2 <vPortFree+0x66>
 800eeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeae:	b672      	cpsid	i
 800eeb0:	f383 8811 	msr	BASEPRI, r3
 800eeb4:	f3bf 8f6f 	isb	sy
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	b662      	cpsie	i
 800eebe:	60bb      	str	r3, [r7, #8]
 800eec0:	e7fe      	b.n	800eec0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	685a      	ldr	r2, [r3, #4]
 800eec6:	4b11      	ldr	r3, [pc, #68]	; (800ef0c <vPortFree+0xb0>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4013      	ands	r3, r2
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d019      	beq.n	800ef04 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d115      	bne.n	800ef04 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	685a      	ldr	r2, [r3, #4]
 800eedc:	4b0b      	ldr	r3, [pc, #44]	; (800ef0c <vPortFree+0xb0>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	43db      	mvns	r3, r3
 800eee2:	401a      	ands	r2, r3
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eee8:	f7fe fec2 	bl	800dc70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	685a      	ldr	r2, [r3, #4]
 800eef0:	4b07      	ldr	r3, [pc, #28]	; (800ef10 <vPortFree+0xb4>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4413      	add	r3, r2
 800eef6:	4a06      	ldr	r2, [pc, #24]	; (800ef10 <vPortFree+0xb4>)
 800eef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eefa:	6938      	ldr	r0, [r7, #16]
 800eefc:	f000 f86c 	bl	800efd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ef00:	f7fe fec4 	bl	800dc8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ef04:	bf00      	nop
 800ef06:	3718      	adds	r7, #24
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}
 800ef0c:	20004014 	.word	0x20004014
 800ef10:	2000400c 	.word	0x2000400c

0800ef14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ef14:	b480      	push	{r7}
 800ef16:	b085      	sub	sp, #20
 800ef18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ef1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ef1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ef20:	4b27      	ldr	r3, [pc, #156]	; (800efc0 <prvHeapInit+0xac>)
 800ef22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f003 0307 	and.w	r3, r3, #7
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00c      	beq.n	800ef48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	3307      	adds	r3, #7
 800ef32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f023 0307 	bic.w	r3, r3, #7
 800ef3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ef3c:	68ba      	ldr	r2, [r7, #8]
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	4a1f      	ldr	r2, [pc, #124]	; (800efc0 <prvHeapInit+0xac>)
 800ef44:	4413      	add	r3, r2
 800ef46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef4c:	4a1d      	ldr	r2, [pc, #116]	; (800efc4 <prvHeapInit+0xb0>)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef52:	4b1c      	ldr	r3, [pc, #112]	; (800efc4 <prvHeapInit+0xb0>)
 800ef54:	2200      	movs	r2, #0
 800ef56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	68ba      	ldr	r2, [r7, #8]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef60:	2208      	movs	r2, #8
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	1a9b      	subs	r3, r3, r2
 800ef66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f023 0307 	bic.w	r3, r3, #7
 800ef6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	4a15      	ldr	r2, [pc, #84]	; (800efc8 <prvHeapInit+0xb4>)
 800ef74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef76:	4b14      	ldr	r3, [pc, #80]	; (800efc8 <prvHeapInit+0xb4>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ef7e:	4b12      	ldr	r3, [pc, #72]	; (800efc8 <prvHeapInit+0xb4>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2200      	movs	r2, #0
 800ef84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	1ad2      	subs	r2, r2, r3
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ef94:	4b0c      	ldr	r3, [pc, #48]	; (800efc8 <prvHeapInit+0xb4>)
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	4a0a      	ldr	r2, [pc, #40]	; (800efcc <prvHeapInit+0xb8>)
 800efa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	4a09      	ldr	r2, [pc, #36]	; (800efd0 <prvHeapInit+0xbc>)
 800efaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800efac:	4b09      	ldr	r3, [pc, #36]	; (800efd4 <prvHeapInit+0xc0>)
 800efae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800efb2:	601a      	str	r2, [r3, #0]
}
 800efb4:	bf00      	nop
 800efb6:	3714      	adds	r7, #20
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr
 800efc0:	20000400 	.word	0x20000400
 800efc4:	20004000 	.word	0x20004000
 800efc8:	20004008 	.word	0x20004008
 800efcc:	20004010 	.word	0x20004010
 800efd0:	2000400c 	.word	0x2000400c
 800efd4:	20004014 	.word	0x20004014

0800efd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800efd8:	b480      	push	{r7}
 800efda:	b085      	sub	sp, #20
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800efe0:	4b28      	ldr	r3, [pc, #160]	; (800f084 <prvInsertBlockIntoFreeList+0xac>)
 800efe2:	60fb      	str	r3, [r7, #12]
 800efe4:	e002      	b.n	800efec <prvInsertBlockIntoFreeList+0x14>
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	60fb      	str	r3, [r7, #12]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d8f7      	bhi.n	800efe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	68ba      	ldr	r2, [r7, #8]
 800f000:	4413      	add	r3, r2
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	429a      	cmp	r2, r3
 800f006:	d108      	bne.n	800f01a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	685a      	ldr	r2, [r3, #4]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	441a      	add	r2, r3
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	441a      	add	r2, r3
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d118      	bne.n	800f060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	4b15      	ldr	r3, [pc, #84]	; (800f088 <prvInsertBlockIntoFreeList+0xb0>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	429a      	cmp	r2, r3
 800f038:	d00d      	beq.n	800f056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	685a      	ldr	r2, [r3, #4]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	441a      	add	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	601a      	str	r2, [r3, #0]
 800f054:	e008      	b.n	800f068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f056:	4b0c      	ldr	r3, [pc, #48]	; (800f088 <prvInsertBlockIntoFreeList+0xb0>)
 800f058:	681a      	ldr	r2, [r3, #0]
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	601a      	str	r2, [r3, #0]
 800f05e:	e003      	b.n	800f068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d002      	beq.n	800f076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	687a      	ldr	r2, [r7, #4]
 800f074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f076:	bf00      	nop
 800f078:	3714      	adds	r7, #20
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr
 800f082:	bf00      	nop
 800f084:	20004000 	.word	0x20004000
 800f088:	20004008 	.word	0x20004008

0800f08c <__libc_init_array>:
 800f08c:	b570      	push	{r4, r5, r6, lr}
 800f08e:	4e0d      	ldr	r6, [pc, #52]	; (800f0c4 <__libc_init_array+0x38>)
 800f090:	4c0d      	ldr	r4, [pc, #52]	; (800f0c8 <__libc_init_array+0x3c>)
 800f092:	1ba4      	subs	r4, r4, r6
 800f094:	10a4      	asrs	r4, r4, #2
 800f096:	2500      	movs	r5, #0
 800f098:	42a5      	cmp	r5, r4
 800f09a:	d109      	bne.n	800f0b0 <__libc_init_array+0x24>
 800f09c:	4e0b      	ldr	r6, [pc, #44]	; (800f0cc <__libc_init_array+0x40>)
 800f09e:	4c0c      	ldr	r4, [pc, #48]	; (800f0d0 <__libc_init_array+0x44>)
 800f0a0:	f000 f82c 	bl	800f0fc <_init>
 800f0a4:	1ba4      	subs	r4, r4, r6
 800f0a6:	10a4      	asrs	r4, r4, #2
 800f0a8:	2500      	movs	r5, #0
 800f0aa:	42a5      	cmp	r5, r4
 800f0ac:	d105      	bne.n	800f0ba <__libc_init_array+0x2e>
 800f0ae:	bd70      	pop	{r4, r5, r6, pc}
 800f0b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f0b4:	4798      	blx	r3
 800f0b6:	3501      	adds	r5, #1
 800f0b8:	e7ee      	b.n	800f098 <__libc_init_array+0xc>
 800f0ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f0be:	4798      	blx	r3
 800f0c0:	3501      	adds	r5, #1
 800f0c2:	e7f2      	b.n	800f0aa <__libc_init_array+0x1e>
 800f0c4:	0800f614 	.word	0x0800f614
 800f0c8:	0800f614 	.word	0x0800f614
 800f0cc:	0800f614 	.word	0x0800f614
 800f0d0:	0800f618 	.word	0x0800f618

0800f0d4 <memcpy>:
 800f0d4:	b510      	push	{r4, lr}
 800f0d6:	1e43      	subs	r3, r0, #1
 800f0d8:	440a      	add	r2, r1
 800f0da:	4291      	cmp	r1, r2
 800f0dc:	d100      	bne.n	800f0e0 <memcpy+0xc>
 800f0de:	bd10      	pop	{r4, pc}
 800f0e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0e8:	e7f7      	b.n	800f0da <memcpy+0x6>

0800f0ea <memset>:
 800f0ea:	4402      	add	r2, r0
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	4293      	cmp	r3, r2
 800f0f0:	d100      	bne.n	800f0f4 <memset+0xa>
 800f0f2:	4770      	bx	lr
 800f0f4:	f803 1b01 	strb.w	r1, [r3], #1
 800f0f8:	e7f9      	b.n	800f0ee <memset+0x4>
	...

0800f0fc <_init>:
 800f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fe:	bf00      	nop
 800f100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f102:	bc08      	pop	{r3}
 800f104:	469e      	mov	lr, r3
 800f106:	4770      	bx	lr

0800f108 <_fini>:
 800f108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10a:	bf00      	nop
 800f10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f10e:	bc08      	pop	{r3}
 800f110:	469e      	mov	lr, r3
 800f112:	4770      	bx	lr
