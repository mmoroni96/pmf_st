
freertoss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006bc4  08006bc4  00016bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c60  08006c60  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c68  08006c68  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a48  20000014  08006c84  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a5c  08006c84  00021a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c59c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031d4  00000000  00000000  0003c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016c0  00000000  00000000  0003f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001558  00000000  00000000  00040e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000031ef  00000000  00000000  000423d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012e1f  00000000  00000000  000455bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010279d  00000000  00000000  000583de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015ab7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006058  00000000  00000000  0015abf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006bac 	.word	0x08006bac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	08006bac 	.word	0x08006bac

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fabf 	bl	8000aa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f826 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f8d2 	bl	80006d4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000530:	f000 f88a 	bl	8000648 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f003 fdc4 	bl	80040c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000538:	4a09      	ldr	r2, [pc, #36]	; (8000560 <main+0x40>)
 800053a:	2100      	movs	r1, #0
 800053c:	4809      	ldr	r0, [pc, #36]	; (8000564 <main+0x44>)
 800053e:	f003 fe29 	bl	8004194 <osThreadNew>
 8000542:	4602      	mov	r2, r0
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <main+0x48>)
 8000546:	601a      	str	r2, [r3, #0]

  /* creation of LEDTASK */
  LEDTASKHandle = osThreadNew(StartTask02, NULL, &LEDTASK_attributes);
 8000548:	4a08      	ldr	r2, [pc, #32]	; (800056c <main+0x4c>)
 800054a:	2100      	movs	r1, #0
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <main+0x50>)
 800054e:	f003 fe21 	bl	8004194 <osThreadNew>
 8000552:	4602      	mov	r2, r0
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <main+0x54>)
 8000556:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000558:	f003 fde6 	bl	8004128 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x3c>
 800055e:	bf00      	nop
 8000560:	08006c00 	.word	0x08006c00
 8000564:	080007b5 	.word	0x080007b5
 8000568:	20001938 	.word	0x20001938
 800056c:	08006c24 	.word	0x08006c24
 8000570:	080007e1 	.word	0x080007e1
 8000574:	200019c8 	.word	0x200019c8

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b0a8      	sub	sp, #160	; 0xa0
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000582:	2238      	movs	r2, #56	; 0x38
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f006 fb07 	bl	8006b9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2254      	movs	r2, #84	; 0x54
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f006 faf9 	bl	8006b9a <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fd6b 	bl	8001084 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ae:	2302      	movs	r3, #2
 80005b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2340      	movs	r3, #64	; 0x40
 80005ba:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ce:	2355      	movs	r3, #85	; 0x55
 80005d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fdee 	bl	80011cc <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005f6:	f000 f912 	bl	800081e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2303      	movs	r3, #3
 8000600:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800060e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000612:	2108      	movs	r1, #8
 8000614:	4618      	mov	r0, r3
 8000616:	f001 f8f1 	bl	80017fc <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000620:	f000 f8fd 	bl	800081e <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000624:	2320      	movs	r3, #32
 8000626:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fb32 	bl	8001c98 <HAL_RCCEx_PeriphCLKConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063a:	f000 f8f0 	bl	800081e <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	37a0      	adds	r7, #160	; 0xa0
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_LPUART1_UART_Init+0x84>)
 800064e:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <MX_LPUART1_UART_Init+0x88>)
 8000650:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000652:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_LPUART1_UART_Init+0x84>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <MX_LPUART1_UART_Init+0x84>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_LPUART1_UART_Init+0x84>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_LPUART1_UART_Init+0x84>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_LPUART1_UART_Init+0x84>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_LPUART1_UART_Init+0x84>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_LPUART1_UART_Init+0x84>)
 800067a:	2200      	movs	r2, #0
 800067c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_LPUART1_UART_Init+0x84>)
 8000680:	2200      	movs	r2, #0
 8000682:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000684:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_LPUART1_UART_Init+0x84>)
 8000686:	f002 f881 	bl	800278c <HAL_UART_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000690:	f000 f8c5 	bl	800081e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000694:	2100      	movs	r1, #0
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <MX_LPUART1_UART_Init+0x84>)
 8000698:	f003 fc25 	bl	8003ee6 <HAL_UARTEx_SetTxFifoThreshold>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 80006a2:	f000 f8bc 	bl	800081e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a6:	2100      	movs	r1, #0
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <MX_LPUART1_UART_Init+0x84>)
 80006aa:	f003 fc5a 	bl	8003f62 <HAL_UARTEx_SetRxFifoThreshold>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 80006b4:	f000 f8b3 	bl	800081e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_LPUART1_UART_Init+0x84>)
 80006ba:	f003 fbdb 	bl	8003e74 <HAL_UARTEx_DisableFifoMode>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 80006c4:	f000 f8ab 	bl	800081e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	2000193c 	.word	0x2000193c
 80006d0:	40008000 	.word	0x40008000

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <MX_GPIO_Init+0xd4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <MX_GPIO_Init+0xd4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <MX_GPIO_Init+0xd4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000702:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <MX_GPIO_Init+0xd4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <MX_GPIO_Init+0xd4>)
 8000708:	f043 0320 	orr.w	r3, r3, #32
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <MX_GPIO_Init+0xd4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0320 	and.w	r3, r3, #32
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <MX_GPIO_Init+0xd4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <MX_GPIO_Init+0xd4>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <MX_GPIO_Init+0xd4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_GPIO_Init+0xd4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <MX_GPIO_Init+0xd4>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_GPIO_Init+0xd4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f000 fc41 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_GPIO_Init+0xd8>)
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4811      	ldr	r0, [pc, #68]	; (80007b0 <MX_GPIO_Init+0xdc>)
 800076c:	f000 fab2 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000770:	2320      	movs	r3, #32
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f000 faa3 	bl	8000cd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2105      	movs	r1, #5
 8000792:	2028      	movs	r0, #40	; 0x28
 8000794:	f000 fa76 	bl	8000c84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000798:	2028      	movs	r0, #40	; 0x28
 800079a:	f000 fa8d 	bl	8000cb8 <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3728      	adds	r7, #40	; 0x28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	10110000 	.word	0x10110000
 80007b0:	48000800 	.word	0x48000800

080007b4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t ok;
  /* Infinite loop */
  for(;;)
  {HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007bc:	2120      	movs	r1, #32
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f000 fc21 	bl	8001008 <HAL_GPIO_TogglePin>
  buffer++;
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <StartDefaultTask+0x28>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	4a03      	ldr	r2, [pc, #12]	; (80007dc <StartDefaultTask+0x28>)
 80007ce:	6013      	str	r3, [r2, #0]
    osDelay(1000);
 80007d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d4:	f003 fd84 	bl	80042e0 <osDelay>
  {HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007d8:	e7f0      	b.n	80007bc <StartDefaultTask+0x8>
 80007da:	bf00      	nop
 80007dc:	20000000 	.word	0x20000000

080007e0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint16_t passaggio;
  /* Infinite loop */
  for(;;)
  {HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2120      	movs	r1, #32
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f000 fbf2 	bl	8000fd8 <HAL_GPIO_WritePin>
    passaggio=buffer;
 80007f4:	4b01      	ldr	r3, [pc, #4]	; (80007fc <StartTask02+0x1c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	81fb      	strh	r3, [r7, #14]
  {HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 80007fa:	e7f5      	b.n	80007e8 <StartTask02+0x8>
 80007fc:	20000000 	.word	0x20000000

08000800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000810:	d101      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000812:	f000 f961 	bl	8000ad8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6093      	str	r3, [r2, #8]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40007000 	.word	0x40007000

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_MspInit+0x50>)
 8000854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000856:	4a11      	ldr	r2, [pc, #68]	; (800089c <HAL_MspInit+0x50>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6613      	str	r3, [r2, #96]	; 0x60
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x50>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_MspInit+0x50>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <HAL_MspInit+0x50>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6593      	str	r3, [r2, #88]	; 0x58
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x50>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	f06f 0001 	mvn.w	r0, #1
 800088a:	f000 f9fb 	bl	8000c84 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800088e:	f7ff ffcd 	bl	800082c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a17      	ldr	r2, [pc, #92]	; (800091c <HAL_UART_MspInit+0x7c>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d128      	bne.n	8000914 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <HAL_UART_MspInit+0x80>)
 80008c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008c6:	4a16      	ldr	r2, [pc, #88]	; (8000920 <HAL_UART_MspInit+0x80>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <HAL_UART_MspInit+0x80>)
 80008d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <HAL_UART_MspInit+0x80>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <HAL_UART_MspInit+0x80>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_UART_MspInit+0x80>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008f2:	230c      	movs	r3, #12
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000902:	230c      	movs	r3, #12
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000910:	f000 f9e0 	bl	8000cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40008000 	.word	0x40008000
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	; 0x30
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	201c      	movs	r0, #28
 800093a:	f000 f9a3 	bl	8000c84 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800093e:	201c      	movs	r0, #28
 8000940:	f000 f9ba 	bl	8000cb8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <HAL_InitTick+0xa0>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000948:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <HAL_InitTick+0xa0>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6593      	str	r3, [r2, #88]	; 0x58
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_InitTick+0xa0>)
 8000952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800095c:	f107 0210 	add.w	r2, r7, #16
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4611      	mov	r1, r2
 8000966:	4618      	mov	r0, r3
 8000968:	f001 f91e 	bl	8001ba8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800096c:	f001 f8f0 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8000970:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <HAL_InitTick+0xa4>)
 8000976:	fba2 2303 	umull	r2, r3, r2, r3
 800097a:	0c9b      	lsrs	r3, r3, #18
 800097c:	3b01      	subs	r3, #1
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0xa8>)
 8000982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000986:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_InitTick+0xa8>)
 800098a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800098e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_InitTick+0xa8>)
 8000992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000994:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_InitTick+0xa8>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <HAL_InitTick+0xa8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80009a2:	480a      	ldr	r0, [pc, #40]	; (80009cc <HAL_InitTick+0xa8>)
 80009a4:	f001 fbc4 	bl	8002130 <HAL_TIM_Base_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d104      	bne.n	80009b8 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <HAL_InitTick+0xa8>)
 80009b0:	f001 fc20 	bl	80021f4 <HAL_TIM_Base_Start_IT>
 80009b4:	4603      	mov	r3, r0
 80009b6:	e000      	b.n	80009ba <HAL_InitTick+0x96>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3730      	adds	r7, #48	; 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000
 80009c8:	431bde83 	.word	0x431bde83
 80009cc:	200019cc 	.word	0x200019cc

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <TIM2_IRQHandler+0x10>)
 8000a0a:	f001 fc29 	bl	8002260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200019cc 	.word	0x200019cc

08000a18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a20:	f000 fb0c 	bl	800103c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <SystemInit+0x28>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <SystemInit+0x28>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <SystemInit+0x28>)
 8000a3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a42:	609a      	str	r2, [r3, #8]
#endif
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5a:	490e      	ldr	r1, [pc, #56]	; (8000a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <LoopForever+0xe>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a70:	4c0b      	ldr	r4, [pc, #44]	; (8000aa0 <LoopForever+0x16>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a7e:	f7ff ffd3 	bl	8000a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f006 f85b 	bl	8006b3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a86:	f7ff fd4b 	bl	8000520 <main>

08000a8a <LoopForever>:

LoopForever:
    b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   r0, =_estack
 8000a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a98:	08006c70 	.word	0x08006c70
  ldr r2, =_sbss
 8000a9c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000aa0:	20001a5c 	.word	0x20001a5c

08000aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_2_IRQHandler>

08000aa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aac:	2300      	movs	r3, #0
 8000aae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f8dc 	bl	8000c6e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff ff34 	bl	8000924 <HAL_InitTick>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d002      	beq.n	8000ac8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	71fb      	strb	r3, [r7, #7]
 8000ac6:	e001      	b.n	8000acc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac8:	f7ff fec0 	bl	800084c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000acc:	79fb      	ldrb	r3, [r7, #7]

}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_IncTick+0x1c>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x20>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a03      	ldr	r2, [pc, #12]	; (8000af4 <HAL_IncTick+0x1c>)
 8000ae8:	6013      	str	r3, [r2, #0]
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	20001a18 	.word	0x20001a18
 8000af8:	2000000c 	.word	0x2000000c

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20001a18 	.word	0x20001a18

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0b      	blt.n	8000ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 021f 	and.w	r2, r3, #31
 8000b90:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <__NVIC_EnableIRQ+0x38>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ff4c 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c92:	f7ff ff63 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000c96:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	68b9      	ldr	r1, [r7, #8]
 8000c9c:	6978      	ldr	r0, [r7, #20]
 8000c9e:	f7ff ffb3 	bl	8000c08 <NVIC_EncodePriority>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff82 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff56 	bl	8000b78 <__NVIC_EnableIRQ>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ce2:	e15a      	b.n	8000f9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 814c 	beq.w	8000f94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d00b      	beq.n	8000d1c <HAL_GPIO_Init+0x48>
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d007      	beq.n	8000d1c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d10:	2b11      	cmp	r3, #17
 8000d12:	d003      	beq.n	8000d1c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b12      	cmp	r3, #18
 8000d1a:	d130      	bne.n	8000d7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d52:	2201      	movs	r2, #1
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	f003 0201 	and.w	r2, r3, #1
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0xea>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b12      	cmp	r3, #18
 8000dbc:	d123      	bne.n	8000e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	691a      	ldr	r2, [r3, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	6939      	ldr	r1, [r7, #16]
 8000e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0203 	and.w	r2, r3, #3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 80a6 	beq.w	8000f94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e48:	4b5b      	ldr	r3, [pc, #364]	; (8000fb8 <HAL_GPIO_Init+0x2e4>)
 8000e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4c:	4a5a      	ldr	r2, [pc, #360]	; (8000fb8 <HAL_GPIO_Init+0x2e4>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6613      	str	r3, [r2, #96]	; 0x60
 8000e54:	4b58      	ldr	r3, [pc, #352]	; (8000fb8 <HAL_GPIO_Init+0x2e4>)
 8000e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e60:	4a56      	ldr	r2, [pc, #344]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e8a:	d01f      	beq.n	8000ecc <HAL_GPIO_Init+0x1f8>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4c      	ldr	r2, [pc, #304]	; (8000fc0 <HAL_GPIO_Init+0x2ec>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d019      	beq.n	8000ec8 <HAL_GPIO_Init+0x1f4>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a4b      	ldr	r2, [pc, #300]	; (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d013      	beq.n	8000ec4 <HAL_GPIO_Init+0x1f0>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a4a      	ldr	r2, [pc, #296]	; (8000fc8 <HAL_GPIO_Init+0x2f4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d00d      	beq.n	8000ec0 <HAL_GPIO_Init+0x1ec>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a49      	ldr	r2, [pc, #292]	; (8000fcc <HAL_GPIO_Init+0x2f8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d007      	beq.n	8000ebc <HAL_GPIO_Init+0x1e8>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a48      	ldr	r2, [pc, #288]	; (8000fd0 <HAL_GPIO_Init+0x2fc>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d101      	bne.n	8000eb8 <HAL_GPIO_Init+0x1e4>
 8000eb4:	2305      	movs	r3, #5
 8000eb6:	e00a      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000eb8:	2306      	movs	r3, #6
 8000eba:	e008      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	e006      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e004      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ede:	4937      	ldr	r1, [pc, #220]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f10:	4a30      	ldr	r2, [pc, #192]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f16:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f3a:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f64:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f8e:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f47f ae9d 	bne.w	8000ce4 <HAL_GPIO_Init+0x10>
  }
}
 8000faa:	bf00      	nop
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	48000c00 	.word	0x48000c00
 8000fcc:	48001000 	.word	0x48001000
 8000fd0:	48001400 	.word	0x48001400
 8000fd4:	40010400 	.word	0x40010400

08000fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff4:	e002      	b.n	8000ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	695a      	ldr	r2, [r3, #20]
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	4013      	ands	r3, r2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001020:	887a      	ldrh	r2, [r7, #2]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001026:	e002      	b.n	800102e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001028:	887a      	ldrh	r2, [r7, #2]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	619a      	str	r2, [r3, #24]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001048:	695a      	ldr	r2, [r3, #20]
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	4013      	ands	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f806 	bl	800106c <HAL_GPIO_EXTI_Callback>
  }
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d141      	bne.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001092:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800109a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800109e:	d131      	bne.n	8001104 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010a0:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010a6:	4a46      	ldr	r2, [pc, #280]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	4b43      	ldr	r3, [pc, #268]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010b8:	4a41      	ldr	r2, [pc, #260]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010c0:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2232      	movs	r2, #50	; 0x32
 80010c6:	fb02 f303 	mul.w	r3, r2, r3
 80010ca:	4a3f      	ldr	r2, [pc, #252]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010cc:	fba2 2303 	umull	r2, r3, r2, r3
 80010d0:	0c9b      	lsrs	r3, r3, #18
 80010d2:	3301      	adds	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010d6:	e002      	b.n	80010de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3b01      	subs	r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010de:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ea:	d102      	bne.n	80010f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f2      	bne.n	80010d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010f2:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010fe:	d158      	bne.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e057      	b.n	80011b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800110a:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800110c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001110:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001114:	e04d      	b.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800111c:	d141      	bne.n	80011a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800112a:	d131      	bne.n	8001190 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001132:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001138:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001144:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2232      	movs	r2, #50	; 0x32
 8001152:	fb02 f303 	mul.w	r3, r2, r3
 8001156:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001158:	fba2 2303 	umull	r2, r3, r2, r3
 800115c:	0c9b      	lsrs	r3, r3, #18
 800115e:	3301      	adds	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001162:	e002      	b.n	800116a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3b01      	subs	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001176:	d102      	bne.n	800117e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f2      	bne.n	8001164 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118a:	d112      	bne.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e011      	b.n	80011b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011a0:	e007      	b.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40007000 	.word	0x40007000
 80011c4:	20000004 	.word	0x20000004
 80011c8:	431bde83 	.word	0x431bde83

080011cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e308      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d075      	beq.n	80012d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ea:	4ba3      	ldr	r3, [pc, #652]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f4:	4ba0      	ldr	r3, [pc, #640]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b0c      	cmp	r3, #12
 8001202:	d102      	bne.n	800120a <HAL_RCC_OscConfig+0x3e>
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d002      	beq.n	8001210 <HAL_RCC_OscConfig+0x44>
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b08      	cmp	r3, #8
 800120e:	d10b      	bne.n	8001228 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	4b99      	ldr	r3, [pc, #612]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d05b      	beq.n	80012d4 <HAL_RCC_OscConfig+0x108>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d157      	bne.n	80012d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e2e3      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	d106      	bne.n	8001240 <HAL_RCC_OscConfig+0x74>
 8001232:	4b91      	ldr	r3, [pc, #580]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a90      	ldr	r2, [pc, #576]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e01d      	b.n	800127c <HAL_RCC_OscConfig+0xb0>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x98>
 800124a:	4b8b      	ldr	r3, [pc, #556]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a8a      	ldr	r2, [pc, #552]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a87      	ldr	r2, [pc, #540]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e00b      	b.n	800127c <HAL_RCC_OscConfig+0xb0>
 8001264:	4b84      	ldr	r3, [pc, #528]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a83      	ldr	r2, [pc, #524]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800126a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b81      	ldr	r3, [pc, #516]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a80      	ldr	r2, [pc, #512]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fc3a 	bl	8000afc <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fc36 	bl	8000afc <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e2a8      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0xc0>
 80012aa:	e014      	b.n	80012d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fc26 	bl	8000afc <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fc22 	bl	8000afc <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	; 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e294      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012c6:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0xe8>
 80012d2:	e000      	b.n	80012d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d075      	beq.n	80013ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e2:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ec:	4b62      	ldr	r3, [pc, #392]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2b0c      	cmp	r3, #12
 80012fa:	d102      	bne.n	8001302 <HAL_RCC_OscConfig+0x136>
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d002      	beq.n	8001308 <HAL_RCC_OscConfig+0x13c>
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b04      	cmp	r3, #4
 8001306:	d11f      	bne.n	8001348 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001308:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_RCC_OscConfig+0x154>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e267      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b55      	ldr	r3, [pc, #340]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	061b      	lsls	r3, r3, #24
 800132e:	4952      	ldr	r1, [pc, #328]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001334:	4b51      	ldr	r3, [pc, #324]	; (800147c <HAL_RCC_OscConfig+0x2b0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff faf3 	bl	8000924 <HAL_InitTick>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d043      	beq.n	80013cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e253      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d023      	beq.n	8001398 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001350:	4b49      	ldr	r3, [pc, #292]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a48      	ldr	r2, [pc, #288]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fbce 	bl	8000afc <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001364:	f7ff fbca 	bl	8000afc <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e23c      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001376:	4b40      	ldr	r3, [pc, #256]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	061b      	lsls	r3, r3, #24
 8001390:	4939      	ldr	r1, [pc, #228]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001392:	4313      	orrs	r3, r2
 8001394:	604b      	str	r3, [r1, #4]
 8001396:	e01a      	b.n	80013ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001398:	4b37      	ldr	r3, [pc, #220]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a36      	ldr	r2, [pc, #216]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800139e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fbaa 	bl	8000afc <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ac:	f7ff fba6 	bl	8000afc <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e218      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013be:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x1e0>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d03c      	beq.n	8001454 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d01c      	beq.n	800141c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e8:	4a23      	ldr	r2, [pc, #140]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f2:	f7ff fb83 	bl	8000afc <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fa:	f7ff fb7f 	bl	8000afc <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e1f1      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800140e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0ef      	beq.n	80013fa <HAL_RCC_OscConfig+0x22e>
 800141a:	e01b      	b.n	8001454 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800141e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001422:	4a15      	ldr	r2, [pc, #84]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fb66 	bl	8000afc <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fb62 	bl	8000afc <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1d4      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1ef      	bne.n	8001434 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80ab 	beq.w	80015b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_RCC_OscConfig+0x2b4>
 8001472:	2301      	movs	r3, #1
 8001474:	e005      	b.n	8001482 <HAL_RCC_OscConfig+0x2b6>
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	20000008 	.word	0x20000008
 8001480:	2300      	movs	r3, #0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00d      	beq.n	80014a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4baf      	ldr	r3, [pc, #700]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148a:	4aae      	ldr	r2, [pc, #696]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	6593      	str	r3, [r2, #88]	; 0x58
 8001492:	4bac      	ldr	r3, [pc, #688]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a2:	4ba9      	ldr	r3, [pc, #676]	; (8001748 <HAL_RCC_OscConfig+0x57c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d118      	bne.n	80014e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014ae:	4ba6      	ldr	r3, [pc, #664]	; (8001748 <HAL_RCC_OscConfig+0x57c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4aa5      	ldr	r2, [pc, #660]	; (8001748 <HAL_RCC_OscConfig+0x57c>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fb1f 	bl	8000afc <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff fb1b 	bl	8000afc <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e18d      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d4:	4b9c      	ldr	r3, [pc, #624]	; (8001748 <HAL_RCC_OscConfig+0x57c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d108      	bne.n	80014fa <HAL_RCC_OscConfig+0x32e>
 80014e8:	4b96      	ldr	r3, [pc, #600]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 80014ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ee:	4a95      	ldr	r2, [pc, #596]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014f8:	e024      	b.n	8001544 <HAL_RCC_OscConfig+0x378>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b05      	cmp	r3, #5
 8001500:	d110      	bne.n	8001524 <HAL_RCC_OscConfig+0x358>
 8001502:	4b90      	ldr	r3, [pc, #576]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001508:	4a8e      	ldr	r2, [pc, #568]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001512:	4b8c      	ldr	r3, [pc, #560]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001518:	4a8a      	ldr	r2, [pc, #552]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001522:	e00f      	b.n	8001544 <HAL_RCC_OscConfig+0x378>
 8001524:	4b87      	ldr	r3, [pc, #540]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152a:	4a86      	ldr	r2, [pc, #536]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001534:	4b83      	ldr	r3, [pc, #524]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153a:	4a82      	ldr	r2, [pc, #520]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 800153c:	f023 0304 	bic.w	r3, r3, #4
 8001540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d016      	beq.n	800157a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff fad6 	bl	8000afc <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001552:	e00a      	b.n	800156a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001554:	f7ff fad2 	bl	8000afc <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e142      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800156a:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 800156c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0ed      	beq.n	8001554 <HAL_RCC_OscConfig+0x388>
 8001578:	e015      	b.n	80015a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157a:	f7ff fabf 	bl	8000afc <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001580:	e00a      	b.n	8001598 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f7ff fabb 	bl	8000afc <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001590:	4293      	cmp	r3, r2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e12b      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001598:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 800159a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ed      	bne.n	8001582 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015a6:	7ffb      	ldrb	r3, [r7, #31]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ac:	4b65      	ldr	r3, [pc, #404]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b0:	4a64      	ldr	r2, [pc, #400]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 80015b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0320 	and.w	r3, r3, #32
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d03c      	beq.n	800163e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d01c      	beq.n	8001606 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015cc:	4b5d      	ldr	r3, [pc, #372]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 80015ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015d2:	4a5c      	ldr	r2, [pc, #368]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff fa8e 	bl	8000afc <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015e4:	f7ff fa8a 	bl	8000afc <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0fc      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015f6:	4b53      	ldr	r3, [pc, #332]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 80015f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0ef      	beq.n	80015e4 <HAL_RCC_OscConfig+0x418>
 8001604:	e01b      	b.n	800163e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001606:	4b4f      	ldr	r3, [pc, #316]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001608:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800160c:	4a4d      	ldr	r2, [pc, #308]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001616:	f7ff fa71 	bl	8000afc <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800161e:	f7ff fa6d 	bl	8000afc <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e0df      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001630:	4b44      	ldr	r3, [pc, #272]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001632:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ef      	bne.n	800161e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80d3 	beq.w	80017ee <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001648:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b0c      	cmp	r3, #12
 8001652:	f000 808d 	beq.w	8001770 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d15a      	bne.n	8001714 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165e:	4b39      	ldr	r3, [pc, #228]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a38      	ldr	r2, [pc, #224]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166a:	f7ff fa47 	bl	8000afc <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001672:	f7ff fa43 	bl	8000afc <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e0b5      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001684:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f0      	bne.n	8001672 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001690:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_RCC_OscConfig+0x580>)
 8001696:	4013      	ands	r3, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6a11      	ldr	r1, [r2, #32]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016a0:	3a01      	subs	r2, #1
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	4311      	orrs	r1, r2
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80016aa:	0212      	lsls	r2, r2, #8
 80016ac:	4311      	orrs	r1, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016b2:	0852      	lsrs	r2, r2, #1
 80016b4:	3a01      	subs	r2, #1
 80016b6:	0552      	lsls	r2, r2, #21
 80016b8:	4311      	orrs	r1, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016be:	0852      	lsrs	r2, r2, #1
 80016c0:	3a01      	subs	r2, #1
 80016c2:	0652      	lsls	r2, r2, #25
 80016c4:	4311      	orrs	r1, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016ca:	06d2      	lsls	r2, r2, #27
 80016cc:	430a      	orrs	r2, r1
 80016ce:	491d      	ldr	r1, [pc, #116]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1a      	ldr	r2, [pc, #104]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 80016da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4a17      	ldr	r2, [pc, #92]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 80016e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fa06 	bl	8000afc <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fa02 	bl	8000afc <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e074      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x528>
 8001712:	e06c      	b.n	80017ee <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 800171a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800171e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001726:	f023 0303 	bic.w	r3, r3, #3
 800172a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_RCC_OscConfig+0x578>)
 8001732:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff f9de 	bl	8000afc <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001742:	e00e      	b.n	8001762 <HAL_RCC_OscConfig+0x596>
 8001744:	40021000 	.word	0x40021000
 8001748:	40007000 	.word	0x40007000
 800174c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001750:	f7ff f9d4 	bl	8000afc <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e046      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001762:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <HAL_RCC_OscConfig+0x62c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x584>
 800176e:	e03e      	b.n	80017ee <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e039      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_RCC_OscConfig+0x62c>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f003 0203 	and.w	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	429a      	cmp	r2, r3
 800178e:	d12c      	bne.n	80017ea <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	3b01      	subs	r3, #1
 800179c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d123      	bne.n	80017ea <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d11b      	bne.n	80017ea <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d113      	bne.n	80017ea <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	3b01      	subs	r3, #1
 80017d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d109      	bne.n	80017ea <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e0:	085b      	lsrs	r3, r3, #1
 80017e2:	3b01      	subs	r3, #1
 80017e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d001      	beq.n	80017ee <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021000 	.word	0x40021000

080017fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e11e      	b.n	8001a52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001814:	4b91      	ldr	r3, [pc, #580]	; (8001a5c <HAL_RCC_ClockConfig+0x260>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d910      	bls.n	8001844 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b8e      	ldr	r3, [pc, #568]	; (8001a5c <HAL_RCC_ClockConfig+0x260>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 020f 	bic.w	r2, r3, #15
 800182a:	498c      	ldr	r1, [pc, #560]	; (8001a5c <HAL_RCC_ClockConfig+0x260>)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b8a      	ldr	r3, [pc, #552]	; (8001a5c <HAL_RCC_ClockConfig+0x260>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e106      	b.n	8001a52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d073      	beq.n	8001938 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d129      	bne.n	80018ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001858:	4b81      	ldr	r3, [pc, #516]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0f4      	b.n	8001a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001868:	f000 f9d0 	bl	8001c0c <RCC_GetSysClockFreqFromPLLSource>
 800186c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4a7c      	ldr	r2, [pc, #496]	; (8001a64 <HAL_RCC_ClockConfig+0x268>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d93f      	bls.n	80018f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001876:	4b7a      	ldr	r3, [pc, #488]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800188a:	2b00      	cmp	r3, #0
 800188c:	d033      	beq.n	80018f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001892:	2b00      	cmp	r3, #0
 8001894:	d12f      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001896:	4b72      	ldr	r3, [pc, #456]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800189e:	4a70      	ldr	r2, [pc, #448]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 80018a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e024      	b.n	80018f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d107      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b4:	4b6a      	ldr	r3, [pc, #424]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0c6      	b.n	8001a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c4:	4b66      	ldr	r3, [pc, #408]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0be      	b.n	8001a52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018d4:	f000 f8ce 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4a61      	ldr	r2, [pc, #388]	; (8001a64 <HAL_RCC_ClockConfig+0x268>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d909      	bls.n	80018f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018e2:	4b5f      	ldr	r3, [pc, #380]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ea:	4a5d      	ldr	r2, [pc, #372]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 80018ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018f6:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f023 0203 	bic.w	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4957      	ldr	r1, [pc, #348]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001904:	4313      	orrs	r3, r2
 8001906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001908:	f7ff f8f8 	bl	8000afc <HAL_GetTick>
 800190c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190e:	e00a      	b.n	8001926 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001910:	f7ff f8f4 	bl	8000afc <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e095      	b.n	8001a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	4b4e      	ldr	r3, [pc, #312]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 020c 	and.w	r2, r3, #12
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	429a      	cmp	r2, r3
 8001936:	d1eb      	bne.n	8001910 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d023      	beq.n	800198c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001950:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a42      	ldr	r2, [pc, #264]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001956:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800195a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d007      	beq.n	8001978 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001968:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001970:	4a3b      	ldr	r2, [pc, #236]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001972:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001976:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001978:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4936      	ldr	r1, [pc, #216]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
 800198a:	e008      	b.n	800199e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b80      	cmp	r3, #128	; 0x80
 8001990:	d105      	bne.n	800199e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001992:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	4a32      	ldr	r2, [pc, #200]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001998:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800199c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_RCC_ClockConfig+0x260>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d21d      	bcs.n	80019e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_RCC_ClockConfig+0x260>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 020f 	bic.w	r2, r3, #15
 80019b4:	4929      	ldr	r1, [pc, #164]	; (8001a5c <HAL_RCC_ClockConfig+0x260>)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019bc:	f7ff f89e 	bl	8000afc <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	e00a      	b.n	80019da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7ff f89a 	bl	8000afc <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e03b      	b.n	8001a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_RCC_ClockConfig+0x260>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d1ed      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4917      	ldr	r1, [pc, #92]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	490f      	ldr	r1, [pc, #60]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a26:	f000 f825 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001a2a:	4601      	mov	r1, r0
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_RCC_ClockConfig+0x264>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_RCC_ClockConfig+0x26c>)
 8001a38:	5cd3      	ldrb	r3, [r2, r3]
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_RCC_ClockConfig+0x270>)
 8001a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_RCC_ClockConfig+0x274>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe ff6a 	bl	8000924 <HAL_InitTick>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40022000 	.word	0x40022000
 8001a60:	40021000 	.word	0x40021000
 8001a64:	04c4b400 	.word	0x04c4b400
 8001a68:	08006c48 	.word	0x08006c48
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	20000008 	.word	0x20000008

08001a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a7a:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d102      	bne.n	8001a8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	e047      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a98:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	e03e      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a9e:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b0c      	cmp	r3, #12
 8001aa8:	d136      	bne.n	8001b18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3301      	adds	r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ac8:	4a1a      	ldr	r2, [pc, #104]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad2:	68d2      	ldr	r2, [r2, #12]
 8001ad4:	0a12      	lsrs	r2, r2, #8
 8001ad6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	617b      	str	r3, [r7, #20]
      break;
 8001ae0:	e00c      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ae2:	4a13      	ldr	r2, [pc, #76]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aec:	68d2      	ldr	r2, [r2, #12]
 8001aee:	0a12      	lsrs	r2, r2, #8
 8001af0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
      break;
 8001afa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0e5b      	lsrs	r3, r3, #25
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	3301      	adds	r3, #1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	e001      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b1c:	693b      	ldr	r3, [r7, #16]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	371c      	adds	r7, #28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	016e3600 	.word	0x016e3600

08001b38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b58:	4601      	mov	r1, r0
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b66:	5cd3      	ldrb	r3, [r2, r3]
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08006c58 	.word	0x08006c58

08001b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b80:	f7ff ffda 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b84:	4601      	mov	r1, r0
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	0adb      	lsrs	r3, r3, #11
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08006c58 	.word	0x08006c58

08001ba8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	08db      	lsrs	r3, r3, #3
 8001be2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <HAL_RCC_GetClockConfig+0x60>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 020f 	and.w	r2, r3, #15
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	601a      	str	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40022000 	.word	0x40022000

08001c0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3301      	adds	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d10c      	bne.n	8001c4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c30:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c3a:	68d2      	ldr	r2, [r2, #12]
 8001c3c:	0a12      	lsrs	r2, r2, #8
 8001c3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
    break;
 8001c48:	e00c      	b.n	8001c64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c54:	68d2      	ldr	r2, [r2, #12]
 8001c56:	0a12      	lsrs	r2, r2, #8
 8001c58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	617b      	str	r3, [r7, #20]
    break;
 8001c62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0e5b      	lsrs	r3, r3, #25
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c7e:	687b      	ldr	r3, [r7, #4]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	016e3600 	.word	0x016e3600
 8001c94:	00f42400 	.word	0x00f42400

08001c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 8098 	beq.w	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cba:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10d      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	4a3f      	ldr	r2, [pc, #252]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce2:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a39      	ldr	r2, [pc, #228]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cee:	f7fe ff05 	bl	8000afc <HAL_GetTick>
 8001cf2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cf4:	e009      	b.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf6:	f7fe ff01 	bl	8000afc <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d902      	bls.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	74fb      	strb	r3, [r7, #19]
        break;
 8001d08:	e005      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0ef      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d16:	7cfb      	ldrb	r3, [r7, #19]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d159      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d01e      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d019      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d38:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d54:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5a:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d64:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d016      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7fe fec1 	bl	8000afc <HAL_GetTick>
 8001d7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d7c:	e00b      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7fe febd 	bl	8000afc <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d902      	bls.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	74fb      	strb	r3, [r7, #19]
            break;
 8001d94:	e006      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0ec      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001da4:	7cfb      	ldrb	r3, [r7, #19]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10b      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db8:	4903      	ldr	r1, [pc, #12]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dc2:	7cfb      	ldrb	r3, [r7, #19]
 8001dc4:	74bb      	strb	r3, [r7, #18]
 8001dc6:	e005      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dd0:	7cfb      	ldrb	r3, [r7, #19]
 8001dd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dd4:	7c7b      	ldrb	r3, [r7, #17]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d105      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dda:	4baf      	ldr	r3, [pc, #700]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	4aae      	ldr	r2, [pc, #696]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001df2:	4ba9      	ldr	r3, [pc, #676]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df8:	f023 0203 	bic.w	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	49a5      	ldr	r1, [pc, #660]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00a      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e14:	4ba0      	ldr	r3, [pc, #640]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1a:	f023 020c 	bic.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	499d      	ldr	r1, [pc, #628]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e36:	4b98      	ldr	r3, [pc, #608]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4994      	ldr	r1, [pc, #592]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00a      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e58:	4b8f      	ldr	r3, [pc, #572]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	498c      	ldr	r1, [pc, #560]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e7a:	4b87      	ldr	r3, [pc, #540]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	4983      	ldr	r1, [pc, #524]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e9c:	4b7e      	ldr	r3, [pc, #504]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	497b      	ldr	r1, [pc, #492]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ebe:	4b76      	ldr	r3, [pc, #472]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	4972      	ldr	r1, [pc, #456]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00a      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ee0:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	496a      	ldr	r1, [pc, #424]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f02:	4b65      	ldr	r3, [pc, #404]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	4961      	ldr	r1, [pc, #388]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00a      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f24:	4b5c      	ldr	r3, [pc, #368]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f2a:	f023 0203 	bic.w	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	4959      	ldr	r1, [pc, #356]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f46:	4b54      	ldr	r3, [pc, #336]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	4950      	ldr	r1, [pc, #320]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d015      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f68:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4948      	ldr	r1, [pc, #288]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f86:	d105      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f88:	4b43      	ldr	r3, [pc, #268]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a42      	ldr	r2, [pc, #264]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d015      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fa0:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fae:	493a      	ldr	r1, [pc, #232]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fbe:	d105      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fc0:	4b35      	ldr	r3, [pc, #212]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a34      	ldr	r2, [pc, #208]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d015      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001fd8:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe6:	492c      	ldr	r1, [pc, #176]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff6:	d105      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4a26      	ldr	r2, [pc, #152]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002002:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d015      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002016:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201e:	491e      	ldr	r1, [pc, #120]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800202e:	d105      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a18      	ldr	r2, [pc, #96]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800203a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d015      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4910      	ldr	r1, [pc, #64]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002066:	d105      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800206e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002072:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d018      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4902      	ldr	r1, [pc, #8]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002096:	e001      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002098:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020a4:	d105      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d015      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020cc:	4917      	ldr	r1, [pc, #92]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d105      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d015      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80020f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002104:	4909      	ldr	r1, [pc, #36]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002114:	d105      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800211c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002120:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002122:	7cbb      	ldrb	r3, [r7, #18]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000

08002130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e049      	b.n	80021d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f841 	bl	80021de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3304      	adds	r3, #4
 800216c:	4619      	mov	r1, r3
 800216e:	4610      	mov	r0, r2
 8002170:	f000 fa1e 	bl	80025b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b01      	cmp	r3, #1
 8002206:	d001      	beq.n	800220c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e021      	b.n	8002250 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_TIM_Base_Start_IT+0x68>)
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b06      	cmp	r3, #6
 8002234:	d00b      	beq.n	800224e <HAL_TIM_Base_Start_IT+0x5a>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d007      	beq.n	800224e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	00010007 	.word	0x00010007

08002260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b02      	cmp	r3, #2
 8002274:	d122      	bne.n	80022bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b02      	cmp	r3, #2
 8002282:	d11b      	bne.n	80022bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0202 	mvn.w	r2, #2
 800228c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f965 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 80022a8:	e005      	b.n	80022b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f957 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f968 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d122      	bne.n	8002310 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d11b      	bne.n	8002310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0204 	mvn.w	r2, #4
 80022e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2202      	movs	r2, #2
 80022e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f93b 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 80022fc:	e005      	b.n	800230a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f92d 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f93e 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b08      	cmp	r3, #8
 800231c:	d122      	bne.n	8002364 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b08      	cmp	r3, #8
 800232a:	d11b      	bne.n	8002364 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0208 	mvn.w	r2, #8
 8002334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2204      	movs	r2, #4
 800233a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f911 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f903 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f914 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b10      	cmp	r3, #16
 8002370:	d122      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b10      	cmp	r3, #16
 800237e:	d11b      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0210 	mvn.w	r2, #16
 8002388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2208      	movs	r2, #8
 800238e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f8e7 	bl	8002572 <HAL_TIM_IC_CaptureCallback>
 80023a4:	e005      	b.n	80023b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f8d9 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f8ea 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d10e      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d107      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0201 	mvn.w	r2, #1
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe fa0e 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	2b80      	cmp	r3, #128	; 0x80
 80023f0:	d10e      	bne.n	8002410 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d107      	bne.n	8002410 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f982 	bl	8002714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800241e:	d10e      	bne.n	800243e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	2b80      	cmp	r3, #128	; 0x80
 800242c:	d107      	bne.n	800243e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f975 	bl	8002728 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	d10e      	bne.n	800246a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b40      	cmp	r3, #64	; 0x40
 8002458:	d107      	bne.n	800246a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f898 	bl	800259a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b20      	cmp	r3, #32
 8002476:	d10e      	bne.n	8002496 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b20      	cmp	r3, #32
 8002484:	d107      	bne.n	8002496 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f06f 0220 	mvn.w	r2, #32
 800248e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f935 	bl	8002700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024a4:	d10f      	bne.n	80024c6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024b4:	d107      	bne.n	80024c6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80024be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f93b 	bl	800273c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024d4:	d10f      	bne.n	80024f6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024e4:	d107      	bne.n	80024f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80024ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f92d 	bl	8002750 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002504:	d10f      	bne.n	8002526 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002514:	d107      	bne.n	8002526 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800251e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f91f 	bl	8002764 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002530:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002534:	d10f      	bne.n	8002556 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002540:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002544:	d107      	bne.n	8002556 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800254e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f911 	bl	8002778 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a46      	ldr	r2, [pc, #280]	; (80026dc <TIM_Base_SetConfig+0x12c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d017      	beq.n	80025f8 <TIM_Base_SetConfig+0x48>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ce:	d013      	beq.n	80025f8 <TIM_Base_SetConfig+0x48>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a43      	ldr	r2, [pc, #268]	; (80026e0 <TIM_Base_SetConfig+0x130>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00f      	beq.n	80025f8 <TIM_Base_SetConfig+0x48>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a42      	ldr	r2, [pc, #264]	; (80026e4 <TIM_Base_SetConfig+0x134>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00b      	beq.n	80025f8 <TIM_Base_SetConfig+0x48>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a41      	ldr	r2, [pc, #260]	; (80026e8 <TIM_Base_SetConfig+0x138>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d007      	beq.n	80025f8 <TIM_Base_SetConfig+0x48>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a40      	ldr	r2, [pc, #256]	; (80026ec <TIM_Base_SetConfig+0x13c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d003      	beq.n	80025f8 <TIM_Base_SetConfig+0x48>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a3f      	ldr	r2, [pc, #252]	; (80026f0 <TIM_Base_SetConfig+0x140>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d108      	bne.n	800260a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a33      	ldr	r2, [pc, #204]	; (80026dc <TIM_Base_SetConfig+0x12c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d023      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002618:	d01f      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a30      	ldr	r2, [pc, #192]	; (80026e0 <TIM_Base_SetConfig+0x130>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01b      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a2f      	ldr	r2, [pc, #188]	; (80026e4 <TIM_Base_SetConfig+0x134>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d017      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a2e      	ldr	r2, [pc, #184]	; (80026e8 <TIM_Base_SetConfig+0x138>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a2d      	ldr	r2, [pc, #180]	; (80026ec <TIM_Base_SetConfig+0x13c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00f      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a2d      	ldr	r2, [pc, #180]	; (80026f4 <TIM_Base_SetConfig+0x144>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00b      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a2c      	ldr	r2, [pc, #176]	; (80026f8 <TIM_Base_SetConfig+0x148>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <TIM_Base_SetConfig+0x14c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d003      	beq.n	800265a <TIM_Base_SetConfig+0xaa>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a26      	ldr	r2, [pc, #152]	; (80026f0 <TIM_Base_SetConfig+0x140>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d108      	bne.n	800266c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a12      	ldr	r2, [pc, #72]	; (80026dc <TIM_Base_SetConfig+0x12c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d013      	beq.n	80026c0 <TIM_Base_SetConfig+0x110>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a14      	ldr	r2, [pc, #80]	; (80026ec <TIM_Base_SetConfig+0x13c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00f      	beq.n	80026c0 <TIM_Base_SetConfig+0x110>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <TIM_Base_SetConfig+0x144>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00b      	beq.n	80026c0 <TIM_Base_SetConfig+0x110>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <TIM_Base_SetConfig+0x148>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d007      	beq.n	80026c0 <TIM_Base_SetConfig+0x110>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <TIM_Base_SetConfig+0x14c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d003      	beq.n	80026c0 <TIM_Base_SetConfig+0x110>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <TIM_Base_SetConfig+0x140>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d103      	bne.n	80026c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	615a      	str	r2, [r3, #20]
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40012c00 	.word	0x40012c00
 80026e0:	40000400 	.word	0x40000400
 80026e4:	40000800 	.word	0x40000800
 80026e8:	40000c00 	.word	0x40000c00
 80026ec:	40013400 	.word	0x40013400
 80026f0:	40015000 	.word	0x40015000
 80026f4:	40014000 	.word	0x40014000
 80026f8:	40014400 	.word	0x40014400
 80026fc:	40014800 	.word	0x40014800

08002700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e042      	b.n	8002824 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d106      	bne.n	80027b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7fe f875 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2224      	movs	r2, #36	; 0x24
 80027ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f82e 	bl	8002830 <UART_SetConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e022      	b.n	8002824 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f001 fa10 	bl	8003c0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800280a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f001 fa97 	bl	8003d50 <UART_CheckIdleState>
 8002822:	4603      	mov	r3, r0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	0000      	movs	r0, r0
	...

08002830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002830:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002834:	b08a      	sub	sp, #40	; 0x28
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4313      	orrs	r3, r2
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002864:	4313      	orrs	r3, r2
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4baa      	ldr	r3, [pc, #680]	; (8002b18 <UART_SetConfig+0x2e8>)
 8002870:	4013      	ands	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002878:	430b      	orrs	r3, r1
 800287a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a9f      	ldr	r2, [pc, #636]	; (8002b1c <UART_SetConfig+0x2ec>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d004      	beq.n	80028ac <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a8:	4313      	orrs	r3, r2
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80028b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	f023 010f 	bic.w	r1, r3, #15
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a90      	ldr	r2, [pc, #576]	; (8002b20 <UART_SetConfig+0x2f0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d126      	bne.n	8002932 <UART_SetConfig+0x102>
 80028e4:	4b8f      	ldr	r3, [pc, #572]	; (8002b24 <UART_SetConfig+0x2f4>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d81a      	bhi.n	8002928 <UART_SetConfig+0xf8>
 80028f2:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <UART_SetConfig+0xc8>)
 80028f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f8:	08002909 	.word	0x08002909
 80028fc:	08002919 	.word	0x08002919
 8002900:	08002911 	.word	0x08002911
 8002904:	08002921 	.word	0x08002921
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800290e:	e116      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002910:	2302      	movs	r3, #2
 8002912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002916:	e112      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002918:	2304      	movs	r3, #4
 800291a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800291e:	e10e      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002920:	2308      	movs	r3, #8
 8002922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002926:	e10a      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002928:	2310      	movs	r3, #16
 800292a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800292e:	bf00      	nop
 8002930:	e105      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a7c      	ldr	r2, [pc, #496]	; (8002b28 <UART_SetConfig+0x2f8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d138      	bne.n	80029ae <UART_SetConfig+0x17e>
 800293c:	4b79      	ldr	r3, [pc, #484]	; (8002b24 <UART_SetConfig+0x2f4>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b0c      	cmp	r3, #12
 8002948:	d82c      	bhi.n	80029a4 <UART_SetConfig+0x174>
 800294a:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <UART_SetConfig+0x120>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	08002985 	.word	0x08002985
 8002954:	080029a5 	.word	0x080029a5
 8002958:	080029a5 	.word	0x080029a5
 800295c:	080029a5 	.word	0x080029a5
 8002960:	08002995 	.word	0x08002995
 8002964:	080029a5 	.word	0x080029a5
 8002968:	080029a5 	.word	0x080029a5
 800296c:	080029a5 	.word	0x080029a5
 8002970:	0800298d 	.word	0x0800298d
 8002974:	080029a5 	.word	0x080029a5
 8002978:	080029a5 	.word	0x080029a5
 800297c:	080029a5 	.word	0x080029a5
 8002980:	0800299d 	.word	0x0800299d
 8002984:	2300      	movs	r3, #0
 8002986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800298a:	e0d8      	b.n	8002b3e <UART_SetConfig+0x30e>
 800298c:	2302      	movs	r3, #2
 800298e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002992:	e0d4      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002994:	2304      	movs	r3, #4
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800299a:	e0d0      	b.n	8002b3e <UART_SetConfig+0x30e>
 800299c:	2308      	movs	r3, #8
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029a2:	e0cc      	b.n	8002b3e <UART_SetConfig+0x30e>
 80029a4:	2310      	movs	r3, #16
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029aa:	bf00      	nop
 80029ac:	e0c7      	b.n	8002b3e <UART_SetConfig+0x30e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a5e      	ldr	r2, [pc, #376]	; (8002b2c <UART_SetConfig+0x2fc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d125      	bne.n	8002a04 <UART_SetConfig+0x1d4>
 80029b8:	4b5a      	ldr	r3, [pc, #360]	; (8002b24 <UART_SetConfig+0x2f4>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d011      	beq.n	80029ea <UART_SetConfig+0x1ba>
 80029c6:	2b10      	cmp	r3, #16
 80029c8:	d802      	bhi.n	80029d0 <UART_SetConfig+0x1a0>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <UART_SetConfig+0x1aa>
 80029ce:	e014      	b.n	80029fa <UART_SetConfig+0x1ca>
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d006      	beq.n	80029e2 <UART_SetConfig+0x1b2>
 80029d4:	2b30      	cmp	r3, #48	; 0x30
 80029d6:	d00c      	beq.n	80029f2 <UART_SetConfig+0x1c2>
 80029d8:	e00f      	b.n	80029fa <UART_SetConfig+0x1ca>
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029e0:	e0ad      	b.n	8002b3e <UART_SetConfig+0x30e>
 80029e2:	2302      	movs	r3, #2
 80029e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029e8:	e0a9      	b.n	8002b3e <UART_SetConfig+0x30e>
 80029ea:	2304      	movs	r3, #4
 80029ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029f0:	e0a5      	b.n	8002b3e <UART_SetConfig+0x30e>
 80029f2:	2308      	movs	r3, #8
 80029f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029f8:	e0a1      	b.n	8002b3e <UART_SetConfig+0x30e>
 80029fa:	2310      	movs	r3, #16
 80029fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a00:	bf00      	nop
 8002a02:	e09c      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a49      	ldr	r2, [pc, #292]	; (8002b30 <UART_SetConfig+0x300>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d125      	bne.n	8002a5a <UART_SetConfig+0x22a>
 8002a0e:	4b45      	ldr	r3, [pc, #276]	; (8002b24 <UART_SetConfig+0x2f4>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a18:	2b40      	cmp	r3, #64	; 0x40
 8002a1a:	d011      	beq.n	8002a40 <UART_SetConfig+0x210>
 8002a1c:	2b40      	cmp	r3, #64	; 0x40
 8002a1e:	d802      	bhi.n	8002a26 <UART_SetConfig+0x1f6>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <UART_SetConfig+0x200>
 8002a24:	e014      	b.n	8002a50 <UART_SetConfig+0x220>
 8002a26:	2b80      	cmp	r3, #128	; 0x80
 8002a28:	d006      	beq.n	8002a38 <UART_SetConfig+0x208>
 8002a2a:	2bc0      	cmp	r3, #192	; 0xc0
 8002a2c:	d00c      	beq.n	8002a48 <UART_SetConfig+0x218>
 8002a2e:	e00f      	b.n	8002a50 <UART_SetConfig+0x220>
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a36:	e082      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a3e:	e07e      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002a40:	2304      	movs	r3, #4
 8002a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a46:	e07a      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002a48:	2308      	movs	r3, #8
 8002a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a4e:	e076      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002a50:	2310      	movs	r3, #16
 8002a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a56:	bf00      	nop
 8002a58:	e071      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a35      	ldr	r2, [pc, #212]	; (8002b34 <UART_SetConfig+0x304>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d129      	bne.n	8002ab8 <UART_SetConfig+0x288>
 8002a64:	4b2f      	ldr	r3, [pc, #188]	; (8002b24 <UART_SetConfig+0x2f4>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a72:	d014      	beq.n	8002a9e <UART_SetConfig+0x26e>
 8002a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a78:	d802      	bhi.n	8002a80 <UART_SetConfig+0x250>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <UART_SetConfig+0x25e>
 8002a7e:	e016      	b.n	8002aae <UART_SetConfig+0x27e>
 8002a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a84:	d007      	beq.n	8002a96 <UART_SetConfig+0x266>
 8002a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a8a:	d00c      	beq.n	8002aa6 <UART_SetConfig+0x276>
 8002a8c:	e00f      	b.n	8002aae <UART_SetConfig+0x27e>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a94:	e053      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002a96:	2302      	movs	r3, #2
 8002a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a9c:	e04f      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aa4:	e04b      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aac:	e047      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002aae:	2310      	movs	r3, #16
 8002ab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ab4:	bf00      	nop
 8002ab6:	e042      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a17      	ldr	r2, [pc, #92]	; (8002b1c <UART_SetConfig+0x2ec>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d13a      	bne.n	8002b38 <UART_SetConfig+0x308>
 8002ac2:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <UART_SetConfig+0x2f4>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad0:	d014      	beq.n	8002afc <UART_SetConfig+0x2cc>
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad6:	d802      	bhi.n	8002ade <UART_SetConfig+0x2ae>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <UART_SetConfig+0x2bc>
 8002adc:	e016      	b.n	8002b0c <UART_SetConfig+0x2dc>
 8002ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae2:	d007      	beq.n	8002af4 <UART_SetConfig+0x2c4>
 8002ae4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ae8:	d00c      	beq.n	8002b04 <UART_SetConfig+0x2d4>
 8002aea:	e00f      	b.n	8002b0c <UART_SetConfig+0x2dc>
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002af2:	e024      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002af4:	2302      	movs	r3, #2
 8002af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002afa:	e020      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002afc:	2304      	movs	r3, #4
 8002afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b02:	e01c      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002b04:	2308      	movs	r3, #8
 8002b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b0a:	e018      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002b0c:	2310      	movs	r3, #16
 8002b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b12:	bf00      	nop
 8002b14:	e013      	b.n	8002b3e <UART_SetConfig+0x30e>
 8002b16:	bf00      	nop
 8002b18:	cfff69f3 	.word	0xcfff69f3
 8002b1c:	40008000 	.word	0x40008000
 8002b20:	40013800 	.word	0x40013800
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40004400 	.word	0x40004400
 8002b2c:	40004800 	.word	0x40004800
 8002b30:	40004c00 	.word	0x40004c00
 8002b34:	40005000 	.word	0x40005000
 8002b38:	2310      	movs	r3, #16
 8002b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a86      	ldr	r2, [pc, #536]	; (8002d5c <UART_SetConfig+0x52c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	f040 8422 	bne.w	800338e <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	f200 8173 	bhi.w	8002e3a <UART_SetConfig+0x60a>
 8002b54:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <UART_SetConfig+0x32c>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002b81 	.word	0x08002b81
 8002b60:	08002e3b 	.word	0x08002e3b
 8002b64:	08002c23 	.word	0x08002c23
 8002b68:	08002e3b 	.word	0x08002e3b
 8002b6c:	08002cbb 	.word	0x08002cbb
 8002b70:	08002e3b 	.word	0x08002e3b
 8002b74:	08002e3b 	.word	0x08002e3b
 8002b78:	08002e3b 	.word	0x08002e3b
 8002b7c:	08002d8d 	.word	0x08002d8d
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b80:	f7fe ffe6 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d044      	beq.n	8002c18 <UART_SetConfig+0x3e8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d03e      	beq.n	8002c14 <UART_SetConfig+0x3e4>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d038      	beq.n	8002c10 <UART_SetConfig+0x3e0>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d032      	beq.n	8002c0c <UART_SetConfig+0x3dc>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d02c      	beq.n	8002c08 <UART_SetConfig+0x3d8>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d026      	beq.n	8002c04 <UART_SetConfig+0x3d4>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d020      	beq.n	8002c00 <UART_SetConfig+0x3d0>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	2b07      	cmp	r3, #7
 8002bc4:	d01a      	beq.n	8002bfc <UART_SetConfig+0x3cc>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d014      	beq.n	8002bf8 <UART_SetConfig+0x3c8>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2b09      	cmp	r3, #9
 8002bd4:	d00e      	beq.n	8002bf4 <UART_SetConfig+0x3c4>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	2b0a      	cmp	r3, #10
 8002bdc:	d008      	beq.n	8002bf0 <UART_SetConfig+0x3c0>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	2b0b      	cmp	r3, #11
 8002be4:	d102      	bne.n	8002bec <UART_SetConfig+0x3bc>
 8002be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bea:	e016      	b.n	8002c1a <UART_SetConfig+0x3ea>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e014      	b.n	8002c1a <UART_SetConfig+0x3ea>
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	e012      	b.n	8002c1a <UART_SetConfig+0x3ea>
 8002bf4:	2340      	movs	r3, #64	; 0x40
 8002bf6:	e010      	b.n	8002c1a <UART_SetConfig+0x3ea>
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	e00e      	b.n	8002c1a <UART_SetConfig+0x3ea>
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	e00c      	b.n	8002c1a <UART_SetConfig+0x3ea>
 8002c00:	230c      	movs	r3, #12
 8002c02:	e00a      	b.n	8002c1a <UART_SetConfig+0x3ea>
 8002c04:	230a      	movs	r3, #10
 8002c06:	e008      	b.n	8002c1a <UART_SetConfig+0x3ea>
 8002c08:	2308      	movs	r3, #8
 8002c0a:	e006      	b.n	8002c1a <UART_SetConfig+0x3ea>
 8002c0c:	2306      	movs	r3, #6
 8002c0e:	e004      	b.n	8002c1a <UART_SetConfig+0x3ea>
 8002c10:	2304      	movs	r3, #4
 8002c12:	e002      	b.n	8002c1a <UART_SetConfig+0x3ea>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e000      	b.n	8002c1a <UART_SetConfig+0x3ea>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	617b      	str	r3, [r7, #20]
        break;
 8002c20:	e10e      	b.n	8002e40 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d044      	beq.n	8002cb4 <UART_SetConfig+0x484>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d03e      	beq.n	8002cb0 <UART_SetConfig+0x480>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d038      	beq.n	8002cac <UART_SetConfig+0x47c>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d032      	beq.n	8002ca8 <UART_SetConfig+0x478>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d02c      	beq.n	8002ca4 <UART_SetConfig+0x474>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d026      	beq.n	8002ca0 <UART_SetConfig+0x470>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2b06      	cmp	r3, #6
 8002c58:	d020      	beq.n	8002c9c <UART_SetConfig+0x46c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	2b07      	cmp	r3, #7
 8002c60:	d01a      	beq.n	8002c98 <UART_SetConfig+0x468>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d014      	beq.n	8002c94 <UART_SetConfig+0x464>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2b09      	cmp	r3, #9
 8002c70:	d00e      	beq.n	8002c90 <UART_SetConfig+0x460>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b0a      	cmp	r3, #10
 8002c78:	d008      	beq.n	8002c8c <UART_SetConfig+0x45c>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	2b0b      	cmp	r3, #11
 8002c80:	d102      	bne.n	8002c88 <UART_SetConfig+0x458>
 8002c82:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002c86:	e016      	b.n	8002cb6 <UART_SetConfig+0x486>
 8002c88:	4b35      	ldr	r3, [pc, #212]	; (8002d60 <UART_SetConfig+0x530>)
 8002c8a:	e014      	b.n	8002cb6 <UART_SetConfig+0x486>
 8002c8c:	4b35      	ldr	r3, [pc, #212]	; (8002d64 <UART_SetConfig+0x534>)
 8002c8e:	e012      	b.n	8002cb6 <UART_SetConfig+0x486>
 8002c90:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <UART_SetConfig+0x538>)
 8002c92:	e010      	b.n	8002cb6 <UART_SetConfig+0x486>
 8002c94:	4b35      	ldr	r3, [pc, #212]	; (8002d6c <UART_SetConfig+0x53c>)
 8002c96:	e00e      	b.n	8002cb6 <UART_SetConfig+0x486>
 8002c98:	4b35      	ldr	r3, [pc, #212]	; (8002d70 <UART_SetConfig+0x540>)
 8002c9a:	e00c      	b.n	8002cb6 <UART_SetConfig+0x486>
 8002c9c:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <UART_SetConfig+0x544>)
 8002c9e:	e00a      	b.n	8002cb6 <UART_SetConfig+0x486>
 8002ca0:	4b35      	ldr	r3, [pc, #212]	; (8002d78 <UART_SetConfig+0x548>)
 8002ca2:	e008      	b.n	8002cb6 <UART_SetConfig+0x486>
 8002ca4:	4b35      	ldr	r3, [pc, #212]	; (8002d7c <UART_SetConfig+0x54c>)
 8002ca6:	e006      	b.n	8002cb6 <UART_SetConfig+0x486>
 8002ca8:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <UART_SetConfig+0x550>)
 8002caa:	e004      	b.n	8002cb6 <UART_SetConfig+0x486>
 8002cac:	4b35      	ldr	r3, [pc, #212]	; (8002d84 <UART_SetConfig+0x554>)
 8002cae:	e002      	b.n	8002cb6 <UART_SetConfig+0x486>
 8002cb0:	4b35      	ldr	r3, [pc, #212]	; (8002d88 <UART_SetConfig+0x558>)
 8002cb2:	e000      	b.n	8002cb6 <UART_SetConfig+0x486>
 8002cb4:	4b2a      	ldr	r3, [pc, #168]	; (8002d60 <UART_SetConfig+0x530>)
 8002cb6:	617b      	str	r3, [r7, #20]
        break;
 8002cb8:	e0c2      	b.n	8002e40 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002cba:	f7fe fedb 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d044      	beq.n	8002d52 <UART_SetConfig+0x522>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d03e      	beq.n	8002d4e <UART_SetConfig+0x51e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d038      	beq.n	8002d4a <UART_SetConfig+0x51a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d032      	beq.n	8002d46 <UART_SetConfig+0x516>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d02c      	beq.n	8002d42 <UART_SetConfig+0x512>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	d026      	beq.n	8002d3e <UART_SetConfig+0x50e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d020      	beq.n	8002d3a <UART_SetConfig+0x50a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	2b07      	cmp	r3, #7
 8002cfe:	d01a      	beq.n	8002d36 <UART_SetConfig+0x506>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d014      	beq.n	8002d32 <UART_SetConfig+0x502>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	2b09      	cmp	r3, #9
 8002d0e:	d00e      	beq.n	8002d2e <UART_SetConfig+0x4fe>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	2b0a      	cmp	r3, #10
 8002d16:	d008      	beq.n	8002d2a <UART_SetConfig+0x4fa>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2b0b      	cmp	r3, #11
 8002d1e:	d102      	bne.n	8002d26 <UART_SetConfig+0x4f6>
 8002d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d24:	e016      	b.n	8002d54 <UART_SetConfig+0x524>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e014      	b.n	8002d54 <UART_SetConfig+0x524>
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	e012      	b.n	8002d54 <UART_SetConfig+0x524>
 8002d2e:	2340      	movs	r3, #64	; 0x40
 8002d30:	e010      	b.n	8002d54 <UART_SetConfig+0x524>
 8002d32:	2320      	movs	r3, #32
 8002d34:	e00e      	b.n	8002d54 <UART_SetConfig+0x524>
 8002d36:	2310      	movs	r3, #16
 8002d38:	e00c      	b.n	8002d54 <UART_SetConfig+0x524>
 8002d3a:	230c      	movs	r3, #12
 8002d3c:	e00a      	b.n	8002d54 <UART_SetConfig+0x524>
 8002d3e:	230a      	movs	r3, #10
 8002d40:	e008      	b.n	8002d54 <UART_SetConfig+0x524>
 8002d42:	2308      	movs	r3, #8
 8002d44:	e006      	b.n	8002d54 <UART_SetConfig+0x524>
 8002d46:	2306      	movs	r3, #6
 8002d48:	e004      	b.n	8002d54 <UART_SetConfig+0x524>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	e002      	b.n	8002d54 <UART_SetConfig+0x524>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e000      	b.n	8002d54 <UART_SetConfig+0x524>
 8002d52:	2301      	movs	r3, #1
 8002d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d58:	617b      	str	r3, [r7, #20]
        break;
 8002d5a:	e071      	b.n	8002e40 <UART_SetConfig+0x610>
 8002d5c:	40008000 	.word	0x40008000
 8002d60:	00f42400 	.word	0x00f42400
 8002d64:	0001e848 	.word	0x0001e848
 8002d68:	0003d090 	.word	0x0003d090
 8002d6c:	0007a120 	.word	0x0007a120
 8002d70:	000f4240 	.word	0x000f4240
 8002d74:	00145855 	.word	0x00145855
 8002d78:	00186a00 	.word	0x00186a00
 8002d7c:	001e8480 	.word	0x001e8480
 8002d80:	0028b0aa 	.word	0x0028b0aa
 8002d84:	003d0900 	.word	0x003d0900
 8002d88:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d04e      	beq.n	8002e32 <UART_SetConfig+0x602>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d047      	beq.n	8002e2c <UART_SetConfig+0x5fc>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d040      	beq.n	8002e26 <UART_SetConfig+0x5f6>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d039      	beq.n	8002e20 <UART_SetConfig+0x5f0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d032      	beq.n	8002e1a <UART_SetConfig+0x5ea>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2b05      	cmp	r3, #5
 8002dba:	d02b      	beq.n	8002e14 <UART_SetConfig+0x5e4>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b06      	cmp	r3, #6
 8002dc2:	d024      	beq.n	8002e0e <UART_SetConfig+0x5de>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	2b07      	cmp	r3, #7
 8002dca:	d01d      	beq.n	8002e08 <UART_SetConfig+0x5d8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d016      	beq.n	8002e02 <UART_SetConfig+0x5d2>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	2b09      	cmp	r3, #9
 8002dda:	d00f      	beq.n	8002dfc <UART_SetConfig+0x5cc>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	2b0a      	cmp	r3, #10
 8002de2:	d008      	beq.n	8002df6 <UART_SetConfig+0x5c6>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	2b0b      	cmp	r3, #11
 8002dea:	d101      	bne.n	8002df0 <UART_SetConfig+0x5c0>
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	e022      	b.n	8002e36 <UART_SetConfig+0x606>
 8002df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002df4:	e01f      	b.n	8002e36 <UART_SetConfig+0x606>
 8002df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dfa:	e01c      	b.n	8002e36 <UART_SetConfig+0x606>
 8002dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e00:	e019      	b.n	8002e36 <UART_SetConfig+0x606>
 8002e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e06:	e016      	b.n	8002e36 <UART_SetConfig+0x606>
 8002e08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e0c:	e013      	b.n	8002e36 <UART_SetConfig+0x606>
 8002e0e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002e12:	e010      	b.n	8002e36 <UART_SetConfig+0x606>
 8002e14:	f640 43cc 	movw	r3, #3276	; 0xccc
 8002e18:	e00d      	b.n	8002e36 <UART_SetConfig+0x606>
 8002e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e1e:	e00a      	b.n	8002e36 <UART_SetConfig+0x606>
 8002e20:	f241 5355 	movw	r3, #5461	; 0x1555
 8002e24:	e007      	b.n	8002e36 <UART_SetConfig+0x606>
 8002e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e2a:	e004      	b.n	8002e36 <UART_SetConfig+0x606>
 8002e2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e30:	e001      	b.n	8002e36 <UART_SetConfig+0x606>
 8002e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e36:	617b      	str	r3, [r7, #20]
        break;
 8002e38:	e002      	b.n	8002e40 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	76fb      	strb	r3, [r7, #27]
        break;
 8002e3e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 86b7 	beq.w	8003bb6 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d305      	bcc.n	8002e64 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d903      	bls.n	8002e6c <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	f000 bea5 	b.w	8003bb6 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 8002e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	f200 8277 	bhi.w	8003364 <UART_SetConfig+0xb34>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <UART_SetConfig+0x64c>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002ea1 	.word	0x08002ea1
 8002e80:	08003365 	.word	0x08003365
 8002e84:	08002fdf 	.word	0x08002fdf
 8002e88:	08003365 	.word	0x08003365
 8002e8c:	080030d5 	.word	0x080030d5
 8002e90:	08003365 	.word	0x08003365
 8002e94:	08003365 	.word	0x08003365
 8002e98:	08003365 	.word	0x08003365
 8002e9c:	08003213 	.word	0x08003213
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7fe fe56 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8002ea4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d067      	beq.n	8002f86 <UART_SetConfig+0x756>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d05e      	beq.n	8002f7c <UART_SetConfig+0x74c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d055      	beq.n	8002f72 <UART_SetConfig+0x742>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d04c      	beq.n	8002f68 <UART_SetConfig+0x738>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d043      	beq.n	8002f5e <UART_SetConfig+0x72e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d03a      	beq.n	8002f54 <UART_SetConfig+0x724>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d031      	beq.n	8002f4a <UART_SetConfig+0x71a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	2b07      	cmp	r3, #7
 8002eec:	d028      	beq.n	8002f40 <UART_SetConfig+0x710>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d01f      	beq.n	8002f36 <UART_SetConfig+0x706>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b09      	cmp	r3, #9
 8002efc:	d016      	beq.n	8002f2c <UART_SetConfig+0x6fc>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2b0a      	cmp	r3, #10
 8002f04:	d00d      	beq.n	8002f22 <UART_SetConfig+0x6f2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b0b      	cmp	r3, #11
 8002f0c:	d104      	bne.n	8002f18 <UART_SetConfig+0x6e8>
 8002f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f12:	f04f 0400 	mov.w	r4, #0
 8002f16:	e03a      	b.n	8002f8e <UART_SetConfig+0x75e>
 8002f18:	f04f 0301 	mov.w	r3, #1
 8002f1c:	f04f 0400 	mov.w	r4, #0
 8002f20:	e035      	b.n	8002f8e <UART_SetConfig+0x75e>
 8002f22:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002f26:	f04f 0400 	mov.w	r4, #0
 8002f2a:	e030      	b.n	8002f8e <UART_SetConfig+0x75e>
 8002f2c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002f30:	f04f 0400 	mov.w	r4, #0
 8002f34:	e02b      	b.n	8002f8e <UART_SetConfig+0x75e>
 8002f36:	f04f 0320 	mov.w	r3, #32
 8002f3a:	f04f 0400 	mov.w	r4, #0
 8002f3e:	e026      	b.n	8002f8e <UART_SetConfig+0x75e>
 8002f40:	f04f 0310 	mov.w	r3, #16
 8002f44:	f04f 0400 	mov.w	r4, #0
 8002f48:	e021      	b.n	8002f8e <UART_SetConfig+0x75e>
 8002f4a:	f04f 030c 	mov.w	r3, #12
 8002f4e:	f04f 0400 	mov.w	r4, #0
 8002f52:	e01c      	b.n	8002f8e <UART_SetConfig+0x75e>
 8002f54:	f04f 030a 	mov.w	r3, #10
 8002f58:	f04f 0400 	mov.w	r4, #0
 8002f5c:	e017      	b.n	8002f8e <UART_SetConfig+0x75e>
 8002f5e:	f04f 0308 	mov.w	r3, #8
 8002f62:	f04f 0400 	mov.w	r4, #0
 8002f66:	e012      	b.n	8002f8e <UART_SetConfig+0x75e>
 8002f68:	f04f 0306 	mov.w	r3, #6
 8002f6c:	f04f 0400 	mov.w	r4, #0
 8002f70:	e00d      	b.n	8002f8e <UART_SetConfig+0x75e>
 8002f72:	f04f 0304 	mov.w	r3, #4
 8002f76:	f04f 0400 	mov.w	r4, #0
 8002f7a:	e008      	b.n	8002f8e <UART_SetConfig+0x75e>
 8002f7c:	f04f 0302 	mov.w	r3, #2
 8002f80:	f04f 0400 	mov.w	r4, #0
 8002f84:	e003      	b.n	8002f8e <UART_SetConfig+0x75e>
 8002f86:	f04f 0301 	mov.w	r3, #1
 8002f8a:	f04f 0400 	mov.w	r4, #0
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4623      	mov	r3, r4
 8002f92:	f7fd f945 	bl	8000220 <__aeabi_uldivmod>
 8002f96:	4603      	mov	r3, r0
 8002f98:	460c      	mov	r4, r1
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4622      	mov	r2, r4
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	f04f 0400 	mov.w	r4, #0
 8002fa6:	0214      	lsls	r4, r2, #8
 8002fa8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002fac:	020b      	lsls	r3, r1, #8
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6852      	ldr	r2, [r2, #4]
 8002fb2:	0852      	lsrs	r2, r2, #1
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	eb13 0b01 	adds.w	fp, r3, r1
 8002fbe:	eb44 0c02 	adc.w	ip, r4, r2
 8002fc2:	4658      	mov	r0, fp
 8002fc4:	4661      	mov	r1, ip
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f04f 0400 	mov.w	r4, #0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4623      	mov	r3, r4
 8002fd2:	f7fd f925 	bl	8000220 <__aeabi_uldivmod>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	460c      	mov	r4, r1
 8002fda:	61fb      	str	r3, [r7, #28]
            break;
 8002fdc:	e1c5      	b.n	800336a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d05b      	beq.n	800309e <UART_SetConfig+0x86e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d053      	beq.n	8003096 <UART_SetConfig+0x866>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d04b      	beq.n	800308e <UART_SetConfig+0x85e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d043      	beq.n	8003086 <UART_SetConfig+0x856>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	2b04      	cmp	r3, #4
 8003004:	d03b      	beq.n	800307e <UART_SetConfig+0x84e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	2b05      	cmp	r3, #5
 800300c:	d033      	beq.n	8003076 <UART_SetConfig+0x846>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	2b06      	cmp	r3, #6
 8003014:	d02b      	beq.n	800306e <UART_SetConfig+0x83e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	2b07      	cmp	r3, #7
 800301c:	d023      	beq.n	8003066 <UART_SetConfig+0x836>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	2b08      	cmp	r3, #8
 8003024:	d01b      	beq.n	800305e <UART_SetConfig+0x82e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	2b09      	cmp	r3, #9
 800302c:	d013      	beq.n	8003056 <UART_SetConfig+0x826>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2b0a      	cmp	r3, #10
 8003034:	d00b      	beq.n	800304e <UART_SetConfig+0x81e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	2b0b      	cmp	r3, #11
 800303c:	d103      	bne.n	8003046 <UART_SetConfig+0x816>
 800303e:	4bae      	ldr	r3, [pc, #696]	; (80032f8 <UART_SetConfig+0xac8>)
 8003040:	f04f 0400 	mov.w	r4, #0
 8003044:	e02e      	b.n	80030a4 <UART_SetConfig+0x874>
 8003046:	4bad      	ldr	r3, [pc, #692]	; (80032fc <UART_SetConfig+0xacc>)
 8003048:	f04f 0400 	mov.w	r4, #0
 800304c:	e02a      	b.n	80030a4 <UART_SetConfig+0x874>
 800304e:	4bac      	ldr	r3, [pc, #688]	; (8003300 <UART_SetConfig+0xad0>)
 8003050:	f04f 0400 	mov.w	r4, #0
 8003054:	e026      	b.n	80030a4 <UART_SetConfig+0x874>
 8003056:	4bab      	ldr	r3, [pc, #684]	; (8003304 <UART_SetConfig+0xad4>)
 8003058:	f04f 0400 	mov.w	r4, #0
 800305c:	e022      	b.n	80030a4 <UART_SetConfig+0x874>
 800305e:	4baa      	ldr	r3, [pc, #680]	; (8003308 <UART_SetConfig+0xad8>)
 8003060:	f04f 0400 	mov.w	r4, #0
 8003064:	e01e      	b.n	80030a4 <UART_SetConfig+0x874>
 8003066:	4ba9      	ldr	r3, [pc, #676]	; (800330c <UART_SetConfig+0xadc>)
 8003068:	f04f 0400 	mov.w	r4, #0
 800306c:	e01a      	b.n	80030a4 <UART_SetConfig+0x874>
 800306e:	a49e      	add	r4, pc, #632	; (adr r4, 80032e8 <UART_SetConfig+0xab8>)
 8003070:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003074:	e016      	b.n	80030a4 <UART_SetConfig+0x874>
 8003076:	4ba6      	ldr	r3, [pc, #664]	; (8003310 <UART_SetConfig+0xae0>)
 8003078:	f04f 0400 	mov.w	r4, #0
 800307c:	e012      	b.n	80030a4 <UART_SetConfig+0x874>
 800307e:	4ba5      	ldr	r3, [pc, #660]	; (8003314 <UART_SetConfig+0xae4>)
 8003080:	f04f 0400 	mov.w	r4, #0
 8003084:	e00e      	b.n	80030a4 <UART_SetConfig+0x874>
 8003086:	a49a      	add	r4, pc, #616	; (adr r4, 80032f0 <UART_SetConfig+0xac0>)
 8003088:	e9d4 3400 	ldrd	r3, r4, [r4]
 800308c:	e00a      	b.n	80030a4 <UART_SetConfig+0x874>
 800308e:	4ba2      	ldr	r3, [pc, #648]	; (8003318 <UART_SetConfig+0xae8>)
 8003090:	f04f 0400 	mov.w	r4, #0
 8003094:	e006      	b.n	80030a4 <UART_SetConfig+0x874>
 8003096:	4ba1      	ldr	r3, [pc, #644]	; (800331c <UART_SetConfig+0xaec>)
 8003098:	f04f 0400 	mov.w	r4, #0
 800309c:	e002      	b.n	80030a4 <UART_SetConfig+0x874>
 800309e:	4b97      	ldr	r3, [pc, #604]	; (80032fc <UART_SetConfig+0xacc>)
 80030a0:	f04f 0400 	mov.w	r4, #0
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6852      	ldr	r2, [r2, #4]
 80030a8:	0852      	lsrs	r2, r2, #1
 80030aa:	4611      	mov	r1, r2
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	eb13 0b01 	adds.w	fp, r3, r1
 80030b4:	eb44 0c02 	adc.w	ip, r4, r2
 80030b8:	4658      	mov	r0, fp
 80030ba:	4661      	mov	r1, ip
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f04f 0400 	mov.w	r4, #0
 80030c4:	461a      	mov	r2, r3
 80030c6:	4623      	mov	r3, r4
 80030c8:	f7fd f8aa 	bl	8000220 <__aeabi_uldivmod>
 80030cc:	4603      	mov	r3, r0
 80030ce:	460c      	mov	r4, r1
 80030d0:	61fb      	str	r3, [r7, #28]
            break;
 80030d2:	e14a      	b.n	800336a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80030d4:	f7fe fcce 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 80030d8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4618      	mov	r0, r3
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d067      	beq.n	80031ba <UART_SetConfig+0x98a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d05e      	beq.n	80031b0 <UART_SetConfig+0x980>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d055      	beq.n	80031a6 <UART_SetConfig+0x976>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d04c      	beq.n	800319c <UART_SetConfig+0x96c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b04      	cmp	r3, #4
 8003108:	d043      	beq.n	8003192 <UART_SetConfig+0x962>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	2b05      	cmp	r3, #5
 8003110:	d03a      	beq.n	8003188 <UART_SetConfig+0x958>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2b06      	cmp	r3, #6
 8003118:	d031      	beq.n	800317e <UART_SetConfig+0x94e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2b07      	cmp	r3, #7
 8003120:	d028      	beq.n	8003174 <UART_SetConfig+0x944>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	2b08      	cmp	r3, #8
 8003128:	d01f      	beq.n	800316a <UART_SetConfig+0x93a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2b09      	cmp	r3, #9
 8003130:	d016      	beq.n	8003160 <UART_SetConfig+0x930>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	2b0a      	cmp	r3, #10
 8003138:	d00d      	beq.n	8003156 <UART_SetConfig+0x926>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	2b0b      	cmp	r3, #11
 8003140:	d104      	bne.n	800314c <UART_SetConfig+0x91c>
 8003142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003146:	f04f 0400 	mov.w	r4, #0
 800314a:	e03a      	b.n	80031c2 <UART_SetConfig+0x992>
 800314c:	f04f 0301 	mov.w	r3, #1
 8003150:	f04f 0400 	mov.w	r4, #0
 8003154:	e035      	b.n	80031c2 <UART_SetConfig+0x992>
 8003156:	f04f 0380 	mov.w	r3, #128	; 0x80
 800315a:	f04f 0400 	mov.w	r4, #0
 800315e:	e030      	b.n	80031c2 <UART_SetConfig+0x992>
 8003160:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003164:	f04f 0400 	mov.w	r4, #0
 8003168:	e02b      	b.n	80031c2 <UART_SetConfig+0x992>
 800316a:	f04f 0320 	mov.w	r3, #32
 800316e:	f04f 0400 	mov.w	r4, #0
 8003172:	e026      	b.n	80031c2 <UART_SetConfig+0x992>
 8003174:	f04f 0310 	mov.w	r3, #16
 8003178:	f04f 0400 	mov.w	r4, #0
 800317c:	e021      	b.n	80031c2 <UART_SetConfig+0x992>
 800317e:	f04f 030c 	mov.w	r3, #12
 8003182:	f04f 0400 	mov.w	r4, #0
 8003186:	e01c      	b.n	80031c2 <UART_SetConfig+0x992>
 8003188:	f04f 030a 	mov.w	r3, #10
 800318c:	f04f 0400 	mov.w	r4, #0
 8003190:	e017      	b.n	80031c2 <UART_SetConfig+0x992>
 8003192:	f04f 0308 	mov.w	r3, #8
 8003196:	f04f 0400 	mov.w	r4, #0
 800319a:	e012      	b.n	80031c2 <UART_SetConfig+0x992>
 800319c:	f04f 0306 	mov.w	r3, #6
 80031a0:	f04f 0400 	mov.w	r4, #0
 80031a4:	e00d      	b.n	80031c2 <UART_SetConfig+0x992>
 80031a6:	f04f 0304 	mov.w	r3, #4
 80031aa:	f04f 0400 	mov.w	r4, #0
 80031ae:	e008      	b.n	80031c2 <UART_SetConfig+0x992>
 80031b0:	f04f 0302 	mov.w	r3, #2
 80031b4:	f04f 0400 	mov.w	r4, #0
 80031b8:	e003      	b.n	80031c2 <UART_SetConfig+0x992>
 80031ba:	f04f 0301 	mov.w	r3, #1
 80031be:	f04f 0400 	mov.w	r4, #0
 80031c2:	461a      	mov	r2, r3
 80031c4:	4623      	mov	r3, r4
 80031c6:	f7fd f82b 	bl	8000220 <__aeabi_uldivmod>
 80031ca:	4603      	mov	r3, r0
 80031cc:	460c      	mov	r4, r1
 80031ce:	4619      	mov	r1, r3
 80031d0:	4622      	mov	r2, r4
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	f04f 0400 	mov.w	r4, #0
 80031da:	0214      	lsls	r4, r2, #8
 80031dc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80031e0:	020b      	lsls	r3, r1, #8
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6852      	ldr	r2, [r2, #4]
 80031e6:	0852      	lsrs	r2, r2, #1
 80031e8:	4611      	mov	r1, r2
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	eb13 0b01 	adds.w	fp, r3, r1
 80031f2:	eb44 0c02 	adc.w	ip, r4, r2
 80031f6:	4658      	mov	r0, fp
 80031f8:	4661      	mov	r1, ip
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f04f 0400 	mov.w	r4, #0
 8003202:	461a      	mov	r2, r3
 8003204:	4623      	mov	r3, r4
 8003206:	f7fd f80b 	bl	8000220 <__aeabi_uldivmod>
 800320a:	4603      	mov	r3, r0
 800320c:	460c      	mov	r4, r1
 800320e:	61fb      	str	r3, [r7, #28]
            break;
 8003210:	e0ab      	b.n	800336a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8088 	beq.w	800332c <UART_SetConfig+0xafc>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2b01      	cmp	r3, #1
 8003222:	d05b      	beq.n	80032dc <UART_SetConfig+0xaac>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2b02      	cmp	r3, #2
 800322a:	d052      	beq.n	80032d2 <UART_SetConfig+0xaa2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	2b03      	cmp	r3, #3
 8003232:	d04a      	beq.n	80032ca <UART_SetConfig+0xa9a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2b04      	cmp	r3, #4
 800323a:	d041      	beq.n	80032c0 <UART_SetConfig+0xa90>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	2b05      	cmp	r3, #5
 8003242:	d039      	beq.n	80032b8 <UART_SetConfig+0xa88>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2b06      	cmp	r3, #6
 800324a:	d031      	beq.n	80032b0 <UART_SetConfig+0xa80>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	2b07      	cmp	r3, #7
 8003252:	d028      	beq.n	80032a6 <UART_SetConfig+0xa76>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	2b08      	cmp	r3, #8
 800325a:	d01f      	beq.n	800329c <UART_SetConfig+0xa6c>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2b09      	cmp	r3, #9
 8003262:	d016      	beq.n	8003292 <UART_SetConfig+0xa62>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	2b0a      	cmp	r3, #10
 800326a:	d00d      	beq.n	8003288 <UART_SetConfig+0xa58>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	2b0b      	cmp	r3, #11
 8003272:	d104      	bne.n	800327e <UART_SetConfig+0xa4e>
 8003274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003278:	f04f 0400 	mov.w	r4, #0
 800327c:	e05a      	b.n	8003334 <UART_SetConfig+0xb04>
 800327e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003282:	f04f 0400 	mov.w	r4, #0
 8003286:	e055      	b.n	8003334 <UART_SetConfig+0xb04>
 8003288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800328c:	f04f 0400 	mov.w	r4, #0
 8003290:	e050      	b.n	8003334 <UART_SetConfig+0xb04>
 8003292:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003296:	f04f 0400 	mov.w	r4, #0
 800329a:	e04b      	b.n	8003334 <UART_SetConfig+0xb04>
 800329c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032a0:	f04f 0400 	mov.w	r4, #0
 80032a4:	e046      	b.n	8003334 <UART_SetConfig+0xb04>
 80032a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80032aa:	f04f 0400 	mov.w	r4, #0
 80032ae:	e041      	b.n	8003334 <UART_SetConfig+0xb04>
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <UART_SetConfig+0xaf0>)
 80032b2:	f04f 0400 	mov.w	r4, #0
 80032b6:	e03d      	b.n	8003334 <UART_SetConfig+0xb04>
 80032b8:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <UART_SetConfig+0xaf4>)
 80032ba:	f04f 0400 	mov.w	r4, #0
 80032be:	e039      	b.n	8003334 <UART_SetConfig+0xb04>
 80032c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032c4:	f04f 0400 	mov.w	r4, #0
 80032c8:	e034      	b.n	8003334 <UART_SetConfig+0xb04>
 80032ca:	4b17      	ldr	r3, [pc, #92]	; (8003328 <UART_SetConfig+0xaf8>)
 80032cc:	f04f 0400 	mov.w	r4, #0
 80032d0:	e030      	b.n	8003334 <UART_SetConfig+0xb04>
 80032d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032d6:	f04f 0400 	mov.w	r4, #0
 80032da:	e02b      	b.n	8003334 <UART_SetConfig+0xb04>
 80032dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032e0:	f04f 0400 	mov.w	r4, #0
 80032e4:	e026      	b.n	8003334 <UART_SetConfig+0xb04>
 80032e6:	bf00      	nop
 80032e8:	14585500 	.word	0x14585500
 80032ec:	00000000 	.word	0x00000000
 80032f0:	28b0aa00 	.word	0x28b0aa00
 80032f4:	00000000 	.word	0x00000000
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	f4240000 	.word	0xf4240000
 8003300:	01e84800 	.word	0x01e84800
 8003304:	03d09000 	.word	0x03d09000
 8003308:	07a12000 	.word	0x07a12000
 800330c:	0f424000 	.word	0x0f424000
 8003310:	186a0000 	.word	0x186a0000
 8003314:	1e848000 	.word	0x1e848000
 8003318:	3d090000 	.word	0x3d090000
 800331c:	7a120000 	.word	0x7a120000
 8003320:	000aaa00 	.word	0x000aaa00
 8003324:	000ccc00 	.word	0x000ccc00
 8003328:	00155500 	.word	0x00155500
 800332c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003330:	f04f 0400 	mov.w	r4, #0
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6852      	ldr	r2, [r2, #4]
 8003338:	0852      	lsrs	r2, r2, #1
 800333a:	4611      	mov	r1, r2
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	eb13 0b01 	adds.w	fp, r3, r1
 8003344:	eb44 0c02 	adc.w	ip, r4, r2
 8003348:	4658      	mov	r0, fp
 800334a:	4661      	mov	r1, ip
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f04f 0400 	mov.w	r4, #0
 8003354:	461a      	mov	r2, r3
 8003356:	4623      	mov	r3, r4
 8003358:	f7fc ff62 	bl	8000220 <__aeabi_uldivmod>
 800335c:	4603      	mov	r3, r0
 800335e:	460c      	mov	r4, r1
 8003360:	61fb      	str	r3, [r7, #28]
            break;
 8003362:	e002      	b.n	800336a <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	76fb      	strb	r3, [r7, #27]
            break;
 8003368:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003370:	d309      	bcc.n	8003386 <UART_SetConfig+0xb56>
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003378:	d205      	bcs.n	8003386 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	f000 bc18 	b.w	8003bb6 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	76fb      	strb	r3, [r7, #27]
 800338a:	f000 bc14 	b.w	8003bb6 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003396:	f040 8204 	bne.w	80037a2 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 800339a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800339e:	2b08      	cmp	r3, #8
 80033a0:	f200 81df 	bhi.w	8003762 <UART_SetConfig+0xf32>
 80033a4:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <UART_SetConfig+0xb7c>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033d1 	.word	0x080033d1
 80033b0:	08003489 	.word	0x08003489
 80033b4:	08003541 	.word	0x08003541
 80033b8:	08003763 	.word	0x08003763
 80033bc:	080035e9 	.word	0x080035e9
 80033c0:	08003763 	.word	0x08003763
 80033c4:	08003763 	.word	0x08003763
 80033c8:	08003763 	.word	0x08003763
 80033cc:	080036a1 	.word	0x080036a1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7fe fbbe 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 80033d4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d044      	beq.n	8003468 <UART_SetConfig+0xc38>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d03e      	beq.n	8003464 <UART_SetConfig+0xc34>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d038      	beq.n	8003460 <UART_SetConfig+0xc30>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d032      	beq.n	800345c <UART_SetConfig+0xc2c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d02c      	beq.n	8003458 <UART_SetConfig+0xc28>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b05      	cmp	r3, #5
 8003404:	d026      	beq.n	8003454 <UART_SetConfig+0xc24>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2b06      	cmp	r3, #6
 800340c:	d020      	beq.n	8003450 <UART_SetConfig+0xc20>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	2b07      	cmp	r3, #7
 8003414:	d01a      	beq.n	800344c <UART_SetConfig+0xc1c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2b08      	cmp	r3, #8
 800341c:	d014      	beq.n	8003448 <UART_SetConfig+0xc18>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2b09      	cmp	r3, #9
 8003424:	d00e      	beq.n	8003444 <UART_SetConfig+0xc14>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	2b0a      	cmp	r3, #10
 800342c:	d008      	beq.n	8003440 <UART_SetConfig+0xc10>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	2b0b      	cmp	r3, #11
 8003434:	d102      	bne.n	800343c <UART_SetConfig+0xc0c>
 8003436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800343a:	e016      	b.n	800346a <UART_SetConfig+0xc3a>
 800343c:	2301      	movs	r3, #1
 800343e:	e014      	b.n	800346a <UART_SetConfig+0xc3a>
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	e012      	b.n	800346a <UART_SetConfig+0xc3a>
 8003444:	2340      	movs	r3, #64	; 0x40
 8003446:	e010      	b.n	800346a <UART_SetConfig+0xc3a>
 8003448:	2320      	movs	r3, #32
 800344a:	e00e      	b.n	800346a <UART_SetConfig+0xc3a>
 800344c:	2310      	movs	r3, #16
 800344e:	e00c      	b.n	800346a <UART_SetConfig+0xc3a>
 8003450:	230c      	movs	r3, #12
 8003452:	e00a      	b.n	800346a <UART_SetConfig+0xc3a>
 8003454:	230a      	movs	r3, #10
 8003456:	e008      	b.n	800346a <UART_SetConfig+0xc3a>
 8003458:	2308      	movs	r3, #8
 800345a:	e006      	b.n	800346a <UART_SetConfig+0xc3a>
 800345c:	2306      	movs	r3, #6
 800345e:	e004      	b.n	800346a <UART_SetConfig+0xc3a>
 8003460:	2304      	movs	r3, #4
 8003462:	e002      	b.n	800346a <UART_SetConfig+0xc3a>
 8003464:	2302      	movs	r3, #2
 8003466:	e000      	b.n	800346a <UART_SetConfig+0xc3a>
 8003468:	2301      	movs	r3, #1
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	005a      	lsls	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	441a      	add	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	b29b      	uxth	r3, r3
 8003484:	61fb      	str	r3, [r7, #28]
        break;
 8003486:	e16f      	b.n	8003768 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003488:	f7fe fb78 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 800348c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2b00      	cmp	r3, #0
 8003494:	d044      	beq.n	8003520 <UART_SetConfig+0xcf0>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b01      	cmp	r3, #1
 800349c:	d03e      	beq.n	800351c <UART_SetConfig+0xcec>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d038      	beq.n	8003518 <UART_SetConfig+0xce8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d032      	beq.n	8003514 <UART_SetConfig+0xce4>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d02c      	beq.n	8003510 <UART_SetConfig+0xce0>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d026      	beq.n	800350c <UART_SetConfig+0xcdc>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d020      	beq.n	8003508 <UART_SetConfig+0xcd8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	2b07      	cmp	r3, #7
 80034cc:	d01a      	beq.n	8003504 <UART_SetConfig+0xcd4>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d014      	beq.n	8003500 <UART_SetConfig+0xcd0>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	2b09      	cmp	r3, #9
 80034dc:	d00e      	beq.n	80034fc <UART_SetConfig+0xccc>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	2b0a      	cmp	r3, #10
 80034e4:	d008      	beq.n	80034f8 <UART_SetConfig+0xcc8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	2b0b      	cmp	r3, #11
 80034ec:	d102      	bne.n	80034f4 <UART_SetConfig+0xcc4>
 80034ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034f2:	e016      	b.n	8003522 <UART_SetConfig+0xcf2>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e014      	b.n	8003522 <UART_SetConfig+0xcf2>
 80034f8:	2380      	movs	r3, #128	; 0x80
 80034fa:	e012      	b.n	8003522 <UART_SetConfig+0xcf2>
 80034fc:	2340      	movs	r3, #64	; 0x40
 80034fe:	e010      	b.n	8003522 <UART_SetConfig+0xcf2>
 8003500:	2320      	movs	r3, #32
 8003502:	e00e      	b.n	8003522 <UART_SetConfig+0xcf2>
 8003504:	2310      	movs	r3, #16
 8003506:	e00c      	b.n	8003522 <UART_SetConfig+0xcf2>
 8003508:	230c      	movs	r3, #12
 800350a:	e00a      	b.n	8003522 <UART_SetConfig+0xcf2>
 800350c:	230a      	movs	r3, #10
 800350e:	e008      	b.n	8003522 <UART_SetConfig+0xcf2>
 8003510:	2308      	movs	r3, #8
 8003512:	e006      	b.n	8003522 <UART_SetConfig+0xcf2>
 8003514:	2306      	movs	r3, #6
 8003516:	e004      	b.n	8003522 <UART_SetConfig+0xcf2>
 8003518:	2304      	movs	r3, #4
 800351a:	e002      	b.n	8003522 <UART_SetConfig+0xcf2>
 800351c:	2302      	movs	r3, #2
 800351e:	e000      	b.n	8003522 <UART_SetConfig+0xcf2>
 8003520:	2301      	movs	r3, #1
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	005a      	lsls	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	441a      	add	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	fbb2 f3f3 	udiv	r3, r2, r3
 800353a:	b29b      	uxth	r3, r3
 800353c:	61fb      	str	r3, [r7, #28]
        break;
 800353e:	e113      	b.n	8003768 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d043      	beq.n	80035d0 <UART_SetConfig+0xda0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	2b01      	cmp	r3, #1
 800354e:	d03d      	beq.n	80035cc <UART_SetConfig+0xd9c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	2b02      	cmp	r3, #2
 8003556:	d037      	beq.n	80035c8 <UART_SetConfig+0xd98>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	2b03      	cmp	r3, #3
 800355e:	d031      	beq.n	80035c4 <UART_SetConfig+0xd94>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	2b04      	cmp	r3, #4
 8003566:	d02b      	beq.n	80035c0 <UART_SetConfig+0xd90>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	2b05      	cmp	r3, #5
 800356e:	d025      	beq.n	80035bc <UART_SetConfig+0xd8c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	2b06      	cmp	r3, #6
 8003576:	d01f      	beq.n	80035b8 <UART_SetConfig+0xd88>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	2b07      	cmp	r3, #7
 800357e:	d019      	beq.n	80035b4 <UART_SetConfig+0xd84>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	2b08      	cmp	r3, #8
 8003586:	d013      	beq.n	80035b0 <UART_SetConfig+0xd80>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	2b09      	cmp	r3, #9
 800358e:	d00d      	beq.n	80035ac <UART_SetConfig+0xd7c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	2b0a      	cmp	r3, #10
 8003596:	d007      	beq.n	80035a8 <UART_SetConfig+0xd78>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2b0b      	cmp	r3, #11
 800359e:	d101      	bne.n	80035a4 <UART_SetConfig+0xd74>
 80035a0:	4b8d      	ldr	r3, [pc, #564]	; (80037d8 <UART_SetConfig+0xfa8>)
 80035a2:	e016      	b.n	80035d2 <UART_SetConfig+0xda2>
 80035a4:	4b8d      	ldr	r3, [pc, #564]	; (80037dc <UART_SetConfig+0xfac>)
 80035a6:	e014      	b.n	80035d2 <UART_SetConfig+0xda2>
 80035a8:	4b8d      	ldr	r3, [pc, #564]	; (80037e0 <UART_SetConfig+0xfb0>)
 80035aa:	e012      	b.n	80035d2 <UART_SetConfig+0xda2>
 80035ac:	4b8d      	ldr	r3, [pc, #564]	; (80037e4 <UART_SetConfig+0xfb4>)
 80035ae:	e010      	b.n	80035d2 <UART_SetConfig+0xda2>
 80035b0:	4b8d      	ldr	r3, [pc, #564]	; (80037e8 <UART_SetConfig+0xfb8>)
 80035b2:	e00e      	b.n	80035d2 <UART_SetConfig+0xda2>
 80035b4:	4b8d      	ldr	r3, [pc, #564]	; (80037ec <UART_SetConfig+0xfbc>)
 80035b6:	e00c      	b.n	80035d2 <UART_SetConfig+0xda2>
 80035b8:	4b8d      	ldr	r3, [pc, #564]	; (80037f0 <UART_SetConfig+0xfc0>)
 80035ba:	e00a      	b.n	80035d2 <UART_SetConfig+0xda2>
 80035bc:	4b8d      	ldr	r3, [pc, #564]	; (80037f4 <UART_SetConfig+0xfc4>)
 80035be:	e008      	b.n	80035d2 <UART_SetConfig+0xda2>
 80035c0:	4b8d      	ldr	r3, [pc, #564]	; (80037f8 <UART_SetConfig+0xfc8>)
 80035c2:	e006      	b.n	80035d2 <UART_SetConfig+0xda2>
 80035c4:	4b8d      	ldr	r3, [pc, #564]	; (80037fc <UART_SetConfig+0xfcc>)
 80035c6:	e004      	b.n	80035d2 <UART_SetConfig+0xda2>
 80035c8:	4b8d      	ldr	r3, [pc, #564]	; (8003800 <UART_SetConfig+0xfd0>)
 80035ca:	e002      	b.n	80035d2 <UART_SetConfig+0xda2>
 80035cc:	4b8d      	ldr	r3, [pc, #564]	; (8003804 <UART_SetConfig+0xfd4>)
 80035ce:	e000      	b.n	80035d2 <UART_SetConfig+0xda2>
 80035d0:	4b82      	ldr	r3, [pc, #520]	; (80037dc <UART_SetConfig+0xfac>)
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6852      	ldr	r2, [r2, #4]
 80035d6:	0852      	lsrs	r2, r2, #1
 80035d8:	441a      	add	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	61fb      	str	r3, [r7, #28]
        break;
 80035e6:	e0bf      	b.n	8003768 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e8:	f7fe fa44 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 80035ec:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d044      	beq.n	8003680 <UART_SetConfig+0xe50>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d03e      	beq.n	800367c <UART_SetConfig+0xe4c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	2b02      	cmp	r3, #2
 8003604:	d038      	beq.n	8003678 <UART_SetConfig+0xe48>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	2b03      	cmp	r3, #3
 800360c:	d032      	beq.n	8003674 <UART_SetConfig+0xe44>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2b04      	cmp	r3, #4
 8003614:	d02c      	beq.n	8003670 <UART_SetConfig+0xe40>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	2b05      	cmp	r3, #5
 800361c:	d026      	beq.n	800366c <UART_SetConfig+0xe3c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b06      	cmp	r3, #6
 8003624:	d020      	beq.n	8003668 <UART_SetConfig+0xe38>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b07      	cmp	r3, #7
 800362c:	d01a      	beq.n	8003664 <UART_SetConfig+0xe34>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2b08      	cmp	r3, #8
 8003634:	d014      	beq.n	8003660 <UART_SetConfig+0xe30>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2b09      	cmp	r3, #9
 800363c:	d00e      	beq.n	800365c <UART_SetConfig+0xe2c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	2b0a      	cmp	r3, #10
 8003644:	d008      	beq.n	8003658 <UART_SetConfig+0xe28>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2b0b      	cmp	r3, #11
 800364c:	d102      	bne.n	8003654 <UART_SetConfig+0xe24>
 800364e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003652:	e016      	b.n	8003682 <UART_SetConfig+0xe52>
 8003654:	2301      	movs	r3, #1
 8003656:	e014      	b.n	8003682 <UART_SetConfig+0xe52>
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	e012      	b.n	8003682 <UART_SetConfig+0xe52>
 800365c:	2340      	movs	r3, #64	; 0x40
 800365e:	e010      	b.n	8003682 <UART_SetConfig+0xe52>
 8003660:	2320      	movs	r3, #32
 8003662:	e00e      	b.n	8003682 <UART_SetConfig+0xe52>
 8003664:	2310      	movs	r3, #16
 8003666:	e00c      	b.n	8003682 <UART_SetConfig+0xe52>
 8003668:	230c      	movs	r3, #12
 800366a:	e00a      	b.n	8003682 <UART_SetConfig+0xe52>
 800366c:	230a      	movs	r3, #10
 800366e:	e008      	b.n	8003682 <UART_SetConfig+0xe52>
 8003670:	2308      	movs	r3, #8
 8003672:	e006      	b.n	8003682 <UART_SetConfig+0xe52>
 8003674:	2306      	movs	r3, #6
 8003676:	e004      	b.n	8003682 <UART_SetConfig+0xe52>
 8003678:	2304      	movs	r3, #4
 800367a:	e002      	b.n	8003682 <UART_SetConfig+0xe52>
 800367c:	2302      	movs	r3, #2
 800367e:	e000      	b.n	8003682 <UART_SetConfig+0xe52>
 8003680:	2301      	movs	r3, #1
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	005a      	lsls	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	441a      	add	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	b29b      	uxth	r3, r3
 800369c:	61fb      	str	r3, [r7, #28]
        break;
 800369e:	e063      	b.n	8003768 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d04f      	beq.n	8003748 <UART_SetConfig+0xf18>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d048      	beq.n	8003742 <UART_SetConfig+0xf12>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d041      	beq.n	800373c <UART_SetConfig+0xf0c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d03a      	beq.n	8003736 <UART_SetConfig+0xf06>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d033      	beq.n	8003730 <UART_SetConfig+0xf00>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	d02c      	beq.n	800372a <UART_SetConfig+0xefa>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	2b06      	cmp	r3, #6
 80036d6:	d025      	beq.n	8003724 <UART_SetConfig+0xef4>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	2b07      	cmp	r3, #7
 80036de:	d01e      	beq.n	800371e <UART_SetConfig+0xeee>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d017      	beq.n	8003718 <UART_SetConfig+0xee8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	2b09      	cmp	r3, #9
 80036ee:	d010      	beq.n	8003712 <UART_SetConfig+0xee2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	2b0a      	cmp	r3, #10
 80036f6:	d009      	beq.n	800370c <UART_SetConfig+0xedc>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	2b0b      	cmp	r3, #11
 80036fe:	d102      	bne.n	8003706 <UART_SetConfig+0xed6>
 8003700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003704:	e022      	b.n	800374c <UART_SetConfig+0xf1c>
 8003706:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800370a:	e01f      	b.n	800374c <UART_SetConfig+0xf1c>
 800370c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003710:	e01c      	b.n	800374c <UART_SetConfig+0xf1c>
 8003712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003716:	e019      	b.n	800374c <UART_SetConfig+0xf1c>
 8003718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800371c:	e016      	b.n	800374c <UART_SetConfig+0xf1c>
 800371e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003722:	e013      	b.n	800374c <UART_SetConfig+0xf1c>
 8003724:	f241 5354 	movw	r3, #5460	; 0x1554
 8003728:	e010      	b.n	800374c <UART_SetConfig+0xf1c>
 800372a:	f641 1398 	movw	r3, #6552	; 0x1998
 800372e:	e00d      	b.n	800374c <UART_SetConfig+0xf1c>
 8003730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003734:	e00a      	b.n	800374c <UART_SetConfig+0xf1c>
 8003736:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800373a:	e007      	b.n	800374c <UART_SetConfig+0xf1c>
 800373c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003740:	e004      	b.n	800374c <UART_SetConfig+0xf1c>
 8003742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003746:	e001      	b.n	800374c <UART_SetConfig+0xf1c>
 8003748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6852      	ldr	r2, [r2, #4]
 8003750:	0852      	lsrs	r2, r2, #1
 8003752:	441a      	add	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	b29b      	uxth	r3, r3
 800375e:	61fb      	str	r3, [r7, #28]
        break;
 8003760:	e002      	b.n	8003768 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	76fb      	strb	r3, [r7, #27]
        break;
 8003766:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	2b0f      	cmp	r3, #15
 800376c:	d916      	bls.n	800379c <UART_SetConfig+0xf6c>
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003774:	d212      	bcs.n	800379c <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	b29b      	uxth	r3, r3
 800377a:	f023 030f 	bic.w	r3, r3, #15
 800377e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	b29b      	uxth	r3, r3
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	b29a      	uxth	r2, r3
 800378c:	89fb      	ldrh	r3, [r7, #14]
 800378e:	4313      	orrs	r3, r2
 8003790:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	89fa      	ldrh	r2, [r7, #14]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	e20c      	b.n	8003bb6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	76fb      	strb	r3, [r7, #27]
 80037a0:	e209      	b.n	8003bb6 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 80037a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	f200 81f4 	bhi.w	8003b94 <UART_SetConfig+0x1364>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <UART_SetConfig+0xf84>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	08003809 	.word	0x08003809
 80037b8:	080038bf 	.word	0x080038bf
 80037bc:	08003975 	.word	0x08003975
 80037c0:	08003b95 	.word	0x08003b95
 80037c4:	08003a1f 	.word	0x08003a1f
 80037c8:	08003b95 	.word	0x08003b95
 80037cc:	08003b95 	.word	0x08003b95
 80037d0:	08003b95 	.word	0x08003b95
 80037d4:	08003ad5 	.word	0x08003ad5
 80037d8:	0001e848 	.word	0x0001e848
 80037dc:	01e84800 	.word	0x01e84800
 80037e0:	0003d090 	.word	0x0003d090
 80037e4:	0007a120 	.word	0x0007a120
 80037e8:	000f4240 	.word	0x000f4240
 80037ec:	001e8480 	.word	0x001e8480
 80037f0:	0028b0aa 	.word	0x0028b0aa
 80037f4:	0030d400 	.word	0x0030d400
 80037f8:	003d0900 	.word	0x003d0900
 80037fc:	00516154 	.word	0x00516154
 8003800:	007a1200 	.word	0x007a1200
 8003804:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003808:	f7fe f9a2 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 800380c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	2b00      	cmp	r3, #0
 8003814:	d044      	beq.n	80038a0 <UART_SetConfig+0x1070>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b01      	cmp	r3, #1
 800381c:	d03e      	beq.n	800389c <UART_SetConfig+0x106c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2b02      	cmp	r3, #2
 8003824:	d038      	beq.n	8003898 <UART_SetConfig+0x1068>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	2b03      	cmp	r3, #3
 800382c:	d032      	beq.n	8003894 <UART_SetConfig+0x1064>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	2b04      	cmp	r3, #4
 8003834:	d02c      	beq.n	8003890 <UART_SetConfig+0x1060>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	2b05      	cmp	r3, #5
 800383c:	d026      	beq.n	800388c <UART_SetConfig+0x105c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	2b06      	cmp	r3, #6
 8003844:	d020      	beq.n	8003888 <UART_SetConfig+0x1058>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2b07      	cmp	r3, #7
 800384c:	d01a      	beq.n	8003884 <UART_SetConfig+0x1054>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	2b08      	cmp	r3, #8
 8003854:	d014      	beq.n	8003880 <UART_SetConfig+0x1050>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	2b09      	cmp	r3, #9
 800385c:	d00e      	beq.n	800387c <UART_SetConfig+0x104c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b0a      	cmp	r3, #10
 8003864:	d008      	beq.n	8003878 <UART_SetConfig+0x1048>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	2b0b      	cmp	r3, #11
 800386c:	d102      	bne.n	8003874 <UART_SetConfig+0x1044>
 800386e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003872:	e016      	b.n	80038a2 <UART_SetConfig+0x1072>
 8003874:	2301      	movs	r3, #1
 8003876:	e014      	b.n	80038a2 <UART_SetConfig+0x1072>
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	e012      	b.n	80038a2 <UART_SetConfig+0x1072>
 800387c:	2340      	movs	r3, #64	; 0x40
 800387e:	e010      	b.n	80038a2 <UART_SetConfig+0x1072>
 8003880:	2320      	movs	r3, #32
 8003882:	e00e      	b.n	80038a2 <UART_SetConfig+0x1072>
 8003884:	2310      	movs	r3, #16
 8003886:	e00c      	b.n	80038a2 <UART_SetConfig+0x1072>
 8003888:	230c      	movs	r3, #12
 800388a:	e00a      	b.n	80038a2 <UART_SetConfig+0x1072>
 800388c:	230a      	movs	r3, #10
 800388e:	e008      	b.n	80038a2 <UART_SetConfig+0x1072>
 8003890:	2308      	movs	r3, #8
 8003892:	e006      	b.n	80038a2 <UART_SetConfig+0x1072>
 8003894:	2306      	movs	r3, #6
 8003896:	e004      	b.n	80038a2 <UART_SetConfig+0x1072>
 8003898:	2304      	movs	r3, #4
 800389a:	e002      	b.n	80038a2 <UART_SetConfig+0x1072>
 800389c:	2302      	movs	r3, #2
 800389e:	e000      	b.n	80038a2 <UART_SetConfig+0x1072>
 80038a0:	2301      	movs	r3, #1
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	441a      	add	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	61fb      	str	r3, [r7, #28]
        break;
 80038bc:	e16d      	b.n	8003b9a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038be:	f7fe f95d 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 80038c2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d044      	beq.n	8003956 <UART_SetConfig+0x1126>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d03e      	beq.n	8003952 <UART_SetConfig+0x1122>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d038      	beq.n	800394e <UART_SetConfig+0x111e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d032      	beq.n	800394a <UART_SetConfig+0x111a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d02c      	beq.n	8003946 <UART_SetConfig+0x1116>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	2b05      	cmp	r3, #5
 80038f2:	d026      	beq.n	8003942 <UART_SetConfig+0x1112>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	2b06      	cmp	r3, #6
 80038fa:	d020      	beq.n	800393e <UART_SetConfig+0x110e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	2b07      	cmp	r3, #7
 8003902:	d01a      	beq.n	800393a <UART_SetConfig+0x110a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b08      	cmp	r3, #8
 800390a:	d014      	beq.n	8003936 <UART_SetConfig+0x1106>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2b09      	cmp	r3, #9
 8003912:	d00e      	beq.n	8003932 <UART_SetConfig+0x1102>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2b0a      	cmp	r3, #10
 800391a:	d008      	beq.n	800392e <UART_SetConfig+0x10fe>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b0b      	cmp	r3, #11
 8003922:	d102      	bne.n	800392a <UART_SetConfig+0x10fa>
 8003924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003928:	e016      	b.n	8003958 <UART_SetConfig+0x1128>
 800392a:	2301      	movs	r3, #1
 800392c:	e014      	b.n	8003958 <UART_SetConfig+0x1128>
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	e012      	b.n	8003958 <UART_SetConfig+0x1128>
 8003932:	2340      	movs	r3, #64	; 0x40
 8003934:	e010      	b.n	8003958 <UART_SetConfig+0x1128>
 8003936:	2320      	movs	r3, #32
 8003938:	e00e      	b.n	8003958 <UART_SetConfig+0x1128>
 800393a:	2310      	movs	r3, #16
 800393c:	e00c      	b.n	8003958 <UART_SetConfig+0x1128>
 800393e:	230c      	movs	r3, #12
 8003940:	e00a      	b.n	8003958 <UART_SetConfig+0x1128>
 8003942:	230a      	movs	r3, #10
 8003944:	e008      	b.n	8003958 <UART_SetConfig+0x1128>
 8003946:	2308      	movs	r3, #8
 8003948:	e006      	b.n	8003958 <UART_SetConfig+0x1128>
 800394a:	2306      	movs	r3, #6
 800394c:	e004      	b.n	8003958 <UART_SetConfig+0x1128>
 800394e:	2304      	movs	r3, #4
 8003950:	e002      	b.n	8003958 <UART_SetConfig+0x1128>
 8003952:	2302      	movs	r3, #2
 8003954:	e000      	b.n	8003958 <UART_SetConfig+0x1128>
 8003956:	2301      	movs	r3, #1
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	fbb2 f2f3 	udiv	r2, r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	441a      	add	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	fbb2 f3f3 	udiv	r3, r2, r3
 800396e:	b29b      	uxth	r3, r3
 8003970:	61fb      	str	r3, [r7, #28]
        break;
 8003972:	e112      	b.n	8003b9a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	2b00      	cmp	r3, #0
 800397a:	d044      	beq.n	8003a06 <UART_SetConfig+0x11d6>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	2b01      	cmp	r3, #1
 8003982:	d03e      	beq.n	8003a02 <UART_SetConfig+0x11d2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	2b02      	cmp	r3, #2
 800398a:	d038      	beq.n	80039fe <UART_SetConfig+0x11ce>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2b03      	cmp	r3, #3
 8003992:	d032      	beq.n	80039fa <UART_SetConfig+0x11ca>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	2b04      	cmp	r3, #4
 800399a:	d02c      	beq.n	80039f6 <UART_SetConfig+0x11c6>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2b05      	cmp	r3, #5
 80039a2:	d026      	beq.n	80039f2 <UART_SetConfig+0x11c2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	2b06      	cmp	r3, #6
 80039aa:	d020      	beq.n	80039ee <UART_SetConfig+0x11be>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	2b07      	cmp	r3, #7
 80039b2:	d01a      	beq.n	80039ea <UART_SetConfig+0x11ba>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d014      	beq.n	80039e6 <UART_SetConfig+0x11b6>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	2b09      	cmp	r3, #9
 80039c2:	d00e      	beq.n	80039e2 <UART_SetConfig+0x11b2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	2b0a      	cmp	r3, #10
 80039ca:	d008      	beq.n	80039de <UART_SetConfig+0x11ae>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	2b0b      	cmp	r3, #11
 80039d2:	d102      	bne.n	80039da <UART_SetConfig+0x11aa>
 80039d4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80039d8:	e016      	b.n	8003a08 <UART_SetConfig+0x11d8>
 80039da:	4b81      	ldr	r3, [pc, #516]	; (8003be0 <UART_SetConfig+0x13b0>)
 80039dc:	e014      	b.n	8003a08 <UART_SetConfig+0x11d8>
 80039de:	4b81      	ldr	r3, [pc, #516]	; (8003be4 <UART_SetConfig+0x13b4>)
 80039e0:	e012      	b.n	8003a08 <UART_SetConfig+0x11d8>
 80039e2:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <UART_SetConfig+0x13b8>)
 80039e4:	e010      	b.n	8003a08 <UART_SetConfig+0x11d8>
 80039e6:	4b81      	ldr	r3, [pc, #516]	; (8003bec <UART_SetConfig+0x13bc>)
 80039e8:	e00e      	b.n	8003a08 <UART_SetConfig+0x11d8>
 80039ea:	4b81      	ldr	r3, [pc, #516]	; (8003bf0 <UART_SetConfig+0x13c0>)
 80039ec:	e00c      	b.n	8003a08 <UART_SetConfig+0x11d8>
 80039ee:	4b81      	ldr	r3, [pc, #516]	; (8003bf4 <UART_SetConfig+0x13c4>)
 80039f0:	e00a      	b.n	8003a08 <UART_SetConfig+0x11d8>
 80039f2:	4b81      	ldr	r3, [pc, #516]	; (8003bf8 <UART_SetConfig+0x13c8>)
 80039f4:	e008      	b.n	8003a08 <UART_SetConfig+0x11d8>
 80039f6:	4b81      	ldr	r3, [pc, #516]	; (8003bfc <UART_SetConfig+0x13cc>)
 80039f8:	e006      	b.n	8003a08 <UART_SetConfig+0x11d8>
 80039fa:	4b81      	ldr	r3, [pc, #516]	; (8003c00 <UART_SetConfig+0x13d0>)
 80039fc:	e004      	b.n	8003a08 <UART_SetConfig+0x11d8>
 80039fe:	4b81      	ldr	r3, [pc, #516]	; (8003c04 <UART_SetConfig+0x13d4>)
 8003a00:	e002      	b.n	8003a08 <UART_SetConfig+0x11d8>
 8003a02:	4b81      	ldr	r3, [pc, #516]	; (8003c08 <UART_SetConfig+0x13d8>)
 8003a04:	e000      	b.n	8003a08 <UART_SetConfig+0x11d8>
 8003a06:	4b76      	ldr	r3, [pc, #472]	; (8003be0 <UART_SetConfig+0x13b0>)
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6852      	ldr	r2, [r2, #4]
 8003a0c:	0852      	lsrs	r2, r2, #1
 8003a0e:	441a      	add	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	61fb      	str	r3, [r7, #28]
        break;
 8003a1c:	e0bd      	b.n	8003b9a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1e:	f7fe f829 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8003a22:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d044      	beq.n	8003ab6 <UART_SetConfig+0x1286>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d03e      	beq.n	8003ab2 <UART_SetConfig+0x1282>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d038      	beq.n	8003aae <UART_SetConfig+0x127e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d032      	beq.n	8003aaa <UART_SetConfig+0x127a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d02c      	beq.n	8003aa6 <UART_SetConfig+0x1276>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	2b05      	cmp	r3, #5
 8003a52:	d026      	beq.n	8003aa2 <UART_SetConfig+0x1272>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	2b06      	cmp	r3, #6
 8003a5a:	d020      	beq.n	8003a9e <UART_SetConfig+0x126e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	2b07      	cmp	r3, #7
 8003a62:	d01a      	beq.n	8003a9a <UART_SetConfig+0x126a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d014      	beq.n	8003a96 <UART_SetConfig+0x1266>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	2b09      	cmp	r3, #9
 8003a72:	d00e      	beq.n	8003a92 <UART_SetConfig+0x1262>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	2b0a      	cmp	r3, #10
 8003a7a:	d008      	beq.n	8003a8e <UART_SetConfig+0x125e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	2b0b      	cmp	r3, #11
 8003a82:	d102      	bne.n	8003a8a <UART_SetConfig+0x125a>
 8003a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a88:	e016      	b.n	8003ab8 <UART_SetConfig+0x1288>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e014      	b.n	8003ab8 <UART_SetConfig+0x1288>
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	e012      	b.n	8003ab8 <UART_SetConfig+0x1288>
 8003a92:	2340      	movs	r3, #64	; 0x40
 8003a94:	e010      	b.n	8003ab8 <UART_SetConfig+0x1288>
 8003a96:	2320      	movs	r3, #32
 8003a98:	e00e      	b.n	8003ab8 <UART_SetConfig+0x1288>
 8003a9a:	2310      	movs	r3, #16
 8003a9c:	e00c      	b.n	8003ab8 <UART_SetConfig+0x1288>
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	e00a      	b.n	8003ab8 <UART_SetConfig+0x1288>
 8003aa2:	230a      	movs	r3, #10
 8003aa4:	e008      	b.n	8003ab8 <UART_SetConfig+0x1288>
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	e006      	b.n	8003ab8 <UART_SetConfig+0x1288>
 8003aaa:	2306      	movs	r3, #6
 8003aac:	e004      	b.n	8003ab8 <UART_SetConfig+0x1288>
 8003aae:	2304      	movs	r3, #4
 8003ab0:	e002      	b.n	8003ab8 <UART_SetConfig+0x1288>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e000      	b.n	8003ab8 <UART_SetConfig+0x1288>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	fbb2 f2f3 	udiv	r2, r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	085b      	lsrs	r3, r3, #1
 8003ac4:	441a      	add	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	61fb      	str	r3, [r7, #28]
        break;
 8003ad2:	e062      	b.n	8003b9a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d04e      	beq.n	8003b7a <UART_SetConfig+0x134a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d047      	beq.n	8003b74 <UART_SetConfig+0x1344>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d040      	beq.n	8003b6e <UART_SetConfig+0x133e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d039      	beq.n	8003b68 <UART_SetConfig+0x1338>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d032      	beq.n	8003b62 <UART_SetConfig+0x1332>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	2b05      	cmp	r3, #5
 8003b02:	d02b      	beq.n	8003b5c <UART_SetConfig+0x132c>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	2b06      	cmp	r3, #6
 8003b0a:	d024      	beq.n	8003b56 <UART_SetConfig+0x1326>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	2b07      	cmp	r3, #7
 8003b12:	d01d      	beq.n	8003b50 <UART_SetConfig+0x1320>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d016      	beq.n	8003b4a <UART_SetConfig+0x131a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	2b09      	cmp	r3, #9
 8003b22:	d00f      	beq.n	8003b44 <UART_SetConfig+0x1314>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	2b0a      	cmp	r3, #10
 8003b2a:	d008      	beq.n	8003b3e <UART_SetConfig+0x130e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	2b0b      	cmp	r3, #11
 8003b32:	d101      	bne.n	8003b38 <UART_SetConfig+0x1308>
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	e022      	b.n	8003b7e <UART_SetConfig+0x134e>
 8003b38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3c:	e01f      	b.n	8003b7e <UART_SetConfig+0x134e>
 8003b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b42:	e01c      	b.n	8003b7e <UART_SetConfig+0x134e>
 8003b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b48:	e019      	b.n	8003b7e <UART_SetConfig+0x134e>
 8003b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4e:	e016      	b.n	8003b7e <UART_SetConfig+0x134e>
 8003b50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b54:	e013      	b.n	8003b7e <UART_SetConfig+0x134e>
 8003b56:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8003b5a:	e010      	b.n	8003b7e <UART_SetConfig+0x134e>
 8003b5c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003b60:	e00d      	b.n	8003b7e <UART_SetConfig+0x134e>
 8003b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b66:	e00a      	b.n	8003b7e <UART_SetConfig+0x134e>
 8003b68:	f241 5355 	movw	r3, #5461	; 0x1555
 8003b6c:	e007      	b.n	8003b7e <UART_SetConfig+0x134e>
 8003b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b72:	e004      	b.n	8003b7e <UART_SetConfig+0x134e>
 8003b74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b78:	e001      	b.n	8003b7e <UART_SetConfig+0x134e>
 8003b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6852      	ldr	r2, [r2, #4]
 8003b82:	0852      	lsrs	r2, r2, #1
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	61fb      	str	r3, [r7, #28]
        break;
 8003b92:	e002      	b.n	8003b9a <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	76fb      	strb	r3, [r7, #27]
        break;
 8003b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	2b0f      	cmp	r3, #15
 8003b9e:	d908      	bls.n	8003bb2 <UART_SetConfig+0x1382>
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba6:	d204      	bcs.n	8003bb2 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	60da      	str	r2, [r3, #12]
 8003bb0:	e001      	b.n	8003bb6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003bd2:	7efb      	ldrb	r3, [r7, #27]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3728      	adds	r7, #40	; 0x28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003bde:	bf00      	nop
 8003be0:	00f42400 	.word	0x00f42400
 8003be4:	0001e848 	.word	0x0001e848
 8003be8:	0003d090 	.word	0x0003d090
 8003bec:	0007a120 	.word	0x0007a120
 8003bf0:	000f4240 	.word	0x000f4240
 8003bf4:	00145855 	.word	0x00145855
 8003bf8:	00186a00 	.word	0x00186a00
 8003bfc:	001e8480 	.word	0x001e8480
 8003c00:	0028b0aa 	.word	0x0028b0aa
 8003c04:	003d0900 	.word	0x003d0900
 8003c08:	007a1200 	.word	0x007a1200

08003c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01a      	beq.n	8003d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d0a:	d10a      	bne.n	8003d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	605a      	str	r2, [r3, #4]
  }
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d60:	f7fc fecc 	bl	8000afc <HAL_GetTick>
 8003d64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d10e      	bne.n	8003d92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f82c 	bl	8003de0 <UART_WaitOnFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e022      	b.n	8003dd8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d10e      	bne.n	8003dbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f816 	bl	8003de0 <UART_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e00c      	b.n	8003dd8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df0:	e02c      	b.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d028      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfa:	f7fc fe7f 	bl	8000afc <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d302      	bcc.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d11d      	bne.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e1e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e00f      	b.n	8003e6c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d0c3      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_UARTEx_DisableFifoMode+0x16>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e027      	b.n	8003eda <HAL_UARTEx_DisableFifoMode+0x66>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2224      	movs	r2, #36	; 0x24
 8003e96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0201 	bic.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003eb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e02d      	b.n	8003f5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2224      	movs	r2, #36	; 0x24
 8003f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f850 	bl	8003fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e02d      	b.n	8003fd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2224      	movs	r2, #36	; 0x24
 8003f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f812 	bl	8003fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b089      	sub	sp, #36	; 0x24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003fe8:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <UARTEx_SetNbDataToProcess+0xc8>)
 8003fea:	f107 0314 	add.w	r3, r7, #20
 8003fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ff2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003ff6:	4a2d      	ldr	r2, [pc, #180]	; (80040ac <UARTEx_SetNbDataToProcess+0xcc>)
 8003ff8:	f107 030c 	add.w	r3, r7, #12
 8003ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004000:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004008:	2b00      	cmp	r3, #0
 800400a:	d108      	bne.n	800401e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800401c:	e03d      	b.n	800409a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800401e:	2308      	movs	r3, #8
 8004020:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004022:	2308      	movs	r3, #8
 8004024:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	0e5b      	lsrs	r3, r3, #25
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	0f5b      	lsrs	r3, r3, #29
 800403e:	b2db      	uxtb	r3, r3
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004046:	7fbb      	ldrb	r3, [r7, #30]
 8004048:	7f3a      	ldrb	r2, [r7, #28]
 800404a:	f107 0120 	add.w	r1, r7, #32
 800404e:	440a      	add	r2, r1
 8004050:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004054:	fb02 f303 	mul.w	r3, r2, r3
 8004058:	7f3a      	ldrb	r2, [r7, #28]
 800405a:	f107 0120 	add.w	r1, r7, #32
 800405e:	440a      	add	r2, r1
 8004060:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004064:	fb93 f3f2 	sdiv	r3, r3, r2
 8004068:	b29a      	uxth	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004070:	7ffb      	ldrb	r3, [r7, #31]
 8004072:	7f7a      	ldrb	r2, [r7, #29]
 8004074:	f107 0120 	add.w	r1, r7, #32
 8004078:	440a      	add	r2, r1
 800407a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	7f7a      	ldrb	r2, [r7, #29]
 8004084:	f107 0120 	add.w	r1, r7, #32
 8004088:	440a      	add	r2, r1
 800408a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800408e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800409a:	bf00      	nop
 800409c:	3724      	adds	r7, #36	; 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	08006bd8 	.word	0x08006bd8
 80040ac:	08006be0 	.word	0x08006be0

080040b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040c6:	f3ef 8305 	mrs	r3, IPSR
 80040ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80040cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10f      	bne.n	80040f2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d2:	f3ef 8310 	mrs	r3, PRIMASK
 80040d6:	607b      	str	r3, [r7, #4]
  return(result);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d105      	bne.n	80040ea <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040de:	f3ef 8311 	mrs	r3, BASEPRI
 80040e2:	603b      	str	r3, [r7, #0]
  return(result);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <osKernelInitialize+0x3a>
 80040ea:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <osKernelInitialize+0x64>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d103      	bne.n	80040fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80040f2:	f06f 0305 	mvn.w	r3, #5
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	e00c      	b.n	8004114 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <osKernelInitialize+0x64>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004102:	4b08      	ldr	r3, [pc, #32]	; (8004124 <osKernelInitialize+0x64>)
 8004104:	2201      	movs	r2, #1
 8004106:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e002      	b.n	8004114 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800410e:	f04f 33ff 	mov.w	r3, #4294967295
 8004112:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004114:	68fb      	ldr	r3, [r7, #12]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000030 	.word	0x20000030

08004128 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800412e:	f3ef 8305 	mrs	r3, IPSR
 8004132:	60bb      	str	r3, [r7, #8]
  return(result);
 8004134:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10f      	bne.n	800415a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800413a:	f3ef 8310 	mrs	r3, PRIMASK
 800413e:	607b      	str	r3, [r7, #4]
  return(result);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d105      	bne.n	8004152 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004146:	f3ef 8311 	mrs	r3, BASEPRI
 800414a:	603b      	str	r3, [r7, #0]
  return(result);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <osKernelStart+0x3a>
 8004152:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <osKernelStart+0x68>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d103      	bne.n	8004162 <osKernelStart+0x3a>
    stat = osErrorISR;
 800415a:	f06f 0305 	mvn.w	r3, #5
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	e010      	b.n	8004184 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <osKernelStart+0x68>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d109      	bne.n	800417e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800416a:	f7ff ffa1 	bl	80040b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800416e:	4b08      	ldr	r3, [pc, #32]	; (8004190 <osKernelStart+0x68>)
 8004170:	2202      	movs	r2, #2
 8004172:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004174:	f001 f870 	bl	8005258 <vTaskStartScheduler>
      stat = osOK;
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	e002      	b.n	8004184 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800417e:	f04f 33ff 	mov.w	r3, #4294967295
 8004182:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004184:	68fb      	ldr	r3, [r7, #12]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000030 	.word	0x20000030

08004194 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b090      	sub	sp, #64	; 0x40
 8004198:	af04      	add	r7, sp, #16
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041a4:	f3ef 8305 	mrs	r3, IPSR
 80041a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80041aa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f040 808f 	bne.w	80042d0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b2:	f3ef 8310 	mrs	r3, PRIMASK
 80041b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d105      	bne.n	80041ca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041be:	f3ef 8311 	mrs	r3, BASEPRI
 80041c2:	617b      	str	r3, [r7, #20]
  return(result);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <osThreadNew+0x3e>
 80041ca:	4b44      	ldr	r3, [pc, #272]	; (80042dc <osThreadNew+0x148>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d07e      	beq.n	80042d0 <osThreadNew+0x13c>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d07b      	beq.n	80042d0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80041d8:	2380      	movs	r3, #128	; 0x80
 80041da:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80041dc:	2318      	movs	r3, #24
 80041de:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80041e4:	f04f 33ff 	mov.w	r3, #4294967295
 80041e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d045      	beq.n	800427c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <osThreadNew+0x6a>
        name = attr->name;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <osThreadNew+0x90>
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	2b38      	cmp	r3, #56	; 0x38
 8004216:	d805      	bhi.n	8004224 <osThreadNew+0x90>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <osThreadNew+0x94>
        return (NULL);
 8004224:	2300      	movs	r3, #0
 8004226:	e054      	b.n	80042d2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00e      	beq.n	800425e <osThreadNew+0xca>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b5b      	cmp	r3, #91	; 0x5b
 8004246:	d90a      	bls.n	800425e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800424c:	2b00      	cmp	r3, #0
 800424e:	d006      	beq.n	800425e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <osThreadNew+0xca>
        mem = 1;
 8004258:	2301      	movs	r3, #1
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	e010      	b.n	8004280 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10c      	bne.n	8004280 <osThreadNew+0xec>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d108      	bne.n	8004280 <osThreadNew+0xec>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d104      	bne.n	8004280 <osThreadNew+0xec>
          mem = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	623b      	str	r3, [r7, #32]
 800427a:	e001      	b.n	8004280 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d110      	bne.n	80042a8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800428e:	9202      	str	r2, [sp, #8]
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800429a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 fe09 	bl	8004eb4 <xTaskCreateStatic>
 80042a2:	4603      	mov	r3, r0
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	e013      	b.n	80042d0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d110      	bne.n	80042d0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	f107 0310 	add.w	r3, r7, #16
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fe51 	bl	8004f68 <xTaskCreate>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d001      	beq.n	80042d0 <osThreadNew+0x13c>
          hTask = NULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042d0:	693b      	ldr	r3, [r7, #16]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3730      	adds	r7, #48	; 0x30
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000030 	.word	0x20000030

080042e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042e8:	f3ef 8305 	mrs	r3, IPSR
 80042ec:	613b      	str	r3, [r7, #16]
  return(result);
 80042ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10f      	bne.n	8004314 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f4:	f3ef 8310 	mrs	r3, PRIMASK
 80042f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d105      	bne.n	800430c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004300:	f3ef 8311 	mrs	r3, BASEPRI
 8004304:	60bb      	str	r3, [r7, #8]
  return(result);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d007      	beq.n	800431c <osDelay+0x3c>
 800430c:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <osDelay+0x58>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d103      	bne.n	800431c <osDelay+0x3c>
    stat = osErrorISR;
 8004314:	f06f 0305 	mvn.w	r3, #5
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e007      	b.n	800432c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 ff62 	bl	80051f0 <vTaskDelay>
    }
  }

  return (stat);
 800432c:	697b      	ldr	r3, [r7, #20]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000030 	.word	0x20000030

0800433c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4a07      	ldr	r2, [pc, #28]	; (8004368 <vApplicationGetIdleTaskMemory+0x2c>)
 800434c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	4a06      	ldr	r2, [pc, #24]	; (800436c <vApplicationGetIdleTaskMemory+0x30>)
 8004352:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2280      	movs	r2, #128	; 0x80
 8004358:	601a      	str	r2, [r3, #0]
}
 800435a:	bf00      	nop
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000034 	.word	0x20000034
 800436c:	20000090 	.word	0x20000090

08004370 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a07      	ldr	r2, [pc, #28]	; (800439c <vApplicationGetTimerTaskMemory+0x2c>)
 8004380:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4a06      	ldr	r2, [pc, #24]	; (80043a0 <vApplicationGetTimerTaskMemory+0x30>)
 8004386:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800438e:	601a      	str	r2, [r3, #0]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	20000290 	.word	0x20000290
 80043a0:	200002ec 	.word	0x200002ec

080043a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f103 0208 	add.w	r2, r3, #8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f04f 32ff 	mov.w	r2, #4294967295
 80043bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f103 0208 	add.w	r2, r3, #8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f103 0208 	add.w	r2, r3, #8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	601a      	str	r2, [r3, #0]
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d103      	bne.n	8004466 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e00c      	b.n	8004480 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3308      	adds	r3, #8
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e002      	b.n	8004474 <vListInsert+0x2e>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	429a      	cmp	r2, r3
 800447e:	d2f6      	bcs.n	800446e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	601a      	str	r2, [r3, #0]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6892      	ldr	r2, [r2, #8]
 80044ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6852      	ldr	r2, [r2, #4]
 80044d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d103      	bne.n	80044ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	1e5a      	subs	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	e7fe      	b.n	8004532 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004534:	f002 f812 	bl	800655c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	68f9      	ldr	r1, [r7, #12]
 8004542:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	441a      	add	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004564:	3b01      	subs	r3, #1
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	441a      	add	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	22ff      	movs	r2, #255	; 0xff
 8004578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	22ff      	movs	r2, #255	; 0xff
 8004580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d114      	bne.n	80045b4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d01a      	beq.n	80045c8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3310      	adds	r3, #16
 8004596:	4618      	mov	r0, r3
 8004598:	f001 f8de 	bl	8005758 <xTaskRemoveFromEventList>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d012      	beq.n	80045c8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045a2:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <xQueueGenericReset+0xcc>)
 80045a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	e009      	b.n	80045c8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3310      	adds	r3, #16
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fef3 	bl	80043a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3324      	adds	r3, #36	; 0x24
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff feee 	bl	80043a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045c8:	f001 fff6 	bl	80065b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045cc:	2301      	movs	r3, #1
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08e      	sub	sp, #56	; 0x38
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <xQueueGenericCreateStatic+0x28>
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
 8004602:	e7fe      	b.n	8004602 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <xQueueGenericCreateStatic+0x42>
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
 800461c:	e7fe      	b.n	800461c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <xQueueGenericCreateStatic+0x4e>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <xQueueGenericCreateStatic+0x52>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <xQueueGenericCreateStatic+0x54>
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d109      	bne.n	8004648 <xQueueGenericCreateStatic+0x6c>
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	623b      	str	r3, [r7, #32]
 8004646:	e7fe      	b.n	8004646 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <xQueueGenericCreateStatic+0x78>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <xQueueGenericCreateStatic+0x7c>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <xQueueGenericCreateStatic+0x7e>
 8004658:	2300      	movs	r3, #0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <xQueueGenericCreateStatic+0x96>
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	e7fe      	b.n	8004670 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004672:	2350      	movs	r3, #80	; 0x50
 8004674:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b50      	cmp	r3, #80	; 0x50
 800467a:	d009      	beq.n	8004690 <xQueueGenericCreateStatic+0xb4>
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	e7fe      	b.n	800468e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004690:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00d      	beq.n	80046b8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800469c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f805 	bl	80046c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3730      	adds	r7, #48	; 0x30
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d103      	bne.n	80046de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	e002      	b.n	80046e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046f0:	2101      	movs	r1, #1
 80046f2:	69b8      	ldr	r0, [r7, #24]
 80046f4:	f7ff ff0a 	bl	800450c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	78fa      	ldrb	r2, [r7, #3]
 80046fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08e      	sub	sp, #56	; 0x38
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004716:	2300      	movs	r3, #0
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <xQueueGenericSend+0x30>
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
 8004736:	e7fe      	b.n	8004736 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d103      	bne.n	8004746 <xQueueGenericSend+0x3e>
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <xQueueGenericSend+0x42>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <xQueueGenericSend+0x44>
 800474a:	2300      	movs	r3, #0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <xQueueGenericSend+0x5c>
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
 8004762:	e7fe      	b.n	8004762 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d103      	bne.n	8004772 <xQueueGenericSend+0x6a>
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <xQueueGenericSend+0x6e>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <xQueueGenericSend+0x70>
 8004776:	2300      	movs	r3, #0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d109      	bne.n	8004790 <xQueueGenericSend+0x88>
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	623b      	str	r3, [r7, #32]
 800478e:	e7fe      	b.n	800478e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004790:	f001 f998 	bl	8005ac4 <xTaskGetSchedulerState>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <xQueueGenericSend+0x98>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <xQueueGenericSend+0x9c>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <xQueueGenericSend+0x9e>
 80047a4:	2300      	movs	r3, #0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d109      	bne.n	80047be <xQueueGenericSend+0xb6>
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	e7fe      	b.n	80047bc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047be:	f001 fecd 	bl	800655c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d302      	bcc.n	80047d4 <xQueueGenericSend+0xcc>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d129      	bne.n	8004828 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047da:	f000 f9ff 	bl	8004bdc <prvCopyDataToQueue>
 80047de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d010      	beq.n	800480a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	3324      	adds	r3, #36	; 0x24
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 ffb3 	bl	8005758 <xTaskRemoveFromEventList>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d013      	beq.n	8004820 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047f8:	4b3f      	ldr	r3, [pc, #252]	; (80048f8 <xQueueGenericSend+0x1f0>)
 80047fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	e00a      	b.n	8004820 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004810:	4b39      	ldr	r3, [pc, #228]	; (80048f8 <xQueueGenericSend+0x1f0>)
 8004812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004820:	f001 feca 	bl	80065b8 <vPortExitCritical>
				return pdPASS;
 8004824:	2301      	movs	r3, #1
 8004826:	e063      	b.n	80048f0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800482e:	f001 fec3 	bl	80065b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004832:	2300      	movs	r3, #0
 8004834:	e05c      	b.n	80048f0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800483c:	f107 0314 	add.w	r3, r7, #20
 8004840:	4618      	mov	r0, r3
 8004842:	f000 ffeb 	bl	800581c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004846:	2301      	movs	r3, #1
 8004848:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800484a:	f001 feb5 	bl	80065b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800484e:	f000 fd67 	bl	8005320 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004852:	f001 fe83 	bl	800655c <vPortEnterCritical>
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800485c:	b25b      	sxtb	r3, r3
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004862:	d103      	bne.n	800486c <xQueueGenericSend+0x164>
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004872:	b25b      	sxtb	r3, r3
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d103      	bne.n	8004882 <xQueueGenericSend+0x17a>
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004882:	f001 fe99 	bl	80065b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004886:	1d3a      	adds	r2, r7, #4
 8004888:	f107 0314 	add.w	r3, r7, #20
 800488c:	4611      	mov	r1, r2
 800488e:	4618      	mov	r0, r3
 8004890:	f000 ffda 	bl	8005848 <xTaskCheckForTimeOut>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d124      	bne.n	80048e4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800489a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800489c:	f000 fa96 	bl	8004dcc <prvIsQueueFull>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d018      	beq.n	80048d8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	3310      	adds	r3, #16
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 ff04 	bl	80056bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048b6:	f000 fa21 	bl	8004cfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048ba:	f000 fd3f 	bl	800533c <xTaskResumeAll>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f47f af7c 	bne.w	80047be <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <xQueueGenericSend+0x1f0>)
 80048c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	e772      	b.n	80047be <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048da:	f000 fa0f 	bl	8004cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048de:	f000 fd2d 	bl	800533c <xTaskResumeAll>
 80048e2:	e76c      	b.n	80047be <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048e6:	f000 fa09 	bl	8004cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048ea:	f000 fd27 	bl	800533c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3738      	adds	r7, #56	; 0x38
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08e      	sub	sp, #56	; 0x38
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <xQueueGenericSendFromISR+0x2c>
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
 8004926:	e7fe      	b.n	8004926 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <xQueueGenericSendFromISR+0x3a>
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <xQueueGenericSendFromISR+0x3e>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <xQueueGenericSendFromISR+0x40>
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d109      	bne.n	8004954 <xQueueGenericSendFromISR+0x58>
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	623b      	str	r3, [r7, #32]
 8004952:	e7fe      	b.n	8004952 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d103      	bne.n	8004962 <xQueueGenericSendFromISR+0x66>
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <xQueueGenericSendFromISR+0x6a>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <xQueueGenericSendFromISR+0x6c>
 8004966:	2300      	movs	r3, #0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d109      	bne.n	8004980 <xQueueGenericSendFromISR+0x84>
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	e7fe      	b.n	800497e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004980:	f001 fec8 	bl	8006714 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004984:	f3ef 8211 	mrs	r2, BASEPRI
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	61ba      	str	r2, [r7, #24]
 800499a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800499c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d302      	bcc.n	80049b2 <xQueueGenericSendFromISR+0xb6>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d12c      	bne.n	8004a0c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049c2:	f000 f90b 	bl	8004bdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ce:	d112      	bne.n	80049f6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d016      	beq.n	8004a06 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	3324      	adds	r3, #36	; 0x24
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 febb 	bl	8005758 <xTaskRemoveFromEventList>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00e      	beq.n	8004a06 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e007      	b.n	8004a06 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049fa:	3301      	adds	r3, #1
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	b25a      	sxtb	r2, r3
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a06:	2301      	movs	r3, #1
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004a0a:	e001      	b.n	8004a10 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3738      	adds	r7, #56	; 0x38
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08c      	sub	sp, #48	; 0x30
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <xQueueReceive+0x2e>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	e7fe      	b.n	8004a50 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d103      	bne.n	8004a60 <xQueueReceive+0x3c>
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <xQueueReceive+0x40>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <xQueueReceive+0x42>
 8004a64:	2300      	movs	r3, #0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <xQueueReceive+0x5a>
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	e7fe      	b.n	8004a7c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a7e:	f001 f821 	bl	8005ac4 <xTaskGetSchedulerState>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <xQueueReceive+0x6a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <xQueueReceive+0x6e>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <xQueueReceive+0x70>
 8004a92:	2300      	movs	r3, #0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <xQueueReceive+0x88>
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	e7fe      	b.n	8004aaa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aac:	f001 fd56 	bl	800655c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01f      	beq.n	8004afc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ac0:	f000 f8f6 	bl	8004cb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	1e5a      	subs	r2, r3, #1
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00f      	beq.n	8004af4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	3310      	adds	r3, #16
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fe3d 	bl	8005758 <xTaskRemoveFromEventList>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ae4:	4b3c      	ldr	r3, [pc, #240]	; (8004bd8 <xQueueReceive+0x1b4>)
 8004ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004af4:	f001 fd60 	bl	80065b8 <vPortExitCritical>
				return pdPASS;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e069      	b.n	8004bd0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d103      	bne.n	8004b0a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b02:	f001 fd59 	bl	80065b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e062      	b.n	8004bd0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b10:	f107 0310 	add.w	r3, r7, #16
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fe81 	bl	800581c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b1e:	f001 fd4b 	bl	80065b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b22:	f000 fbfd 	bl	8005320 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b26:	f001 fd19 	bl	800655c <vPortEnterCritical>
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b30:	b25b      	sxtb	r3, r3
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d103      	bne.n	8004b40 <xQueueReceive+0x11c>
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b46:	b25b      	sxtb	r3, r3
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d103      	bne.n	8004b56 <xQueueReceive+0x132>
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b56:	f001 fd2f 	bl	80065b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b5a:	1d3a      	adds	r2, r7, #4
 8004b5c:	f107 0310 	add.w	r3, r7, #16
 8004b60:	4611      	mov	r1, r2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fe70 	bl	8005848 <xTaskCheckForTimeOut>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d123      	bne.n	8004bb6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b70:	f000 f916 	bl	8004da0 <prvIsQueueEmpty>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d017      	beq.n	8004baa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	3324      	adds	r3, #36	; 0x24
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4611      	mov	r1, r2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fd9a 	bl	80056bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b8a:	f000 f8b7 	bl	8004cfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b8e:	f000 fbd5 	bl	800533c <xTaskResumeAll>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d189      	bne.n	8004aac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004b98:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <xQueueReceive+0x1b4>)
 8004b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	e780      	b.n	8004aac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bac:	f000 f8a6 	bl	8004cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bb0:	f000 fbc4 	bl	800533c <xTaskResumeAll>
 8004bb4:	e77a      	b.n	8004aac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bb8:	f000 f8a0 	bl	8004cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bbc:	f000 fbbe 	bl	800533c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc2:	f000 f8ed 	bl	8004da0 <prvIsQueueEmpty>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f43f af6f 	beq.w	8004aac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3730      	adds	r7, #48	; 0x30
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	e000ed04 	.word	0xe000ed04

08004bdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10d      	bne.n	8004c16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d14d      	bne.n	8004c9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 ff7a 	bl	8005b00 <xTaskPriorityDisinherit>
 8004c0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	e043      	b.n	8004c9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d119      	bne.n	8004c50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6858      	ldr	r0, [r3, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	461a      	mov	r2, r3
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	f001 ffac 	bl	8006b84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	441a      	add	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d32b      	bcc.n	8004c9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	e026      	b.n	8004c9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	68d8      	ldr	r0, [r3, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	461a      	mov	r2, r3
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	f001 ff92 	bl	8006b84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	425b      	negs	r3, r3
 8004c6a:	441a      	add	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d207      	bcs.n	8004c8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	425b      	negs	r3, r3
 8004c86:	441a      	add	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d105      	bne.n	8004c9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ca6:	697b      	ldr	r3, [r7, #20]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d018      	beq.n	8004cf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	441a      	add	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d303      	bcc.n	8004ce4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68d9      	ldr	r1, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	461a      	mov	r2, r3
 8004cee:	6838      	ldr	r0, [r7, #0]
 8004cf0:	f001 ff48 	bl	8006b84 <memcpy>
	}
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d04:	f001 fc2a 	bl	800655c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d10:	e011      	b.n	8004d36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d012      	beq.n	8004d40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3324      	adds	r3, #36	; 0x24
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fd1a 	bl	8005758 <xTaskRemoveFromEventList>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d2a:	f000 fded 	bl	8005908 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	dce9      	bgt.n	8004d12 <prvUnlockQueue+0x16>
 8004d3e:	e000      	b.n	8004d42 <prvUnlockQueue+0x46>
					break;
 8004d40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	22ff      	movs	r2, #255	; 0xff
 8004d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d4a:	f001 fc35 	bl	80065b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d4e:	f001 fc05 	bl	800655c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d5a:	e011      	b.n	8004d80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d012      	beq.n	8004d8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3310      	adds	r3, #16
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fcf5 	bl	8005758 <xTaskRemoveFromEventList>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d74:	f000 fdc8 	bl	8005908 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d78:	7bbb      	ldrb	r3, [r7, #14]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	dce9      	bgt.n	8004d5c <prvUnlockQueue+0x60>
 8004d88:	e000      	b.n	8004d8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	22ff      	movs	r2, #255	; 0xff
 8004d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d94:	f001 fc10 	bl	80065b8 <vPortExitCritical>
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004da8:	f001 fbd8 	bl	800655c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004db4:	2301      	movs	r3, #1
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	e001      	b.n	8004dbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dbe:	f001 fbfb 	bl	80065b8 <vPortExitCritical>

	return xReturn;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dd4:	f001 fbc2 	bl	800655c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d102      	bne.n	8004dea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004de4:	2301      	movs	r3, #1
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e001      	b.n	8004dee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dee:	f001 fbe3 	bl	80065b8 <vPortExitCritical>

	return xReturn;
 8004df2:	68fb      	ldr	r3, [r7, #12]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	e014      	b.n	8004e36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e0c:	4a0e      	ldr	r2, [pc, #56]	; (8004e48 <vQueueAddToRegistry+0x4c>)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e18:	490b      	ldr	r1, [pc, #44]	; (8004e48 <vQueueAddToRegistry+0x4c>)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e22:	4a09      	ldr	r2, [pc, #36]	; (8004e48 <vQueueAddToRegistry+0x4c>)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4413      	add	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e2e:	e005      	b.n	8004e3c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3301      	adds	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b07      	cmp	r3, #7
 8004e3a:	d9e7      	bls.n	8004e0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	20001a1c 	.word	0x20001a1c

08004e4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e5c:	f001 fb7e 	bl	800655c <vPortEnterCritical>
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e66:	b25b      	sxtb	r3, r3
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d103      	bne.n	8004e76 <vQueueWaitForMessageRestricted+0x2a>
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e7c:	b25b      	sxtb	r3, r3
 8004e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e82:	d103      	bne.n	8004e8c <vQueueWaitForMessageRestricted+0x40>
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e8c:	f001 fb94 	bl	80065b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	3324      	adds	r3, #36	; 0x24
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fc2f 	bl	8005704 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ea6:	6978      	ldr	r0, [r7, #20]
 8004ea8:	f7ff ff28 	bl	8004cfc <prvUnlockQueue>
	}
 8004eac:	bf00      	nop
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08e      	sub	sp, #56	; 0x38
 8004eb8:	af04      	add	r7, sp, #16
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <xTaskCreateStatic+0x28>
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	623b      	str	r3, [r7, #32]
 8004eda:	e7fe      	b.n	8004eda <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <xTaskCreateStatic+0x42>
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	e7fe      	b.n	8004ef4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ef6:	235c      	movs	r3, #92	; 0x5c
 8004ef8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b5c      	cmp	r3, #92	; 0x5c
 8004efe:	d009      	beq.n	8004f14 <xTaskCreateStatic+0x60>
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	e7fe      	b.n	8004f12 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01e      	beq.n	8004f5a <xTaskCreateStatic+0xa6>
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d01b      	beq.n	8004f5a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f34:	2300      	movs	r3, #0
 8004f36:	9303      	str	r3, [sp, #12]
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	9302      	str	r3, [sp, #8]
 8004f3c:	f107 0314 	add.w	r3, r7, #20
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f850 	bl	8004ff2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f54:	f000 f8dc 	bl	8005110 <prvAddNewTaskToReadyList>
 8004f58:	e001      	b.n	8004f5e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f5e:	697b      	ldr	r3, [r7, #20]
	}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3728      	adds	r7, #40	; 0x28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08c      	sub	sp, #48	; 0x30
 8004f6c:	af04      	add	r7, sp, #16
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f001 fc07 	bl	8006790 <pvPortMalloc>
 8004f82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00e      	beq.n	8004fa8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f8a:	205c      	movs	r0, #92	; 0x5c
 8004f8c:	f001 fc00 	bl	8006790 <pvPortMalloc>
 8004f90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f9e:	e005      	b.n	8004fac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fa0:	6978      	ldr	r0, [r7, #20]
 8004fa2:	f001 fcb7 	bl	8006914 <vPortFree>
 8004fa6:	e001      	b.n	8004fac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d017      	beq.n	8004fe2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fba:	88fa      	ldrh	r2, [r7, #6]
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9303      	str	r3, [sp, #12]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	9302      	str	r3, [sp, #8]
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	9301      	str	r3, [sp, #4]
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f80e 	bl	8004ff2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fd6:	69f8      	ldr	r0, [r7, #28]
 8004fd8:	f000 f89a 	bl	8005110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	e002      	b.n	8004fe8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fe8:	69bb      	ldr	r3, [r7, #24]
	}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b088      	sub	sp, #32
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
 8004ffe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	461a      	mov	r2, r3
 800500a:	21a5      	movs	r1, #165	; 0xa5
 800500c:	f001 fdc5 	bl	8006b9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800501a:	3b01      	subs	r3, #1
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f023 0307 	bic.w	r3, r3, #7
 8005028:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	2b00      	cmp	r3, #0
 8005032:	d009      	beq.n	8005048 <prvInitialiseNewTask+0x56>
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e7fe      	b.n	8005046 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d01f      	beq.n	800508e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	e012      	b.n	800507a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	4413      	add	r3, r2
 800505a:	7819      	ldrb	r1, [r3, #0]
 800505c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	3334      	adds	r3, #52	; 0x34
 8005064:	460a      	mov	r2, r1
 8005066:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	4413      	add	r3, r2
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d006      	beq.n	8005082 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	3301      	adds	r3, #1
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	2b0f      	cmp	r3, #15
 800507e:	d9e9      	bls.n	8005054 <prvInitialiseNewTask+0x62>
 8005080:	e000      	b.n	8005084 <prvInitialiseNewTask+0x92>
			{
				break;
 8005082:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800508c:	e003      	b.n	8005096 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	2b37      	cmp	r3, #55	; 0x37
 800509a:	d901      	bls.n	80050a0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800509c:	2337      	movs	r3, #55	; 0x37
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	2200      	movs	r2, #0
 80050b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	3304      	adds	r3, #4
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff f994 	bl	80043e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	3318      	adds	r3, #24
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff f98f 	bl	80043e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	2200      	movs	r2, #0
 80050e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	68f9      	ldr	r1, [r7, #12]
 80050ee:	69b8      	ldr	r0, [r7, #24]
 80050f0:	f001 f90c 	bl	800630c <pxPortInitialiseStack>
 80050f4:	4602      	mov	r2, r0
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005106:	bf00      	nop
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005118:	f001 fa20 	bl	800655c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800511c:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <prvAddNewTaskToReadyList+0xc4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <prvAddNewTaskToReadyList+0xc4>)
 8005124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005126:	4b2c      	ldr	r3, [pc, #176]	; (80051d8 <prvAddNewTaskToReadyList+0xc8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800512e:	4a2a      	ldr	r2, [pc, #168]	; (80051d8 <prvAddNewTaskToReadyList+0xc8>)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005134:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <prvAddNewTaskToReadyList+0xc4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d110      	bne.n	800515e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800513c:	f000 fc08 	bl	8005950 <prvInitialiseTaskLists>
 8005140:	e00d      	b.n	800515e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005142:	4b26      	ldr	r3, [pc, #152]	; (80051dc <prvAddNewTaskToReadyList+0xcc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800514a:	4b23      	ldr	r3, [pc, #140]	; (80051d8 <prvAddNewTaskToReadyList+0xc8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	429a      	cmp	r2, r3
 8005156:	d802      	bhi.n	800515e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005158:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <prvAddNewTaskToReadyList+0xc8>)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800515e:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <prvAddNewTaskToReadyList+0xd0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3301      	adds	r3, #1
 8005164:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <prvAddNewTaskToReadyList+0xd0>)
 8005166:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005168:	4b1d      	ldr	r3, [pc, #116]	; (80051e0 <prvAddNewTaskToReadyList+0xd0>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005174:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <prvAddNewTaskToReadyList+0xd4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d903      	bls.n	8005184 <prvAddNewTaskToReadyList+0x74>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <prvAddNewTaskToReadyList+0xd4>)
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <prvAddNewTaskToReadyList+0xd8>)
 8005192:	441a      	add	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	4619      	mov	r1, r3
 800519a:	4610      	mov	r0, r2
 800519c:	f7ff f92f 	bl	80043fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051a0:	f001 fa0a 	bl	80065b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051a4:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <prvAddNewTaskToReadyList+0xcc>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00e      	beq.n	80051ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <prvAddNewTaskToReadyList+0xc8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d207      	bcs.n	80051ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051ba:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <prvAddNewTaskToReadyList+0xdc>)
 80051bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ca:	bf00      	nop
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000bc0 	.word	0x20000bc0
 80051d8:	200006ec 	.word	0x200006ec
 80051dc:	20000bcc 	.word	0x20000bcc
 80051e0:	20000bdc 	.word	0x20000bdc
 80051e4:	20000bc8 	.word	0x20000bc8
 80051e8:	200006f0 	.word	0x200006f0
 80051ec:	e000ed04 	.word	0xe000ed04

080051f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d016      	beq.n	8005230 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005202:	4b13      	ldr	r3, [pc, #76]	; (8005250 <vTaskDelay+0x60>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d009      	beq.n	800521e <vTaskDelay+0x2e>
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	e7fe      	b.n	800521c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800521e:	f000 f87f 	bl	8005320 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005222:	2100      	movs	r1, #0
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fcd7 	bl	8005bd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800522a:	f000 f887 	bl	800533c <xTaskResumeAll>
 800522e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d107      	bne.n	8005246 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <vTaskDelay+0x64>)
 8005238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000be8 	.word	0x20000be8
 8005254:	e000ed04 	.word	0xe000ed04

08005258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005266:	463a      	mov	r2, r7
 8005268:	1d39      	adds	r1, r7, #4
 800526a:	f107 0308 	add.w	r3, r7, #8
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff f864 	bl	800433c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	9202      	str	r2, [sp, #8]
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	2300      	movs	r3, #0
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	2300      	movs	r3, #0
 8005284:	460a      	mov	r2, r1
 8005286:	4920      	ldr	r1, [pc, #128]	; (8005308 <vTaskStartScheduler+0xb0>)
 8005288:	4820      	ldr	r0, [pc, #128]	; (800530c <vTaskStartScheduler+0xb4>)
 800528a:	f7ff fe13 	bl	8004eb4 <xTaskCreateStatic>
 800528e:	4602      	mov	r2, r0
 8005290:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <vTaskStartScheduler+0xb8>)
 8005292:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005294:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <vTaskStartScheduler+0xb8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800529c:	2301      	movs	r3, #1
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	e001      	b.n	80052a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d102      	bne.n	80052b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80052ac:	f000 fce8 	bl	8005c80 <xTimerCreateTimerTask>
 80052b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d115      	bne.n	80052e4 <vTaskStartScheduler+0x8c>
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052ca:	4b12      	ldr	r3, [pc, #72]	; (8005314 <vTaskStartScheduler+0xbc>)
 80052cc:	f04f 32ff 	mov.w	r2, #4294967295
 80052d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <vTaskStartScheduler+0xc0>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052d8:	4b10      	ldr	r3, [pc, #64]	; (800531c <vTaskStartScheduler+0xc4>)
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052de:	f001 f89f 	bl	8006420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052e2:	e00d      	b.n	8005300 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d109      	bne.n	8005300 <vTaskStartScheduler+0xa8>
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e7fe      	b.n	80052fe <vTaskStartScheduler+0xa6>
}
 8005300:	bf00      	nop
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	08006be8 	.word	0x08006be8
 800530c:	08005921 	.word	0x08005921
 8005310:	20000be4 	.word	0x20000be4
 8005314:	20000be0 	.word	0x20000be0
 8005318:	20000bcc 	.word	0x20000bcc
 800531c:	20000bc4 	.word	0x20000bc4

08005320 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005324:	4b04      	ldr	r3, [pc, #16]	; (8005338 <vTaskSuspendAll+0x18>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3301      	adds	r3, #1
 800532a:	4a03      	ldr	r2, [pc, #12]	; (8005338 <vTaskSuspendAll+0x18>)
 800532c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800532e:	bf00      	nop
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	20000be8 	.word	0x20000be8

0800533c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005346:	2300      	movs	r3, #0
 8005348:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800534a:	4b41      	ldr	r3, [pc, #260]	; (8005450 <xTaskResumeAll+0x114>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <xTaskResumeAll+0x2a>
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	e7fe      	b.n	8005364 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005366:	f001 f8f9 	bl	800655c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800536a:	4b39      	ldr	r3, [pc, #228]	; (8005450 <xTaskResumeAll+0x114>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3b01      	subs	r3, #1
 8005370:	4a37      	ldr	r2, [pc, #220]	; (8005450 <xTaskResumeAll+0x114>)
 8005372:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005374:	4b36      	ldr	r3, [pc, #216]	; (8005450 <xTaskResumeAll+0x114>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d162      	bne.n	8005442 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800537c:	4b35      	ldr	r3, [pc, #212]	; (8005454 <xTaskResumeAll+0x118>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d05e      	beq.n	8005442 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005384:	e02f      	b.n	80053e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005386:	4b34      	ldr	r3, [pc, #208]	; (8005458 <xTaskResumeAll+0x11c>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3318      	adds	r3, #24
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff f890 	bl	80044b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3304      	adds	r3, #4
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff f88b 	bl	80044b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a6:	4b2d      	ldr	r3, [pc, #180]	; (800545c <xTaskResumeAll+0x120>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d903      	bls.n	80053b6 <xTaskResumeAll+0x7a>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	4a2a      	ldr	r2, [pc, #168]	; (800545c <xTaskResumeAll+0x120>)
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4a27      	ldr	r2, [pc, #156]	; (8005460 <xTaskResumeAll+0x124>)
 80053c4:	441a      	add	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f7ff f816 	bl	80043fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d6:	4b23      	ldr	r3, [pc, #140]	; (8005464 <xTaskResumeAll+0x128>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	429a      	cmp	r2, r3
 80053de:	d302      	bcc.n	80053e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80053e0:	4b21      	ldr	r3, [pc, #132]	; (8005468 <xTaskResumeAll+0x12c>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053e6:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <xTaskResumeAll+0x11c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1cb      	bne.n	8005386 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053f4:	f000 fb46 	bl	8005a84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80053f8:	4b1c      	ldr	r3, [pc, #112]	; (800546c <xTaskResumeAll+0x130>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d010      	beq.n	8005426 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005404:	f000 f846 	bl	8005494 <xTaskIncrementTick>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800540e:	4b16      	ldr	r3, [pc, #88]	; (8005468 <xTaskResumeAll+0x12c>)
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3b01      	subs	r3, #1
 8005418:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1f1      	bne.n	8005404 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005420:	4b12      	ldr	r3, [pc, #72]	; (800546c <xTaskResumeAll+0x130>)
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005426:	4b10      	ldr	r3, [pc, #64]	; (8005468 <xTaskResumeAll+0x12c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d009      	beq.n	8005442 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800542e:	2301      	movs	r3, #1
 8005430:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005432:	4b0f      	ldr	r3, [pc, #60]	; (8005470 <xTaskResumeAll+0x134>)
 8005434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005442:	f001 f8b9 	bl	80065b8 <vPortExitCritical>

	return xAlreadyYielded;
 8005446:	68bb      	ldr	r3, [r7, #8]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20000be8 	.word	0x20000be8
 8005454:	20000bc0 	.word	0x20000bc0
 8005458:	20000b80 	.word	0x20000b80
 800545c:	20000bc8 	.word	0x20000bc8
 8005460:	200006f0 	.word	0x200006f0
 8005464:	200006ec 	.word	0x200006ec
 8005468:	20000bd4 	.word	0x20000bd4
 800546c:	20000bd0 	.word	0x20000bd0
 8005470:	e000ed04 	.word	0xe000ed04

08005474 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <xTaskGetTickCount+0x1c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005480:	687b      	ldr	r3, [r7, #4]
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	20000bc4 	.word	0x20000bc4

08005494 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549e:	4b4e      	ldr	r3, [pc, #312]	; (80055d8 <xTaskIncrementTick+0x144>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f040 8088 	bne.w	80055b8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054a8:	4b4c      	ldr	r3, [pc, #304]	; (80055dc <xTaskIncrementTick+0x148>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3301      	adds	r3, #1
 80054ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054b0:	4a4a      	ldr	r2, [pc, #296]	; (80055dc <xTaskIncrementTick+0x148>)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d11f      	bne.n	80054fc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80054bc:	4b48      	ldr	r3, [pc, #288]	; (80055e0 <xTaskIncrementTick+0x14c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <xTaskIncrementTick+0x46>
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	e7fe      	b.n	80054d8 <xTaskIncrementTick+0x44>
 80054da:	4b41      	ldr	r3, [pc, #260]	; (80055e0 <xTaskIncrementTick+0x14c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	4b40      	ldr	r3, [pc, #256]	; (80055e4 <xTaskIncrementTick+0x150>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a3e      	ldr	r2, [pc, #248]	; (80055e0 <xTaskIncrementTick+0x14c>)
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	4a3e      	ldr	r2, [pc, #248]	; (80055e4 <xTaskIncrementTick+0x150>)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	4b3e      	ldr	r3, [pc, #248]	; (80055e8 <xTaskIncrementTick+0x154>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3301      	adds	r3, #1
 80054f4:	4a3c      	ldr	r2, [pc, #240]	; (80055e8 <xTaskIncrementTick+0x154>)
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	f000 fac4 	bl	8005a84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054fc:	4b3b      	ldr	r3, [pc, #236]	; (80055ec <xTaskIncrementTick+0x158>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	429a      	cmp	r2, r3
 8005504:	d349      	bcc.n	800559a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005506:	4b36      	ldr	r3, [pc, #216]	; (80055e0 <xTaskIncrementTick+0x14c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005510:	4b36      	ldr	r3, [pc, #216]	; (80055ec <xTaskIncrementTick+0x158>)
 8005512:	f04f 32ff 	mov.w	r2, #4294967295
 8005516:	601a      	str	r2, [r3, #0]
					break;
 8005518:	e03f      	b.n	800559a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800551a:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <xTaskIncrementTick+0x14c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	429a      	cmp	r2, r3
 8005530:	d203      	bcs.n	800553a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005532:	4a2e      	ldr	r2, [pc, #184]	; (80055ec <xTaskIncrementTick+0x158>)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005538:	e02f      	b.n	800559a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	3304      	adds	r3, #4
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe ffba 	bl	80044b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	2b00      	cmp	r3, #0
 800554a:	d004      	beq.n	8005556 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	3318      	adds	r3, #24
 8005550:	4618      	mov	r0, r3
 8005552:	f7fe ffb1 	bl	80044b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555a:	4b25      	ldr	r3, [pc, #148]	; (80055f0 <xTaskIncrementTick+0x15c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d903      	bls.n	800556a <xTaskIncrementTick+0xd6>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	4a22      	ldr	r2, [pc, #136]	; (80055f0 <xTaskIncrementTick+0x15c>)
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556e:	4613      	mov	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4a1f      	ldr	r2, [pc, #124]	; (80055f4 <xTaskIncrementTick+0x160>)
 8005578:	441a      	add	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	3304      	adds	r3, #4
 800557e:	4619      	mov	r1, r3
 8005580:	4610      	mov	r0, r2
 8005582:	f7fe ff3c 	bl	80043fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558a:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <xTaskIncrementTick+0x164>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	429a      	cmp	r2, r3
 8005592:	d3b8      	bcc.n	8005506 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005594:	2301      	movs	r3, #1
 8005596:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005598:	e7b5      	b.n	8005506 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800559a:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <xTaskIncrementTick+0x164>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a0:	4914      	ldr	r1, [pc, #80]	; (80055f4 <xTaskIncrementTick+0x160>)
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d907      	bls.n	80055c2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80055b2:	2301      	movs	r3, #1
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	e004      	b.n	80055c2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80055b8:	4b10      	ldr	r3, [pc, #64]	; (80055fc <xTaskIncrementTick+0x168>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3301      	adds	r3, #1
 80055be:	4a0f      	ldr	r2, [pc, #60]	; (80055fc <xTaskIncrementTick+0x168>)
 80055c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80055c2:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <xTaskIncrementTick+0x16c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80055ca:	2301      	movs	r3, #1
 80055cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80055ce:	697b      	ldr	r3, [r7, #20]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20000be8 	.word	0x20000be8
 80055dc:	20000bc4 	.word	0x20000bc4
 80055e0:	20000b78 	.word	0x20000b78
 80055e4:	20000b7c 	.word	0x20000b7c
 80055e8:	20000bd8 	.word	0x20000bd8
 80055ec:	20000be0 	.word	0x20000be0
 80055f0:	20000bc8 	.word	0x20000bc8
 80055f4:	200006f0 	.word	0x200006f0
 80055f8:	200006ec 	.word	0x200006ec
 80055fc:	20000bd0 	.word	0x20000bd0
 8005600:	20000bd4 	.word	0x20000bd4

08005604 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800560a:	4b27      	ldr	r3, [pc, #156]	; (80056a8 <vTaskSwitchContext+0xa4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005612:	4b26      	ldr	r3, [pc, #152]	; (80056ac <vTaskSwitchContext+0xa8>)
 8005614:	2201      	movs	r2, #1
 8005616:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005618:	e040      	b.n	800569c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800561a:	4b24      	ldr	r3, [pc, #144]	; (80056ac <vTaskSwitchContext+0xa8>)
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005620:	4b23      	ldr	r3, [pc, #140]	; (80056b0 <vTaskSwitchContext+0xac>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	e00f      	b.n	8005648 <vTaskSwitchContext+0x44>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <vTaskSwitchContext+0x3e>
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	607b      	str	r3, [r7, #4]
 8005640:	e7fe      	b.n	8005640 <vTaskSwitchContext+0x3c>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3b01      	subs	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	491a      	ldr	r1, [pc, #104]	; (80056b4 <vTaskSwitchContext+0xb0>)
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0e5      	beq.n	8005628 <vTaskSwitchContext+0x24>
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4a13      	ldr	r2, [pc, #76]	; (80056b4 <vTaskSwitchContext+0xb0>)
 8005668:	4413      	add	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	605a      	str	r2, [r3, #4]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	3308      	adds	r3, #8
 800567e:	429a      	cmp	r2, r3
 8005680:	d104      	bne.n	800568c <vTaskSwitchContext+0x88>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	605a      	str	r2, [r3, #4]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	4a09      	ldr	r2, [pc, #36]	; (80056b8 <vTaskSwitchContext+0xb4>)
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	4a06      	ldr	r2, [pc, #24]	; (80056b0 <vTaskSwitchContext+0xac>)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6013      	str	r3, [r2, #0]
}
 800569c:	bf00      	nop
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	20000be8 	.word	0x20000be8
 80056ac:	20000bd4 	.word	0x20000bd4
 80056b0:	20000bc8 	.word	0x20000bc8
 80056b4:	200006f0 	.word	0x200006f0
 80056b8:	200006ec 	.word	0x200006ec

080056bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d109      	bne.n	80056e0 <vTaskPlaceOnEventList+0x24>
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	e7fe      	b.n	80056de <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <vTaskPlaceOnEventList+0x44>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3318      	adds	r3, #24
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7fe feac 	bl	8004446 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056ee:	2101      	movs	r1, #1
 80056f0:	6838      	ldr	r0, [r7, #0]
 80056f2:	f000 fa71 	bl	8005bd8 <prvAddCurrentTaskToDelayedList>
}
 80056f6:	bf00      	nop
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	200006ec 	.word	0x200006ec

08005704 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <vTaskPlaceOnEventListRestricted+0x26>
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e7fe      	b.n	8005728 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800572a:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <vTaskPlaceOnEventListRestricted+0x50>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3318      	adds	r3, #24
 8005730:	4619      	mov	r1, r3
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7fe fe63 	bl	80043fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800573e:	f04f 33ff 	mov.w	r3, #4294967295
 8005742:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	68b8      	ldr	r0, [r7, #8]
 8005748:	f000 fa46 	bl	8005bd8 <prvAddCurrentTaskToDelayedList>
	}
 800574c:	bf00      	nop
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	200006ec 	.word	0x200006ec

08005758 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d109      	bne.n	8005782 <xTaskRemoveFromEventList+0x2a>
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	e7fe      	b.n	8005780 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	3318      	adds	r3, #24
 8005786:	4618      	mov	r0, r3
 8005788:	f7fe fe96 	bl	80044b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800578c:	4b1d      	ldr	r3, [pc, #116]	; (8005804 <xTaskRemoveFromEventList+0xac>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d11d      	bne.n	80057d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	3304      	adds	r3, #4
 8005798:	4618      	mov	r0, r3
 800579a:	f7fe fe8d 	bl	80044b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a2:	4b19      	ldr	r3, [pc, #100]	; (8005808 <xTaskRemoveFromEventList+0xb0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d903      	bls.n	80057b2 <xTaskRemoveFromEventList+0x5a>
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	4a16      	ldr	r2, [pc, #88]	; (8005808 <xTaskRemoveFromEventList+0xb0>)
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4a13      	ldr	r2, [pc, #76]	; (800580c <xTaskRemoveFromEventList+0xb4>)
 80057c0:	441a      	add	r2, r3
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	3304      	adds	r3, #4
 80057c6:	4619      	mov	r1, r3
 80057c8:	4610      	mov	r0, r2
 80057ca:	f7fe fe18 	bl	80043fe <vListInsertEnd>
 80057ce:	e005      	b.n	80057dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	3318      	adds	r3, #24
 80057d4:	4619      	mov	r1, r3
 80057d6:	480e      	ldr	r0, [pc, #56]	; (8005810 <xTaskRemoveFromEventList+0xb8>)
 80057d8:	f7fe fe11 	bl	80043fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <xTaskRemoveFromEventList+0xbc>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d905      	bls.n	80057f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057ea:	2301      	movs	r3, #1
 80057ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057ee:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <xTaskRemoveFromEventList+0xc0>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	e001      	b.n	80057fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057fa:	697b      	ldr	r3, [r7, #20]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000be8 	.word	0x20000be8
 8005808:	20000bc8 	.word	0x20000bc8
 800580c:	200006f0 	.word	0x200006f0
 8005810:	20000b80 	.word	0x20000b80
 8005814:	200006ec 	.word	0x200006ec
 8005818:	20000bd4 	.word	0x20000bd4

0800581c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005824:	4b06      	ldr	r3, [pc, #24]	; (8005840 <vTaskInternalSetTimeOutState+0x24>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800582c:	4b05      	ldr	r3, [pc, #20]	; (8005844 <vTaskInternalSetTimeOutState+0x28>)
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	605a      	str	r2, [r3, #4]
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	20000bd8 	.word	0x20000bd8
 8005844:	20000bc4 	.word	0x20000bc4

08005848 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <xTaskCheckForTimeOut+0x24>
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	e7fe      	b.n	800586a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <xTaskCheckForTimeOut+0x3e>
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	e7fe      	b.n	8005884 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005886:	f000 fe69 	bl	800655c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800588a:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <xTaskCheckForTimeOut+0xb8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d102      	bne.n	80058aa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	e023      	b.n	80058f2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b15      	ldr	r3, [pc, #84]	; (8005904 <xTaskCheckForTimeOut+0xbc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d007      	beq.n	80058c6 <xTaskCheckForTimeOut+0x7e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d302      	bcc.n	80058c6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058c0:	2301      	movs	r3, #1
 80058c2:	61fb      	str	r3, [r7, #28]
 80058c4:	e015      	b.n	80058f2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d20b      	bcs.n	80058e8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	1ad2      	subs	r2, r2, r3
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff ff9d 	bl	800581c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	61fb      	str	r3, [r7, #28]
 80058e6:	e004      	b.n	80058f2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058ee:	2301      	movs	r3, #1
 80058f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058f2:	f000 fe61 	bl	80065b8 <vPortExitCritical>

	return xReturn;
 80058f6:	69fb      	ldr	r3, [r7, #28]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3720      	adds	r7, #32
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	20000bc4 	.word	0x20000bc4
 8005904:	20000bd8 	.word	0x20000bd8

08005908 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800590c:	4b03      	ldr	r3, [pc, #12]	; (800591c <vTaskMissedYield+0x14>)
 800590e:	2201      	movs	r2, #1
 8005910:	601a      	str	r2, [r3, #0]
}
 8005912:	bf00      	nop
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	20000bd4 	.word	0x20000bd4

08005920 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005928:	f000 f852 	bl	80059d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800592c:	4b06      	ldr	r3, [pc, #24]	; (8005948 <prvIdleTask+0x28>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d9f9      	bls.n	8005928 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005934:	4b05      	ldr	r3, [pc, #20]	; (800594c <prvIdleTask+0x2c>)
 8005936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005944:	e7f0      	b.n	8005928 <prvIdleTask+0x8>
 8005946:	bf00      	nop
 8005948:	200006f0 	.word	0x200006f0
 800594c:	e000ed04 	.word	0xe000ed04

08005950 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005956:	2300      	movs	r3, #0
 8005958:	607b      	str	r3, [r7, #4]
 800595a:	e00c      	b.n	8005976 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4a12      	ldr	r2, [pc, #72]	; (80059b0 <prvInitialiseTaskLists+0x60>)
 8005968:	4413      	add	r3, r2
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe fd1a 	bl	80043a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3301      	adds	r3, #1
 8005974:	607b      	str	r3, [r7, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b37      	cmp	r3, #55	; 0x37
 800597a:	d9ef      	bls.n	800595c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800597c:	480d      	ldr	r0, [pc, #52]	; (80059b4 <prvInitialiseTaskLists+0x64>)
 800597e:	f7fe fd11 	bl	80043a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005982:	480d      	ldr	r0, [pc, #52]	; (80059b8 <prvInitialiseTaskLists+0x68>)
 8005984:	f7fe fd0e 	bl	80043a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005988:	480c      	ldr	r0, [pc, #48]	; (80059bc <prvInitialiseTaskLists+0x6c>)
 800598a:	f7fe fd0b 	bl	80043a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800598e:	480c      	ldr	r0, [pc, #48]	; (80059c0 <prvInitialiseTaskLists+0x70>)
 8005990:	f7fe fd08 	bl	80043a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005994:	480b      	ldr	r0, [pc, #44]	; (80059c4 <prvInitialiseTaskLists+0x74>)
 8005996:	f7fe fd05 	bl	80043a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <prvInitialiseTaskLists+0x78>)
 800599c:	4a05      	ldr	r2, [pc, #20]	; (80059b4 <prvInitialiseTaskLists+0x64>)
 800599e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <prvInitialiseTaskLists+0x7c>)
 80059a2:	4a05      	ldr	r2, [pc, #20]	; (80059b8 <prvInitialiseTaskLists+0x68>)
 80059a4:	601a      	str	r2, [r3, #0]
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	200006f0 	.word	0x200006f0
 80059b4:	20000b50 	.word	0x20000b50
 80059b8:	20000b64 	.word	0x20000b64
 80059bc:	20000b80 	.word	0x20000b80
 80059c0:	20000b94 	.word	0x20000b94
 80059c4:	20000bac 	.word	0x20000bac
 80059c8:	20000b78 	.word	0x20000b78
 80059cc:	20000b7c 	.word	0x20000b7c

080059d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059d6:	e019      	b.n	8005a0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059d8:	f000 fdc0 	bl	800655c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059dc:	4b0f      	ldr	r3, [pc, #60]	; (8005a1c <prvCheckTasksWaitingTermination+0x4c>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fe fd65 	bl	80044b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059ee:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <prvCheckTasksWaitingTermination+0x50>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	4a0a      	ldr	r2, [pc, #40]	; (8005a20 <prvCheckTasksWaitingTermination+0x50>)
 80059f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059f8:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <prvCheckTasksWaitingTermination+0x54>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <prvCheckTasksWaitingTermination+0x54>)
 8005a00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a02:	f000 fdd9 	bl	80065b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f80e 	bl	8005a28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a0c:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <prvCheckTasksWaitingTermination+0x54>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e1      	bne.n	80059d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a14:	bf00      	nop
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	20000b94 	.word	0x20000b94
 8005a20:	20000bc0 	.word	0x20000bc0
 8005a24:	20000ba8 	.word	0x20000ba8

08005a28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d108      	bne.n	8005a4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 ff68 	bl	8006914 <vPortFree>
				vPortFree( pxTCB );
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 ff65 	bl	8006914 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a4a:	e017      	b.n	8005a7c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d103      	bne.n	8005a5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 ff5c 	bl	8006914 <vPortFree>
	}
 8005a5c:	e00e      	b.n	8005a7c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d009      	beq.n	8005a7c <prvDeleteTCB+0x54>
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e7fe      	b.n	8005a7a <prvDeleteTCB+0x52>
	}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a8a:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <prvResetNextTaskUnblockTime+0x38>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a94:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <prvResetNextTaskUnblockTime+0x3c>)
 8005a96:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a9c:	e008      	b.n	8005ab0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a9e:	4b07      	ldr	r3, [pc, #28]	; (8005abc <prvResetNextTaskUnblockTime+0x38>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4a04      	ldr	r2, [pc, #16]	; (8005ac0 <prvResetNextTaskUnblockTime+0x3c>)
 8005aae:	6013      	str	r3, [r2, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	20000b78 	.word	0x20000b78
 8005ac0:	20000be0 	.word	0x20000be0

08005ac4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005aca:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <xTaskGetSchedulerState+0x34>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	607b      	str	r3, [r7, #4]
 8005ad6:	e008      	b.n	8005aea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ad8:	4b08      	ldr	r3, [pc, #32]	; (8005afc <xTaskGetSchedulerState+0x38>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d102      	bne.n	8005ae6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	607b      	str	r3, [r7, #4]
 8005ae4:	e001      	b.n	8005aea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005aea:	687b      	ldr	r3, [r7, #4]
	}
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	20000bcc 	.word	0x20000bcc
 8005afc:	20000be8 	.word	0x20000be8

08005b00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d054      	beq.n	8005bc0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b16:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <xTaskPriorityDisinherit+0xcc>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d009      	beq.n	8005b34 <xTaskPriorityDisinherit+0x34>
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e7fe      	b.n	8005b32 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <xTaskPriorityDisinherit+0x50>
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	e7fe      	b.n	8005b4e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b54:	1e5a      	subs	r2, r3, #1
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d02c      	beq.n	8005bc0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d128      	bne.n	8005bc0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	3304      	adds	r3, #4
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fe fca0 	bl	80044b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b90:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <xTaskPriorityDisinherit+0xd0>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d903      	bls.n	8005ba0 <xTaskPriorityDisinherit+0xa0>
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	4a0c      	ldr	r2, [pc, #48]	; (8005bd0 <xTaskPriorityDisinherit+0xd0>)
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <xTaskPriorityDisinherit+0xd4>)
 8005bae:	441a      	add	r2, r3
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f7fe fc21 	bl	80043fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bc0:	697b      	ldr	r3, [r7, #20]
	}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	200006ec 	.word	0x200006ec
 8005bd0:	20000bc8 	.word	0x20000bc8
 8005bd4:	200006f0 	.word	0x200006f0

08005bd8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005be2:	4b21      	ldr	r3, [pc, #132]	; (8005c68 <prvAddCurrentTaskToDelayedList+0x90>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be8:	4b20      	ldr	r3, [pc, #128]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3304      	adds	r3, #4
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe fc62 	bl	80044b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d10a      	bne.n	8005c12 <prvAddCurrentTaskToDelayedList+0x3a>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d007      	beq.n	8005c12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c02:	4b1a      	ldr	r3, [pc, #104]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4819      	ldr	r0, [pc, #100]	; (8005c70 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c0c:	f7fe fbf7 	bl	80043fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c10:	e026      	b.n	8005c60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4413      	add	r3, r2
 8005c18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c1a:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d209      	bcs.n	8005c3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c2a:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4619      	mov	r1, r3
 8005c36:	4610      	mov	r0, r2
 8005c38:	f7fe fc05 	bl	8004446 <vListInsert>
}
 8005c3c:	e010      	b.n	8005c60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c3e:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3304      	adds	r3, #4
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f7fe fbfb 	bl	8004446 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d202      	bcs.n	8005c60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c5a:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	6013      	str	r3, [r2, #0]
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20000bc4 	.word	0x20000bc4
 8005c6c:	200006ec 	.word	0x200006ec
 8005c70:	20000bac 	.word	0x20000bac
 8005c74:	20000b7c 	.word	0x20000b7c
 8005c78:	20000b78 	.word	0x20000b78
 8005c7c:	20000be0 	.word	0x20000be0

08005c80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08a      	sub	sp, #40	; 0x28
 8005c84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c8a:	f000 faff 	bl	800628c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c8e:	4b1c      	ldr	r3, [pc, #112]	; (8005d00 <xTimerCreateTimerTask+0x80>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d021      	beq.n	8005cda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c9e:	1d3a      	adds	r2, r7, #4
 8005ca0:	f107 0108 	add.w	r1, r7, #8
 8005ca4:	f107 030c 	add.w	r3, r7, #12
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe fb61 	bl	8004370 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	9202      	str	r2, [sp, #8]
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	2302      	movs	r3, #2
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	460a      	mov	r2, r1
 8005cc0:	4910      	ldr	r1, [pc, #64]	; (8005d04 <xTimerCreateTimerTask+0x84>)
 8005cc2:	4811      	ldr	r0, [pc, #68]	; (8005d08 <xTimerCreateTimerTask+0x88>)
 8005cc4:	f7ff f8f6 	bl	8004eb4 <xTaskCreateStatic>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <xTimerCreateTimerTask+0x8c>)
 8005ccc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cce:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <xTimerCreateTimerTask+0x8c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d109      	bne.n	8005cf4 <xTimerCreateTimerTask+0x74>
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	e7fe      	b.n	8005cf2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005cf4:	697b      	ldr	r3, [r7, #20]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000c1c 	.word	0x20000c1c
 8005d04:	08006bf0 	.word	0x08006bf0
 8005d08:	08005e41 	.word	0x08005e41
 8005d0c:	20000c20 	.word	0x20000c20

08005d10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	; 0x28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d109      	bne.n	8005d3c <xTimerGenericCommand+0x2c>
 8005d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	623b      	str	r3, [r7, #32]
 8005d3a:	e7fe      	b.n	8005d3a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d3c:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <xTimerGenericCommand+0x94>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d02a      	beq.n	8005d9a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	dc18      	bgt.n	8005d88 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d56:	f7ff feb5 	bl	8005ac4 <xTaskGetSchedulerState>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d109      	bne.n	8005d74 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d60:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <xTimerGenericCommand+0x94>)
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	f107 0110 	add.w	r1, r7, #16
 8005d68:	2300      	movs	r3, #0
 8005d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6c:	f7fe fccc 	bl	8004708 <xQueueGenericSend>
 8005d70:	6278      	str	r0, [r7, #36]	; 0x24
 8005d72:	e012      	b.n	8005d9a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d74:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <xTimerGenericCommand+0x94>)
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	f107 0110 	add.w	r1, r7, #16
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f7fe fcc2 	bl	8004708 <xQueueGenericSend>
 8005d84:	6278      	str	r0, [r7, #36]	; 0x24
 8005d86:	e008      	b.n	8005d9a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d88:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <xTimerGenericCommand+0x94>)
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	f107 0110 	add.w	r1, r7, #16
 8005d90:	2300      	movs	r3, #0
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	f7fe fdb2 	bl	80048fc <xQueueGenericSendFromISR>
 8005d98:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3728      	adds	r7, #40	; 0x28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20000c1c 	.word	0x20000c1c

08005da8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db2:	4b22      	ldr	r3, [pc, #136]	; (8005e3c <prvProcessExpiredTimer+0x94>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe fb79 	bl	80044b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d021      	beq.n	8005e18 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	699a      	ldr	r2, [r3, #24]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	18d1      	adds	r1, r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	6978      	ldr	r0, [r7, #20]
 8005de2:	f000 f8d1 	bl	8005f88 <prvInsertTimerInActiveList>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01e      	beq.n	8005e2a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dec:	2300      	movs	r3, #0
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2300      	movs	r3, #0
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	2100      	movs	r1, #0
 8005df6:	6978      	ldr	r0, [r7, #20]
 8005df8:	f7ff ff8a 	bl	8005d10 <xTimerGenericCommand>
 8005dfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d112      	bne.n	8005e2a <prvProcessExpiredTimer+0x82>
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	e7fe      	b.n	8005e16 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e1e:	f023 0301 	bic.w	r3, r3, #1
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	6978      	ldr	r0, [r7, #20]
 8005e30:	4798      	blx	r3
}
 8005e32:	bf00      	nop
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20000c14 	.word	0x20000c14

08005e40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e48:	f107 0308 	add.w	r3, r7, #8
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 f857 	bl	8005f00 <prvGetNextExpireTime>
 8005e52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4619      	mov	r1, r3
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f803 	bl	8005e64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e5e:	f000 f8d5 	bl	800600c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e62:	e7f1      	b.n	8005e48 <prvTimerTask+0x8>

08005e64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e6e:	f7ff fa57 	bl	8005320 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e72:	f107 0308 	add.w	r3, r7, #8
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 f866 	bl	8005f48 <prvSampleTimeNow>
 8005e7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d130      	bne.n	8005ee6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <prvProcessTimerOrBlockTask+0x3c>
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d806      	bhi.n	8005ea0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e92:	f7ff fa53 	bl	800533c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e96:	68f9      	ldr	r1, [r7, #12]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff ff85 	bl	8005da8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e9e:	e024      	b.n	8005eea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d008      	beq.n	8005eb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ea6:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <prvProcessTimerOrBlockTask+0x90>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <prvProcessTimerOrBlockTask+0x50>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <prvProcessTimerOrBlockTask+0x52>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005eb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ef8 <prvProcessTimerOrBlockTask+0x94>)
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	f7fe ffc1 	bl	8004e4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005eca:	f7ff fa37 	bl	800533c <xTaskResumeAll>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ed4:	4b09      	ldr	r3, [pc, #36]	; (8005efc <prvProcessTimerOrBlockTask+0x98>)
 8005ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	f3bf 8f6f 	isb	sy
}
 8005ee4:	e001      	b.n	8005eea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ee6:	f7ff fa29 	bl	800533c <xTaskResumeAll>
}
 8005eea:	bf00      	nop
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000c18 	.word	0x20000c18
 8005ef8:	20000c1c 	.word	0x20000c1c
 8005efc:	e000ed04 	.word	0xe000ed04

08005f00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f08:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <prvGetNextExpireTime+0x44>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <prvGetNextExpireTime+0x16>
 8005f12:	2201      	movs	r2, #1
 8005f14:	e000      	b.n	8005f18 <prvGetNextExpireTime+0x18>
 8005f16:	2200      	movs	r2, #0
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d105      	bne.n	8005f30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f24:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <prvGetNextExpireTime+0x44>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e001      	b.n	8005f34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f34:	68fb      	ldr	r3, [r7, #12]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	20000c14 	.word	0x20000c14

08005f48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f50:	f7ff fa90 	bl	8005474 <xTaskGetTickCount>
 8005f54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f56:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <prvSampleTimeNow+0x3c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d205      	bcs.n	8005f6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f60:	f000 f930 	bl	80061c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	e002      	b.n	8005f72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f72:	4a04      	ldr	r2, [pc, #16]	; (8005f84 <prvSampleTimeNow+0x3c>)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f78:	68fb      	ldr	r3, [r7, #12]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000c24 	.word	0x20000c24

08005f88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d812      	bhi.n	8005fd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	1ad2      	subs	r2, r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d302      	bcc.n	8005fc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	e01b      	b.n	8005ffa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fc2:	4b10      	ldr	r3, [pc, #64]	; (8006004 <prvInsertTimerInActiveList+0x7c>)
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f7fe fa3a 	bl	8004446 <vListInsert>
 8005fd2:	e012      	b.n	8005ffa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d206      	bcs.n	8005fea <prvInsertTimerInActiveList+0x62>
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d302      	bcc.n	8005fea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	e007      	b.n	8005ffa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fea:	4b07      	ldr	r3, [pc, #28]	; (8006008 <prvInsertTimerInActiveList+0x80>)
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	f7fe fa26 	bl	8004446 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ffa:	697b      	ldr	r3, [r7, #20]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20000c18 	.word	0x20000c18
 8006008:	20000c14 	.word	0x20000c14

0800600c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08e      	sub	sp, #56	; 0x38
 8006010:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006012:	e0c6      	b.n	80061a2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	da17      	bge.n	800604a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800601a:	1d3b      	adds	r3, r7, #4
 800601c:	3304      	adds	r3, #4
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d109      	bne.n	800603a <prvProcessReceivedCommands+0x2e>
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	e7fe      	b.n	8006038 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006040:	6850      	ldr	r0, [r2, #4]
 8006042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006044:	6892      	ldr	r2, [r2, #8]
 8006046:	4611      	mov	r1, r2
 8006048:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f2c0 80a7 	blt.w	80061a0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d004      	beq.n	8006068 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	3304      	adds	r3, #4
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fa28 	bl	80044b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006068:	463b      	mov	r3, r7
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff ff6c 	bl	8005f48 <prvSampleTimeNow>
 8006070:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b09      	cmp	r3, #9
 8006076:	f200 8094 	bhi.w	80061a2 <prvProcessReceivedCommands+0x196>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <prvProcessReceivedCommands+0x74>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060a9 	.word	0x080060a9
 800608c:	0800611b 	.word	0x0800611b
 8006090:	0800612f 	.word	0x0800612f
 8006094:	08006177 	.word	0x08006177
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060a9 	.word	0x080060a9
 80060a0:	0800611b 	.word	0x0800611b
 80060a4:	0800612f 	.word	0x0800612f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	18d1      	adds	r1, r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c8:	f7ff ff5e 	bl	8005f88 <prvInsertTimerInActiveList>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d067      	beq.n	80061a2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d05c      	beq.n	80061a2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	441a      	add	r2, r3
 80060f0:	2300      	movs	r3, #0
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	2300      	movs	r3, #0
 80060f6:	2100      	movs	r1, #0
 80060f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060fa:	f7ff fe09 	bl	8005d10 <xTimerGenericCommand>
 80060fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d14d      	bne.n	80061a2 <prvProcessReceivedCommands+0x196>
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	61bb      	str	r3, [r7, #24]
 8006118:	e7fe      	b.n	8006118 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	b2da      	uxtb	r2, r3
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800612c:	e039      	b.n	80061a2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006134:	f043 0301 	orr.w	r3, r3, #1
 8006138:	b2da      	uxtb	r2, r3
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d109      	bne.n	8006162 <prvProcessReceivedCommands+0x156>
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	e7fe      	b.n	8006160 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	18d1      	adds	r1, r2, r3
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006170:	f7ff ff0a 	bl	8005f88 <prvInsertTimerInActiveList>
					break;
 8006174:	e015      	b.n	80061a2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006186:	f000 fbc5 	bl	8006914 <vPortFree>
 800618a:	e00a      	b.n	80061a2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006192:	f023 0301 	bic.w	r3, r3, #1
 8006196:	b2da      	uxtb	r2, r3
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800619e:	e000      	b.n	80061a2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061a2:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <prvProcessReceivedCommands+0x1b4>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	1d39      	adds	r1, r7, #4
 80061a8:	2200      	movs	r2, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe fc3a 	bl	8004a24 <xQueueReceive>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f47f af2e 	bne.w	8006014 <prvProcessReceivedCommands+0x8>
	}
}
 80061b8:	bf00      	nop
 80061ba:	3730      	adds	r7, #48	; 0x30
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000c1c 	.word	0x20000c1c

080061c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061ca:	e047      	b.n	800625c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061cc:	4b2d      	ldr	r3, [pc, #180]	; (8006284 <prvSwitchTimerLists+0xc0>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d6:	4b2b      	ldr	r3, [pc, #172]	; (8006284 <prvSwitchTimerLists+0xc0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fe f967 	bl	80044b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d02d      	beq.n	800625c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4413      	add	r3, r2
 8006208:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	429a      	cmp	r2, r3
 8006210:	d90e      	bls.n	8006230 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800621e:	4b19      	ldr	r3, [pc, #100]	; (8006284 <prvSwitchTimerLists+0xc0>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3304      	adds	r3, #4
 8006226:	4619      	mov	r1, r3
 8006228:	4610      	mov	r0, r2
 800622a:	f7fe f90c 	bl	8004446 <vListInsert>
 800622e:	e015      	b.n	800625c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006230:	2300      	movs	r3, #0
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	2300      	movs	r3, #0
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	2100      	movs	r1, #0
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7ff fd68 	bl	8005d10 <xTimerGenericCommand>
 8006240:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d109      	bne.n	800625c <prvSwitchTimerLists+0x98>
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	603b      	str	r3, [r7, #0]
 800625a:	e7fe      	b.n	800625a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800625c:	4b09      	ldr	r3, [pc, #36]	; (8006284 <prvSwitchTimerLists+0xc0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1b2      	bne.n	80061cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006266:	4b07      	ldr	r3, [pc, #28]	; (8006284 <prvSwitchTimerLists+0xc0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <prvSwitchTimerLists+0xc4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a04      	ldr	r2, [pc, #16]	; (8006284 <prvSwitchTimerLists+0xc0>)
 8006272:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006274:	4a04      	ldr	r2, [pc, #16]	; (8006288 <prvSwitchTimerLists+0xc4>)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	6013      	str	r3, [r2, #0]
}
 800627a:	bf00      	nop
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000c14 	.word	0x20000c14
 8006288:	20000c18 	.word	0x20000c18

0800628c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006292:	f000 f963 	bl	800655c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006296:	4b15      	ldr	r3, [pc, #84]	; (80062ec <prvCheckForValidListAndQueue+0x60>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d120      	bne.n	80062e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800629e:	4814      	ldr	r0, [pc, #80]	; (80062f0 <prvCheckForValidListAndQueue+0x64>)
 80062a0:	f7fe f880 	bl	80043a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062a4:	4813      	ldr	r0, [pc, #76]	; (80062f4 <prvCheckForValidListAndQueue+0x68>)
 80062a6:	f7fe f87d 	bl	80043a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062aa:	4b13      	ldr	r3, [pc, #76]	; (80062f8 <prvCheckForValidListAndQueue+0x6c>)
 80062ac:	4a10      	ldr	r2, [pc, #64]	; (80062f0 <prvCheckForValidListAndQueue+0x64>)
 80062ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062b0:	4b12      	ldr	r3, [pc, #72]	; (80062fc <prvCheckForValidListAndQueue+0x70>)
 80062b2:	4a10      	ldr	r2, [pc, #64]	; (80062f4 <prvCheckForValidListAndQueue+0x68>)
 80062b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062b6:	2300      	movs	r3, #0
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	4b11      	ldr	r3, [pc, #68]	; (8006300 <prvCheckForValidListAndQueue+0x74>)
 80062bc:	4a11      	ldr	r2, [pc, #68]	; (8006304 <prvCheckForValidListAndQueue+0x78>)
 80062be:	2110      	movs	r1, #16
 80062c0:	200a      	movs	r0, #10
 80062c2:	f7fe f98b 	bl	80045dc <xQueueGenericCreateStatic>
 80062c6:	4602      	mov	r2, r0
 80062c8:	4b08      	ldr	r3, [pc, #32]	; (80062ec <prvCheckForValidListAndQueue+0x60>)
 80062ca:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062cc:	4b07      	ldr	r3, [pc, #28]	; (80062ec <prvCheckForValidListAndQueue+0x60>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <prvCheckForValidListAndQueue+0x60>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	490b      	ldr	r1, [pc, #44]	; (8006308 <prvCheckForValidListAndQueue+0x7c>)
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe fd8e 	bl	8004dfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062e0:	f000 f96a 	bl	80065b8 <vPortExitCritical>
}
 80062e4:	bf00      	nop
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000c1c 	.word	0x20000c1c
 80062f0:	20000bec 	.word	0x20000bec
 80062f4:	20000c00 	.word	0x20000c00
 80062f8:	20000c14 	.word	0x20000c14
 80062fc:	20000c18 	.word	0x20000c18
 8006300:	20000cc8 	.word	0x20000cc8
 8006304:	20000c28 	.word	0x20000c28
 8006308:	08006bf8 	.word	0x08006bf8

0800630c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	3b04      	subs	r3, #4
 800631c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3b04      	subs	r3, #4
 800632a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f023 0201 	bic.w	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3b04      	subs	r3, #4
 800633a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800633c:	4a0c      	ldr	r2, [pc, #48]	; (8006370 <pxPortInitialiseStack+0x64>)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3b14      	subs	r3, #20
 8006346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3b04      	subs	r3, #4
 8006352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f06f 0202 	mvn.w	r2, #2
 800635a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3b20      	subs	r3, #32
 8006360:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006362:	68fb      	ldr	r3, [r7, #12]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	08006375 	.word	0x08006375

08006374 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800637e:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <prvTaskExitError+0x50>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006386:	d009      	beq.n	800639c <prvTaskExitError+0x28>
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	e7fe      	b.n	800639a <prvTaskExitError+0x26>
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063ae:	bf00      	nop
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0fc      	beq.n	80063b0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063b6:	bf00      	nop
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20000010 	.word	0x20000010
	...

080063d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063d0:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <pxCurrentTCBConst2>)
 80063d2:	6819      	ldr	r1, [r3, #0]
 80063d4:	6808      	ldr	r0, [r1, #0]
 80063d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063da:	f380 8809 	msr	PSP, r0
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f04f 0000 	mov.w	r0, #0
 80063e6:	f380 8811 	msr	BASEPRI, r0
 80063ea:	4770      	bx	lr
 80063ec:	f3af 8000 	nop.w

080063f0 <pxCurrentTCBConst2>:
 80063f0:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop

080063f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063f8:	4808      	ldr	r0, [pc, #32]	; (800641c <prvPortStartFirstTask+0x24>)
 80063fa:	6800      	ldr	r0, [r0, #0]
 80063fc:	6800      	ldr	r0, [r0, #0]
 80063fe:	f380 8808 	msr	MSP, r0
 8006402:	f04f 0000 	mov.w	r0, #0
 8006406:	f380 8814 	msr	CONTROL, r0
 800640a:	b662      	cpsie	i
 800640c:	b661      	cpsie	f
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	df00      	svc	0
 8006418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800641a:	bf00      	nop
 800641c:	e000ed08 	.word	0xe000ed08

08006420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006426:	4b44      	ldr	r3, [pc, #272]	; (8006538 <xPortStartScheduler+0x118>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a44      	ldr	r2, [pc, #272]	; (800653c <xPortStartScheduler+0x11c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d109      	bne.n	8006444 <xPortStartScheduler+0x24>
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	e7fe      	b.n	8006442 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006444:	4b3c      	ldr	r3, [pc, #240]	; (8006538 <xPortStartScheduler+0x118>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a3d      	ldr	r2, [pc, #244]	; (8006540 <xPortStartScheduler+0x120>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d109      	bne.n	8006462 <xPortStartScheduler+0x42>
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	e7fe      	b.n	8006460 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006462:	4b38      	ldr	r3, [pc, #224]	; (8006544 <xPortStartScheduler+0x124>)
 8006464:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	22ff      	movs	r2, #255	; 0xff
 8006472:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006484:	b2da      	uxtb	r2, r3
 8006486:	4b30      	ldr	r3, [pc, #192]	; (8006548 <xPortStartScheduler+0x128>)
 8006488:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800648a:	4b30      	ldr	r3, [pc, #192]	; (800654c <xPortStartScheduler+0x12c>)
 800648c:	2207      	movs	r2, #7
 800648e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006490:	e009      	b.n	80064a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006492:	4b2e      	ldr	r3, [pc, #184]	; (800654c <xPortStartScheduler+0x12c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3b01      	subs	r3, #1
 8006498:	4a2c      	ldr	r2, [pc, #176]	; (800654c <xPortStartScheduler+0x12c>)
 800649a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064a6:	78fb      	ldrb	r3, [r7, #3]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d0ef      	beq.n	8006492 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064b2:	4b26      	ldr	r3, [pc, #152]	; (800654c <xPortStartScheduler+0x12c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f1c3 0307 	rsb	r3, r3, #7
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d009      	beq.n	80064d2 <xPortStartScheduler+0xb2>
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	e7fe      	b.n	80064d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064d2:	4b1e      	ldr	r3, [pc, #120]	; (800654c <xPortStartScheduler+0x12c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	021b      	lsls	r3, r3, #8
 80064d8:	4a1c      	ldr	r2, [pc, #112]	; (800654c <xPortStartScheduler+0x12c>)
 80064da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064dc:	4b1b      	ldr	r3, [pc, #108]	; (800654c <xPortStartScheduler+0x12c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064e4:	4a19      	ldr	r2, [pc, #100]	; (800654c <xPortStartScheduler+0x12c>)
 80064e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064f0:	4b17      	ldr	r3, [pc, #92]	; (8006550 <xPortStartScheduler+0x130>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a16      	ldr	r2, [pc, #88]	; (8006550 <xPortStartScheduler+0x130>)
 80064f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064fc:	4b14      	ldr	r3, [pc, #80]	; (8006550 <xPortStartScheduler+0x130>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a13      	ldr	r2, [pc, #76]	; (8006550 <xPortStartScheduler+0x130>)
 8006502:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006506:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006508:	f000 f8d6 	bl	80066b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800650c:	4b11      	ldr	r3, [pc, #68]	; (8006554 <xPortStartScheduler+0x134>)
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006512:	f000 f8f5 	bl	8006700 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006516:	4b10      	ldr	r3, [pc, #64]	; (8006558 <xPortStartScheduler+0x138>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a0f      	ldr	r2, [pc, #60]	; (8006558 <xPortStartScheduler+0x138>)
 800651c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006520:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006522:	f7ff ff69 	bl	80063f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006526:	f7ff f86d 	bl	8005604 <vTaskSwitchContext>
	prvTaskExitError();
 800652a:	f7ff ff23 	bl	8006374 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	e000ed00 	.word	0xe000ed00
 800653c:	410fc271 	.word	0x410fc271
 8006540:	410fc270 	.word	0x410fc270
 8006544:	e000e400 	.word	0xe000e400
 8006548:	20000d18 	.word	0x20000d18
 800654c:	20000d1c 	.word	0x20000d1c
 8006550:	e000ed20 	.word	0xe000ed20
 8006554:	20000010 	.word	0x20000010
 8006558:	e000ef34 	.word	0xe000ef34

0800655c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006574:	4b0e      	ldr	r3, [pc, #56]	; (80065b0 <vPortEnterCritical+0x54>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3301      	adds	r3, #1
 800657a:	4a0d      	ldr	r2, [pc, #52]	; (80065b0 <vPortEnterCritical+0x54>)
 800657c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800657e:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <vPortEnterCritical+0x54>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d10e      	bne.n	80065a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006586:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <vPortEnterCritical+0x58>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d009      	beq.n	80065a4 <vPortEnterCritical+0x48>
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	603b      	str	r3, [r7, #0]
 80065a2:	e7fe      	b.n	80065a2 <vPortEnterCritical+0x46>
	}
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	20000010 	.word	0x20000010
 80065b4:	e000ed04 	.word	0xe000ed04

080065b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065be:	4b11      	ldr	r3, [pc, #68]	; (8006604 <vPortExitCritical+0x4c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <vPortExitCritical+0x22>
 80065c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	607b      	str	r3, [r7, #4]
 80065d8:	e7fe      	b.n	80065d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80065da:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <vPortExitCritical+0x4c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3b01      	subs	r3, #1
 80065e0:	4a08      	ldr	r2, [pc, #32]	; (8006604 <vPortExitCritical+0x4c>)
 80065e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065e4:	4b07      	ldr	r3, [pc, #28]	; (8006604 <vPortExitCritical+0x4c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d104      	bne.n	80065f6 <vPortExitCritical+0x3e>
 80065ec:	2300      	movs	r3, #0
 80065ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000010 	.word	0x20000010
	...

08006610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006610:	f3ef 8009 	mrs	r0, PSP
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	4b15      	ldr	r3, [pc, #84]	; (8006670 <pxCurrentTCBConst>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	f01e 0f10 	tst.w	lr, #16
 8006620:	bf08      	it	eq
 8006622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662a:	6010      	str	r0, [r2, #0]
 800662c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006634:	f380 8811 	msr	BASEPRI, r0
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f7fe ffe0 	bl	8005604 <vTaskSwitchContext>
 8006644:	f04f 0000 	mov.w	r0, #0
 8006648:	f380 8811 	msr	BASEPRI, r0
 800664c:	bc09      	pop	{r0, r3}
 800664e:	6819      	ldr	r1, [r3, #0]
 8006650:	6808      	ldr	r0, [r1, #0]
 8006652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006656:	f01e 0f10 	tst.w	lr, #16
 800665a:	bf08      	it	eq
 800665c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006660:	f380 8809 	msr	PSP, r0
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	f3af 8000 	nop.w

08006670 <pxCurrentTCBConst>:
 8006670:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop

08006678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006690:	f7fe ff00 	bl	8005494 <xTaskIncrementTick>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800669a:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <SysTick_Handler+0x3c>)
 800669c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	2300      	movs	r3, #0
 80066a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80066ac:	bf00      	nop
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	e000ed04 	.word	0xe000ed04

080066b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066b8:	b480      	push	{r7}
 80066ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <vPortSetupTimerInterrupt+0x34>)
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066c2:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <vPortSetupTimerInterrupt+0x38>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066c8:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <vPortSetupTimerInterrupt+0x3c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a0a      	ldr	r2, [pc, #40]	; (80066f8 <vPortSetupTimerInterrupt+0x40>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	099b      	lsrs	r3, r3, #6
 80066d4:	4a09      	ldr	r2, [pc, #36]	; (80066fc <vPortSetupTimerInterrupt+0x44>)
 80066d6:	3b01      	subs	r3, #1
 80066d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066da:	4b04      	ldr	r3, [pc, #16]	; (80066ec <vPortSetupTimerInterrupt+0x34>)
 80066dc:	2207      	movs	r2, #7
 80066de:	601a      	str	r2, [r3, #0]
}
 80066e0:	bf00      	nop
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	e000e010 	.word	0xe000e010
 80066f0:	e000e018 	.word	0xe000e018
 80066f4:	20000004 	.word	0x20000004
 80066f8:	10624dd3 	.word	0x10624dd3
 80066fc:	e000e014 	.word	0xe000e014

08006700 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006700:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006710 <vPortEnableVFP+0x10>
 8006704:	6801      	ldr	r1, [r0, #0]
 8006706:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800670a:	6001      	str	r1, [r0, #0]
 800670c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800670e:	bf00      	nop
 8006710:	e000ed88 	.word	0xe000ed88

08006714 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800671a:	f3ef 8305 	mrs	r3, IPSR
 800671e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b0f      	cmp	r3, #15
 8006724:	d913      	bls.n	800674e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006726:	4a16      	ldr	r2, [pc, #88]	; (8006780 <vPortValidateInterruptPriority+0x6c>)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006730:	4b14      	ldr	r3, [pc, #80]	; (8006784 <vPortValidateInterruptPriority+0x70>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	7afa      	ldrb	r2, [r7, #11]
 8006736:	429a      	cmp	r2, r3
 8006738:	d209      	bcs.n	800674e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	607b      	str	r3, [r7, #4]
 800674c:	e7fe      	b.n	800674c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800674e:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <vPortValidateInterruptPriority+0x74>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006756:	4b0d      	ldr	r3, [pc, #52]	; (800678c <vPortValidateInterruptPriority+0x78>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d909      	bls.n	8006772 <vPortValidateInterruptPriority+0x5e>
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	603b      	str	r3, [r7, #0]
 8006770:	e7fe      	b.n	8006770 <vPortValidateInterruptPriority+0x5c>
	}
 8006772:	bf00      	nop
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	e000e3f0 	.word	0xe000e3f0
 8006784:	20000d18 	.word	0x20000d18
 8006788:	e000ed0c 	.word	0xe000ed0c
 800678c:	20000d1c 	.word	0x20000d1c

08006790 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	; 0x28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006798:	2300      	movs	r3, #0
 800679a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800679c:	f7fe fdc0 	bl	8005320 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067a0:	4b57      	ldr	r3, [pc, #348]	; (8006900 <pvPortMalloc+0x170>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067a8:	f000 f90c 	bl	80069c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067ac:	4b55      	ldr	r3, [pc, #340]	; (8006904 <pvPortMalloc+0x174>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4013      	ands	r3, r2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f040 808c 	bne.w	80068d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01c      	beq.n	80067fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80067c0:	2208      	movs	r2, #8
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4413      	add	r3, r2
 80067c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d013      	beq.n	80067fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f023 0307 	bic.w	r3, r3, #7
 80067d8:	3308      	adds	r3, #8
 80067da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <pvPortMalloc+0x6a>
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	e7fe      	b.n	80067f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d068      	beq.n	80068d2 <pvPortMalloc+0x142>
 8006800:	4b41      	ldr	r3, [pc, #260]	; (8006908 <pvPortMalloc+0x178>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	429a      	cmp	r2, r3
 8006808:	d863      	bhi.n	80068d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800680a:	4b40      	ldr	r3, [pc, #256]	; (800690c <pvPortMalloc+0x17c>)
 800680c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800680e:	4b3f      	ldr	r3, [pc, #252]	; (800690c <pvPortMalloc+0x17c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006814:	e004      	b.n	8006820 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	429a      	cmp	r2, r3
 8006828:	d903      	bls.n	8006832 <pvPortMalloc+0xa2>
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f1      	bne.n	8006816 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006832:	4b33      	ldr	r3, [pc, #204]	; (8006900 <pvPortMalloc+0x170>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006838:	429a      	cmp	r2, r3
 800683a:	d04a      	beq.n	80068d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2208      	movs	r2, #8
 8006842:	4413      	add	r3, r2
 8006844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	1ad2      	subs	r2, r2, r3
 8006856:	2308      	movs	r3, #8
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	429a      	cmp	r2, r3
 800685c:	d91e      	bls.n	800689c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800685e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4413      	add	r3, r2
 8006864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	2b00      	cmp	r3, #0
 800686e:	d009      	beq.n	8006884 <pvPortMalloc+0xf4>
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	613b      	str	r3, [r7, #16]
 8006882:	e7fe      	b.n	8006882 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	1ad2      	subs	r2, r2, r3
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006896:	69b8      	ldr	r0, [r7, #24]
 8006898:	f000 f8f6 	bl	8006a88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800689c:	4b1a      	ldr	r3, [pc, #104]	; (8006908 <pvPortMalloc+0x178>)
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	4a18      	ldr	r2, [pc, #96]	; (8006908 <pvPortMalloc+0x178>)
 80068a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068aa:	4b17      	ldr	r3, [pc, #92]	; (8006908 <pvPortMalloc+0x178>)
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	4b18      	ldr	r3, [pc, #96]	; (8006910 <pvPortMalloc+0x180>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d203      	bcs.n	80068be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068b6:	4b14      	ldr	r3, [pc, #80]	; (8006908 <pvPortMalloc+0x178>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a15      	ldr	r2, [pc, #84]	; (8006910 <pvPortMalloc+0x180>)
 80068bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	4b10      	ldr	r3, [pc, #64]	; (8006904 <pvPortMalloc+0x174>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068d2:	f7fe fd33 	bl	800533c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d009      	beq.n	80068f4 <pvPortMalloc+0x164>
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	e7fe      	b.n	80068f2 <pvPortMalloc+0x162>
	return pvReturn;
 80068f4:	69fb      	ldr	r3, [r7, #28]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3728      	adds	r7, #40	; 0x28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20001928 	.word	0x20001928
 8006904:	20001934 	.word	0x20001934
 8006908:	2000192c 	.word	0x2000192c
 800690c:	20001920 	.word	0x20001920
 8006910:	20001930 	.word	0x20001930

08006914 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d046      	beq.n	80069b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006926:	2308      	movs	r3, #8
 8006928:	425b      	negs	r3, r3
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4413      	add	r3, r2
 800692e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	4b20      	ldr	r3, [pc, #128]	; (80069bc <vPortFree+0xa8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4013      	ands	r3, r2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <vPortFree+0x42>
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	e7fe      	b.n	8006954 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d009      	beq.n	8006972 <vPortFree+0x5e>
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	60bb      	str	r3, [r7, #8]
 8006970:	e7fe      	b.n	8006970 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	4b11      	ldr	r3, [pc, #68]	; (80069bc <vPortFree+0xa8>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4013      	ands	r3, r2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d019      	beq.n	80069b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d115      	bne.n	80069b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	4b0b      	ldr	r3, [pc, #44]	; (80069bc <vPortFree+0xa8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	43db      	mvns	r3, r3
 8006992:	401a      	ands	r2, r3
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006998:	f7fe fcc2 	bl	8005320 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <vPortFree+0xac>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4413      	add	r3, r2
 80069a6:	4a06      	ldr	r2, [pc, #24]	; (80069c0 <vPortFree+0xac>)
 80069a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069aa:	6938      	ldr	r0, [r7, #16]
 80069ac:	f000 f86c 	bl	8006a88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80069b0:	f7fe fcc4 	bl	800533c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069b4:	bf00      	nop
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20001934 	.word	0x20001934
 80069c0:	2000192c 	.word	0x2000192c

080069c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80069ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069d0:	4b27      	ldr	r3, [pc, #156]	; (8006a70 <prvHeapInit+0xac>)
 80069d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00c      	beq.n	80069f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3307      	adds	r3, #7
 80069e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0307 	bic.w	r3, r3, #7
 80069ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	4a1f      	ldr	r2, [pc, #124]	; (8006a70 <prvHeapInit+0xac>)
 80069f4:	4413      	add	r3, r2
 80069f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069fc:	4a1d      	ldr	r2, [pc, #116]	; (8006a74 <prvHeapInit+0xb0>)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a02:	4b1c      	ldr	r3, [pc, #112]	; (8006a74 <prvHeapInit+0xb0>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a10:	2208      	movs	r2, #8
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	1a9b      	subs	r3, r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0307 	bic.w	r3, r3, #7
 8006a1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4a15      	ldr	r2, [pc, #84]	; (8006a78 <prvHeapInit+0xb4>)
 8006a24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a26:	4b14      	ldr	r3, [pc, #80]	; (8006a78 <prvHeapInit+0xb4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a2e:	4b12      	ldr	r3, [pc, #72]	; (8006a78 <prvHeapInit+0xb4>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	1ad2      	subs	r2, r2, r3
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a44:	4b0c      	ldr	r3, [pc, #48]	; (8006a78 <prvHeapInit+0xb4>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	4a0a      	ldr	r2, [pc, #40]	; (8006a7c <prvHeapInit+0xb8>)
 8006a52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	4a09      	ldr	r2, [pc, #36]	; (8006a80 <prvHeapInit+0xbc>)
 8006a5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <prvHeapInit+0xc0>)
 8006a5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a62:	601a      	str	r2, [r3, #0]
}
 8006a64:	bf00      	nop
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	20000d20 	.word	0x20000d20
 8006a74:	20001920 	.word	0x20001920
 8006a78:	20001928 	.word	0x20001928
 8006a7c:	20001930 	.word	0x20001930
 8006a80:	2000192c 	.word	0x2000192c
 8006a84:	20001934 	.word	0x20001934

08006a88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a90:	4b28      	ldr	r3, [pc, #160]	; (8006b34 <prvInsertBlockIntoFreeList+0xac>)
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	e002      	b.n	8006a9c <prvInsertBlockIntoFreeList+0x14>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d8f7      	bhi.n	8006a96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d108      	bne.n	8006aca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	441a      	add	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	441a      	add	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d118      	bne.n	8006b10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	4b15      	ldr	r3, [pc, #84]	; (8006b38 <prvInsertBlockIntoFreeList+0xb0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d00d      	beq.n	8006b06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	441a      	add	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	e008      	b.n	8006b18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b06:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <prvInsertBlockIntoFreeList+0xb0>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e003      	b.n	8006b18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d002      	beq.n	8006b26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b26:	bf00      	nop
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	20001920 	.word	0x20001920
 8006b38:	20001928 	.word	0x20001928

08006b3c <__libc_init_array>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	4e0d      	ldr	r6, [pc, #52]	; (8006b74 <__libc_init_array+0x38>)
 8006b40:	4c0d      	ldr	r4, [pc, #52]	; (8006b78 <__libc_init_array+0x3c>)
 8006b42:	1ba4      	subs	r4, r4, r6
 8006b44:	10a4      	asrs	r4, r4, #2
 8006b46:	2500      	movs	r5, #0
 8006b48:	42a5      	cmp	r5, r4
 8006b4a:	d109      	bne.n	8006b60 <__libc_init_array+0x24>
 8006b4c:	4e0b      	ldr	r6, [pc, #44]	; (8006b7c <__libc_init_array+0x40>)
 8006b4e:	4c0c      	ldr	r4, [pc, #48]	; (8006b80 <__libc_init_array+0x44>)
 8006b50:	f000 f82c 	bl	8006bac <_init>
 8006b54:	1ba4      	subs	r4, r4, r6
 8006b56:	10a4      	asrs	r4, r4, #2
 8006b58:	2500      	movs	r5, #0
 8006b5a:	42a5      	cmp	r5, r4
 8006b5c:	d105      	bne.n	8006b6a <__libc_init_array+0x2e>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b64:	4798      	blx	r3
 8006b66:	3501      	adds	r5, #1
 8006b68:	e7ee      	b.n	8006b48 <__libc_init_array+0xc>
 8006b6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b6e:	4798      	blx	r3
 8006b70:	3501      	adds	r5, #1
 8006b72:	e7f2      	b.n	8006b5a <__libc_init_array+0x1e>
 8006b74:	08006c68 	.word	0x08006c68
 8006b78:	08006c68 	.word	0x08006c68
 8006b7c:	08006c68 	.word	0x08006c68
 8006b80:	08006c6c 	.word	0x08006c6c

08006b84 <memcpy>:
 8006b84:	b510      	push	{r4, lr}
 8006b86:	1e43      	subs	r3, r0, #1
 8006b88:	440a      	add	r2, r1
 8006b8a:	4291      	cmp	r1, r2
 8006b8c:	d100      	bne.n	8006b90 <memcpy+0xc>
 8006b8e:	bd10      	pop	{r4, pc}
 8006b90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b98:	e7f7      	b.n	8006b8a <memcpy+0x6>

08006b9a <memset>:
 8006b9a:	4402      	add	r2, r0
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d100      	bne.n	8006ba4 <memset+0xa>
 8006ba2:	4770      	bx	lr
 8006ba4:	f803 1b01 	strb.w	r1, [r3], #1
 8006ba8:	e7f9      	b.n	8006b9e <memset+0x4>
	...

08006bac <_init>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	bf00      	nop
 8006bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	469e      	mov	lr, r3
 8006bb6:	4770      	bx	lr

08006bb8 <_fini>:
 8006bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bba:	bf00      	nop
 8006bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bbe:	bc08      	pop	{r3}
 8006bc0:	469e      	mov	lr, r3
 8006bc2:	4770      	bx	lr
