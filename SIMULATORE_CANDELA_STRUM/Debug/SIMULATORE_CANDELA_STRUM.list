
SIMULATORE_CANDELA_STRUM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a88  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c88  08005c88  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005c88  08005c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c90  08005c90  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000084  08005d1c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08005d1c  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001223d  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022b9  00000000  00000000  000322f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001190  00000000  00000000  000345b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001078  00000000  00000000  00035740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025b44  00000000  00000000  000367b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfc5  00000000  00000000  0005c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f87e5  00000000  00000000  0006a2c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00162aa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab0  00000000  00000000  00162b24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000084 	.word	0x20000084
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005c48 	.word	0x08005c48

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000088 	.word	0x20000088
 8000214:	08005c48 	.word	0x08005c48

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fd6d 	bl	8000ffa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f83e 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 fa54 	bl	80009d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000528:	f000 fa28 	bl	800097c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800052c:	f000 f90e 	bl	800074c <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 8000530:	f000 f9a0 	bl	8000874 <MX_TIM4_Init>
  MX_DAC1_Init();
 8000534:	f000 f89c 	bl	8000670 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000538:	f000 f94e 	bl	80007d8 <MX_TIM2_Init>
  MX_TIM6_Init();
 800053c:	f000 f9e8 	bl	8000910 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000540:	4812      	ldr	r0, [pc, #72]	; (800058c <main+0x74>)
 8000542:	f003 f9d7 	bl	80038f4 <HAL_TIM_Base_Start_IT>
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK)
 8000546:	4812      	ldr	r0, [pc, #72]	; (8000590 <main+0x78>)
 8000548:	f003 f97e 	bl	8003848 <HAL_TIM_Base_Start>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <main+0x3e>
    {
      /* Counter enable error */
      Error_Handler();
 8000552:	f000 fb91 	bl	8000c78 <Error_Handler>
    }
    if (HAL_TIM_Base_Start(&htim6) != HAL_OK)
 8000556:	480f      	ldr	r0, [pc, #60]	; (8000594 <main+0x7c>)
 8000558:	f003 f976 	bl	8003848 <HAL_TIM_Base_Start>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <main+0x4e>
    {
      /* Counter enable error */
      Error_Handler();
 8000562:	f000 fb89 	bl	8000c78 <Error_Handler>
    }
    if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 8000566:	2100      	movs	r1, #0
 8000568:	480b      	ldr	r0, [pc, #44]	; (8000598 <main+0x80>)
 800056a:	f000 ff0a 	bl	8001382 <HAL_DAC_Start>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <main+0x60>
    {
        /* DAC conversion start error */
        Error_Handler();
 8000574:	f000 fb80 	bl	8000c78 <Error_Handler>
      }
    ubSelectedWavesForm = DAC_WAVE_SINE;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <main+0x84>)
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
    DAC_ChangeWave(ubSelectedWavesForm);
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <main+0x84>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fadd 	bl	8000b44 <DAC_ChangeWave>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058a:	e7fe      	b.n	800058a <main+0x72>
 800058c:	200000d4 	.word	0x200000d4
 8000590:	2000026c 	.word	0x2000026c
 8000594:	20000220 	.word	0x20000220
 8000598:	20000120 	.word	0x20000120
 800059c:	200000a0 	.word	0x200000a0

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0a8      	sub	sp, #160	; 0xa0
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005aa:	2238      	movs	r2, #56	; 0x38
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 fb42 	bl	8005c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2254      	movs	r2, #84	; 0x54
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fb34 	bl	8005c38 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f002 f8bd 	bl	8002750 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d6:	2302      	movs	r3, #2
 80005d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2340      	movs	r3, #64	; 0x40
 80005e2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ea:	2302      	movs	r3, #2
 80005ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005f6:	2355      	movs	r3, #85	; 0x55
 80005f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000612:	4618      	mov	r0, r3
 8000614:	f002 f940 	bl	8002898 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800061e:	f000 fb2b 	bl	8000c78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000636:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800063a:	2108      	movs	r1, #8
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fc43 	bl	8002ec8 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000648:	f000 fb16 	bl	8000c78 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800064c:	2320      	movs	r3, #32
 800064e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fe52 	bl	8003300 <HAL_RCCEx_PeriphCLKConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000662:	f000 fb09 	bl	8000c78 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	37a0      	adds	r7, #160	; 0xa0
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b08e      	sub	sp, #56	; 0x38
 8000674:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000676:	463b      	mov	r3, r7
 8000678:	2230      	movs	r2, #48	; 0x30
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f005 fadb 	bl	8005c38 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000682:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <MX_DAC1_Init+0xd0>)
 8000684:	4a2f      	ldr	r2, [pc, #188]	; (8000744 <MX_DAC1_Init+0xd4>)
 8000686:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000688:	482d      	ldr	r0, [pc, #180]	; (8000740 <MX_DAC1_Init+0xd0>)
 800068a:	f000 fe58 	bl	800133e <HAL_DAC_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000694:	f000 faf0 	bl	8000c78 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000698:	2302      	movs	r3, #2
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80006a8:	2312      	movs	r3, #18
 80006aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_T6_TRGO;
 80006ac:	231e      	movs	r3, #30
 80006ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	4619      	mov	r1, r3
 80006c2:	481f      	ldr	r0, [pc, #124]	; (8000740 <MX_DAC1_Init+0xd0>)
 80006c4:	f001 f804 	bl	80016d0 <HAL_DAC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80006ce:	f000 fad3 	bl	8000c78 <Error_Handler>
  }
  /** Configure Sawtooth wave generation on DAC OUT1 
  */
  if (HAL_DACEx_SawtoothWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_SAWTOOTH_POLARITY_DECREMENT, 0, 0) != HAL_OK)
 80006d2:	2300      	movs	r3, #0
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2300      	movs	r3, #0
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	4818      	ldr	r0, [pc, #96]	; (8000740 <MX_DAC1_Init+0xd0>)
 80006de:	f001 f9d9 	bl	8001a94 <HAL_DACEx_SawtoothWaveGenerate>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 80006e8:	f000 fac6 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  if (HAL_DACEx_SawtoothWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_SAWTOOTH_POLARITY_INCREMENT, 0, 0x10000/SAWTOOTH_NB_STEPS) != HAL_OK)
 80006ec:	f240 4344 	movw	r3, #1092	; 0x444
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2300      	movs	r3, #0
 80006f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006f8:	2100      	movs	r1, #0
 80006fa:	4811      	ldr	r0, [pc, #68]	; (8000740 <MX_DAC1_Init+0xd0>)
 80006fc:	f001 f9ca 	bl	8001a94 <HAL_DACEx_SawtoothWaveGenerate>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_DAC1_Init+0x9a>
    {
      Error_Handler();
 8000706:	f000 fab7 	bl	8000c78 <Error_Handler>
    }
  if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <MX_DAC1_Init+0xd0>)
 8000712:	f001 fa2c 	bl	8001b6e <HAL_DACEx_SelfCalibrate>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_DAC1_Init+0xb0>
    {
      Error_Handler();
 800071c:	f000 faac 	bl	8000c78 <Error_Handler>
    }
  sDacConfig = sConfig;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_DAC1_Init+0xd8>)
 8000722:	461d      	mov	r5, r3
 8000724:	463c      	mov	r4, r7
 8000726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800072a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800072c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800072e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000732:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  /* USER CODE END DAC1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	3730      	adds	r7, #48	; 0x30
 800073a:	46bd      	mov	sp, r7
 800073c:	bdb0      	pop	{r4, r5, r7, pc}
 800073e:	bf00      	nop
 8000740:	20000120 	.word	0x20000120
 8000744:	50000800 	.word	0x50000800
 8000748:	200000a4 	.word	0x200000a4

0800074c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_LPUART1_UART_Init+0x84>)
 8000752:	4a20      	ldr	r2, [pc, #128]	; (80007d4 <MX_LPUART1_UART_Init+0x88>)
 8000754:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_LPUART1_UART_Init+0x84>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_LPUART1_UART_Init+0x84>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_LPUART1_UART_Init+0x84>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_LPUART1_UART_Init+0x84>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_LPUART1_UART_Init+0x84>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_LPUART1_UART_Init+0x84>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_LPUART1_UART_Init+0x84>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_LPUART1_UART_Init+0x84>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000788:	4811      	ldr	r0, [pc, #68]	; (80007d0 <MX_LPUART1_UART_Init+0x84>)
 800078a:	f003 fda1 	bl	80042d0 <HAL_UART_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000794:	f000 fa70 	bl	8000c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_LPUART1_UART_Init+0x84>)
 800079c:	f005 f943 	bl	8005a26 <HAL_UARTEx_SetTxFifoThreshold>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 80007a6:	f000 fa67 	bl	8000c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007aa:	2100      	movs	r1, #0
 80007ac:	4808      	ldr	r0, [pc, #32]	; (80007d0 <MX_LPUART1_UART_Init+0x84>)
 80007ae:	f005 f978 	bl	8005aa2 <HAL_UARTEx_SetRxFifoThreshold>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 80007b8:	f000 fa5e 	bl	8000c78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_LPUART1_UART_Init+0x84>)
 80007be:	f005 f8f9 	bl	80059b4 <HAL_UARTEx_DisableFifoMode>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 80007c8:	f000 fa56 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000194 	.word	0x20000194
 80007d4:	40008000 	.word	0x40008000

080007d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <MX_TIM2_Init+0x98>)
 80007f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_TIM2_Init+0x98>)
 8000800:	22a9      	movs	r2, #169	; 0xa9
 8000802:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_TIM2_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_TIM2_Init+0x98>)
 800080c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000810:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_TIM2_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_TIM2_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081e:	4814      	ldr	r0, [pc, #80]	; (8000870 <MX_TIM2_Init+0x98>)
 8000820:	f002 ffba 	bl	8003798 <HAL_TIM_Base_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800082a:	f000 fa25 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	4619      	mov	r1, r3
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_TIM2_Init+0x98>)
 800083c:	f003 fa10 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000846:	f000 fa17 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800084a:	2320      	movs	r3, #32
 800084c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <MX_TIM2_Init+0x98>)
 8000858:	f003 fc5e 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000862:	f000 fa09 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3720      	adds	r7, #32
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000026c 	.word	0x2000026c

08000874 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_TIM4_Init+0x94>)
 8000894:	4a1d      	ldr	r2, [pc, #116]	; (800090c <MX_TIM4_Init+0x98>)
 8000896:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_TIM4_Init+0x94>)
 800089a:	22a9      	movs	r2, #169	; 0xa9
 800089c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_TIM4_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_TIM4_Init+0x94>)
 80008a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_TIM4_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_TIM4_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <MX_TIM4_Init+0x94>)
 80008ba:	f002 ff6d 	bl	8003798 <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80008c4:	f000 f9d8 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_TIM4_Init+0x94>)
 80008d6:	f003 f9c3 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 f9ca 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_TIM4_Init+0x94>)
 80008f2:	f003 fc11 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80008fc:	f000 f9bc 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200000d4 	.word	0x200000d4
 800090c:	40000800 	.word	0x40000800

08000910 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_TIM6_Init+0x64>)
 8000922:	4a15      	ldr	r2, [pc, #84]	; (8000978 <MX_TIM6_Init+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_TIM6_Init+0x64>)
 8000928:	22a9      	movs	r2, #169	; 0xa9
 800092a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_TIM6_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_TIM6_Init+0x64>)
 8000934:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000938:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_TIM6_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_TIM6_Init+0x64>)
 8000942:	f002 ff29 	bl	8003798 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800094c:	f000 f994 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000950:	2320      	movs	r3, #32
 8000952:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_TIM6_Init+0x64>)
 800095e:	f003 fbdb 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000968:	f000 f986 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000220 	.word	0x20000220
 8000978:	40001000 	.word	0x40001000

0800097c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_DMA_Init+0x50>)
 8000984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000986:	4a11      	ldr	r2, [pc, #68]	; (80009cc <MX_DMA_Init+0x50>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6493      	str	r3, [r2, #72]	; 0x48
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_DMA_Init+0x50>)
 8000990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_DMA_Init+0x50>)
 800099c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <MX_DMA_Init+0x50>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6493      	str	r3, [r2, #72]	; 0x48
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_DMA_Init+0x50>)
 80009a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	200b      	movs	r0, #11
 80009b8:	f000 fc8d 	bl	80012d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009bc:	200b      	movs	r0, #11
 80009be:	f000 fca4 	bl	800130a <HAL_NVIC_EnableIRQ>

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b39      	ldr	r3, [pc, #228]	; (8000acc <MX_GPIO_Init+0xfc>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a38      	ldr	r2, [pc, #224]	; (8000acc <MX_GPIO_Init+0xfc>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b36      	ldr	r3, [pc, #216]	; (8000acc <MX_GPIO_Init+0xfc>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fe:	4b33      	ldr	r3, [pc, #204]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a32      	ldr	r2, [pc, #200]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a04:	f043 0320 	orr.w	r3, r3, #32
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0320 	and.w	r3, r3, #32
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a2c      	ldr	r2, [pc, #176]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a26      	ldr	r2, [pc, #152]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2120      	movs	r1, #32
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f001 fe29 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(fonica_GPIO_Port, fonica_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a58:	481d      	ldr	r0, [pc, #116]	; (8000ad0 <MX_GPIO_Init+0x100>)
 8000a5a:	f001 fe23 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_GPIO_Init+0x104>)
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <MX_GPIO_Init+0x100>)
 8000a74:	f001 fc94 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f001 fc85 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : fonica_Pin */
  GPIO_InitStruct.Pin = fonica_Pin;
 8000a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(fonica_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <MX_GPIO_Init+0x100>)
 8000ab0:	f001 fc76 	bl	80023a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2028      	movs	r0, #40	; 0x28
 8000aba:	f000 fc0c 	bl	80012d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000abe:	2028      	movs	r0, #40	; 0x28
 8000ac0:	f000 fc23 	bl	800130a <HAL_NVIC_EnableIRQ>

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48000800 	.word	0x48000800
 8000ad4:	10110000 	.word	0x10110000

08000ad8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM4) //check if the interrupt comes from TIM2
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d121      	bne.n	8000b2e <HAL_TIM_PeriodElapsedCallback+0x56>
        {
    	if (i<68){i++;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b43      	cmp	r3, #67	; 0x43
 8000af0:	d810      	bhi.n	8000b14 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000afc:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_TogglePin(fonica_GPIO_Port,fonica_Pin);
 8000afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b02:	480f      	ldr	r0, [pc, #60]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b04:	f001 fde6 	bl	80026d4 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);}
 8000b08:	2120      	movs	r1, #32
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0e:	f001 fde1 	bl	80026d4 <HAL_GPIO_TogglePin>
 8000b12:	e005      	b.n	8000b20 <HAL_TIM_PeriodElapsedCallback+0x48>
    	else i++;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b1e:	701a      	strb	r2, [r3, #0]
    	if (i>=74)i=0;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b49      	cmp	r3, #73	; 0x49
 8000b26:	d902      	bls.n	8000b2e <HAL_TIM_PeriodElapsedCallback+0x56>
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]


        }}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40000800 	.word	0x40000800
 8000b3c:	200000a1 	.word	0x200000a1
 8000b40:	48000800 	.word	0x48000800

08000b44 <DAC_ChangeWave>:
static void DAC_ChangeWave(t_wavetype wave)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;

  /* Suspend Time Base triggers */
  if (HAL_TIM_Base_Stop(&htim2) != HAL_OK)
 8000b4e:	4845      	ldr	r0, [pc, #276]	; (8000c64 <DAC_ChangeWave+0x120>)
 8000b50:	f002 fea8 	bl	80038a4 <HAL_TIM_Base_Stop>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <DAC_ChangeWave+0x1a>
  {
    /* Counter enable error */
    Error_Handler();
 8000b5a:	f000 f88d 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_Base_Stop(&htim6) != HAL_OK)
 8000b5e:	4842      	ldr	r0, [pc, #264]	; (8000c68 <DAC_ChangeWave+0x124>)
 8000b60:	f002 fea0 	bl	80038a4 <HAL_TIM_Base_Stop>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <DAC_ChangeWave+0x2a>
  {
    /* Counter enable error */
    Error_Handler();
 8000b6a:	f000 f885 	bl	8000c78 <Error_Handler>
  }

  switch(wave)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d002      	beq.n	8000b7a <DAC_ChangeWave+0x36>
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d00a      	beq.n	8000b8e <DAC_ChangeWave+0x4a>
 8000b78:	e013      	b.n	8000ba2 <DAC_ChangeWave+0x5e>
  {
    case DAC_WAVE_SAWTOOTH:
      if (HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	483b      	ldr	r0, [pc, #236]	; (8000c6c <DAC_ChangeWave+0x128>)
 8000b7e:	f000 fd33 	bl	80015e8 <HAL_DAC_Stop_DMA>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00f      	beq.n	8000ba8 <DAC_ChangeWave+0x64>
      {
        /* DAC conversion start error */
        Error_Handler();
 8000b88:	f000 f876 	bl	8000c78 <Error_Handler>
      }
      break;
 8000b8c:	e00c      	b.n	8000ba8 <DAC_ChangeWave+0x64>
    case DAC_WAVE_SINE:
      if (HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4836      	ldr	r0, [pc, #216]	; (8000c6c <DAC_ChangeWave+0x128>)
 8000b92:	f000 fc49 	bl	8001428 <HAL_DAC_Stop>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d007      	beq.n	8000bac <DAC_ChangeWave+0x68>
      {
        /* DAC conversion start error */
        Error_Handler();
 8000b9c:	f000 f86c 	bl	8000c78 <Error_Handler>
      }
      break;
 8000ba0:	e004      	b.n	8000bac <DAC_ChangeWave+0x68>
    default:
      Error_Handler();
 8000ba2:	f000 f869 	bl	8000c78 <Error_Handler>
      break;
 8000ba6:	e002      	b.n	8000bae <DAC_ChangeWave+0x6a>
      break;
 8000ba8:	bf00      	nop
 8000baa:	e000      	b.n	8000bae <DAC_ChangeWave+0x6a>
      break;
 8000bac:	bf00      	nop
  }

  /* Re-configure DAC */
  tmp = sDacConfig.DAC_Trigger;
 8000bae:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <DAC_ChangeWave+0x12c>)
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	60fb      	str	r3, [r7, #12]
  sDacConfig.DAC_Trigger = sDacConfig.DAC_Trigger2;
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <DAC_ChangeWave+0x12c>)
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	4a2d      	ldr	r2, [pc, #180]	; (8000c70 <DAC_ChangeWave+0x12c>)
 8000bba:	60d3      	str	r3, [r2, #12]
  sDacConfig.DAC_Trigger2 = tmp;
 8000bbc:	4a2c      	ldr	r2, [pc, #176]	; (8000c70 <DAC_ChangeWave+0x12c>)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6113      	str	r3, [r2, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sDacConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	492a      	ldr	r1, [pc, #168]	; (8000c70 <DAC_ChangeWave+0x12c>)
 8000bc6:	4829      	ldr	r0, [pc, #164]	; (8000c6c <DAC_ChangeWave+0x128>)
 8000bc8:	f000 fd82 	bl	80016d0 <HAL_DAC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <DAC_ChangeWave+0x92>
  {
    Error_Handler();
 8000bd2:	f000 f851 	bl	8000c78 <Error_Handler>
  }

  /* Generate new wave */
  switch(wave)
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <DAC_ChangeWave+0x9e>
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d019      	beq.n	8000c14 <DAC_ChangeWave+0xd0>
 8000be0:	e026      	b.n	8000c30 <DAC_ChangeWave+0xec>
  {
    case DAC_WAVE_SAWTOOTH:
      if (HAL_DACEx_SawtoothWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_SAWTOOTH_POLARITY_INCREMENT, 0, 0x10000/SAWTOOTH_NB_STEPS) != HAL_OK)
 8000be2:	f240 4344 	movw	r3, #1092	; 0x444
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2300      	movs	r3, #0
 8000bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bee:	2100      	movs	r1, #0
 8000bf0:	481e      	ldr	r0, [pc, #120]	; (8000c6c <DAC_ChangeWave+0x128>)
 8000bf2:	f000 ff4f 	bl	8001a94 <HAL_DACEx_SawtoothWaveGenerate>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <DAC_ChangeWave+0xbc>
      {
        Error_Handler();
 8000bfc:	f000 f83c 	bl	8000c78 <Error_Handler>
      }
      if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 8000c00:	2100      	movs	r1, #0
 8000c02:	481a      	ldr	r0, [pc, #104]	; (8000c6c <DAC_ChangeWave+0x128>)
 8000c04:	f000 fbbd 	bl	8001382 <HAL_DAC_Start>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d013      	beq.n	8000c36 <DAC_ChangeWave+0xf2>
      {
        /* DAC conversion start error */
        Error_Handler();
 8000c0e:	f000 f833 	bl	8000c78 <Error_Handler>
      }
      break;
 8000c12:	e010      	b.n	8000c36 <DAC_ChangeWave+0xf2>
    case DAC_WAVE_SINE:
      if (HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 8000c14:	2300      	movs	r3, #0
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	233c      	movs	r3, #60	; 0x3c
 8000c1a:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <DAC_ChangeWave+0x130>)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4813      	ldr	r0, [pc, #76]	; (8000c6c <DAC_ChangeWave+0x128>)
 8000c20:	f000 fc20 	bl	8001464 <HAL_DAC_Start_DMA>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d007      	beq.n	8000c3a <DAC_ChangeWave+0xf6>
                            60,
                            DAC_ALIGN_12B_R
                           ) != HAL_OK)
      {
        /* DAC conversion start error */
        Error_Handler();
 8000c2a:	f000 f825 	bl	8000c78 <Error_Handler>
      }
      break;
 8000c2e:	e004      	b.n	8000c3a <DAC_ChangeWave+0xf6>
    default:
      Error_Handler();
 8000c30:	f000 f822 	bl	8000c78 <Error_Handler>
      break;
 8000c34:	e002      	b.n	8000c3c <DAC_ChangeWave+0xf8>
      break;
 8000c36:	bf00      	nop
 8000c38:	e000      	b.n	8000c3c <DAC_ChangeWave+0xf8>
      break;
 8000c3a:	bf00      	nop
  }

  /* Resume Time Base triggers */
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK)
 8000c3c:	4809      	ldr	r0, [pc, #36]	; (8000c64 <DAC_ChangeWave+0x120>)
 8000c3e:	f002 fe03 	bl	8003848 <HAL_TIM_Base_Start>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <DAC_ChangeWave+0x108>
  {
    /* Counter enable error */
    Error_Handler();
 8000c48:	f000 f816 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_Base_Start(&htim6) != HAL_OK)
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <DAC_ChangeWave+0x124>)
 8000c4e:	f002 fdfb 	bl	8003848 <HAL_TIM_Base_Start>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <DAC_ChangeWave+0x118>
  {
    /* Counter enable error */
    Error_Handler();
 8000c58:	f000 f80e 	bl	8000c78 <Error_Handler>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2000026c 	.word	0x2000026c
 8000c68:	20000220 	.word	0x20000220
 8000c6c:	20000120 	.word	0x20000120
 8000c70:	200000a4 	.word	0x200000a4
 8000c74:	20000000 	.word	0x20000000

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c96:	6093      	str	r3, [r2, #8]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40007000 	.word	0x40007000

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_MspInit+0x44>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <HAL_MspInit+0x44>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_MspInit+0x44>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x44>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x44>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x44>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000cde:	f7ff ffd3 	bl	8000c88 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <HAL_DAC_MspInit+0xcc>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d14f      	bne.n	8000db2 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <HAL_DAC_MspInit+0xd0>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a2a      	ldr	r2, [pc, #168]	; (8000dc0 <HAL_DAC_MspInit+0xd0>)
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <HAL_DAC_MspInit+0xd0>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <HAL_DAC_MspInit+0xd0>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	4a24      	ldr	r2, [pc, #144]	; (8000dc0 <HAL_DAC_MspInit+0xd0>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <HAL_DAC_MspInit+0xd0>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d42:	2310      	movs	r3, #16
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d46:	2303      	movs	r3, #3
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f001 fb22 	bl	80023a0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_DAC_MspInit+0xd4>)
 8000d5e:	4a1a      	ldr	r2, [pc, #104]	; (8000dc8 <HAL_DAC_MspInit+0xd8>)
 8000d60:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_DAC_MspInit+0xd4>)
 8000d64:	2206      	movs	r2, #6
 8000d66:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_DAC_MspInit+0xd4>)
 8000d6a:	2210      	movs	r2, #16
 8000d6c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_DAC_MspInit+0xd4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_DAC_MspInit+0xd4>)
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_DAC_MspInit+0xd4>)
 8000d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_DAC_MspInit+0xd4>)
 8000d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_DAC_MspInit+0xd4>)
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_DAC_MspInit+0xd4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <HAL_DAC_MspInit+0xd4>)
 8000d98:	f001 f836 	bl	8001e08 <HAL_DMA_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000da2:	f7ff ff69 	bl	8000c78 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_DAC_MspInit+0xd4>)
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <HAL_DAC_MspInit+0xd4>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	50000800 	.word	0x50000800
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	20000134 	.word	0x20000134
 8000dc8:	40020008 	.word	0x40020008

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <HAL_UART_MspInit+0x7c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d128      	bne.n	8000e40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000df2:	4a16      	ldr	r2, [pc, #88]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e2e:	230c      	movs	r3, #12
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f001 fab0 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40008000 	.word	0x40008000
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e60:	d10c      	bne.n	8000e7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e62:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	4a1d      	ldr	r2, [pc, #116]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e7a:	e02a      	b.n	8000ed2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <HAL_TIM_Base_MspInit+0x90>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d114      	bne.n	8000eb0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8a:	4a14      	ldr	r2, [pc, #80]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	6593      	str	r3, [r2, #88]	; 0x58
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	201e      	movs	r0, #30
 8000ea4:	f000 fa17 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ea8:	201e      	movs	r0, #30
 8000eaa:	f000 fa2e 	bl	800130a <HAL_NVIC_EnableIRQ>
}
 8000eae:	e010      	b.n	8000ed2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_TIM_Base_MspInit+0x94>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40000800 	.word	0x40000800
 8000ee4:	40001000 	.word	0x40001000

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <MemManage_Handler+0x4>

08000f02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 f8b0 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <DMA1_Channel1_IRQHandler+0x10>)
 8000f4a:	f001 f8d9 	bl	8002100 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000134 	.word	0x20000134

08000f58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <TIM4_IRQHandler+0x10>)
 8000f5e:	f002 fcff 	bl	8003960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000d4 	.word	0x200000d4

08000f6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f74:	f001 fbc8 	bl	8002708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <SystemInit+0x28>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <SystemInit+0x28>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SystemInit+0x28>)
 8000f92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f96:	609a      	str	r2, [r3, #8]
#endif
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000faa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fae:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc4:	4c0b      	ldr	r4, [pc, #44]	; (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fd2:	f7ff ffd3 	bl	8000f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f004 fe0b 	bl	8005bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fda:	f7ff fa9d 	bl	8000518 <main>

08000fde <LoopForever>:

LoopForever:
    b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
  ldr   r0, =_estack
 8000fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000fec:	08005c98 	.word	0x08005c98
  ldr r2, =_sbss
 8000ff0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000ff4:	200002bc 	.word	0x200002bc

08000ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_2_IRQHandler>

08000ffa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f95b 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f80e 	bl	800102c <HAL_InitTick>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e001      	b.n	8001020 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101c:	f7ff fe44 	bl	8000ca8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001020:	79fb      	ldrb	r3, [r7, #7]

}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <HAL_InitTick+0x68>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d022      	beq.n	8001086 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_InitTick+0x6c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_InitTick+0x68>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800104c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001050:	fbb2 f3f3 	udiv	r3, r2, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f966 	bl	8001326 <HAL_SYSTICK_Config>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10f      	bne.n	8001080 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	d809      	bhi.n	800107a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001066:	2200      	movs	r2, #0
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	f04f 30ff 	mov.w	r0, #4294967295
 800106e:	f000 f932 	bl	80012d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_InitTick+0x70>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e007      	b.n	800108a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e004      	b.n	800108a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e001      	b.n	800108a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000080 	.word	0x20000080
 8001098:	20000078 	.word	0x20000078
 800109c:	2000007c 	.word	0x2000007c

080010a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_IncTick+0x1c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_IncTick+0x20>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_IncTick+0x1c>)
 80010b0:	6013      	str	r3, [r2, #0]
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	200002b8 	.word	0x200002b8
 80010c0:	20000080 	.word	0x20000080

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200002b8 	.word	0x200002b8

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d004      	beq.n	8001100 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_Delay+0x40>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	4413      	add	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001100:	bf00      	nop
 8001102:	f7ff ffdf 	bl	80010c4 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	429a      	cmp	r2, r3
 8001110:	d8f7      	bhi.n	8001102 <HAL_Delay+0x26>
  {
  }
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000080 	.word	0x20000080

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff ff8e 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff29 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff40 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff90 	bl	8001214 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5f 	bl	80011c0 <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff33 	bl	8001184 <__NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffa4 	bl	800127c <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e014      	b.n	800137a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	791b      	ldrb	r3, [r3, #4]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d105      	bne.n	8001366 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff fcc5 	bl	8000cf0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2202      	movs	r2, #2
 800136a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	795b      	ldrb	r3, [r3, #5]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_DAC_Start+0x16>
 8001394:	2302      	movs	r3, #2
 8001396:	e043      	b.n	8001420 <HAL_DAC_Start+0x9e>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2202      	movs	r2, #2
 80013a2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6819      	ldr	r1, [r3, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2201      	movs	r2, #1
 80013b2:	409a      	lsls	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fe8d 	bl	80010dc <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10f      	bne.n	80013e8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d11d      	bne.n	8001412 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0201 	orr.w	r2, r2, #1
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	e014      	b.n	8001412 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	f003 0310 	and.w	r3, r3, #16
 80013f8:	2102      	movs	r1, #2
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	429a      	cmp	r2, r3
 8001400:	d107      	bne.n	8001412 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0202 	orr.w	r2, r2, #2
 8001410:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_DAC_Stop>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2201      	movs	r2, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43da      	mvns	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	400a      	ands	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800144e:	2001      	movs	r0, #1
 8001450:	f7ff fe44 	bl	80010dc <HAL_Delay>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	795b      	ldrb	r3, [r3, #5]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_DAC_Start_DMA+0x1e>
 800147e:	2302      	movs	r3, #2
 8001480:	e0a1      	b.n	80015c6 <HAL_DAC_Start_DMA+0x162>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2201      	movs	r2, #1
 8001486:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2202      	movs	r2, #2
 800148c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d12a      	bne.n	80014ea <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a4d      	ldr	r2, [pc, #308]	; (80015d0 <HAL_DAC_Start_DMA+0x16c>)
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4a4c      	ldr	r2, [pc, #304]	; (80015d4 <HAL_DAC_Start_DMA+0x170>)
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	4a4b      	ldr	r2, [pc, #300]	; (80015d8 <HAL_DAC_Start_DMA+0x174>)
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014ba:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d009      	beq.n	80014d6 <HAL_DAC_Start_DMA+0x72>
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d00c      	beq.n	80014e0 <HAL_DAC_Start_DMA+0x7c>
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d000      	beq.n	80014cc <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80014ca:	e039      	b.n	8001540 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3308      	adds	r3, #8
 80014d2:	613b      	str	r3, [r7, #16]
        break;
 80014d4:	e034      	b.n	8001540 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	330c      	adds	r3, #12
 80014dc:	613b      	str	r3, [r7, #16]
        break;
 80014de:	e02f      	b.n	8001540 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3310      	adds	r3, #16
 80014e6:	613b      	str	r3, [r7, #16]
        break;
 80014e8:	e02a      	b.n	8001540 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	4a3b      	ldr	r2, [pc, #236]	; (80015dc <HAL_DAC_Start_DMA+0x178>)
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	4a3a      	ldr	r2, [pc, #232]	; (80015e0 <HAL_DAC_Start_DMA+0x17c>)
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	4a39      	ldr	r2, [pc, #228]	; (80015e4 <HAL_DAC_Start_DMA+0x180>)
 8001500:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001510:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d009      	beq.n	800152c <HAL_DAC_Start_DMA+0xc8>
 8001518:	2b08      	cmp	r3, #8
 800151a:	d00c      	beq.n	8001536 <HAL_DAC_Start_DMA+0xd2>
 800151c:	2b00      	cmp	r3, #0
 800151e:	d000      	beq.n	8001522 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001520:	e00e      	b.n	8001540 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3314      	adds	r3, #20
 8001528:	613b      	str	r3, [r7, #16]
        break;
 800152a:	e009      	b.n	8001540 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3318      	adds	r3, #24
 8001532:	613b      	str	r3, [r7, #16]
        break;
 8001534:	e004      	b.n	8001540 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	331c      	adds	r3, #28
 800153c:	613b      	str	r3, [r7, #16]
        break;
 800153e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d111      	bne.n	800156a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001554:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6898      	ldr	r0, [r3, #8]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	f000 fcfa 	bl	8001f58 <HAL_DMA_Start_IT>
 8001564:	4603      	mov	r3, r0
 8001566:	75fb      	strb	r3, [r7, #23]
 8001568:	e010      	b.n	800158c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001578:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	68d8      	ldr	r0, [r3, #12]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	f000 fce8 	bl	8001f58 <HAL_DMA_Start_IT>
 8001588:	4603      	mov	r3, r0
 800158a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001592:	7dfb      	ldrb	r3, [r7, #23]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10f      	bne.n	80015b8 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6819      	ldr	r1, [r3, #0]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2201      	movs	r2, #1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fd93 	bl	80010dc <HAL_Delay>
 80015b6:	e005      	b.n	80015c4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	f043 0204 	orr.w	r2, r3, #4
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	08001a29 	.word	0x08001a29
 80015d4:	08001a4b 	.word	0x08001a4b
 80015d8:	08001a67 	.word	0x08001a67
 80015dc:	08001d9d 	.word	0x08001d9d
 80015e0:	08001dbf 	.word	0x08001dbf
 80015e4:	08001ddb 	.word	0x08001ddb

080015e8 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	400a      	ands	r2, r1
 800160e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6819      	ldr	r1, [r3, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	2201      	movs	r2, #1
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	400a      	ands	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff fd55 	bl	80010dc <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10f      	bne.n	8001658 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fd06 	bl	800204e <HAL_DMA_Abort>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	e00e      	b.n	8001676 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fcf6 	bl	800204e <HAL_DMA_Abort>
 8001662:	4603      	mov	r3, r0
 8001664:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2204      	movs	r2, #4
 8001680:	711a      	strb	r2, [r3, #4]
 8001682:	e002      	b.n	800168a <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	795b      	ldrb	r3, [r3, #5]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_DAC_ConfigChannel+0x1c>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e194      	b.n	8001a16 <HAL_DAC_ConfigChannel+0x346>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2202      	movs	r2, #2
 80016f6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d174      	bne.n	80017ea <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d137      	bne.n	8001776 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001706:	f7ff fcdd 	bl	80010c4 <HAL_GetTick>
 800170a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800170c:	e011      	b.n	8001732 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800170e:	f7ff fcd9 	bl	80010c4 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d90a      	bls.n	8001732 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f043 0208 	orr.w	r2, r3, #8
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2203      	movs	r2, #3
 800172c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e171      	b.n	8001a16 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e6      	bne.n	800170e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff fccb 	bl	80010dc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800174e:	641a      	str	r2, [r3, #64]	; 0x40
 8001750:	e01e      	b.n	8001790 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001752:	f7ff fcb7 	bl	80010c4 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b01      	cmp	r3, #1
 800175e:	d90a      	bls.n	8001776 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	f043 0208 	orr.w	r2, r3, #8
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2203      	movs	r2, #3
 8001770:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e14f      	b.n	8001a16 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177c:	2b00      	cmp	r3, #0
 800177e:	dbe8      	blt.n	8001752 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001780:	2001      	movs	r0, #1
 8001782:	f7ff fcab 	bl	80010dc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800178e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	ea02 0103 	and.w	r1, r2, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	409a      	lsls	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	21ff      	movs	r1, #255	; 0xff
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	ea02 0103 	and.w	r1, r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	409a      	lsls	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d11d      	bne.n	800182e <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	221f      	movs	r2, #31
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180a:	4013      	ands	r3, r2
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001822:	4313      	orrs	r3, r2
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2207      	movs	r2, #7
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001846:	4013      	ands	r3, r2
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
 800185a:	e011      	b.n	8001880 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001868:	2301      	movs	r3, #1
 800186a:	623b      	str	r3, [r7, #32]
 800186c:	e008      	b.n	8001880 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001876:	2301      	movs	r3, #1
 8001878:	623b      	str	r3, [r7, #32]
 800187a:	e001      	b.n	8001880 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	4313      	orrs	r3, r2
 800188a:	6a3a      	ldr	r2, [r7, #32]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a2:	4013      	ands	r3, r2
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d102      	bne.n	80018b4 <HAL_DAC_ConfigChannel+0x1e4>
 80018ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b2:	e000      	b.n	80018b6 <HAL_DAC_ConfigChannel+0x1e6>
 80018b4:	2300      	movs	r3, #0
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ce:	4013      	ands	r3, r2
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	795b      	ldrb	r3, [r3, #5]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d102      	bne.n	80018e0 <HAL_DAC_ConfigChannel+0x210>
 80018da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018de:	e000      	b.n	80018e2 <HAL_DAC_ConfigChannel+0x212>
 80018e0:	2300      	movs	r3, #0
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d114      	bne.n	8001922 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80018f8:	f001 fc84 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 80018fc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	4a47      	ldr	r2, [pc, #284]	; (8001a20 <HAL_DAC_ConfigChannel+0x350>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d904      	bls.n	8001910 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
 800190e:	e00d      	b.n	800192c <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	4a44      	ldr	r2, [pc, #272]	; (8001a24 <HAL_DAC_ConfigChannel+0x354>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d909      	bls.n	800192c <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
 8001920:	e004      	b.n	800192c <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001928:	4313      	orrs	r3, r2
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193a:	4313      	orrs	r3, r2
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6819      	ldr	r1, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197e:	4013      	ands	r3, r2
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f003 0310 	and.w	r3, r3, #16
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001996:	4313      	orrs	r3, r2
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6819      	ldr	r1, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	22c0      	movs	r2, #192	; 0xc0
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43da      	mvns	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	400a      	ands	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	089b      	lsrs	r3, r3, #2
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	ea02 0103 	and.w	r1, r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	409a      	lsls	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	09896800 	.word	0x09896800
 8001a24:	04c4b400 	.word	0x04c4b400

08001a28 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f7ff fe2c 	bl	8001694 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	711a      	strb	r2, [r3, #4]
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f7ff fe25 	bl	80016a8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	f043 0204 	orr.w	r2, r3, #4
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f7ff fe1b 	bl	80016bc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	711a      	strb	r2, [r3, #4]
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_DACEx_SawtoothWaveGenerate>:
  * @note    Sawtooth reset and step triggers are configured by calling @ref HAL_DAC_ConfigChannel
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SawtoothWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Polarity,
                                                 uint32_t ResetData, uint32_t StepData)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_SAWTOOTH_POLARITY(Polarity));
  assert_param(IS_DAC_RESET_DATA(ResetData));
  assert_param(IS_DAC_STEP_DATA(StepData));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	795b      	ldrb	r3, [r3, #5]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_DACEx_SawtoothWaveGenerate+0x1a>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e03b      	b.n	8001b26 <HAL_DACEx_SawtoothWaveGenerate+0x92>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10f      	bne.n	8001ae0 <HAL_DACEx_SawtoothWaveGenerate+0x4c>
  {
    /* Configure the sawtooth wave generation data parameters */
    MODIFY_REG(hdac->Instance->STR1,
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f403 4160 	and.w	r1, r3, #57344	; 0xe000
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	659a      	str	r2, [r3, #88]	; 0x58
 8001ade:	e00e      	b.n	8001afe <HAL_DACEx_SawtoothWaveGenerate+0x6a>
               | (ResetData << DAC_STR1_STRSTDATA1_Pos));
  }
  else
  {
    /* Configure the sawtooth wave generation data parameters */
    MODIFY_REG(hdac->Instance->STR2,
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae6:	f403 4160 	and.w	r1, r3, #57344	; 0xe000
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	041a      	lsls	r2, r3, #16
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	65da      	str	r2, [r3, #92]	; 0x5c
               | Polarity
               | (ResetData << DAC_STR2_STRSTDATA2_Pos));
  }

  /* Enable the sawtooth wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1) << (Channel & 0x10UL), (uint32_t)(DAC_CR_WAVE1_1 | DAC_CR_WAVE1_0) << (Channel & 0x10UL));
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	22c0      	movs	r2, #192	; 0xc0
 8001b06:	fa02 f103 	lsl.w	r1, r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b08a      	sub	sp, #40	; 0x28
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if (hdac == NULL)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d103      	bne.n	8001b8e <HAL_DACEx_SelfCalibrate+0x20>
  {
    status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b8c:	e100      	b.n	8001d90 <HAL_DACEx_SelfCalibrate+0x222>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	791b      	ldrb	r3, [r3, #4]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d103      	bne.n	8001ba0 <HAL_DACEx_SelfCalibrate+0x32>
  {
    status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b9e:	e0f7      	b.n	8001d90 <HAL_DACEx_SelfCalibrate+0x222>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	795b      	ldrb	r3, [r3, #5]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_DACEx_SelfCalibrate+0x3e>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e0f3      	b.n	8001d94 <HAL_DACEx_SelfCalibrate+0x226>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2107      	movs	r1, #7
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6819      	ldr	r1, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	400a      	ands	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]
    /* Wait for ready bit to be de-asserted */
    HAL_Delay(1);
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff fa79 	bl	80010dc <HAL_Delay>

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43da      	mvns	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	400a      	ands	r2, r1
 8001c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	617b      	str	r3, [r7, #20]

    if (Channel == DAC_CHANNEL_1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d103      	bne.n	8001c1a <HAL_DACEx_SelfCalibrate+0xac>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	3308      	adds	r3, #8
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e002      	b.n	8001c20 <HAL_DACEx_SelfCalibrate+0xb2>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3314      	adds	r3, #20
 8001c1e:	617b      	str	r3, [r7, #20]
    }

    *(__IO uint32_t *) tmp = 0x0800U;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	461a      	mov	r2, r3
 8001c24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c28:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6819      	ldr	r1, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16U;
 8001c44:	2310      	movs	r3, #16
 8001c46:	623b      	str	r3, [r7, #32]
    delta = 8U;
 8001c48:	2308      	movs	r3, #8
 8001c4a:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 8001c4c:	e037      	b.n	8001cbe <HAL_DACEx_SelfCalibrate+0x150>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	211f      	movs	r1, #31
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	ea02 0103 	and.w	r1, r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	6a3a      	ldr	r2, [r7, #32]
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	639a      	str	r2, [r3, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff fa2f 	bl	80010dc <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d104      	bne.n	8001cb0 <HAL_DACEx_SelfCalibrate+0x142>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 8001ca6:	6a3a      	ldr	r2, [r7, #32]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	623b      	str	r3, [r7, #32]
 8001cae:	e003      	b.n	8001cb8 <HAL_DACEx_SelfCalibrate+0x14a>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8001cb0:	6a3a      	ldr	r2, [r7, #32]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1U;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1c4      	bne.n	8001c4e <HAL_DACEx_SelfCalibrate+0xe0>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	211f      	movs	r1, #31
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	ea02 0103 	and.w	r1, r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	6a3a      	ldr	r2, [r7, #32]
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	639a      	str	r2, [r3, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f7ff f9f4 	bl	80010dc <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d117      	bne.n	8001d3e <HAL_DACEx_SelfCalibrate+0x1d0>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvalue++;
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	3301      	adds	r3, #1
 8001d12:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	211f      	movs	r1, #31
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	ea02 0103 	and.w	r1, r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	6a3a      	ldr	r2, [r7, #32]
 8001d34:	409a      	lsls	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6819      	ldr	r1, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	400a      	ands	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	6a3a      	ldr	r2, [r7, #32]
 8001d60:	621a      	str	r2, [r3, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2201      	movs	r2, #1
 8001d66:	61da      	str	r2, [r3, #28]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2107      	movs	r1, #7
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	ea02 0103 	and.w	r1, r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	715a      	strb	r2, [r3, #5]
  }

  return status;
 8001d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff fec1 	bl	8001b32 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	711a      	strb	r2, [r3, #4]
}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff feba 	bl	8001b46 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f043 0204 	orr.w	r2, r3, #4
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7ff feb0 	bl	8001b5a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	711a      	strb	r2, [r3, #4]
}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e08d      	b.n	8001f36 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_DMA_Init+0x138>)
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d80f      	bhi.n	8001e46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b45      	ldr	r3, [pc, #276]	; (8001f44 <HAL_DMA_Init+0x13c>)
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a45      	ldr	r2, [pc, #276]	; (8001f48 <HAL_DMA_Init+0x140>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	009a      	lsls	r2, r3, #2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a42      	ldr	r2, [pc, #264]	; (8001f4c <HAL_DMA_Init+0x144>)
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40
 8001e44:	e00e      	b.n	8001e64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b40      	ldr	r3, [pc, #256]	; (8001f50 <HAL_DMA_Init+0x148>)
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a3d      	ldr	r2, [pc, #244]	; (8001f48 <HAL_DMA_Init+0x140>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	009a      	lsls	r2, r3, #2
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a3c      	ldr	r2, [pc, #240]	; (8001f54 <HAL_DMA_Init+0x14c>)
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fa10 	bl	80022dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ec4:	d102      	bne.n	8001ecc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ee0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d010      	beq.n	8001f0c <HAL_DMA_Init+0x104>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d80c      	bhi.n	8001f0c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fa30 	bl	8002358 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	e008      	b.n	8001f1e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40020407 	.word	0x40020407
 8001f44:	bffdfff8 	.word	0xbffdfff8
 8001f48:	cccccccd 	.word	0xcccccccd
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	bffdfbf8 	.word	0xbffdfbf8
 8001f54:	40020400 	.word	0x40020400

08001f58 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_DMA_Start_IT+0x20>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e066      	b.n	8002046 <HAL_DMA_Start_IT+0xee>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d155      	bne.n	8002038 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0201 	bic.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f954 	bl	800225e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d008      	beq.n	8001fd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 020e 	orr.w	r2, r2, #14
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e00f      	b.n	8001ff0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0204 	bic.w	r2, r2, #4
 8001fde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 020a 	orr.w	r2, r2, #10
 8001fee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800200c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002024:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	e005      	b.n	8002044 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002040:	2302      	movs	r3, #2
 8002042:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002044:	7dfb      	ldrb	r3, [r7, #23]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d005      	beq.n	8002072 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2204      	movs	r2, #4
 800206a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e037      	b.n	80020e2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 020e 	bic.w	r2, r2, #14
 8002080:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002090:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f003 021f 	and.w	r2, r3, #31
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2101      	movs	r1, #1
 80020b0:	fa01 f202 	lsl.w	r2, r1, r2
 80020b4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020be:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020d6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020e0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2204      	movs	r2, #4
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d026      	beq.n	800217a <HAL_DMA_IRQHandler+0x7a>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d021      	beq.n	800217a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0204 	bic.w	r2, r2, #4
 8002152:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	f003 021f 	and.w	r2, r3, #31
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	2104      	movs	r1, #4
 8002162:	fa01 f202 	lsl.w	r2, r1, r2
 8002166:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	2b00      	cmp	r3, #0
 800216e:	d071      	beq.n	8002254 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002178:	e06c      	b.n	8002254 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2202      	movs	r2, #2
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d02e      	beq.n	80021ec <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d029      	beq.n	80021ec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10b      	bne.n	80021be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 020a 	bic.w	r2, r2, #10
 80021b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f003 021f 	and.w	r2, r3, #31
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	2102      	movs	r1, #2
 80021cc:	fa01 f202 	lsl.w	r2, r1, r2
 80021d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d038      	beq.n	8002254 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80021ea:	e033      	b.n	8002254 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2208      	movs	r2, #8
 80021f6:	409a      	lsls	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d02a      	beq.n	8002256 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d025      	beq.n	8002256 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 020e 	bic.w	r2, r2, #14
 8002218:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f003 021f 	and.w	r2, r3, #31
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	2101      	movs	r1, #1
 8002228:	fa01 f202 	lsl.w	r2, r1, r2
 800222c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002248:	2b00      	cmp	r3, #0
 800224a:	d004      	beq.n	8002256 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002254:	bf00      	nop
 8002256:	bf00      	nop
}
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800225e:	b480      	push	{r7}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002274:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002286:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	2101      	movs	r1, #1
 8002296:	fa01 f202 	lsl.w	r2, r1, r2
 800229a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b10      	cmp	r3, #16
 80022aa:	d108      	bne.n	80022be <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022bc:	e007      	b.n	80022ce <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	60da      	str	r2, [r3, #12]
}
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d802      	bhi.n	80022f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e001      	b.n	80022fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80022f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	3b08      	subs	r3, #8
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	009a      	lsls	r2, r3, #2
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	461a      	mov	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002326:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	2201      	movs	r2, #1
 8002330:	409a      	lsls	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002336:	bf00      	nop
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40020407 	.word	0x40020407
 8002348:	40020800 	.word	0x40020800
 800234c:	40020820 	.word	0x40020820
 8002350:	cccccccd 	.word	0xcccccccd
 8002354:	40020880 	.word	0x40020880

08002358 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	461a      	mov	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a08      	ldr	r2, [pc, #32]	; (800239c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800237a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3b01      	subs	r3, #1
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	2201      	movs	r2, #1
 8002386:	409a      	lsls	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	1000823f 	.word	0x1000823f
 800239c:	40020940 	.word	0x40020940

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023ae:	e15a      	b.n	8002666 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 814c 	beq.w	8002660 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d00b      	beq.n	80023e8 <HAL_GPIO_Init+0x48>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d007      	beq.n	80023e8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023dc:	2b11      	cmp	r3, #17
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b12      	cmp	r3, #18
 80023e6:	d130      	bne.n	800244a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	2203      	movs	r2, #3
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800241e:	2201      	movs	r2, #1
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	f003 0201 	and.w	r2, r3, #1
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0xea>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b12      	cmp	r3, #18
 8002488:	d123      	bne.n	80024d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	6939      	ldr	r1, [r7, #16]
 80024ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0203 	and.w	r2, r3, #3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80a6 	beq.w	8002660 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002514:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <HAL_GPIO_Init+0x2e4>)
 8002516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002518:	4a5a      	ldr	r2, [pc, #360]	; (8002684 <HAL_GPIO_Init+0x2e4>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6613      	str	r3, [r2, #96]	; 0x60
 8002520:	4b58      	ldr	r3, [pc, #352]	; (8002684 <HAL_GPIO_Init+0x2e4>)
 8002522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800252c:	4a56      	ldr	r2, [pc, #344]	; (8002688 <HAL_GPIO_Init+0x2e8>)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3302      	adds	r3, #2
 8002534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	220f      	movs	r2, #15
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002556:	d01f      	beq.n	8002598 <HAL_GPIO_Init+0x1f8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a4c      	ldr	r2, [pc, #304]	; (800268c <HAL_GPIO_Init+0x2ec>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d019      	beq.n	8002594 <HAL_GPIO_Init+0x1f4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a4b      	ldr	r2, [pc, #300]	; (8002690 <HAL_GPIO_Init+0x2f0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d013      	beq.n	8002590 <HAL_GPIO_Init+0x1f0>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a4a      	ldr	r2, [pc, #296]	; (8002694 <HAL_GPIO_Init+0x2f4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00d      	beq.n	800258c <HAL_GPIO_Init+0x1ec>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a49      	ldr	r2, [pc, #292]	; (8002698 <HAL_GPIO_Init+0x2f8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d007      	beq.n	8002588 <HAL_GPIO_Init+0x1e8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a48      	ldr	r2, [pc, #288]	; (800269c <HAL_GPIO_Init+0x2fc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_GPIO_Init+0x1e4>
 8002580:	2305      	movs	r3, #5
 8002582:	e00a      	b.n	800259a <HAL_GPIO_Init+0x1fa>
 8002584:	2306      	movs	r3, #6
 8002586:	e008      	b.n	800259a <HAL_GPIO_Init+0x1fa>
 8002588:	2304      	movs	r3, #4
 800258a:	e006      	b.n	800259a <HAL_GPIO_Init+0x1fa>
 800258c:	2303      	movs	r3, #3
 800258e:	e004      	b.n	800259a <HAL_GPIO_Init+0x1fa>
 8002590:	2302      	movs	r3, #2
 8002592:	e002      	b.n	800259a <HAL_GPIO_Init+0x1fa>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_GPIO_Init+0x1fa>
 8002598:	2300      	movs	r3, #0
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	f002 0203 	and.w	r2, r2, #3
 80025a0:	0092      	lsls	r2, r2, #2
 80025a2:	4093      	lsls	r3, r2
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025aa:	4937      	ldr	r1, [pc, #220]	; (8002688 <HAL_GPIO_Init+0x2e8>)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025b8:	4b39      	ldr	r3, [pc, #228]	; (80026a0 <HAL_GPIO_Init+0x300>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025dc:	4a30      	ldr	r2, [pc, #192]	; (80026a0 <HAL_GPIO_Init+0x300>)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80025e2:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <HAL_GPIO_Init+0x300>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002606:	4a26      	ldr	r2, [pc, #152]	; (80026a0 <HAL_GPIO_Init+0x300>)
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_GPIO_Init+0x300>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	43db      	mvns	r3, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002630:	4a1b      	ldr	r2, [pc, #108]	; (80026a0 <HAL_GPIO_Init+0x300>)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <HAL_GPIO_Init+0x300>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	43db      	mvns	r3, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800265a:	4a11      	ldr	r2, [pc, #68]	; (80026a0 <HAL_GPIO_Init+0x300>)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3301      	adds	r3, #1
 8002664:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	f47f ae9d 	bne.w	80023b0 <HAL_GPIO_Init+0x10>
  }
}
 8002676:	bf00      	nop
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	40010000 	.word	0x40010000
 800268c:	48000400 	.word	0x48000400
 8002690:	48000800 	.word	0x48000800
 8002694:	48000c00 	.word	0x48000c00
 8002698:	48001000 	.word	0x48001000
 800269c:	48001400 	.word	0x48001400
 80026a0:	40010400 	.word	0x40010400

080026a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
 80026b0:	4613      	mov	r3, r2
 80026b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b4:	787b      	ldrb	r3, [r7, #1]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026c0:	e002      	b.n	80026c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	887b      	ldrh	r3, [r7, #2]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ec:	887a      	ldrh	r2, [r7, #2]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80026f2:	e002      	b.n	80026fa <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026f4:	887a      	ldrh	r2, [r7, #2]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	619a      	str	r2, [r3, #24]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800271e:	4a05      	ldr	r2, [pc, #20]	; (8002734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f806 	bl	8002738 <HAL_GPIO_EXTI_Callback>
  }
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40010400 	.word	0x40010400

08002738 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d141      	bne.n	80027e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800275e:	4b4b      	ldr	r3, [pc, #300]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276a:	d131      	bne.n	80027d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800276c:	4b47      	ldr	r3, [pc, #284]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002772:	4a46      	ldr	r2, [pc, #280]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002778:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800277c:	4b43      	ldr	r3, [pc, #268]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002784:	4a41      	ldr	r2, [pc, #260]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800278c:	4b40      	ldr	r3, [pc, #256]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2232      	movs	r2, #50	; 0x32
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	4a3f      	ldr	r2, [pc, #252]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	0c9b      	lsrs	r3, r3, #18
 800279e:	3301      	adds	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a2:	e002      	b.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027aa:	4b38      	ldr	r3, [pc, #224]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b6:	d102      	bne.n	80027be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f2      	bne.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027be:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ca:	d158      	bne.n	800287e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e057      	b.n	8002880 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027d0:	4b2e      	ldr	r3, [pc, #184]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027d6:	4a2d      	ldr	r2, [pc, #180]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027e0:	e04d      	b.n	800287e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e8:	d141      	bne.n	800286e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ea:	4b28      	ldr	r3, [pc, #160]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f6:	d131      	bne.n	800285c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027fe:	4a23      	ldr	r2, [pc, #140]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002804:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002808:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002810:	4a1e      	ldr	r2, [pc, #120]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002816:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002818:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2232      	movs	r2, #50	; 0x32
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	0c9b      	lsrs	r3, r3, #18
 800282a:	3301      	adds	r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800282e:	e002      	b.n	8002836 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3b01      	subs	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002842:	d102      	bne.n	800284a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f2      	bne.n	8002830 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002856:	d112      	bne.n	800287e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e011      	b.n	8002880 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002868:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800286c:	e007      	b.n	800287e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002876:	4a05      	ldr	r2, [pc, #20]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002878:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800287c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40007000 	.word	0x40007000
 8002890:	20000078 	.word	0x20000078
 8002894:	431bde83 	.word	0x431bde83

08002898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e308      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d075      	beq.n	80029a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b6:	4ba3      	ldr	r3, [pc, #652]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c0:	4ba0      	ldr	r3, [pc, #640]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	d102      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3e>
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d002      	beq.n	80028dc <HAL_RCC_OscConfig+0x44>
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d10b      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	4b99      	ldr	r3, [pc, #612]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05b      	beq.n	80029a0 <HAL_RCC_OscConfig+0x108>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d157      	bne.n	80029a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e2e3      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fc:	d106      	bne.n	800290c <HAL_RCC_OscConfig+0x74>
 80028fe:	4b91      	ldr	r3, [pc, #580]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a90      	ldr	r2, [pc, #576]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x98>
 8002916:	4b8b      	ldr	r3, [pc, #556]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a8a      	ldr	r2, [pc, #552]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b88      	ldr	r3, [pc, #544]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a87      	ldr	r2, [pc, #540]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 8002930:	4b84      	ldr	r3, [pc, #528]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a83      	ldr	r2, [pc, #524]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b81      	ldr	r3, [pc, #516]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a80      	ldr	r2, [pc, #512]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7fe fbb8 	bl	80010c4 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002958:	f7fe fbb4 	bl	80010c4 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e2a8      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800296a:	4b76      	ldr	r3, [pc, #472]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0xc0>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fba4 	bl	80010c4 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7fe fba0 	bl	80010c4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e294      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002992:	4b6c      	ldr	r3, [pc, #432]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0xe8>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d075      	beq.n	8002a9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ae:	4b65      	ldr	r3, [pc, #404]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029b8:	4b62      	ldr	r3, [pc, #392]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	2b0c      	cmp	r3, #12
 80029c6:	d102      	bne.n	80029ce <HAL_RCC_OscConfig+0x136>
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_OscConfig+0x13c>
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d11f      	bne.n	8002a14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d4:	4b5b      	ldr	r3, [pc, #364]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_OscConfig+0x154>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e267      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ec:	4b55      	ldr	r3, [pc, #340]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	4952      	ldr	r1, [pc, #328]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a00:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <HAL_RCC_OscConfig+0x2b0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fb11 	bl	800102c <HAL_InitTick>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d043      	beq.n	8002a98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e253      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d023      	beq.n	8002a64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a1c:	4b49      	ldr	r3, [pc, #292]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a48      	ldr	r2, [pc, #288]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe fb4c 	bl	80010c4 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a30:	f7fe fb48 	bl	80010c4 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e23c      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a42:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	061b      	lsls	r3, r3, #24
 8002a5c:	4939      	ldr	r1, [pc, #228]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
 8002a62:	e01a      	b.n	8002a9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a64:	4b37      	ldr	r3, [pc, #220]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a36      	ldr	r2, [pc, #216]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fe fb28 	bl	80010c4 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a78:	f7fe fb24 	bl	80010c4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e218      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x1e0>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d03c      	beq.n	8002b20 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01c      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aae:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab4:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7fe fb01 	bl	80010c4 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fafd 	bl	80010c4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e1f1      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0ef      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x22e>
 8002ae6:	e01b      	b.n	8002b20 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae8:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aee:	4a15      	ldr	r2, [pc, #84]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af8:	f7fe fae4 	bl	80010c4 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b00:	f7fe fae0 	bl	80010c4 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e1d4      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ef      	bne.n	8002b00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80ab 	beq.w	8002c84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b32:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCC_OscConfig+0x2b4>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e005      	b.n	8002b4e <HAL_RCC_OscConfig+0x2b6>
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	2000007c 	.word	0x2000007c
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00d      	beq.n	8002b6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	4baf      	ldr	r3, [pc, #700]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	4aae      	ldr	r2, [pc, #696]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b5e:	4bac      	ldr	r3, [pc, #688]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6e:	4ba9      	ldr	r3, [pc, #676]	; (8002e14 <HAL_RCC_OscConfig+0x57c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d118      	bne.n	8002bac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b7a:	4ba6      	ldr	r3, [pc, #664]	; (8002e14 <HAL_RCC_OscConfig+0x57c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4aa5      	ldr	r2, [pc, #660]	; (8002e14 <HAL_RCC_OscConfig+0x57c>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b86:	f7fe fa9d 	bl	80010c4 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8e:	f7fe fa99 	bl	80010c4 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e18d      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba0:	4b9c      	ldr	r3, [pc, #624]	; (8002e14 <HAL_RCC_OscConfig+0x57c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d108      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x32e>
 8002bb4:	4b96      	ldr	r3, [pc, #600]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	4a95      	ldr	r2, [pc, #596]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc4:	e024      	b.n	8002c10 <HAL_RCC_OscConfig+0x378>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d110      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x358>
 8002bce:	4b90      	ldr	r3, [pc, #576]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd4:	4a8e      	ldr	r2, [pc, #568]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bde:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be4:	4a8a      	ldr	r2, [pc, #552]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bee:	e00f      	b.n	8002c10 <HAL_RCC_OscConfig+0x378>
 8002bf0:	4b87      	ldr	r3, [pc, #540]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf6:	4a86      	ldr	r2, [pc, #536]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c00:	4b83      	ldr	r3, [pc, #524]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c06:	4a82      	ldr	r2, [pc, #520]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c08:	f023 0304 	bic.w	r3, r3, #4
 8002c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d016      	beq.n	8002c46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c18:	f7fe fa54 	bl	80010c4 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c20:	f7fe fa50 	bl	80010c4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e142      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c36:	4b76      	ldr	r3, [pc, #472]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ed      	beq.n	8002c20 <HAL_RCC_OscConfig+0x388>
 8002c44:	e015      	b.n	8002c72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c46:	f7fe fa3d 	bl	80010c4 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c4c:	e00a      	b.n	8002c64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4e:	f7fe fa39 	bl	80010c4 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e12b      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c64:	4b6a      	ldr	r3, [pc, #424]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1ed      	bne.n	8002c4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c72:	7ffb      	ldrb	r3, [r7, #31]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c78:	4b65      	ldr	r3, [pc, #404]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	4a64      	ldr	r2, [pc, #400]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d03c      	beq.n	8002d0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01c      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c98:	4b5d      	ldr	r3, [pc, #372]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c9e:	4a5c      	ldr	r2, [pc, #368]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe fa0c 	bl	80010c4 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cb0:	f7fe fa08 	bl	80010c4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0fc      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cc2:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ef      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x418>
 8002cd0:	e01b      	b.n	8002d0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cd2:	4b4f      	ldr	r3, [pc, #316]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cd8:	4a4d      	ldr	r2, [pc, #308]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fe f9ef 	bl	80010c4 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cea:	f7fe f9eb 	bl	80010c4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0df      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cfc:	4b44      	ldr	r3, [pc, #272]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002cfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ef      	bne.n	8002cea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 80d3 	beq.w	8002eba <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d14:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	f000 808d 	beq.w	8002e3c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d15a      	bne.n	8002de0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a38      	ldr	r2, [pc, #224]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe f9c5 	bl	80010c4 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe f9c1 	bl	80010c4 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e0b5      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d50:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d5c:	4b2c      	ldr	r3, [pc, #176]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_RCC_OscConfig+0x580>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6a11      	ldr	r1, [r2, #32]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d6c:	3a01      	subs	r2, #1
 8002d6e:	0112      	lsls	r2, r2, #4
 8002d70:	4311      	orrs	r1, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002d76:	0212      	lsls	r2, r2, #8
 8002d78:	4311      	orrs	r1, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d7e:	0852      	lsrs	r2, r2, #1
 8002d80:	3a01      	subs	r2, #1
 8002d82:	0552      	lsls	r2, r2, #21
 8002d84:	4311      	orrs	r1, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d8a:	0852      	lsrs	r2, r2, #1
 8002d8c:	3a01      	subs	r2, #1
 8002d8e:	0652      	lsls	r2, r2, #25
 8002d90:	4311      	orrs	r1, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d96:	06d2      	lsls	r2, r2, #27
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	491d      	ldr	r1, [pc, #116]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1a      	ldr	r2, [pc, #104]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002daa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dac:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe f984 	bl	80010c4 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe f980 	bl	80010c4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e074      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x528>
 8002dde:	e06c      	b.n	8002eba <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002df2:	f023 0303 	bic.w	r3, r3, #3
 8002df6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_RCC_OscConfig+0x578>)
 8002dfe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe f95c 	bl	80010c4 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e0e:	e00e      	b.n	8002e2e <HAL_RCC_OscConfig+0x596>
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40007000 	.word	0x40007000
 8002e18:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe f952 	bl	80010c4 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e046      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2e:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <HAL_RCC_OscConfig+0x62c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x584>
 8002e3a:	e03e      	b.n	8002eba <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e039      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_RCC_OscConfig+0x62c>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0203 	and.w	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d12c      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	3b01      	subs	r3, #1
 8002e68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d123      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d11b      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d113      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d109      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	085b      	lsrs	r3, r3, #1
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e11e      	b.n	800311e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b91      	ldr	r3, [pc, #580]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d910      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b8e      	ldr	r3, [pc, #568]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 020f 	bic.w	r2, r3, #15
 8002ef6:	498c      	ldr	r1, [pc, #560]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b8a      	ldr	r3, [pc, #552]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e106      	b.n	800311e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d073      	beq.n	8003004 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d129      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f24:	4b81      	ldr	r3, [pc, #516]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0f4      	b.n	800311e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f34:	f000 f99e 	bl	8003274 <RCC_GetSysClockFreqFromPLLSource>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4a7c      	ldr	r2, [pc, #496]	; (8003130 <HAL_RCC_ClockConfig+0x268>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d93f      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f42:	4b7a      	ldr	r3, [pc, #488]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d009      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d033      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d12f      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f62:	4b72      	ldr	r3, [pc, #456]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f6a:	4a70      	ldr	r2, [pc, #448]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8002f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e024      	b.n	8002fc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f80:	4b6a      	ldr	r3, [pc, #424]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0c6      	b.n	800311e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f90:	4b66      	ldr	r3, [pc, #408]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0be      	b.n	800311e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002fa0:	f000 f8ce 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4a61      	ldr	r2, [pc, #388]	; (8003130 <HAL_RCC_ClockConfig+0x268>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d909      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fae:	4b5f      	ldr	r3, [pc, #380]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fb6:	4a5d      	ldr	r2, [pc, #372]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8002fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fc2:	4b5a      	ldr	r3, [pc, #360]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f023 0203 	bic.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4957      	ldr	r1, [pc, #348]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd4:	f7fe f876 	bl	80010c4 <HAL_GetTick>
 8002fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fdc:	f7fe f872 	bl	80010c4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e095      	b.n	800311e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff2:	4b4e      	ldr	r3, [pc, #312]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 020c 	and.w	r2, r3, #12
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	429a      	cmp	r2, r3
 8003002:	d1eb      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d023      	beq.n	8003058 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800301c:	4b43      	ldr	r3, [pc, #268]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a42      	ldr	r2, [pc, #264]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8003022:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003026:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003034:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800303c:	4a3b      	ldr	r2, [pc, #236]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 800303e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003042:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003044:	4b39      	ldr	r3, [pc, #228]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	4936      	ldr	r1, [pc, #216]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
 8003056:	e008      	b.n	800306a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b80      	cmp	r3, #128	; 0x80
 800305c:	d105      	bne.n	800306a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800305e:	4b33      	ldr	r3, [pc, #204]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	4a32      	ldr	r2, [pc, #200]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 8003064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003068:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d21d      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003078:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 020f 	bic.w	r2, r3, #15
 8003080:	4929      	ldr	r1, [pc, #164]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003088:	f7fe f81c 	bl	80010c4 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003090:	f7fe f818 	bl	80010c4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e03b      	b.n	800311e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_RCC_ClockConfig+0x260>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d1ed      	bne.n	8003090 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4917      	ldr	r1, [pc, #92]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030de:	4b13      	ldr	r3, [pc, #76]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	490f      	ldr	r1, [pc, #60]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030f2:	f000 f825 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80030f6:	4601      	mov	r1, r0
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_RCC_ClockConfig+0x264>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <HAL_RCC_ClockConfig+0x26c>)
 8003104:	5cd3      	ldrb	r3, [r2, r3]
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	fa21 f303 	lsr.w	r3, r1, r3
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <HAL_RCC_ClockConfig+0x270>)
 8003110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x274>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fd ff88 	bl	800102c <HAL_InitTick>
 800311c:	4603      	mov	r3, r0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40022000 	.word	0x40022000
 800312c:	40021000 	.word	0x40021000
 8003130:	04c4b400 	.word	0x04c4b400
 8003134:	08005c70 	.word	0x08005c70
 8003138:	20000078 	.word	0x20000078
 800313c:	2000007c 	.word	0x2000007c

08003140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003146:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b04      	cmp	r3, #4
 8003150:	d102      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003152:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	e047      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b08      	cmp	r3, #8
 8003162:	d102      	bne.n	800316a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003164:	4b26      	ldr	r3, [pc, #152]	; (8003200 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	e03e      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800316a:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b0c      	cmp	r3, #12
 8003174:	d136      	bne.n	80031e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	3301      	adds	r3, #1
 800318c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d10c      	bne.n	80031ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003194:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	4a16      	ldr	r2, [pc, #88]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800319e:	68d2      	ldr	r2, [r2, #12]
 80031a0:	0a12      	lsrs	r2, r2, #8
 80031a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	617b      	str	r3, [r7, #20]
      break;
 80031ac:	e00c      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031ae:	4a13      	ldr	r2, [pc, #76]	; (80031fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031b8:	68d2      	ldr	r2, [r2, #12]
 80031ba:	0a12      	lsrs	r2, r2, #8
 80031bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031c0:	fb02 f303 	mul.w	r3, r2, r3
 80031c4:	617b      	str	r3, [r7, #20]
      break;
 80031c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	0e5b      	lsrs	r3, r3, #25
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	3301      	adds	r3, #1
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	e001      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031e8:	693b      	ldr	r3, [r7, #16]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
 80031fc:	00f42400 	.word	0x00f42400
 8003200:	016e3600 	.word	0x016e3600

08003204 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <HAL_RCC_GetHCLKFreq+0x14>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000078 	.word	0x20000078

0800321c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003220:	f7ff fff0 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003224:	4601      	mov	r1, r0
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	4a04      	ldr	r2, [pc, #16]	; (8003244 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003232:	5cd3      	ldrb	r3, [r2, r3]
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	fa21 f303 	lsr.w	r3, r1, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	08005c80 	.word	0x08005c80

08003248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800324c:	f7ff ffda 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003250:	4601      	mov	r1, r0
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	0adb      	lsrs	r3, r3, #11
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <HAL_RCC_GetPCLK2Freq+0x28>)
 800325e:	5cd3      	ldrb	r3, [r2, r3]
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	08005c80 	.word	0x08005c80

08003274 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800327a:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	3301      	adds	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b03      	cmp	r3, #3
 8003296:	d10c      	bne.n	80032b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003298:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032a2:	68d2      	ldr	r2, [r2, #12]
 80032a4:	0a12      	lsrs	r2, r2, #8
 80032a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	617b      	str	r3, [r7, #20]
    break;
 80032b0:	e00c      	b.n	80032cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032b2:	4a12      	ldr	r2, [pc, #72]	; (80032fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	4a0e      	ldr	r2, [pc, #56]	; (80032f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032bc:	68d2      	ldr	r2, [r2, #12]
 80032be:	0a12      	lsrs	r2, r2, #8
 80032c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032c4:	fb02 f303 	mul.w	r3, r2, r3
 80032c8:	617b      	str	r3, [r7, #20]
    break;
 80032ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	0e5b      	lsrs	r3, r3, #25
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	3301      	adds	r3, #1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80032e6:	687b      	ldr	r3, [r7, #4]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40021000 	.word	0x40021000
 80032f8:	016e3600 	.word	0x016e3600
 80032fc:	00f42400 	.word	0x00f42400

08003300 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003308:	2300      	movs	r3, #0
 800330a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800330c:	2300      	movs	r3, #0
 800330e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8098 	beq.w	800344e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331e:	2300      	movs	r3, #0
 8003320:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003322:	4b43      	ldr	r3, [pc, #268]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10d      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332e:	4b40      	ldr	r3, [pc, #256]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	4a3f      	ldr	r2, [pc, #252]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003338:	6593      	str	r3, [r2, #88]	; 0x58
 800333a:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003346:	2301      	movs	r3, #1
 8003348:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800334a:	4b3a      	ldr	r3, [pc, #232]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a39      	ldr	r2, [pc, #228]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003354:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003356:	f7fd feb5 	bl	80010c4 <HAL_GetTick>
 800335a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800335c:	e009      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335e:	f7fd feb1 	bl	80010c4 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d902      	bls.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	74fb      	strb	r3, [r7, #19]
        break;
 8003370:	e005      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003372:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0ef      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d159      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003384:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01e      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	429a      	cmp	r2, r3
 800339e:	d019      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033a0:	4b23      	ldr	r3, [pc, #140]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033ac:	4b20      	ldr	r3, [pc, #128]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	4a1f      	ldr	r2, [pc, #124]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033bc:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033cc:	4a18      	ldr	r2, [pc, #96]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d016      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033de:	f7fd fe71 	bl	80010c4 <HAL_GetTick>
 80033e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e4:	e00b      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7fd fe6d 	bl	80010c4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d902      	bls.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	74fb      	strb	r3, [r7, #19]
            break;
 80033fc:	e006      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033fe:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ec      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10b      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003412:	4b07      	ldr	r3, [pc, #28]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003420:	4903      	ldr	r1, [pc, #12]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003428:	e008      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800342a:	7cfb      	ldrb	r3, [r7, #19]
 800342c:	74bb      	strb	r3, [r7, #18]
 800342e:	e005      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003430:	40021000 	.word	0x40021000
 8003434:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800343c:	7c7b      	ldrb	r3, [r7, #17]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d105      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003442:	4baf      	ldr	r3, [pc, #700]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	4aae      	ldr	r2, [pc, #696]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800344c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800345a:	4ba9      	ldr	r3, [pc, #676]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f023 0203 	bic.w	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	49a5      	ldr	r1, [pc, #660]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800347c:	4ba0      	ldr	r3, [pc, #640]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f023 020c 	bic.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	499d      	ldr	r1, [pc, #628]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800349e:	4b98      	ldr	r3, [pc, #608]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4994      	ldr	r1, [pc, #592]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034c0:	4b8f      	ldr	r3, [pc, #572]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	498c      	ldr	r1, [pc, #560]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034e2:	4b87      	ldr	r3, [pc, #540]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	4983      	ldr	r1, [pc, #524]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003504:	4b7e      	ldr	r3, [pc, #504]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	497b      	ldr	r1, [pc, #492]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003526:	4b76      	ldr	r3, [pc, #472]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	4972      	ldr	r1, [pc, #456]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003548:	4b6d      	ldr	r3, [pc, #436]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	496a      	ldr	r1, [pc, #424]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800356a:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	4961      	ldr	r1, [pc, #388]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800358c:	4b5c      	ldr	r3, [pc, #368]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800358e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	4959      	ldr	r1, [pc, #356]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035ae:	4b54      	ldr	r3, [pc, #336]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	4950      	ldr	r1, [pc, #320]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d015      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035d0:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4948      	ldr	r1, [pc, #288]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ee:	d105      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f0:	4b43      	ldr	r3, [pc, #268]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4a42      	ldr	r2, [pc, #264]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003604:	2b00      	cmp	r3, #0
 8003606:	d015      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003608:	4b3d      	ldr	r3, [pc, #244]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003616:	493a      	ldr	r1, [pc, #232]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003626:	d105      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003628:	4b35      	ldr	r3, [pc, #212]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a34      	ldr	r2, [pc, #208]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800362e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003632:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d015      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003640:	4b2f      	ldr	r3, [pc, #188]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	492c      	ldr	r1, [pc, #176]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800365e:	d105      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a26      	ldr	r2, [pc, #152]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800366a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003678:	4b21      	ldr	r3, [pc, #132]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	491e      	ldr	r1, [pc, #120]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003696:	d105      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003698:	4b19      	ldr	r3, [pc, #100]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a18      	ldr	r2, [pc, #96]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800369e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d015      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b0:	4b13      	ldr	r3, [pc, #76]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	4910      	ldr	r1, [pc, #64]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ce:	d105      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d018      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	4902      	ldr	r1, [pc, #8]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036fe:	e001      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003700:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800370c:	d105      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	4a20      	ldr	r2, [pc, #128]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d015      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003734:	4917      	ldr	r1, [pc, #92]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003744:	d105      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	4a12      	ldr	r2, [pc, #72]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800374c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003750:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d015      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003760:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376c:	4909      	ldr	r1, [pc, #36]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800377c:	d105      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	4a04      	ldr	r2, [pc, #16]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003788:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800378a:	7cbb      	ldrb	r3, [r7, #18]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000

08003798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e049      	b.n	800383e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fb46 	bl	8000e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3304      	adds	r3, #4
 80037d4:	4619      	mov	r1, r3
 80037d6:	4610      	mov	r0, r2
 80037d8:	f000 fb5a 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	d001      	beq.n	8003860 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e019      	b.n	8003894 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_TIM_Base_Start+0x58>)
 8003870:	4013      	ands	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b06      	cmp	r3, #6
 8003878:	d00b      	beq.n	8003892 <HAL_TIM_Base_Start+0x4a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003880:	d007      	beq.n	8003892 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0201 	orr.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	00010007 	.word	0x00010007

080038a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6a1a      	ldr	r2, [r3, #32]
 80038b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10f      	bne.n	80038dc <HAL_TIM_Base_Stop+0x38>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	f244 4344 	movw	r3, #17476	; 0x4444
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d107      	bne.n	80038dc <HAL_TIM_Base_Stop+0x38>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d001      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e021      	b.n	8003950 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	4b0c      	ldr	r3, [pc, #48]	; (800395c <HAL_TIM_Base_Start_IT+0x68>)
 800392c:	4013      	ands	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b06      	cmp	r3, #6
 8003934:	d00b      	beq.n	800394e <HAL_TIM_Base_Start_IT+0x5a>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393c:	d007      	beq.n	800394e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	00010007 	.word	0x00010007

08003960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d122      	bne.n	80039bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b02      	cmp	r3, #2
 8003982:	d11b      	bne.n	80039bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0202 	mvn.w	r2, #2
 800398c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fa56 	bl	8003e54 <HAL_TIM_IC_CaptureCallback>
 80039a8:	e005      	b.n	80039b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fa48 	bl	8003e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fa59 	bl	8003e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d122      	bne.n	8003a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d11b      	bne.n	8003a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0204 	mvn.w	r2, #4
 80039e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fa2c 	bl	8003e54 <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa1e 	bl	8003e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa2f 	bl	8003e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d122      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d11b      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0208 	mvn.w	r2, #8
 8003a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2204      	movs	r2, #4
 8003a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa02 	bl	8003e54 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f9f4 	bl	8003e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa05 	bl	8003e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b10      	cmp	r3, #16
 8003a70:	d122      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0210 	mvn.w	r2, #16
 8003a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f9d8 	bl	8003e54 <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f9ca 	bl	8003e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f9db 	bl	8003e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d107      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0201 	mvn.w	r2, #1
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fc fffa 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b80      	cmp	r3, #128	; 0x80
 8003af0:	d10e      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afc:	2b80      	cmp	r3, #128	; 0x80
 8003afe:	d107      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fba4 	bl	8004258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2a:	2b80      	cmp	r3, #128	; 0x80
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fb97 	bl	800426c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f989 	bl	8003e7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0220 	mvn.w	r2, #32
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fb57 	bl	8004244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba4:	d10f      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fb5d 	bl	8004280 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bd4:	d10f      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003be4:	d107      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fb4f 	bl	8004294 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c04:	d10f      	bne.n	8003c26 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c14:	d107      	bne.n	8003c26 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fb41 	bl	80042a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c34:	d10f      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c44:	d107      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fb33 	bl	80042bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_TIM_ConfigClockSource+0x18>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e0d2      	b.n	8003e1e <HAL_TIM_ConfigClockSource+0x1be>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003c96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ca2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb4:	f000 80a9 	beq.w	8003e0a <HAL_TIM_ConfigClockSource+0x1aa>
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbc:	d81a      	bhi.n	8003cf4 <HAL_TIM_ConfigClockSource+0x94>
 8003cbe:	2b30      	cmp	r3, #48	; 0x30
 8003cc0:	f000 809a 	beq.w	8003df8 <HAL_TIM_ConfigClockSource+0x198>
 8003cc4:	2b30      	cmp	r3, #48	; 0x30
 8003cc6:	d809      	bhi.n	8003cdc <HAL_TIM_ConfigClockSource+0x7c>
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	f000 8095 	beq.w	8003df8 <HAL_TIM_ConfigClockSource+0x198>
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	f000 8092 	beq.w	8003df8 <HAL_TIM_ConfigClockSource+0x198>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 808f 	beq.w	8003df8 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003cda:	e097      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003cdc:	2b50      	cmp	r3, #80	; 0x50
 8003cde:	d05b      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x138>
 8003ce0:	2b50      	cmp	r3, #80	; 0x50
 8003ce2:	d802      	bhi.n	8003cea <HAL_TIM_ConfigClockSource+0x8a>
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d077      	beq.n	8003dd8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ce8:	e090      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003cea:	2b60      	cmp	r3, #96	; 0x60
 8003cec:	d064      	beq.n	8003db8 <HAL_TIM_ConfigClockSource+0x158>
 8003cee:	2b70      	cmp	r3, #112	; 0x70
 8003cf0:	d028      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8003cf2:	e08b      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003cf4:	4a4c      	ldr	r2, [pc, #304]	; (8003e28 <HAL_TIM_ConfigClockSource+0x1c8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d07e      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0x198>
 8003cfa:	4a4b      	ldr	r2, [pc, #300]	; (8003e28 <HAL_TIM_ConfigClockSource+0x1c8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d810      	bhi.n	8003d22 <HAL_TIM_ConfigClockSource+0xc2>
 8003d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d04:	d078      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0x198>
 8003d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d0a:	d803      	bhi.n	8003d14 <HAL_TIM_ConfigClockSource+0xb4>
 8003d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d10:	d02f      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8003d12:	e07b      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003d14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003d18:	d06e      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0x198>
 8003d1a:	4a44      	ldr	r2, [pc, #272]	; (8003e2c <HAL_TIM_ConfigClockSource+0x1cc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d06b      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8003d20:	e074      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003d22:	4a43      	ldr	r2, [pc, #268]	; (8003e30 <HAL_TIM_ConfigClockSource+0x1d0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d067      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0x198>
 8003d28:	4a41      	ldr	r2, [pc, #260]	; (8003e30 <HAL_TIM_ConfigClockSource+0x1d0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d803      	bhi.n	8003d36 <HAL_TIM_ConfigClockSource+0xd6>
 8003d2e:	4a41      	ldr	r2, [pc, #260]	; (8003e34 <HAL_TIM_ConfigClockSource+0x1d4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d061      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8003d34:	e06a      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003d36:	4a40      	ldr	r2, [pc, #256]	; (8003e38 <HAL_TIM_ConfigClockSource+0x1d8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d05d      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0x198>
 8003d3c:	4a3f      	ldr	r2, [pc, #252]	; (8003e3c <HAL_TIM_ConfigClockSource+0x1dc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d05a      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8003d42:	e063      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	6899      	ldr	r1, [r3, #8]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f000 f9c0 	bl	80040d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	609a      	str	r2, [r3, #8]
      break;
 8003d70:	e04c      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6899      	ldr	r1, [r3, #8]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f000 f9a9 	bl	80040d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d94:	609a      	str	r2, [r3, #8]
      break;
 8003d96:	e039      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	6859      	ldr	r1, [r3, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	461a      	mov	r2, r3
 8003da6:	f000 f91b 	bl	8003fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2150      	movs	r1, #80	; 0x50
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 f974 	bl	800409e <TIM_ITRx_SetConfig>
      break;
 8003db6:	e029      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f000 f93a 	bl	800403e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2160      	movs	r1, #96	; 0x60
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f964 	bl	800409e <TIM_ITRx_SetConfig>
      break;
 8003dd6:	e019      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	461a      	mov	r2, r3
 8003de6:	f000 f8fb 	bl	8003fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2140      	movs	r1, #64	; 0x40
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 f954 	bl	800409e <TIM_ITRx_SetConfig>
      break;
 8003df6:	e009      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4619      	mov	r1, r3
 8003e02:	4610      	mov	r0, r2
 8003e04:	f000 f94b 	bl	800409e <TIM_ITRx_SetConfig>
      break;
 8003e08:	e000      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8003e0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	00100030 	.word	0x00100030
 8003e2c:	00100020 	.word	0x00100020
 8003e30:	00100050 	.word	0x00100050
 8003e34:	00100040 	.word	0x00100040
 8003e38:	00100060 	.word	0x00100060
 8003e3c:	00100070 	.word	0x00100070

08003e40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a46      	ldr	r2, [pc, #280]	; (8003fbc <TIM_Base_SetConfig+0x12c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d017      	beq.n	8003ed8 <TIM_Base_SetConfig+0x48>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eae:	d013      	beq.n	8003ed8 <TIM_Base_SetConfig+0x48>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a43      	ldr	r2, [pc, #268]	; (8003fc0 <TIM_Base_SetConfig+0x130>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00f      	beq.n	8003ed8 <TIM_Base_SetConfig+0x48>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a42      	ldr	r2, [pc, #264]	; (8003fc4 <TIM_Base_SetConfig+0x134>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00b      	beq.n	8003ed8 <TIM_Base_SetConfig+0x48>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a41      	ldr	r2, [pc, #260]	; (8003fc8 <TIM_Base_SetConfig+0x138>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d007      	beq.n	8003ed8 <TIM_Base_SetConfig+0x48>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a40      	ldr	r2, [pc, #256]	; (8003fcc <TIM_Base_SetConfig+0x13c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_Base_SetConfig+0x48>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a3f      	ldr	r2, [pc, #252]	; (8003fd0 <TIM_Base_SetConfig+0x140>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d108      	bne.n	8003eea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a33      	ldr	r2, [pc, #204]	; (8003fbc <TIM_Base_SetConfig+0x12c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d023      	beq.n	8003f3a <TIM_Base_SetConfig+0xaa>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef8:	d01f      	beq.n	8003f3a <TIM_Base_SetConfig+0xaa>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a30      	ldr	r2, [pc, #192]	; (8003fc0 <TIM_Base_SetConfig+0x130>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01b      	beq.n	8003f3a <TIM_Base_SetConfig+0xaa>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2f      	ldr	r2, [pc, #188]	; (8003fc4 <TIM_Base_SetConfig+0x134>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d017      	beq.n	8003f3a <TIM_Base_SetConfig+0xaa>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a2e      	ldr	r2, [pc, #184]	; (8003fc8 <TIM_Base_SetConfig+0x138>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <TIM_Base_SetConfig+0xaa>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a2d      	ldr	r2, [pc, #180]	; (8003fcc <TIM_Base_SetConfig+0x13c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00f      	beq.n	8003f3a <TIM_Base_SetConfig+0xaa>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a2d      	ldr	r2, [pc, #180]	; (8003fd4 <TIM_Base_SetConfig+0x144>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00b      	beq.n	8003f3a <TIM_Base_SetConfig+0xaa>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2c      	ldr	r2, [pc, #176]	; (8003fd8 <TIM_Base_SetConfig+0x148>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d007      	beq.n	8003f3a <TIM_Base_SetConfig+0xaa>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2b      	ldr	r2, [pc, #172]	; (8003fdc <TIM_Base_SetConfig+0x14c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <TIM_Base_SetConfig+0xaa>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a26      	ldr	r2, [pc, #152]	; (8003fd0 <TIM_Base_SetConfig+0x140>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d108      	bne.n	8003f4c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <TIM_Base_SetConfig+0x12c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d013      	beq.n	8003fa0 <TIM_Base_SetConfig+0x110>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a14      	ldr	r2, [pc, #80]	; (8003fcc <TIM_Base_SetConfig+0x13c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00f      	beq.n	8003fa0 <TIM_Base_SetConfig+0x110>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <TIM_Base_SetConfig+0x144>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00b      	beq.n	8003fa0 <TIM_Base_SetConfig+0x110>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <TIM_Base_SetConfig+0x148>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <TIM_Base_SetConfig+0x110>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <TIM_Base_SetConfig+0x14c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_Base_SetConfig+0x110>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a0d      	ldr	r2, [pc, #52]	; (8003fd0 <TIM_Base_SetConfig+0x140>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d103      	bne.n	8003fa8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	615a      	str	r2, [r3, #20]
}
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40000c00 	.word	0x40000c00
 8003fcc:	40013400 	.word	0x40013400
 8003fd0:	40015000 	.word	0x40015000
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	40014400 	.word	0x40014400
 8003fdc:	40014800 	.word	0x40014800

08003fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f023 0201 	bic.w	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f023 030a 	bic.w	r3, r3, #10
 800401c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800403e:	b480      	push	{r7}
 8004040:	b087      	sub	sp, #28
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f023 0210 	bic.w	r2, r3, #16
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	031b      	lsls	r3, r3, #12
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800407a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	f043 0307 	orr.w	r3, r3, #7
 80040c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	609a      	str	r2, [r3, #8]
}
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	021a      	lsls	r2, r3, #8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4313      	orrs	r3, r2
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	609a      	str	r2, [r3, #8]
}
 800410c:	bf00      	nop
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800412c:	2302      	movs	r3, #2
 800412e:	e074      	b.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a34      	ldr	r2, [pc, #208]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d009      	beq.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a33      	ldr	r2, [pc, #204]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a31      	ldr	r2, [pc, #196]	; (8004230 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d108      	bne.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004174:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a21      	ldr	r2, [pc, #132]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d022      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b0:	d01d      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1f      	ldr	r2, [pc, #124]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d018      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1d      	ldr	r2, [pc, #116]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1c      	ldr	r2, [pc, #112]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a15      	ldr	r2, [pc, #84]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d009      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a18      	ldr	r2, [pc, #96]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a11      	ldr	r2, [pc, #68]	; (8004230 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10c      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40012c00 	.word	0x40012c00
 800422c:	40013400 	.word	0x40013400
 8004230:	40015000 	.word	0x40015000
 8004234:	40000400 	.word	0x40000400
 8004238:	40000800 	.word	0x40000800
 800423c:	40000c00 	.word	0x40000c00
 8004240:	40014000 	.word	0x40014000

08004244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e042      	b.n	8004368 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d106      	bne.n	80042fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7fc fd69 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2224      	movs	r2, #36	; 0x24
 80042fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f82c 	bl	8004370 <UART_SetConfig>
 8004318:	4603      	mov	r3, r0
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e022      	b.n	8004368 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f001 fa0e 	bl	800574c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800433e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800434e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f001 fa95 	bl	8005890 <UART_CheckIdleState>
 8004366:	4603      	mov	r3, r0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004370:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004374:	b08a      	sub	sp, #40	; 0x28
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	4313      	orrs	r3, r2
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a4:	4313      	orrs	r3, r2
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4baa      	ldr	r3, [pc, #680]	; (8004658 <UART_SetConfig+0x2e8>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a9f      	ldr	r2, [pc, #636]	; (800465c <UART_SetConfig+0x2ec>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e8:	4313      	orrs	r3, r2
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80043f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004400:	430b      	orrs	r3, r1
 8004402:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	f023 010f 	bic.w	r1, r3, #15
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a90      	ldr	r2, [pc, #576]	; (8004660 <UART_SetConfig+0x2f0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d126      	bne.n	8004472 <UART_SetConfig+0x102>
 8004424:	4b8f      	ldr	r3, [pc, #572]	; (8004664 <UART_SetConfig+0x2f4>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	2b03      	cmp	r3, #3
 8004430:	d81a      	bhi.n	8004468 <UART_SetConfig+0xf8>
 8004432:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <UART_SetConfig+0xc8>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	08004449 	.word	0x08004449
 800443c:	08004459 	.word	0x08004459
 8004440:	08004451 	.word	0x08004451
 8004444:	08004461 	.word	0x08004461
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800444e:	e116      	b.n	800467e <UART_SetConfig+0x30e>
 8004450:	2302      	movs	r3, #2
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004456:	e112      	b.n	800467e <UART_SetConfig+0x30e>
 8004458:	2304      	movs	r3, #4
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445e:	e10e      	b.n	800467e <UART_SetConfig+0x30e>
 8004460:	2308      	movs	r3, #8
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004466:	e10a      	b.n	800467e <UART_SetConfig+0x30e>
 8004468:	2310      	movs	r3, #16
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446e:	bf00      	nop
 8004470:	e105      	b.n	800467e <UART_SetConfig+0x30e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a7c      	ldr	r2, [pc, #496]	; (8004668 <UART_SetConfig+0x2f8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d138      	bne.n	80044ee <UART_SetConfig+0x17e>
 800447c:	4b79      	ldr	r3, [pc, #484]	; (8004664 <UART_SetConfig+0x2f4>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	2b0c      	cmp	r3, #12
 8004488:	d82c      	bhi.n	80044e4 <UART_SetConfig+0x174>
 800448a:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <UART_SetConfig+0x120>)
 800448c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004490:	080044c5 	.word	0x080044c5
 8004494:	080044e5 	.word	0x080044e5
 8004498:	080044e5 	.word	0x080044e5
 800449c:	080044e5 	.word	0x080044e5
 80044a0:	080044d5 	.word	0x080044d5
 80044a4:	080044e5 	.word	0x080044e5
 80044a8:	080044e5 	.word	0x080044e5
 80044ac:	080044e5 	.word	0x080044e5
 80044b0:	080044cd 	.word	0x080044cd
 80044b4:	080044e5 	.word	0x080044e5
 80044b8:	080044e5 	.word	0x080044e5
 80044bc:	080044e5 	.word	0x080044e5
 80044c0:	080044dd 	.word	0x080044dd
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ca:	e0d8      	b.n	800467e <UART_SetConfig+0x30e>
 80044cc:	2302      	movs	r3, #2
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e0d4      	b.n	800467e <UART_SetConfig+0x30e>
 80044d4:	2304      	movs	r3, #4
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e0d0      	b.n	800467e <UART_SetConfig+0x30e>
 80044dc:	2308      	movs	r3, #8
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e2:	e0cc      	b.n	800467e <UART_SetConfig+0x30e>
 80044e4:	2310      	movs	r3, #16
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	bf00      	nop
 80044ec:	e0c7      	b.n	800467e <UART_SetConfig+0x30e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a5e      	ldr	r2, [pc, #376]	; (800466c <UART_SetConfig+0x2fc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d125      	bne.n	8004544 <UART_SetConfig+0x1d4>
 80044f8:	4b5a      	ldr	r3, [pc, #360]	; (8004664 <UART_SetConfig+0x2f4>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004502:	2b10      	cmp	r3, #16
 8004504:	d011      	beq.n	800452a <UART_SetConfig+0x1ba>
 8004506:	2b10      	cmp	r3, #16
 8004508:	d802      	bhi.n	8004510 <UART_SetConfig+0x1a0>
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <UART_SetConfig+0x1aa>
 800450e:	e014      	b.n	800453a <UART_SetConfig+0x1ca>
 8004510:	2b20      	cmp	r3, #32
 8004512:	d006      	beq.n	8004522 <UART_SetConfig+0x1b2>
 8004514:	2b30      	cmp	r3, #48	; 0x30
 8004516:	d00c      	beq.n	8004532 <UART_SetConfig+0x1c2>
 8004518:	e00f      	b.n	800453a <UART_SetConfig+0x1ca>
 800451a:	2300      	movs	r3, #0
 800451c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004520:	e0ad      	b.n	800467e <UART_SetConfig+0x30e>
 8004522:	2302      	movs	r3, #2
 8004524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004528:	e0a9      	b.n	800467e <UART_SetConfig+0x30e>
 800452a:	2304      	movs	r3, #4
 800452c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004530:	e0a5      	b.n	800467e <UART_SetConfig+0x30e>
 8004532:	2308      	movs	r3, #8
 8004534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004538:	e0a1      	b.n	800467e <UART_SetConfig+0x30e>
 800453a:	2310      	movs	r3, #16
 800453c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004540:	bf00      	nop
 8004542:	e09c      	b.n	800467e <UART_SetConfig+0x30e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a49      	ldr	r2, [pc, #292]	; (8004670 <UART_SetConfig+0x300>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d125      	bne.n	800459a <UART_SetConfig+0x22a>
 800454e:	4b45      	ldr	r3, [pc, #276]	; (8004664 <UART_SetConfig+0x2f4>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004558:	2b40      	cmp	r3, #64	; 0x40
 800455a:	d011      	beq.n	8004580 <UART_SetConfig+0x210>
 800455c:	2b40      	cmp	r3, #64	; 0x40
 800455e:	d802      	bhi.n	8004566 <UART_SetConfig+0x1f6>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <UART_SetConfig+0x200>
 8004564:	e014      	b.n	8004590 <UART_SetConfig+0x220>
 8004566:	2b80      	cmp	r3, #128	; 0x80
 8004568:	d006      	beq.n	8004578 <UART_SetConfig+0x208>
 800456a:	2bc0      	cmp	r3, #192	; 0xc0
 800456c:	d00c      	beq.n	8004588 <UART_SetConfig+0x218>
 800456e:	e00f      	b.n	8004590 <UART_SetConfig+0x220>
 8004570:	2300      	movs	r3, #0
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004576:	e082      	b.n	800467e <UART_SetConfig+0x30e>
 8004578:	2302      	movs	r3, #2
 800457a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457e:	e07e      	b.n	800467e <UART_SetConfig+0x30e>
 8004580:	2304      	movs	r3, #4
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004586:	e07a      	b.n	800467e <UART_SetConfig+0x30e>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458e:	e076      	b.n	800467e <UART_SetConfig+0x30e>
 8004590:	2310      	movs	r3, #16
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004596:	bf00      	nop
 8004598:	e071      	b.n	800467e <UART_SetConfig+0x30e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a35      	ldr	r2, [pc, #212]	; (8004674 <UART_SetConfig+0x304>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d129      	bne.n	80045f8 <UART_SetConfig+0x288>
 80045a4:	4b2f      	ldr	r3, [pc, #188]	; (8004664 <UART_SetConfig+0x2f4>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b2:	d014      	beq.n	80045de <UART_SetConfig+0x26e>
 80045b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b8:	d802      	bhi.n	80045c0 <UART_SetConfig+0x250>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <UART_SetConfig+0x25e>
 80045be:	e016      	b.n	80045ee <UART_SetConfig+0x27e>
 80045c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c4:	d007      	beq.n	80045d6 <UART_SetConfig+0x266>
 80045c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ca:	d00c      	beq.n	80045e6 <UART_SetConfig+0x276>
 80045cc:	e00f      	b.n	80045ee <UART_SetConfig+0x27e>
 80045ce:	2300      	movs	r3, #0
 80045d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d4:	e053      	b.n	800467e <UART_SetConfig+0x30e>
 80045d6:	2302      	movs	r3, #2
 80045d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045dc:	e04f      	b.n	800467e <UART_SetConfig+0x30e>
 80045de:	2304      	movs	r3, #4
 80045e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e4:	e04b      	b.n	800467e <UART_SetConfig+0x30e>
 80045e6:	2308      	movs	r3, #8
 80045e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ec:	e047      	b.n	800467e <UART_SetConfig+0x30e>
 80045ee:	2310      	movs	r3, #16
 80045f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f4:	bf00      	nop
 80045f6:	e042      	b.n	800467e <UART_SetConfig+0x30e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a17      	ldr	r2, [pc, #92]	; (800465c <UART_SetConfig+0x2ec>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d13a      	bne.n	8004678 <UART_SetConfig+0x308>
 8004602:	4b18      	ldr	r3, [pc, #96]	; (8004664 <UART_SetConfig+0x2f4>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800460c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004610:	d014      	beq.n	800463c <UART_SetConfig+0x2cc>
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004616:	d802      	bhi.n	800461e <UART_SetConfig+0x2ae>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <UART_SetConfig+0x2bc>
 800461c:	e016      	b.n	800464c <UART_SetConfig+0x2dc>
 800461e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004622:	d007      	beq.n	8004634 <UART_SetConfig+0x2c4>
 8004624:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004628:	d00c      	beq.n	8004644 <UART_SetConfig+0x2d4>
 800462a:	e00f      	b.n	800464c <UART_SetConfig+0x2dc>
 800462c:	2300      	movs	r3, #0
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004632:	e024      	b.n	800467e <UART_SetConfig+0x30e>
 8004634:	2302      	movs	r3, #2
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463a:	e020      	b.n	800467e <UART_SetConfig+0x30e>
 800463c:	2304      	movs	r3, #4
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004642:	e01c      	b.n	800467e <UART_SetConfig+0x30e>
 8004644:	2308      	movs	r3, #8
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e018      	b.n	800467e <UART_SetConfig+0x30e>
 800464c:	2310      	movs	r3, #16
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	bf00      	nop
 8004654:	e013      	b.n	800467e <UART_SetConfig+0x30e>
 8004656:	bf00      	nop
 8004658:	cfff69f3 	.word	0xcfff69f3
 800465c:	40008000 	.word	0x40008000
 8004660:	40013800 	.word	0x40013800
 8004664:	40021000 	.word	0x40021000
 8004668:	40004400 	.word	0x40004400
 800466c:	40004800 	.word	0x40004800
 8004670:	40004c00 	.word	0x40004c00
 8004674:	40005000 	.word	0x40005000
 8004678:	2310      	movs	r3, #16
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a86      	ldr	r2, [pc, #536]	; (800489c <UART_SetConfig+0x52c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	f040 8422 	bne.w	8004ece <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800468a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800468e:	2b08      	cmp	r3, #8
 8004690:	f200 8173 	bhi.w	800497a <UART_SetConfig+0x60a>
 8004694:	a201      	add	r2, pc, #4	; (adr r2, 800469c <UART_SetConfig+0x32c>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046c1 	.word	0x080046c1
 80046a0:	0800497b 	.word	0x0800497b
 80046a4:	08004763 	.word	0x08004763
 80046a8:	0800497b 	.word	0x0800497b
 80046ac:	080047fb 	.word	0x080047fb
 80046b0:	0800497b 	.word	0x0800497b
 80046b4:	0800497b 	.word	0x0800497b
 80046b8:	0800497b 	.word	0x0800497b
 80046bc:	080048cd 	.word	0x080048cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80046c0:	f7fe fdac 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d044      	beq.n	8004758 <UART_SetConfig+0x3e8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d03e      	beq.n	8004754 <UART_SetConfig+0x3e4>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d038      	beq.n	8004750 <UART_SetConfig+0x3e0>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d032      	beq.n	800474c <UART_SetConfig+0x3dc>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d02c      	beq.n	8004748 <UART_SetConfig+0x3d8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d026      	beq.n	8004744 <UART_SetConfig+0x3d4>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	2b06      	cmp	r3, #6
 80046fc:	d020      	beq.n	8004740 <UART_SetConfig+0x3d0>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	2b07      	cmp	r3, #7
 8004704:	d01a      	beq.n	800473c <UART_SetConfig+0x3cc>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	2b08      	cmp	r3, #8
 800470c:	d014      	beq.n	8004738 <UART_SetConfig+0x3c8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	2b09      	cmp	r3, #9
 8004714:	d00e      	beq.n	8004734 <UART_SetConfig+0x3c4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	2b0a      	cmp	r3, #10
 800471c:	d008      	beq.n	8004730 <UART_SetConfig+0x3c0>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	2b0b      	cmp	r3, #11
 8004724:	d102      	bne.n	800472c <UART_SetConfig+0x3bc>
 8004726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800472a:	e016      	b.n	800475a <UART_SetConfig+0x3ea>
 800472c:	2301      	movs	r3, #1
 800472e:	e014      	b.n	800475a <UART_SetConfig+0x3ea>
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	e012      	b.n	800475a <UART_SetConfig+0x3ea>
 8004734:	2340      	movs	r3, #64	; 0x40
 8004736:	e010      	b.n	800475a <UART_SetConfig+0x3ea>
 8004738:	2320      	movs	r3, #32
 800473a:	e00e      	b.n	800475a <UART_SetConfig+0x3ea>
 800473c:	2310      	movs	r3, #16
 800473e:	e00c      	b.n	800475a <UART_SetConfig+0x3ea>
 8004740:	230c      	movs	r3, #12
 8004742:	e00a      	b.n	800475a <UART_SetConfig+0x3ea>
 8004744:	230a      	movs	r3, #10
 8004746:	e008      	b.n	800475a <UART_SetConfig+0x3ea>
 8004748:	2308      	movs	r3, #8
 800474a:	e006      	b.n	800475a <UART_SetConfig+0x3ea>
 800474c:	2306      	movs	r3, #6
 800474e:	e004      	b.n	800475a <UART_SetConfig+0x3ea>
 8004750:	2304      	movs	r3, #4
 8004752:	e002      	b.n	800475a <UART_SetConfig+0x3ea>
 8004754:	2302      	movs	r3, #2
 8004756:	e000      	b.n	800475a <UART_SetConfig+0x3ea>
 8004758:	2301      	movs	r3, #1
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	617b      	str	r3, [r7, #20]
        break;
 8004760:	e10e      	b.n	8004980 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	2b00      	cmp	r3, #0
 8004768:	d044      	beq.n	80047f4 <UART_SetConfig+0x484>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	2b01      	cmp	r3, #1
 8004770:	d03e      	beq.n	80047f0 <UART_SetConfig+0x480>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	2b02      	cmp	r3, #2
 8004778:	d038      	beq.n	80047ec <UART_SetConfig+0x47c>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	2b03      	cmp	r3, #3
 8004780:	d032      	beq.n	80047e8 <UART_SetConfig+0x478>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	2b04      	cmp	r3, #4
 8004788:	d02c      	beq.n	80047e4 <UART_SetConfig+0x474>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	2b05      	cmp	r3, #5
 8004790:	d026      	beq.n	80047e0 <UART_SetConfig+0x470>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	2b06      	cmp	r3, #6
 8004798:	d020      	beq.n	80047dc <UART_SetConfig+0x46c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	2b07      	cmp	r3, #7
 80047a0:	d01a      	beq.n	80047d8 <UART_SetConfig+0x468>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d014      	beq.n	80047d4 <UART_SetConfig+0x464>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	2b09      	cmp	r3, #9
 80047b0:	d00e      	beq.n	80047d0 <UART_SetConfig+0x460>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	2b0a      	cmp	r3, #10
 80047b8:	d008      	beq.n	80047cc <UART_SetConfig+0x45c>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	2b0b      	cmp	r3, #11
 80047c0:	d102      	bne.n	80047c8 <UART_SetConfig+0x458>
 80047c2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80047c6:	e016      	b.n	80047f6 <UART_SetConfig+0x486>
 80047c8:	4b35      	ldr	r3, [pc, #212]	; (80048a0 <UART_SetConfig+0x530>)
 80047ca:	e014      	b.n	80047f6 <UART_SetConfig+0x486>
 80047cc:	4b35      	ldr	r3, [pc, #212]	; (80048a4 <UART_SetConfig+0x534>)
 80047ce:	e012      	b.n	80047f6 <UART_SetConfig+0x486>
 80047d0:	4b35      	ldr	r3, [pc, #212]	; (80048a8 <UART_SetConfig+0x538>)
 80047d2:	e010      	b.n	80047f6 <UART_SetConfig+0x486>
 80047d4:	4b35      	ldr	r3, [pc, #212]	; (80048ac <UART_SetConfig+0x53c>)
 80047d6:	e00e      	b.n	80047f6 <UART_SetConfig+0x486>
 80047d8:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <UART_SetConfig+0x540>)
 80047da:	e00c      	b.n	80047f6 <UART_SetConfig+0x486>
 80047dc:	4b35      	ldr	r3, [pc, #212]	; (80048b4 <UART_SetConfig+0x544>)
 80047de:	e00a      	b.n	80047f6 <UART_SetConfig+0x486>
 80047e0:	4b35      	ldr	r3, [pc, #212]	; (80048b8 <UART_SetConfig+0x548>)
 80047e2:	e008      	b.n	80047f6 <UART_SetConfig+0x486>
 80047e4:	4b35      	ldr	r3, [pc, #212]	; (80048bc <UART_SetConfig+0x54c>)
 80047e6:	e006      	b.n	80047f6 <UART_SetConfig+0x486>
 80047e8:	4b35      	ldr	r3, [pc, #212]	; (80048c0 <UART_SetConfig+0x550>)
 80047ea:	e004      	b.n	80047f6 <UART_SetConfig+0x486>
 80047ec:	4b35      	ldr	r3, [pc, #212]	; (80048c4 <UART_SetConfig+0x554>)
 80047ee:	e002      	b.n	80047f6 <UART_SetConfig+0x486>
 80047f0:	4b35      	ldr	r3, [pc, #212]	; (80048c8 <UART_SetConfig+0x558>)
 80047f2:	e000      	b.n	80047f6 <UART_SetConfig+0x486>
 80047f4:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <UART_SetConfig+0x530>)
 80047f6:	617b      	str	r3, [r7, #20]
        break;
 80047f8:	e0c2      	b.n	8004980 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80047fa:	f7fe fca1 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80047fe:	4602      	mov	r2, r0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d044      	beq.n	8004892 <UART_SetConfig+0x522>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	2b01      	cmp	r3, #1
 800480e:	d03e      	beq.n	800488e <UART_SetConfig+0x51e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	2b02      	cmp	r3, #2
 8004816:	d038      	beq.n	800488a <UART_SetConfig+0x51a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	2b03      	cmp	r3, #3
 800481e:	d032      	beq.n	8004886 <UART_SetConfig+0x516>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	2b04      	cmp	r3, #4
 8004826:	d02c      	beq.n	8004882 <UART_SetConfig+0x512>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	2b05      	cmp	r3, #5
 800482e:	d026      	beq.n	800487e <UART_SetConfig+0x50e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	2b06      	cmp	r3, #6
 8004836:	d020      	beq.n	800487a <UART_SetConfig+0x50a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	2b07      	cmp	r3, #7
 800483e:	d01a      	beq.n	8004876 <UART_SetConfig+0x506>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	2b08      	cmp	r3, #8
 8004846:	d014      	beq.n	8004872 <UART_SetConfig+0x502>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	2b09      	cmp	r3, #9
 800484e:	d00e      	beq.n	800486e <UART_SetConfig+0x4fe>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	2b0a      	cmp	r3, #10
 8004856:	d008      	beq.n	800486a <UART_SetConfig+0x4fa>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	2b0b      	cmp	r3, #11
 800485e:	d102      	bne.n	8004866 <UART_SetConfig+0x4f6>
 8004860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004864:	e016      	b.n	8004894 <UART_SetConfig+0x524>
 8004866:	2301      	movs	r3, #1
 8004868:	e014      	b.n	8004894 <UART_SetConfig+0x524>
 800486a:	2380      	movs	r3, #128	; 0x80
 800486c:	e012      	b.n	8004894 <UART_SetConfig+0x524>
 800486e:	2340      	movs	r3, #64	; 0x40
 8004870:	e010      	b.n	8004894 <UART_SetConfig+0x524>
 8004872:	2320      	movs	r3, #32
 8004874:	e00e      	b.n	8004894 <UART_SetConfig+0x524>
 8004876:	2310      	movs	r3, #16
 8004878:	e00c      	b.n	8004894 <UART_SetConfig+0x524>
 800487a:	230c      	movs	r3, #12
 800487c:	e00a      	b.n	8004894 <UART_SetConfig+0x524>
 800487e:	230a      	movs	r3, #10
 8004880:	e008      	b.n	8004894 <UART_SetConfig+0x524>
 8004882:	2308      	movs	r3, #8
 8004884:	e006      	b.n	8004894 <UART_SetConfig+0x524>
 8004886:	2306      	movs	r3, #6
 8004888:	e004      	b.n	8004894 <UART_SetConfig+0x524>
 800488a:	2304      	movs	r3, #4
 800488c:	e002      	b.n	8004894 <UART_SetConfig+0x524>
 800488e:	2302      	movs	r3, #2
 8004890:	e000      	b.n	8004894 <UART_SetConfig+0x524>
 8004892:	2301      	movs	r3, #1
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]
        break;
 800489a:	e071      	b.n	8004980 <UART_SetConfig+0x610>
 800489c:	40008000 	.word	0x40008000
 80048a0:	00f42400 	.word	0x00f42400
 80048a4:	0001e848 	.word	0x0001e848
 80048a8:	0003d090 	.word	0x0003d090
 80048ac:	0007a120 	.word	0x0007a120
 80048b0:	000f4240 	.word	0x000f4240
 80048b4:	00145855 	.word	0x00145855
 80048b8:	00186a00 	.word	0x00186a00
 80048bc:	001e8480 	.word	0x001e8480
 80048c0:	0028b0aa 	.word	0x0028b0aa
 80048c4:	003d0900 	.word	0x003d0900
 80048c8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d04e      	beq.n	8004972 <UART_SetConfig+0x602>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d047      	beq.n	800496c <UART_SetConfig+0x5fc>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d040      	beq.n	8004966 <UART_SetConfig+0x5f6>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d039      	beq.n	8004960 <UART_SetConfig+0x5f0>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d032      	beq.n	800495a <UART_SetConfig+0x5ea>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	2b05      	cmp	r3, #5
 80048fa:	d02b      	beq.n	8004954 <UART_SetConfig+0x5e4>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	2b06      	cmp	r3, #6
 8004902:	d024      	beq.n	800494e <UART_SetConfig+0x5de>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	2b07      	cmp	r3, #7
 800490a:	d01d      	beq.n	8004948 <UART_SetConfig+0x5d8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	2b08      	cmp	r3, #8
 8004912:	d016      	beq.n	8004942 <UART_SetConfig+0x5d2>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	2b09      	cmp	r3, #9
 800491a:	d00f      	beq.n	800493c <UART_SetConfig+0x5cc>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	2b0a      	cmp	r3, #10
 8004922:	d008      	beq.n	8004936 <UART_SetConfig+0x5c6>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	2b0b      	cmp	r3, #11
 800492a:	d101      	bne.n	8004930 <UART_SetConfig+0x5c0>
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	e022      	b.n	8004976 <UART_SetConfig+0x606>
 8004930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004934:	e01f      	b.n	8004976 <UART_SetConfig+0x606>
 8004936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800493a:	e01c      	b.n	8004976 <UART_SetConfig+0x606>
 800493c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004940:	e019      	b.n	8004976 <UART_SetConfig+0x606>
 8004942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004946:	e016      	b.n	8004976 <UART_SetConfig+0x606>
 8004948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800494c:	e013      	b.n	8004976 <UART_SetConfig+0x606>
 800494e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004952:	e010      	b.n	8004976 <UART_SetConfig+0x606>
 8004954:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004958:	e00d      	b.n	8004976 <UART_SetConfig+0x606>
 800495a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800495e:	e00a      	b.n	8004976 <UART_SetConfig+0x606>
 8004960:	f241 5355 	movw	r3, #5461	; 0x1555
 8004964:	e007      	b.n	8004976 <UART_SetConfig+0x606>
 8004966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800496a:	e004      	b.n	8004976 <UART_SetConfig+0x606>
 800496c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004970:	e001      	b.n	8004976 <UART_SetConfig+0x606>
 8004972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004976:	617b      	str	r3, [r7, #20]
        break;
 8004978:	e002      	b.n	8004980 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	76fb      	strb	r3, [r7, #27]
        break;
 800497e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 86b7 	beq.w	80056f6 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	4613      	mov	r3, r2
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	4413      	add	r3, r2
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	429a      	cmp	r2, r3
 8004996:	d305      	bcc.n	80049a4 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d903      	bls.n	80049ac <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	76fb      	strb	r3, [r7, #27]
 80049a8:	f000 bea5 	b.w	80056f6 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 80049ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	f200 8277 	bhi.w	8004ea4 <UART_SetConfig+0xb34>
 80049b6:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <UART_SetConfig+0x64c>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	080049e1 	.word	0x080049e1
 80049c0:	08004ea5 	.word	0x08004ea5
 80049c4:	08004b1f 	.word	0x08004b1f
 80049c8:	08004ea5 	.word	0x08004ea5
 80049cc:	08004c15 	.word	0x08004c15
 80049d0:	08004ea5 	.word	0x08004ea5
 80049d4:	08004ea5 	.word	0x08004ea5
 80049d8:	08004ea5 	.word	0x08004ea5
 80049dc:	08004d53 	.word	0x08004d53
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80049e0:	f7fe fc1c 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 80049e4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f04f 0100 	mov.w	r1, #0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d067      	beq.n	8004ac6 <UART_SetConfig+0x756>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d05e      	beq.n	8004abc <UART_SetConfig+0x74c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d055      	beq.n	8004ab2 <UART_SetConfig+0x742>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d04c      	beq.n	8004aa8 <UART_SetConfig+0x738>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d043      	beq.n	8004a9e <UART_SetConfig+0x72e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	2b05      	cmp	r3, #5
 8004a1c:	d03a      	beq.n	8004a94 <UART_SetConfig+0x724>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d031      	beq.n	8004a8a <UART_SetConfig+0x71a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	2b07      	cmp	r3, #7
 8004a2c:	d028      	beq.n	8004a80 <UART_SetConfig+0x710>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d01f      	beq.n	8004a76 <UART_SetConfig+0x706>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	2b09      	cmp	r3, #9
 8004a3c:	d016      	beq.n	8004a6c <UART_SetConfig+0x6fc>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	2b0a      	cmp	r3, #10
 8004a44:	d00d      	beq.n	8004a62 <UART_SetConfig+0x6f2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	2b0b      	cmp	r3, #11
 8004a4c:	d104      	bne.n	8004a58 <UART_SetConfig+0x6e8>
 8004a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a52:	f04f 0400 	mov.w	r4, #0
 8004a56:	e03a      	b.n	8004ace <UART_SetConfig+0x75e>
 8004a58:	f04f 0301 	mov.w	r3, #1
 8004a5c:	f04f 0400 	mov.w	r4, #0
 8004a60:	e035      	b.n	8004ace <UART_SetConfig+0x75e>
 8004a62:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004a66:	f04f 0400 	mov.w	r4, #0
 8004a6a:	e030      	b.n	8004ace <UART_SetConfig+0x75e>
 8004a6c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004a70:	f04f 0400 	mov.w	r4, #0
 8004a74:	e02b      	b.n	8004ace <UART_SetConfig+0x75e>
 8004a76:	f04f 0320 	mov.w	r3, #32
 8004a7a:	f04f 0400 	mov.w	r4, #0
 8004a7e:	e026      	b.n	8004ace <UART_SetConfig+0x75e>
 8004a80:	f04f 0310 	mov.w	r3, #16
 8004a84:	f04f 0400 	mov.w	r4, #0
 8004a88:	e021      	b.n	8004ace <UART_SetConfig+0x75e>
 8004a8a:	f04f 030c 	mov.w	r3, #12
 8004a8e:	f04f 0400 	mov.w	r4, #0
 8004a92:	e01c      	b.n	8004ace <UART_SetConfig+0x75e>
 8004a94:	f04f 030a 	mov.w	r3, #10
 8004a98:	f04f 0400 	mov.w	r4, #0
 8004a9c:	e017      	b.n	8004ace <UART_SetConfig+0x75e>
 8004a9e:	f04f 0308 	mov.w	r3, #8
 8004aa2:	f04f 0400 	mov.w	r4, #0
 8004aa6:	e012      	b.n	8004ace <UART_SetConfig+0x75e>
 8004aa8:	f04f 0306 	mov.w	r3, #6
 8004aac:	f04f 0400 	mov.w	r4, #0
 8004ab0:	e00d      	b.n	8004ace <UART_SetConfig+0x75e>
 8004ab2:	f04f 0304 	mov.w	r3, #4
 8004ab6:	f04f 0400 	mov.w	r4, #0
 8004aba:	e008      	b.n	8004ace <UART_SetConfig+0x75e>
 8004abc:	f04f 0302 	mov.w	r3, #2
 8004ac0:	f04f 0400 	mov.w	r4, #0
 8004ac4:	e003      	b.n	8004ace <UART_SetConfig+0x75e>
 8004ac6:	f04f 0301 	mov.w	r3, #1
 8004aca:	f04f 0400 	mov.w	r4, #0
 8004ace:	461a      	mov	r2, r3
 8004ad0:	4623      	mov	r3, r4
 8004ad2:	f7fb fba1 	bl	8000218 <__aeabi_uldivmod>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	460c      	mov	r4, r1
 8004ada:	4619      	mov	r1, r3
 8004adc:	4622      	mov	r2, r4
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	f04f 0400 	mov.w	r4, #0
 8004ae6:	0214      	lsls	r4, r2, #8
 8004ae8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004aec:	020b      	lsls	r3, r1, #8
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6852      	ldr	r2, [r2, #4]
 8004af2:	0852      	lsrs	r2, r2, #1
 8004af4:	4611      	mov	r1, r2
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	eb13 0b01 	adds.w	fp, r3, r1
 8004afe:	eb44 0c02 	adc.w	ip, r4, r2
 8004b02:	4658      	mov	r0, fp
 8004b04:	4661      	mov	r1, ip
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f04f 0400 	mov.w	r4, #0
 8004b0e:	461a      	mov	r2, r3
 8004b10:	4623      	mov	r3, r4
 8004b12:	f7fb fb81 	bl	8000218 <__aeabi_uldivmod>
 8004b16:	4603      	mov	r3, r0
 8004b18:	460c      	mov	r4, r1
 8004b1a:	61fb      	str	r3, [r7, #28]
            break;
 8004b1c:	e1c5      	b.n	8004eaa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d05b      	beq.n	8004bde <UART_SetConfig+0x86e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d053      	beq.n	8004bd6 <UART_SetConfig+0x866>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d04b      	beq.n	8004bce <UART_SetConfig+0x85e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d043      	beq.n	8004bc6 <UART_SetConfig+0x856>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d03b      	beq.n	8004bbe <UART_SetConfig+0x84e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d033      	beq.n	8004bb6 <UART_SetConfig+0x846>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2b06      	cmp	r3, #6
 8004b54:	d02b      	beq.n	8004bae <UART_SetConfig+0x83e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	2b07      	cmp	r3, #7
 8004b5c:	d023      	beq.n	8004ba6 <UART_SetConfig+0x836>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d01b      	beq.n	8004b9e <UART_SetConfig+0x82e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	2b09      	cmp	r3, #9
 8004b6c:	d013      	beq.n	8004b96 <UART_SetConfig+0x826>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	2b0a      	cmp	r3, #10
 8004b74:	d00b      	beq.n	8004b8e <UART_SetConfig+0x81e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	2b0b      	cmp	r3, #11
 8004b7c:	d103      	bne.n	8004b86 <UART_SetConfig+0x816>
 8004b7e:	4bae      	ldr	r3, [pc, #696]	; (8004e38 <UART_SetConfig+0xac8>)
 8004b80:	f04f 0400 	mov.w	r4, #0
 8004b84:	e02e      	b.n	8004be4 <UART_SetConfig+0x874>
 8004b86:	4bad      	ldr	r3, [pc, #692]	; (8004e3c <UART_SetConfig+0xacc>)
 8004b88:	f04f 0400 	mov.w	r4, #0
 8004b8c:	e02a      	b.n	8004be4 <UART_SetConfig+0x874>
 8004b8e:	4bac      	ldr	r3, [pc, #688]	; (8004e40 <UART_SetConfig+0xad0>)
 8004b90:	f04f 0400 	mov.w	r4, #0
 8004b94:	e026      	b.n	8004be4 <UART_SetConfig+0x874>
 8004b96:	4bab      	ldr	r3, [pc, #684]	; (8004e44 <UART_SetConfig+0xad4>)
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	e022      	b.n	8004be4 <UART_SetConfig+0x874>
 8004b9e:	4baa      	ldr	r3, [pc, #680]	; (8004e48 <UART_SetConfig+0xad8>)
 8004ba0:	f04f 0400 	mov.w	r4, #0
 8004ba4:	e01e      	b.n	8004be4 <UART_SetConfig+0x874>
 8004ba6:	4ba9      	ldr	r3, [pc, #676]	; (8004e4c <UART_SetConfig+0xadc>)
 8004ba8:	f04f 0400 	mov.w	r4, #0
 8004bac:	e01a      	b.n	8004be4 <UART_SetConfig+0x874>
 8004bae:	a49e      	add	r4, pc, #632	; (adr r4, 8004e28 <UART_SetConfig+0xab8>)
 8004bb0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004bb4:	e016      	b.n	8004be4 <UART_SetConfig+0x874>
 8004bb6:	4ba6      	ldr	r3, [pc, #664]	; (8004e50 <UART_SetConfig+0xae0>)
 8004bb8:	f04f 0400 	mov.w	r4, #0
 8004bbc:	e012      	b.n	8004be4 <UART_SetConfig+0x874>
 8004bbe:	4ba5      	ldr	r3, [pc, #660]	; (8004e54 <UART_SetConfig+0xae4>)
 8004bc0:	f04f 0400 	mov.w	r4, #0
 8004bc4:	e00e      	b.n	8004be4 <UART_SetConfig+0x874>
 8004bc6:	a49a      	add	r4, pc, #616	; (adr r4, 8004e30 <UART_SetConfig+0xac0>)
 8004bc8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004bcc:	e00a      	b.n	8004be4 <UART_SetConfig+0x874>
 8004bce:	4ba2      	ldr	r3, [pc, #648]	; (8004e58 <UART_SetConfig+0xae8>)
 8004bd0:	f04f 0400 	mov.w	r4, #0
 8004bd4:	e006      	b.n	8004be4 <UART_SetConfig+0x874>
 8004bd6:	4ba1      	ldr	r3, [pc, #644]	; (8004e5c <UART_SetConfig+0xaec>)
 8004bd8:	f04f 0400 	mov.w	r4, #0
 8004bdc:	e002      	b.n	8004be4 <UART_SetConfig+0x874>
 8004bde:	4b97      	ldr	r3, [pc, #604]	; (8004e3c <UART_SetConfig+0xacc>)
 8004be0:	f04f 0400 	mov.w	r4, #0
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6852      	ldr	r2, [r2, #4]
 8004be8:	0852      	lsrs	r2, r2, #1
 8004bea:	4611      	mov	r1, r2
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	eb13 0b01 	adds.w	fp, r3, r1
 8004bf4:	eb44 0c02 	adc.w	ip, r4, r2
 8004bf8:	4658      	mov	r0, fp
 8004bfa:	4661      	mov	r1, ip
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f04f 0400 	mov.w	r4, #0
 8004c04:	461a      	mov	r2, r3
 8004c06:	4623      	mov	r3, r4
 8004c08:	f7fb fb06 	bl	8000218 <__aeabi_uldivmod>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	460c      	mov	r4, r1
 8004c10:	61fb      	str	r3, [r7, #28]
            break;
 8004c12:	e14a      	b.n	8004eaa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004c14:	f7fe fa94 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 8004c18:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f04f 0100 	mov.w	r1, #0
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d067      	beq.n	8004cfa <UART_SetConfig+0x98a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d05e      	beq.n	8004cf0 <UART_SetConfig+0x980>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d055      	beq.n	8004ce6 <UART_SetConfig+0x976>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d04c      	beq.n	8004cdc <UART_SetConfig+0x96c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d043      	beq.n	8004cd2 <UART_SetConfig+0x962>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d03a      	beq.n	8004cc8 <UART_SetConfig+0x958>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d031      	beq.n	8004cbe <UART_SetConfig+0x94e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b07      	cmp	r3, #7
 8004c60:	d028      	beq.n	8004cb4 <UART_SetConfig+0x944>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d01f      	beq.n	8004caa <UART_SetConfig+0x93a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	2b09      	cmp	r3, #9
 8004c70:	d016      	beq.n	8004ca0 <UART_SetConfig+0x930>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	2b0a      	cmp	r3, #10
 8004c78:	d00d      	beq.n	8004c96 <UART_SetConfig+0x926>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b0b      	cmp	r3, #11
 8004c80:	d104      	bne.n	8004c8c <UART_SetConfig+0x91c>
 8004c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c86:	f04f 0400 	mov.w	r4, #0
 8004c8a:	e03a      	b.n	8004d02 <UART_SetConfig+0x992>
 8004c8c:	f04f 0301 	mov.w	r3, #1
 8004c90:	f04f 0400 	mov.w	r4, #0
 8004c94:	e035      	b.n	8004d02 <UART_SetConfig+0x992>
 8004c96:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004c9a:	f04f 0400 	mov.w	r4, #0
 8004c9e:	e030      	b.n	8004d02 <UART_SetConfig+0x992>
 8004ca0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004ca4:	f04f 0400 	mov.w	r4, #0
 8004ca8:	e02b      	b.n	8004d02 <UART_SetConfig+0x992>
 8004caa:	f04f 0320 	mov.w	r3, #32
 8004cae:	f04f 0400 	mov.w	r4, #0
 8004cb2:	e026      	b.n	8004d02 <UART_SetConfig+0x992>
 8004cb4:	f04f 0310 	mov.w	r3, #16
 8004cb8:	f04f 0400 	mov.w	r4, #0
 8004cbc:	e021      	b.n	8004d02 <UART_SetConfig+0x992>
 8004cbe:	f04f 030c 	mov.w	r3, #12
 8004cc2:	f04f 0400 	mov.w	r4, #0
 8004cc6:	e01c      	b.n	8004d02 <UART_SetConfig+0x992>
 8004cc8:	f04f 030a 	mov.w	r3, #10
 8004ccc:	f04f 0400 	mov.w	r4, #0
 8004cd0:	e017      	b.n	8004d02 <UART_SetConfig+0x992>
 8004cd2:	f04f 0308 	mov.w	r3, #8
 8004cd6:	f04f 0400 	mov.w	r4, #0
 8004cda:	e012      	b.n	8004d02 <UART_SetConfig+0x992>
 8004cdc:	f04f 0306 	mov.w	r3, #6
 8004ce0:	f04f 0400 	mov.w	r4, #0
 8004ce4:	e00d      	b.n	8004d02 <UART_SetConfig+0x992>
 8004ce6:	f04f 0304 	mov.w	r3, #4
 8004cea:	f04f 0400 	mov.w	r4, #0
 8004cee:	e008      	b.n	8004d02 <UART_SetConfig+0x992>
 8004cf0:	f04f 0302 	mov.w	r3, #2
 8004cf4:	f04f 0400 	mov.w	r4, #0
 8004cf8:	e003      	b.n	8004d02 <UART_SetConfig+0x992>
 8004cfa:	f04f 0301 	mov.w	r3, #1
 8004cfe:	f04f 0400 	mov.w	r4, #0
 8004d02:	461a      	mov	r2, r3
 8004d04:	4623      	mov	r3, r4
 8004d06:	f7fb fa87 	bl	8000218 <__aeabi_uldivmod>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4622      	mov	r2, r4
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	f04f 0400 	mov.w	r4, #0
 8004d1a:	0214      	lsls	r4, r2, #8
 8004d1c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004d20:	020b      	lsls	r3, r1, #8
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6852      	ldr	r2, [r2, #4]
 8004d26:	0852      	lsrs	r2, r2, #1
 8004d28:	4611      	mov	r1, r2
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	eb13 0b01 	adds.w	fp, r3, r1
 8004d32:	eb44 0c02 	adc.w	ip, r4, r2
 8004d36:	4658      	mov	r0, fp
 8004d38:	4661      	mov	r1, ip
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f04f 0400 	mov.w	r4, #0
 8004d42:	461a      	mov	r2, r3
 8004d44:	4623      	mov	r3, r4
 8004d46:	f7fb fa67 	bl	8000218 <__aeabi_uldivmod>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	61fb      	str	r3, [r7, #28]
            break;
 8004d50:	e0ab      	b.n	8004eaa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 8088 	beq.w	8004e6c <UART_SetConfig+0xafc>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d05b      	beq.n	8004e1c <UART_SetConfig+0xaac>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d052      	beq.n	8004e12 <UART_SetConfig+0xaa2>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d04a      	beq.n	8004e0a <UART_SetConfig+0xa9a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d041      	beq.n	8004e00 <UART_SetConfig+0xa90>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	2b05      	cmp	r3, #5
 8004d82:	d039      	beq.n	8004df8 <UART_SetConfig+0xa88>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	2b06      	cmp	r3, #6
 8004d8a:	d031      	beq.n	8004df0 <UART_SetConfig+0xa80>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	2b07      	cmp	r3, #7
 8004d92:	d028      	beq.n	8004de6 <UART_SetConfig+0xa76>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d01f      	beq.n	8004ddc <UART_SetConfig+0xa6c>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	2b09      	cmp	r3, #9
 8004da2:	d016      	beq.n	8004dd2 <UART_SetConfig+0xa62>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	2b0a      	cmp	r3, #10
 8004daa:	d00d      	beq.n	8004dc8 <UART_SetConfig+0xa58>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2b0b      	cmp	r3, #11
 8004db2:	d104      	bne.n	8004dbe <UART_SetConfig+0xa4e>
 8004db4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004db8:	f04f 0400 	mov.w	r4, #0
 8004dbc:	e05a      	b.n	8004e74 <UART_SetConfig+0xb04>
 8004dbe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004dc2:	f04f 0400 	mov.w	r4, #0
 8004dc6:	e055      	b.n	8004e74 <UART_SetConfig+0xb04>
 8004dc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dcc:	f04f 0400 	mov.w	r4, #0
 8004dd0:	e050      	b.n	8004e74 <UART_SetConfig+0xb04>
 8004dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dd6:	f04f 0400 	mov.w	r4, #0
 8004dda:	e04b      	b.n	8004e74 <UART_SetConfig+0xb04>
 8004ddc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004de0:	f04f 0400 	mov.w	r4, #0
 8004de4:	e046      	b.n	8004e74 <UART_SetConfig+0xb04>
 8004de6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004dea:	f04f 0400 	mov.w	r4, #0
 8004dee:	e041      	b.n	8004e74 <UART_SetConfig+0xb04>
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <UART_SetConfig+0xaf0>)
 8004df2:	f04f 0400 	mov.w	r4, #0
 8004df6:	e03d      	b.n	8004e74 <UART_SetConfig+0xb04>
 8004df8:	4b1a      	ldr	r3, [pc, #104]	; (8004e64 <UART_SetConfig+0xaf4>)
 8004dfa:	f04f 0400 	mov.w	r4, #0
 8004dfe:	e039      	b.n	8004e74 <UART_SetConfig+0xb04>
 8004e00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e04:	f04f 0400 	mov.w	r4, #0
 8004e08:	e034      	b.n	8004e74 <UART_SetConfig+0xb04>
 8004e0a:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <UART_SetConfig+0xaf8>)
 8004e0c:	f04f 0400 	mov.w	r4, #0
 8004e10:	e030      	b.n	8004e74 <UART_SetConfig+0xb04>
 8004e12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e16:	f04f 0400 	mov.w	r4, #0
 8004e1a:	e02b      	b.n	8004e74 <UART_SetConfig+0xb04>
 8004e1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e20:	f04f 0400 	mov.w	r4, #0
 8004e24:	e026      	b.n	8004e74 <UART_SetConfig+0xb04>
 8004e26:	bf00      	nop
 8004e28:	14585500 	.word	0x14585500
 8004e2c:	00000000 	.word	0x00000000
 8004e30:	28b0aa00 	.word	0x28b0aa00
 8004e34:	00000000 	.word	0x00000000
 8004e38:	00f42400 	.word	0x00f42400
 8004e3c:	f4240000 	.word	0xf4240000
 8004e40:	01e84800 	.word	0x01e84800
 8004e44:	03d09000 	.word	0x03d09000
 8004e48:	07a12000 	.word	0x07a12000
 8004e4c:	0f424000 	.word	0x0f424000
 8004e50:	186a0000 	.word	0x186a0000
 8004e54:	1e848000 	.word	0x1e848000
 8004e58:	3d090000 	.word	0x3d090000
 8004e5c:	7a120000 	.word	0x7a120000
 8004e60:	000aaa00 	.word	0x000aaa00
 8004e64:	000ccc00 	.word	0x000ccc00
 8004e68:	00155500 	.word	0x00155500
 8004e6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004e70:	f04f 0400 	mov.w	r4, #0
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6852      	ldr	r2, [r2, #4]
 8004e78:	0852      	lsrs	r2, r2, #1
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	eb13 0b01 	adds.w	fp, r3, r1
 8004e84:	eb44 0c02 	adc.w	ip, r4, r2
 8004e88:	4658      	mov	r0, fp
 8004e8a:	4661      	mov	r1, ip
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f04f 0400 	mov.w	r4, #0
 8004e94:	461a      	mov	r2, r3
 8004e96:	4623      	mov	r3, r4
 8004e98:	f7fb f9be 	bl	8000218 <__aeabi_uldivmod>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	61fb      	str	r3, [r7, #28]
            break;
 8004ea2:	e002      	b.n	8004eaa <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	76fb      	strb	r3, [r7, #27]
            break;
 8004ea8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb0:	d309      	bcc.n	8004ec6 <UART_SetConfig+0xb56>
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb8:	d205      	bcs.n	8004ec6 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	60da      	str	r2, [r3, #12]
 8004ec2:	f000 bc18 	b.w	80056f6 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	76fb      	strb	r3, [r7, #27]
 8004eca:	f000 bc14 	b.w	80056f6 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed6:	f040 8204 	bne.w	80052e2 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8004eda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	f200 81df 	bhi.w	80052a2 <UART_SetConfig+0xf32>
 8004ee4:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <UART_SetConfig+0xb7c>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004f11 	.word	0x08004f11
 8004ef0:	08004fc9 	.word	0x08004fc9
 8004ef4:	08005081 	.word	0x08005081
 8004ef8:	080052a3 	.word	0x080052a3
 8004efc:	08005129 	.word	0x08005129
 8004f00:	080052a3 	.word	0x080052a3
 8004f04:	080052a3 	.word	0x080052a3
 8004f08:	080052a3 	.word	0x080052a3
 8004f0c:	080051e1 	.word	0x080051e1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f10:	f7fe f984 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8004f14:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d044      	beq.n	8004fa8 <UART_SetConfig+0xc38>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d03e      	beq.n	8004fa4 <UART_SetConfig+0xc34>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d038      	beq.n	8004fa0 <UART_SetConfig+0xc30>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d032      	beq.n	8004f9c <UART_SetConfig+0xc2c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d02c      	beq.n	8004f98 <UART_SetConfig+0xc28>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	d026      	beq.n	8004f94 <UART_SetConfig+0xc24>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	2b06      	cmp	r3, #6
 8004f4c:	d020      	beq.n	8004f90 <UART_SetConfig+0xc20>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	2b07      	cmp	r3, #7
 8004f54:	d01a      	beq.n	8004f8c <UART_SetConfig+0xc1c>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d014      	beq.n	8004f88 <UART_SetConfig+0xc18>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	2b09      	cmp	r3, #9
 8004f64:	d00e      	beq.n	8004f84 <UART_SetConfig+0xc14>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	2b0a      	cmp	r3, #10
 8004f6c:	d008      	beq.n	8004f80 <UART_SetConfig+0xc10>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	2b0b      	cmp	r3, #11
 8004f74:	d102      	bne.n	8004f7c <UART_SetConfig+0xc0c>
 8004f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f7a:	e016      	b.n	8004faa <UART_SetConfig+0xc3a>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e014      	b.n	8004faa <UART_SetConfig+0xc3a>
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	e012      	b.n	8004faa <UART_SetConfig+0xc3a>
 8004f84:	2340      	movs	r3, #64	; 0x40
 8004f86:	e010      	b.n	8004faa <UART_SetConfig+0xc3a>
 8004f88:	2320      	movs	r3, #32
 8004f8a:	e00e      	b.n	8004faa <UART_SetConfig+0xc3a>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	e00c      	b.n	8004faa <UART_SetConfig+0xc3a>
 8004f90:	230c      	movs	r3, #12
 8004f92:	e00a      	b.n	8004faa <UART_SetConfig+0xc3a>
 8004f94:	230a      	movs	r3, #10
 8004f96:	e008      	b.n	8004faa <UART_SetConfig+0xc3a>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	e006      	b.n	8004faa <UART_SetConfig+0xc3a>
 8004f9c:	2306      	movs	r3, #6
 8004f9e:	e004      	b.n	8004faa <UART_SetConfig+0xc3a>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	e002      	b.n	8004faa <UART_SetConfig+0xc3a>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e000      	b.n	8004faa <UART_SetConfig+0xc3a>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	005a      	lsls	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	441a      	add	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	61fb      	str	r3, [r7, #28]
        break;
 8004fc6:	e16f      	b.n	80052a8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc8:	f7fe f93e 	bl	8003248 <HAL_RCC_GetPCLK2Freq>
 8004fcc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d044      	beq.n	8005060 <UART_SetConfig+0xcf0>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d03e      	beq.n	800505c <UART_SetConfig+0xcec>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d038      	beq.n	8005058 <UART_SetConfig+0xce8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d032      	beq.n	8005054 <UART_SetConfig+0xce4>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d02c      	beq.n	8005050 <UART_SetConfig+0xce0>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	2b05      	cmp	r3, #5
 8004ffc:	d026      	beq.n	800504c <UART_SetConfig+0xcdc>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	2b06      	cmp	r3, #6
 8005004:	d020      	beq.n	8005048 <UART_SetConfig+0xcd8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	2b07      	cmp	r3, #7
 800500c:	d01a      	beq.n	8005044 <UART_SetConfig+0xcd4>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	2b08      	cmp	r3, #8
 8005014:	d014      	beq.n	8005040 <UART_SetConfig+0xcd0>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	2b09      	cmp	r3, #9
 800501c:	d00e      	beq.n	800503c <UART_SetConfig+0xccc>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	2b0a      	cmp	r3, #10
 8005024:	d008      	beq.n	8005038 <UART_SetConfig+0xcc8>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	2b0b      	cmp	r3, #11
 800502c:	d102      	bne.n	8005034 <UART_SetConfig+0xcc4>
 800502e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005032:	e016      	b.n	8005062 <UART_SetConfig+0xcf2>
 8005034:	2301      	movs	r3, #1
 8005036:	e014      	b.n	8005062 <UART_SetConfig+0xcf2>
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	e012      	b.n	8005062 <UART_SetConfig+0xcf2>
 800503c:	2340      	movs	r3, #64	; 0x40
 800503e:	e010      	b.n	8005062 <UART_SetConfig+0xcf2>
 8005040:	2320      	movs	r3, #32
 8005042:	e00e      	b.n	8005062 <UART_SetConfig+0xcf2>
 8005044:	2310      	movs	r3, #16
 8005046:	e00c      	b.n	8005062 <UART_SetConfig+0xcf2>
 8005048:	230c      	movs	r3, #12
 800504a:	e00a      	b.n	8005062 <UART_SetConfig+0xcf2>
 800504c:	230a      	movs	r3, #10
 800504e:	e008      	b.n	8005062 <UART_SetConfig+0xcf2>
 8005050:	2308      	movs	r3, #8
 8005052:	e006      	b.n	8005062 <UART_SetConfig+0xcf2>
 8005054:	2306      	movs	r3, #6
 8005056:	e004      	b.n	8005062 <UART_SetConfig+0xcf2>
 8005058:	2304      	movs	r3, #4
 800505a:	e002      	b.n	8005062 <UART_SetConfig+0xcf2>
 800505c:	2302      	movs	r3, #2
 800505e:	e000      	b.n	8005062 <UART_SetConfig+0xcf2>
 8005060:	2301      	movs	r3, #1
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	fbb2 f3f3 	udiv	r3, r2, r3
 8005068:	005a      	lsls	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	441a      	add	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	fbb2 f3f3 	udiv	r3, r2, r3
 800507a:	b29b      	uxth	r3, r3
 800507c:	61fb      	str	r3, [r7, #28]
        break;
 800507e:	e113      	b.n	80052a8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	2b00      	cmp	r3, #0
 8005086:	d043      	beq.n	8005110 <UART_SetConfig+0xda0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	2b01      	cmp	r3, #1
 800508e:	d03d      	beq.n	800510c <UART_SetConfig+0xd9c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	2b02      	cmp	r3, #2
 8005096:	d037      	beq.n	8005108 <UART_SetConfig+0xd98>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	2b03      	cmp	r3, #3
 800509e:	d031      	beq.n	8005104 <UART_SetConfig+0xd94>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d02b      	beq.n	8005100 <UART_SetConfig+0xd90>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b05      	cmp	r3, #5
 80050ae:	d025      	beq.n	80050fc <UART_SetConfig+0xd8c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	2b06      	cmp	r3, #6
 80050b6:	d01f      	beq.n	80050f8 <UART_SetConfig+0xd88>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	2b07      	cmp	r3, #7
 80050be:	d019      	beq.n	80050f4 <UART_SetConfig+0xd84>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d013      	beq.n	80050f0 <UART_SetConfig+0xd80>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2b09      	cmp	r3, #9
 80050ce:	d00d      	beq.n	80050ec <UART_SetConfig+0xd7c>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2b0a      	cmp	r3, #10
 80050d6:	d007      	beq.n	80050e8 <UART_SetConfig+0xd78>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2b0b      	cmp	r3, #11
 80050de:	d101      	bne.n	80050e4 <UART_SetConfig+0xd74>
 80050e0:	4b8d      	ldr	r3, [pc, #564]	; (8005318 <UART_SetConfig+0xfa8>)
 80050e2:	e016      	b.n	8005112 <UART_SetConfig+0xda2>
 80050e4:	4b8d      	ldr	r3, [pc, #564]	; (800531c <UART_SetConfig+0xfac>)
 80050e6:	e014      	b.n	8005112 <UART_SetConfig+0xda2>
 80050e8:	4b8d      	ldr	r3, [pc, #564]	; (8005320 <UART_SetConfig+0xfb0>)
 80050ea:	e012      	b.n	8005112 <UART_SetConfig+0xda2>
 80050ec:	4b8d      	ldr	r3, [pc, #564]	; (8005324 <UART_SetConfig+0xfb4>)
 80050ee:	e010      	b.n	8005112 <UART_SetConfig+0xda2>
 80050f0:	4b8d      	ldr	r3, [pc, #564]	; (8005328 <UART_SetConfig+0xfb8>)
 80050f2:	e00e      	b.n	8005112 <UART_SetConfig+0xda2>
 80050f4:	4b8d      	ldr	r3, [pc, #564]	; (800532c <UART_SetConfig+0xfbc>)
 80050f6:	e00c      	b.n	8005112 <UART_SetConfig+0xda2>
 80050f8:	4b8d      	ldr	r3, [pc, #564]	; (8005330 <UART_SetConfig+0xfc0>)
 80050fa:	e00a      	b.n	8005112 <UART_SetConfig+0xda2>
 80050fc:	4b8d      	ldr	r3, [pc, #564]	; (8005334 <UART_SetConfig+0xfc4>)
 80050fe:	e008      	b.n	8005112 <UART_SetConfig+0xda2>
 8005100:	4b8d      	ldr	r3, [pc, #564]	; (8005338 <UART_SetConfig+0xfc8>)
 8005102:	e006      	b.n	8005112 <UART_SetConfig+0xda2>
 8005104:	4b8d      	ldr	r3, [pc, #564]	; (800533c <UART_SetConfig+0xfcc>)
 8005106:	e004      	b.n	8005112 <UART_SetConfig+0xda2>
 8005108:	4b8d      	ldr	r3, [pc, #564]	; (8005340 <UART_SetConfig+0xfd0>)
 800510a:	e002      	b.n	8005112 <UART_SetConfig+0xda2>
 800510c:	4b8d      	ldr	r3, [pc, #564]	; (8005344 <UART_SetConfig+0xfd4>)
 800510e:	e000      	b.n	8005112 <UART_SetConfig+0xda2>
 8005110:	4b82      	ldr	r3, [pc, #520]	; (800531c <UART_SetConfig+0xfac>)
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6852      	ldr	r2, [r2, #4]
 8005116:	0852      	lsrs	r2, r2, #1
 8005118:	441a      	add	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005122:	b29b      	uxth	r3, r3
 8005124:	61fb      	str	r3, [r7, #28]
        break;
 8005126:	e0bf      	b.n	80052a8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005128:	f7fe f80a 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 800512c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2b00      	cmp	r3, #0
 8005134:	d044      	beq.n	80051c0 <UART_SetConfig+0xe50>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b01      	cmp	r3, #1
 800513c:	d03e      	beq.n	80051bc <UART_SetConfig+0xe4c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	2b02      	cmp	r3, #2
 8005144:	d038      	beq.n	80051b8 <UART_SetConfig+0xe48>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	2b03      	cmp	r3, #3
 800514c:	d032      	beq.n	80051b4 <UART_SetConfig+0xe44>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b04      	cmp	r3, #4
 8005154:	d02c      	beq.n	80051b0 <UART_SetConfig+0xe40>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b05      	cmp	r3, #5
 800515c:	d026      	beq.n	80051ac <UART_SetConfig+0xe3c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	2b06      	cmp	r3, #6
 8005164:	d020      	beq.n	80051a8 <UART_SetConfig+0xe38>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b07      	cmp	r3, #7
 800516c:	d01a      	beq.n	80051a4 <UART_SetConfig+0xe34>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	2b08      	cmp	r3, #8
 8005174:	d014      	beq.n	80051a0 <UART_SetConfig+0xe30>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	2b09      	cmp	r3, #9
 800517c:	d00e      	beq.n	800519c <UART_SetConfig+0xe2c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	2b0a      	cmp	r3, #10
 8005184:	d008      	beq.n	8005198 <UART_SetConfig+0xe28>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	2b0b      	cmp	r3, #11
 800518c:	d102      	bne.n	8005194 <UART_SetConfig+0xe24>
 800518e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005192:	e016      	b.n	80051c2 <UART_SetConfig+0xe52>
 8005194:	2301      	movs	r3, #1
 8005196:	e014      	b.n	80051c2 <UART_SetConfig+0xe52>
 8005198:	2380      	movs	r3, #128	; 0x80
 800519a:	e012      	b.n	80051c2 <UART_SetConfig+0xe52>
 800519c:	2340      	movs	r3, #64	; 0x40
 800519e:	e010      	b.n	80051c2 <UART_SetConfig+0xe52>
 80051a0:	2320      	movs	r3, #32
 80051a2:	e00e      	b.n	80051c2 <UART_SetConfig+0xe52>
 80051a4:	2310      	movs	r3, #16
 80051a6:	e00c      	b.n	80051c2 <UART_SetConfig+0xe52>
 80051a8:	230c      	movs	r3, #12
 80051aa:	e00a      	b.n	80051c2 <UART_SetConfig+0xe52>
 80051ac:	230a      	movs	r3, #10
 80051ae:	e008      	b.n	80051c2 <UART_SetConfig+0xe52>
 80051b0:	2308      	movs	r3, #8
 80051b2:	e006      	b.n	80051c2 <UART_SetConfig+0xe52>
 80051b4:	2306      	movs	r3, #6
 80051b6:	e004      	b.n	80051c2 <UART_SetConfig+0xe52>
 80051b8:	2304      	movs	r3, #4
 80051ba:	e002      	b.n	80051c2 <UART_SetConfig+0xe52>
 80051bc:	2302      	movs	r3, #2
 80051be:	e000      	b.n	80051c2 <UART_SetConfig+0xe52>
 80051c0:	2301      	movs	r3, #1
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c8:	005a      	lsls	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	085b      	lsrs	r3, r3, #1
 80051d0:	441a      	add	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051da:	b29b      	uxth	r3, r3
 80051dc:	61fb      	str	r3, [r7, #28]
        break;
 80051de:	e063      	b.n	80052a8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d04f      	beq.n	8005288 <UART_SetConfig+0xf18>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d048      	beq.n	8005282 <UART_SetConfig+0xf12>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d041      	beq.n	800527c <UART_SetConfig+0xf0c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d03a      	beq.n	8005276 <UART_SetConfig+0xf06>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2b04      	cmp	r3, #4
 8005206:	d033      	beq.n	8005270 <UART_SetConfig+0xf00>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	2b05      	cmp	r3, #5
 800520e:	d02c      	beq.n	800526a <UART_SetConfig+0xefa>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	2b06      	cmp	r3, #6
 8005216:	d025      	beq.n	8005264 <UART_SetConfig+0xef4>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	2b07      	cmp	r3, #7
 800521e:	d01e      	beq.n	800525e <UART_SetConfig+0xeee>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	2b08      	cmp	r3, #8
 8005226:	d017      	beq.n	8005258 <UART_SetConfig+0xee8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2b09      	cmp	r3, #9
 800522e:	d010      	beq.n	8005252 <UART_SetConfig+0xee2>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2b0a      	cmp	r3, #10
 8005236:	d009      	beq.n	800524c <UART_SetConfig+0xedc>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	2b0b      	cmp	r3, #11
 800523e:	d102      	bne.n	8005246 <UART_SetConfig+0xed6>
 8005240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005244:	e022      	b.n	800528c <UART_SetConfig+0xf1c>
 8005246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800524a:	e01f      	b.n	800528c <UART_SetConfig+0xf1c>
 800524c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005250:	e01c      	b.n	800528c <UART_SetConfig+0xf1c>
 8005252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005256:	e019      	b.n	800528c <UART_SetConfig+0xf1c>
 8005258:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800525c:	e016      	b.n	800528c <UART_SetConfig+0xf1c>
 800525e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005262:	e013      	b.n	800528c <UART_SetConfig+0xf1c>
 8005264:	f241 5354 	movw	r3, #5460	; 0x1554
 8005268:	e010      	b.n	800528c <UART_SetConfig+0xf1c>
 800526a:	f641 1398 	movw	r3, #6552	; 0x1998
 800526e:	e00d      	b.n	800528c <UART_SetConfig+0xf1c>
 8005270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005274:	e00a      	b.n	800528c <UART_SetConfig+0xf1c>
 8005276:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800527a:	e007      	b.n	800528c <UART_SetConfig+0xf1c>
 800527c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005280:	e004      	b.n	800528c <UART_SetConfig+0xf1c>
 8005282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005286:	e001      	b.n	800528c <UART_SetConfig+0xf1c>
 8005288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6852      	ldr	r2, [r2, #4]
 8005290:	0852      	lsrs	r2, r2, #1
 8005292:	441a      	add	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	b29b      	uxth	r3, r3
 800529e:	61fb      	str	r3, [r7, #28]
        break;
 80052a0:	e002      	b.n	80052a8 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	76fb      	strb	r3, [r7, #27]
        break;
 80052a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	2b0f      	cmp	r3, #15
 80052ac:	d916      	bls.n	80052dc <UART_SetConfig+0xf6c>
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b4:	d212      	bcs.n	80052dc <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f023 030f 	bic.w	r3, r3, #15
 80052be:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	89fb      	ldrh	r3, [r7, #14]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	89fa      	ldrh	r2, [r7, #14]
 80052d8:	60da      	str	r2, [r3, #12]
 80052da:	e20c      	b.n	80056f6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	76fb      	strb	r3, [r7, #27]
 80052e0:	e209      	b.n	80056f6 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 80052e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	f200 81f4 	bhi.w	80056d4 <UART_SetConfig+0x1364>
 80052ec:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <UART_SetConfig+0xf84>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005349 	.word	0x08005349
 80052f8:	080053ff 	.word	0x080053ff
 80052fc:	080054b5 	.word	0x080054b5
 8005300:	080056d5 	.word	0x080056d5
 8005304:	0800555f 	.word	0x0800555f
 8005308:	080056d5 	.word	0x080056d5
 800530c:	080056d5 	.word	0x080056d5
 8005310:	080056d5 	.word	0x080056d5
 8005314:	08005615 	.word	0x08005615
 8005318:	0001e848 	.word	0x0001e848
 800531c:	01e84800 	.word	0x01e84800
 8005320:	0003d090 	.word	0x0003d090
 8005324:	0007a120 	.word	0x0007a120
 8005328:	000f4240 	.word	0x000f4240
 800532c:	001e8480 	.word	0x001e8480
 8005330:	0028b0aa 	.word	0x0028b0aa
 8005334:	0030d400 	.word	0x0030d400
 8005338:	003d0900 	.word	0x003d0900
 800533c:	00516154 	.word	0x00516154
 8005340:	007a1200 	.word	0x007a1200
 8005344:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005348:	f7fd ff68 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 800534c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	2b00      	cmp	r3, #0
 8005354:	d044      	beq.n	80053e0 <UART_SetConfig+0x1070>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	2b01      	cmp	r3, #1
 800535c:	d03e      	beq.n	80053dc <UART_SetConfig+0x106c>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	2b02      	cmp	r3, #2
 8005364:	d038      	beq.n	80053d8 <UART_SetConfig+0x1068>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	2b03      	cmp	r3, #3
 800536c:	d032      	beq.n	80053d4 <UART_SetConfig+0x1064>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	2b04      	cmp	r3, #4
 8005374:	d02c      	beq.n	80053d0 <UART_SetConfig+0x1060>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	2b05      	cmp	r3, #5
 800537c:	d026      	beq.n	80053cc <UART_SetConfig+0x105c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	2b06      	cmp	r3, #6
 8005384:	d020      	beq.n	80053c8 <UART_SetConfig+0x1058>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	2b07      	cmp	r3, #7
 800538c:	d01a      	beq.n	80053c4 <UART_SetConfig+0x1054>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2b08      	cmp	r3, #8
 8005394:	d014      	beq.n	80053c0 <UART_SetConfig+0x1050>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	2b09      	cmp	r3, #9
 800539c:	d00e      	beq.n	80053bc <UART_SetConfig+0x104c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2b0a      	cmp	r3, #10
 80053a4:	d008      	beq.n	80053b8 <UART_SetConfig+0x1048>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	2b0b      	cmp	r3, #11
 80053ac:	d102      	bne.n	80053b4 <UART_SetConfig+0x1044>
 80053ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053b2:	e016      	b.n	80053e2 <UART_SetConfig+0x1072>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e014      	b.n	80053e2 <UART_SetConfig+0x1072>
 80053b8:	2380      	movs	r3, #128	; 0x80
 80053ba:	e012      	b.n	80053e2 <UART_SetConfig+0x1072>
 80053bc:	2340      	movs	r3, #64	; 0x40
 80053be:	e010      	b.n	80053e2 <UART_SetConfig+0x1072>
 80053c0:	2320      	movs	r3, #32
 80053c2:	e00e      	b.n	80053e2 <UART_SetConfig+0x1072>
 80053c4:	2310      	movs	r3, #16
 80053c6:	e00c      	b.n	80053e2 <UART_SetConfig+0x1072>
 80053c8:	230c      	movs	r3, #12
 80053ca:	e00a      	b.n	80053e2 <UART_SetConfig+0x1072>
 80053cc:	230a      	movs	r3, #10
 80053ce:	e008      	b.n	80053e2 <UART_SetConfig+0x1072>
 80053d0:	2308      	movs	r3, #8
 80053d2:	e006      	b.n	80053e2 <UART_SetConfig+0x1072>
 80053d4:	2306      	movs	r3, #6
 80053d6:	e004      	b.n	80053e2 <UART_SetConfig+0x1072>
 80053d8:	2304      	movs	r3, #4
 80053da:	e002      	b.n	80053e2 <UART_SetConfig+0x1072>
 80053dc:	2302      	movs	r3, #2
 80053de:	e000      	b.n	80053e2 <UART_SetConfig+0x1072>
 80053e0:	2301      	movs	r3, #1
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	441a      	add	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	61fb      	str	r3, [r7, #28]
        break;
 80053fc:	e16d      	b.n	80056da <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053fe:	f7fd ff23 	bl	8003248 <HAL_RCC_GetPCLK2Freq>
 8005402:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	2b00      	cmp	r3, #0
 800540a:	d044      	beq.n	8005496 <UART_SetConfig+0x1126>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	2b01      	cmp	r3, #1
 8005412:	d03e      	beq.n	8005492 <UART_SetConfig+0x1122>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	2b02      	cmp	r3, #2
 800541a:	d038      	beq.n	800548e <UART_SetConfig+0x111e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	2b03      	cmp	r3, #3
 8005422:	d032      	beq.n	800548a <UART_SetConfig+0x111a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	2b04      	cmp	r3, #4
 800542a:	d02c      	beq.n	8005486 <UART_SetConfig+0x1116>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	2b05      	cmp	r3, #5
 8005432:	d026      	beq.n	8005482 <UART_SetConfig+0x1112>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	2b06      	cmp	r3, #6
 800543a:	d020      	beq.n	800547e <UART_SetConfig+0x110e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	2b07      	cmp	r3, #7
 8005442:	d01a      	beq.n	800547a <UART_SetConfig+0x110a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	2b08      	cmp	r3, #8
 800544a:	d014      	beq.n	8005476 <UART_SetConfig+0x1106>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	2b09      	cmp	r3, #9
 8005452:	d00e      	beq.n	8005472 <UART_SetConfig+0x1102>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2b0a      	cmp	r3, #10
 800545a:	d008      	beq.n	800546e <UART_SetConfig+0x10fe>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	2b0b      	cmp	r3, #11
 8005462:	d102      	bne.n	800546a <UART_SetConfig+0x10fa>
 8005464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005468:	e016      	b.n	8005498 <UART_SetConfig+0x1128>
 800546a:	2301      	movs	r3, #1
 800546c:	e014      	b.n	8005498 <UART_SetConfig+0x1128>
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	e012      	b.n	8005498 <UART_SetConfig+0x1128>
 8005472:	2340      	movs	r3, #64	; 0x40
 8005474:	e010      	b.n	8005498 <UART_SetConfig+0x1128>
 8005476:	2320      	movs	r3, #32
 8005478:	e00e      	b.n	8005498 <UART_SetConfig+0x1128>
 800547a:	2310      	movs	r3, #16
 800547c:	e00c      	b.n	8005498 <UART_SetConfig+0x1128>
 800547e:	230c      	movs	r3, #12
 8005480:	e00a      	b.n	8005498 <UART_SetConfig+0x1128>
 8005482:	230a      	movs	r3, #10
 8005484:	e008      	b.n	8005498 <UART_SetConfig+0x1128>
 8005486:	2308      	movs	r3, #8
 8005488:	e006      	b.n	8005498 <UART_SetConfig+0x1128>
 800548a:	2306      	movs	r3, #6
 800548c:	e004      	b.n	8005498 <UART_SetConfig+0x1128>
 800548e:	2304      	movs	r3, #4
 8005490:	e002      	b.n	8005498 <UART_SetConfig+0x1128>
 8005492:	2302      	movs	r3, #2
 8005494:	e000      	b.n	8005498 <UART_SetConfig+0x1128>
 8005496:	2301      	movs	r3, #1
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	fbb2 f2f3 	udiv	r2, r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	085b      	lsrs	r3, r3, #1
 80054a4:	441a      	add	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	61fb      	str	r3, [r7, #28]
        break;
 80054b2:	e112      	b.n	80056da <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d044      	beq.n	8005546 <UART_SetConfig+0x11d6>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d03e      	beq.n	8005542 <UART_SetConfig+0x11d2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d038      	beq.n	800553e <UART_SetConfig+0x11ce>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d032      	beq.n	800553a <UART_SetConfig+0x11ca>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d02c      	beq.n	8005536 <UART_SetConfig+0x11c6>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2b05      	cmp	r3, #5
 80054e2:	d026      	beq.n	8005532 <UART_SetConfig+0x11c2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	2b06      	cmp	r3, #6
 80054ea:	d020      	beq.n	800552e <UART_SetConfig+0x11be>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b07      	cmp	r3, #7
 80054f2:	d01a      	beq.n	800552a <UART_SetConfig+0x11ba>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d014      	beq.n	8005526 <UART_SetConfig+0x11b6>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	2b09      	cmp	r3, #9
 8005502:	d00e      	beq.n	8005522 <UART_SetConfig+0x11b2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2b0a      	cmp	r3, #10
 800550a:	d008      	beq.n	800551e <UART_SetConfig+0x11ae>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	2b0b      	cmp	r3, #11
 8005512:	d102      	bne.n	800551a <UART_SetConfig+0x11aa>
 8005514:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005518:	e016      	b.n	8005548 <UART_SetConfig+0x11d8>
 800551a:	4b81      	ldr	r3, [pc, #516]	; (8005720 <UART_SetConfig+0x13b0>)
 800551c:	e014      	b.n	8005548 <UART_SetConfig+0x11d8>
 800551e:	4b81      	ldr	r3, [pc, #516]	; (8005724 <UART_SetConfig+0x13b4>)
 8005520:	e012      	b.n	8005548 <UART_SetConfig+0x11d8>
 8005522:	4b81      	ldr	r3, [pc, #516]	; (8005728 <UART_SetConfig+0x13b8>)
 8005524:	e010      	b.n	8005548 <UART_SetConfig+0x11d8>
 8005526:	4b81      	ldr	r3, [pc, #516]	; (800572c <UART_SetConfig+0x13bc>)
 8005528:	e00e      	b.n	8005548 <UART_SetConfig+0x11d8>
 800552a:	4b81      	ldr	r3, [pc, #516]	; (8005730 <UART_SetConfig+0x13c0>)
 800552c:	e00c      	b.n	8005548 <UART_SetConfig+0x11d8>
 800552e:	4b81      	ldr	r3, [pc, #516]	; (8005734 <UART_SetConfig+0x13c4>)
 8005530:	e00a      	b.n	8005548 <UART_SetConfig+0x11d8>
 8005532:	4b81      	ldr	r3, [pc, #516]	; (8005738 <UART_SetConfig+0x13c8>)
 8005534:	e008      	b.n	8005548 <UART_SetConfig+0x11d8>
 8005536:	4b81      	ldr	r3, [pc, #516]	; (800573c <UART_SetConfig+0x13cc>)
 8005538:	e006      	b.n	8005548 <UART_SetConfig+0x11d8>
 800553a:	4b81      	ldr	r3, [pc, #516]	; (8005740 <UART_SetConfig+0x13d0>)
 800553c:	e004      	b.n	8005548 <UART_SetConfig+0x11d8>
 800553e:	4b81      	ldr	r3, [pc, #516]	; (8005744 <UART_SetConfig+0x13d4>)
 8005540:	e002      	b.n	8005548 <UART_SetConfig+0x11d8>
 8005542:	4b81      	ldr	r3, [pc, #516]	; (8005748 <UART_SetConfig+0x13d8>)
 8005544:	e000      	b.n	8005548 <UART_SetConfig+0x11d8>
 8005546:	4b76      	ldr	r3, [pc, #472]	; (8005720 <UART_SetConfig+0x13b0>)
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6852      	ldr	r2, [r2, #4]
 800554c:	0852      	lsrs	r2, r2, #1
 800554e:	441a      	add	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	fbb2 f3f3 	udiv	r3, r2, r3
 8005558:	b29b      	uxth	r3, r3
 800555a:	61fb      	str	r3, [r7, #28]
        break;
 800555c:	e0bd      	b.n	80056da <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800555e:	f7fd fdef 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 8005562:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	d044      	beq.n	80055f6 <UART_SetConfig+0x1286>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2b01      	cmp	r3, #1
 8005572:	d03e      	beq.n	80055f2 <UART_SetConfig+0x1282>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b02      	cmp	r3, #2
 800557a:	d038      	beq.n	80055ee <UART_SetConfig+0x127e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2b03      	cmp	r3, #3
 8005582:	d032      	beq.n	80055ea <UART_SetConfig+0x127a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2b04      	cmp	r3, #4
 800558a:	d02c      	beq.n	80055e6 <UART_SetConfig+0x1276>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	2b05      	cmp	r3, #5
 8005592:	d026      	beq.n	80055e2 <UART_SetConfig+0x1272>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	2b06      	cmp	r3, #6
 800559a:	d020      	beq.n	80055de <UART_SetConfig+0x126e>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2b07      	cmp	r3, #7
 80055a2:	d01a      	beq.n	80055da <UART_SetConfig+0x126a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d014      	beq.n	80055d6 <UART_SetConfig+0x1266>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	2b09      	cmp	r3, #9
 80055b2:	d00e      	beq.n	80055d2 <UART_SetConfig+0x1262>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	2b0a      	cmp	r3, #10
 80055ba:	d008      	beq.n	80055ce <UART_SetConfig+0x125e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	2b0b      	cmp	r3, #11
 80055c2:	d102      	bne.n	80055ca <UART_SetConfig+0x125a>
 80055c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055c8:	e016      	b.n	80055f8 <UART_SetConfig+0x1288>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e014      	b.n	80055f8 <UART_SetConfig+0x1288>
 80055ce:	2380      	movs	r3, #128	; 0x80
 80055d0:	e012      	b.n	80055f8 <UART_SetConfig+0x1288>
 80055d2:	2340      	movs	r3, #64	; 0x40
 80055d4:	e010      	b.n	80055f8 <UART_SetConfig+0x1288>
 80055d6:	2320      	movs	r3, #32
 80055d8:	e00e      	b.n	80055f8 <UART_SetConfig+0x1288>
 80055da:	2310      	movs	r3, #16
 80055dc:	e00c      	b.n	80055f8 <UART_SetConfig+0x1288>
 80055de:	230c      	movs	r3, #12
 80055e0:	e00a      	b.n	80055f8 <UART_SetConfig+0x1288>
 80055e2:	230a      	movs	r3, #10
 80055e4:	e008      	b.n	80055f8 <UART_SetConfig+0x1288>
 80055e6:	2308      	movs	r3, #8
 80055e8:	e006      	b.n	80055f8 <UART_SetConfig+0x1288>
 80055ea:	2306      	movs	r3, #6
 80055ec:	e004      	b.n	80055f8 <UART_SetConfig+0x1288>
 80055ee:	2304      	movs	r3, #4
 80055f0:	e002      	b.n	80055f8 <UART_SetConfig+0x1288>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e000      	b.n	80055f8 <UART_SetConfig+0x1288>
 80055f6:	2301      	movs	r3, #1
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	085b      	lsrs	r3, r3, #1
 8005604:	441a      	add	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	fbb2 f3f3 	udiv	r3, r2, r3
 800560e:	b29b      	uxth	r3, r3
 8005610:	61fb      	str	r3, [r7, #28]
        break;
 8005612:	e062      	b.n	80056da <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	2b00      	cmp	r3, #0
 800561a:	d04e      	beq.n	80056ba <UART_SetConfig+0x134a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	2b01      	cmp	r3, #1
 8005622:	d047      	beq.n	80056b4 <UART_SetConfig+0x1344>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	2b02      	cmp	r3, #2
 800562a:	d040      	beq.n	80056ae <UART_SetConfig+0x133e>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	2b03      	cmp	r3, #3
 8005632:	d039      	beq.n	80056a8 <UART_SetConfig+0x1338>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	2b04      	cmp	r3, #4
 800563a:	d032      	beq.n	80056a2 <UART_SetConfig+0x1332>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	2b05      	cmp	r3, #5
 8005642:	d02b      	beq.n	800569c <UART_SetConfig+0x132c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	2b06      	cmp	r3, #6
 800564a:	d024      	beq.n	8005696 <UART_SetConfig+0x1326>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	2b07      	cmp	r3, #7
 8005652:	d01d      	beq.n	8005690 <UART_SetConfig+0x1320>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	2b08      	cmp	r3, #8
 800565a:	d016      	beq.n	800568a <UART_SetConfig+0x131a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	2b09      	cmp	r3, #9
 8005662:	d00f      	beq.n	8005684 <UART_SetConfig+0x1314>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	2b0a      	cmp	r3, #10
 800566a:	d008      	beq.n	800567e <UART_SetConfig+0x130e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	2b0b      	cmp	r3, #11
 8005672:	d101      	bne.n	8005678 <UART_SetConfig+0x1308>
 8005674:	2380      	movs	r3, #128	; 0x80
 8005676:	e022      	b.n	80056be <UART_SetConfig+0x134e>
 8005678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567c:	e01f      	b.n	80056be <UART_SetConfig+0x134e>
 800567e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005682:	e01c      	b.n	80056be <UART_SetConfig+0x134e>
 8005684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005688:	e019      	b.n	80056be <UART_SetConfig+0x134e>
 800568a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800568e:	e016      	b.n	80056be <UART_SetConfig+0x134e>
 8005690:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005694:	e013      	b.n	80056be <UART_SetConfig+0x134e>
 8005696:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800569a:	e010      	b.n	80056be <UART_SetConfig+0x134e>
 800569c:	f640 43cc 	movw	r3, #3276	; 0xccc
 80056a0:	e00d      	b.n	80056be <UART_SetConfig+0x134e>
 80056a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056a6:	e00a      	b.n	80056be <UART_SetConfig+0x134e>
 80056a8:	f241 5355 	movw	r3, #5461	; 0x1555
 80056ac:	e007      	b.n	80056be <UART_SetConfig+0x134e>
 80056ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056b2:	e004      	b.n	80056be <UART_SetConfig+0x134e>
 80056b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056b8:	e001      	b.n	80056be <UART_SetConfig+0x134e>
 80056ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6852      	ldr	r2, [r2, #4]
 80056c2:	0852      	lsrs	r2, r2, #1
 80056c4:	441a      	add	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	61fb      	str	r3, [r7, #28]
        break;
 80056d2:	e002      	b.n	80056da <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	76fb      	strb	r3, [r7, #27]
        break;
 80056d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	2b0f      	cmp	r3, #15
 80056de:	d908      	bls.n	80056f2 <UART_SetConfig+0x1382>
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e6:	d204      	bcs.n	80056f2 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	60da      	str	r2, [r3, #12]
 80056f0:	e001      	b.n	80056f6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005712:	7efb      	ldrb	r3, [r7, #27]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3728      	adds	r7, #40	; 0x28
 8005718:	46bd      	mov	sp, r7
 800571a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800571e:	bf00      	nop
 8005720:	00f42400 	.word	0x00f42400
 8005724:	0001e848 	.word	0x0001e848
 8005728:	0003d090 	.word	0x0003d090
 800572c:	0007a120 	.word	0x0007a120
 8005730:	000f4240 	.word	0x000f4240
 8005734:	00145855 	.word	0x00145855
 8005738:	00186a00 	.word	0x00186a00
 800573c:	001e8480 	.word	0x001e8480
 8005740:	0028b0aa 	.word	0x0028b0aa
 8005744:	003d0900 	.word	0x003d0900
 8005748:	007a1200 	.word	0x007a1200

0800574c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01a      	beq.n	8005862 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584a:	d10a      	bne.n	8005862 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	605a      	str	r2, [r3, #4]
  }
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af02      	add	r7, sp, #8
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80058a0:	f7fb fc10 	bl	80010c4 <HAL_GetTick>
 80058a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d10e      	bne.n	80058d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f82c 	bl	8005920 <UART_WaitOnFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e022      	b.n	8005918 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d10e      	bne.n	80058fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f816 	bl	8005920 <UART_WaitOnFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e00c      	b.n	8005918 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005930:	e02c      	b.n	800598c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005938:	d028      	beq.n	800598c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593a:	f7fb fbc3 	bl	80010c4 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	429a      	cmp	r2, r3
 8005948:	d302      	bcc.n	8005950 <UART_WaitOnFlagUntilTimeout+0x30>
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d11d      	bne.n	800598c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800595e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0201 	bic.w	r2, r2, #1
 800596e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e00f      	b.n	80059ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4013      	ands	r3, r2
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	bf0c      	ite	eq
 800599c:	2301      	moveq	r3, #1
 800599e:	2300      	movne	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d0c3      	beq.n	8005932 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_UARTEx_DisableFifoMode+0x16>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e027      	b.n	8005a1a <HAL_UARTEx_DisableFifoMode+0x66>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2224      	movs	r2, #36	; 0x24
 80059d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80059f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e02d      	b.n	8005a9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2224      	movs	r2, #36	; 0x24
 8005a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0201 	bic.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f850 	bl	8005b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e02d      	b.n	8005b16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2224      	movs	r2, #36	; 0x24
 8005ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f812 	bl	8005b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b089      	sub	sp, #36	; 0x24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005b28:	4a2f      	ldr	r2, [pc, #188]	; (8005be8 <UARTEx_SetNbDataToProcess+0xc8>)
 8005b2a:	f107 0314 	add.w	r3, r7, #20
 8005b2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b32:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005b36:	4a2d      	ldr	r2, [pc, #180]	; (8005bec <UARTEx_SetNbDataToProcess+0xcc>)
 8005b38:	f107 030c 	add.w	r3, r7, #12
 8005b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b40:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d108      	bne.n	8005b5e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b5c:	e03d      	b.n	8005bda <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b5e:	2308      	movs	r3, #8
 8005b60:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b62:	2308      	movs	r3, #8
 8005b64:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	0e5b      	lsrs	r3, r3, #25
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	0f5b      	lsrs	r3, r3, #29
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005b86:	7fbb      	ldrb	r3, [r7, #30]
 8005b88:	7f3a      	ldrb	r2, [r7, #28]
 8005b8a:	f107 0120 	add.w	r1, r7, #32
 8005b8e:	440a      	add	r2, r1
 8005b90:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005b94:	fb02 f303 	mul.w	r3, r2, r3
 8005b98:	7f3a      	ldrb	r2, [r7, #28]
 8005b9a:	f107 0120 	add.w	r1, r7, #32
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005ba4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005bb0:	7ffb      	ldrb	r3, [r7, #31]
 8005bb2:	7f7a      	ldrb	r2, [r7, #29]
 8005bb4:	f107 0120 	add.w	r1, r7, #32
 8005bb8:	440a      	add	r2, r1
 8005bba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	7f7a      	ldrb	r2, [r7, #29]
 8005bc4:	f107 0120 	add.w	r1, r7, #32
 8005bc8:	440a      	add	r2, r1
 8005bca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005bce:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005bda:	bf00      	nop
 8005bdc:	3724      	adds	r7, #36	; 0x24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	08005c60 	.word	0x08005c60
 8005bec:	08005c68 	.word	0x08005c68

08005bf0 <__libc_init_array>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	4e0d      	ldr	r6, [pc, #52]	; (8005c28 <__libc_init_array+0x38>)
 8005bf4:	4c0d      	ldr	r4, [pc, #52]	; (8005c2c <__libc_init_array+0x3c>)
 8005bf6:	1ba4      	subs	r4, r4, r6
 8005bf8:	10a4      	asrs	r4, r4, #2
 8005bfa:	2500      	movs	r5, #0
 8005bfc:	42a5      	cmp	r5, r4
 8005bfe:	d109      	bne.n	8005c14 <__libc_init_array+0x24>
 8005c00:	4e0b      	ldr	r6, [pc, #44]	; (8005c30 <__libc_init_array+0x40>)
 8005c02:	4c0c      	ldr	r4, [pc, #48]	; (8005c34 <__libc_init_array+0x44>)
 8005c04:	f000 f820 	bl	8005c48 <_init>
 8005c08:	1ba4      	subs	r4, r4, r6
 8005c0a:	10a4      	asrs	r4, r4, #2
 8005c0c:	2500      	movs	r5, #0
 8005c0e:	42a5      	cmp	r5, r4
 8005c10:	d105      	bne.n	8005c1e <__libc_init_array+0x2e>
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
 8005c14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c18:	4798      	blx	r3
 8005c1a:	3501      	adds	r5, #1
 8005c1c:	e7ee      	b.n	8005bfc <__libc_init_array+0xc>
 8005c1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c22:	4798      	blx	r3
 8005c24:	3501      	adds	r5, #1
 8005c26:	e7f2      	b.n	8005c0e <__libc_init_array+0x1e>
 8005c28:	08005c90 	.word	0x08005c90
 8005c2c:	08005c90 	.word	0x08005c90
 8005c30:	08005c90 	.word	0x08005c90
 8005c34:	08005c94 	.word	0x08005c94

08005c38 <memset>:
 8005c38:	4402      	add	r2, r0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d100      	bne.n	8005c42 <memset+0xa>
 8005c40:	4770      	bx	lr
 8005c42:	f803 1b01 	strb.w	r1, [r3], #1
 8005c46:	e7f9      	b.n	8005c3c <memset+0x4>

08005c48 <_init>:
 8005c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4a:	bf00      	nop
 8005c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4e:	bc08      	pop	{r3}
 8005c50:	469e      	mov	lr, r3
 8005c52:	4770      	bx	lr

08005c54 <_fini>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	bf00      	nop
 8005c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5a:	bc08      	pop	{r3}
 8005c5c:	469e      	mov	lr, r3
 8005c5e:	4770      	bx	lr
