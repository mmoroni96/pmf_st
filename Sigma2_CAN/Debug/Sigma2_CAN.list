
Sigma2_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b8  080047b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047c0  080047c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  080047d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080047d4  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c822  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018fe  00000000  00000000  0002c85e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  0002e160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a60  00000000  00000000  0002ec98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002438c  00000000  00000000  0002f6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000902d  00000000  00000000  00053a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8788  00000000  00000000  0005cab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145239  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e34  00000000  00000000  001452b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004768 	.word	0x08004768

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004768 	.word	0x08004768

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fb93 	bl	8000c46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f848 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f950 	bl	80007c8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f908 	bl	800073c <MX_LPUART1_UART_Init>
  MX_FDCAN1_Init();
 800052c:	f000 f8c0 	bl	80006b0 <MX_FDCAN1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000530:	f000 f8aa 	bl	8000688 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  TxHeader.Identifier = 0x0;
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <main+0x94>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <main+0x94>)
 800053c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000540:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000542:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <main+0x94>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <main+0x94>)
 800054a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800054e:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <main+0x94>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <main+0x94>)
 8000558:	2200      	movs	r2, #0
 800055a:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <main+0x94>)
 800055e:	2200      	movs	r2, #0
 8000560:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <main+0x94>)
 8000564:	2200      	movs	r2, #0
 8000566:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <main+0x94>)
 800056a:	2200      	movs	r2, #0
 800056c:	621a      	str	r2, [r3, #32]

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800056e:	4810      	ldr	r0, [pc, #64]	; (80005b0 <main+0x98>)
 8000570:	f000 fe66 	bl	8001240 <HAL_FDCAN_Start>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <main+0x66>
      {
        /* Start Error */
        Error_Handler();
 800057a:	f000 fa23 	bl	80009c4 <Error_Handler>
      }
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800057e:	2200      	movs	r2, #0
 8000580:	2101      	movs	r1, #1
 8000582:	480b      	ldr	r0, [pc, #44]	; (80005b0 <main+0x98>)
 8000584:	f000 ff5e 	bl	8001444 <HAL_FDCAN_ActivateNotification>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <main+0x7a>
      {
        /* Notification Error */
        Error_Handler();
 800058e:	f000 fa19 	bl	80009c4 <Error_Handler>
	  else{
		  // Transmission request Error /
		  Error_Handler();
	  }*/

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2120      	movs	r1, #32
 8000596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059a:	f001 fbc9 	bl	8001d30 <HAL_GPIO_WritePin>
	  readSigmaData();
 800059e:	f000 f9a1 	bl	80008e4 <readSigmaData>
	  HAL_Delay(10);
 80005a2:	200a      	movs	r0, #10
 80005a4:	f000 fbc0 	bl	8000d28 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005a8:	e7f3      	b.n	8000592 <main+0x7a>
 80005aa:	bf00      	nop
 80005ac:	20000148 	.word	0x20000148
 80005b0:	200000d4 	.word	0x200000d4

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b0a8      	sub	sp, #160	; 0xa0
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005be:	2238      	movs	r2, #56	; 0x38
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 f8c8 	bl	8004758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2254      	movs	r2, #84	; 0x54
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 f8ba 	bl	8004758 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e8:	f001 fbde 	bl	8001da8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fc:	2303      	movs	r3, #3
 80005fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8000602:	2303      	movs	r3, #3
 8000604:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000608:	2320      	movs	r3, #32
 800060a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fc63 	bl	8001ef0 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000630:	f000 f9c8 	bl	80009c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2303      	movs	r3, #3
 800063a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000648:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800064c:	2106      	movs	r1, #6
 800064e:	4618      	mov	r0, r3
 8000650:	f001 ff66 	bl	8002520 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800065a:	f000 f9b3 	bl	80009c4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_FDCAN;
 800065e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000662:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000668:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4618      	mov	r0, r3
 8000672:	f002 f971 	bl	8002958 <HAL_RCCEx_PeriphCLKConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800067c:	f000 f9a2 	bl	80009c4 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	37a0      	adds	r7, #160	; 0xa0
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2100      	movs	r1, #0
 8000690:	2015      	movs	r0, #21
 8000692:	f000 fc46 	bl	8000f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000696:	2015      	movs	r0, #21
 8000698:	f000 fc5d 	bl	8000f56 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2028      	movs	r0, #40	; 0x28
 80006a2:	f000 fc3e 	bl	8000f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006a6:	2028      	movs	r0, #40	; 0x28
 80006a8:	f000 fc55 	bl	8000f56 <HAL_NVIC_EnableIRQ>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_FDCAN1_Init+0x84>)
 80006b6:	4a20      	ldr	r2, [pc, #128]	; (8000738 <MX_FDCAN1_Init+0x88>)
 80006b8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_FDCAN1_Init+0x84>)
 80006bc:	2201      	movs	r2, #1
 80006be:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_FDCAN1_Init+0x84>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006c6:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_FDCAN1_Init+0x84>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <MX_FDCAN1_Init+0x84>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_FDCAN1_Init+0x84>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_FDCAN1_Init+0x84>)
 80006da:	2200      	movs	r2, #0
 80006dc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 40;
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_FDCAN1_Init+0x84>)
 80006e0:	2228      	movs	r2, #40	; 0x28
 80006e2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_FDCAN1_Init+0x84>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_FDCAN1_Init+0x84>)
 80006ec:	220d      	movs	r2, #13
 80006ee:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_FDCAN1_Init+0x84>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_FDCAN1_Init+0x84>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <MX_FDCAN1_Init+0x84>)
 80006fe:	2201      	movs	r2, #1
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_FDCAN1_Init+0x84>)
 8000704:	2201      	movs	r2, #1
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_FDCAN1_Init+0x84>)
 800070a:	2201      	movs	r2, #1
 800070c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_FDCAN1_Init+0x84>)
 8000710:	2200      	movs	r2, #0
 8000712:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_FDCAN1_Init+0x84>)
 8000716:	2200      	movs	r2, #0
 8000718:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_FDCAN1_Init+0x84>)
 800071c:	2200      	movs	r2, #0
 800071e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_FDCAN1_Init+0x84>)
 8000722:	f000 fc33 	bl	8000f8c <HAL_FDCAN_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800072c:	f000 f94a 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000d4 	.word	0x200000d4
 8000738:	40006400 	.word	0x40006400

0800073c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_LPUART1_UART_Init+0x84>)
 8000742:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <MX_LPUART1_UART_Init+0x88>)
 8000744:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_LPUART1_UART_Init+0x84>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_LPUART1_UART_Init+0x84>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_LPUART1_UART_Init+0x84>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_LPUART1_UART_Init+0x84>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_LPUART1_UART_Init+0x84>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_LPUART1_UART_Init+0x84>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_LPUART1_UART_Init+0x84>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_LPUART1_UART_Init+0x84>)
 8000774:	2200      	movs	r2, #0
 8000776:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000778:	4811      	ldr	r0, [pc, #68]	; (80007c0 <MX_LPUART1_UART_Init+0x84>)
 800077a:	f002 fb39 	bl	8002df0 <HAL_UART_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 f91e 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_LPUART1_UART_Init+0x84>)
 800078c:	f003 fedb 	bl	8004546 <HAL_UARTEx_SetTxFifoThreshold>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000796:	f000 f915 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079a:	2100      	movs	r1, #0
 800079c:	4808      	ldr	r0, [pc, #32]	; (80007c0 <MX_LPUART1_UART_Init+0x84>)
 800079e:	f003 ff10 	bl	80045c2 <HAL_UARTEx_SetRxFifoThreshold>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 80007a8:	f000 f90c 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_LPUART1_UART_Init+0x84>)
 80007ae:	f003 fe91 	bl	80044d4 <HAL_UARTEx_DisableFifoMode>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 80007b8:	f000 f904 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000048 	.word	0x20000048
 80007c4:	40008000 	.word	0x40008000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b2b      	ldr	r3, [pc, #172]	; (800088c <MX_GPIO_Init+0xc4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a2a      	ldr	r2, [pc, #168]	; (800088c <MX_GPIO_Init+0xc4>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <MX_GPIO_Init+0xc4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a24      	ldr	r2, [pc, #144]	; (800088c <MX_GPIO_Init+0xc4>)
 80007fc:	f043 0320 	orr.w	r3, r3, #32
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_GPIO_Init+0xc4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0320 	and.w	r3, r3, #32
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_GPIO_Init+0xc4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a1e      	ldr	r2, [pc, #120]	; (800088c <MX_GPIO_Init+0xc4>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_GPIO_Init+0xc4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_GPIO_Init+0xc4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <MX_GPIO_Init+0xc4>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_GPIO_Init+0xc4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2120      	movs	r1, #32
 8000842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000846:	f001 fa73 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_GPIO_Init+0xc8>)
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480d      	ldr	r0, [pc, #52]	; (8000894 <MX_GPIO_Init+0xcc>)
 8000860:	f001 f8e4 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000864:	2320      	movs	r3, #32
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087e:	f001 f8d5 	bl	8001a2c <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	10110000 	.word	0x10110000
 8000894:	48000800 	.word	0x48000800

08000898 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef*hcan, uint32_t RxFifo0ITs){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,RxData.Data8u) != HAL_OK){
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <HAL_FDCAN_RxFifo0Callback+0x40>)
 80008a6:	2140      	movs	r1, #64	; 0x40
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <HAL_FDCAN_RxFifo0Callback+0x44>)
 80008aa:	f000 fcf1 	bl	8001290 <HAL_FDCAN_GetRxMessage>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_FDCAN_RxFifo0Callback+0x20>
		/* Transmission request Error */
		Error_Handler();
 80008b4:	f000 f886 	bl	80009c4 <Error_Handler>
	}
	ID = RxHeader.Identifier;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <HAL_FDCAN_RxFifo0Callback+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80008be:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2120      	movs	r1, #32
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f001 fa32 	bl	8001d30 <HAL_GPIO_WritePin>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000140 	.word	0x20000140
 80008d8:	2000016c 	.word	0x2000016c
 80008dc:	200000d4 	.word	0x200000d4
 80008e0:	20000028 	.word	0x20000028

080008e4 <readSigmaData>:

void readSigmaData(void){
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
	switch(ID){
 80008e8:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <readSigmaData+0xcc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80008f0:	d01d      	beq.n	800092e <readSigmaData+0x4a>
 80008f2:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 80008f6:	d03d      	beq.n	8000974 <readSigmaData+0x90>
 80008f8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80008fc:	d000      	beq.n	8000900 <readSigmaData+0x1c>
			cs.MotorTemperature		= RxData.Data8u[1];
			cs.BDI					= RxData.Data8u[2];
			cs.FaultSubCode			= RxData.Data8u[3]<<8 | RxData.Data8u[4];
	break;
	}
}
 80008fe:	e052      	b.n	80009a6 <readSigmaData+0xc2>
			ms.MotorSpeed			= RxData.Data16u[0];
 8000900:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <readSigmaData+0xd0>)
 8000902:	881a      	ldrh	r2, [r3, #0]
 8000904:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <readSigmaData+0xd4>)
 8000906:	801a      	strh	r2, [r3, #0]
			ms.MotorCurrent			= RxData.Data16[1];
 8000908:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <readSigmaData+0xd0>)
 800090a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <readSigmaData+0xd4>)
 8000910:	805a      	strh	r2, [r3, #2]
			ms.MotorVoltage			= RxData.Data8u[4];
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <readSigmaData+0xd0>)
 8000914:	791a      	ldrb	r2, [r3, #4]
 8000916:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <readSigmaData+0xd4>)
 8000918:	711a      	strb	r2, [r3, #4]
			ms.BatteryVoltage		= RxData.Data8u[5];
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <readSigmaData+0xd0>)
 800091c:	795a      	ldrb	r2, [r3, #5]
 800091e:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <readSigmaData+0xd4>)
 8000920:	715a      	strb	r2, [r3, #5]
			ms.BatteryCurrent		= RxData.Data16[4];
 8000922:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <readSigmaData+0xd0>)
 8000924:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <readSigmaData+0xd4>)
 800092a:	80da      	strh	r2, [r3, #6]
	break;
 800092c:	e03b      	b.n	80009a6 <readSigmaData+0xc2>
			ds.ActualTorque			= RxData.Data16[0];
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <readSigmaData+0xd0>)
 8000930:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <readSigmaData+0xd8>)
 8000936:	801a      	strh	r2, [r3, #0]
			ds.ActualSpeed			= RxData.Data16[1];
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <readSigmaData+0xd0>)
 800093a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <readSigmaData+0xd8>)
 8000940:	805a      	strh	r2, [r3, #2]
			ds.DriveStatusIndicator	= RxData.Data8u[4];
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <readSigmaData+0xd0>)
 8000944:	791a      	ldrb	r2, [r3, #4]
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <readSigmaData+0xd8>)
 8000948:	711a      	strb	r2, [r3, #4]
			ds.SpeedLimitIndicator	= RxData.Data8u[4];
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <readSigmaData+0xd0>)
 800094c:	791a      	ldrb	r2, [r3, #4]
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <readSigmaData+0xd8>)
 8000950:	715a      	strb	r2, [r3, #5]
			ds.TorqueLimitIndicator	= RxData.Data8u[5];
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <readSigmaData+0xd0>)
 8000954:	795a      	ldrb	r2, [r3, #5]
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <readSigmaData+0xd8>)
 8000958:	719a      	strb	r2, [r3, #6]
			ds.MotorLimitIndicator	= RxData.Data8u[5];
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <readSigmaData+0xd0>)
 800095c:	795a      	ldrb	r2, [r3, #5]
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <readSigmaData+0xd8>)
 8000960:	71da      	strb	r2, [r3, #7]
			ds.FaultCode			= RxData.Data8u[6];
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <readSigmaData+0xd0>)
 8000964:	799a      	ldrb	r2, [r3, #6]
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <readSigmaData+0xd8>)
 8000968:	721a      	strb	r2, [r3, #8]
			ds.Code					= RxData.Data8u[7];
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <readSigmaData+0xd0>)
 800096c:	79da      	ldrb	r2, [r3, #7]
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <readSigmaData+0xd8>)
 8000970:	725a      	strb	r2, [r3, #9]
	break;
 8000972:	e018      	b.n	80009a6 <readSigmaData+0xc2>
			cs.ControllerTemperature= RxData.Data8u[0];
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <readSigmaData+0xd0>)
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <readSigmaData+0xdc>)
 800097a:	701a      	strb	r2, [r3, #0]
			cs.MotorTemperature		= RxData.Data8u[1];
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <readSigmaData+0xd0>)
 800097e:	785a      	ldrb	r2, [r3, #1]
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <readSigmaData+0xdc>)
 8000982:	705a      	strb	r2, [r3, #1]
			cs.BDI					= RxData.Data8u[2];
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <readSigmaData+0xd0>)
 8000986:	789a      	ldrb	r2, [r3, #2]
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <readSigmaData+0xdc>)
 800098a:	709a      	strb	r2, [r3, #2]
			cs.FaultSubCode			= RxData.Data8u[3]<<8 | RxData.Data8u[4];
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <readSigmaData+0xd0>)
 800098e:	78db      	ldrb	r3, [r3, #3]
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	b21a      	sxth	r2, r3
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <readSigmaData+0xd0>)
 8000996:	791b      	ldrb	r3, [r3, #4]
 8000998:	b21b      	sxth	r3, r3
 800099a:	4313      	orrs	r3, r2
 800099c:	b21b      	sxth	r3, r3
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <readSigmaData+0xdc>)
 80009a2:	809a      	strh	r2, [r3, #4]
	break;
 80009a4:	bf00      	nop
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	20000028 	.word	0x20000028
 80009b4:	20000140 	.word	0x20000140
 80009b8:	20000040 	.word	0x20000040
 80009bc:	20000034 	.word	0x20000034
 80009c0:	2000002c 	.word	0x2000002c

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 80009de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009e2:	6093      	str	r3, [r2, #8]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40007000 	.word	0x40007000

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x44>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_MspInit+0x44>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6613      	str	r3, [r2, #96]	; 0x60
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x44>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000a2a:	f7ff ffd3 	bl	80009d4 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a18      	ldr	r2, [pc, #96]	; (8000abc <HAL_FDCAN_MspInit+0x80>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d129      	bne.n	8000ab2 <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_FDCAN_MspInit+0x84>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_FDCAN_MspInit+0x84>)
 8000a64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a68:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_FDCAN_MspInit+0x84>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_FDCAN_MspInit+0x84>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <HAL_FDCAN_MspInit+0x84>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_FDCAN_MspInit+0x84>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000aa0:	2309      	movs	r3, #9
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f000 ffbd 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40006400 	.word	0x40006400
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_UART_MspInit+0x7c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d128      	bne.n	8000b38 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_UART_MspInit+0x80>)
 8000ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aea:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <HAL_UART_MspInit+0x80>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_UART_MspInit+0x80>)
 8000af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_UART_MspInit+0x80>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_UART_MspInit+0x80>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_UART_MspInit+0x80>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b16:	230c      	movs	r3, #12
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b26:	230c      	movs	r3, #12
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f000 ff7a 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40008000 	.word	0x40008000
 8000b44:	40021000 	.word	0x40021000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f8a6 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <FDCAN1_IT0_IRQHandler+0x10>)
 8000baa:	f000 fd31 	bl	8001610 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000d4 	.word	0x200000d4

08000bb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bc0:	f001 f8ce 	bl	8001d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <SystemInit+0x28>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <SystemInit+0x28>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SystemInit+0x28>)
 8000bde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000be2:	609a      	str	r2, [r3, #8]
#endif
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <LoopForever+0xe>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c10:	4c0b      	ldr	r4, [pc, #44]	; (8000c40 <LoopForever+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c1e:	f7ff ffd3 	bl	8000bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f003 fd75 	bl	8004710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c26:	f7ff fc77 	bl	8000518 <main>

08000c2a <LoopForever>:

LoopForever:
    b LoopForever
 8000c2a:	e7fe      	b.n	8000c2a <LoopForever>
  ldr   r0, =_estack
 8000c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c38:	080047c8 	.word	0x080047c8
  ldr r2, =_sbss
 8000c3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c40:	20000198 	.word	0x20000198

08000c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC1_2_IRQHandler>

08000c46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f95b 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 f80e 	bl	8000c78 <HAL_InitTick>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	e001      	b.n	8000c6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c68:	f7ff fec4 	bl	80009f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_InitTick+0x68>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d022      	beq.n	8000cd2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_InitTick+0x6c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_InitTick+0x68>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f966 	bl	8000f72 <HAL_SYSTICK_Config>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10f      	bne.n	8000ccc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b0f      	cmp	r3, #15
 8000cb0:	d809      	bhi.n	8000cc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cba:	f000 f932 	bl	8000f22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_InitTick+0x70>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	e007      	b.n	8000cd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	e004      	b.n	8000cd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e001      	b.n	8000cd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_IncTick+0x1c>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <HAL_IncTick+0x1c>)
 8000cfc:	6013      	str	r3, [r2, #0]
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	20000194 	.word	0x20000194
 8000d0c:	20000008 	.word	0x20000008

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000194 	.word	0x20000194

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d004      	beq.n	8000d4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_Delay+0x40>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4413      	add	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d4c:	bf00      	nop
 8000d4e:	f7ff ffdf 	bl	8000d10 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d8f7      	bhi.n	8000d4e <HAL_Delay+0x26>
  {
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0b      	blt.n	8000dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	4907      	ldr	r1, [pc, #28]	; (8000e08 <__NVIC_EnableIRQ+0x38>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	; (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	; (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed8:	d301      	bcc.n	8000ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00f      	b.n	8000efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <SysTick_Config+0x40>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f7ff ff8e 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <SysTick_Config+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <SysTick_Config+0x40>)
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	e000e010 	.word	0xe000e010

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff29 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff40 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff90 	bl	8000e60 <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5f 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff33 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffa4 	bl	8000ec8 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e147      	b.n	800122e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fd42 	bl	8000a3c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	699a      	ldr	r2, [r3, #24]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0210 	bic.w	r2, r2, #16
 8000fc6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc8:	f7ff fea2 	bl	8000d10 <HAL_GetTick>
 8000fcc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000fce:	e012      	b.n	8000ff6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000fd0:	f7ff fe9e 	bl	8000d10 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b0a      	cmp	r3, #10
 8000fdc:	d90b      	bls.n	8000ff6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	f043 0201 	orr.w	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e11b      	b.n	800122e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	2b08      	cmp	r3, #8
 8001002:	d0e5      	beq.n	8000fd0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	699a      	ldr	r2, [r3, #24]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0201 	orr.w	r2, r2, #1
 8001012:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001014:	f7ff fe7c 	bl	8000d10 <HAL_GetTick>
 8001018:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800101a:	e012      	b.n	8001042 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800101c:	f7ff fe78 	bl	8000d10 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b0a      	cmp	r3, #10
 8001028:	d90b      	bls.n	8001042 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102e:	f043 0201 	orr.w	r2, r3, #1
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2203      	movs	r2, #3
 800103a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e0f5      	b.n	800122e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0e5      	beq.n	800101c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	699a      	ldr	r2, [r3, #24]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0202 	orr.w	r2, r2, #2
 800105e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a74      	ldr	r2, [pc, #464]	; (8001238 <HAL_FDCAN_Init+0x2ac>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d103      	bne.n	8001072 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800106a:	4a74      	ldr	r2, [pc, #464]	; (800123c <HAL_FDCAN_Init+0x2b0>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7c1b      	ldrb	r3, [r3, #16]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	699a      	ldr	r2, [r3, #24]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001088:	619a      	str	r2, [r3, #24]
 800108a:	e007      	b.n	800109c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	699a      	ldr	r2, [r3, #24]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800109a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7c5b      	ldrb	r3, [r3, #17]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d108      	bne.n	80010b6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	699a      	ldr	r2, [r3, #24]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010b2:	619a      	str	r2, [r3, #24]
 80010b4:	e007      	b.n	80010c6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	699a      	ldr	r2, [r3, #24]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010c4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7c9b      	ldrb	r3, [r3, #18]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d108      	bne.n	80010e0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	699a      	ldr	r2, [r3, #24]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010dc:	619a      	str	r2, [r3, #24]
 80010de:	e007      	b.n	80010f0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	699a      	ldr	r2, [r3, #24]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010ee:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	699a      	ldr	r2, [r3, #24]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001114:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0210 	bic.w	r2, r2, #16
 8001124:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d108      	bne.n	8001140 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	699a      	ldr	r2, [r3, #24]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 0204 	orr.w	r2, r2, #4
 800113c:	619a      	str	r2, [r3, #24]
 800113e:	e02c      	b.n	800119a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d028      	beq.n	800119a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d01c      	beq.n	800118a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	699a      	ldr	r2, [r3, #24]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800115e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691a      	ldr	r2, [r3, #16]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0210 	orr.w	r2, r2, #16
 800116e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b03      	cmp	r3, #3
 8001176:	d110      	bne.n	800119a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	699a      	ldr	r2, [r3, #24]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0220 	orr.w	r2, r2, #32
 8001186:	619a      	str	r2, [r3, #24]
 8001188:	e007      	b.n	800119a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	699a      	ldr	r2, [r3, #24]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f042 0220 	orr.w	r2, r2, #32
 8001198:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	3b01      	subs	r3, #1
 80011a0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011aa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80011b2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80011c2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011c4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80011ce:	d115      	bne.n	80011fc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	3b01      	subs	r3, #1
 80011dc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011de:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	3b01      	subs	r3, #1
 80011e6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80011e8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	3b01      	subs	r3, #1
 80011f2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80011f8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011fa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 fb9e 	bl	8001954 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40006400 	.word	0x40006400
 800123c:	40006500 	.word	0x40006500

08001240 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d110      	bne.n	8001276 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2202      	movs	r2, #2
 8001258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	699a      	ldr	r2, [r3, #24]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0201 	bic.w	r2, r2, #1
 800126a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e006      	b.n	8001284 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	f043 0204 	orr.w	r2, r3, #4
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
  }
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001290:	b480      	push	{r7}
 8001292:	b08b      	sub	sp, #44	; 0x2c
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80012a4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80012a6:	7efb      	ldrb	r3, [r7, #27]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	f040 80bc 	bne.w	8001426 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2b40      	cmp	r3, #64	; 0x40
 80012b2:	d121      	bne.n	80012f8 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012bc:	f003 030f 	and.w	r3, r3, #15
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d107      	bne.n	80012d4 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0af      	b.n	8001434 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	4613      	mov	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
 80012f6:	e020      	b.n	800133a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	2b00      	cmp	r3, #0
 8001306:	d107      	bne.n	8001318 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e08d      	b.n	8001434 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4413      	add	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	440b      	add	r3, r1
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d107      	bne.n	800135e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	0c9b      	lsrs	r3, r3, #18
 8001354:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e005      	b.n	800136a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	3304      	adds	r3, #4
 8001386:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b29a      	uxth	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	0e1b      	lsrs	r3, r3, #24
 80013bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	0fda      	lsrs	r2, r3, #31
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	3304      	adds	r3, #4
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
 80013dc:	e00a      	b.n	80013f4 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	441a      	add	r2, r3
 80013e4:	6839      	ldr	r1, [r7, #0]
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	440b      	add	r3, r1
 80013ea:	7812      	ldrb	r2, [r2, #0]
 80013ec:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	3301      	adds	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0c1b      	lsrs	r3, r3, #16
 80013fa:	4a11      	ldr	r2, [pc, #68]	; (8001440 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80013fc:	5cd3      	ldrb	r3, [r2, r3]
 80013fe:	461a      	mov	r2, r3
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	4293      	cmp	r3, r2
 8001404:	d3eb      	bcc.n	80013de <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b40      	cmp	r3, #64	; 0x40
 800140a:	d105      	bne.n	8001418 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001416:	e004      	b.n	8001422 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e006      	b.n	8001434 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	f043 0208 	orr.w	r2, r3, #8
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
  }
}
 8001434:	4618      	mov	r0, r3
 8001436:	372c      	adds	r7, #44	; 0x2c
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	080047a8 	.word	0x080047a8

08001444 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001456:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d003      	beq.n	8001466 <HAL_FDCAN_ActivateNotification+0x22>
 800145e:	7dfb      	ldrb	r3, [r7, #23]
 8001460:	2b02      	cmp	r3, #2
 8001462:	f040 80c8 	bne.w	80015f6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	2b00      	cmp	r3, #0
 8001476:	d004      	beq.n	8001482 <HAL_FDCAN_ActivateNotification+0x3e>
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d03b      	beq.n	80014fa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d031      	beq.n	80014fa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d027      	beq.n	80014fa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d01d      	beq.n	80014fa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d013      	beq.n	80014fa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d004      	beq.n	80014e6 <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d009      	beq.n	80014fa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00c      	beq.n	800150a <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d107      	bne.n	800150a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 0201 	orr.w	r2, r2, #1
 8001508:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d004      	beq.n	800151e <HAL_FDCAN_ActivateNotification+0xda>
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d13b      	bne.n	8001596 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d131      	bne.n	8001596 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	2b00      	cmp	r3, #0
 8001544:	d127      	bne.n	8001596 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d11d      	bne.n	8001596 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d113      	bne.n	8001596 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001574:	2b00      	cmp	r3, #0
 8001576:	d004      	beq.n	8001582 <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	2b00      	cmp	r3, #0
 8001580:	d109      	bne.n	8001596 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00c      	beq.n	80015a6 <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0202 	orr.w	r2, r2, #2
 80015a4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d009      	beq.n	80015c4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	430a      	orrs	r2, r1
 80015c0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	430a      	orrs	r2, r1
 80015de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e006      	b.n	8001604 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	f043 0202 	orr.w	r2, r3, #2
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
  }
}
 8001604:	4618      	mov	r0, r3
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800161e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162c:	4013      	ands	r3, r2
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001642:	6a3a      	ldr	r2, [r7, #32]
 8001644:	4013      	ands	r3, r2
 8001646:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001652:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	4013      	ands	r3, r2
 800165e:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001666:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800166a:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800167e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001682:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4013      	ands	r3, r2
 800168e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00d      	beq.n	80016ba <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d006      	beq.n	80016ba <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2240      	movs	r2, #64	; 0x40
 80016b2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f92e 	bl	8001916 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01b      	beq.n	8001700 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d014      	beq.n	8001700 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016de:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80016f8:	6939      	ldr	r1, [r7, #16]
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f8ec 	bl	80018d8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800170e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f8b6 	bl	8001882 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d007      	beq.n	800172c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6a3a      	ldr	r2, [r7, #32]
 8001722:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001724:	6a39      	ldr	r1, [r7, #32]
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff f8b6 	bl	8000898 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800173a:	69f9      	ldr	r1, [r7, #28]
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f8ab 	bl	8001898 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00e      	beq.n	800176e <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001766:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f8a0 	bl	80018ae <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01a      	beq.n	80017b2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001786:	2b00      	cmp	r3, #0
 8001788:	d013      	beq.n	80017b2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001792:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4013      	ands	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80017aa:	68f9      	ldr	r1, [r7, #12]
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f888 	bl	80018c2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00e      	beq.n	80017de <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d007      	beq.n	80017de <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f888 	bl	80018ee <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00e      	beq.n	800180a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001802:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f87c 	bl	8001902 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d011      	beq.n	800183c <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00a      	beq.n	800183c <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800182e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001834:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d007      	beq.n	8001852 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800184a:	6979      	ldr	r1, [r7, #20]
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f876 	bl	800193e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d009      	beq.n	800186c <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f858 	bl	800192a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800195c:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800195e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a2f      	ldr	r2, [pc, #188]	; (8001a24 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d103      	bne.n	8001972 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001970:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a2c      	ldr	r2, [pc, #176]	; (8001a28 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d103      	bne.n	8001984 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001982:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001992:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199a:	041a      	lsls	r2, r3, #16
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019b8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c0:	061a      	lsls	r2, r3, #24
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	e005      	b.n	8001a06 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3304      	adds	r3, #4
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d3f3      	bcc.n	80019fa <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	4000a400 	.word	0x4000a400
 8001a24:	40006800 	.word	0x40006800
 8001a28:	40006c00 	.word	0x40006c00

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a3a:	e15a      	b.n	8001cf2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2101      	movs	r1, #1
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 814c 	beq.w	8001cec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x38>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b12      	cmp	r3, #18
 8001a62:	d123      	bne.n	8001aac <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	6939      	ldr	r1, [r7, #16]
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d00b      	beq.n	8001b00 <HAL_GPIO_Init+0xd4>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d007      	beq.n	8001b00 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001af4:	2b11      	cmp	r3, #17
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b12      	cmp	r3, #18
 8001afe:	d130      	bne.n	8001b62 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b36:	2201      	movs	r2, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	f003 0201 	and.w	r2, r3, #1
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80a6 	beq.w	8001cec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba0:	4b5b      	ldr	r3, [pc, #364]	; (8001d10 <HAL_GPIO_Init+0x2e4>)
 8001ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba4:	4a5a      	ldr	r2, [pc, #360]	; (8001d10 <HAL_GPIO_Init+0x2e4>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6613      	str	r3, [r2, #96]	; 0x60
 8001bac:	4b58      	ldr	r3, [pc, #352]	; (8001d10 <HAL_GPIO_Init+0x2e4>)
 8001bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb8:	4a56      	ldr	r2, [pc, #344]	; (8001d14 <HAL_GPIO_Init+0x2e8>)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001be2:	d01f      	beq.n	8001c24 <HAL_GPIO_Init+0x1f8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a4c      	ldr	r2, [pc, #304]	; (8001d18 <HAL_GPIO_Init+0x2ec>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d019      	beq.n	8001c20 <HAL_GPIO_Init+0x1f4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a4b      	ldr	r2, [pc, #300]	; (8001d1c <HAL_GPIO_Init+0x2f0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d013      	beq.n	8001c1c <HAL_GPIO_Init+0x1f0>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <HAL_GPIO_Init+0x2f4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00d      	beq.n	8001c18 <HAL_GPIO_Init+0x1ec>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <HAL_GPIO_Init+0x2f8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d007      	beq.n	8001c14 <HAL_GPIO_Init+0x1e8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a48      	ldr	r2, [pc, #288]	; (8001d28 <HAL_GPIO_Init+0x2fc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_GPIO_Init+0x1e4>
 8001c0c:	2305      	movs	r3, #5
 8001c0e:	e00a      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c10:	2306      	movs	r3, #6
 8001c12:	e008      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c14:	2304      	movs	r3, #4
 8001c16:	e006      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e004      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e002      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c24:	2300      	movs	r3, #0
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	f002 0203 	and.w	r2, r2, #3
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c36:	4937      	ldr	r1, [pc, #220]	; (8001d14 <HAL_GPIO_Init+0x2e8>)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c44:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c68:	4a30      	ldr	r2, [pc, #192]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c92:	4a26      	ldr	r2, [pc, #152]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ce6:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f47f ae9d 	bne.w	8001a3c <HAL_GPIO_Init+0x10>
  }
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010000 	.word	0x40010000
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	48000800 	.word	0x48000800
 8001d20:	48000c00 	.word	0x48000c00
 8001d24:	48001000 	.word	0x48001000
 8001d28:	48001400 	.word	0x48001400
 8001d2c:	40010400 	.word	0x40010400

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d6c:	695a      	ldr	r2, [r3, #20]
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f806 	bl	8001d90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40010400 	.word	0x40010400

08001d90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d141      	bne.n	8001e3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001db6:	4b4b      	ldr	r3, [pc, #300]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc2:	d131      	bne.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dc4:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dca:	4a46      	ldr	r2, [pc, #280]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd4:	4b43      	ldr	r3, [pc, #268]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ddc:	4a41      	ldr	r2, [pc, #260]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001de4:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2232      	movs	r2, #50	; 0x32
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	4a3f      	ldr	r2, [pc, #252]	; (8001eec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001df0:	fba2 2303 	umull	r2, r3, r2, r3
 8001df4:	0c9b      	lsrs	r3, r3, #18
 8001df6:	3301      	adds	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dfa:	e002      	b.n	8001e02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e0e:	d102      	bne.n	8001e16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f2      	bne.n	8001dfc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e16:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e22:	d158      	bne.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e057      	b.n	8001ed8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e28:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e38:	e04d      	b.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e40:	d141      	bne.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e4e:	d131      	bne.n	8001eb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e56:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e68:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2232      	movs	r2, #50	; 0x32
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	0c9b      	lsrs	r3, r3, #18
 8001e82:	3301      	adds	r3, #1
 8001e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e86:	e002      	b.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9a:	d102      	bne.n	8001ea2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f2      	bne.n	8001e88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eae:	d112      	bne.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e011      	b.n	8001ed8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ec4:	e007      	b.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	431bde83 	.word	0x431bde83

08001ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e308      	b.n	8002514 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d075      	beq.n	8001ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0e:	4ba3      	ldr	r3, [pc, #652]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f18:	4ba0      	ldr	r3, [pc, #640]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	d102      	bne.n	8001f2e <HAL_RCC_OscConfig+0x3e>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d002      	beq.n	8001f34 <HAL_RCC_OscConfig+0x44>
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d10b      	bne.n	8001f4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	4b99      	ldr	r3, [pc, #612]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d05b      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x108>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d157      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e2e3      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f54:	d106      	bne.n	8001f64 <HAL_RCC_OscConfig+0x74>
 8001f56:	4b91      	ldr	r3, [pc, #580]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a90      	ldr	r2, [pc, #576]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e01d      	b.n	8001fa0 <HAL_RCC_OscConfig+0xb0>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x98>
 8001f6e:	4b8b      	ldr	r3, [pc, #556]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a8a      	ldr	r2, [pc, #552]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b88      	ldr	r3, [pc, #544]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a87      	ldr	r2, [pc, #540]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_OscConfig+0xb0>
 8001f88:	4b84      	ldr	r3, [pc, #528]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a83      	ldr	r2, [pc, #524]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b81      	ldr	r3, [pc, #516]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a80      	ldr	r2, [pc, #512]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d013      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7fe feb2 	bl	8000d10 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7fe feae 	bl	8000d10 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e2a8      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc2:	4b76      	ldr	r3, [pc, #472]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xc0>
 8001fce:	e014      	b.n	8001ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fe9e 	bl	8000d10 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7fe fe9a 	bl	8000d10 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	; 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e294      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fea:	4b6c      	ldr	r3, [pc, #432]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0xe8>
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d075      	beq.n	80020f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002006:	4b65      	ldr	r3, [pc, #404]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002010:	4b62      	ldr	r3, [pc, #392]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b0c      	cmp	r3, #12
 800201e:	d102      	bne.n	8002026 <HAL_RCC_OscConfig+0x136>
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d002      	beq.n	800202c <HAL_RCC_OscConfig+0x13c>
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b04      	cmp	r3, #4
 800202a:	d11f      	bne.n	800206c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800202c:	4b5b      	ldr	r3, [pc, #364]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_OscConfig+0x154>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e267      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b55      	ldr	r3, [pc, #340]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	061b      	lsls	r3, r3, #24
 8002052:	4952      	ldr	r1, [pc, #328]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002058:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <HAL_RCC_OscConfig+0x2b0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fe0b 	bl	8000c78 <HAL_InitTick>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d043      	beq.n	80020f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e253      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d023      	beq.n	80020bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002074:	4b49      	ldr	r3, [pc, #292]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a48      	ldr	r2, [pc, #288]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 800207a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7fe fe46 	bl	8000d10 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002088:	f7fe fe42 	bl	8000d10 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e23c      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209a:	4b40      	ldr	r3, [pc, #256]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	061b      	lsls	r3, r3, #24
 80020b4:	4939      	ldr	r1, [pc, #228]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
 80020ba:	e01a      	b.n	80020f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020bc:	4b37      	ldr	r3, [pc, #220]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a36      	ldr	r2, [pc, #216]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 80020c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe fe22 	bl	8000d10 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d0:	f7fe fe1e 	bl	8000d10 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e218      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e2:	4b2e      	ldr	r3, [pc, #184]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1e0>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d03c      	beq.n	8002178 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d01c      	beq.n	8002140 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002106:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8002108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800210c:	4a23      	ldr	r2, [pc, #140]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002116:	f7fe fdfb 	bl	8000d10 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211e:	f7fe fdf7 	bl	8000d10 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e1f1      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8002132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0ef      	beq.n	800211e <HAL_RCC_OscConfig+0x22e>
 800213e:	e01b      	b.n	8002178 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8002142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002146:	4a15      	ldr	r2, [pc, #84]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7fe fdde 	bl	8000d10 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002158:	f7fe fdda 	bl	8000d10 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e1d4      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 800216c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1ef      	bne.n	8002158 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80ab 	beq.w	80022dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <HAL_RCC_OscConfig+0x2ac>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_RCC_OscConfig+0x2b4>
 8002196:	2301      	movs	r3, #1
 8002198:	e005      	b.n	80021a6 <HAL_RCC_OscConfig+0x2b6>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	20000004 	.word	0x20000004
 80021a4:	2300      	movs	r3, #0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00d      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	4baf      	ldr	r3, [pc, #700]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	4aae      	ldr	r2, [pc, #696]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	6593      	str	r3, [r2, #88]	; 0x58
 80021b6:	4bac      	ldr	r3, [pc, #688]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021c2:	2301      	movs	r3, #1
 80021c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c6:	4ba9      	ldr	r3, [pc, #676]	; (800246c <HAL_RCC_OscConfig+0x57c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d118      	bne.n	8002204 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021d2:	4ba6      	ldr	r3, [pc, #664]	; (800246c <HAL_RCC_OscConfig+0x57c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4aa5      	ldr	r2, [pc, #660]	; (800246c <HAL_RCC_OscConfig+0x57c>)
 80021d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021de:	f7fe fd97 	bl	8000d10 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e6:	f7fe fd93 	bl	8000d10 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e18d      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f8:	4b9c      	ldr	r3, [pc, #624]	; (800246c <HAL_RCC_OscConfig+0x57c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d108      	bne.n	800221e <HAL_RCC_OscConfig+0x32e>
 800220c:	4b96      	ldr	r3, [pc, #600]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002212:	4a95      	ldr	r2, [pc, #596]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800221c:	e024      	b.n	8002268 <HAL_RCC_OscConfig+0x378>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b05      	cmp	r3, #5
 8002224:	d110      	bne.n	8002248 <HAL_RCC_OscConfig+0x358>
 8002226:	4b90      	ldr	r3, [pc, #576]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	4a8e      	ldr	r2, [pc, #568]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002236:	4b8c      	ldr	r3, [pc, #560]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	4a8a      	ldr	r2, [pc, #552]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002246:	e00f      	b.n	8002268 <HAL_RCC_OscConfig+0x378>
 8002248:	4b87      	ldr	r3, [pc, #540]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	4a86      	ldr	r2, [pc, #536]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002258:	4b83      	ldr	r3, [pc, #524]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	4a82      	ldr	r2, [pc, #520]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002260:	f023 0304 	bic.w	r3, r3, #4
 8002264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d016      	beq.n	800229e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002270:	f7fe fd4e 	bl	8000d10 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002276:	e00a      	b.n	800228e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002278:	f7fe fd4a 	bl	8000d10 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e142      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228e:	4b76      	ldr	r3, [pc, #472]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0ed      	beq.n	8002278 <HAL_RCC_OscConfig+0x388>
 800229c:	e015      	b.n	80022ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229e:	f7fe fd37 	bl	8000d10 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7fe fd33 	bl	8000d10 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e12b      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022bc:	4b6a      	ldr	r3, [pc, #424]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 80022be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1ed      	bne.n	80022a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ca:	7ffb      	ldrb	r3, [r7, #31]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d105      	bne.n	80022dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d0:	4b65      	ldr	r3, [pc, #404]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	4a64      	ldr	r2, [pc, #400]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 80022d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d03c      	beq.n	8002362 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01c      	beq.n	800232a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022f0:	4b5d      	ldr	r3, [pc, #372]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 80022f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022f6:	4a5c      	ldr	r2, [pc, #368]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002300:	f7fe fd06 	bl	8000d10 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002308:	f7fe fd02 	bl	8000d10 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e0fc      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800231a:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 800231c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0ef      	beq.n	8002308 <HAL_RCC_OscConfig+0x418>
 8002328:	e01b      	b.n	8002362 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800232a:	4b4f      	ldr	r3, [pc, #316]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 800232c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002330:	4a4d      	ldr	r2, [pc, #308]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233a:	f7fe fce9 	bl	8000d10 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002342:	f7fe fce5 	bl	8000d10 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e0df      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002354:	4b44      	ldr	r3, [pc, #272]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1ef      	bne.n	8002342 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 80d3 	beq.w	8002512 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800236c:	4b3e      	ldr	r3, [pc, #248]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b0c      	cmp	r3, #12
 8002376:	f000 808d 	beq.w	8002494 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d15a      	bne.n	8002438 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	4b39      	ldr	r3, [pc, #228]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a38      	ldr	r2, [pc, #224]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800238c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7fe fcbf 	bl	8000d10 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe fcbb 	bl	8000d10 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e0b5      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a8:	4b2f      	ldr	r3, [pc, #188]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b4:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_RCC_OscConfig+0x580>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6a11      	ldr	r1, [r2, #32]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023c4:	3a01      	subs	r2, #1
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	4311      	orrs	r1, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80023ce:	0212      	lsls	r2, r2, #8
 80023d0:	4311      	orrs	r1, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023d6:	0852      	lsrs	r2, r2, #1
 80023d8:	3a01      	subs	r2, #1
 80023da:	0552      	lsls	r2, r2, #21
 80023dc:	4311      	orrs	r1, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023e2:	0852      	lsrs	r2, r2, #1
 80023e4:	3a01      	subs	r2, #1
 80023e6:	0652      	lsls	r2, r2, #25
 80023e8:	4311      	orrs	r1, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023ee:	06d2      	lsls	r2, r2, #27
 80023f0:	430a      	orrs	r2, r1
 80023f2:	491d      	ldr	r1, [pc, #116]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 80023fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002402:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002404:	4b18      	ldr	r3, [pc, #96]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a17      	ldr	r2, [pc, #92]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 800240a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe fc7e 	bl	8000d10 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fc7a 	bl	8000d10 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e074      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x528>
 8002436:	e06c      	b.n	8002512 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 800243e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 800244a:	f023 0303 	bic.w	r3, r3, #3
 800244e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_RCC_OscConfig+0x578>)
 8002456:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800245a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fc56 	bl	8000d10 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002466:	e00e      	b.n	8002486 <HAL_RCC_OscConfig+0x596>
 8002468:	40021000 	.word	0x40021000
 800246c:	40007000 	.word	0x40007000
 8002470:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe fc4c 	bl	8000d10 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e046      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002486:	4b25      	ldr	r3, [pc, #148]	; (800251c <HAL_RCC_OscConfig+0x62c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x584>
 8002492:	e03e      	b.n	8002512 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e039      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <HAL_RCC_OscConfig+0x62c>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d12c      	bne.n	800250e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	3b01      	subs	r3, #1
 80024c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d123      	bne.n	800250e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d11b      	bne.n	800250e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d113      	bne.n	800250e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	3b01      	subs	r3, #1
 80024f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d109      	bne.n	800250e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	3b01      	subs	r3, #1
 8002508:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e11e      	b.n	8002776 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	4b91      	ldr	r3, [pc, #580]	; (8002780 <HAL_RCC_ClockConfig+0x260>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d910      	bls.n	8002568 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <HAL_RCC_ClockConfig+0x260>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 020f 	bic.w	r2, r3, #15
 800254e:	498c      	ldr	r1, [pc, #560]	; (8002780 <HAL_RCC_ClockConfig+0x260>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b8a      	ldr	r3, [pc, #552]	; (8002780 <HAL_RCC_ClockConfig+0x260>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e106      	b.n	8002776 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d073      	beq.n	800265c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d129      	bne.n	80025d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257c:	4b81      	ldr	r3, [pc, #516]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0f4      	b.n	8002776 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800258c:	f000 f99e 	bl	80028cc <RCC_GetSysClockFreqFromPLLSource>
 8002590:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4a7c      	ldr	r2, [pc, #496]	; (8002788 <HAL_RCC_ClockConfig+0x268>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d93f      	bls.n	800261a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800259a:	4b7a      	ldr	r3, [pc, #488]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d033      	beq.n	800261a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d12f      	bne.n	800261a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025ba:	4b72      	ldr	r3, [pc, #456]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c2:	4a70      	ldr	r2, [pc, #448]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 80025c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	e024      	b.n	800261a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d107      	bne.n	80025e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025d8:	4b6a      	ldr	r3, [pc, #424]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0c6      	b.n	8002776 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e8:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0be      	b.n	8002776 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80025f8:	f000 f8ce 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4a61      	ldr	r2, [pc, #388]	; (8002788 <HAL_RCC_ClockConfig+0x268>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d909      	bls.n	800261a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002606:	4b5f      	ldr	r3, [pc, #380]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800260e:	4a5d      	ldr	r2, [pc, #372]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 8002610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002614:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800261a:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f023 0203 	bic.w	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4957      	ldr	r1, [pc, #348]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 8002628:	4313      	orrs	r3, r2
 800262a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800262c:	f7fe fb70 	bl	8000d10 <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	e00a      	b.n	800264a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002634:	f7fe fb6c 	bl	8000d10 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e095      	b.n	8002776 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	4b4e      	ldr	r3, [pc, #312]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 020c 	and.w	r2, r3, #12
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	429a      	cmp	r2, r3
 800265a:	d1eb      	bne.n	8002634 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d023      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002674:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a42      	ldr	r2, [pc, #264]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 800267a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800267e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800268c:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002694:	4a3b      	ldr	r2, [pc, #236]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 8002696:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800269a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4936      	ldr	r1, [pc, #216]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b80      	cmp	r3, #128	; 0x80
 80026b4:	d105      	bne.n	80026c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026b6:	4b33      	ldr	r3, [pc, #204]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	4a32      	ldr	r2, [pc, #200]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 80026bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c2:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <HAL_RCC_ClockConfig+0x260>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d21d      	bcs.n	800270c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d0:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_RCC_ClockConfig+0x260>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 020f 	bic.w	r2, r3, #15
 80026d8:	4929      	ldr	r1, [pc, #164]	; (8002780 <HAL_RCC_ClockConfig+0x260>)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fb16 	bl	8000d10 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fb12 	bl	8000d10 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e03b      	b.n	8002776 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCC_ClockConfig+0x260>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d1ed      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4917      	ldr	r1, [pc, #92]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002736:	4b13      	ldr	r3, [pc, #76]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	490f      	ldr	r1, [pc, #60]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800274a:	f000 f825 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 800274e:	4601      	mov	r1, r0
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_RCC_ClockConfig+0x264>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <HAL_RCC_ClockConfig+0x26c>)
 800275c:	5cd3      	ldrb	r3, [r2, r3]
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	fa21 f303 	lsr.w	r3, r1, r3
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <HAL_RCC_ClockConfig+0x270>)
 8002768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_RCC_ClockConfig+0x274>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fa82 	bl	8000c78 <HAL_InitTick>
 8002774:	4603      	mov	r3, r0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40022000 	.word	0x40022000
 8002784:	40021000 	.word	0x40021000
 8002788:	04c4b400 	.word	0x04c4b400
 800278c:	08004790 	.word	0x08004790
 8002790:	20000000 	.word	0x20000000
 8002794:	20000004 	.word	0x20000004

08002798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800279e:	4b2c      	ldr	r3, [pc, #176]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d102      	bne.n	80027b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	e047      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d102      	bne.n	80027c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027bc:	4b26      	ldr	r3, [pc, #152]	; (8002858 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	e03e      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027c2:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d136      	bne.n	800283c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027d8:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3301      	adds	r3, #1
 80027e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d10c      	bne.n	8002806 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027ec:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f6:	68d2      	ldr	r2, [r2, #12]
 80027f8:	0a12      	lsrs	r2, r2, #8
 80027fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	617b      	str	r3, [r7, #20]
      break;
 8002804:	e00c      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002806:	4a13      	ldr	r2, [pc, #76]	; (8002854 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4a10      	ldr	r2, [pc, #64]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002810:	68d2      	ldr	r2, [r2, #12]
 8002812:	0a12      	lsrs	r2, r2, #8
 8002814:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]
      break;
 800281e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	0e5b      	lsrs	r3, r3, #25
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	e001      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002840:	693b      	ldr	r3, [r7, #16]
}
 8002842:	4618      	mov	r0, r3
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	00f42400 	.word	0x00f42400
 8002858:	016e3600 	.word	0x016e3600

0800285c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_RCC_GetHCLKFreq+0x14>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000000 	.word	0x20000000

08002874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002878:	f7ff fff0 	bl	800285c <HAL_RCC_GetHCLKFreq>
 800287c:	4601      	mov	r1, r0
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	4a04      	ldr	r2, [pc, #16]	; (800289c <HAL_RCC_GetPCLK1Freq+0x28>)
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	080047a0 	.word	0x080047a0

080028a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028a4:	f7ff ffda 	bl	800285c <HAL_RCC_GetHCLKFreq>
 80028a8:	4601      	mov	r1, r0
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	0adb      	lsrs	r3, r3, #11
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028b6:	5cd3      	ldrb	r3, [r2, r3]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	080047a0 	.word	0x080047a0

080028cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028d2:	4b1e      	ldr	r3, [pc, #120]	; (800294c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3301      	adds	r3, #1
 80028e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d10c      	bne.n	800290a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f0:	4a17      	ldr	r2, [pc, #92]	; (8002950 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028fa:	68d2      	ldr	r2, [r2, #12]
 80028fc:	0a12      	lsrs	r2, r2, #8
 80028fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	617b      	str	r3, [r7, #20]
    break;
 8002908:	e00c      	b.n	8002924 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	4a0e      	ldr	r2, [pc, #56]	; (800294c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002914:	68d2      	ldr	r2, [r2, #12]
 8002916:	0a12      	lsrs	r2, r2, #8
 8002918:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800291c:	fb02 f303 	mul.w	r3, r2, r3
 8002920:	617b      	str	r3, [r7, #20]
    break;
 8002922:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	0e5b      	lsrs	r3, r3, #25
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	3301      	adds	r3, #1
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800293e:	687b      	ldr	r3, [r7, #4]
}
 8002940:	4618      	mov	r0, r3
 8002942:	371c      	adds	r7, #28
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	40021000 	.word	0x40021000
 8002950:	016e3600 	.word	0x016e3600
 8002954:	00f42400 	.word	0x00f42400

08002958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002960:	2300      	movs	r3, #0
 8002962:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002964:	2300      	movs	r3, #0
 8002966:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8098 	beq.w	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297a:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10d      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	4b40      	ldr	r3, [pc, #256]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	4a3f      	ldr	r2, [pc, #252]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	6593      	str	r3, [r2, #88]	; 0x58
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299e:	2301      	movs	r3, #1
 80029a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a2:	4b3a      	ldr	r3, [pc, #232]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a39      	ldr	r2, [pc, #228]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ae:	f7fe f9af 	bl	8000d10 <HAL_GetTick>
 80029b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029b4:	e009      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b6:	f7fe f9ab 	bl	8000d10 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d902      	bls.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	74fb      	strb	r3, [r7, #19]
        break;
 80029c8:	e005      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029ca:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0ef      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d159      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029dc:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01e      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d019      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029f8:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a04:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a14:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a24:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d016      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a36:	f7fe f96b 	bl	8000d10 <HAL_GetTick>
 8002a3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3c:	e00b      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe f967 	bl	8000d10 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d902      	bls.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	74fb      	strb	r3, [r7, #19]
            break;
 8002a54:	e006      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a56:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ec      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10b      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a78:	4903      	ldr	r1, [pc, #12]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a80:	e008      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a82:	7cfb      	ldrb	r3, [r7, #19]
 8002a84:	74bb      	strb	r3, [r7, #18]
 8002a86:	e005      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a94:	7c7b      	ldrb	r3, [r7, #17]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d105      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9a:	4baf      	ldr	r3, [pc, #700]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	4aae      	ldr	r2, [pc, #696]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ab2:	4ba9      	ldr	r3, [pc, #676]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	f023 0203 	bic.w	r2, r3, #3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	49a5      	ldr	r1, [pc, #660]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ad4:	4ba0      	ldr	r3, [pc, #640]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	f023 020c 	bic.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	499d      	ldr	r1, [pc, #628]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002af6:	4b98      	ldr	r3, [pc, #608]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4994      	ldr	r1, [pc, #592]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b18:	4b8f      	ldr	r3, [pc, #572]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	498c      	ldr	r1, [pc, #560]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b3a:	4b87      	ldr	r3, [pc, #540]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	4983      	ldr	r1, [pc, #524]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b5c:	4b7e      	ldr	r3, [pc, #504]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	497b      	ldr	r1, [pc, #492]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b7e:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	4972      	ldr	r1, [pc, #456]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ba0:	4b6d      	ldr	r3, [pc, #436]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	496a      	ldr	r1, [pc, #424]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bc2:	4b65      	ldr	r3, [pc, #404]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	4961      	ldr	r1, [pc, #388]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002be4:	4b5c      	ldr	r3, [pc, #368]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	4959      	ldr	r1, [pc, #356]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c06:	4b54      	ldr	r3, [pc, #336]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	4950      	ldr	r1, [pc, #320]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d015      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c28:	4b4b      	ldr	r3, [pc, #300]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4948      	ldr	r1, [pc, #288]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c46:	d105      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c48:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4a42      	ldr	r2, [pc, #264]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c60:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6e:	493a      	ldr	r1, [pc, #232]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7e:	d105      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c80:	4b35      	ldr	r3, [pc, #212]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a34      	ldr	r2, [pc, #208]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c8a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c98:	4b2f      	ldr	r3, [pc, #188]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	492c      	ldr	r1, [pc, #176]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd0:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cde:	491e      	ldr	r1, [pc, #120]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cee:	d105      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4910      	ldr	r1, [pc, #64]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d26:	d105      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d018      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	4902      	ldr	r1, [pc, #8]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d56:	e001      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002d58:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d64:	d105      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d66:	4b21      	ldr	r3, [pc, #132]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4a20      	ldr	r2, [pc, #128]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d015      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d84:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8c:	4917      	ldr	r1, [pc, #92]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9c:	d105      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d9e:	4b13      	ldr	r3, [pc, #76]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4a12      	ldr	r2, [pc, #72]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d015      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002db8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc4:	4909      	ldr	r1, [pc, #36]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dd4:	d105      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	4a04      	ldr	r2, [pc, #16]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002de2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000

08002df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e042      	b.n	8002e88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7fd fe55 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2224      	movs	r2, #36	; 0x24
 8002e1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0201 	bic.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f82c 	bl	8002e90 <UART_SetConfig>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e022      	b.n	8002e88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f001 fa0e 	bl	800426c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f001 fa95 	bl	80043b0 <UART_CheckIdleState>
 8002e86:	4603      	mov	r3, r0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e90:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002e94:	b08a      	sub	sp, #40	; 0x28
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4baa      	ldr	r3, [pc, #680]	; (8003178 <UART_SetConfig+0x2e8>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a9f      	ldr	r2, [pc, #636]	; (800317c <UART_SetConfig+0x2ec>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d004      	beq.n	8002f0c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002f16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	f023 010f 	bic.w	r1, r3, #15
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a90      	ldr	r2, [pc, #576]	; (8003180 <UART_SetConfig+0x2f0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d126      	bne.n	8002f92 <UART_SetConfig+0x102>
 8002f44:	4b8f      	ldr	r3, [pc, #572]	; (8003184 <UART_SetConfig+0x2f4>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d81a      	bhi.n	8002f88 <UART_SetConfig+0xf8>
 8002f52:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <UART_SetConfig+0xc8>)
 8002f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f58:	08002f69 	.word	0x08002f69
 8002f5c:	08002f79 	.word	0x08002f79
 8002f60:	08002f71 	.word	0x08002f71
 8002f64:	08002f81 	.word	0x08002f81
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f6e:	e116      	b.n	800319e <UART_SetConfig+0x30e>
 8002f70:	2302      	movs	r3, #2
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f76:	e112      	b.n	800319e <UART_SetConfig+0x30e>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f7e:	e10e      	b.n	800319e <UART_SetConfig+0x30e>
 8002f80:	2308      	movs	r3, #8
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f86:	e10a      	b.n	800319e <UART_SetConfig+0x30e>
 8002f88:	2310      	movs	r3, #16
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8e:	bf00      	nop
 8002f90:	e105      	b.n	800319e <UART_SetConfig+0x30e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7c      	ldr	r2, [pc, #496]	; (8003188 <UART_SetConfig+0x2f8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d138      	bne.n	800300e <UART_SetConfig+0x17e>
 8002f9c:	4b79      	ldr	r3, [pc, #484]	; (8003184 <UART_SetConfig+0x2f4>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d82c      	bhi.n	8003004 <UART_SetConfig+0x174>
 8002faa:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <UART_SetConfig+0x120>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	08002fe5 	.word	0x08002fe5
 8002fb4:	08003005 	.word	0x08003005
 8002fb8:	08003005 	.word	0x08003005
 8002fbc:	08003005 	.word	0x08003005
 8002fc0:	08002ff5 	.word	0x08002ff5
 8002fc4:	08003005 	.word	0x08003005
 8002fc8:	08003005 	.word	0x08003005
 8002fcc:	08003005 	.word	0x08003005
 8002fd0:	08002fed 	.word	0x08002fed
 8002fd4:	08003005 	.word	0x08003005
 8002fd8:	08003005 	.word	0x08003005
 8002fdc:	08003005 	.word	0x08003005
 8002fe0:	08002ffd 	.word	0x08002ffd
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fea:	e0d8      	b.n	800319e <UART_SetConfig+0x30e>
 8002fec:	2302      	movs	r3, #2
 8002fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff2:	e0d4      	b.n	800319e <UART_SetConfig+0x30e>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ffa:	e0d0      	b.n	800319e <UART_SetConfig+0x30e>
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003002:	e0cc      	b.n	800319e <UART_SetConfig+0x30e>
 8003004:	2310      	movs	r3, #16
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300a:	bf00      	nop
 800300c:	e0c7      	b.n	800319e <UART_SetConfig+0x30e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a5e      	ldr	r2, [pc, #376]	; (800318c <UART_SetConfig+0x2fc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d125      	bne.n	8003064 <UART_SetConfig+0x1d4>
 8003018:	4b5a      	ldr	r3, [pc, #360]	; (8003184 <UART_SetConfig+0x2f4>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003022:	2b10      	cmp	r3, #16
 8003024:	d011      	beq.n	800304a <UART_SetConfig+0x1ba>
 8003026:	2b10      	cmp	r3, #16
 8003028:	d802      	bhi.n	8003030 <UART_SetConfig+0x1a0>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <UART_SetConfig+0x1aa>
 800302e:	e014      	b.n	800305a <UART_SetConfig+0x1ca>
 8003030:	2b20      	cmp	r3, #32
 8003032:	d006      	beq.n	8003042 <UART_SetConfig+0x1b2>
 8003034:	2b30      	cmp	r3, #48	; 0x30
 8003036:	d00c      	beq.n	8003052 <UART_SetConfig+0x1c2>
 8003038:	e00f      	b.n	800305a <UART_SetConfig+0x1ca>
 800303a:	2300      	movs	r3, #0
 800303c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003040:	e0ad      	b.n	800319e <UART_SetConfig+0x30e>
 8003042:	2302      	movs	r3, #2
 8003044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003048:	e0a9      	b.n	800319e <UART_SetConfig+0x30e>
 800304a:	2304      	movs	r3, #4
 800304c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003050:	e0a5      	b.n	800319e <UART_SetConfig+0x30e>
 8003052:	2308      	movs	r3, #8
 8003054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003058:	e0a1      	b.n	800319e <UART_SetConfig+0x30e>
 800305a:	2310      	movs	r3, #16
 800305c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003060:	bf00      	nop
 8003062:	e09c      	b.n	800319e <UART_SetConfig+0x30e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a49      	ldr	r2, [pc, #292]	; (8003190 <UART_SetConfig+0x300>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d125      	bne.n	80030ba <UART_SetConfig+0x22a>
 800306e:	4b45      	ldr	r3, [pc, #276]	; (8003184 <UART_SetConfig+0x2f4>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003078:	2b40      	cmp	r3, #64	; 0x40
 800307a:	d011      	beq.n	80030a0 <UART_SetConfig+0x210>
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d802      	bhi.n	8003086 <UART_SetConfig+0x1f6>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <UART_SetConfig+0x200>
 8003084:	e014      	b.n	80030b0 <UART_SetConfig+0x220>
 8003086:	2b80      	cmp	r3, #128	; 0x80
 8003088:	d006      	beq.n	8003098 <UART_SetConfig+0x208>
 800308a:	2bc0      	cmp	r3, #192	; 0xc0
 800308c:	d00c      	beq.n	80030a8 <UART_SetConfig+0x218>
 800308e:	e00f      	b.n	80030b0 <UART_SetConfig+0x220>
 8003090:	2300      	movs	r3, #0
 8003092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003096:	e082      	b.n	800319e <UART_SetConfig+0x30e>
 8003098:	2302      	movs	r3, #2
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800309e:	e07e      	b.n	800319e <UART_SetConfig+0x30e>
 80030a0:	2304      	movs	r3, #4
 80030a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a6:	e07a      	b.n	800319e <UART_SetConfig+0x30e>
 80030a8:	2308      	movs	r3, #8
 80030aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ae:	e076      	b.n	800319e <UART_SetConfig+0x30e>
 80030b0:	2310      	movs	r3, #16
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b6:	bf00      	nop
 80030b8:	e071      	b.n	800319e <UART_SetConfig+0x30e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a35      	ldr	r2, [pc, #212]	; (8003194 <UART_SetConfig+0x304>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d129      	bne.n	8003118 <UART_SetConfig+0x288>
 80030c4:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <UART_SetConfig+0x2f4>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d2:	d014      	beq.n	80030fe <UART_SetConfig+0x26e>
 80030d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d8:	d802      	bhi.n	80030e0 <UART_SetConfig+0x250>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <UART_SetConfig+0x25e>
 80030de:	e016      	b.n	800310e <UART_SetConfig+0x27e>
 80030e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e4:	d007      	beq.n	80030f6 <UART_SetConfig+0x266>
 80030e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ea:	d00c      	beq.n	8003106 <UART_SetConfig+0x276>
 80030ec:	e00f      	b.n	800310e <UART_SetConfig+0x27e>
 80030ee:	2300      	movs	r3, #0
 80030f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f4:	e053      	b.n	800319e <UART_SetConfig+0x30e>
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fc:	e04f      	b.n	800319e <UART_SetConfig+0x30e>
 80030fe:	2304      	movs	r3, #4
 8003100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003104:	e04b      	b.n	800319e <UART_SetConfig+0x30e>
 8003106:	2308      	movs	r3, #8
 8003108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310c:	e047      	b.n	800319e <UART_SetConfig+0x30e>
 800310e:	2310      	movs	r3, #16
 8003110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003114:	bf00      	nop
 8003116:	e042      	b.n	800319e <UART_SetConfig+0x30e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a17      	ldr	r2, [pc, #92]	; (800317c <UART_SetConfig+0x2ec>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d13a      	bne.n	8003198 <UART_SetConfig+0x308>
 8003122:	4b18      	ldr	r3, [pc, #96]	; (8003184 <UART_SetConfig+0x2f4>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003130:	d014      	beq.n	800315c <UART_SetConfig+0x2cc>
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d802      	bhi.n	800313e <UART_SetConfig+0x2ae>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <UART_SetConfig+0x2bc>
 800313c:	e016      	b.n	800316c <UART_SetConfig+0x2dc>
 800313e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003142:	d007      	beq.n	8003154 <UART_SetConfig+0x2c4>
 8003144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003148:	d00c      	beq.n	8003164 <UART_SetConfig+0x2d4>
 800314a:	e00f      	b.n	800316c <UART_SetConfig+0x2dc>
 800314c:	2300      	movs	r3, #0
 800314e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003152:	e024      	b.n	800319e <UART_SetConfig+0x30e>
 8003154:	2302      	movs	r3, #2
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315a:	e020      	b.n	800319e <UART_SetConfig+0x30e>
 800315c:	2304      	movs	r3, #4
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003162:	e01c      	b.n	800319e <UART_SetConfig+0x30e>
 8003164:	2308      	movs	r3, #8
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316a:	e018      	b.n	800319e <UART_SetConfig+0x30e>
 800316c:	2310      	movs	r3, #16
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003172:	bf00      	nop
 8003174:	e013      	b.n	800319e <UART_SetConfig+0x30e>
 8003176:	bf00      	nop
 8003178:	cfff69f3 	.word	0xcfff69f3
 800317c:	40008000 	.word	0x40008000
 8003180:	40013800 	.word	0x40013800
 8003184:	40021000 	.word	0x40021000
 8003188:	40004400 	.word	0x40004400
 800318c:	40004800 	.word	0x40004800
 8003190:	40004c00 	.word	0x40004c00
 8003194:	40005000 	.word	0x40005000
 8003198:	2310      	movs	r3, #16
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a86      	ldr	r2, [pc, #536]	; (80033bc <UART_SetConfig+0x52c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	f040 8422 	bne.w	80039ee <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	f200 8173 	bhi.w	800349a <UART_SetConfig+0x60a>
 80031b4:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <UART_SetConfig+0x32c>)
 80031b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ba:	bf00      	nop
 80031bc:	080031e1 	.word	0x080031e1
 80031c0:	0800349b 	.word	0x0800349b
 80031c4:	08003283 	.word	0x08003283
 80031c8:	0800349b 	.word	0x0800349b
 80031cc:	0800331b 	.word	0x0800331b
 80031d0:	0800349b 	.word	0x0800349b
 80031d4:	0800349b 	.word	0x0800349b
 80031d8:	0800349b 	.word	0x0800349b
 80031dc:	080033ed 	.word	0x080033ed
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80031e0:	f7ff fb48 	bl	8002874 <HAL_RCC_GetPCLK1Freq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d044      	beq.n	8003278 <UART_SetConfig+0x3e8>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d03e      	beq.n	8003274 <UART_SetConfig+0x3e4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d038      	beq.n	8003270 <UART_SetConfig+0x3e0>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	2b03      	cmp	r3, #3
 8003204:	d032      	beq.n	800326c <UART_SetConfig+0x3dc>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2b04      	cmp	r3, #4
 800320c:	d02c      	beq.n	8003268 <UART_SetConfig+0x3d8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b05      	cmp	r3, #5
 8003214:	d026      	beq.n	8003264 <UART_SetConfig+0x3d4>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	2b06      	cmp	r3, #6
 800321c:	d020      	beq.n	8003260 <UART_SetConfig+0x3d0>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2b07      	cmp	r3, #7
 8003224:	d01a      	beq.n	800325c <UART_SetConfig+0x3cc>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	2b08      	cmp	r3, #8
 800322c:	d014      	beq.n	8003258 <UART_SetConfig+0x3c8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	2b09      	cmp	r3, #9
 8003234:	d00e      	beq.n	8003254 <UART_SetConfig+0x3c4>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b0a      	cmp	r3, #10
 800323c:	d008      	beq.n	8003250 <UART_SetConfig+0x3c0>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2b0b      	cmp	r3, #11
 8003244:	d102      	bne.n	800324c <UART_SetConfig+0x3bc>
 8003246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800324a:	e016      	b.n	800327a <UART_SetConfig+0x3ea>
 800324c:	2301      	movs	r3, #1
 800324e:	e014      	b.n	800327a <UART_SetConfig+0x3ea>
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	e012      	b.n	800327a <UART_SetConfig+0x3ea>
 8003254:	2340      	movs	r3, #64	; 0x40
 8003256:	e010      	b.n	800327a <UART_SetConfig+0x3ea>
 8003258:	2320      	movs	r3, #32
 800325a:	e00e      	b.n	800327a <UART_SetConfig+0x3ea>
 800325c:	2310      	movs	r3, #16
 800325e:	e00c      	b.n	800327a <UART_SetConfig+0x3ea>
 8003260:	230c      	movs	r3, #12
 8003262:	e00a      	b.n	800327a <UART_SetConfig+0x3ea>
 8003264:	230a      	movs	r3, #10
 8003266:	e008      	b.n	800327a <UART_SetConfig+0x3ea>
 8003268:	2308      	movs	r3, #8
 800326a:	e006      	b.n	800327a <UART_SetConfig+0x3ea>
 800326c:	2306      	movs	r3, #6
 800326e:	e004      	b.n	800327a <UART_SetConfig+0x3ea>
 8003270:	2304      	movs	r3, #4
 8003272:	e002      	b.n	800327a <UART_SetConfig+0x3ea>
 8003274:	2302      	movs	r3, #2
 8003276:	e000      	b.n	800327a <UART_SetConfig+0x3ea>
 8003278:	2301      	movs	r3, #1
 800327a:	fbb2 f3f3 	udiv	r3, r2, r3
 800327e:	617b      	str	r3, [r7, #20]
        break;
 8003280:	e10e      	b.n	80034a0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2b00      	cmp	r3, #0
 8003288:	d044      	beq.n	8003314 <UART_SetConfig+0x484>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	2b01      	cmp	r3, #1
 8003290:	d03e      	beq.n	8003310 <UART_SetConfig+0x480>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	2b02      	cmp	r3, #2
 8003298:	d038      	beq.n	800330c <UART_SetConfig+0x47c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d032      	beq.n	8003308 <UART_SetConfig+0x478>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d02c      	beq.n	8003304 <UART_SetConfig+0x474>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d026      	beq.n	8003300 <UART_SetConfig+0x470>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d020      	beq.n	80032fc <UART_SetConfig+0x46c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	2b07      	cmp	r3, #7
 80032c0:	d01a      	beq.n	80032f8 <UART_SetConfig+0x468>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d014      	beq.n	80032f4 <UART_SetConfig+0x464>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	2b09      	cmp	r3, #9
 80032d0:	d00e      	beq.n	80032f0 <UART_SetConfig+0x460>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2b0a      	cmp	r3, #10
 80032d8:	d008      	beq.n	80032ec <UART_SetConfig+0x45c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	2b0b      	cmp	r3, #11
 80032e0:	d102      	bne.n	80032e8 <UART_SetConfig+0x458>
 80032e2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80032e6:	e016      	b.n	8003316 <UART_SetConfig+0x486>
 80032e8:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <UART_SetConfig+0x530>)
 80032ea:	e014      	b.n	8003316 <UART_SetConfig+0x486>
 80032ec:	4b35      	ldr	r3, [pc, #212]	; (80033c4 <UART_SetConfig+0x534>)
 80032ee:	e012      	b.n	8003316 <UART_SetConfig+0x486>
 80032f0:	4b35      	ldr	r3, [pc, #212]	; (80033c8 <UART_SetConfig+0x538>)
 80032f2:	e010      	b.n	8003316 <UART_SetConfig+0x486>
 80032f4:	4b35      	ldr	r3, [pc, #212]	; (80033cc <UART_SetConfig+0x53c>)
 80032f6:	e00e      	b.n	8003316 <UART_SetConfig+0x486>
 80032f8:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <UART_SetConfig+0x540>)
 80032fa:	e00c      	b.n	8003316 <UART_SetConfig+0x486>
 80032fc:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <UART_SetConfig+0x544>)
 80032fe:	e00a      	b.n	8003316 <UART_SetConfig+0x486>
 8003300:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <UART_SetConfig+0x548>)
 8003302:	e008      	b.n	8003316 <UART_SetConfig+0x486>
 8003304:	4b35      	ldr	r3, [pc, #212]	; (80033dc <UART_SetConfig+0x54c>)
 8003306:	e006      	b.n	8003316 <UART_SetConfig+0x486>
 8003308:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <UART_SetConfig+0x550>)
 800330a:	e004      	b.n	8003316 <UART_SetConfig+0x486>
 800330c:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <UART_SetConfig+0x554>)
 800330e:	e002      	b.n	8003316 <UART_SetConfig+0x486>
 8003310:	4b35      	ldr	r3, [pc, #212]	; (80033e8 <UART_SetConfig+0x558>)
 8003312:	e000      	b.n	8003316 <UART_SetConfig+0x486>
 8003314:	4b2a      	ldr	r3, [pc, #168]	; (80033c0 <UART_SetConfig+0x530>)
 8003316:	617b      	str	r3, [r7, #20]
        break;
 8003318:	e0c2      	b.n	80034a0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800331a:	f7ff fa3d 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2b00      	cmp	r3, #0
 8003326:	d044      	beq.n	80033b2 <UART_SetConfig+0x522>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	2b01      	cmp	r3, #1
 800332e:	d03e      	beq.n	80033ae <UART_SetConfig+0x51e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	2b02      	cmp	r3, #2
 8003336:	d038      	beq.n	80033aa <UART_SetConfig+0x51a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	2b03      	cmp	r3, #3
 800333e:	d032      	beq.n	80033a6 <UART_SetConfig+0x516>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	2b04      	cmp	r3, #4
 8003346:	d02c      	beq.n	80033a2 <UART_SetConfig+0x512>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	2b05      	cmp	r3, #5
 800334e:	d026      	beq.n	800339e <UART_SetConfig+0x50e>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	2b06      	cmp	r3, #6
 8003356:	d020      	beq.n	800339a <UART_SetConfig+0x50a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	2b07      	cmp	r3, #7
 800335e:	d01a      	beq.n	8003396 <UART_SetConfig+0x506>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	2b08      	cmp	r3, #8
 8003366:	d014      	beq.n	8003392 <UART_SetConfig+0x502>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	2b09      	cmp	r3, #9
 800336e:	d00e      	beq.n	800338e <UART_SetConfig+0x4fe>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	2b0a      	cmp	r3, #10
 8003376:	d008      	beq.n	800338a <UART_SetConfig+0x4fa>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	2b0b      	cmp	r3, #11
 800337e:	d102      	bne.n	8003386 <UART_SetConfig+0x4f6>
 8003380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003384:	e016      	b.n	80033b4 <UART_SetConfig+0x524>
 8003386:	2301      	movs	r3, #1
 8003388:	e014      	b.n	80033b4 <UART_SetConfig+0x524>
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	e012      	b.n	80033b4 <UART_SetConfig+0x524>
 800338e:	2340      	movs	r3, #64	; 0x40
 8003390:	e010      	b.n	80033b4 <UART_SetConfig+0x524>
 8003392:	2320      	movs	r3, #32
 8003394:	e00e      	b.n	80033b4 <UART_SetConfig+0x524>
 8003396:	2310      	movs	r3, #16
 8003398:	e00c      	b.n	80033b4 <UART_SetConfig+0x524>
 800339a:	230c      	movs	r3, #12
 800339c:	e00a      	b.n	80033b4 <UART_SetConfig+0x524>
 800339e:	230a      	movs	r3, #10
 80033a0:	e008      	b.n	80033b4 <UART_SetConfig+0x524>
 80033a2:	2308      	movs	r3, #8
 80033a4:	e006      	b.n	80033b4 <UART_SetConfig+0x524>
 80033a6:	2306      	movs	r3, #6
 80033a8:	e004      	b.n	80033b4 <UART_SetConfig+0x524>
 80033aa:	2304      	movs	r3, #4
 80033ac:	e002      	b.n	80033b4 <UART_SetConfig+0x524>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e000      	b.n	80033b4 <UART_SetConfig+0x524>
 80033b2:	2301      	movs	r3, #1
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	617b      	str	r3, [r7, #20]
        break;
 80033ba:	e071      	b.n	80034a0 <UART_SetConfig+0x610>
 80033bc:	40008000 	.word	0x40008000
 80033c0:	00f42400 	.word	0x00f42400
 80033c4:	0001e848 	.word	0x0001e848
 80033c8:	0003d090 	.word	0x0003d090
 80033cc:	0007a120 	.word	0x0007a120
 80033d0:	000f4240 	.word	0x000f4240
 80033d4:	00145855 	.word	0x00145855
 80033d8:	00186a00 	.word	0x00186a00
 80033dc:	001e8480 	.word	0x001e8480
 80033e0:	0028b0aa 	.word	0x0028b0aa
 80033e4:	003d0900 	.word	0x003d0900
 80033e8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d04e      	beq.n	8003492 <UART_SetConfig+0x602>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d047      	beq.n	800348c <UART_SetConfig+0x5fc>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	2b02      	cmp	r3, #2
 8003402:	d040      	beq.n	8003486 <UART_SetConfig+0x5f6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	2b03      	cmp	r3, #3
 800340a:	d039      	beq.n	8003480 <UART_SetConfig+0x5f0>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	2b04      	cmp	r3, #4
 8003412:	d032      	beq.n	800347a <UART_SetConfig+0x5ea>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2b05      	cmp	r3, #5
 800341a:	d02b      	beq.n	8003474 <UART_SetConfig+0x5e4>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2b06      	cmp	r3, #6
 8003422:	d024      	beq.n	800346e <UART_SetConfig+0x5de>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	2b07      	cmp	r3, #7
 800342a:	d01d      	beq.n	8003468 <UART_SetConfig+0x5d8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	2b08      	cmp	r3, #8
 8003432:	d016      	beq.n	8003462 <UART_SetConfig+0x5d2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	2b09      	cmp	r3, #9
 800343a:	d00f      	beq.n	800345c <UART_SetConfig+0x5cc>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	2b0a      	cmp	r3, #10
 8003442:	d008      	beq.n	8003456 <UART_SetConfig+0x5c6>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	2b0b      	cmp	r3, #11
 800344a:	d101      	bne.n	8003450 <UART_SetConfig+0x5c0>
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	e022      	b.n	8003496 <UART_SetConfig+0x606>
 8003450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003454:	e01f      	b.n	8003496 <UART_SetConfig+0x606>
 8003456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800345a:	e01c      	b.n	8003496 <UART_SetConfig+0x606>
 800345c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003460:	e019      	b.n	8003496 <UART_SetConfig+0x606>
 8003462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003466:	e016      	b.n	8003496 <UART_SetConfig+0x606>
 8003468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800346c:	e013      	b.n	8003496 <UART_SetConfig+0x606>
 800346e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8003472:	e010      	b.n	8003496 <UART_SetConfig+0x606>
 8003474:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003478:	e00d      	b.n	8003496 <UART_SetConfig+0x606>
 800347a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800347e:	e00a      	b.n	8003496 <UART_SetConfig+0x606>
 8003480:	f241 5355 	movw	r3, #5461	; 0x1555
 8003484:	e007      	b.n	8003496 <UART_SetConfig+0x606>
 8003486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800348a:	e004      	b.n	8003496 <UART_SetConfig+0x606>
 800348c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003490:	e001      	b.n	8003496 <UART_SetConfig+0x606>
 8003492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003496:	617b      	str	r3, [r7, #20]
        break;
 8003498:	e002      	b.n	80034a0 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	76fb      	strb	r3, [r7, #27]
        break;
 800349e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 86b7 	beq.w	8004216 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d305      	bcc.n	80034c4 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d903      	bls.n	80034cc <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	76fb      	strb	r3, [r7, #27]
 80034c8:	f000 bea5 	b.w	8004216 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 80034cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	f200 8277 	bhi.w	80039c4 <UART_SetConfig+0xb34>
 80034d6:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <UART_SetConfig+0x64c>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	08003501 	.word	0x08003501
 80034e0:	080039c5 	.word	0x080039c5
 80034e4:	0800363f 	.word	0x0800363f
 80034e8:	080039c5 	.word	0x080039c5
 80034ec:	08003735 	.word	0x08003735
 80034f0:	080039c5 	.word	0x080039c5
 80034f4:	080039c5 	.word	0x080039c5
 80034f8:	080039c5 	.word	0x080039c5
 80034fc:	08003873 	.word	0x08003873
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003500:	f7ff f9b8 	bl	8002874 <HAL_RCC_GetPCLK1Freq>
 8003504:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4618      	mov	r0, r3
 800350a:	f04f 0100 	mov.w	r1, #0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d067      	beq.n	80035e6 <UART_SetConfig+0x756>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2b01      	cmp	r3, #1
 800351c:	d05e      	beq.n	80035dc <UART_SetConfig+0x74c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b02      	cmp	r3, #2
 8003524:	d055      	beq.n	80035d2 <UART_SetConfig+0x742>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2b03      	cmp	r3, #3
 800352c:	d04c      	beq.n	80035c8 <UART_SetConfig+0x738>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2b04      	cmp	r3, #4
 8003534:	d043      	beq.n	80035be <UART_SetConfig+0x72e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b05      	cmp	r3, #5
 800353c:	d03a      	beq.n	80035b4 <UART_SetConfig+0x724>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	2b06      	cmp	r3, #6
 8003544:	d031      	beq.n	80035aa <UART_SetConfig+0x71a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	2b07      	cmp	r3, #7
 800354c:	d028      	beq.n	80035a0 <UART_SetConfig+0x710>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	2b08      	cmp	r3, #8
 8003554:	d01f      	beq.n	8003596 <UART_SetConfig+0x706>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	2b09      	cmp	r3, #9
 800355c:	d016      	beq.n	800358c <UART_SetConfig+0x6fc>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2b0a      	cmp	r3, #10
 8003564:	d00d      	beq.n	8003582 <UART_SetConfig+0x6f2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	2b0b      	cmp	r3, #11
 800356c:	d104      	bne.n	8003578 <UART_SetConfig+0x6e8>
 800356e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003572:	f04f 0400 	mov.w	r4, #0
 8003576:	e03a      	b.n	80035ee <UART_SetConfig+0x75e>
 8003578:	f04f 0301 	mov.w	r3, #1
 800357c:	f04f 0400 	mov.w	r4, #0
 8003580:	e035      	b.n	80035ee <UART_SetConfig+0x75e>
 8003582:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003586:	f04f 0400 	mov.w	r4, #0
 800358a:	e030      	b.n	80035ee <UART_SetConfig+0x75e>
 800358c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003590:	f04f 0400 	mov.w	r4, #0
 8003594:	e02b      	b.n	80035ee <UART_SetConfig+0x75e>
 8003596:	f04f 0320 	mov.w	r3, #32
 800359a:	f04f 0400 	mov.w	r4, #0
 800359e:	e026      	b.n	80035ee <UART_SetConfig+0x75e>
 80035a0:	f04f 0310 	mov.w	r3, #16
 80035a4:	f04f 0400 	mov.w	r4, #0
 80035a8:	e021      	b.n	80035ee <UART_SetConfig+0x75e>
 80035aa:	f04f 030c 	mov.w	r3, #12
 80035ae:	f04f 0400 	mov.w	r4, #0
 80035b2:	e01c      	b.n	80035ee <UART_SetConfig+0x75e>
 80035b4:	f04f 030a 	mov.w	r3, #10
 80035b8:	f04f 0400 	mov.w	r4, #0
 80035bc:	e017      	b.n	80035ee <UART_SetConfig+0x75e>
 80035be:	f04f 0308 	mov.w	r3, #8
 80035c2:	f04f 0400 	mov.w	r4, #0
 80035c6:	e012      	b.n	80035ee <UART_SetConfig+0x75e>
 80035c8:	f04f 0306 	mov.w	r3, #6
 80035cc:	f04f 0400 	mov.w	r4, #0
 80035d0:	e00d      	b.n	80035ee <UART_SetConfig+0x75e>
 80035d2:	f04f 0304 	mov.w	r3, #4
 80035d6:	f04f 0400 	mov.w	r4, #0
 80035da:	e008      	b.n	80035ee <UART_SetConfig+0x75e>
 80035dc:	f04f 0302 	mov.w	r3, #2
 80035e0:	f04f 0400 	mov.w	r4, #0
 80035e4:	e003      	b.n	80035ee <UART_SetConfig+0x75e>
 80035e6:	f04f 0301 	mov.w	r3, #1
 80035ea:	f04f 0400 	mov.w	r4, #0
 80035ee:	461a      	mov	r2, r3
 80035f0:	4623      	mov	r3, r4
 80035f2:	f7fc fe11 	bl	8000218 <__aeabi_uldivmod>
 80035f6:	4603      	mov	r3, r0
 80035f8:	460c      	mov	r4, r1
 80035fa:	4619      	mov	r1, r3
 80035fc:	4622      	mov	r2, r4
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	f04f 0400 	mov.w	r4, #0
 8003606:	0214      	lsls	r4, r2, #8
 8003608:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800360c:	020b      	lsls	r3, r1, #8
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6852      	ldr	r2, [r2, #4]
 8003612:	0852      	lsrs	r2, r2, #1
 8003614:	4611      	mov	r1, r2
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	eb13 0b01 	adds.w	fp, r3, r1
 800361e:	eb44 0c02 	adc.w	ip, r4, r2
 8003622:	4658      	mov	r0, fp
 8003624:	4661      	mov	r1, ip
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f04f 0400 	mov.w	r4, #0
 800362e:	461a      	mov	r2, r3
 8003630:	4623      	mov	r3, r4
 8003632:	f7fc fdf1 	bl	8000218 <__aeabi_uldivmod>
 8003636:	4603      	mov	r3, r0
 8003638:	460c      	mov	r4, r1
 800363a:	61fb      	str	r3, [r7, #28]
            break;
 800363c:	e1c5      	b.n	80039ca <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	2b00      	cmp	r3, #0
 8003644:	d05b      	beq.n	80036fe <UART_SetConfig+0x86e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2b01      	cmp	r3, #1
 800364c:	d053      	beq.n	80036f6 <UART_SetConfig+0x866>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b02      	cmp	r3, #2
 8003654:	d04b      	beq.n	80036ee <UART_SetConfig+0x85e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	2b03      	cmp	r3, #3
 800365c:	d043      	beq.n	80036e6 <UART_SetConfig+0x856>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	2b04      	cmp	r3, #4
 8003664:	d03b      	beq.n	80036de <UART_SetConfig+0x84e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b05      	cmp	r3, #5
 800366c:	d033      	beq.n	80036d6 <UART_SetConfig+0x846>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	2b06      	cmp	r3, #6
 8003674:	d02b      	beq.n	80036ce <UART_SetConfig+0x83e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2b07      	cmp	r3, #7
 800367c:	d023      	beq.n	80036c6 <UART_SetConfig+0x836>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b08      	cmp	r3, #8
 8003684:	d01b      	beq.n	80036be <UART_SetConfig+0x82e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	2b09      	cmp	r3, #9
 800368c:	d013      	beq.n	80036b6 <UART_SetConfig+0x826>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	2b0a      	cmp	r3, #10
 8003694:	d00b      	beq.n	80036ae <UART_SetConfig+0x81e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	2b0b      	cmp	r3, #11
 800369c:	d103      	bne.n	80036a6 <UART_SetConfig+0x816>
 800369e:	4bae      	ldr	r3, [pc, #696]	; (8003958 <UART_SetConfig+0xac8>)
 80036a0:	f04f 0400 	mov.w	r4, #0
 80036a4:	e02e      	b.n	8003704 <UART_SetConfig+0x874>
 80036a6:	4bad      	ldr	r3, [pc, #692]	; (800395c <UART_SetConfig+0xacc>)
 80036a8:	f04f 0400 	mov.w	r4, #0
 80036ac:	e02a      	b.n	8003704 <UART_SetConfig+0x874>
 80036ae:	4bac      	ldr	r3, [pc, #688]	; (8003960 <UART_SetConfig+0xad0>)
 80036b0:	f04f 0400 	mov.w	r4, #0
 80036b4:	e026      	b.n	8003704 <UART_SetConfig+0x874>
 80036b6:	4bab      	ldr	r3, [pc, #684]	; (8003964 <UART_SetConfig+0xad4>)
 80036b8:	f04f 0400 	mov.w	r4, #0
 80036bc:	e022      	b.n	8003704 <UART_SetConfig+0x874>
 80036be:	4baa      	ldr	r3, [pc, #680]	; (8003968 <UART_SetConfig+0xad8>)
 80036c0:	f04f 0400 	mov.w	r4, #0
 80036c4:	e01e      	b.n	8003704 <UART_SetConfig+0x874>
 80036c6:	4ba9      	ldr	r3, [pc, #676]	; (800396c <UART_SetConfig+0xadc>)
 80036c8:	f04f 0400 	mov.w	r4, #0
 80036cc:	e01a      	b.n	8003704 <UART_SetConfig+0x874>
 80036ce:	a49e      	add	r4, pc, #632	; (adr r4, 8003948 <UART_SetConfig+0xab8>)
 80036d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80036d4:	e016      	b.n	8003704 <UART_SetConfig+0x874>
 80036d6:	4ba6      	ldr	r3, [pc, #664]	; (8003970 <UART_SetConfig+0xae0>)
 80036d8:	f04f 0400 	mov.w	r4, #0
 80036dc:	e012      	b.n	8003704 <UART_SetConfig+0x874>
 80036de:	4ba5      	ldr	r3, [pc, #660]	; (8003974 <UART_SetConfig+0xae4>)
 80036e0:	f04f 0400 	mov.w	r4, #0
 80036e4:	e00e      	b.n	8003704 <UART_SetConfig+0x874>
 80036e6:	a49a      	add	r4, pc, #616	; (adr r4, 8003950 <UART_SetConfig+0xac0>)
 80036e8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80036ec:	e00a      	b.n	8003704 <UART_SetConfig+0x874>
 80036ee:	4ba2      	ldr	r3, [pc, #648]	; (8003978 <UART_SetConfig+0xae8>)
 80036f0:	f04f 0400 	mov.w	r4, #0
 80036f4:	e006      	b.n	8003704 <UART_SetConfig+0x874>
 80036f6:	4ba1      	ldr	r3, [pc, #644]	; (800397c <UART_SetConfig+0xaec>)
 80036f8:	f04f 0400 	mov.w	r4, #0
 80036fc:	e002      	b.n	8003704 <UART_SetConfig+0x874>
 80036fe:	4b97      	ldr	r3, [pc, #604]	; (800395c <UART_SetConfig+0xacc>)
 8003700:	f04f 0400 	mov.w	r4, #0
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6852      	ldr	r2, [r2, #4]
 8003708:	0852      	lsrs	r2, r2, #1
 800370a:	4611      	mov	r1, r2
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	eb13 0b01 	adds.w	fp, r3, r1
 8003714:	eb44 0c02 	adc.w	ip, r4, r2
 8003718:	4658      	mov	r0, fp
 800371a:	4661      	mov	r1, ip
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f04f 0400 	mov.w	r4, #0
 8003724:	461a      	mov	r2, r3
 8003726:	4623      	mov	r3, r4
 8003728:	f7fc fd76 	bl	8000218 <__aeabi_uldivmod>
 800372c:	4603      	mov	r3, r0
 800372e:	460c      	mov	r4, r1
 8003730:	61fb      	str	r3, [r7, #28]
            break;
 8003732:	e14a      	b.n	80039ca <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003734:	f7ff f830 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8003738:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4618      	mov	r0, r3
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	2b00      	cmp	r3, #0
 8003748:	d067      	beq.n	800381a <UART_SetConfig+0x98a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	2b01      	cmp	r3, #1
 8003750:	d05e      	beq.n	8003810 <UART_SetConfig+0x980>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	2b02      	cmp	r3, #2
 8003758:	d055      	beq.n	8003806 <UART_SetConfig+0x976>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	2b03      	cmp	r3, #3
 8003760:	d04c      	beq.n	80037fc <UART_SetConfig+0x96c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	2b04      	cmp	r3, #4
 8003768:	d043      	beq.n	80037f2 <UART_SetConfig+0x962>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	2b05      	cmp	r3, #5
 8003770:	d03a      	beq.n	80037e8 <UART_SetConfig+0x958>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	2b06      	cmp	r3, #6
 8003778:	d031      	beq.n	80037de <UART_SetConfig+0x94e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b07      	cmp	r3, #7
 8003780:	d028      	beq.n	80037d4 <UART_SetConfig+0x944>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	2b08      	cmp	r3, #8
 8003788:	d01f      	beq.n	80037ca <UART_SetConfig+0x93a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	2b09      	cmp	r3, #9
 8003790:	d016      	beq.n	80037c0 <UART_SetConfig+0x930>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2b0a      	cmp	r3, #10
 8003798:	d00d      	beq.n	80037b6 <UART_SetConfig+0x926>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b0b      	cmp	r3, #11
 80037a0:	d104      	bne.n	80037ac <UART_SetConfig+0x91c>
 80037a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037a6:	f04f 0400 	mov.w	r4, #0
 80037aa:	e03a      	b.n	8003822 <UART_SetConfig+0x992>
 80037ac:	f04f 0301 	mov.w	r3, #1
 80037b0:	f04f 0400 	mov.w	r4, #0
 80037b4:	e035      	b.n	8003822 <UART_SetConfig+0x992>
 80037b6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80037ba:	f04f 0400 	mov.w	r4, #0
 80037be:	e030      	b.n	8003822 <UART_SetConfig+0x992>
 80037c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80037c4:	f04f 0400 	mov.w	r4, #0
 80037c8:	e02b      	b.n	8003822 <UART_SetConfig+0x992>
 80037ca:	f04f 0320 	mov.w	r3, #32
 80037ce:	f04f 0400 	mov.w	r4, #0
 80037d2:	e026      	b.n	8003822 <UART_SetConfig+0x992>
 80037d4:	f04f 0310 	mov.w	r3, #16
 80037d8:	f04f 0400 	mov.w	r4, #0
 80037dc:	e021      	b.n	8003822 <UART_SetConfig+0x992>
 80037de:	f04f 030c 	mov.w	r3, #12
 80037e2:	f04f 0400 	mov.w	r4, #0
 80037e6:	e01c      	b.n	8003822 <UART_SetConfig+0x992>
 80037e8:	f04f 030a 	mov.w	r3, #10
 80037ec:	f04f 0400 	mov.w	r4, #0
 80037f0:	e017      	b.n	8003822 <UART_SetConfig+0x992>
 80037f2:	f04f 0308 	mov.w	r3, #8
 80037f6:	f04f 0400 	mov.w	r4, #0
 80037fa:	e012      	b.n	8003822 <UART_SetConfig+0x992>
 80037fc:	f04f 0306 	mov.w	r3, #6
 8003800:	f04f 0400 	mov.w	r4, #0
 8003804:	e00d      	b.n	8003822 <UART_SetConfig+0x992>
 8003806:	f04f 0304 	mov.w	r3, #4
 800380a:	f04f 0400 	mov.w	r4, #0
 800380e:	e008      	b.n	8003822 <UART_SetConfig+0x992>
 8003810:	f04f 0302 	mov.w	r3, #2
 8003814:	f04f 0400 	mov.w	r4, #0
 8003818:	e003      	b.n	8003822 <UART_SetConfig+0x992>
 800381a:	f04f 0301 	mov.w	r3, #1
 800381e:	f04f 0400 	mov.w	r4, #0
 8003822:	461a      	mov	r2, r3
 8003824:	4623      	mov	r3, r4
 8003826:	f7fc fcf7 	bl	8000218 <__aeabi_uldivmod>
 800382a:	4603      	mov	r3, r0
 800382c:	460c      	mov	r4, r1
 800382e:	4619      	mov	r1, r3
 8003830:	4622      	mov	r2, r4
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	f04f 0400 	mov.w	r4, #0
 800383a:	0214      	lsls	r4, r2, #8
 800383c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003840:	020b      	lsls	r3, r1, #8
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6852      	ldr	r2, [r2, #4]
 8003846:	0852      	lsrs	r2, r2, #1
 8003848:	4611      	mov	r1, r2
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	eb13 0b01 	adds.w	fp, r3, r1
 8003852:	eb44 0c02 	adc.w	ip, r4, r2
 8003856:	4658      	mov	r0, fp
 8003858:	4661      	mov	r1, ip
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f04f 0400 	mov.w	r4, #0
 8003862:	461a      	mov	r2, r3
 8003864:	4623      	mov	r3, r4
 8003866:	f7fc fcd7 	bl	8000218 <__aeabi_uldivmod>
 800386a:	4603      	mov	r3, r0
 800386c:	460c      	mov	r4, r1
 800386e:	61fb      	str	r3, [r7, #28]
            break;
 8003870:	e0ab      	b.n	80039ca <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8088 	beq.w	800398c <UART_SetConfig+0xafc>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	2b01      	cmp	r3, #1
 8003882:	d05b      	beq.n	800393c <UART_SetConfig+0xaac>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2b02      	cmp	r3, #2
 800388a:	d052      	beq.n	8003932 <UART_SetConfig+0xaa2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2b03      	cmp	r3, #3
 8003892:	d04a      	beq.n	800392a <UART_SetConfig+0xa9a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	2b04      	cmp	r3, #4
 800389a:	d041      	beq.n	8003920 <UART_SetConfig+0xa90>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	2b05      	cmp	r3, #5
 80038a2:	d039      	beq.n	8003918 <UART_SetConfig+0xa88>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	2b06      	cmp	r3, #6
 80038aa:	d031      	beq.n	8003910 <UART_SetConfig+0xa80>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2b07      	cmp	r3, #7
 80038b2:	d028      	beq.n	8003906 <UART_SetConfig+0xa76>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d01f      	beq.n	80038fc <UART_SetConfig+0xa6c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	2b09      	cmp	r3, #9
 80038c2:	d016      	beq.n	80038f2 <UART_SetConfig+0xa62>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	2b0a      	cmp	r3, #10
 80038ca:	d00d      	beq.n	80038e8 <UART_SetConfig+0xa58>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b0b      	cmp	r3, #11
 80038d2:	d104      	bne.n	80038de <UART_SetConfig+0xa4e>
 80038d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d8:	f04f 0400 	mov.w	r4, #0
 80038dc:	e05a      	b.n	8003994 <UART_SetConfig+0xb04>
 80038de:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80038e2:	f04f 0400 	mov.w	r4, #0
 80038e6:	e055      	b.n	8003994 <UART_SetConfig+0xb04>
 80038e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ec:	f04f 0400 	mov.w	r4, #0
 80038f0:	e050      	b.n	8003994 <UART_SetConfig+0xb04>
 80038f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038f6:	f04f 0400 	mov.w	r4, #0
 80038fa:	e04b      	b.n	8003994 <UART_SetConfig+0xb04>
 80038fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003900:	f04f 0400 	mov.w	r4, #0
 8003904:	e046      	b.n	8003994 <UART_SetConfig+0xb04>
 8003906:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800390a:	f04f 0400 	mov.w	r4, #0
 800390e:	e041      	b.n	8003994 <UART_SetConfig+0xb04>
 8003910:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <UART_SetConfig+0xaf0>)
 8003912:	f04f 0400 	mov.w	r4, #0
 8003916:	e03d      	b.n	8003994 <UART_SetConfig+0xb04>
 8003918:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <UART_SetConfig+0xaf4>)
 800391a:	f04f 0400 	mov.w	r4, #0
 800391e:	e039      	b.n	8003994 <UART_SetConfig+0xb04>
 8003920:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003924:	f04f 0400 	mov.w	r4, #0
 8003928:	e034      	b.n	8003994 <UART_SetConfig+0xb04>
 800392a:	4b17      	ldr	r3, [pc, #92]	; (8003988 <UART_SetConfig+0xaf8>)
 800392c:	f04f 0400 	mov.w	r4, #0
 8003930:	e030      	b.n	8003994 <UART_SetConfig+0xb04>
 8003932:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003936:	f04f 0400 	mov.w	r4, #0
 800393a:	e02b      	b.n	8003994 <UART_SetConfig+0xb04>
 800393c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003940:	f04f 0400 	mov.w	r4, #0
 8003944:	e026      	b.n	8003994 <UART_SetConfig+0xb04>
 8003946:	bf00      	nop
 8003948:	14585500 	.word	0x14585500
 800394c:	00000000 	.word	0x00000000
 8003950:	28b0aa00 	.word	0x28b0aa00
 8003954:	00000000 	.word	0x00000000
 8003958:	00f42400 	.word	0x00f42400
 800395c:	f4240000 	.word	0xf4240000
 8003960:	01e84800 	.word	0x01e84800
 8003964:	03d09000 	.word	0x03d09000
 8003968:	07a12000 	.word	0x07a12000
 800396c:	0f424000 	.word	0x0f424000
 8003970:	186a0000 	.word	0x186a0000
 8003974:	1e848000 	.word	0x1e848000
 8003978:	3d090000 	.word	0x3d090000
 800397c:	7a120000 	.word	0x7a120000
 8003980:	000aaa00 	.word	0x000aaa00
 8003984:	000ccc00 	.word	0x000ccc00
 8003988:	00155500 	.word	0x00155500
 800398c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003990:	f04f 0400 	mov.w	r4, #0
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6852      	ldr	r2, [r2, #4]
 8003998:	0852      	lsrs	r2, r2, #1
 800399a:	4611      	mov	r1, r2
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	eb13 0b01 	adds.w	fp, r3, r1
 80039a4:	eb44 0c02 	adc.w	ip, r4, r2
 80039a8:	4658      	mov	r0, fp
 80039aa:	4661      	mov	r1, ip
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f04f 0400 	mov.w	r4, #0
 80039b4:	461a      	mov	r2, r3
 80039b6:	4623      	mov	r3, r4
 80039b8:	f7fc fc2e 	bl	8000218 <__aeabi_uldivmod>
 80039bc:	4603      	mov	r3, r0
 80039be:	460c      	mov	r4, r1
 80039c0:	61fb      	str	r3, [r7, #28]
            break;
 80039c2:	e002      	b.n	80039ca <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	76fb      	strb	r3, [r7, #27]
            break;
 80039c8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d0:	d309      	bcc.n	80039e6 <UART_SetConfig+0xb56>
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d8:	d205      	bcs.n	80039e6 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	f000 bc18 	b.w	8004216 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	76fb      	strb	r3, [r7, #27]
 80039ea:	f000 bc14 	b.w	8004216 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f6:	f040 8204 	bne.w	8003e02 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 80039fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	f200 81df 	bhi.w	8003dc2 <UART_SetConfig+0xf32>
 8003a04:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <UART_SetConfig+0xb7c>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a31 	.word	0x08003a31
 8003a10:	08003ae9 	.word	0x08003ae9
 8003a14:	08003ba1 	.word	0x08003ba1
 8003a18:	08003dc3 	.word	0x08003dc3
 8003a1c:	08003c49 	.word	0x08003c49
 8003a20:	08003dc3 	.word	0x08003dc3
 8003a24:	08003dc3 	.word	0x08003dc3
 8003a28:	08003dc3 	.word	0x08003dc3
 8003a2c:	08003d01 	.word	0x08003d01
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a30:	f7fe ff20 	bl	8002874 <HAL_RCC_GetPCLK1Freq>
 8003a34:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d044      	beq.n	8003ac8 <UART_SetConfig+0xc38>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d03e      	beq.n	8003ac4 <UART_SetConfig+0xc34>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d038      	beq.n	8003ac0 <UART_SetConfig+0xc30>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d032      	beq.n	8003abc <UART_SetConfig+0xc2c>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d02c      	beq.n	8003ab8 <UART_SetConfig+0xc28>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d026      	beq.n	8003ab4 <UART_SetConfig+0xc24>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	2b06      	cmp	r3, #6
 8003a6c:	d020      	beq.n	8003ab0 <UART_SetConfig+0xc20>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	2b07      	cmp	r3, #7
 8003a74:	d01a      	beq.n	8003aac <UART_SetConfig+0xc1c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d014      	beq.n	8003aa8 <UART_SetConfig+0xc18>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	2b09      	cmp	r3, #9
 8003a84:	d00e      	beq.n	8003aa4 <UART_SetConfig+0xc14>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	2b0a      	cmp	r3, #10
 8003a8c:	d008      	beq.n	8003aa0 <UART_SetConfig+0xc10>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	2b0b      	cmp	r3, #11
 8003a94:	d102      	bne.n	8003a9c <UART_SetConfig+0xc0c>
 8003a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a9a:	e016      	b.n	8003aca <UART_SetConfig+0xc3a>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e014      	b.n	8003aca <UART_SetConfig+0xc3a>
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	e012      	b.n	8003aca <UART_SetConfig+0xc3a>
 8003aa4:	2340      	movs	r3, #64	; 0x40
 8003aa6:	e010      	b.n	8003aca <UART_SetConfig+0xc3a>
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	e00e      	b.n	8003aca <UART_SetConfig+0xc3a>
 8003aac:	2310      	movs	r3, #16
 8003aae:	e00c      	b.n	8003aca <UART_SetConfig+0xc3a>
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	e00a      	b.n	8003aca <UART_SetConfig+0xc3a>
 8003ab4:	230a      	movs	r3, #10
 8003ab6:	e008      	b.n	8003aca <UART_SetConfig+0xc3a>
 8003ab8:	2308      	movs	r3, #8
 8003aba:	e006      	b.n	8003aca <UART_SetConfig+0xc3a>
 8003abc:	2306      	movs	r3, #6
 8003abe:	e004      	b.n	8003aca <UART_SetConfig+0xc3a>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	e002      	b.n	8003aca <UART_SetConfig+0xc3a>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e000      	b.n	8003aca <UART_SetConfig+0xc3a>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	005a      	lsls	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	441a      	add	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	61fb      	str	r3, [r7, #28]
        break;
 8003ae6:	e16f      	b.n	8003dc8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae8:	f7fe feda 	bl	80028a0 <HAL_RCC_GetPCLK2Freq>
 8003aec:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d044      	beq.n	8003b80 <UART_SetConfig+0xcf0>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d03e      	beq.n	8003b7c <UART_SetConfig+0xcec>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d038      	beq.n	8003b78 <UART_SetConfig+0xce8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d032      	beq.n	8003b74 <UART_SetConfig+0xce4>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d02c      	beq.n	8003b70 <UART_SetConfig+0xce0>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	2b05      	cmp	r3, #5
 8003b1c:	d026      	beq.n	8003b6c <UART_SetConfig+0xcdc>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d020      	beq.n	8003b68 <UART_SetConfig+0xcd8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2b07      	cmp	r3, #7
 8003b2c:	d01a      	beq.n	8003b64 <UART_SetConfig+0xcd4>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d014      	beq.n	8003b60 <UART_SetConfig+0xcd0>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	2b09      	cmp	r3, #9
 8003b3c:	d00e      	beq.n	8003b5c <UART_SetConfig+0xccc>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b0a      	cmp	r3, #10
 8003b44:	d008      	beq.n	8003b58 <UART_SetConfig+0xcc8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2b0b      	cmp	r3, #11
 8003b4c:	d102      	bne.n	8003b54 <UART_SetConfig+0xcc4>
 8003b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b52:	e016      	b.n	8003b82 <UART_SetConfig+0xcf2>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e014      	b.n	8003b82 <UART_SetConfig+0xcf2>
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	e012      	b.n	8003b82 <UART_SetConfig+0xcf2>
 8003b5c:	2340      	movs	r3, #64	; 0x40
 8003b5e:	e010      	b.n	8003b82 <UART_SetConfig+0xcf2>
 8003b60:	2320      	movs	r3, #32
 8003b62:	e00e      	b.n	8003b82 <UART_SetConfig+0xcf2>
 8003b64:	2310      	movs	r3, #16
 8003b66:	e00c      	b.n	8003b82 <UART_SetConfig+0xcf2>
 8003b68:	230c      	movs	r3, #12
 8003b6a:	e00a      	b.n	8003b82 <UART_SetConfig+0xcf2>
 8003b6c:	230a      	movs	r3, #10
 8003b6e:	e008      	b.n	8003b82 <UART_SetConfig+0xcf2>
 8003b70:	2308      	movs	r3, #8
 8003b72:	e006      	b.n	8003b82 <UART_SetConfig+0xcf2>
 8003b74:	2306      	movs	r3, #6
 8003b76:	e004      	b.n	8003b82 <UART_SetConfig+0xcf2>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	e002      	b.n	8003b82 <UART_SetConfig+0xcf2>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e000      	b.n	8003b82 <UART_SetConfig+0xcf2>
 8003b80:	2301      	movs	r3, #1
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	005a      	lsls	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	085b      	lsrs	r3, r3, #1
 8003b90:	441a      	add	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	61fb      	str	r3, [r7, #28]
        break;
 8003b9e:	e113      	b.n	8003dc8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d043      	beq.n	8003c30 <UART_SetConfig+0xda0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d03d      	beq.n	8003c2c <UART_SetConfig+0xd9c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d037      	beq.n	8003c28 <UART_SetConfig+0xd98>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d031      	beq.n	8003c24 <UART_SetConfig+0xd94>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d02b      	beq.n	8003c20 <UART_SetConfig+0xd90>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2b05      	cmp	r3, #5
 8003bce:	d025      	beq.n	8003c1c <UART_SetConfig+0xd8c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	2b06      	cmp	r3, #6
 8003bd6:	d01f      	beq.n	8003c18 <UART_SetConfig+0xd88>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	2b07      	cmp	r3, #7
 8003bde:	d019      	beq.n	8003c14 <UART_SetConfig+0xd84>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d013      	beq.n	8003c10 <UART_SetConfig+0xd80>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	2b09      	cmp	r3, #9
 8003bee:	d00d      	beq.n	8003c0c <UART_SetConfig+0xd7c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	2b0a      	cmp	r3, #10
 8003bf6:	d007      	beq.n	8003c08 <UART_SetConfig+0xd78>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2b0b      	cmp	r3, #11
 8003bfe:	d101      	bne.n	8003c04 <UART_SetConfig+0xd74>
 8003c00:	4b8d      	ldr	r3, [pc, #564]	; (8003e38 <UART_SetConfig+0xfa8>)
 8003c02:	e016      	b.n	8003c32 <UART_SetConfig+0xda2>
 8003c04:	4b8d      	ldr	r3, [pc, #564]	; (8003e3c <UART_SetConfig+0xfac>)
 8003c06:	e014      	b.n	8003c32 <UART_SetConfig+0xda2>
 8003c08:	4b8d      	ldr	r3, [pc, #564]	; (8003e40 <UART_SetConfig+0xfb0>)
 8003c0a:	e012      	b.n	8003c32 <UART_SetConfig+0xda2>
 8003c0c:	4b8d      	ldr	r3, [pc, #564]	; (8003e44 <UART_SetConfig+0xfb4>)
 8003c0e:	e010      	b.n	8003c32 <UART_SetConfig+0xda2>
 8003c10:	4b8d      	ldr	r3, [pc, #564]	; (8003e48 <UART_SetConfig+0xfb8>)
 8003c12:	e00e      	b.n	8003c32 <UART_SetConfig+0xda2>
 8003c14:	4b8d      	ldr	r3, [pc, #564]	; (8003e4c <UART_SetConfig+0xfbc>)
 8003c16:	e00c      	b.n	8003c32 <UART_SetConfig+0xda2>
 8003c18:	4b8d      	ldr	r3, [pc, #564]	; (8003e50 <UART_SetConfig+0xfc0>)
 8003c1a:	e00a      	b.n	8003c32 <UART_SetConfig+0xda2>
 8003c1c:	4b8d      	ldr	r3, [pc, #564]	; (8003e54 <UART_SetConfig+0xfc4>)
 8003c1e:	e008      	b.n	8003c32 <UART_SetConfig+0xda2>
 8003c20:	4b8d      	ldr	r3, [pc, #564]	; (8003e58 <UART_SetConfig+0xfc8>)
 8003c22:	e006      	b.n	8003c32 <UART_SetConfig+0xda2>
 8003c24:	4b8d      	ldr	r3, [pc, #564]	; (8003e5c <UART_SetConfig+0xfcc>)
 8003c26:	e004      	b.n	8003c32 <UART_SetConfig+0xda2>
 8003c28:	4b8d      	ldr	r3, [pc, #564]	; (8003e60 <UART_SetConfig+0xfd0>)
 8003c2a:	e002      	b.n	8003c32 <UART_SetConfig+0xda2>
 8003c2c:	4b8d      	ldr	r3, [pc, #564]	; (8003e64 <UART_SetConfig+0xfd4>)
 8003c2e:	e000      	b.n	8003c32 <UART_SetConfig+0xda2>
 8003c30:	4b82      	ldr	r3, [pc, #520]	; (8003e3c <UART_SetConfig+0xfac>)
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6852      	ldr	r2, [r2, #4]
 8003c36:	0852      	lsrs	r2, r2, #1
 8003c38:	441a      	add	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	61fb      	str	r3, [r7, #28]
        break;
 8003c46:	e0bf      	b.n	8003dc8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c48:	f7fe fda6 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8003c4c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d044      	beq.n	8003ce0 <UART_SetConfig+0xe50>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d03e      	beq.n	8003cdc <UART_SetConfig+0xe4c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d038      	beq.n	8003cd8 <UART_SetConfig+0xe48>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d032      	beq.n	8003cd4 <UART_SetConfig+0xe44>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d02c      	beq.n	8003cd0 <UART_SetConfig+0xe40>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d026      	beq.n	8003ccc <UART_SetConfig+0xe3c>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	2b06      	cmp	r3, #6
 8003c84:	d020      	beq.n	8003cc8 <UART_SetConfig+0xe38>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	2b07      	cmp	r3, #7
 8003c8c:	d01a      	beq.n	8003cc4 <UART_SetConfig+0xe34>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d014      	beq.n	8003cc0 <UART_SetConfig+0xe30>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	2b09      	cmp	r3, #9
 8003c9c:	d00e      	beq.n	8003cbc <UART_SetConfig+0xe2c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2b0a      	cmp	r3, #10
 8003ca4:	d008      	beq.n	8003cb8 <UART_SetConfig+0xe28>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	2b0b      	cmp	r3, #11
 8003cac:	d102      	bne.n	8003cb4 <UART_SetConfig+0xe24>
 8003cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cb2:	e016      	b.n	8003ce2 <UART_SetConfig+0xe52>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e014      	b.n	8003ce2 <UART_SetConfig+0xe52>
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	e012      	b.n	8003ce2 <UART_SetConfig+0xe52>
 8003cbc:	2340      	movs	r3, #64	; 0x40
 8003cbe:	e010      	b.n	8003ce2 <UART_SetConfig+0xe52>
 8003cc0:	2320      	movs	r3, #32
 8003cc2:	e00e      	b.n	8003ce2 <UART_SetConfig+0xe52>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	e00c      	b.n	8003ce2 <UART_SetConfig+0xe52>
 8003cc8:	230c      	movs	r3, #12
 8003cca:	e00a      	b.n	8003ce2 <UART_SetConfig+0xe52>
 8003ccc:	230a      	movs	r3, #10
 8003cce:	e008      	b.n	8003ce2 <UART_SetConfig+0xe52>
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	e006      	b.n	8003ce2 <UART_SetConfig+0xe52>
 8003cd4:	2306      	movs	r3, #6
 8003cd6:	e004      	b.n	8003ce2 <UART_SetConfig+0xe52>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	e002      	b.n	8003ce2 <UART_SetConfig+0xe52>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e000      	b.n	8003ce2 <UART_SetConfig+0xe52>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce8:	005a      	lsls	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	441a      	add	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	61fb      	str	r3, [r7, #28]
        break;
 8003cfe:	e063      	b.n	8003dc8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d04f      	beq.n	8003da8 <UART_SetConfig+0xf18>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d048      	beq.n	8003da2 <UART_SetConfig+0xf12>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d041      	beq.n	8003d9c <UART_SetConfig+0xf0c>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d03a      	beq.n	8003d96 <UART_SetConfig+0xf06>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d033      	beq.n	8003d90 <UART_SetConfig+0xf00>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	2b05      	cmp	r3, #5
 8003d2e:	d02c      	beq.n	8003d8a <UART_SetConfig+0xefa>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	2b06      	cmp	r3, #6
 8003d36:	d025      	beq.n	8003d84 <UART_SetConfig+0xef4>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	2b07      	cmp	r3, #7
 8003d3e:	d01e      	beq.n	8003d7e <UART_SetConfig+0xeee>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d017      	beq.n	8003d78 <UART_SetConfig+0xee8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	2b09      	cmp	r3, #9
 8003d4e:	d010      	beq.n	8003d72 <UART_SetConfig+0xee2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	2b0a      	cmp	r3, #10
 8003d56:	d009      	beq.n	8003d6c <UART_SetConfig+0xedc>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	2b0b      	cmp	r3, #11
 8003d5e:	d102      	bne.n	8003d66 <UART_SetConfig+0xed6>
 8003d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d64:	e022      	b.n	8003dac <UART_SetConfig+0xf1c>
 8003d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d6a:	e01f      	b.n	8003dac <UART_SetConfig+0xf1c>
 8003d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d70:	e01c      	b.n	8003dac <UART_SetConfig+0xf1c>
 8003d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d76:	e019      	b.n	8003dac <UART_SetConfig+0xf1c>
 8003d78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d7c:	e016      	b.n	8003dac <UART_SetConfig+0xf1c>
 8003d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d82:	e013      	b.n	8003dac <UART_SetConfig+0xf1c>
 8003d84:	f241 5354 	movw	r3, #5460	; 0x1554
 8003d88:	e010      	b.n	8003dac <UART_SetConfig+0xf1c>
 8003d8a:	f641 1398 	movw	r3, #6552	; 0x1998
 8003d8e:	e00d      	b.n	8003dac <UART_SetConfig+0xf1c>
 8003d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d94:	e00a      	b.n	8003dac <UART_SetConfig+0xf1c>
 8003d96:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8003d9a:	e007      	b.n	8003dac <UART_SetConfig+0xf1c>
 8003d9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003da0:	e004      	b.n	8003dac <UART_SetConfig+0xf1c>
 8003da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da6:	e001      	b.n	8003dac <UART_SetConfig+0xf1c>
 8003da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6852      	ldr	r2, [r2, #4]
 8003db0:	0852      	lsrs	r2, r2, #1
 8003db2:	441a      	add	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	61fb      	str	r3, [r7, #28]
        break;
 8003dc0:	e002      	b.n	8003dc8 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	76fb      	strb	r3, [r7, #27]
        break;
 8003dc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	2b0f      	cmp	r3, #15
 8003dcc:	d916      	bls.n	8003dfc <UART_SetConfig+0xf6c>
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd4:	d212      	bcs.n	8003dfc <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f023 030f 	bic.w	r3, r3, #15
 8003dde:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	89fb      	ldrh	r3, [r7, #14]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	89fa      	ldrh	r2, [r7, #14]
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	e20c      	b.n	8004216 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	76fb      	strb	r3, [r7, #27]
 8003e00:	e209      	b.n	8004216 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8003e02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	f200 81f4 	bhi.w	80041f4 <UART_SetConfig+0x1364>
 8003e0c:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <UART_SetConfig+0xf84>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e69 	.word	0x08003e69
 8003e18:	08003f1f 	.word	0x08003f1f
 8003e1c:	08003fd5 	.word	0x08003fd5
 8003e20:	080041f5 	.word	0x080041f5
 8003e24:	0800407f 	.word	0x0800407f
 8003e28:	080041f5 	.word	0x080041f5
 8003e2c:	080041f5 	.word	0x080041f5
 8003e30:	080041f5 	.word	0x080041f5
 8003e34:	08004135 	.word	0x08004135
 8003e38:	0001e848 	.word	0x0001e848
 8003e3c:	01e84800 	.word	0x01e84800
 8003e40:	0003d090 	.word	0x0003d090
 8003e44:	0007a120 	.word	0x0007a120
 8003e48:	000f4240 	.word	0x000f4240
 8003e4c:	001e8480 	.word	0x001e8480
 8003e50:	0028b0aa 	.word	0x0028b0aa
 8003e54:	0030d400 	.word	0x0030d400
 8003e58:	003d0900 	.word	0x003d0900
 8003e5c:	00516154 	.word	0x00516154
 8003e60:	007a1200 	.word	0x007a1200
 8003e64:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e68:	f7fe fd04 	bl	8002874 <HAL_RCC_GetPCLK1Freq>
 8003e6c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d044      	beq.n	8003f00 <UART_SetConfig+0x1070>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d03e      	beq.n	8003efc <UART_SetConfig+0x106c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d038      	beq.n	8003ef8 <UART_SetConfig+0x1068>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d032      	beq.n	8003ef4 <UART_SetConfig+0x1064>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d02c      	beq.n	8003ef0 <UART_SetConfig+0x1060>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	2b05      	cmp	r3, #5
 8003e9c:	d026      	beq.n	8003eec <UART_SetConfig+0x105c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d020      	beq.n	8003ee8 <UART_SetConfig+0x1058>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	2b07      	cmp	r3, #7
 8003eac:	d01a      	beq.n	8003ee4 <UART_SetConfig+0x1054>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d014      	beq.n	8003ee0 <UART_SetConfig+0x1050>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2b09      	cmp	r3, #9
 8003ebc:	d00e      	beq.n	8003edc <UART_SetConfig+0x104c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2b0a      	cmp	r3, #10
 8003ec4:	d008      	beq.n	8003ed8 <UART_SetConfig+0x1048>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	2b0b      	cmp	r3, #11
 8003ecc:	d102      	bne.n	8003ed4 <UART_SetConfig+0x1044>
 8003ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ed2:	e016      	b.n	8003f02 <UART_SetConfig+0x1072>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e014      	b.n	8003f02 <UART_SetConfig+0x1072>
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	e012      	b.n	8003f02 <UART_SetConfig+0x1072>
 8003edc:	2340      	movs	r3, #64	; 0x40
 8003ede:	e010      	b.n	8003f02 <UART_SetConfig+0x1072>
 8003ee0:	2320      	movs	r3, #32
 8003ee2:	e00e      	b.n	8003f02 <UART_SetConfig+0x1072>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	e00c      	b.n	8003f02 <UART_SetConfig+0x1072>
 8003ee8:	230c      	movs	r3, #12
 8003eea:	e00a      	b.n	8003f02 <UART_SetConfig+0x1072>
 8003eec:	230a      	movs	r3, #10
 8003eee:	e008      	b.n	8003f02 <UART_SetConfig+0x1072>
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	e006      	b.n	8003f02 <UART_SetConfig+0x1072>
 8003ef4:	2306      	movs	r3, #6
 8003ef6:	e004      	b.n	8003f02 <UART_SetConfig+0x1072>
 8003ef8:	2304      	movs	r3, #4
 8003efa:	e002      	b.n	8003f02 <UART_SetConfig+0x1072>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e000      	b.n	8003f02 <UART_SetConfig+0x1072>
 8003f00:	2301      	movs	r3, #1
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	441a      	add	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	61fb      	str	r3, [r7, #28]
        break;
 8003f1c:	e16d      	b.n	80041fa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f1e:	f7fe fcbf 	bl	80028a0 <HAL_RCC_GetPCLK2Freq>
 8003f22:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d044      	beq.n	8003fb6 <UART_SetConfig+0x1126>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d03e      	beq.n	8003fb2 <UART_SetConfig+0x1122>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d038      	beq.n	8003fae <UART_SetConfig+0x111e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d032      	beq.n	8003faa <UART_SetConfig+0x111a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d02c      	beq.n	8003fa6 <UART_SetConfig+0x1116>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	d026      	beq.n	8003fa2 <UART_SetConfig+0x1112>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	2b06      	cmp	r3, #6
 8003f5a:	d020      	beq.n	8003f9e <UART_SetConfig+0x110e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	2b07      	cmp	r3, #7
 8003f62:	d01a      	beq.n	8003f9a <UART_SetConfig+0x110a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d014      	beq.n	8003f96 <UART_SetConfig+0x1106>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2b09      	cmp	r3, #9
 8003f72:	d00e      	beq.n	8003f92 <UART_SetConfig+0x1102>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	2b0a      	cmp	r3, #10
 8003f7a:	d008      	beq.n	8003f8e <UART_SetConfig+0x10fe>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	2b0b      	cmp	r3, #11
 8003f82:	d102      	bne.n	8003f8a <UART_SetConfig+0x10fa>
 8003f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f88:	e016      	b.n	8003fb8 <UART_SetConfig+0x1128>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e014      	b.n	8003fb8 <UART_SetConfig+0x1128>
 8003f8e:	2380      	movs	r3, #128	; 0x80
 8003f90:	e012      	b.n	8003fb8 <UART_SetConfig+0x1128>
 8003f92:	2340      	movs	r3, #64	; 0x40
 8003f94:	e010      	b.n	8003fb8 <UART_SetConfig+0x1128>
 8003f96:	2320      	movs	r3, #32
 8003f98:	e00e      	b.n	8003fb8 <UART_SetConfig+0x1128>
 8003f9a:	2310      	movs	r3, #16
 8003f9c:	e00c      	b.n	8003fb8 <UART_SetConfig+0x1128>
 8003f9e:	230c      	movs	r3, #12
 8003fa0:	e00a      	b.n	8003fb8 <UART_SetConfig+0x1128>
 8003fa2:	230a      	movs	r3, #10
 8003fa4:	e008      	b.n	8003fb8 <UART_SetConfig+0x1128>
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	e006      	b.n	8003fb8 <UART_SetConfig+0x1128>
 8003faa:	2306      	movs	r3, #6
 8003fac:	e004      	b.n	8003fb8 <UART_SetConfig+0x1128>
 8003fae:	2304      	movs	r3, #4
 8003fb0:	e002      	b.n	8003fb8 <UART_SetConfig+0x1128>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e000      	b.n	8003fb8 <UART_SetConfig+0x1128>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	441a      	add	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	61fb      	str	r3, [r7, #28]
        break;
 8003fd2:	e112      	b.n	80041fa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d044      	beq.n	8004066 <UART_SetConfig+0x11d6>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d03e      	beq.n	8004062 <UART_SetConfig+0x11d2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d038      	beq.n	800405e <UART_SetConfig+0x11ce>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d032      	beq.n	800405a <UART_SetConfig+0x11ca>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d02c      	beq.n	8004056 <UART_SetConfig+0x11c6>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	2b05      	cmp	r3, #5
 8004002:	d026      	beq.n	8004052 <UART_SetConfig+0x11c2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	2b06      	cmp	r3, #6
 800400a:	d020      	beq.n	800404e <UART_SetConfig+0x11be>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	2b07      	cmp	r3, #7
 8004012:	d01a      	beq.n	800404a <UART_SetConfig+0x11ba>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	2b08      	cmp	r3, #8
 800401a:	d014      	beq.n	8004046 <UART_SetConfig+0x11b6>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2b09      	cmp	r3, #9
 8004022:	d00e      	beq.n	8004042 <UART_SetConfig+0x11b2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2b0a      	cmp	r3, #10
 800402a:	d008      	beq.n	800403e <UART_SetConfig+0x11ae>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2b0b      	cmp	r3, #11
 8004032:	d102      	bne.n	800403a <UART_SetConfig+0x11aa>
 8004034:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004038:	e016      	b.n	8004068 <UART_SetConfig+0x11d8>
 800403a:	4b81      	ldr	r3, [pc, #516]	; (8004240 <UART_SetConfig+0x13b0>)
 800403c:	e014      	b.n	8004068 <UART_SetConfig+0x11d8>
 800403e:	4b81      	ldr	r3, [pc, #516]	; (8004244 <UART_SetConfig+0x13b4>)
 8004040:	e012      	b.n	8004068 <UART_SetConfig+0x11d8>
 8004042:	4b81      	ldr	r3, [pc, #516]	; (8004248 <UART_SetConfig+0x13b8>)
 8004044:	e010      	b.n	8004068 <UART_SetConfig+0x11d8>
 8004046:	4b81      	ldr	r3, [pc, #516]	; (800424c <UART_SetConfig+0x13bc>)
 8004048:	e00e      	b.n	8004068 <UART_SetConfig+0x11d8>
 800404a:	4b81      	ldr	r3, [pc, #516]	; (8004250 <UART_SetConfig+0x13c0>)
 800404c:	e00c      	b.n	8004068 <UART_SetConfig+0x11d8>
 800404e:	4b81      	ldr	r3, [pc, #516]	; (8004254 <UART_SetConfig+0x13c4>)
 8004050:	e00a      	b.n	8004068 <UART_SetConfig+0x11d8>
 8004052:	4b81      	ldr	r3, [pc, #516]	; (8004258 <UART_SetConfig+0x13c8>)
 8004054:	e008      	b.n	8004068 <UART_SetConfig+0x11d8>
 8004056:	4b81      	ldr	r3, [pc, #516]	; (800425c <UART_SetConfig+0x13cc>)
 8004058:	e006      	b.n	8004068 <UART_SetConfig+0x11d8>
 800405a:	4b81      	ldr	r3, [pc, #516]	; (8004260 <UART_SetConfig+0x13d0>)
 800405c:	e004      	b.n	8004068 <UART_SetConfig+0x11d8>
 800405e:	4b81      	ldr	r3, [pc, #516]	; (8004264 <UART_SetConfig+0x13d4>)
 8004060:	e002      	b.n	8004068 <UART_SetConfig+0x11d8>
 8004062:	4b81      	ldr	r3, [pc, #516]	; (8004268 <UART_SetConfig+0x13d8>)
 8004064:	e000      	b.n	8004068 <UART_SetConfig+0x11d8>
 8004066:	4b76      	ldr	r3, [pc, #472]	; (8004240 <UART_SetConfig+0x13b0>)
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6852      	ldr	r2, [r2, #4]
 800406c:	0852      	lsrs	r2, r2, #1
 800406e:	441a      	add	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	b29b      	uxth	r3, r3
 800407a:	61fb      	str	r3, [r7, #28]
        break;
 800407c:	e0bd      	b.n	80041fa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800407e:	f7fe fb8b 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8004082:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	2b00      	cmp	r3, #0
 800408a:	d044      	beq.n	8004116 <UART_SetConfig+0x1286>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	2b01      	cmp	r3, #1
 8004092:	d03e      	beq.n	8004112 <UART_SetConfig+0x1282>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	2b02      	cmp	r3, #2
 800409a:	d038      	beq.n	800410e <UART_SetConfig+0x127e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d032      	beq.n	800410a <UART_SetConfig+0x127a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d02c      	beq.n	8004106 <UART_SetConfig+0x1276>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d026      	beq.n	8004102 <UART_SetConfig+0x1272>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	2b06      	cmp	r3, #6
 80040ba:	d020      	beq.n	80040fe <UART_SetConfig+0x126e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	2b07      	cmp	r3, #7
 80040c2:	d01a      	beq.n	80040fa <UART_SetConfig+0x126a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d014      	beq.n	80040f6 <UART_SetConfig+0x1266>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	2b09      	cmp	r3, #9
 80040d2:	d00e      	beq.n	80040f2 <UART_SetConfig+0x1262>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	2b0a      	cmp	r3, #10
 80040da:	d008      	beq.n	80040ee <UART_SetConfig+0x125e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	2b0b      	cmp	r3, #11
 80040e2:	d102      	bne.n	80040ea <UART_SetConfig+0x125a>
 80040e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040e8:	e016      	b.n	8004118 <UART_SetConfig+0x1288>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e014      	b.n	8004118 <UART_SetConfig+0x1288>
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	e012      	b.n	8004118 <UART_SetConfig+0x1288>
 80040f2:	2340      	movs	r3, #64	; 0x40
 80040f4:	e010      	b.n	8004118 <UART_SetConfig+0x1288>
 80040f6:	2320      	movs	r3, #32
 80040f8:	e00e      	b.n	8004118 <UART_SetConfig+0x1288>
 80040fa:	2310      	movs	r3, #16
 80040fc:	e00c      	b.n	8004118 <UART_SetConfig+0x1288>
 80040fe:	230c      	movs	r3, #12
 8004100:	e00a      	b.n	8004118 <UART_SetConfig+0x1288>
 8004102:	230a      	movs	r3, #10
 8004104:	e008      	b.n	8004118 <UART_SetConfig+0x1288>
 8004106:	2308      	movs	r3, #8
 8004108:	e006      	b.n	8004118 <UART_SetConfig+0x1288>
 800410a:	2306      	movs	r3, #6
 800410c:	e004      	b.n	8004118 <UART_SetConfig+0x1288>
 800410e:	2304      	movs	r3, #4
 8004110:	e002      	b.n	8004118 <UART_SetConfig+0x1288>
 8004112:	2302      	movs	r3, #2
 8004114:	e000      	b.n	8004118 <UART_SetConfig+0x1288>
 8004116:	2301      	movs	r3, #1
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	fbb2 f2f3 	udiv	r2, r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	085b      	lsrs	r3, r3, #1
 8004124:	441a      	add	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	b29b      	uxth	r3, r3
 8004130:	61fb      	str	r3, [r7, #28]
        break;
 8004132:	e062      	b.n	80041fa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	2b00      	cmp	r3, #0
 800413a:	d04e      	beq.n	80041da <UART_SetConfig+0x134a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	2b01      	cmp	r3, #1
 8004142:	d047      	beq.n	80041d4 <UART_SetConfig+0x1344>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	2b02      	cmp	r3, #2
 800414a:	d040      	beq.n	80041ce <UART_SetConfig+0x133e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	2b03      	cmp	r3, #3
 8004152:	d039      	beq.n	80041c8 <UART_SetConfig+0x1338>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	2b04      	cmp	r3, #4
 800415a:	d032      	beq.n	80041c2 <UART_SetConfig+0x1332>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	2b05      	cmp	r3, #5
 8004162:	d02b      	beq.n	80041bc <UART_SetConfig+0x132c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	2b06      	cmp	r3, #6
 800416a:	d024      	beq.n	80041b6 <UART_SetConfig+0x1326>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	2b07      	cmp	r3, #7
 8004172:	d01d      	beq.n	80041b0 <UART_SetConfig+0x1320>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	2b08      	cmp	r3, #8
 800417a:	d016      	beq.n	80041aa <UART_SetConfig+0x131a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	2b09      	cmp	r3, #9
 8004182:	d00f      	beq.n	80041a4 <UART_SetConfig+0x1314>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	2b0a      	cmp	r3, #10
 800418a:	d008      	beq.n	800419e <UART_SetConfig+0x130e>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	2b0b      	cmp	r3, #11
 8004192:	d101      	bne.n	8004198 <UART_SetConfig+0x1308>
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	e022      	b.n	80041de <UART_SetConfig+0x134e>
 8004198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419c:	e01f      	b.n	80041de <UART_SetConfig+0x134e>
 800419e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041a2:	e01c      	b.n	80041de <UART_SetConfig+0x134e>
 80041a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041a8:	e019      	b.n	80041de <UART_SetConfig+0x134e>
 80041aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ae:	e016      	b.n	80041de <UART_SetConfig+0x134e>
 80041b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041b4:	e013      	b.n	80041de <UART_SetConfig+0x134e>
 80041b6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80041ba:	e010      	b.n	80041de <UART_SetConfig+0x134e>
 80041bc:	f640 43cc 	movw	r3, #3276	; 0xccc
 80041c0:	e00d      	b.n	80041de <UART_SetConfig+0x134e>
 80041c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041c6:	e00a      	b.n	80041de <UART_SetConfig+0x134e>
 80041c8:	f241 5355 	movw	r3, #5461	; 0x1555
 80041cc:	e007      	b.n	80041de <UART_SetConfig+0x134e>
 80041ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041d2:	e004      	b.n	80041de <UART_SetConfig+0x134e>
 80041d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041d8:	e001      	b.n	80041de <UART_SetConfig+0x134e>
 80041da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6852      	ldr	r2, [r2, #4]
 80041e2:	0852      	lsrs	r2, r2, #1
 80041e4:	441a      	add	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	61fb      	str	r3, [r7, #28]
        break;
 80041f2:	e002      	b.n	80041fa <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	76fb      	strb	r3, [r7, #27]
        break;
 80041f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	2b0f      	cmp	r3, #15
 80041fe:	d908      	bls.n	8004212 <UART_SetConfig+0x1382>
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004206:	d204      	bcs.n	8004212 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	60da      	str	r2, [r3, #12]
 8004210:	e001      	b.n	8004216 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004232:	7efb      	ldrb	r3, [r7, #27]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3728      	adds	r7, #40	; 0x28
 8004238:	46bd      	mov	sp, r7
 800423a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800423e:	bf00      	nop
 8004240:	00f42400 	.word	0x00f42400
 8004244:	0001e848 	.word	0x0001e848
 8004248:	0003d090 	.word	0x0003d090
 800424c:	0007a120 	.word	0x0007a120
 8004250:	000f4240 	.word	0x000f4240
 8004254:	00145855 	.word	0x00145855
 8004258:	00186a00 	.word	0x00186a00
 800425c:	001e8480 	.word	0x001e8480
 8004260:	0028b0aa 	.word	0x0028b0aa
 8004264:	003d0900 	.word	0x003d0900
 8004268:	007a1200 	.word	0x007a1200

0800426c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01a      	beq.n	8004382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436a:	d10a      	bne.n	8004382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80043c0:	f7fc fca6 	bl	8000d10 <HAL_GetTick>
 80043c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d10e      	bne.n	80043f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f82c 	bl	8004440 <UART_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e022      	b.n	8004438 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d10e      	bne.n	800441e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f816 	bl	8004440 <UART_WaitOnFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e00c      	b.n	8004438 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2220      	movs	r2, #32
 800442a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004450:	e02c      	b.n	80044ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d028      	beq.n	80044ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445a:	f7fc fc59 	bl	8000d10 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	429a      	cmp	r2, r3
 8004468:	d302      	bcc.n	8004470 <UART_WaitOnFlagUntilTimeout+0x30>
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d11d      	bne.n	80044ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800447e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e00f      	b.n	80044cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4013      	ands	r3, r2
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d0c3      	beq.n	8004452 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_UARTEx_DisableFifoMode+0x16>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e027      	b.n	800453a <HAL_UARTEx_DisableFifoMode+0x66>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2224      	movs	r2, #36	; 0x24
 80044f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004518:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800455a:	2302      	movs	r3, #2
 800455c:	e02d      	b.n	80045ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2224      	movs	r2, #36	; 0x24
 800456a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f850 	bl	8004640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e02d      	b.n	8004636 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2224      	movs	r2, #36	; 0x24
 80045e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0201 	bic.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f812 	bl	8004640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b089      	sub	sp, #36	; 0x24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004648:	4a2f      	ldr	r2, [pc, #188]	; (8004708 <UARTEx_SetNbDataToProcess+0xc8>)
 800464a:	f107 0314 	add.w	r3, r7, #20
 800464e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004652:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004656:	4a2d      	ldr	r2, [pc, #180]	; (800470c <UARTEx_SetNbDataToProcess+0xcc>)
 8004658:	f107 030c 	add.w	r3, r7, #12
 800465c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004660:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004668:	2b00      	cmp	r3, #0
 800466a:	d108      	bne.n	800467e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800467c:	e03d      	b.n	80046fa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800467e:	2308      	movs	r3, #8
 8004680:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004682:	2308      	movs	r3, #8
 8004684:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	0e5b      	lsrs	r3, r3, #25
 800468e:	b2db      	uxtb	r3, r3
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	0f5b      	lsrs	r3, r3, #29
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80046a6:	7fbb      	ldrb	r3, [r7, #30]
 80046a8:	7f3a      	ldrb	r2, [r7, #28]
 80046aa:	f107 0120 	add.w	r1, r7, #32
 80046ae:	440a      	add	r2, r1
 80046b0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80046b4:	fb02 f303 	mul.w	r3, r2, r3
 80046b8:	7f3a      	ldrb	r2, [r7, #28]
 80046ba:	f107 0120 	add.w	r1, r7, #32
 80046be:	440a      	add	r2, r1
 80046c0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80046c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80046d0:	7ffb      	ldrb	r3, [r7, #31]
 80046d2:	7f7a      	ldrb	r2, [r7, #29]
 80046d4:	f107 0120 	add.w	r1, r7, #32
 80046d8:	440a      	add	r2, r1
 80046da:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	7f7a      	ldrb	r2, [r7, #29]
 80046e4:	f107 0120 	add.w	r1, r7, #32
 80046e8:	440a      	add	r2, r1
 80046ea:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80046ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80046fa:	bf00      	nop
 80046fc:	3724      	adds	r7, #36	; 0x24
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	08004780 	.word	0x08004780
 800470c:	08004788 	.word	0x08004788

08004710 <__libc_init_array>:
 8004710:	b570      	push	{r4, r5, r6, lr}
 8004712:	4e0d      	ldr	r6, [pc, #52]	; (8004748 <__libc_init_array+0x38>)
 8004714:	4c0d      	ldr	r4, [pc, #52]	; (800474c <__libc_init_array+0x3c>)
 8004716:	1ba4      	subs	r4, r4, r6
 8004718:	10a4      	asrs	r4, r4, #2
 800471a:	2500      	movs	r5, #0
 800471c:	42a5      	cmp	r5, r4
 800471e:	d109      	bne.n	8004734 <__libc_init_array+0x24>
 8004720:	4e0b      	ldr	r6, [pc, #44]	; (8004750 <__libc_init_array+0x40>)
 8004722:	4c0c      	ldr	r4, [pc, #48]	; (8004754 <__libc_init_array+0x44>)
 8004724:	f000 f820 	bl	8004768 <_init>
 8004728:	1ba4      	subs	r4, r4, r6
 800472a:	10a4      	asrs	r4, r4, #2
 800472c:	2500      	movs	r5, #0
 800472e:	42a5      	cmp	r5, r4
 8004730:	d105      	bne.n	800473e <__libc_init_array+0x2e>
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004738:	4798      	blx	r3
 800473a:	3501      	adds	r5, #1
 800473c:	e7ee      	b.n	800471c <__libc_init_array+0xc>
 800473e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004742:	4798      	blx	r3
 8004744:	3501      	adds	r5, #1
 8004746:	e7f2      	b.n	800472e <__libc_init_array+0x1e>
 8004748:	080047c0 	.word	0x080047c0
 800474c:	080047c0 	.word	0x080047c0
 8004750:	080047c0 	.word	0x080047c0
 8004754:	080047c4 	.word	0x080047c4

08004758 <memset>:
 8004758:	4402      	add	r2, r0
 800475a:	4603      	mov	r3, r0
 800475c:	4293      	cmp	r3, r2
 800475e:	d100      	bne.n	8004762 <memset+0xa>
 8004760:	4770      	bx	lr
 8004762:	f803 1b01 	strb.w	r1, [r3], #1
 8004766:	e7f9      	b.n	800475c <memset+0x4>

08004768 <_init>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	bf00      	nop
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr

08004774 <_fini>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	bf00      	nop
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr
