
Nucleo-H743ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f6c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08014204  08014204  00024204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014790  08014790  000300d0  2**0
                  CONTENTS
  4 .ARM          00000008  08014790  08014790  00024790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014798  08014798  000300d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014798  08014798  00024798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801479c  0801479c  0002479c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080147a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080147b0  00030010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08014810  00030070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004ddc  240000d0  08014870  000300d0  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  24004eac  08014870  00034eac  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039bcb  00000000  00000000  000300fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00005156  00000000  00000000  00069cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002248  00000000  00000000  0006ee20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002080  00000000  00000000  00071068  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003ecd0  00000000  00000000  000730e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001fd05  00000000  00000000  000b1db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0018d046  00000000  00000000  000d1abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0025eb03  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009618  00000000  00000000  0025eb80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080141ec 	.word	0x080141ec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080141ec 	.word	0x080141ec

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 f8eb 	bl	80017b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f869 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fb8b 	bl	8000d00 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 fb69 	bl	8000cc0 <MX_DMA_Init>
  MX_ETH_Init();
 80005ee:	f000 f9ed 	bl	80009cc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 fae7 	bl	8000bc4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 fb31 	bl	8000c5c <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 80005fa:	f000 fa39 	bl	8000a70 <MX_FDCAN1_Init>
  MX_SDMMC1_SD_Init();
 80005fe:	f000 fa9b 	bl	8000b38 <MX_SDMMC1_SD_Init>
  MX_TIM17_Init();
 8000602:	f000 fab9 	bl	8000b78 <MX_TIM17_Init>
  MX_ADC3_Init();
 8000606:	f000 f97d 	bl	8000904 <MX_ADC3_Init>
  MX_FATFS_Init();
 800060a:	f00e fe85 	bl	800f318 <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800060e:	f000 f965 	bl	80008dc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // SD Card Initialization
  char path[] = "DATA_LOG.TXT";
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <main+0xb8>)
 8000614:	463c      	mov	r4, r7
 8000616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000618:	c407      	stmia	r4!, {r0, r1, r2}
 800061a:	7023      	strb	r3, [r4, #0]
  res = f_mount(&SDFatFs, SDPath, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	491d      	ldr	r1, [pc, #116]	; (8000694 <main+0xbc>)
 8000620:	481d      	ldr	r0, [pc, #116]	; (8000698 <main+0xc0>)
 8000622:	f012 fbcd 	bl	8012dc0 <f_mount>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <main+0xc4>)
 800062c:	701a      	strb	r2, [r3, #0]
  res = f_open(&SDFile, &path[0], FA_CREATE_ALWAYS);
 800062e:	463b      	mov	r3, r7
 8000630:	2208      	movs	r2, #8
 8000632:	4619      	mov	r1, r3
 8000634:	481a      	ldr	r0, [pc, #104]	; (80006a0 <main+0xc8>)
 8000636:	f012 fc09 	bl	8012e4c <f_open>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <main+0xc4>)
 8000640:	701a      	strb	r2, [r3, #0]
  res = f_close(&SDFile);
 8000642:	4817      	ldr	r0, [pc, #92]	; (80006a0 <main+0xc8>)
 8000644:	f013 f9b5 	bl	80139b2 <f_close>
 8000648:	4603      	mov	r3, r0
 800064a:	461a      	mov	r2, r3
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <main+0xc4>)
 800064e:	701a      	strb	r2, [r3, #0]
  res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);
 8000650:	463b      	mov	r3, r7
 8000652:	2232      	movs	r2, #50	; 0x32
 8000654:	4619      	mov	r1, r3
 8000656:	4812      	ldr	r0, [pc, #72]	; (80006a0 <main+0xc8>)
 8000658:	f012 fbf8 	bl	8012e4c <f_open>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <main+0xc4>)
 8000662:	701a      	strb	r2, [r3, #0]
  f_printf(&SDFile,"Timer, ID, Acc_X, Acc_Y, Acc_Z, Gyr_X, Gyr_Y, Temp\n");
 8000664:	490f      	ldr	r1, [pc, #60]	; (80006a4 <main+0xcc>)
 8000666:	480e      	ldr	r0, [pc, #56]	; (80006a0 <main+0xc8>)
 8000668:	f013 fa46 	bl	8013af8 <f_printf>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)analogDmaData, ADC_CONVERTED_DATA_BUFFER_SIZE);
 800066c:	2220      	movs	r2, #32
 800066e:	490e      	ldr	r1, [pc, #56]	; (80006a8 <main+0xd0>)
 8000670:	480e      	ldr	r0, [pc, #56]	; (80006ac <main+0xd4>)
 8000672:	f001 fcf1 	bl	8002058 <HAL_ADC_Start_DMA>
  // CAN Initialization
  HAL_FDCAN_Start(&hfdcan1);
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <main+0xd8>)
 8000678:	f005 fad4 	bl	8005c24 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2101      	movs	r1, #1
 8000680:	480b      	ldr	r0, [pc, #44]	; (80006b0 <main+0xd8>)
 8000682:	f005 fc3b 	bl	8005efc <HAL_FDCAN_ActivateNotification>

  // TIMER Initialization
  HAL_TIM_Base_Start_IT(&htim17);
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <main+0xdc>)
 8000688:	f00a ff16 	bl	800b4b8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0xb4>
 800068e:	bf00      	nop
 8000690:	08014238 	.word	0x08014238
 8000694:	24002e14 	.word	0x24002e14
 8000698:	24001bb8 	.word	0x24001bb8
 800069c:	24002d18 	.word	0x24002d18
 80006a0:	24002e18 	.word	0x24002e18
 80006a4:	08014204 	.word	0x08014204
 80006a8:	24002cd8 	.word	0x24002cd8
 80006ac:	24001b54 	.word	0x24001b54
 80006b0:	24002bf4 	.word	0x24002bf4
 80006b4:	24000a9c 	.word	0x24000a9c

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0cc      	sub	sp, #304	; 0x130
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006c2:	224c      	movs	r2, #76	; 0x4c
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f013 fd87 	bl	80141da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006d0:	2220      	movs	r2, #32
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f013 fd80 	bl	80141da <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4618      	mov	r0, r3
 80006e0:	23bc      	movs	r3, #188	; 0xbc
 80006e2:	461a      	mov	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f013 fd78 	bl	80141da <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ea:	2002      	movs	r0, #2
 80006ec:	f006 fca8 	bl	8007040 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	4b75      	ldr	r3, [pc, #468]	; (80008cc <SystemClock_Config+0x214>)
 80006f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fa:	4a74      	ldr	r2, [pc, #464]	; (80008cc <SystemClock_Config+0x214>)
 80006fc:	f023 0301 	bic.w	r3, r3, #1
 8000700:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000702:	4b72      	ldr	r3, [pc, #456]	; (80008cc <SystemClock_Config+0x214>)
 8000704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000706:	f003 0201 	and.w	r2, r3, #1
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	4b70      	ldr	r3, [pc, #448]	; (80008d0 <SystemClock_Config+0x218>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a6f      	ldr	r2, [pc, #444]	; (80008d0 <SystemClock_Config+0x218>)
 8000714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000718:	6193      	str	r3, [r2, #24]
 800071a:	4b6d      	ldr	r3, [pc, #436]	; (80008d0 <SystemClock_Config+0x218>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800072a:	bf00      	nop
 800072c:	4b68      	ldr	r3, [pc, #416]	; (80008d0 <SystemClock_Config+0x218>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000738:	d1f8      	bne.n	800072c <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800073a:	4b66      	ldr	r3, [pc, #408]	; (80008d4 <SystemClock_Config+0x21c>)
 800073c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800073e:	f023 0303 	bic.w	r3, r3, #3
 8000742:	4a64      	ldr	r2, [pc, #400]	; (80008d4 <SystemClock_Config+0x21c>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074a:	2301      	movs	r3, #1
 800074c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000750:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000754:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	2302      	movs	r3, #2
 8000760:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 32;
 800076a:	2320      	movs	r3, #32
 800076c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000776:	2304      	movs	r3, #4
 8000778:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000782:	230c      	movs	r3, #12
 8000784:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000788:	2300      	movs	r3, #0
 800078a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000798:	4618      	mov	r0, r3
 800079a:	f006 fc9b 	bl	80070d4 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80007a4:	f000 fc72 	bl	800108c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	233f      	movs	r3, #63	; 0x3f
 80007aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2303      	movs	r3, #3
 80007b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007ba:	2308      	movs	r3, #8
 80007bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f007 f850 	bl	8007884 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x136>
  {
    Error_Handler();
 80007ea:	f000 fc4f 	bl	800108c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4a39      	ldr	r2, [pc, #228]	; (80008d8 <SystemClock_Config+0x220>)
 80007f4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2201      	movs	r2, #1
 80007fc:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	2212      	movs	r2, #18
 8000804:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2202      	movs	r2, #2
 800080c:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	2202      	movs	r2, #2
 8000814:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2202      	movs	r2, #2
 800081c:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	22c0      	movs	r2, #192	; 0xc0
 8000824:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	2220      	movs	r2, #32
 800082c:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000836:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	2201      	movs	r2, #1
 800083e:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2218      	movs	r2, #24
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	2202      	movs	r2, #2
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2204      	movs	r2, #4
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	2202      	movs	r2, #2
 800085e:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000868:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2200      	movs	r2, #0
 8000870:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	2200      	movs	r2, #0
 8000878:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	2200      	movs	r2, #0
 8000880:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800088a:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	2200      	movs	r2, #0
 8000892:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800089c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2200      	movs	r2, #0
 80008a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	4618      	mov	r0, r3
 80008b0:	f007 fb6c 	bl	8007f8c <HAL_RCCEx_PeriphCLKConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x206>
  {
    Error_Handler();
 80008ba:	f000 fbe7 	bl	800108c <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80008be:	f006 fbf9 	bl	80070b4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80008c2:	bf00      	nop
 80008c4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	58000400 	.word	0x58000400
 80008d0:	58024800 	.word	0x58024800
 80008d4:	58024400 	.word	0x58024400
 80008d8:	000d8002 	.word	0x000d8002

080008dc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	2013      	movs	r0, #19
 80008e6:	f002 fa98 	bl	8002e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80008ea:	2013      	movs	r0, #19
 80008ec:	f002 faaf 	bl	8002e4e <HAL_NVIC_EnableIRQ>
  /* TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2076      	movs	r0, #118	; 0x76
 80008f6:	f002 fa90 	bl	8002e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80008fa:	2076      	movs	r0, #118	; 0x76
 80008fc:	f002 faa7 	bl	8002e4e <HAL_NVIC_EnableIRQ>
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]
 800091a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <MX_ADC3_Init+0xbc>)
 800091e:	4a29      	ldr	r2, [pc, #164]	; (80009c4 <MX_ADC3_Init+0xc0>)
 8000920:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_ADC3_Init+0xbc>)
 8000924:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000928:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_ADC3_Init+0xbc>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000930:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <MX_ADC3_Init+0xbc>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000936:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_ADC3_Init+0xbc>)
 8000938:	2204      	movs	r2, #4
 800093a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <MX_ADC3_Init+0xbc>)
 800093e:	2200      	movs	r2, #0
 8000940:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_ADC3_Init+0xbc>)
 8000944:	2201      	movs	r2, #1
 8000946:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_ADC3_Init+0xbc>)
 800094a:	2201      	movs	r2, #1
 800094c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_ADC3_Init+0xbc>)
 8000950:	2200      	movs	r2, #0
 8000952:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_ADC3_Init+0xbc>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_ADC3_Init+0xbc>)
 800095c:	2200      	movs	r2, #0
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_ADC3_Init+0xbc>)
 8000962:	2203      	movs	r2, #3
 8000964:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_ADC3_Init+0xbc>)
 8000968:	2200      	movs	r2, #0
 800096a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_ADC3_Init+0xbc>)
 800096e:	2200      	movs	r2, #0
 8000970:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_ADC3_Init+0xbc>)
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_ADC3_Init+0xbc>)
 800097c:	f001 f9cc 	bl	8001d18 <HAL_ADC_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000986:	f000 fb81 	bl	800108c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_ADC3_Init+0xc4>)
 800098c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800098e:	2306      	movs	r3, #6
 8000990:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000996:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800099a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800099c:	2304      	movs	r3, #4
 800099e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_ADC3_Init+0xbc>)
 80009aa:	f001 fc37 	bl	800221c <HAL_ADC_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80009b4:	f000 fb6a 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	3720      	adds	r7, #32
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	24001b54 	.word	0x24001b54
 80009c4:	58026000 	.word	0x58026000
 80009c8:	cb840000 	.word	0xcb840000

080009cc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <MX_ETH_Init+0x90>)
 80009d2:	4a23      	ldr	r2, [pc, #140]	; (8000a60 <MX_ETH_Init+0x94>)
 80009d4:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_ETH_Init+0x90>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_ETH_Init+0x90>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	3301      	adds	r3, #1
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_ETH_Init+0x90>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	3302      	adds	r3, #2
 80009ee:	22e1      	movs	r2, #225	; 0xe1
 80009f0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_ETH_Init+0x90>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	3303      	adds	r3, #3
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_ETH_Init+0x90>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	3304      	adds	r3, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_ETH_Init+0x90>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	3305      	adds	r3, #5
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_ETH_Init+0x90>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_ETH_Init+0x90>)
 8000a18:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <MX_ETH_Init+0x98>)
 8000a1a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_ETH_Init+0x90>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <MX_ETH_Init+0x9c>)
 8000a20:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_ETH_Init+0x90>)
 8000a24:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a28:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_ETH_Init+0x90>)
 8000a2c:	f004 fb02 	bl	8005034 <HAL_ETH_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000a36:	f000 fb29 	bl	800108c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a3a:	2234      	movs	r2, #52	; 0x34
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <MX_ETH_Init+0xa0>)
 8000a40:	f013 fbcb 	bl	80141da <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_ETH_Init+0xa0>)
 8000a46:	2221      	movs	r2, #33	; 0x21
 8000a48:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_ETH_Init+0xa0>)
 8000a4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a50:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_ETH_Init+0xa0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	24002d68 	.word	0x24002d68
 8000a60:	40028000 	.word	0x40028000
 8000a64:	24000070 	.word	0x24000070
 8000a68:	24000010 	.word	0x24000010
 8000a6c:	24002dd8 	.word	0x24002dd8

08000a70 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a74:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000a76:	4a2f      	ldr	r2, [pc, #188]	; (8000b34 <MX_FDCAN1_Init+0xc4>)
 8000a78:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a8c:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a92:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000a98:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000a9a:	2205      	movs	r2, #5
 8000a9c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000aa6:	220d      	movs	r2, #13
 8000aa8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000ab2:	2205      	movs	r2, #5
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000abe:	220d      	movs	r2, #13
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000adc:	2220      	movs	r2, #32
 8000ade:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000aee:	2204      	movs	r2, #4
 8000af0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000af4:	2220      	movs	r2, #32
 8000af6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 8;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000b06:	2208      	movs	r2, #8
 8000b08:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 8;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_FDCAN1_Init+0xc0>)
 8000b1e:	f004 fe9f 	bl	8005860 <HAL_FDCAN_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b28:	f000 fab0 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	24002bf4 	.word	0x24002bf4
 8000b34:	4000a000 	.word	0x4000a000

08000b38 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_SDMMC1_SD_Init+0x38>)
 8000b3e:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <MX_SDMMC1_SD_Init+0x3c>)
 8000b40:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_SDMMC1_SD_Init+0x38>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_SDMMC1_SD_Init+0x38>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_SDMMC1_SD_Init+0x38>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_SDMMC1_SD_Init+0x38>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 6;
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <MX_SDMMC1_SD_Init+0x38>)
 8000b5c:	2206      	movs	r2, #6
 8000b5e:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <MX_SDMMC1_SD_Init+0x38>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	24000a1c 	.word	0x24000a1c
 8000b74:	52007000 	.word	0x52007000

08000b78 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_TIM17_Init+0x44>)
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <MX_TIM17_Init+0x48>)
 8000b80:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 12799;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_TIM17_Init+0x44>)
 8000b84:	f243 12ff 	movw	r2, #12799	; 0x31ff
 8000b88:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_TIM17_Init+0x44>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 25;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <MX_TIM17_Init+0x44>)
 8000b92:	2219      	movs	r2, #25
 8000b94:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_TIM17_Init+0x44>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <MX_TIM17_Init+0x44>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_TIM17_Init+0x44>)
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_TIM17_Init+0x44>)
 8000baa:	f00a fc59 	bl	800b460 <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000bb4:	f000 fa6a 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	24000a9c 	.word	0x24000a9c
 8000bc0:	40014800 	.word	0x40014800

08000bc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bca:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <MX_USART3_UART_Init+0x94>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c0c:	4811      	ldr	r0, [pc, #68]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000c0e:	f00a fea7 	bl	800b960 <HAL_UART_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c18:	f000 fa38 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000c20:	f00d fa0f 	bl	800e042 <HAL_UARTEx_SetTxFifoThreshold>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c2a:	f000 fa2f 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000c32:	f00d fa44 	bl	800e0be <HAL_UARTEx_SetRxFifoThreshold>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c3c:	f000 fa26 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_USART3_UART_Init+0x90>)
 8000c42:	f00d f9c5 	bl	800dfd0 <HAL_UARTEx_DisableFifoMode>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c4c:	f000 fa1e 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	24000588 	.word	0x24000588
 8000c58:	40004800 	.word	0x40004800

08000c5c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c64:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c68:	2209      	movs	r2, #9
 8000c6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c6e:	2202      	movs	r2, #2
 8000c70:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca4:	f006 f883 	bl	8006dae <HAL_PCD_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000cae:	f000 f9ed 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	24000614 	.word	0x24000614
 8000cbc:	40080000 	.word	0x40080000

08000cc0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <MX_DMA_Init+0x3c>)
 8000cc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <MX_DMA_Init+0x3c>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_DMA_Init+0x3c>)
 8000cd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	200b      	movs	r0, #11
 8000cea:	f002 f896 	bl	8002e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cee:	200b      	movs	r0, #11
 8000cf0:	f002 f8ad 	bl	8002e4e <HAL_NVIC_EnableIRQ>

}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	58024400 	.word	0x58024400

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b55      	ldr	r3, [pc, #340]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	4a53      	ldr	r2, [pc, #332]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d26:	4b51      	ldr	r3, [pc, #324]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d34:	4b4d      	ldr	r3, [pc, #308]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	4a4c      	ldr	r2, [pc, #304]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d44:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	4a44      	ldr	r2, [pc, #272]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d70:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d76:	4a3d      	ldr	r2, [pc, #244]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d80:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8e:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	4a35      	ldr	r2, [pc, #212]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9e:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dac:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	4a2e      	ldr	r2, [pc, #184]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <MX_GPIO_Init+0x16c>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000dd0:	4827      	ldr	r0, [pc, #156]	; (8000e70 <MX_GPIO_Init+0x170>)
 8000dd2:	f005 ffd3 	bl	8006d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2140      	movs	r1, #64	; 0x40
 8000dda:	4826      	ldr	r0, [pc, #152]	; (8000e74 <MX_GPIO_Init+0x174>)
 8000ddc:	f005 ffce 	bl	8006d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de6:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <MX_GPIO_Init+0x178>)
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4821      	ldr	r0, [pc, #132]	; (8000e7c <MX_GPIO_Init+0x17c>)
 8000df6:	f005 fdf9 	bl	80069ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000dfa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	4817      	ldr	r0, [pc, #92]	; (8000e70 <MX_GPIO_Init+0x170>)
 8000e14:	f005 fdea 	bl	80069ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e18:	2340      	movs	r3, #64	; 0x40
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4811      	ldr	r0, [pc, #68]	; (8000e74 <MX_GPIO_Init+0x174>)
 8000e30:	f005 fddc 	bl	80069ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4619      	mov	r1, r3
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <MX_GPIO_Init+0x174>)
 8000e48:	f005 fdd0 	bl	80069ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e50:	2300      	movs	r3, #0
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e54:	2302      	movs	r3, #2
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4807      	ldr	r0, [pc, #28]	; (8000e7c <MX_GPIO_Init+0x17c>)
 8000e60:	f005 fdc4 	bl	80069ec <HAL_GPIO_Init>

}
 8000e64:	bf00      	nop
 8000e66:	3730      	adds	r7, #48	; 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58020400 	.word	0x58020400
 8000e74:	58021800 	.word	0x58021800
 8000e78:	11110000 	.word	0x11110000
 8000e7c:	58020800 	.word	0x58020800

08000e80 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,rxData.Data8u) == HAL_OK){
 8000e8a:	4b4a      	ldr	r3, [pc, #296]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000e8c:	4a4a      	ldr	r2, [pc, #296]	; (8000fb8 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000e8e:	2140      	movs	r1, #64	; 0x40
 8000e90:	484a      	ldr	r0, [pc, #296]	; (8000fbc <HAL_FDCAN_RxFifo0Callback+0x13c>)
 8000e92:	f004 fef3 	bl	8005c7c <HAL_FDCAN_GetRxMessage>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f040 8087 	bne.w	8000fac <HAL_FDCAN_RxFifo0Callback+0x12c>
		if((RxHeader.Identifier>>5) == 0x00){
 8000e9e:	4b46      	ldr	r3, [pc, #280]	; (8000fb8 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d12d      	bne.n	8000f04 <HAL_FDCAN_RxFifo0Callback+0x84>
			Dati.ID = (uint8_t)RxHeader.Identifier;
 8000ea8:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000eb0:	771a      	strb	r2, [r3, #28]
			Dati.Timer = rxData.Data8u[0] | rxData.Data8u[1]<<8 | rxData.Data8u[2]<<16 | rxData.Data8u[3]<<24;
 8000eb2:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000eba:	785b      	ldrb	r3, [r3, #1]
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000eca:	78db      	ldrb	r3, [r3, #3]
 8000ecc:	061b      	lsls	r3, r3, #24
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000ed4:	619a      	str	r2, [r3, #24]
			Dati.Gir_x = rxData.Data8u[4] | rxData.Data8u[5]<<8;
 8000ed6:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000ed8:	791b      	ldrb	r3, [r3, #4]
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000ede:	795b      	ldrb	r3, [r3, #5]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000eea:	80da      	strh	r2, [r3, #6]
			Dati.Gir_y = rxData.Data8u[6] | rxData.Data8u[7]<<8;
 8000eec:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000eee:	799b      	ldrb	r3, [r3, #6]
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000ef4:	79db      	ldrb	r3, [r3, #7]
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f00:	811a      	strh	r2, [r3, #8]
		else{
			Dati.ID = (uint8_t)RxHeader.Identifier & 0x1F;
			Dati.Pres = rxData.Data8u[0] | rxData.Data8u[1]<<8 | rxData.Data8u[2]<<16 | rxData.Data8u[3]<<24;
		}
	}
}
 8000f02:	e053      	b.n	8000fac <HAL_FDCAN_RxFifo0Callback+0x12c>
		else if((RxHeader.Identifier>>5) == 0x01){
 8000f04:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	095b      	lsrs	r3, r3, #5
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d134      	bne.n	8000f78 <HAL_FDCAN_RxFifo0Callback+0xf8>
			Dati.ID = (uint8_t)RxHeader.Identifier & 0x1F;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f003 031f 	and.w	r3, r3, #31
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f1c:	771a      	strb	r2, [r3, #28]
			Dati.Acc_x = rxData.Data8u[0] | rxData.Data8u[1]<<8;
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f26:	785b      	ldrb	r3, [r3, #1]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f32:	801a      	strh	r2, [r3, #0]
			Dati.Acc_y = rxData.Data8u[2] | rxData.Data8u[3]<<8;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f36:	789b      	ldrb	r3, [r3, #2]
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f3c:	78db      	ldrb	r3, [r3, #3]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f48:	805a      	strh	r2, [r3, #2]
			Dati.Acc_z = rxData.Data8u[4] | rxData.Data8u[5]<<8;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f4c:	791b      	ldrb	r3, [r3, #4]
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f52:	795b      	ldrb	r3, [r3, #5]
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f5e:	809a      	strh	r2, [r3, #4]
			Dati.T_b = rxData.Data8u[6] | rxData.Data8u[7]<<8;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f62:	799b      	ldrb	r3, [r3, #6]
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f68:	79db      	ldrb	r3, [r3, #7]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f74:	81da      	strh	r2, [r3, #14]
}
 8000f76:	e019      	b.n	8000fac <HAL_FDCAN_RxFifo0Callback+0x12c>
			Dati.ID = (uint8_t)RxHeader.Identifier & 0x1F;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	f003 031f 	and.w	r3, r3, #31
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f86:	771a      	strb	r2, [r3, #28]
			Dati.Pres = rxData.Data8u[0] | rxData.Data8u[1]<<8 | rxData.Data8u[2]<<16 | rxData.Data8u[3]<<24;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	431a      	orrs	r2, r3
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f98:	789b      	ldrb	r3, [r3, #2]
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000fa0:	78db      	ldrb	r3, [r3, #3]
 8000fa2:	061b      	lsls	r3, r3, #24
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000faa:	611a      	str	r2, [r3, #16]
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	24000580 	.word	0x24000580
 8000fb8:	24002d40 	.word	0x24002d40
 8000fbc:	24002bf4 	.word	0x24002bf4
 8000fc0:	24002c94 	.word	0x24002c94

08000fc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af06      	add	r7, sp, #24
 8000fca:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17){ //check if the interrupt comes from TIM17
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a24      	ldr	r2, [pc, #144]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d141      	bne.n	800105a <HAL_TIM_PeriodElapsedCallback+0x96>
    	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8000fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fda:	4823      	ldr	r0, [pc, #140]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000fdc:	f005 feb6 	bl	8006d4c <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d113      	bne.n	800100e <HAL_TIM_PeriodElapsedCallback+0x4a>
    		HAL_TIM_Base_Stop_IT(&htim17);
 8000fe6:	4821      	ldr	r0, [pc, #132]	; (800106c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000fe8:	f00a fa90 	bl	800b50c <HAL_TIM_Base_Stop_IT>
    		HAL_FDCAN_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 8000fec:	2101      	movs	r1, #1
 8000fee:	4820      	ldr	r0, [pc, #128]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ff0:	f004 fffe 	bl	8005ff0 <HAL_FDCAN_DeactivateNotification>
    		res = f_close(&SDFile);
 8000ff4:	481f      	ldr	r0, [pc, #124]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ff6:	f012 fcdc 	bl	80139b2 <f_close>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001000:	701a      	strb	r2, [r3, #0]
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	481d      	ldr	r0, [pc, #116]	; (800107c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001008:	f005 feb8 	bl	8006d7c <HAL_GPIO_WritePin>
    	}
    	else{
    		f_printf(&SDFile,"%d,%d,%d,%d,%d,%d,%d,%d\n",Dati.Timer,Dati.ID,Dati.Acc_x,Dati.Acc_y,Dati.Acc_z,Dati.Gir_x,Dati.Gir_y,analogDmaData[0]);
    	}
    }
}
 800100c:	e025      	b.n	800105a <HAL_TIM_PeriodElapsedCallback+0x96>
    		f_printf(&SDFile,"%d,%d,%d,%d,%d,%d,%d,%d\n",Dati.Timer,Dati.ID,Dati.Acc_x,Dati.Acc_y,Dati.Acc_z,Dati.Gir_x,Dati.Gir_y,analogDmaData[0]);
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001010:	699a      	ldr	r2, [r3, #24]
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001014:	7f1b      	ldrb	r3, [r3, #28]
 8001016:	469c      	mov	ip, r3
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800101a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101e:	4619      	mov	r1, r3
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001022:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001026:	4618      	mov	r0, r3
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800102a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800102e:	461c      	mov	r4, r3
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001032:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001036:	461d      	mov	r5, r3
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800103a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800103e:	461e      	mov	r6, r3
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	9305      	str	r3, [sp, #20]
 8001046:	9604      	str	r6, [sp, #16]
 8001048:	9503      	str	r5, [sp, #12]
 800104a:	9402      	str	r4, [sp, #8]
 800104c:	9001      	str	r0, [sp, #4]
 800104e:	9100      	str	r1, [sp, #0]
 8001050:	4663      	mov	r3, ip
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001054:	4807      	ldr	r0, [pc, #28]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001056:	f012 fd4f 	bl	8013af8 <f_printf>
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001062:	bf00      	nop
 8001064:	40014800 	.word	0x40014800
 8001068:	58020800 	.word	0x58020800
 800106c:	24000a9c 	.word	0x24000a9c
 8001070:	24002bf4 	.word	0x24002bf4
 8001074:	24002e18 	.word	0x24002e18
 8001078:	24002d18 	.word	0x24002d18
 800107c:	58020400 	.word	0x58020400
 8001080:	24002c94 	.word	0x24002c94
 8001084:	24002cd8 	.word	0x24002cd8
 8001088:	08014248 	.word	0x08014248

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_MspInit+0x30>)
 80010a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010a8:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_MspInit+0x30>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_MspInit+0x30>)
 80010b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	58024400 	.word	0x58024400

080010d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC3)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a22      	ldr	r2, [pc, #136]	; (8001168 <HAL_ADC_MspInit+0x98>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d13e      	bne.n	8001160 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <HAL_ADC_MspInit+0x9c>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e8:	4a20      	ldr	r2, [pc, #128]	; (800116c <HAL_ADC_MspInit+0x9c>)
 80010ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_ADC_MspInit+0x9c>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
  
    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_ADC_MspInit+0xa0>)
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <HAL_ADC_MspInit+0xa4>)
 8001104:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_ADC_MspInit+0xa0>)
 8001108:	2273      	movs	r2, #115	; 0x73
 800110a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_ADC_MspInit+0xa0>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_ADC_MspInit+0xa0>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_ADC_MspInit+0xa0>)
 800111a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_ADC_MspInit+0xa0>)
 8001122:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001126:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_ADC_MspInit+0xa0>)
 800112a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_ADC_MspInit+0xa0>)
 8001132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001136:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <HAL_ADC_MspInit+0xa0>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_ADC_MspInit+0xa0>)
 8001140:	2200      	movs	r2, #0
 8001142:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001144:	480a      	ldr	r0, [pc, #40]	; (8001170 <HAL_ADC_MspInit+0xa0>)
 8001146:	f001 fe9d 	bl	8002e84 <HAL_DMA_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_ADC_MspInit+0x84>
    {
      Error_Handler();
 8001150:	f7ff ff9c 	bl	800108c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a06      	ldr	r2, [pc, #24]	; (8001170 <HAL_ADC_MspInit+0xa0>)
 8001158:	64da      	str	r2, [r3, #76]	; 0x4c
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <HAL_ADC_MspInit+0xa0>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	58026000 	.word	0x58026000
 800116c:	58024400 	.word	0x58024400
 8001170:	24000adc 	.word	0x24000adc
 8001174:	40020010 	.word	0x40020010

08001178 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a59      	ldr	r2, [pc, #356]	; (80012fc <HAL_ETH_MspInit+0x184>)
 8001196:	4293      	cmp	r3, r2
 8001198:	f040 80ab 	bne.w	80012f2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800119c:	4b58      	ldr	r3, [pc, #352]	; (8001300 <HAL_ETH_MspInit+0x188>)
 800119e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011a2:	4a57      	ldr	r2, [pc, #348]	; (8001300 <HAL_ETH_MspInit+0x188>)
 80011a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011ac:	4b54      	ldr	r3, [pc, #336]	; (8001300 <HAL_ETH_MspInit+0x188>)
 80011ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011b6:	623b      	str	r3, [r7, #32]
 80011b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80011ba:	4b51      	ldr	r3, [pc, #324]	; (8001300 <HAL_ETH_MspInit+0x188>)
 80011bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011c0:	4a4f      	ldr	r2, [pc, #316]	; (8001300 <HAL_ETH_MspInit+0x188>)
 80011c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011ca:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <HAL_ETH_MspInit+0x188>)
 80011cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80011d8:	4b49      	ldr	r3, [pc, #292]	; (8001300 <HAL_ETH_MspInit+0x188>)
 80011da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011de:	4a48      	ldr	r2, [pc, #288]	; (8001300 <HAL_ETH_MspInit+0x188>)
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011e8:	4b45      	ldr	r3, [pc, #276]	; (8001300 <HAL_ETH_MspInit+0x188>)
 80011ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b42      	ldr	r3, [pc, #264]	; (8001300 <HAL_ETH_MspInit+0x188>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	4a40      	ldr	r2, [pc, #256]	; (8001300 <HAL_ETH_MspInit+0x188>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001206:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <HAL_ETH_MspInit+0x188>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <HAL_ETH_MspInit+0x188>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121a:	4a39      	ldr	r2, [pc, #228]	; (8001300 <HAL_ETH_MspInit+0x188>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <HAL_ETH_MspInit+0x188>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <HAL_ETH_MspInit+0x188>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	4a31      	ldr	r2, [pc, #196]	; (8001300 <HAL_ETH_MspInit+0x188>)
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001242:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <HAL_ETH_MspInit+0x188>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <HAL_ETH_MspInit+0x188>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	4a2a      	ldr	r2, [pc, #168]	; (8001300 <HAL_ETH_MspInit+0x188>)
 8001258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <HAL_ETH_MspInit+0x188>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800126e:	2332      	movs	r3, #50	; 0x32
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127e:	230b      	movs	r3, #11
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	481e      	ldr	r0, [pc, #120]	; (8001304 <HAL_ETH_MspInit+0x18c>)
 800128a:	f005 fbaf 	bl	80069ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800128e:	2386      	movs	r3, #134	; 0x86
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129e:	230b      	movs	r3, #11
 80012a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a6:	4619      	mov	r1, r3
 80012a8:	4817      	ldr	r0, [pc, #92]	; (8001308 <HAL_ETH_MspInit+0x190>)
 80012aa:	f005 fb9f 	bl	80069ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c0:	230b      	movs	r3, #11
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	4619      	mov	r1, r3
 80012ca:	4810      	ldr	r0, [pc, #64]	; (800130c <HAL_ETH_MspInit+0x194>)
 80012cc:	f005 fb8e 	bl	80069ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e2:	230b      	movs	r3, #11
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4808      	ldr	r0, [pc, #32]	; (8001310 <HAL_ETH_MspInit+0x198>)
 80012ee:	f005 fb7d 	bl	80069ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3738      	adds	r7, #56	; 0x38
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40028000 	.word	0x40028000
 8001300:	58024400 	.word	0x58024400
 8001304:	58020800 	.word	0x58020800
 8001308:	58020000 	.word	0x58020000
 800130c:	58020400 	.word	0x58020400
 8001310:	58021800 	.word	0x58021800

08001314 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1a      	ldr	r2, [pc, #104]	; (800139c <HAL_FDCAN_MspInit+0x88>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12d      	bne.n	8001392 <HAL_FDCAN_MspInit+0x7e>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_FDCAN_MspInit+0x8c>)
 8001338:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800133c:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <HAL_FDCAN_MspInit+0x8c>)
 800133e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001342:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_FDCAN_MspInit+0x8c>)
 8001348:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_FDCAN_MspInit+0x8c>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <HAL_FDCAN_MspInit+0x8c>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_FDCAN_MspInit+0x8c>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001372:	2303      	movs	r3, #3
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001382:	2309      	movs	r3, #9
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <HAL_FDCAN_MspInit+0x90>)
 800138e:	f005 fb2d 	bl	80069ec <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	4000a000 	.word	0x4000a000
 80013a0:	58024400 	.word	0x58024400
 80013a4:	58020c00 	.word	0x58020c00

080013a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a2a      	ldr	r2, [pc, #168]	; (8001470 <HAL_SD_MspInit+0xc8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d14d      	bne.n	8001466 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013ca:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <HAL_SD_MspInit+0xcc>)
 80013cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013d0:	4a28      	ldr	r2, [pc, #160]	; (8001474 <HAL_SD_MspInit+0xcc>)
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80013da:	4b26      	ldr	r3, [pc, #152]	; (8001474 <HAL_SD_MspInit+0xcc>)
 80013dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <HAL_SD_MspInit+0xcc>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ee:	4a21      	ldr	r2, [pc, #132]	; (8001474 <HAL_SD_MspInit+0xcc>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_SD_MspInit+0xcc>)
 80013fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_SD_MspInit+0xcc>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	4a19      	ldr	r2, [pc, #100]	; (8001474 <HAL_SD_MspInit+0xcc>)
 800140e:	f043 0308 	orr.w	r3, r3, #8
 8001412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_SD_MspInit+0xcc>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001424:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001436:	230c      	movs	r3, #12
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <HAL_SD_MspInit+0xd0>)
 8001442:	f005 fad3 	bl	80069ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001446:	2304      	movs	r3, #4
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001456:	230c      	movs	r3, #12
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4806      	ldr	r0, [pc, #24]	; (800147c <HAL_SD_MspInit+0xd4>)
 8001462:	f005 fac3 	bl	80069ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	; 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	52007000 	.word	0x52007000
 8001474:	58024400 	.word	0x58024400
 8001478:	58020800 	.word	0x58020800
 800147c:	58020c00 	.word	0x58020c00

08001480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_TIM_Base_MspInit+0x3c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d10e      	bne.n	80014b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_TIM_Base_MspInit+0x40>)
 8001494:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001498:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <HAL_TIM_Base_MspInit+0x40>)
 800149a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_TIM_Base_MspInit+0x40>)
 80014a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40014800 	.word	0x40014800
 80014c0:	58024400 	.word	0x58024400

080014c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1a      	ldr	r2, [pc, #104]	; (800154c <HAL_UART_MspInit+0x88>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d12e      	bne.n	8001544 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_UART_MspInit+0x8c>)
 80014e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ec:	4a18      	ldr	r2, [pc, #96]	; (8001550 <HAL_UART_MspInit+0x8c>)
 80014ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_UART_MspInit+0x8c>)
 80014f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_UART_MspInit+0x8c>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150a:	4a11      	ldr	r2, [pc, #68]	; (8001550 <HAL_UART_MspInit+0x8c>)
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_UART_MspInit+0x8c>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001522:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001534:	2307      	movs	r3, #7
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_UART_MspInit+0x90>)
 8001540:	f005 fa54 	bl	80069ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40004800 	.word	0x40004800
 8001550:	58024400 	.word	0x58024400
 8001554:	58020c00 	.word	0x58020c00

08001558 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <HAL_PCD_MspInit+0xa4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d13b      	bne.n	80015f2 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_PCD_MspInit+0xa8>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	4a1f      	ldr	r2, [pc, #124]	; (8001600 <HAL_PCD_MspInit+0xa8>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_PCD_MspInit+0xa8>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001598:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80015aa:	230a      	movs	r3, #10
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4813      	ldr	r0, [pc, #76]	; (8001604 <HAL_PCD_MspInit+0xac>)
 80015b6:	f005 fa19 	bl	80069ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <HAL_PCD_MspInit+0xac>)
 80015d0:	f005 fa0c 	bl	80069ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_PCD_MspInit+0xa8>)
 80015d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_PCD_MspInit+0xa8>)
 80015dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_PCD_MspInit+0xa8>)
 80015e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40080000 	.word	0x40080000
 8001600:	58024400 	.word	0x58024400
 8001604:	58020000 	.word	0x58020000

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <MemManage_Handler+0x4>

08001622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler+0x4>

0800162e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165c:	f000 f91e 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <DMA1_Stream0_IRQHandler+0x10>)
 800166a:	f002 f9d1 	bl	8003a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	24000adc 	.word	0x24000adc

08001678 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <FDCAN1_IT0_IRQHandler+0x10>)
 800167e:	f004 fd25 	bl	80060cc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	24002bf4 	.word	0x24002bf4

0800168c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <TIM17_IRQHandler+0x10>)
 8001692:	f009 ff66 	bl	800b562 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	24000a9c 	.word	0x24000a9c

080016a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016a4:	4b29      	ldr	r3, [pc, #164]	; (800174c <SystemInit+0xac>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	4a28      	ldr	r2, [pc, #160]	; (800174c <SystemInit+0xac>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <SystemInit+0xb0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a25      	ldr	r2, [pc, #148]	; (8001750 <SystemInit+0xb0>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <SystemInit+0xb0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <SystemInit+0xb0>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4921      	ldr	r1, [pc, #132]	; (8001750 <SystemInit+0xb0>)
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <SystemInit+0xb4>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <SystemInit+0xb0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <SystemInit+0xb0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <SystemInit+0xb0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <SystemInit+0xb0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <SystemInit+0xb0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <SystemInit+0xb0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <SystemInit+0xb0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <SystemInit+0xb0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <SystemInit+0xb0>)
 8001704:	2200      	movs	r2, #0
 8001706:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <SystemInit+0xb0>)
 800170a:	2200      	movs	r2, #0
 800170c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <SystemInit+0xb0>)
 8001710:	2200      	movs	r2, #0
 8001712:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <SystemInit+0xb0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <SystemInit+0xb0>)
 800171a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <SystemInit+0xb0>)
 8001722:	2200      	movs	r2, #0
 8001724:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <SystemInit+0xb8>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <SystemInit+0xbc>)
 800172c:	4013      	ands	r3, r2
 800172e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001732:	d202      	bcs.n	800173a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <SystemInit+0xc0>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <SystemInit+0xac>)
 800173c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001740:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00
 8001750:	58024400 	.word	0x58024400
 8001754:	eaf6ed7f 	.word	0xeaf6ed7f
 8001758:	5c001000 	.word	0x5c001000
 800175c:	ffff0000 	.word	0xffff0000
 8001760:	51008108 	.word	0x51008108

08001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800179c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001768:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800176a:	e003      	b.n	8001774 <LoopCopyDataInit>

0800176c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800176e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001770:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001772:	3104      	adds	r1, #4

08001774 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001778:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800177a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800177c:	d3f6      	bcc.n	800176c <CopyDataInit>
  ldr  r2, =_sbss
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001780:	e002      	b.n	8001788 <LoopFillZerobss>

08001782 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001782:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001784:	f842 3b04 	str.w	r3, [r2], #4

08001788 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800178a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800178c:	d3f9      	bcc.n	8001782 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800178e:	f7ff ff87 	bl	80016a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001792:	f012 fcf3 	bl	801417c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001796:	f7fe ff1f 	bl	80005d8 <main>
  bx  lr    
 800179a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80017a0:	080147a0 	.word	0x080147a0
  ldr  r0, =_sdata
 80017a4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80017a8:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80017ac:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 80017b0:	24004eac 	.word	0x24004eac

080017b4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC3_IRQHandler>
	...

080017b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017be:	2003      	movs	r0, #3
 80017c0:	f001 fb20 	bl	8002e04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017c4:	f006 fa14 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 80017c8:	4601      	mov	r1, r0
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_Init+0x68>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	4a13      	ldr	r2, [pc, #76]	; (8001824 <HAL_Init+0x6c>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	fa21 f303 	lsr.w	r3, r1, r3
 80017e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_Init+0x68>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <HAL_Init+0x6c>)
 80017ec:	5cd3      	ldrb	r3, [r2, r3]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <HAL_Init+0x70>)
 80017fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017fc:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_Init+0x74>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001802:	2000      	movs	r0, #0
 8001804:	f000 f814 	bl	8001830 <HAL_InitTick>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e002      	b.n	8001818 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001812:	f7ff fc43 	bl	800109c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	58024400 	.word	0x58024400
 8001824:	08014314 	.word	0x08014314
 8001828:	24000004 	.word	0x24000004
 800182c:	24000000 	.word	0x24000000

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_InitTick+0x60>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e021      	b.n	8001888 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001844:	4b13      	ldr	r3, [pc, #76]	; (8001894 <HAL_InitTick+0x64>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_InitTick+0x60>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fb05 	bl	8002e6a <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f001 facf 	bl	8002e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_InitTick+0x68>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2400000c 	.word	0x2400000c
 8001894:	24000000 	.word	0x24000000
 8001898:	24000008 	.word	0x24000008

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	2400000c 	.word	0x2400000c
 80018c0:	24002e0c 	.word	0x24002e0c

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	24002e0c 	.word	0x24002e0c

080018dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff ffee 	bl	80018c4 <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f4:	d005      	beq.n	8001902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_Delay+0x40>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001902:	bf00      	nop
 8001904:	f7ff ffde 	bl	80018c4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8f7      	bhi.n	8001904 <HAL_Delay+0x28>
  {
  }
}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	2400000c 	.word	0x2400000c

08001920 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_GetREVID+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0c1b      	lsrs	r3, r3, #16
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	5c001000 	.word	0x5c001000

08001938 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001948:	4904      	ldr	r1, [pc, #16]	; (800195c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	58000400 	.word	0x58000400

08001960 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	609a      	str	r2, [r3, #8]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	609a      	str	r2, [r3, #8]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019c8:	b490      	push	{r4, r7}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3360      	adds	r3, #96	; 0x60
 80019da:	461a      	mov	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	430b      	orrs	r3, r1
 80019f4:	4313      	orrs	r3, r2
 80019f6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc90      	pop	{r4, r7}
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b085      	sub	sp, #20
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	431a      	orrs	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	611a      	str	r2, [r3, #16]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a34:	b490      	push	{r4, r7}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3360      	adds	r3, #96	; 0x60
 8001a44:	461a      	mov	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	6023      	str	r3, [r4, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc90      	pop	{r4, r7}
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a8a:	b490      	push	{r4, r7}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3330      	adds	r3, #48	; 0x30
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	4413      	add	r3, r2
 8001aa8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001aaa:	6822      	ldr	r2, [r4, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	211f      	movs	r1, #31
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	401a      	ands	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	f003 011f 	and.w	r1, r3, #31
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc90      	pop	{r4, r7}
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60da      	str	r2, [r3, #12]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b02:	b490      	push	{r4, r7}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3314      	adds	r3, #20
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	0e5b      	lsrs	r3, r3, #25
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	4413      	add	r3, r2
 8001b20:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001b22:	6822      	ldr	r2, [r4, #0]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	0d1b      	lsrs	r3, r3, #20
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	2107      	movs	r1, #7
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	401a      	ands	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	0d1b      	lsrs	r3, r3, #20
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc90      	pop	{r4, r7}
 8001b50:	4770      	bx	lr
	...

08001b54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	401a      	ands	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f003 0318 	and.w	r3, r3, #24
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b78:	40d9      	lsrs	r1, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b82:	431a      	orrs	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	000fffff 	.word	0x000fffff

08001b9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6093      	str	r3, [r2, #8]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	5fffffc0 	.word	0x5fffffc0

08001bdc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bf0:	d101      	bne.n	8001bf6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	6fffffc0 	.word	0x6fffffc0

08001c2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c40:	d101      	bne.n	8001c46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <LL_ADC_Enable+0x24>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	7fffffc0 	.word	0x7fffffc0

08001c7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <LL_ADC_IsEnabled+0x18>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <LL_ADC_IsEnabled+0x1a>
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <LL_ADC_REG_StartConversion+0x24>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	f043 0204 	orr.w	r2, r3, #4
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	7fffffc0 	.word	0x7fffffc0

08001ccc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d101      	bne.n	8001ce4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d101      	bne.n	8001d0a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e18e      	b.n	8002050 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff f9c5 	bl	80010d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff3f 	bl	8001bdc <LL_ADC_IsDeepPowerDownEnabled>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d004      	beq.n	8001d6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff25 	bl	8001bb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff5a 	bl	8001c2c <LL_ADC_IsInternalRegulatorEnabled>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d113      	bne.n	8001da6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff3e 	bl	8001c04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d88:	4b9a      	ldr	r3, [pc, #616]	; (8001ff4 <HAL_ADC_Init+0x2dc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	099b      	lsrs	r3, r3, #6
 8001d8e:	4a9a      	ldr	r2, [pc, #616]	; (8001ff8 <HAL_ADC_Init+0x2e0>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	099b      	lsrs	r3, r3, #6
 8001d96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d98:	e002      	b.n	8001da0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f9      	bne.n	8001d9a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff3e 	bl	8001c2c <LL_ADC_IsInternalRegulatorEnabled>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10d      	bne.n	8001dd2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	f043 0210 	orr.w	r2, r3, #16
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	f043 0201 	orr.w	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff78 	bl	8001ccc <LL_ADC_REG_IsConversionOngoing>
 8001ddc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 8129 	bne.w	800203e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 8125 	bne.w	800203e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dfc:	f043 0202 	orr.w	r2, r3, #2
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff37 	bl	8001c7c <LL_ADC_IsEnabled>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d136      	bne.n	8001e82 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a78      	ldr	r2, [pc, #480]	; (8001ffc <HAL_ADC_Init+0x2e4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d004      	beq.n	8001e28 <HAL_ADC_Init+0x110>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a77      	ldr	r2, [pc, #476]	; (8002000 <HAL_ADC_Init+0x2e8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d10e      	bne.n	8001e46 <HAL_ADC_Init+0x12e>
 8001e28:	4874      	ldr	r0, [pc, #464]	; (8001ffc <HAL_ADC_Init+0x2e4>)
 8001e2a:	f7ff ff27 	bl	8001c7c <LL_ADC_IsEnabled>
 8001e2e:	4604      	mov	r4, r0
 8001e30:	4873      	ldr	r0, [pc, #460]	; (8002000 <HAL_ADC_Init+0x2e8>)
 8001e32:	f7ff ff23 	bl	8001c7c <LL_ADC_IsEnabled>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4323      	orrs	r3, r4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf0c      	ite	eq
 8001e3e:	2301      	moveq	r3, #1
 8001e40:	2300      	movne	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	e008      	b.n	8001e58 <HAL_ADC_Init+0x140>
 8001e46:	486f      	ldr	r0, [pc, #444]	; (8002004 <HAL_ADC_Init+0x2ec>)
 8001e48:	f7ff ff18 	bl	8001c7c <LL_ADC_IsEnabled>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d012      	beq.n	8001e82 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a66      	ldr	r2, [pc, #408]	; (8001ffc <HAL_ADC_Init+0x2e4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d004      	beq.n	8001e70 <HAL_ADC_Init+0x158>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a65      	ldr	r2, [pc, #404]	; (8002000 <HAL_ADC_Init+0x2e8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d101      	bne.n	8001e74 <HAL_ADC_Init+0x15c>
 8001e70:	4a65      	ldr	r2, [pc, #404]	; (8002008 <HAL_ADC_Init+0x2f0>)
 8001e72:	e000      	b.n	8001e76 <HAL_ADC_Init+0x15e>
 8001e74:	4a65      	ldr	r2, [pc, #404]	; (800200c <HAL_ADC_Init+0x2f4>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	f7ff fd6f 	bl	8001960 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e82:	f7ff fd4d 	bl	8001920 <HAL_GetREVID>
 8001e86:	4602      	mov	r2, r0
 8001e88:	f241 0303 	movw	r3, #4099	; 0x1003
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d914      	bls.n	8001eba <HAL_ADC_Init+0x1a2>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b10      	cmp	r3, #16
 8001e96:	d110      	bne.n	8001eba <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7d5b      	ldrb	r3, [r3, #21]
 8001e9c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ea2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ea8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7f1b      	ldrb	r3, [r3, #28]
 8001eae:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8001eb0:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eb2:	f043 030c 	orr.w	r3, r3, #12
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	e00d      	b.n	8001ed6 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7d5b      	ldrb	r3, [r3, #21]
 8001ebe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ec4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001eca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7f1b      	ldrb	r3, [r3, #28]
 8001ed0:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7f1b      	ldrb	r3, [r3, #28]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d106      	bne.n	8001eec <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	045b      	lsls	r3, r3, #17
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d009      	beq.n	8001f08 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	4b40      	ldr	r3, [pc, #256]	; (8002010 <HAL_ADC_Init+0x2f8>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	69b9      	ldr	r1, [r7, #24]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fed3 	bl	8001ccc <LL_ADC_REG_IsConversionOngoing>
 8001f26:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fee0 	bl	8001cf2 <LL_ADC_INJ_IsConversionOngoing>
 8001f32:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d14a      	bne.n	8001fd0 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d147      	bne.n	8001fd0 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7d1b      	ldrb	r3, [r3, #20]
 8001f44:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <HAL_ADC_Init+0x2fc>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	69b9      	ldr	r1, [r7, #24]
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d11b      	bne.n	8001fa4 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	4b27      	ldr	r3, [pc, #156]	; (8002018 <HAL_ADC_Init+0x300>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f80:	3a01      	subs	r2, #1
 8001f82:	0411      	lsls	r1, r2, #16
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f88:	4311      	orrs	r1, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f94:	430a      	orrs	r2, r1
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	611a      	str	r2, [r3, #16]
 8001fa2:	e007      	b.n	8001fb4 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fd52 	bl	8002a74 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d121      	bne.n	800201c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f023 010f 	bic.w	r1, r3, #15
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	1e5a      	subs	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff0:	e01c      	b.n	800202c <HAL_ADC_Init+0x314>
 8001ff2:	bf00      	nop
 8001ff4:	24000000 	.word	0x24000000
 8001ff8:	053e2d63 	.word	0x053e2d63
 8001ffc:	40022000 	.word	0x40022000
 8002000:	40022100 	.word	0x40022100
 8002004:	58026000 	.word	0x58026000
 8002008:	40022300 	.word	0x40022300
 800200c:	58026300 	.word	0x58026300
 8002010:	fff0c003 	.word	0xfff0c003
 8002014:	ffffbffc 	.word	0xffffbffc
 8002018:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 020f 	bic.w	r2, r2, #15
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	f023 0303 	bic.w	r3, r3, #3
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	; 0x54
 800203c:	e007      	b.n	800204e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f043 0210 	orr.w	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800204e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3724      	adds	r7, #36	; 0x24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}

08002058 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a55      	ldr	r2, [pc, #340]	; (80021c0 <HAL_ADC_Start_DMA+0x168>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_ADC_Start_DMA+0x20>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a54      	ldr	r2, [pc, #336]	; (80021c4 <HAL_ADC_Start_DMA+0x16c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <HAL_ADC_Start_DMA+0x24>
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_ADC_Start_DMA+0x170>)
 800207a:	e000      	b.n	800207e <HAL_ADC_Start_DMA+0x26>
 800207c:	4b53      	ldr	r3, [pc, #332]	; (80021cc <HAL_ADC_Start_DMA+0x174>)
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fd8c 	bl	8001b9c <LL_ADC_GetMultimode>
 8002084:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fe1e 	bl	8001ccc <LL_ADC_REG_IsConversionOngoing>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 808c 	bne.w	80021b0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_Start_DMA+0x4e>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e087      	b.n	80021b6 <HAL_ADC_Start_DMA+0x15e>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d002      	beq.n	80020c0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b09      	cmp	r3, #9
 80020be:	d170      	bne.n	80021a2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 fbbf 	bl	8002844 <ADC_Enable>
 80020c6:	4603      	mov	r3, r0
 80020c8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d163      	bne.n	8002198 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020d4:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <HAL_ADC_Start_DMA+0x178>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a37      	ldr	r2, [pc, #220]	; (80021c4 <HAL_ADC_Start_DMA+0x16c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d002      	beq.n	80020f0 <HAL_ADC_Start_DMA+0x98>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	e000      	b.n	80020f2 <HAL_ADC_Start_DMA+0x9a>
 80020f0:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <HAL_ADC_Start_DMA+0x168>)
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d002      	beq.n	8002100 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002104:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d006      	beq.n	8002126 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	f023 0206 	bic.w	r2, r3, #6
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	659a      	str	r2, [r3, #88]	; 0x58
 8002124:	e002      	b.n	800212c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002130:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <HAL_ADC_Start_DMA+0x17c>)
 8002132:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002138:	4a27      	ldr	r2, [pc, #156]	; (80021d8 <HAL_ADC_Start_DMA+0x180>)
 800213a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002140:	4a26      	ldr	r2, [pc, #152]	; (80021dc <HAL_ADC_Start_DMA+0x184>)
 8002142:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	221c      	movs	r2, #28
 800214a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0210 	orr.w	r2, r2, #16
 8002162:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	4619      	mov	r1, r3
 800216e:	4610      	mov	r0, r2
 8002170:	f7ff fcb4 	bl	8001adc <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3340      	adds	r3, #64	; 0x40
 800217e:	4619      	mov	r1, r3
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f001 f9da 	bl	800353c <HAL_DMA_Start_IT>
 8002188:	4603      	mov	r3, r0
 800218a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fd87 	bl	8001ca4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002196:	e00d      	b.n	80021b4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80021a0:	e008      	b.n	80021b4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80021ae:	e001      	b.n	80021b4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
 80021b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40022100 	.word	0x40022100
 80021c8:	40022300 	.word	0x40022300
 80021cc:	58026300 	.word	0x58026300
 80021d0:	fffff0fe 	.word	0xfffff0fe
 80021d4:	0800294d 	.word	0x0800294d
 80021d8:	08002a25 	.word	0x08002a25
 80021dc:	08002a41 	.word	0x08002a41

080021e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b099      	sub	sp, #100	; 0x64
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a99      	ldr	r2, [pc, #612]	; (800249c <HAL_ADC_ConfigChannel+0x280>)
 8002236:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x2a>
 8002242:	2302      	movs	r3, #2
 8002244:	e2e6      	b.n	8002814 <HAL_ADC_ConfigChannel+0x5f8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fd3a 	bl	8001ccc <LL_ADC_REG_IsConversionOngoing>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 82cb 	bne.w	80027f6 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002268:	2b00      	cmp	r3, #0
 800226a:	d108      	bne.n	800227e <HAL_ADC_ConfigChannel+0x62>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0e9b      	lsrs	r3, r3, #26
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2201      	movs	r2, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	e00f      	b.n	800229e <HAL_ADC_ConfigChannel+0x82>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800228c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	2201      	movs	r2, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	69d1      	ldr	r1, [r2, #28]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	f7ff fbe6 	bl	8001a8a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fd02 	bl	8001ccc <LL_ADC_REG_IsConversionOngoing>
 80022c8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fd0f 	bl	8001cf2 <LL_ADC_INJ_IsConversionOngoing>
 80022d4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f040 80b3 	bne.w	8002444 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f040 80af 	bne.w	8002444 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6819      	ldr	r1, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f7ff fc05 	bl	8001b02 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022f8:	4b69      	ldr	r3, [pc, #420]	; (80024a0 <HAL_ADC_ConfigChannel+0x284>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002304:	d10b      	bne.n	800231e <HAL_ADC_ConfigChannel+0x102>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	e01d      	b.n	800235a <HAL_ADC_ConfigChannel+0x13e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x128>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	e00a      	b.n	800235a <HAL_ADC_ConfigChannel+0x13e>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b04      	cmp	r3, #4
 8002362:	d027      	beq.n	80023b4 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6919      	ldr	r1, [r3, #16]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002372:	f7ff fb29 	bl	80019c8 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6919      	ldr	r1, [r3, #16]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	7e5b      	ldrb	r3, [r3, #25]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d102      	bne.n	800238c <HAL_ADC_ConfigChannel+0x170>
 8002386:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800238a:	e000      	b.n	800238e <HAL_ADC_ConfigChannel+0x172>
 800238c:	2300      	movs	r3, #0
 800238e:	461a      	mov	r2, r3
 8002390:	f7ff fb50 	bl	8001a34 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6919      	ldr	r1, [r3, #16]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	7e1b      	ldrb	r3, [r3, #24]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d102      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x18e>
 80023a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023a8:	e000      	b.n	80023ac <HAL_ADC_ConfigChannel+0x190>
 80023aa:	2300      	movs	r3, #0
 80023ac:	461a      	mov	r2, r3
 80023ae:	f7ff fb28 	bl	8001a02 <LL_ADC_SetDataRightShift>
 80023b2:	e047      	b.n	8002444 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d107      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023d6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	069b      	lsls	r3, r3, #26
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d107      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023fa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002402:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	069b      	lsls	r3, r3, #26
 800240c:	429a      	cmp	r2, r3
 800240e:	d107      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800241e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002426:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	069b      	lsls	r3, r3, #26
 8002430:	429a      	cmp	r2, r3
 8002432:	d107      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002442:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fc17 	bl	8001c7c <LL_ADC_IsEnabled>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	f040 81d9 	bne.w	8002808 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	461a      	mov	r2, r3
 8002464:	f7ff fb76 	bl	8001b54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a0b      	ldr	r2, [pc, #44]	; (800249c <HAL_ADC_ConfigChannel+0x280>)
 800246e:	4293      	cmp	r3, r2
 8002470:	f040 8101 	bne.w	8002676 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10f      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x288>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	3301      	adds	r3, #1
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2b09      	cmp	r3, #9
 8002492:	bf94      	ite	ls
 8002494:	2301      	movls	r3, #1
 8002496:	2300      	movhi	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e016      	b.n	80024ca <HAL_ADC_ConfigChannel+0x2ae>
 800249c:	47ff0000 	.word	0x47ff0000
 80024a0:	5c001000 	.word	0x5c001000
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	3301      	adds	r3, #1
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	2b09      	cmp	r3, #9
 80024c2:	bf94      	ite	ls
 80024c4:	2301      	movls	r3, #1
 80024c6:	2300      	movhi	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d064      	beq.n	8002598 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d107      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x2ce>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	0e9b      	lsrs	r3, r3, #26
 80024e0:	3301      	adds	r3, #1
 80024e2:	069b      	lsls	r3, r3, #26
 80024e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024e8:	e00e      	b.n	8002508 <HAL_ADC_ConfigChannel+0x2ec>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3301      	adds	r3, #1
 8002502:	069b      	lsls	r3, r3, #26
 8002504:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x30c>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0e9b      	lsrs	r3, r3, #26
 800251a:	3301      	adds	r3, #1
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	e010      	b.n	800254a <HAL_ADC_ConfigChannel+0x32e>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3301      	adds	r3, #1
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	2101      	movs	r1, #1
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	ea42 0103 	orr.w	r1, r2, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x354>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	0e9b      	lsrs	r3, r3, #26
 8002560:	3301      	adds	r3, #1
 8002562:	f003 021f 	and.w	r2, r3, #31
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	051b      	lsls	r3, r3, #20
 800256e:	e011      	b.n	8002594 <HAL_ADC_ConfigChannel+0x378>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	3301      	adds	r3, #1
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002594:	430b      	orrs	r3, r1
 8002596:	e069      	b.n	800266c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d107      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x398>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	3301      	adds	r3, #1
 80025ac:	069b      	lsls	r3, r3, #26
 80025ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b2:	e00e      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x3b6>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	61fb      	str	r3, [r7, #28]
  return result;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	069b      	lsls	r3, r3, #26
 80025ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x3d6>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	0e9b      	lsrs	r3, r3, #26
 80025e4:	3301      	adds	r3, #1
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	e010      	b.n	8002614 <HAL_ADC_ConfigChannel+0x3f8>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	617b      	str	r3, [r7, #20]
  return result;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3301      	adds	r3, #1
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	ea42 0103 	orr.w	r1, r2, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10d      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x424>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0e9b      	lsrs	r3, r3, #26
 800262a:	3301      	adds	r3, #1
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	3b1e      	subs	r3, #30
 8002638:	051b      	lsls	r3, r3, #20
 800263a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800263e:	e014      	b.n	800266a <HAL_ADC_ConfigChannel+0x44e>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	60fb      	str	r3, [r7, #12]
  return result;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	3b1e      	subs	r3, #30
 8002664:	051b      	lsls	r3, r3, #20
 8002666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800266a:	430b      	orrs	r3, r1
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	6892      	ldr	r2, [r2, #8]
 8002670:	4619      	mov	r1, r3
 8002672:	f7ff fa46 	bl	8001b02 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f280 80c4 	bge.w	8002808 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a65      	ldr	r2, [pc, #404]	; (800281c <HAL_ADC_ConfigChannel+0x600>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d004      	beq.n	8002694 <HAL_ADC_ConfigChannel+0x478>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a64      	ldr	r2, [pc, #400]	; (8002820 <HAL_ADC_ConfigChannel+0x604>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x47c>
 8002694:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_ADC_ConfigChannel+0x608>)
 8002696:	e000      	b.n	800269a <HAL_ADC_ConfigChannel+0x47e>
 8002698:	4b63      	ldr	r3, [pc, #396]	; (8002828 <HAL_ADC_ConfigChannel+0x60c>)
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff f986 	bl	80019ac <LL_ADC_GetCommonPathInternalCh>
 80026a0:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a5d      	ldr	r2, [pc, #372]	; (800281c <HAL_ADC_ConfigChannel+0x600>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d004      	beq.n	80026b6 <HAL_ADC_ConfigChannel+0x49a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a5b      	ldr	r2, [pc, #364]	; (8002820 <HAL_ADC_ConfigChannel+0x604>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10e      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x4b8>
 80026b6:	4859      	ldr	r0, [pc, #356]	; (800281c <HAL_ADC_ConfigChannel+0x600>)
 80026b8:	f7ff fae0 	bl	8001c7c <LL_ADC_IsEnabled>
 80026bc:	4604      	mov	r4, r0
 80026be:	4858      	ldr	r0, [pc, #352]	; (8002820 <HAL_ADC_ConfigChannel+0x604>)
 80026c0:	f7ff fadc 	bl	8001c7c <LL_ADC_IsEnabled>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4323      	orrs	r3, r4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e008      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x4ca>
 80026d4:	4855      	ldr	r0, [pc, #340]	; (800282c <HAL_ADC_ConfigChannel+0x610>)
 80026d6:	f7ff fad1 	bl	8001c7c <LL_ADC_IsEnabled>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d07b      	beq.n	80027e2 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a50      	ldr	r2, [pc, #320]	; (8002830 <HAL_ADC_ConfigChannel+0x614>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d12e      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x536>
 80026f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d129      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a4a      	ldr	r2, [pc, #296]	; (800282c <HAL_ADC_ConfigChannel+0x610>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d17f      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a43      	ldr	r2, [pc, #268]	; (800281c <HAL_ADC_ConfigChannel+0x600>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_ADC_ConfigChannel+0x500>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a42      	ldr	r2, [pc, #264]	; (8002820 <HAL_ADC_ConfigChannel+0x604>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x504>
 800271c:	4a41      	ldr	r2, [pc, #260]	; (8002824 <HAL_ADC_ConfigChannel+0x608>)
 800271e:	e000      	b.n	8002722 <HAL_ADC_ConfigChannel+0x506>
 8002720:	4a41      	ldr	r2, [pc, #260]	; (8002828 <HAL_ADC_ConfigChannel+0x60c>)
 8002722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002724:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f7ff f92b 	bl	8001986 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002730:	4b40      	ldr	r3, [pc, #256]	; (8002834 <HAL_ADC_ConfigChannel+0x618>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	4a40      	ldr	r2, [pc, #256]	; (8002838 <HAL_ADC_ConfigChannel+0x61c>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	099b      	lsrs	r3, r3, #6
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002742:	e002      	b.n	800274a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	3b01      	subs	r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f9      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002750:	e05a      	b.n	8002808 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a39      	ldr	r2, [pc, #228]	; (800283c <HAL_ADC_ConfigChannel+0x620>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d11e      	bne.n	800279a <HAL_ADC_ConfigChannel+0x57e>
 800275c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d119      	bne.n	800279a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a30      	ldr	r2, [pc, #192]	; (800282c <HAL_ADC_ConfigChannel+0x610>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d14b      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a29      	ldr	r2, [pc, #164]	; (800281c <HAL_ADC_ConfigChannel+0x600>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d004      	beq.n	8002784 <HAL_ADC_ConfigChannel+0x568>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a28      	ldr	r2, [pc, #160]	; (8002820 <HAL_ADC_ConfigChannel+0x604>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d101      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x56c>
 8002784:	4a27      	ldr	r2, [pc, #156]	; (8002824 <HAL_ADC_ConfigChannel+0x608>)
 8002786:	e000      	b.n	800278a <HAL_ADC_ConfigChannel+0x56e>
 8002788:	4a27      	ldr	r2, [pc, #156]	; (8002828 <HAL_ADC_ConfigChannel+0x60c>)
 800278a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f7ff f8f7 	bl	8001986 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002798:	e036      	b.n	8002808 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a28      	ldr	r2, [pc, #160]	; (8002840 <HAL_ADC_ConfigChannel+0x624>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d131      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x5ec>
 80027a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d12c      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1e      	ldr	r2, [pc, #120]	; (800282c <HAL_ADC_ConfigChannel+0x610>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d127      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a17      	ldr	r2, [pc, #92]	; (800281c <HAL_ADC_ConfigChannel+0x600>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d004      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x5b0>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a16      	ldr	r2, [pc, #88]	; (8002820 <HAL_ADC_ConfigChannel+0x604>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x5b4>
 80027cc:	4a15      	ldr	r2, [pc, #84]	; (8002824 <HAL_ADC_ConfigChannel+0x608>)
 80027ce:	e000      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x5b6>
 80027d0:	4a15      	ldr	r2, [pc, #84]	; (8002828 <HAL_ADC_ConfigChannel+0x60c>)
 80027d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027d8:	4619      	mov	r1, r3
 80027da:	4610      	mov	r0, r2
 80027dc:	f7ff f8d3 	bl	8001986 <LL_ADC_SetCommonPathInternalCh>
 80027e0:	e012      	b.n	8002808 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	f043 0220 	orr.w	r2, r3, #32
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80027f4:	e008      	b.n	8002808 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f043 0220 	orr.w	r2, r3, #32
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002810:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002814:	4618      	mov	r0, r3
 8002816:	3764      	adds	r7, #100	; 0x64
 8002818:	46bd      	mov	sp, r7
 800281a:	bd90      	pop	{r4, r7, pc}
 800281c:	40022000 	.word	0x40022000
 8002820:	40022100 	.word	0x40022100
 8002824:	40022300 	.word	0x40022300
 8002828:	58026300 	.word	0x58026300
 800282c:	58026000 	.word	0x58026000
 8002830:	cb840000 	.word	0xcb840000
 8002834:	24000000 	.word	0x24000000
 8002838:	053e2d63 	.word	0x053e2d63
 800283c:	c7520000 	.word	0xc7520000
 8002840:	cfb80000 	.word	0xcfb80000

08002844 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fa13 	bl	8001c7c <LL_ADC_IsEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d167      	bne.n	800292c <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	4b35      	ldr	r3, [pc, #212]	; (8002938 <ADC_Enable+0xf4>)
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00d      	beq.n	8002886 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f043 0210 	orr.w	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e053      	b.n	800292e <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f9e2 	bl	8001c54 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002890:	f7ff f818 	bl	80018c4 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a28      	ldr	r2, [pc, #160]	; (800293c <ADC_Enable+0xf8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d004      	beq.n	80028aa <ADC_Enable+0x66>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a26      	ldr	r2, [pc, #152]	; (8002940 <ADC_Enable+0xfc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <ADC_Enable+0x6a>
 80028aa:	4b26      	ldr	r3, [pc, #152]	; (8002944 <ADC_Enable+0x100>)
 80028ac:	e000      	b.n	80028b0 <ADC_Enable+0x6c>
 80028ae:	4b26      	ldr	r3, [pc, #152]	; (8002948 <ADC_Enable+0x104>)
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff f973 	bl	8001b9c <LL_ADC_GetMultimode>
 80028b6:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a20      	ldr	r2, [pc, #128]	; (8002940 <ADC_Enable+0xfc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d002      	beq.n	80028c8 <ADC_Enable+0x84>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	e000      	b.n	80028ca <ADC_Enable+0x86>
 80028c8:	4b1c      	ldr	r3, [pc, #112]	; (800293c <ADC_Enable+0xf8>)
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d025      	beq.n	800291e <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d129      	bne.n	800292c <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028d8:	e021      	b.n	800291e <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff f9cc 	bl	8001c7c <LL_ADC_IsEnabled>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d104      	bne.n	80028f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff f9b0 	bl	8001c54 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028f4:	f7fe ffe6 	bl	80018c4 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d90d      	bls.n	800291e <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f043 0210 	orr.w	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e007      	b.n	800292e <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d1d6      	bne.n	80028da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	8000003f 	.word	0x8000003f
 800293c:	40022000 	.word	0x40022000
 8002940:	40022100 	.word	0x40022100
 8002944:	40022300 	.word	0x40022300
 8002948:	58026300 	.word	0x58026300

0800294c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002962:	2b00      	cmp	r3, #0
 8002964:	d14b      	bne.n	80029fe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d021      	beq.n	80029c4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff f86d 	bl	8001a64 <LL_ADC_REG_IsTriggerSourceSWStart>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d032      	beq.n	80029f6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d12b      	bne.n	80029f6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d11f      	bne.n	80029f6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ba:	f043 0201 	orr.w	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54
 80029c2:	e018      	b.n	80029f6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d111      	bne.n	80029f6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f7ff fbf2 	bl	80021e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029fc:	e00e      	b.n	8002a1c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f7ff fbfc 	bl	8002208 <HAL_ADC_ErrorCallback>
}
 8002a10:	e004      	b.n	8002a1c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f7ff fbde 	bl	80021f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5e:	f043 0204 	orr.w	r2, r3, #4
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f7ff fbce 	bl	8002208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a70      	ldr	r2, [pc, #448]	; (8002c44 <ADC_ConfigureBoostMode+0x1d0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <ADC_ConfigureBoostMode+0x1c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6f      	ldr	r2, [pc, #444]	; (8002c48 <ADC_ConfigureBoostMode+0x1d4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d109      	bne.n	8002aa4 <ADC_ConfigureBoostMode+0x30>
 8002a90:	4b6e      	ldr	r3, [pc, #440]	; (8002c4c <ADC_ConfigureBoostMode+0x1d8>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e008      	b.n	8002ab6 <ADC_ConfigureBoostMode+0x42>
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	; (8002c50 <ADC_ConfigureBoostMode+0x1dc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01a      	beq.n	8002af0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002aba:	f005 fa0b 	bl	8007ed4 <HAL_RCC_GetHCLKFreq>
 8002abe:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ac8:	d006      	beq.n	8002ad8 <ADC_ConfigureBoostMode+0x64>
 8002aca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ace:	d00b      	beq.n	8002ae8 <ADC_ConfigureBoostMode+0x74>
 8002ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad4:	d000      	beq.n	8002ad8 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002ad6:	e05d      	b.n	8002b94 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	0c1b      	lsrs	r3, r3, #16
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae4:	60fb      	str	r3, [r7, #12]
        break;
 8002ae6:	e055      	b.n	8002b94 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	60fb      	str	r3, [r7, #12]
        break;
 8002aee:	e051      	b.n	8002b94 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002af0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002af4:	f006 f928 	bl	8008d48 <HAL_RCCEx_GetPeriphCLKFreq>
 8002af8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b02:	d02a      	beq.n	8002b5a <ADC_ConfigureBoostMode+0xe6>
 8002b04:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b08:	d813      	bhi.n	8002b32 <ADC_ConfigureBoostMode+0xbe>
 8002b0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b0e:	d024      	beq.n	8002b5a <ADC_ConfigureBoostMode+0xe6>
 8002b10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b14:	d806      	bhi.n	8002b24 <ADC_ConfigureBoostMode+0xb0>
 8002b16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b1a:	d01e      	beq.n	8002b5a <ADC_ConfigureBoostMode+0xe6>
 8002b1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b20:	d01b      	beq.n	8002b5a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002b22:	e037      	b.n	8002b94 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002b24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b28:	d017      	beq.n	8002b5a <ADC_ConfigureBoostMode+0xe6>
 8002b2a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b2e:	d014      	beq.n	8002b5a <ADC_ConfigureBoostMode+0xe6>
        break;
 8002b30:	e030      	b.n	8002b94 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002b32:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b36:	d021      	beq.n	8002b7c <ADC_ConfigureBoostMode+0x108>
 8002b38:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b3c:	d806      	bhi.n	8002b4c <ADC_ConfigureBoostMode+0xd8>
 8002b3e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b42:	d013      	beq.n	8002b6c <ADC_ConfigureBoostMode+0xf8>
 8002b44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b48:	d014      	beq.n	8002b74 <ADC_ConfigureBoostMode+0x100>
        break;
 8002b4a:	e023      	b.n	8002b94 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002b4c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b50:	d018      	beq.n	8002b84 <ADC_ConfigureBoostMode+0x110>
 8002b52:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b56:	d019      	beq.n	8002b8c <ADC_ConfigureBoostMode+0x118>
        break;
 8002b58:	e01c      	b.n	8002b94 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	0c9b      	lsrs	r3, r3, #18
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	60fb      	str	r3, [r7, #12]
        break;
 8002b6a:	e013      	b.n	8002b94 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	60fb      	str	r3, [r7, #12]
      break;
 8002b72:	e00f      	b.n	8002b94 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	60fb      	str	r3, [r7, #12]
        break;
 8002b7a:	e00b      	b.n	8002b94 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	60fb      	str	r3, [r7, #12]
        break;
 8002b82:	e007      	b.n	8002b94 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	09db      	lsrs	r3, r3, #7
 8002b88:	60fb      	str	r3, [r7, #12]
        break;
 8002b8a:	e003      	b.n	8002b94 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	60fb      	str	r3, [r7, #12]
        break;
 8002b92:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002b94:	f7fe fec4 	bl	8001920 <HAL_GetREVID>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d815      	bhi.n	8002bce <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4a2b      	ldr	r2, [pc, #172]	; (8002c54 <ADC_ConfigureBoostMode+0x1e0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d908      	bls.n	8002bbc <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002bba:	e03e      	b.n	8002c3a <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bca:	609a      	str	r2, [r3, #8]
}
 8002bcc:	e035      	b.n	8002c3a <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4a20      	ldr	r2, [pc, #128]	; (8002c58 <ADC_ConfigureBoostMode+0x1e4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d808      	bhi.n	8002bee <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002bea:	609a      	str	r2, [r3, #8]
}
 8002bec:	e025      	b.n	8002c3a <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <ADC_ConfigureBoostMode+0x1e8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d80a      	bhi.n	8002c0c <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c08:	609a      	str	r2, [r3, #8]
}
 8002c0a:	e016      	b.n	8002c3a <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <ADC_ConfigureBoostMode+0x1ec>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d80a      	bhi.n	8002c2a <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c26:	609a      	str	r2, [r3, #8]
}
 8002c28:	e007      	b.n	8002c3a <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c38:	609a      	str	r2, [r3, #8]
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40022000 	.word	0x40022000
 8002c48:	40022100 	.word	0x40022100
 8002c4c:	40022300 	.word	0x40022300
 8002c50:	58026300 	.word	0x58026300
 8002c54:	01312d00 	.word	0x01312d00
 8002c58:	005f5e10 	.word	0x005f5e10
 8002c5c:	00bebc20 	.word	0x00bebc20
 8002c60:	017d7840 	.word	0x017d7840

08002c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x40>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c80:	4013      	ands	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x40>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00
 8002ca8:	05fa0000 	.word	0x05fa0000

08002cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	f003 0307 	and.w	r3, r3, #7
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	db0b      	blt.n	8002cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4907      	ldr	r1, [pc, #28]	; (8002d00 <__NVIC_EnableIRQ+0x38>)
 8002ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2001      	movs	r0, #1
 8002cea:	fa00 f202 	lsl.w	r2, r0, r2
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000e100 	.word	0xe000e100

08002d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	6039      	str	r1, [r7, #0]
 8002d0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	db0a      	blt.n	8002d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	490c      	ldr	r1, [pc, #48]	; (8002d50 <__NVIC_SetPriority+0x4c>)
 8002d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d22:	0112      	lsls	r2, r2, #4
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	440b      	add	r3, r1
 8002d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d2c:	e00a      	b.n	8002d44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	4908      	ldr	r1, [pc, #32]	; (8002d54 <__NVIC_SetPriority+0x50>)
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	3b04      	subs	r3, #4
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	440b      	add	r3, r1
 8002d42:	761a      	strb	r2, [r3, #24]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000e100 	.word	0xe000e100
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f1c3 0307 	rsb	r3, r3, #7
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	bf28      	it	cs
 8002d76:	2304      	movcs	r3, #4
 8002d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d902      	bls.n	8002d88 <NVIC_EncodePriority+0x30>
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3b03      	subs	r3, #3
 8002d86:	e000      	b.n	8002d8a <NVIC_EncodePriority+0x32>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	43d9      	mvns	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	4313      	orrs	r3, r2
         );
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd0:	d301      	bcc.n	8002dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e00f      	b.n	8002df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <SysTick_Config+0x40>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dde:	210f      	movs	r1, #15
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	f7ff ff8e 	bl	8002d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <SysTick_Config+0x40>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <SysTick_Config+0x40>)
 8002df0:	2207      	movs	r2, #7
 8002df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	e000e010 	.word	0xe000e010

08002e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff29 	bl	8002c64 <__NVIC_SetPriorityGrouping>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e28:	f7ff ff40 	bl	8002cac <__NVIC_GetPriorityGrouping>
 8002e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7ff ff90 	bl	8002d58 <NVIC_EncodePriority>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff5f 	bl	8002d04 <__NVIC_SetPriority>
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff33 	bl	8002cc8 <__NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ffa4 	bl	8002dc0 <SysTick_Config>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7fe fd1a 	bl	80018c4 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e316      	b.n	80034ca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a66      	ldr	r2, [pc, #408]	; (800303c <HAL_DMA_Init+0x1b8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d04a      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a65      	ldr	r2, [pc, #404]	; (8003040 <HAL_DMA_Init+0x1bc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d045      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a63      	ldr	r2, [pc, #396]	; (8003044 <HAL_DMA_Init+0x1c0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d040      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a62      	ldr	r2, [pc, #392]	; (8003048 <HAL_DMA_Init+0x1c4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d03b      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a60      	ldr	r2, [pc, #384]	; (800304c <HAL_DMA_Init+0x1c8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d036      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a5f      	ldr	r2, [pc, #380]	; (8003050 <HAL_DMA_Init+0x1cc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d031      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a5d      	ldr	r2, [pc, #372]	; (8003054 <HAL_DMA_Init+0x1d0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d02c      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a5c      	ldr	r2, [pc, #368]	; (8003058 <HAL_DMA_Init+0x1d4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d027      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a5a      	ldr	r2, [pc, #360]	; (800305c <HAL_DMA_Init+0x1d8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d022      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a59      	ldr	r2, [pc, #356]	; (8003060 <HAL_DMA_Init+0x1dc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d01d      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a57      	ldr	r2, [pc, #348]	; (8003064 <HAL_DMA_Init+0x1e0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d018      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a56      	ldr	r2, [pc, #344]	; (8003068 <HAL_DMA_Init+0x1e4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d013      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a54      	ldr	r2, [pc, #336]	; (800306c <HAL_DMA_Init+0x1e8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00e      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a53      	ldr	r2, [pc, #332]	; (8003070 <HAL_DMA_Init+0x1ec>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d009      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a51      	ldr	r2, [pc, #324]	; (8003074 <HAL_DMA_Init+0x1f0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d004      	beq.n	8002f3c <HAL_DMA_Init+0xb8>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a50      	ldr	r2, [pc, #320]	; (8003078 <HAL_DMA_Init+0x1f4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d101      	bne.n	8002f40 <HAL_DMA_Init+0xbc>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <HAL_DMA_Init+0xbe>
 8002f40:	2300      	movs	r3, #0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 813b 	beq.w	80031be <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a37      	ldr	r2, [pc, #220]	; (800303c <HAL_DMA_Init+0x1b8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d04a      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a36      	ldr	r2, [pc, #216]	; (8003040 <HAL_DMA_Init+0x1bc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d045      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a34      	ldr	r2, [pc, #208]	; (8003044 <HAL_DMA_Init+0x1c0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d040      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a33      	ldr	r2, [pc, #204]	; (8003048 <HAL_DMA_Init+0x1c4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d03b      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a31      	ldr	r2, [pc, #196]	; (800304c <HAL_DMA_Init+0x1c8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d036      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a30      	ldr	r2, [pc, #192]	; (8003050 <HAL_DMA_Init+0x1cc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d031      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a2e      	ldr	r2, [pc, #184]	; (8003054 <HAL_DMA_Init+0x1d0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d02c      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a2d      	ldr	r2, [pc, #180]	; (8003058 <HAL_DMA_Init+0x1d4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d027      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a2b      	ldr	r2, [pc, #172]	; (800305c <HAL_DMA_Init+0x1d8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d022      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a2a      	ldr	r2, [pc, #168]	; (8003060 <HAL_DMA_Init+0x1dc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d01d      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a28      	ldr	r2, [pc, #160]	; (8003064 <HAL_DMA_Init+0x1e0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d018      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a27      	ldr	r2, [pc, #156]	; (8003068 <HAL_DMA_Init+0x1e4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d013      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a25      	ldr	r2, [pc, #148]	; (800306c <HAL_DMA_Init+0x1e8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a24      	ldr	r2, [pc, #144]	; (8003070 <HAL_DMA_Init+0x1ec>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a22      	ldr	r2, [pc, #136]	; (8003074 <HAL_DMA_Init+0x1f0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_DMA_Init+0x174>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a21      	ldr	r2, [pc, #132]	; (8003078 <HAL_DMA_Init+0x1f4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d108      	bne.n	800300a <HAL_DMA_Init+0x186>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e007      	b.n	800301a <HAL_DMA_Init+0x196>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800301a:	e02f      	b.n	800307c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800301c:	f7fe fc52 	bl	80018c4 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b05      	cmp	r3, #5
 8003028:	d928      	bls.n	800307c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2203      	movs	r2, #3
 8003034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e246      	b.n	80034ca <HAL_DMA_Init+0x646>
 800303c:	40020010 	.word	0x40020010
 8003040:	40020028 	.word	0x40020028
 8003044:	40020040 	.word	0x40020040
 8003048:	40020058 	.word	0x40020058
 800304c:	40020070 	.word	0x40020070
 8003050:	40020088 	.word	0x40020088
 8003054:	400200a0 	.word	0x400200a0
 8003058:	400200b8 	.word	0x400200b8
 800305c:	40020410 	.word	0x40020410
 8003060:	40020428 	.word	0x40020428
 8003064:	40020440 	.word	0x40020440
 8003068:	40020458 	.word	0x40020458
 800306c:	40020470 	.word	0x40020470
 8003070:	40020488 	.word	0x40020488
 8003074:	400204a0 	.word	0x400204a0
 8003078:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1c8      	bne.n	800301c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4b83      	ldr	r3, [pc, #524]	; (80032a4 <HAL_DMA_Init+0x420>)
 8003096:	4013      	ands	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80030a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d107      	bne.n	80030e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	4313      	orrs	r3, r2
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80030e0:	4b71      	ldr	r3, [pc, #452]	; (80032a8 <HAL_DMA_Init+0x424>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b71      	ldr	r3, [pc, #452]	; (80032ac <HAL_DMA_Init+0x428>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ec:	d328      	bcc.n	8003140 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b28      	cmp	r3, #40	; 0x28
 80030f4:	d903      	bls.n	80030fe <HAL_DMA_Init+0x27a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b2e      	cmp	r3, #46	; 0x2e
 80030fc:	d917      	bls.n	800312e <HAL_DMA_Init+0x2aa>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b3e      	cmp	r3, #62	; 0x3e
 8003104:	d903      	bls.n	800310e <HAL_DMA_Init+0x28a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b42      	cmp	r3, #66	; 0x42
 800310c:	d90f      	bls.n	800312e <HAL_DMA_Init+0x2aa>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b46      	cmp	r3, #70	; 0x46
 8003114:	d903      	bls.n	800311e <HAL_DMA_Init+0x29a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b48      	cmp	r3, #72	; 0x48
 800311c:	d907      	bls.n	800312e <HAL_DMA_Init+0x2aa>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b4e      	cmp	r3, #78	; 0x4e
 8003124:	d905      	bls.n	8003132 <HAL_DMA_Init+0x2ae>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b52      	cmp	r3, #82	; 0x52
 800312c:	d801      	bhi.n	8003132 <HAL_DMA_Init+0x2ae>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <HAL_DMA_Init+0x2b0>
 8003132:	2300      	movs	r3, #0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f023 0307 	bic.w	r3, r3, #7
 8003156:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2b04      	cmp	r3, #4
 8003168:	d117      	bne.n	800319a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00e      	beq.n	800319a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f001 fdcf 	bl	8004d20 <DMA_CheckFifoParam>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2240      	movs	r2, #64	; 0x40
 800318c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e197      	b.n	80034ca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f001 fd0a 	bl	8004bbc <DMA_CalcBaseAndBitshift>
 80031a8:	4603      	mov	r3, r0
 80031aa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	223f      	movs	r2, #63	; 0x3f
 80031b6:	409a      	lsls	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	e0cd      	b.n	800335a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a3b      	ldr	r2, [pc, #236]	; (80032b0 <HAL_DMA_Init+0x42c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d022      	beq.n	800320e <HAL_DMA_Init+0x38a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a39      	ldr	r2, [pc, #228]	; (80032b4 <HAL_DMA_Init+0x430>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01d      	beq.n	800320e <HAL_DMA_Init+0x38a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a38      	ldr	r2, [pc, #224]	; (80032b8 <HAL_DMA_Init+0x434>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d018      	beq.n	800320e <HAL_DMA_Init+0x38a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a36      	ldr	r2, [pc, #216]	; (80032bc <HAL_DMA_Init+0x438>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_DMA_Init+0x38a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <HAL_DMA_Init+0x43c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00e      	beq.n	800320e <HAL_DMA_Init+0x38a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a33      	ldr	r2, [pc, #204]	; (80032c4 <HAL_DMA_Init+0x440>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_DMA_Init+0x38a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a32      	ldr	r2, [pc, #200]	; (80032c8 <HAL_DMA_Init+0x444>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_DMA_Init+0x38a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a30      	ldr	r2, [pc, #192]	; (80032cc <HAL_DMA_Init+0x448>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d101      	bne.n	8003212 <HAL_DMA_Init+0x38e>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_DMA_Init+0x390>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8097 	beq.w	8003348 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <HAL_DMA_Init+0x42c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d021      	beq.n	8003268 <HAL_DMA_Init+0x3e4>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a22      	ldr	r2, [pc, #136]	; (80032b4 <HAL_DMA_Init+0x430>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01c      	beq.n	8003268 <HAL_DMA_Init+0x3e4>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a21      	ldr	r2, [pc, #132]	; (80032b8 <HAL_DMA_Init+0x434>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d017      	beq.n	8003268 <HAL_DMA_Init+0x3e4>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <HAL_DMA_Init+0x438>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d012      	beq.n	8003268 <HAL_DMA_Init+0x3e4>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_DMA_Init+0x43c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00d      	beq.n	8003268 <HAL_DMA_Init+0x3e4>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <HAL_DMA_Init+0x440>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d008      	beq.n	8003268 <HAL_DMA_Init+0x3e4>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_DMA_Init+0x444>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <HAL_DMA_Init+0x3e4>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a19      	ldr	r2, [pc, #100]	; (80032cc <HAL_DMA_Init+0x448>)
 8003266:	4293      	cmp	r3, r2
 8003268:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2202      	movs	r2, #2
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_DMA_Init+0x44c>)
 8003286:	4013      	ands	r3, r2
 8003288:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d020      	beq.n	80032d4 <HAL_DMA_Init+0x450>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b80      	cmp	r3, #128	; 0x80
 8003298:	d102      	bne.n	80032a0 <HAL_DMA_Init+0x41c>
 800329a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800329e:	e01a      	b.n	80032d6 <HAL_DMA_Init+0x452>
 80032a0:	2300      	movs	r3, #0
 80032a2:	e018      	b.n	80032d6 <HAL_DMA_Init+0x452>
 80032a4:	fe10803f 	.word	0xfe10803f
 80032a8:	5c001000 	.word	0x5c001000
 80032ac:	ffff0000 	.word	0xffff0000
 80032b0:	58025408 	.word	0x58025408
 80032b4:	5802541c 	.word	0x5802541c
 80032b8:	58025430 	.word	0x58025430
 80032bc:	58025444 	.word	0x58025444
 80032c0:	58025458 	.word	0x58025458
 80032c4:	5802546c 	.word	0x5802546c
 80032c8:	58025480 	.word	0x58025480
 80032cc:	58025494 	.word	0x58025494
 80032d0:	fffe000f 	.word	0xfffe000f
 80032d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68d2      	ldr	r2, [r2, #12]
 80032da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80032e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003304:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	4b6e      	ldr	r3, [pc, #440]	; (80034d4 <HAL_DMA_Init+0x650>)
 800331c:	4413      	add	r3, r2
 800331e:	4a6e      	ldr	r2, [pc, #440]	; (80034d8 <HAL_DMA_Init+0x654>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	009a      	lsls	r2, r3, #2
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f001 fc45 	bl	8004bbc <DMA_CalcBaseAndBitshift>
 8003332:	4603      	mov	r3, r0
 8003334:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	2201      	movs	r2, #1
 8003340:	409a      	lsls	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	e008      	b.n	800335a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2240      	movs	r2, #64	; 0x40
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2203      	movs	r2, #3
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0b7      	b.n	80034ca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a5f      	ldr	r2, [pc, #380]	; (80034dc <HAL_DMA_Init+0x658>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d072      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a5d      	ldr	r2, [pc, #372]	; (80034e0 <HAL_DMA_Init+0x65c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d06d      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a5c      	ldr	r2, [pc, #368]	; (80034e4 <HAL_DMA_Init+0x660>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d068      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a5a      	ldr	r2, [pc, #360]	; (80034e8 <HAL_DMA_Init+0x664>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d063      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a59      	ldr	r2, [pc, #356]	; (80034ec <HAL_DMA_Init+0x668>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d05e      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a57      	ldr	r2, [pc, #348]	; (80034f0 <HAL_DMA_Init+0x66c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d059      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a56      	ldr	r2, [pc, #344]	; (80034f4 <HAL_DMA_Init+0x670>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d054      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a54      	ldr	r2, [pc, #336]	; (80034f8 <HAL_DMA_Init+0x674>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d04f      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a53      	ldr	r2, [pc, #332]	; (80034fc <HAL_DMA_Init+0x678>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d04a      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a51      	ldr	r2, [pc, #324]	; (8003500 <HAL_DMA_Init+0x67c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d045      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a50      	ldr	r2, [pc, #320]	; (8003504 <HAL_DMA_Init+0x680>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d040      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a4e      	ldr	r2, [pc, #312]	; (8003508 <HAL_DMA_Init+0x684>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d03b      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a4d      	ldr	r2, [pc, #308]	; (800350c <HAL_DMA_Init+0x688>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d036      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a4b      	ldr	r2, [pc, #300]	; (8003510 <HAL_DMA_Init+0x68c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d031      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a4a      	ldr	r2, [pc, #296]	; (8003514 <HAL_DMA_Init+0x690>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d02c      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a48      	ldr	r2, [pc, #288]	; (8003518 <HAL_DMA_Init+0x694>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d027      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a47      	ldr	r2, [pc, #284]	; (800351c <HAL_DMA_Init+0x698>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d022      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a45      	ldr	r2, [pc, #276]	; (8003520 <HAL_DMA_Init+0x69c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01d      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a44      	ldr	r2, [pc, #272]	; (8003524 <HAL_DMA_Init+0x6a0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d018      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a42      	ldr	r2, [pc, #264]	; (8003528 <HAL_DMA_Init+0x6a4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a41      	ldr	r2, [pc, #260]	; (800352c <HAL_DMA_Init+0x6a8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00e      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a3f      	ldr	r2, [pc, #252]	; (8003530 <HAL_DMA_Init+0x6ac>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d009      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a3e      	ldr	r2, [pc, #248]	; (8003534 <HAL_DMA_Init+0x6b0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d004      	beq.n	800344a <HAL_DMA_Init+0x5c6>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a3c      	ldr	r2, [pc, #240]	; (8003538 <HAL_DMA_Init+0x6b4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d101      	bne.n	800344e <HAL_DMA_Init+0x5ca>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <HAL_DMA_Init+0x5cc>
 800344e:	2300      	movs	r3, #0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d032      	beq.n	80034ba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f001 fcdf 	bl	8004e18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b80      	cmp	r3, #128	; 0x80
 8003460:	d102      	bne.n	8003468 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800347c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d010      	beq.n	80034a8 <HAL_DMA_Init+0x624>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b08      	cmp	r3, #8
 800348c:	d80c      	bhi.n	80034a8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f001 fd5c 	bl	8004f4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	e008      	b.n	80034ba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	a7fdabf8 	.word	0xa7fdabf8
 80034d8:	cccccccd 	.word	0xcccccccd
 80034dc:	40020010 	.word	0x40020010
 80034e0:	40020028 	.word	0x40020028
 80034e4:	40020040 	.word	0x40020040
 80034e8:	40020058 	.word	0x40020058
 80034ec:	40020070 	.word	0x40020070
 80034f0:	40020088 	.word	0x40020088
 80034f4:	400200a0 	.word	0x400200a0
 80034f8:	400200b8 	.word	0x400200b8
 80034fc:	40020410 	.word	0x40020410
 8003500:	40020428 	.word	0x40020428
 8003504:	40020440 	.word	0x40020440
 8003508:	40020458 	.word	0x40020458
 800350c:	40020470 	.word	0x40020470
 8003510:	40020488 	.word	0x40020488
 8003514:	400204a0 	.word	0x400204a0
 8003518:	400204b8 	.word	0x400204b8
 800351c:	58025408 	.word	0x58025408
 8003520:	5802541c 	.word	0x5802541c
 8003524:	58025430 	.word	0x58025430
 8003528:	58025444 	.word	0x58025444
 800352c:	58025458 	.word	0x58025458
 8003530:	5802546c 	.word	0x5802546c
 8003534:	58025480 	.word	0x58025480
 8003538:	58025494 	.word	0x58025494

0800353c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e226      	b.n	80039a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_DMA_Start_IT+0x2a>
 8003562:	2302      	movs	r3, #2
 8003564:	e21f      	b.n	80039a6 <HAL_DMA_Start_IT+0x46a>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	f040 820a 	bne.w	8003990 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a68      	ldr	r2, [pc, #416]	; (8003730 <HAL_DMA_Start_IT+0x1f4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d04a      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a66      	ldr	r2, [pc, #408]	; (8003734 <HAL_DMA_Start_IT+0x1f8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d045      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a65      	ldr	r2, [pc, #404]	; (8003738 <HAL_DMA_Start_IT+0x1fc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d040      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a63      	ldr	r2, [pc, #396]	; (800373c <HAL_DMA_Start_IT+0x200>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d03b      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a62      	ldr	r2, [pc, #392]	; (8003740 <HAL_DMA_Start_IT+0x204>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d036      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a60      	ldr	r2, [pc, #384]	; (8003744 <HAL_DMA_Start_IT+0x208>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d031      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5f      	ldr	r2, [pc, #380]	; (8003748 <HAL_DMA_Start_IT+0x20c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d02c      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a5d      	ldr	r2, [pc, #372]	; (800374c <HAL_DMA_Start_IT+0x210>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d027      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a5c      	ldr	r2, [pc, #368]	; (8003750 <HAL_DMA_Start_IT+0x214>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d022      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a5a      	ldr	r2, [pc, #360]	; (8003754 <HAL_DMA_Start_IT+0x218>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01d      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a59      	ldr	r2, [pc, #356]	; (8003758 <HAL_DMA_Start_IT+0x21c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d018      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a57      	ldr	r2, [pc, #348]	; (800375c <HAL_DMA_Start_IT+0x220>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a56      	ldr	r2, [pc, #344]	; (8003760 <HAL_DMA_Start_IT+0x224>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00e      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a54      	ldr	r2, [pc, #336]	; (8003764 <HAL_DMA_Start_IT+0x228>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a53      	ldr	r2, [pc, #332]	; (8003768 <HAL_DMA_Start_IT+0x22c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_DMA_Start_IT+0xee>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a51      	ldr	r2, [pc, #324]	; (800376c <HAL_DMA_Start_IT+0x230>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d108      	bne.n	800363c <HAL_DMA_Start_IT+0x100>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e007      	b.n	800364c <HAL_DMA_Start_IT+0x110>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f001 f906 	bl	8004864 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a34      	ldr	r2, [pc, #208]	; (8003730 <HAL_DMA_Start_IT+0x1f4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d04a      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a33      	ldr	r2, [pc, #204]	; (8003734 <HAL_DMA_Start_IT+0x1f8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d045      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a31      	ldr	r2, [pc, #196]	; (8003738 <HAL_DMA_Start_IT+0x1fc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d040      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a30      	ldr	r2, [pc, #192]	; (800373c <HAL_DMA_Start_IT+0x200>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d03b      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2e      	ldr	r2, [pc, #184]	; (8003740 <HAL_DMA_Start_IT+0x204>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d036      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <HAL_DMA_Start_IT+0x208>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d031      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2b      	ldr	r2, [pc, #172]	; (8003748 <HAL_DMA_Start_IT+0x20c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d02c      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2a      	ldr	r2, [pc, #168]	; (800374c <HAL_DMA_Start_IT+0x210>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d027      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a28      	ldr	r2, [pc, #160]	; (8003750 <HAL_DMA_Start_IT+0x214>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d022      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a27      	ldr	r2, [pc, #156]	; (8003754 <HAL_DMA_Start_IT+0x218>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d01d      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a25      	ldr	r2, [pc, #148]	; (8003758 <HAL_DMA_Start_IT+0x21c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d018      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a24      	ldr	r2, [pc, #144]	; (800375c <HAL_DMA_Start_IT+0x220>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a22      	ldr	r2, [pc, #136]	; (8003760 <HAL_DMA_Start_IT+0x224>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00e      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a21      	ldr	r2, [pc, #132]	; (8003764 <HAL_DMA_Start_IT+0x228>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d009      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <HAL_DMA_Start_IT+0x22c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d004      	beq.n	80036f8 <HAL_DMA_Start_IT+0x1bc>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1e      	ldr	r2, [pc, #120]	; (800376c <HAL_DMA_Start_IT+0x230>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d101      	bne.n	80036fc <HAL_DMA_Start_IT+0x1c0>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_DMA_Start_IT+0x1c2>
 80036fc:	2300      	movs	r3, #0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d036      	beq.n	8003770 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f023 021e 	bic.w	r2, r3, #30
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0216 	orr.w	r2, r2, #22
 8003714:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d03e      	beq.n	800379c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0208 	orr.w	r2, r2, #8
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e035      	b.n	800379c <HAL_DMA_Start_IT+0x260>
 8003730:	40020010 	.word	0x40020010
 8003734:	40020028 	.word	0x40020028
 8003738:	40020040 	.word	0x40020040
 800373c:	40020058 	.word	0x40020058
 8003740:	40020070 	.word	0x40020070
 8003744:	40020088 	.word	0x40020088
 8003748:	400200a0 	.word	0x400200a0
 800374c:	400200b8 	.word	0x400200b8
 8003750:	40020410 	.word	0x40020410
 8003754:	40020428 	.word	0x40020428
 8003758:	40020440 	.word	0x40020440
 800375c:	40020458 	.word	0x40020458
 8003760:	40020470 	.word	0x40020470
 8003764:	40020488 	.word	0x40020488
 8003768:	400204a0 	.word	0x400204a0
 800376c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 020e 	bic.w	r2, r3, #14
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 020a 	orr.w	r2, r2, #10
 8003782:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0204 	orr.w	r2, r2, #4
 800379a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a83      	ldr	r2, [pc, #524]	; (80039b0 <HAL_DMA_Start_IT+0x474>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d072      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a82      	ldr	r2, [pc, #520]	; (80039b4 <HAL_DMA_Start_IT+0x478>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d06d      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a80      	ldr	r2, [pc, #512]	; (80039b8 <HAL_DMA_Start_IT+0x47c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d068      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7f      	ldr	r2, [pc, #508]	; (80039bc <HAL_DMA_Start_IT+0x480>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d063      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7d      	ldr	r2, [pc, #500]	; (80039c0 <HAL_DMA_Start_IT+0x484>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d05e      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7c      	ldr	r2, [pc, #496]	; (80039c4 <HAL_DMA_Start_IT+0x488>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d059      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a7a      	ldr	r2, [pc, #488]	; (80039c8 <HAL_DMA_Start_IT+0x48c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d054      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a79      	ldr	r2, [pc, #484]	; (80039cc <HAL_DMA_Start_IT+0x490>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d04f      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a77      	ldr	r2, [pc, #476]	; (80039d0 <HAL_DMA_Start_IT+0x494>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d04a      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a76      	ldr	r2, [pc, #472]	; (80039d4 <HAL_DMA_Start_IT+0x498>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d045      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a74      	ldr	r2, [pc, #464]	; (80039d8 <HAL_DMA_Start_IT+0x49c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d040      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a73      	ldr	r2, [pc, #460]	; (80039dc <HAL_DMA_Start_IT+0x4a0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d03b      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a71      	ldr	r2, [pc, #452]	; (80039e0 <HAL_DMA_Start_IT+0x4a4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d036      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a70      	ldr	r2, [pc, #448]	; (80039e4 <HAL_DMA_Start_IT+0x4a8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d031      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6e      	ldr	r2, [pc, #440]	; (80039e8 <HAL_DMA_Start_IT+0x4ac>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d02c      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6d      	ldr	r2, [pc, #436]	; (80039ec <HAL_DMA_Start_IT+0x4b0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d027      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6b      	ldr	r2, [pc, #428]	; (80039f0 <HAL_DMA_Start_IT+0x4b4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d022      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6a      	ldr	r2, [pc, #424]	; (80039f4 <HAL_DMA_Start_IT+0x4b8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d01d      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a68      	ldr	r2, [pc, #416]	; (80039f8 <HAL_DMA_Start_IT+0x4bc>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d018      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a67      	ldr	r2, [pc, #412]	; (80039fc <HAL_DMA_Start_IT+0x4c0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d013      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a65      	ldr	r2, [pc, #404]	; (8003a00 <HAL_DMA_Start_IT+0x4c4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00e      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a64      	ldr	r2, [pc, #400]	; (8003a04 <HAL_DMA_Start_IT+0x4c8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d009      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a62      	ldr	r2, [pc, #392]	; (8003a08 <HAL_DMA_Start_IT+0x4cc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_DMA_Start_IT+0x350>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a61      	ldr	r2, [pc, #388]	; (8003a0c <HAL_DMA_Start_IT+0x4d0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_DMA_Start_IT+0x354>
 800388c:	2301      	movs	r3, #1
 800388e:	e000      	b.n	8003892 <HAL_DMA_Start_IT+0x356>
 8003890:	2300      	movs	r3, #0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d01a      	beq.n	80038cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a37      	ldr	r2, [pc, #220]	; (80039b0 <HAL_DMA_Start_IT+0x474>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d04a      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a36      	ldr	r2, [pc, #216]	; (80039b4 <HAL_DMA_Start_IT+0x478>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d045      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a34      	ldr	r2, [pc, #208]	; (80039b8 <HAL_DMA_Start_IT+0x47c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d040      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a33      	ldr	r2, [pc, #204]	; (80039bc <HAL_DMA_Start_IT+0x480>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d03b      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a31      	ldr	r2, [pc, #196]	; (80039c0 <HAL_DMA_Start_IT+0x484>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d036      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a30      	ldr	r2, [pc, #192]	; (80039c4 <HAL_DMA_Start_IT+0x488>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d031      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a2e      	ldr	r2, [pc, #184]	; (80039c8 <HAL_DMA_Start_IT+0x48c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d02c      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a2d      	ldr	r2, [pc, #180]	; (80039cc <HAL_DMA_Start_IT+0x490>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d027      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a2b      	ldr	r2, [pc, #172]	; (80039d0 <HAL_DMA_Start_IT+0x494>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d022      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a2a      	ldr	r2, [pc, #168]	; (80039d4 <HAL_DMA_Start_IT+0x498>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d01d      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <HAL_DMA_Start_IT+0x49c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d018      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a27      	ldr	r2, [pc, #156]	; (80039dc <HAL_DMA_Start_IT+0x4a0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a25      	ldr	r2, [pc, #148]	; (80039e0 <HAL_DMA_Start_IT+0x4a4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00e      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a24      	ldr	r2, [pc, #144]	; (80039e4 <HAL_DMA_Start_IT+0x4a8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d009      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <HAL_DMA_Start_IT+0x4ac>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_DMA_Start_IT+0x430>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a21      	ldr	r2, [pc, #132]	; (80039ec <HAL_DMA_Start_IT+0x4b0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d108      	bne.n	800397e <HAL_DMA_Start_IT+0x442>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e012      	b.n	80039a4 <HAL_DMA_Start_IT+0x468>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e009      	b.n	80039a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800399e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40020010 	.word	0x40020010
 80039b4:	40020028 	.word	0x40020028
 80039b8:	40020040 	.word	0x40020040
 80039bc:	40020058 	.word	0x40020058
 80039c0:	40020070 	.word	0x40020070
 80039c4:	40020088 	.word	0x40020088
 80039c8:	400200a0 	.word	0x400200a0
 80039cc:	400200b8 	.word	0x400200b8
 80039d0:	40020410 	.word	0x40020410
 80039d4:	40020428 	.word	0x40020428
 80039d8:	40020440 	.word	0x40020440
 80039dc:	40020458 	.word	0x40020458
 80039e0:	40020470 	.word	0x40020470
 80039e4:	40020488 	.word	0x40020488
 80039e8:	400204a0 	.word	0x400204a0
 80039ec:	400204b8 	.word	0x400204b8
 80039f0:	58025408 	.word	0x58025408
 80039f4:	5802541c 	.word	0x5802541c
 80039f8:	58025430 	.word	0x58025430
 80039fc:	58025444 	.word	0x58025444
 8003a00:	58025458 	.word	0x58025458
 8003a04:	5802546c 	.word	0x5802546c
 8003a08:	58025480 	.word	0x58025480
 8003a0c:	58025494 	.word	0x58025494

08003a10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	; 0x28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a1c:	4b67      	ldr	r3, [pc, #412]	; (8003bbc <HAL_DMA_IRQHandler+0x1ac>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a67      	ldr	r2, [pc, #412]	; (8003bc0 <HAL_DMA_IRQHandler+0x1b0>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	0a9b      	lsrs	r3, r3, #10
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a34:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a5f      	ldr	r2, [pc, #380]	; (8003bc4 <HAL_DMA_IRQHandler+0x1b4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d04a      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a5d      	ldr	r2, [pc, #372]	; (8003bc8 <HAL_DMA_IRQHandler+0x1b8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d045      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a5c      	ldr	r2, [pc, #368]	; (8003bcc <HAL_DMA_IRQHandler+0x1bc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d040      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a5a      	ldr	r2, [pc, #360]	; (8003bd0 <HAL_DMA_IRQHandler+0x1c0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d03b      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a59      	ldr	r2, [pc, #356]	; (8003bd4 <HAL_DMA_IRQHandler+0x1c4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d036      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a57      	ldr	r2, [pc, #348]	; (8003bd8 <HAL_DMA_IRQHandler+0x1c8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d031      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a56      	ldr	r2, [pc, #344]	; (8003bdc <HAL_DMA_IRQHandler+0x1cc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d02c      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a54      	ldr	r2, [pc, #336]	; (8003be0 <HAL_DMA_IRQHandler+0x1d0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d027      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a53      	ldr	r2, [pc, #332]	; (8003be4 <HAL_DMA_IRQHandler+0x1d4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d022      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a51      	ldr	r2, [pc, #324]	; (8003be8 <HAL_DMA_IRQHandler+0x1d8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01d      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a50      	ldr	r2, [pc, #320]	; (8003bec <HAL_DMA_IRQHandler+0x1dc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d018      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a4e      	ldr	r2, [pc, #312]	; (8003bf0 <HAL_DMA_IRQHandler+0x1e0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a4d      	ldr	r2, [pc, #308]	; (8003bf4 <HAL_DMA_IRQHandler+0x1e4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00e      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a4b      	ldr	r2, [pc, #300]	; (8003bf8 <HAL_DMA_IRQHandler+0x1e8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d009      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a4a      	ldr	r2, [pc, #296]	; (8003bfc <HAL_DMA_IRQHandler+0x1ec>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0xd2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a48      	ldr	r2, [pc, #288]	; (8003c00 <HAL_DMA_IRQHandler+0x1f0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_DMA_IRQHandler+0xd6>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <HAL_DMA_IRQHandler+0xd8>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 842b 	beq.w	8004344 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	2208      	movs	r2, #8
 8003af8:	409a      	lsls	r2, r3
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80a2 	beq.w	8003c48 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a2e      	ldr	r2, [pc, #184]	; (8003bc4 <HAL_DMA_IRQHandler+0x1b4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d04a      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2d      	ldr	r2, [pc, #180]	; (8003bc8 <HAL_DMA_IRQHandler+0x1b8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d045      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a2b      	ldr	r2, [pc, #172]	; (8003bcc <HAL_DMA_IRQHandler+0x1bc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d040      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2a      	ldr	r2, [pc, #168]	; (8003bd0 <HAL_DMA_IRQHandler+0x1c0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d03b      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a28      	ldr	r2, [pc, #160]	; (8003bd4 <HAL_DMA_IRQHandler+0x1c4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d036      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <HAL_DMA_IRQHandler+0x1c8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d031      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a25      	ldr	r2, [pc, #148]	; (8003bdc <HAL_DMA_IRQHandler+0x1cc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d02c      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <HAL_DMA_IRQHandler+0x1d0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d027      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <HAL_DMA_IRQHandler+0x1d4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d022      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a21      	ldr	r2, [pc, #132]	; (8003be8 <HAL_DMA_IRQHandler+0x1d8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d01d      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <HAL_DMA_IRQHandler+0x1dc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d018      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <HAL_DMA_IRQHandler+0x1e0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <HAL_DMA_IRQHandler+0x1e4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00e      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1b      	ldr	r2, [pc, #108]	; (8003bf8 <HAL_DMA_IRQHandler+0x1e8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a19      	ldr	r2, [pc, #100]	; (8003bfc <HAL_DMA_IRQHandler+0x1ec>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x194>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a18      	ldr	r2, [pc, #96]	; (8003c00 <HAL_DMA_IRQHandler+0x1f0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d12f      	bne.n	8003c04 <HAL_DMA_IRQHandler+0x1f4>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bf14      	ite	ne
 8003bb2:	2301      	movne	r3, #1
 8003bb4:	2300      	moveq	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	e02e      	b.n	8003c18 <HAL_DMA_IRQHandler+0x208>
 8003bba:	bf00      	nop
 8003bbc:	24000000 	.word	0x24000000
 8003bc0:	1b4e81b5 	.word	0x1b4e81b5
 8003bc4:	40020010 	.word	0x40020010
 8003bc8:	40020028 	.word	0x40020028
 8003bcc:	40020040 	.word	0x40020040
 8003bd0:	40020058 	.word	0x40020058
 8003bd4:	40020070 	.word	0x40020070
 8003bd8:	40020088 	.word	0x40020088
 8003bdc:	400200a0 	.word	0x400200a0
 8003be0:	400200b8 	.word	0x400200b8
 8003be4:	40020410 	.word	0x40020410
 8003be8:	40020428 	.word	0x40020428
 8003bec:	40020440 	.word	0x40020440
 8003bf0:	40020458 	.word	0x40020458
 8003bf4:	40020470 	.word	0x40020470
 8003bf8:	40020488 	.word	0x40020488
 8003bfc:	400204a0 	.word	0x400204a0
 8003c00:	400204b8 	.word	0x400204b8
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	bf14      	ite	ne
 8003c12:	2301      	movne	r3, #1
 8003c14:	2300      	moveq	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d015      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0204 	bic.w	r2, r2, #4
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	2208      	movs	r2, #8
 8003c36:	409a      	lsls	r2, r3
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c40:	f043 0201 	orr.w	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	fa22 f303 	lsr.w	r3, r2, r3
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d06e      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a69      	ldr	r2, [pc, #420]	; (8003e08 <HAL_DMA_IRQHandler+0x3f8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d04a      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a67      	ldr	r2, [pc, #412]	; (8003e0c <HAL_DMA_IRQHandler+0x3fc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d045      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a66      	ldr	r2, [pc, #408]	; (8003e10 <HAL_DMA_IRQHandler+0x400>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d040      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a64      	ldr	r2, [pc, #400]	; (8003e14 <HAL_DMA_IRQHandler+0x404>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d03b      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a63      	ldr	r2, [pc, #396]	; (8003e18 <HAL_DMA_IRQHandler+0x408>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d036      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a61      	ldr	r2, [pc, #388]	; (8003e1c <HAL_DMA_IRQHandler+0x40c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d031      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a60      	ldr	r2, [pc, #384]	; (8003e20 <HAL_DMA_IRQHandler+0x410>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d02c      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a5e      	ldr	r2, [pc, #376]	; (8003e24 <HAL_DMA_IRQHandler+0x414>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d027      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a5d      	ldr	r2, [pc, #372]	; (8003e28 <HAL_DMA_IRQHandler+0x418>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d022      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a5b      	ldr	r2, [pc, #364]	; (8003e2c <HAL_DMA_IRQHandler+0x41c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01d      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a5a      	ldr	r2, [pc, #360]	; (8003e30 <HAL_DMA_IRQHandler+0x420>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d018      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a58      	ldr	r2, [pc, #352]	; (8003e34 <HAL_DMA_IRQHandler+0x424>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a57      	ldr	r2, [pc, #348]	; (8003e38 <HAL_DMA_IRQHandler+0x428>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00e      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a55      	ldr	r2, [pc, #340]	; (8003e3c <HAL_DMA_IRQHandler+0x42c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d009      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a54      	ldr	r2, [pc, #336]	; (8003e40 <HAL_DMA_IRQHandler+0x430>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d004      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x2ee>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a52      	ldr	r2, [pc, #328]	; (8003e44 <HAL_DMA_IRQHandler+0x434>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d10a      	bne.n	8003d14 <HAL_DMA_IRQHandler+0x304>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	e003      	b.n	8003d1c <HAL_DMA_IRQHandler+0x30c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2201      	movs	r2, #1
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0202 	orr.w	r2, r3, #2
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2204      	movs	r2, #4
 8003d46:	409a      	lsls	r2, r3
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 808f 	beq.w	8003e70 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2c      	ldr	r2, [pc, #176]	; (8003e08 <HAL_DMA_IRQHandler+0x3f8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d04a      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2a      	ldr	r2, [pc, #168]	; (8003e0c <HAL_DMA_IRQHandler+0x3fc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d045      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a29      	ldr	r2, [pc, #164]	; (8003e10 <HAL_DMA_IRQHandler+0x400>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d040      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a27      	ldr	r2, [pc, #156]	; (8003e14 <HAL_DMA_IRQHandler+0x404>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d03b      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a26      	ldr	r2, [pc, #152]	; (8003e18 <HAL_DMA_IRQHandler+0x408>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d036      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a24      	ldr	r2, [pc, #144]	; (8003e1c <HAL_DMA_IRQHandler+0x40c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d031      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a23      	ldr	r2, [pc, #140]	; (8003e20 <HAL_DMA_IRQHandler+0x410>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d02c      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a21      	ldr	r2, [pc, #132]	; (8003e24 <HAL_DMA_IRQHandler+0x414>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d027      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a20      	ldr	r2, [pc, #128]	; (8003e28 <HAL_DMA_IRQHandler+0x418>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d022      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <HAL_DMA_IRQHandler+0x41c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01d      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1d      	ldr	r2, [pc, #116]	; (8003e30 <HAL_DMA_IRQHandler+0x420>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d018      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <HAL_DMA_IRQHandler+0x424>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <HAL_DMA_IRQHandler+0x428>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00e      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <HAL_DMA_IRQHandler+0x42c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d009      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a17      	ldr	r2, [pc, #92]	; (8003e40 <HAL_DMA_IRQHandler+0x430>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x3e2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a15      	ldr	r2, [pc, #84]	; (8003e44 <HAL_DMA_IRQHandler+0x434>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d12a      	bne.n	8003e48 <HAL_DMA_IRQHandler+0x438>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf14      	ite	ne
 8003e00:	2301      	movne	r3, #1
 8003e02:	2300      	moveq	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e023      	b.n	8003e50 <HAL_DMA_IRQHandler+0x440>
 8003e08:	40020010 	.word	0x40020010
 8003e0c:	40020028 	.word	0x40020028
 8003e10:	40020040 	.word	0x40020040
 8003e14:	40020058 	.word	0x40020058
 8003e18:	40020070 	.word	0x40020070
 8003e1c:	40020088 	.word	0x40020088
 8003e20:	400200a0 	.word	0x400200a0
 8003e24:	400200b8 	.word	0x400200b8
 8003e28:	40020410 	.word	0x40020410
 8003e2c:	40020428 	.word	0x40020428
 8003e30:	40020440 	.word	0x40020440
 8003e34:	40020458 	.word	0x40020458
 8003e38:	40020470 	.word	0x40020470
 8003e3c:	40020488 	.word	0x40020488
 8003e40:	400204a0 	.word	0x400204a0
 8003e44:	400204b8 	.word	0x400204b8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00d      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	f043 0204 	orr.w	r2, r3, #4
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	2210      	movs	r2, #16
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80a6 	beq.w	8003fd2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a85      	ldr	r2, [pc, #532]	; (80040a0 <HAL_DMA_IRQHandler+0x690>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d04a      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a83      	ldr	r2, [pc, #524]	; (80040a4 <HAL_DMA_IRQHandler+0x694>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d045      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a82      	ldr	r2, [pc, #520]	; (80040a8 <HAL_DMA_IRQHandler+0x698>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d040      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a80      	ldr	r2, [pc, #512]	; (80040ac <HAL_DMA_IRQHandler+0x69c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d03b      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a7f      	ldr	r2, [pc, #508]	; (80040b0 <HAL_DMA_IRQHandler+0x6a0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d036      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a7d      	ldr	r2, [pc, #500]	; (80040b4 <HAL_DMA_IRQHandler+0x6a4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d031      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a7c      	ldr	r2, [pc, #496]	; (80040b8 <HAL_DMA_IRQHandler+0x6a8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d02c      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a7a      	ldr	r2, [pc, #488]	; (80040bc <HAL_DMA_IRQHandler+0x6ac>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d027      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a79      	ldr	r2, [pc, #484]	; (80040c0 <HAL_DMA_IRQHandler+0x6b0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d022      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a77      	ldr	r2, [pc, #476]	; (80040c4 <HAL_DMA_IRQHandler+0x6b4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01d      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a76      	ldr	r2, [pc, #472]	; (80040c8 <HAL_DMA_IRQHandler+0x6b8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d018      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a74      	ldr	r2, [pc, #464]	; (80040cc <HAL_DMA_IRQHandler+0x6bc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a73      	ldr	r2, [pc, #460]	; (80040d0 <HAL_DMA_IRQHandler+0x6c0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00e      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a71      	ldr	r2, [pc, #452]	; (80040d4 <HAL_DMA_IRQHandler+0x6c4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d009      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a70      	ldr	r2, [pc, #448]	; (80040d8 <HAL_DMA_IRQHandler+0x6c8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d004      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x516>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a6e      	ldr	r2, [pc, #440]	; (80040dc <HAL_DMA_IRQHandler+0x6cc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d10a      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x52c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf14      	ite	ne
 8003f34:	2301      	movne	r3, #1
 8003f36:	2300      	moveq	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e009      	b.n	8003f50 <HAL_DMA_IRQHandler+0x540>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d03e      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d018      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d108      	bne.n	8003f92 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d024      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
 8003f90:	e01f      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01b      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	4798      	blx	r3
 8003fa2:	e016      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d107      	bne.n	8003fc2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0208 	bic.w	r2, r2, #8
 8003fc0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	2220      	movs	r2, #32
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 8110 	beq.w	8004208 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a2c      	ldr	r2, [pc, #176]	; (80040a0 <HAL_DMA_IRQHandler+0x690>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d04a      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a2b      	ldr	r2, [pc, #172]	; (80040a4 <HAL_DMA_IRQHandler+0x694>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d045      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a29      	ldr	r2, [pc, #164]	; (80040a8 <HAL_DMA_IRQHandler+0x698>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d040      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a28      	ldr	r2, [pc, #160]	; (80040ac <HAL_DMA_IRQHandler+0x69c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d03b      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a26      	ldr	r2, [pc, #152]	; (80040b0 <HAL_DMA_IRQHandler+0x6a0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d036      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a25      	ldr	r2, [pc, #148]	; (80040b4 <HAL_DMA_IRQHandler+0x6a4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d031      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a23      	ldr	r2, [pc, #140]	; (80040b8 <HAL_DMA_IRQHandler+0x6a8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d02c      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a22      	ldr	r2, [pc, #136]	; (80040bc <HAL_DMA_IRQHandler+0x6ac>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d027      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a20      	ldr	r2, [pc, #128]	; (80040c0 <HAL_DMA_IRQHandler+0x6b0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d022      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1f      	ldr	r2, [pc, #124]	; (80040c4 <HAL_DMA_IRQHandler+0x6b4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d01d      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <HAL_DMA_IRQHandler+0x6b8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d018      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1c      	ldr	r2, [pc, #112]	; (80040cc <HAL_DMA_IRQHandler+0x6bc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d013      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1a      	ldr	r2, [pc, #104]	; (80040d0 <HAL_DMA_IRQHandler+0x6c0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00e      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <HAL_DMA_IRQHandler+0x6c4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d009      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <HAL_DMA_IRQHandler+0x6c8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d004      	beq.n	8004088 <HAL_DMA_IRQHandler+0x678>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a16      	ldr	r2, [pc, #88]	; (80040dc <HAL_DMA_IRQHandler+0x6cc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d12b      	bne.n	80040e0 <HAL_DMA_IRQHandler+0x6d0>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf14      	ite	ne
 8004096:	2301      	movne	r3, #1
 8004098:	2300      	moveq	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	e02a      	b.n	80040f4 <HAL_DMA_IRQHandler+0x6e4>
 800409e:	bf00      	nop
 80040a0:	40020010 	.word	0x40020010
 80040a4:	40020028 	.word	0x40020028
 80040a8:	40020040 	.word	0x40020040
 80040ac:	40020058 	.word	0x40020058
 80040b0:	40020070 	.word	0x40020070
 80040b4:	40020088 	.word	0x40020088
 80040b8:	400200a0 	.word	0x400200a0
 80040bc:	400200b8 	.word	0x400200b8
 80040c0:	40020410 	.word	0x40020410
 80040c4:	40020428 	.word	0x40020428
 80040c8:	40020440 	.word	0x40020440
 80040cc:	40020458 	.word	0x40020458
 80040d0:	40020470 	.word	0x40020470
 80040d4:	40020488 	.word	0x40020488
 80040d8:	400204a0 	.word	0x400204a0
 80040dc:	400204b8 	.word	0x400204b8
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf14      	ite	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	2300      	moveq	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 8087 	beq.w	8004208 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	f003 031f 	and.w	r3, r3, #31
 8004102:	2220      	movs	r2, #32
 8004104:	409a      	lsls	r2, r3
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b04      	cmp	r3, #4
 8004114:	d139      	bne.n	800418a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0216 	bic.w	r2, r2, #22
 8004124:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004134:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d103      	bne.n	8004146 <HAL_DMA_IRQHandler+0x736>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0208 	bic.w	r2, r2, #8
 8004154:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	223f      	movs	r2, #63	; 0x3f
 8004160:	409a      	lsls	r2, r3
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 834a 	beq.w	8004814 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	4798      	blx	r3
          }
          return;
 8004188:	e344      	b.n	8004814 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d018      	beq.n	80041ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d108      	bne.n	80041b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d02c      	beq.n	8004208 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	4798      	blx	r3
 80041b6:	e027      	b.n	8004208 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d023      	beq.n	8004208 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4798      	blx	r3
 80041c8:	e01e      	b.n	8004208 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10f      	bne.n	80041f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0210 	bic.w	r2, r2, #16
 80041e6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 8306 	beq.w	800481e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8088 	beq.w	8004330 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2204      	movs	r2, #4
 8004224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a7a      	ldr	r2, [pc, #488]	; (8004418 <HAL_DMA_IRQHandler+0xa08>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d04a      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a79      	ldr	r2, [pc, #484]	; (800441c <HAL_DMA_IRQHandler+0xa0c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d045      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a77      	ldr	r2, [pc, #476]	; (8004420 <HAL_DMA_IRQHandler+0xa10>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d040      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a76      	ldr	r2, [pc, #472]	; (8004424 <HAL_DMA_IRQHandler+0xa14>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d03b      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a74      	ldr	r2, [pc, #464]	; (8004428 <HAL_DMA_IRQHandler+0xa18>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d036      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a73      	ldr	r2, [pc, #460]	; (800442c <HAL_DMA_IRQHandler+0xa1c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d031      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a71      	ldr	r2, [pc, #452]	; (8004430 <HAL_DMA_IRQHandler+0xa20>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d02c      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a70      	ldr	r2, [pc, #448]	; (8004434 <HAL_DMA_IRQHandler+0xa24>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d027      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a6e      	ldr	r2, [pc, #440]	; (8004438 <HAL_DMA_IRQHandler+0xa28>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d022      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a6d      	ldr	r2, [pc, #436]	; (800443c <HAL_DMA_IRQHandler+0xa2c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d01d      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a6b      	ldr	r2, [pc, #428]	; (8004440 <HAL_DMA_IRQHandler+0xa30>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d018      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a6a      	ldr	r2, [pc, #424]	; (8004444 <HAL_DMA_IRQHandler+0xa34>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d013      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a68      	ldr	r2, [pc, #416]	; (8004448 <HAL_DMA_IRQHandler+0xa38>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00e      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a67      	ldr	r2, [pc, #412]	; (800444c <HAL_DMA_IRQHandler+0xa3c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d009      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a65      	ldr	r2, [pc, #404]	; (8004450 <HAL_DMA_IRQHandler+0xa40>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x8b8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a64      	ldr	r2, [pc, #400]	; (8004454 <HAL_DMA_IRQHandler+0xa44>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d108      	bne.n	80042da <HAL_DMA_IRQHandler+0x8ca>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	e007      	b.n	80042ea <HAL_DMA_IRQHandler+0x8da>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3301      	adds	r3, #1
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d307      	bcc.n	8004306 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f2      	bne.n	80042ea <HAL_DMA_IRQHandler+0x8da>
 8004304:	e000      	b.n	8004308 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004306:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d004      	beq.n	8004328 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2203      	movs	r2, #3
 8004322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004326:	e003      	b.n	8004330 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8272 	beq.w	800481e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	4798      	blx	r3
 8004342:	e26c      	b.n	800481e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a43      	ldr	r2, [pc, #268]	; (8004458 <HAL_DMA_IRQHandler+0xa48>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d022      	beq.n	8004394 <HAL_DMA_IRQHandler+0x984>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a42      	ldr	r2, [pc, #264]	; (800445c <HAL_DMA_IRQHandler+0xa4c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d01d      	beq.n	8004394 <HAL_DMA_IRQHandler+0x984>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a40      	ldr	r2, [pc, #256]	; (8004460 <HAL_DMA_IRQHandler+0xa50>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d018      	beq.n	8004394 <HAL_DMA_IRQHandler+0x984>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a3f      	ldr	r2, [pc, #252]	; (8004464 <HAL_DMA_IRQHandler+0xa54>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_DMA_IRQHandler+0x984>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a3d      	ldr	r2, [pc, #244]	; (8004468 <HAL_DMA_IRQHandler+0xa58>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <HAL_DMA_IRQHandler+0x984>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a3c      	ldr	r2, [pc, #240]	; (800446c <HAL_DMA_IRQHandler+0xa5c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d009      	beq.n	8004394 <HAL_DMA_IRQHandler+0x984>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a3a      	ldr	r2, [pc, #232]	; (8004470 <HAL_DMA_IRQHandler+0xa60>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_DMA_IRQHandler+0x984>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a39      	ldr	r2, [pc, #228]	; (8004474 <HAL_DMA_IRQHandler+0xa64>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <HAL_DMA_IRQHandler+0x988>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <HAL_DMA_IRQHandler+0x98a>
 8004398:	2300      	movs	r3, #0
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 823f 	beq.w	800481e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	2204      	movs	r2, #4
 80043b2:	409a      	lsls	r2, r3
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80cd 	beq.w	8004558 <HAL_DMA_IRQHandler+0xb48>
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80c7 	beq.w	8004558 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ce:	f003 031f 	and.w	r3, r3, #31
 80043d2:	2204      	movs	r2, #4
 80043d4:	409a      	lsls	r2, r3
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d049      	beq.n	8004478 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 8210 	beq.w	8004818 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004400:	e20a      	b.n	8004818 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 8206 	beq.w	8004818 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004414:	e200      	b.n	8004818 <HAL_DMA_IRQHandler+0xe08>
 8004416:	bf00      	nop
 8004418:	40020010 	.word	0x40020010
 800441c:	40020028 	.word	0x40020028
 8004420:	40020040 	.word	0x40020040
 8004424:	40020058 	.word	0x40020058
 8004428:	40020070 	.word	0x40020070
 800442c:	40020088 	.word	0x40020088
 8004430:	400200a0 	.word	0x400200a0
 8004434:	400200b8 	.word	0x400200b8
 8004438:	40020410 	.word	0x40020410
 800443c:	40020428 	.word	0x40020428
 8004440:	40020440 	.word	0x40020440
 8004444:	40020458 	.word	0x40020458
 8004448:	40020470 	.word	0x40020470
 800444c:	40020488 	.word	0x40020488
 8004450:	400204a0 	.word	0x400204a0
 8004454:	400204b8 	.word	0x400204b8
 8004458:	58025408 	.word	0x58025408
 800445c:	5802541c 	.word	0x5802541c
 8004460:	58025430 	.word	0x58025430
 8004464:	58025444 	.word	0x58025444
 8004468:	58025458 	.word	0x58025458
 800446c:	5802546c 	.word	0x5802546c
 8004470:	58025480 	.word	0x58025480
 8004474:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	d160      	bne.n	8004544 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a8c      	ldr	r2, [pc, #560]	; (80046b8 <HAL_DMA_IRQHandler+0xca8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d04a      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a8a      	ldr	r2, [pc, #552]	; (80046bc <HAL_DMA_IRQHandler+0xcac>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d045      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a89      	ldr	r2, [pc, #548]	; (80046c0 <HAL_DMA_IRQHandler+0xcb0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d040      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a87      	ldr	r2, [pc, #540]	; (80046c4 <HAL_DMA_IRQHandler+0xcb4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d03b      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a86      	ldr	r2, [pc, #536]	; (80046c8 <HAL_DMA_IRQHandler+0xcb8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d036      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a84      	ldr	r2, [pc, #528]	; (80046cc <HAL_DMA_IRQHandler+0xcbc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d031      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a83      	ldr	r2, [pc, #524]	; (80046d0 <HAL_DMA_IRQHandler+0xcc0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d02c      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a81      	ldr	r2, [pc, #516]	; (80046d4 <HAL_DMA_IRQHandler+0xcc4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d027      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a80      	ldr	r2, [pc, #512]	; (80046d8 <HAL_DMA_IRQHandler+0xcc8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a7e      	ldr	r2, [pc, #504]	; (80046dc <HAL_DMA_IRQHandler+0xccc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01d      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a7d      	ldr	r2, [pc, #500]	; (80046e0 <HAL_DMA_IRQHandler+0xcd0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d018      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a7b      	ldr	r2, [pc, #492]	; (80046e4 <HAL_DMA_IRQHandler+0xcd4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a7a      	ldr	r2, [pc, #488]	; (80046e8 <HAL_DMA_IRQHandler+0xcd8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a78      	ldr	r2, [pc, #480]	; (80046ec <HAL_DMA_IRQHandler+0xcdc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a77      	ldr	r2, [pc, #476]	; (80046f0 <HAL_DMA_IRQHandler+0xce0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_DMA_IRQHandler+0xb12>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a75      	ldr	r2, [pc, #468]	; (80046f4 <HAL_DMA_IRQHandler+0xce4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d108      	bne.n	8004534 <HAL_DMA_IRQHandler+0xb24>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0208 	bic.w	r2, r2, #8
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e007      	b.n	8004544 <HAL_DMA_IRQHandler+0xb34>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0204 	bic.w	r2, r2, #4
 8004542:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8165 	beq.w	8004818 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004556:	e15f      	b.n	8004818 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2202      	movs	r2, #2
 8004562:	409a      	lsls	r2, r3
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	4013      	ands	r3, r2
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80c5 	beq.w	80046f8 <HAL_DMA_IRQHandler+0xce8>
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80bf 	beq.w	80046f8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457e:	f003 031f 	and.w	r3, r3, #31
 8004582:	2202      	movs	r2, #2
 8004584:	409a      	lsls	r2, r3
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d018      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 813a 	beq.w	800481c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045b0:	e134      	b.n	800481c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 8130 	beq.w	800481c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045c4:	e12a      	b.n	800481c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d168      	bne.n	80046a2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a38      	ldr	r2, [pc, #224]	; (80046b8 <HAL_DMA_IRQHandler+0xca8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d04a      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a37      	ldr	r2, [pc, #220]	; (80046bc <HAL_DMA_IRQHandler+0xcac>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d045      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a35      	ldr	r2, [pc, #212]	; (80046c0 <HAL_DMA_IRQHandler+0xcb0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d040      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <HAL_DMA_IRQHandler+0xcb4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d03b      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a32      	ldr	r2, [pc, #200]	; (80046c8 <HAL_DMA_IRQHandler+0xcb8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d036      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a31      	ldr	r2, [pc, #196]	; (80046cc <HAL_DMA_IRQHandler+0xcbc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d031      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a2f      	ldr	r2, [pc, #188]	; (80046d0 <HAL_DMA_IRQHandler+0xcc0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d02c      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2e      	ldr	r2, [pc, #184]	; (80046d4 <HAL_DMA_IRQHandler+0xcc4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d027      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2c      	ldr	r2, [pc, #176]	; (80046d8 <HAL_DMA_IRQHandler+0xcc8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d022      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a2b      	ldr	r2, [pc, #172]	; (80046dc <HAL_DMA_IRQHandler+0xccc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d01d      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a29      	ldr	r2, [pc, #164]	; (80046e0 <HAL_DMA_IRQHandler+0xcd0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d018      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a28      	ldr	r2, [pc, #160]	; (80046e4 <HAL_DMA_IRQHandler+0xcd4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d013      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <HAL_DMA_IRQHandler+0xcd8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00e      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a25      	ldr	r2, [pc, #148]	; (80046ec <HAL_DMA_IRQHandler+0xcdc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a23      	ldr	r2, [pc, #140]	; (80046f0 <HAL_DMA_IRQHandler+0xce0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_DMA_IRQHandler+0xc60>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a22      	ldr	r2, [pc, #136]	; (80046f4 <HAL_DMA_IRQHandler+0xce4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d108      	bne.n	8004682 <HAL_DMA_IRQHandler+0xc72>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0214 	bic.w	r2, r2, #20
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e007      	b.n	8004692 <HAL_DMA_IRQHandler+0xc82>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 020a 	bic.w	r2, r2, #10
 8004690:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80b8 	beq.w	800481c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046b4:	e0b2      	b.n	800481c <HAL_DMA_IRQHandler+0xe0c>
 80046b6:	bf00      	nop
 80046b8:	40020010 	.word	0x40020010
 80046bc:	40020028 	.word	0x40020028
 80046c0:	40020040 	.word	0x40020040
 80046c4:	40020058 	.word	0x40020058
 80046c8:	40020070 	.word	0x40020070
 80046cc:	40020088 	.word	0x40020088
 80046d0:	400200a0 	.word	0x400200a0
 80046d4:	400200b8 	.word	0x400200b8
 80046d8:	40020410 	.word	0x40020410
 80046dc:	40020428 	.word	0x40020428
 80046e0:	40020440 	.word	0x40020440
 80046e4:	40020458 	.word	0x40020458
 80046e8:	40020470 	.word	0x40020470
 80046ec:	40020488 	.word	0x40020488
 80046f0:	400204a0 	.word	0x400204a0
 80046f4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	2208      	movs	r2, #8
 8004702:	409a      	lsls	r2, r3
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8088 	beq.w	800481e <HAL_DMA_IRQHandler+0xe0e>
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 8082 	beq.w	800481e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a41      	ldr	r2, [pc, #260]	; (8004824 <HAL_DMA_IRQHandler+0xe14>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d04a      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a3f      	ldr	r2, [pc, #252]	; (8004828 <HAL_DMA_IRQHandler+0xe18>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d045      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a3e      	ldr	r2, [pc, #248]	; (800482c <HAL_DMA_IRQHandler+0xe1c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d040      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a3c      	ldr	r2, [pc, #240]	; (8004830 <HAL_DMA_IRQHandler+0xe20>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d03b      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a3b      	ldr	r2, [pc, #236]	; (8004834 <HAL_DMA_IRQHandler+0xe24>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d036      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a39      	ldr	r2, [pc, #228]	; (8004838 <HAL_DMA_IRQHandler+0xe28>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d031      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a38      	ldr	r2, [pc, #224]	; (800483c <HAL_DMA_IRQHandler+0xe2c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d02c      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a36      	ldr	r2, [pc, #216]	; (8004840 <HAL_DMA_IRQHandler+0xe30>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d027      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a35      	ldr	r2, [pc, #212]	; (8004844 <HAL_DMA_IRQHandler+0xe34>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d022      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a33      	ldr	r2, [pc, #204]	; (8004848 <HAL_DMA_IRQHandler+0xe38>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01d      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a32      	ldr	r2, [pc, #200]	; (800484c <HAL_DMA_IRQHandler+0xe3c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d018      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a30      	ldr	r2, [pc, #192]	; (8004850 <HAL_DMA_IRQHandler+0xe40>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a2f      	ldr	r2, [pc, #188]	; (8004854 <HAL_DMA_IRQHandler+0xe44>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00e      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a2d      	ldr	r2, [pc, #180]	; (8004858 <HAL_DMA_IRQHandler+0xe48>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d009      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2c      	ldr	r2, [pc, #176]	; (800485c <HAL_DMA_IRQHandler+0xe4c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <HAL_DMA_IRQHandler+0xdaa>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2a      	ldr	r2, [pc, #168]	; (8004860 <HAL_DMA_IRQHandler+0xe50>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d108      	bne.n	80047cc <HAL_DMA_IRQHandler+0xdbc>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 021c 	bic.w	r2, r2, #28
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e007      	b.n	80047dc <HAL_DMA_IRQHandler+0xdcc>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 020e 	bic.w	r2, r2, #14
 80047da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	2201      	movs	r2, #1
 80047e6:	409a      	lsls	r2, r3
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	4798      	blx	r3
 8004812:	e004      	b.n	800481e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004814:	bf00      	nop
 8004816:	e002      	b.n	800481e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004818:	bf00      	nop
 800481a:	e000      	b.n	800481e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800481c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800481e:	3728      	adds	r7, #40	; 0x28
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40020010 	.word	0x40020010
 8004828:	40020028 	.word	0x40020028
 800482c:	40020040 	.word	0x40020040
 8004830:	40020058 	.word	0x40020058
 8004834:	40020070 	.word	0x40020070
 8004838:	40020088 	.word	0x40020088
 800483c:	400200a0 	.word	0x400200a0
 8004840:	400200b8 	.word	0x400200b8
 8004844:	40020410 	.word	0x40020410
 8004848:	40020428 	.word	0x40020428
 800484c:	40020440 	.word	0x40020440
 8004850:	40020458 	.word	0x40020458
 8004854:	40020470 	.word	0x40020470
 8004858:	40020488 	.word	0x40020488
 800485c:	400204a0 	.word	0x400204a0
 8004860:	400204b8 	.word	0x400204b8

08004864 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004876:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a84      	ldr	r2, [pc, #528]	; (8004a94 <DMA_SetConfig+0x230>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d072      	beq.n	800496e <DMA_SetConfig+0x10a>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a82      	ldr	r2, [pc, #520]	; (8004a98 <DMA_SetConfig+0x234>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d06d      	beq.n	800496e <DMA_SetConfig+0x10a>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a81      	ldr	r2, [pc, #516]	; (8004a9c <DMA_SetConfig+0x238>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d068      	beq.n	800496e <DMA_SetConfig+0x10a>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a7f      	ldr	r2, [pc, #508]	; (8004aa0 <DMA_SetConfig+0x23c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d063      	beq.n	800496e <DMA_SetConfig+0x10a>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a7e      	ldr	r2, [pc, #504]	; (8004aa4 <DMA_SetConfig+0x240>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d05e      	beq.n	800496e <DMA_SetConfig+0x10a>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a7c      	ldr	r2, [pc, #496]	; (8004aa8 <DMA_SetConfig+0x244>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d059      	beq.n	800496e <DMA_SetConfig+0x10a>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a7b      	ldr	r2, [pc, #492]	; (8004aac <DMA_SetConfig+0x248>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d054      	beq.n	800496e <DMA_SetConfig+0x10a>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a79      	ldr	r2, [pc, #484]	; (8004ab0 <DMA_SetConfig+0x24c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d04f      	beq.n	800496e <DMA_SetConfig+0x10a>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a78      	ldr	r2, [pc, #480]	; (8004ab4 <DMA_SetConfig+0x250>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d04a      	beq.n	800496e <DMA_SetConfig+0x10a>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a76      	ldr	r2, [pc, #472]	; (8004ab8 <DMA_SetConfig+0x254>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d045      	beq.n	800496e <DMA_SetConfig+0x10a>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a75      	ldr	r2, [pc, #468]	; (8004abc <DMA_SetConfig+0x258>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d040      	beq.n	800496e <DMA_SetConfig+0x10a>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a73      	ldr	r2, [pc, #460]	; (8004ac0 <DMA_SetConfig+0x25c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d03b      	beq.n	800496e <DMA_SetConfig+0x10a>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a72      	ldr	r2, [pc, #456]	; (8004ac4 <DMA_SetConfig+0x260>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d036      	beq.n	800496e <DMA_SetConfig+0x10a>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a70      	ldr	r2, [pc, #448]	; (8004ac8 <DMA_SetConfig+0x264>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d031      	beq.n	800496e <DMA_SetConfig+0x10a>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6f      	ldr	r2, [pc, #444]	; (8004acc <DMA_SetConfig+0x268>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d02c      	beq.n	800496e <DMA_SetConfig+0x10a>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a6d      	ldr	r2, [pc, #436]	; (8004ad0 <DMA_SetConfig+0x26c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d027      	beq.n	800496e <DMA_SetConfig+0x10a>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a6c      	ldr	r2, [pc, #432]	; (8004ad4 <DMA_SetConfig+0x270>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d022      	beq.n	800496e <DMA_SetConfig+0x10a>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a6a      	ldr	r2, [pc, #424]	; (8004ad8 <DMA_SetConfig+0x274>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01d      	beq.n	800496e <DMA_SetConfig+0x10a>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a69      	ldr	r2, [pc, #420]	; (8004adc <DMA_SetConfig+0x278>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d018      	beq.n	800496e <DMA_SetConfig+0x10a>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a67      	ldr	r2, [pc, #412]	; (8004ae0 <DMA_SetConfig+0x27c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <DMA_SetConfig+0x10a>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a66      	ldr	r2, [pc, #408]	; (8004ae4 <DMA_SetConfig+0x280>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <DMA_SetConfig+0x10a>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a64      	ldr	r2, [pc, #400]	; (8004ae8 <DMA_SetConfig+0x284>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <DMA_SetConfig+0x10a>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a63      	ldr	r2, [pc, #396]	; (8004aec <DMA_SetConfig+0x288>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <DMA_SetConfig+0x10a>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a61      	ldr	r2, [pc, #388]	; (8004af0 <DMA_SetConfig+0x28c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d101      	bne.n	8004972 <DMA_SetConfig+0x10e>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <DMA_SetConfig+0x110>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00d      	beq.n	8004994 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004980:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d004      	beq.n	8004994 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004992:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a3e      	ldr	r2, [pc, #248]	; (8004a94 <DMA_SetConfig+0x230>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d04a      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a3d      	ldr	r2, [pc, #244]	; (8004a98 <DMA_SetConfig+0x234>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d045      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a3b      	ldr	r2, [pc, #236]	; (8004a9c <DMA_SetConfig+0x238>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d040      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a3a      	ldr	r2, [pc, #232]	; (8004aa0 <DMA_SetConfig+0x23c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d03b      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a38      	ldr	r2, [pc, #224]	; (8004aa4 <DMA_SetConfig+0x240>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d036      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a37      	ldr	r2, [pc, #220]	; (8004aa8 <DMA_SetConfig+0x244>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d031      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a35      	ldr	r2, [pc, #212]	; (8004aac <DMA_SetConfig+0x248>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d02c      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a34      	ldr	r2, [pc, #208]	; (8004ab0 <DMA_SetConfig+0x24c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d027      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a32      	ldr	r2, [pc, #200]	; (8004ab4 <DMA_SetConfig+0x250>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d022      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a31      	ldr	r2, [pc, #196]	; (8004ab8 <DMA_SetConfig+0x254>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d01d      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a2f      	ldr	r2, [pc, #188]	; (8004abc <DMA_SetConfig+0x258>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d018      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2e      	ldr	r2, [pc, #184]	; (8004ac0 <DMA_SetConfig+0x25c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a2c      	ldr	r2, [pc, #176]	; (8004ac4 <DMA_SetConfig+0x260>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00e      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2b      	ldr	r2, [pc, #172]	; (8004ac8 <DMA_SetConfig+0x264>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a29      	ldr	r2, [pc, #164]	; (8004acc <DMA_SetConfig+0x268>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <DMA_SetConfig+0x1d0>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a28      	ldr	r2, [pc, #160]	; (8004ad0 <DMA_SetConfig+0x26c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d101      	bne.n	8004a38 <DMA_SetConfig+0x1d4>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <DMA_SetConfig+0x1d6>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d05a      	beq.n	8004af4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	223f      	movs	r2, #63	; 0x3f
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a5c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d108      	bne.n	8004a80 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a7e:	e087      	b.n	8004b90 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	60da      	str	r2, [r3, #12]
}
 8004a90:	e07e      	b.n	8004b90 <DMA_SetConfig+0x32c>
 8004a92:	bf00      	nop
 8004a94:	40020010 	.word	0x40020010
 8004a98:	40020028 	.word	0x40020028
 8004a9c:	40020040 	.word	0x40020040
 8004aa0:	40020058 	.word	0x40020058
 8004aa4:	40020070 	.word	0x40020070
 8004aa8:	40020088 	.word	0x40020088
 8004aac:	400200a0 	.word	0x400200a0
 8004ab0:	400200b8 	.word	0x400200b8
 8004ab4:	40020410 	.word	0x40020410
 8004ab8:	40020428 	.word	0x40020428
 8004abc:	40020440 	.word	0x40020440
 8004ac0:	40020458 	.word	0x40020458
 8004ac4:	40020470 	.word	0x40020470
 8004ac8:	40020488 	.word	0x40020488
 8004acc:	400204a0 	.word	0x400204a0
 8004ad0:	400204b8 	.word	0x400204b8
 8004ad4:	58025408 	.word	0x58025408
 8004ad8:	5802541c 	.word	0x5802541c
 8004adc:	58025430 	.word	0x58025430
 8004ae0:	58025444 	.word	0x58025444
 8004ae4:	58025458 	.word	0x58025458
 8004ae8:	5802546c 	.word	0x5802546c
 8004aec:	58025480 	.word	0x58025480
 8004af0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a28      	ldr	r2, [pc, #160]	; (8004b9c <DMA_SetConfig+0x338>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d022      	beq.n	8004b44 <DMA_SetConfig+0x2e0>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a27      	ldr	r2, [pc, #156]	; (8004ba0 <DMA_SetConfig+0x33c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d01d      	beq.n	8004b44 <DMA_SetConfig+0x2e0>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a25      	ldr	r2, [pc, #148]	; (8004ba4 <DMA_SetConfig+0x340>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d018      	beq.n	8004b44 <DMA_SetConfig+0x2e0>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a24      	ldr	r2, [pc, #144]	; (8004ba8 <DMA_SetConfig+0x344>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d013      	beq.n	8004b44 <DMA_SetConfig+0x2e0>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a22      	ldr	r2, [pc, #136]	; (8004bac <DMA_SetConfig+0x348>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00e      	beq.n	8004b44 <DMA_SetConfig+0x2e0>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a21      	ldr	r2, [pc, #132]	; (8004bb0 <DMA_SetConfig+0x34c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d009      	beq.n	8004b44 <DMA_SetConfig+0x2e0>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1f      	ldr	r2, [pc, #124]	; (8004bb4 <DMA_SetConfig+0x350>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <DMA_SetConfig+0x2e0>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1e      	ldr	r2, [pc, #120]	; (8004bb8 <DMA_SetConfig+0x354>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d101      	bne.n	8004b48 <DMA_SetConfig+0x2e4>
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <DMA_SetConfig+0x2e6>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d020      	beq.n	8004b90 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2201      	movs	r2, #1
 8004b58:	409a      	lsls	r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d108      	bne.n	8004b80 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
}
 8004b7e:	e007      	b.n	8004b90 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	60da      	str	r2, [r3, #12]
}
 8004b90:	bf00      	nop
 8004b92:	371c      	adds	r7, #28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	58025408 	.word	0x58025408
 8004ba0:	5802541c 	.word	0x5802541c
 8004ba4:	58025430 	.word	0x58025430
 8004ba8:	58025444 	.word	0x58025444
 8004bac:	58025458 	.word	0x58025458
 8004bb0:	5802546c 	.word	0x5802546c
 8004bb4:	58025480 	.word	0x58025480
 8004bb8:	58025494 	.word	0x58025494

08004bbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a42      	ldr	r2, [pc, #264]	; (8004cd4 <DMA_CalcBaseAndBitshift+0x118>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d04a      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a41      	ldr	r2, [pc, #260]	; (8004cd8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d045      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a3f      	ldr	r2, [pc, #252]	; (8004cdc <DMA_CalcBaseAndBitshift+0x120>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d040      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a3e      	ldr	r2, [pc, #248]	; (8004ce0 <DMA_CalcBaseAndBitshift+0x124>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d03b      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a3c      	ldr	r2, [pc, #240]	; (8004ce4 <DMA_CalcBaseAndBitshift+0x128>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d036      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a3b      	ldr	r2, [pc, #236]	; (8004ce8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d031      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a39      	ldr	r2, [pc, #228]	; (8004cec <DMA_CalcBaseAndBitshift+0x130>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d02c      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a38      	ldr	r2, [pc, #224]	; (8004cf0 <DMA_CalcBaseAndBitshift+0x134>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d027      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a36      	ldr	r2, [pc, #216]	; (8004cf4 <DMA_CalcBaseAndBitshift+0x138>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d022      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a35      	ldr	r2, [pc, #212]	; (8004cf8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d01d      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a33      	ldr	r2, [pc, #204]	; (8004cfc <DMA_CalcBaseAndBitshift+0x140>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d018      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a32      	ldr	r2, [pc, #200]	; (8004d00 <DMA_CalcBaseAndBitshift+0x144>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d013      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a30      	ldr	r2, [pc, #192]	; (8004d04 <DMA_CalcBaseAndBitshift+0x148>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00e      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a2f      	ldr	r2, [pc, #188]	; (8004d08 <DMA_CalcBaseAndBitshift+0x14c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a2d      	ldr	r2, [pc, #180]	; (8004d0c <DMA_CalcBaseAndBitshift+0x150>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2c      	ldr	r2, [pc, #176]	; (8004d10 <DMA_CalcBaseAndBitshift+0x154>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d101      	bne.n	8004c68 <DMA_CalcBaseAndBitshift+0xac>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <DMA_CalcBaseAndBitshift+0xae>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d024      	beq.n	8004cb8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	3b10      	subs	r3, #16
 8004c76:	4a27      	ldr	r2, [pc, #156]	; (8004d14 <DMA_CalcBaseAndBitshift+0x158>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	4a24      	ldr	r2, [pc, #144]	; (8004d18 <DMA_CalcBaseAndBitshift+0x15c>)
 8004c88:	5cd3      	ldrb	r3, [r2, r3]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d908      	bls.n	8004ca8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4b1f      	ldr	r3, [pc, #124]	; (8004d1c <DMA_CalcBaseAndBitshift+0x160>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	1d1a      	adds	r2, r3, #4
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	659a      	str	r2, [r3, #88]	; 0x58
 8004ca6:	e00d      	b.n	8004cc4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <DMA_CalcBaseAndBitshift+0x160>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8004cb6:	e005      	b.n	8004cc4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40020010 	.word	0x40020010
 8004cd8:	40020028 	.word	0x40020028
 8004cdc:	40020040 	.word	0x40020040
 8004ce0:	40020058 	.word	0x40020058
 8004ce4:	40020070 	.word	0x40020070
 8004ce8:	40020088 	.word	0x40020088
 8004cec:	400200a0 	.word	0x400200a0
 8004cf0:	400200b8 	.word	0x400200b8
 8004cf4:	40020410 	.word	0x40020410
 8004cf8:	40020428 	.word	0x40020428
 8004cfc:	40020440 	.word	0x40020440
 8004d00:	40020458 	.word	0x40020458
 8004d04:	40020470 	.word	0x40020470
 8004d08:	40020488 	.word	0x40020488
 8004d0c:	400204a0 	.word	0x400204a0
 8004d10:	400204b8 	.word	0x400204b8
 8004d14:	aaaaaaab 	.word	0xaaaaaaab
 8004d18:	08014324 	.word	0x08014324
 8004d1c:	fffffc00 	.word	0xfffffc00

08004d20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d120      	bne.n	8004d76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d858      	bhi.n	8004dee <DMA_CheckFifoParam+0xce>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <DMA_CheckFifoParam+0x24>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d67 	.word	0x08004d67
 8004d4c:	08004d55 	.word	0x08004d55
 8004d50:	08004def 	.word	0x08004def
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d048      	beq.n	8004df2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d64:	e045      	b.n	8004df2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d6e:	d142      	bne.n	8004df6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d74:	e03f      	b.n	8004df6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7e:	d123      	bne.n	8004dc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d838      	bhi.n	8004dfa <DMA_CheckFifoParam+0xda>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <DMA_CheckFifoParam+0x70>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004da1 	.word	0x08004da1
 8004d94:	08004da7 	.word	0x08004da7
 8004d98:	08004da1 	.word	0x08004da1
 8004d9c:	08004db9 	.word	0x08004db9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
        break;
 8004da4:	e030      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d025      	beq.n	8004dfe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004db6:	e022      	b.n	8004dfe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dc0:	d11f      	bne.n	8004e02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dc6:	e01c      	b.n	8004e02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d902      	bls.n	8004dd6 <DMA_CheckFifoParam+0xb6>
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d003      	beq.n	8004ddc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004dd4:	e018      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004dda:	e015      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00e      	beq.n	8004e06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
    break;
 8004dec:	e00b      	b.n	8004e06 <DMA_CheckFifoParam+0xe6>
        break;
 8004dee:	bf00      	nop
 8004df0:	e00a      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
        break;
 8004df2:	bf00      	nop
 8004df4:	e008      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
        break;
 8004df6:	bf00      	nop
 8004df8:	e006      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
        break;
 8004dfa:	bf00      	nop
 8004dfc:	e004      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
        break;
 8004dfe:	bf00      	nop
 8004e00:	e002      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
        break;
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
    break;
 8004e06:	bf00      	nop
    }
  }

  return status;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop

08004e18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a38      	ldr	r2, [pc, #224]	; (8004f0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d022      	beq.n	8004e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a36      	ldr	r2, [pc, #216]	; (8004f10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d01d      	beq.n	8004e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a35      	ldr	r2, [pc, #212]	; (8004f14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d018      	beq.n	8004e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a33      	ldr	r2, [pc, #204]	; (8004f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d013      	beq.n	8004e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a32      	ldr	r2, [pc, #200]	; (8004f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00e      	beq.n	8004e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a30      	ldr	r2, [pc, #192]	; (8004f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d009      	beq.n	8004e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a2f      	ldr	r2, [pc, #188]	; (8004f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d004      	beq.n	8004e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2d      	ldr	r2, [pc, #180]	; (8004f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d101      	bne.n	8004e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01a      	beq.n	8004eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	3b08      	subs	r3, #8
 8004e88:	4a28      	ldr	r2, [pc, #160]	; (8004f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a24      	ldr	r2, [pc, #144]	; (8004f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ea4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	2201      	movs	r2, #1
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004eb4:	e024      	b.n	8004f00 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	3b10      	subs	r3, #16
 8004ebe:	4a1e      	ldr	r2, [pc, #120]	; (8004f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d806      	bhi.n	8004ede <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d902      	bls.n	8004ede <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3308      	adds	r3, #8
 8004edc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a16      	ldr	r2, [pc, #88]	; (8004f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004ef0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	2201      	movs	r2, #1
 8004efa:	409a      	lsls	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	58025408 	.word	0x58025408
 8004f10:	5802541c 	.word	0x5802541c
 8004f14:	58025430 	.word	0x58025430
 8004f18:	58025444 	.word	0x58025444
 8004f1c:	58025458 	.word	0x58025458
 8004f20:	5802546c 	.word	0x5802546c
 8004f24:	58025480 	.word	0x58025480
 8004f28:	58025494 	.word	0x58025494
 8004f2c:	cccccccd 	.word	0xcccccccd
 8004f30:	16009600 	.word	0x16009600
 8004f34:	58025880 	.word	0x58025880
 8004f38:	aaaaaaab 	.word	0xaaaaaaab
 8004f3c:	400204b8 	.word	0x400204b8
 8004f40:	4002040f 	.word	0x4002040f
 8004f44:	10008200 	.word	0x10008200
 8004f48:	40020880 	.word	0x40020880

08004f4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d04a      	beq.n	8004ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d847      	bhi.n	8004ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a25      	ldr	r2, [pc, #148]	; (8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d022      	beq.n	8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a24      	ldr	r2, [pc, #144]	; (8005008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d01d      	beq.n	8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a22      	ldr	r2, [pc, #136]	; (800500c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d018      	beq.n	8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a21      	ldr	r2, [pc, #132]	; (8005010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1f      	ldr	r2, [pc, #124]	; (8005014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00e      	beq.n	8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1e      	ldr	r2, [pc, #120]	; (8005018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a1c      	ldr	r2, [pc, #112]	; (800501c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1b      	ldr	r2, [pc, #108]	; (8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d101      	bne.n	8004fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4b17      	ldr	r3, [pc, #92]	; (8005024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	461a      	mov	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a15      	ldr	r2, [pc, #84]	; (8005028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004fd4:	671a      	str	r2, [r3, #112]	; 0x70
 8004fd6:	e009      	b.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a11      	ldr	r2, [pc, #68]	; (8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004fea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	409a      	lsls	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	58025408 	.word	0x58025408
 8005008:	5802541c 	.word	0x5802541c
 800500c:	58025430 	.word	0x58025430
 8005010:	58025444 	.word	0x58025444
 8005014:	58025458 	.word	0x58025458
 8005018:	5802546c 	.word	0x5802546c
 800501c:	58025480 	.word	0x58025480
 8005020:	58025494 	.word	0x58025494
 8005024:	1600963f 	.word	0x1600963f
 8005028:	58025940 	.word	0x58025940
 800502c:	1000823f 	.word	0x1000823f
 8005030:	40020940 	.word	0x40020940

08005034 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e0c6      	b.n	80051d4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504a:	2b00      	cmp	r3, #0
 800504c:	d102      	bne.n	8005054 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fc f892 	bl	8001178 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2223      	movs	r2, #35	; 0x23
 8005058:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800505a:	4b60      	ldr	r3, [pc, #384]	; (80051dc <HAL_ETH_Init+0x1a8>)
 800505c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005060:	4a5e      	ldr	r2, [pc, #376]	; (80051dc <HAL_ETH_Init+0x1a8>)
 8005062:	f043 0302 	orr.w	r3, r3, #2
 8005066:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800506a:	4b5c      	ldr	r3, [pc, #368]	; (80051dc <HAL_ETH_Init+0x1a8>)
 800506c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	7a1b      	ldrb	r3, [r3, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d103      	bne.n	8005088 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005080:	2000      	movs	r0, #0
 8005082:	f7fc fc59 	bl	8001938 <HAL_SYSCFG_ETHInterfaceSelect>
 8005086:	e003      	b.n	8005090 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005088:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800508c:	f7fc fc54 	bl	8001938 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050a8:	f7fc fc0c 	bl	80018c4 <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80050ae:	e00f      	b.n	80050d0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80050b0:	f7fc fc08 	bl	80018c4 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050be:	d907      	bls.n	80050d0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2204      	movs	r2, #4
 80050c4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	22e0      	movs	r2, #224	; 0xe0
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e081      	b.n	80051d4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e6      	bne.n	80050b0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fac0 	bl	8005668 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80050e8:	f002 fef4 	bl	8007ed4 <HAL_RCC_GetHCLKFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b3c      	ldr	r3, [pc, #240]	; (80051e0 <HAL_ETH_Init+0x1ac>)
 80050f0:	fba3 2302 	umull	r2, r3, r3, r2
 80050f4:	0c9a      	lsrs	r2, r3, #18
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3a01      	subs	r2, #1
 80050fc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fa13 	bl	800552c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800511c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005120:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d007      	beq.n	800513e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	22e0      	movs	r2, #224	; 0xe0
 8005138:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e04a      	b.n	80051d4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	f241 1308 	movw	r3, #4360	; 0x1108
 8005146:	4413      	add	r3, r2
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b26      	ldr	r3, [pc, #152]	; (80051e4 <HAL_ETH_Init+0x1b0>)
 800514c:	4013      	ands	r3, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6952      	ldr	r2, [r2, #20]
 8005152:	0052      	lsls	r2, r2, #1
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	6809      	ldr	r1, [r1, #0]
 8005158:	431a      	orrs	r2, r3
 800515a:	f241 1308 	movw	r3, #4360	; 0x1108
 800515e:	440b      	add	r3, r1
 8005160:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fad8 	bl	8005718 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fb1c 	bl	80057a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	3305      	adds	r3, #5
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	3304      	adds	r3, #4
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	4619      	mov	r1, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	3303      	adds	r3, #3
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	061a      	lsls	r2, r3, #24
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	3302      	adds	r3, #2
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	041b      	lsls	r3, r3, #16
 80051a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	3301      	adds	r3, #1
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80051ba:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2210      	movs	r2, #16
 80051ca:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2210      	movs	r2, #16
 80051d0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	58024400 	.word	0x58024400
 80051e0:	431bde83 	.word	0x431bde83
 80051e4:	ffff8001 	.word	0xffff8001

080051e8 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80051fa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	791b      	ldrb	r3, [r3, #4]
 8005200:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005202:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	7b1b      	ldrb	r3, [r3, #12]
 8005208:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800520a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	7b5b      	ldrb	r3, [r3, #13]
 8005210:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005212:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	7b9b      	ldrb	r3, [r3, #14]
 8005218:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800521a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	7bdb      	ldrb	r3, [r3, #15]
 8005220:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005222:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	7c12      	ldrb	r2, [r2, #16]
 8005228:	2a00      	cmp	r2, #0
 800522a:	d102      	bne.n	8005232 <ETH_SetMACConfig+0x4a>
 800522c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005230:	e000      	b.n	8005234 <ETH_SetMACConfig+0x4c>
 8005232:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005234:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	7c52      	ldrb	r2, [r2, #17]
 800523a:	2a00      	cmp	r2, #0
 800523c:	d102      	bne.n	8005244 <ETH_SetMACConfig+0x5c>
 800523e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005242:	e000      	b.n	8005246 <ETH_SetMACConfig+0x5e>
 8005244:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005246:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	7c9b      	ldrb	r3, [r3, #18]
 800524c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800524e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005254:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800525a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	7f1b      	ldrb	r3, [r3, #28]
 8005260:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005262:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	7f5b      	ldrb	r3, [r3, #29]
 8005268:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800526a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	7f92      	ldrb	r2, [r2, #30]
 8005270:	2a00      	cmp	r2, #0
 8005272:	d102      	bne.n	800527a <ETH_SetMACConfig+0x92>
 8005274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005278:	e000      	b.n	800527c <ETH_SetMACConfig+0x94>
 800527a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800527c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	7fdb      	ldrb	r3, [r3, #31]
 8005282:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005284:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	f892 2020 	ldrb.w	r2, [r2, #32]
 800528c:	2a00      	cmp	r2, #0
 800528e:	d102      	bne.n	8005296 <ETH_SetMACConfig+0xae>
 8005290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005294:	e000      	b.n	8005298 <ETH_SetMACConfig+0xb0>
 8005296:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005298:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800529e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80052a8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4b56      	ldr	r3, [pc, #344]	; (8005414 <ETH_SetMACConfig+0x22c>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	68f9      	ldr	r1, [r7, #12]
 80052c2:	430b      	orrs	r3, r1
 80052c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80052d4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80052de:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052e6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80052e8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80052f0:	2a00      	cmp	r2, #0
 80052f2:	d102      	bne.n	80052fa <ETH_SetMACConfig+0x112>
 80052f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052f8:	e000      	b.n	80052fc <ETH_SetMACConfig+0x114>
 80052fa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80052fc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	4b42      	ldr	r3, [pc, #264]	; (8005418 <ETH_SetMACConfig+0x230>)
 800530e:	4013      	ands	r3, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	68f9      	ldr	r1, [r7, #12]
 8005316:	430b      	orrs	r3, r1
 8005318:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005320:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	4b3a      	ldr	r3, [pc, #232]	; (800541c <ETH_SetMACConfig+0x234>)
 8005332:	4013      	ands	r3, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	68f9      	ldr	r1, [r7, #12]
 800533a:	430b      	orrs	r3, r1
 800533c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005344:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800534a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005352:	2a00      	cmp	r2, #0
 8005354:	d101      	bne.n	800535a <ETH_SetMACConfig+0x172>
 8005356:	2280      	movs	r2, #128	; 0x80
 8005358:	e000      	b.n	800535c <ETH_SetMACConfig+0x174>
 800535a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800535c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005362:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800536e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005372:	4013      	ands	r3, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	68f9      	ldr	r1, [r7, #12]
 800537a:	430b      	orrs	r3, r1
 800537c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005384:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800538c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539a:	f023 0103 	bic.w	r1, r3, #3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80053b2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80053ce:	2a00      	cmp	r2, #0
 80053d0:	d101      	bne.n	80053d6 <ETH_SetMACConfig+0x1ee>
 80053d2:	2240      	movs	r2, #64	; 0x40
 80053d4:	e000      	b.n	80053d8 <ETH_SetMACConfig+0x1f0>
 80053d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80053d8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80053e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80053e2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80053ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80053f8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	430a      	orrs	r2, r1
 8005404:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	00048083 	.word	0x00048083
 8005418:	c0f88000 	.word	0xc0f88000
 800541c:	fffffef0 	.word	0xfffffef0

08005420 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b38      	ldr	r3, [pc, #224]	; (8005518 <ETH_SetDMAConfig+0xf8>)
 8005436:	4013      	ands	r3, r2
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	6812      	ldr	r2, [r2, #0]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	6809      	ldr	r1, [r1, #0]
 8005440:	431a      	orrs	r2, r3
 8005442:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005446:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	791b      	ldrb	r3, [r3, #4]
 800544c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005452:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	7b1b      	ldrb	r3, [r3, #12]
 8005458:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	f241 0304 	movw	r3, #4100	; 0x1004
 8005466:	4413      	add	r3, r2
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	4b2c      	ldr	r3, [pc, #176]	; (800551c <ETH_SetDMAConfig+0xfc>)
 800546c:	4013      	ands	r3, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6811      	ldr	r1, [r2, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	431a      	orrs	r2, r3
 8005476:	f241 0304 	movw	r3, #4100	; 0x1004
 800547a:	440b      	add	r3, r1
 800547c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	7b5b      	ldrb	r3, [r3, #13]
 8005482:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b22      	ldr	r3, [pc, #136]	; (8005520 <ETH_SetDMAConfig+0x100>)
 8005498:	4013      	ands	r3, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6811      	ldr	r1, [r2, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80054a6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	7d1b      	ldrb	r3, [r3, #20]
 80054b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80054b2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	7f5b      	ldrb	r3, [r3, #29]
 80054b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	f241 1304 	movw	r3, #4356	; 0x1104
 80054c6:	4413      	add	r3, r2
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b16      	ldr	r3, [pc, #88]	; (8005524 <ETH_SetDMAConfig+0x104>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6811      	ldr	r1, [r2, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	431a      	orrs	r2, r3
 80054d6:	f241 1304 	movw	r3, #4356	; 0x1104
 80054da:	440b      	add	r3, r1
 80054dc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	7f1b      	ldrb	r3, [r3, #28]
 80054e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	f241 1308 	movw	r3, #4360	; 0x1108
 80054f4:	4413      	add	r3, r2
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <ETH_SetDMAConfig+0x108>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6811      	ldr	r1, [r2, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	431a      	orrs	r2, r3
 8005504:	f241 1308 	movw	r3, #4360	; 0x1108
 8005508:	440b      	add	r3, r1
 800550a:	601a      	str	r2, [r3, #0]
}
 800550c:	bf00      	nop
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	ffff87fd 	.word	0xffff87fd
 800551c:	ffff2ffe 	.word	0xffff2ffe
 8005520:	fffec000 	.word	0xfffec000
 8005524:	ffc0efef 	.word	0xffc0efef
 8005528:	7fc0ffff 	.word	0x7fc0ffff

0800552c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b0a4      	sub	sp, #144	; 0x90
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800553a:	2300      	movs	r3, #0
 800553c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800553e:	2300      	movs	r3, #0
 8005540:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005544:	2300      	movs	r3, #0
 8005546:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005556:	2301      	movs	r3, #1
 8005558:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800555c:	2300      	movs	r3, #0
 800555e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005562:	2301      	movs	r3, #1
 8005564:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800556c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800556e:	2300      	movs	r3, #0
 8005570:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005574:	2300      	movs	r3, #0
 8005576:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005578:	2300      	movs	r3, #0
 800557a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800557e:	2300      	movs	r3, #0
 8005580:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005584:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005588:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800558a:	2300      	movs	r3, #0
 800558c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005590:	2300      	movs	r3, #0
 8005592:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005594:	2301      	movs	r3, #1
 8005596:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800559a:	2300      	movs	r3, #0
 800559c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80055a6:	2300      	movs	r3, #0
 80055a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80055ae:	2300      	movs	r3, #0
 80055b0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80055be:	2301      	movs	r3, #1
 80055c0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80055c4:	2320      	movs	r3, #32
 80055c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80055d6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80055dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055e0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80055e8:	2302      	movs	r3, #2
 80055ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005600:	2301      	movs	r3, #1
 8005602:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005606:	2300      	movs	r3, #0
 8005608:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fde6 	bl	80051e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800561c:	2301      	movs	r3, #1
 800561e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005620:	2301      	movs	r3, #1
 8005622:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005624:	2300      	movs	r3, #0
 8005626:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005628:	2300      	movs	r3, #0
 800562a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800562e:	2300      	movs	r3, #0
 8005630:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005632:	2300      	movs	r3, #0
 8005634:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005636:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800563a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800563c:	2300      	movs	r3, #0
 800563e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005640:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005644:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005646:	2300      	movs	r3, #0
 8005648:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800564c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005652:	f107 0308 	add.w	r3, r7, #8
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff fee1 	bl	8005420 <ETH_SetDMAConfig>
}
 800565e:	bf00      	nop
 8005660:	3790      	adds	r7, #144	; 0x90
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005678:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005680:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005682:	f002 fc27 	bl	8007ed4 <HAL_RCC_GetHCLKFreq>
 8005686:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4a1e      	ldr	r2, [pc, #120]	; (8005704 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d908      	bls.n	80056a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4a1d      	ldr	r2, [pc, #116]	; (8005708 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d804      	bhi.n	80056a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e027      	b.n	80056f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4a18      	ldr	r2, [pc, #96]	; (8005708 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d908      	bls.n	80056bc <ETH_MAC_MDIO_ClkConfig+0x54>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4a17      	ldr	r2, [pc, #92]	; (800570c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d804      	bhi.n	80056bc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	e01a      	b.n	80056f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4a13      	ldr	r2, [pc, #76]	; (800570c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d903      	bls.n	80056cc <ETH_MAC_MDIO_ClkConfig+0x64>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4a12      	ldr	r2, [pc, #72]	; (8005710 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d911      	bls.n	80056f0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4a10      	ldr	r2, [pc, #64]	; (8005710 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d908      	bls.n	80056e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4a0f      	ldr	r2, [pc, #60]	; (8005714 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d804      	bhi.n	80056e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	e005      	b.n	80056f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	e000      	b.n	80056f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80056f0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80056fc:	bf00      	nop
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	01312cff 	.word	0x01312cff
 8005708:	02160ebf 	.word	0x02160ebf
 800570c:	039386ff 	.word	0x039386ff
 8005710:	05f5e0ff 	.word	0x05f5e0ff
 8005714:	08f0d17f 	.word	0x08f0d17f

08005718 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e01d      	b.n	8005762 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68d9      	ldr	r1, [r3, #12]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4613      	mov	r3, r2
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	4413      	add	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	440b      	add	r3, r1
 8005736:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2200      	movs	r2, #0
 8005742:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2200      	movs	r2, #0
 8005748:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2200      	movs	r2, #0
 800574e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	3206      	adds	r2, #6
 8005758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3301      	adds	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d9de      	bls.n	8005726 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	f241 132c 	movw	r3, #4396	; 0x112c
 8005776:	4413      	add	r3, r2
 8005778:	2203      	movs	r2, #3
 800577a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68d9      	ldr	r1, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	f241 1314 	movw	r3, #4372	; 0x1114
 8005788:	4413      	add	r3, r2
 800578a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005798:	601a      	str	r2, [r3, #0]
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	e024      	b.n	80057fe <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6919      	ldr	r1, [r3, #16]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4613      	mov	r3, r2
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	4413      	add	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	440b      	add	r3, r1
 80057c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2200      	movs	r2, #0
 80057d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2200      	movs	r2, #0
 80057d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2200      	movs	r2, #0
 80057dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2200      	movs	r2, #0
 80057e2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2200      	movs	r2, #0
 80057e8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	330a      	adds	r3, #10
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	440b      	add	r3, r1
 80057f6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3301      	adds	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d9d7      	bls.n	80057b4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	f241 1330 	movw	r3, #4400	; 0x1130
 800582a:	4413      	add	r3, r2
 800582c:	2203      	movs	r2, #3
 800582e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6919      	ldr	r1, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	f241 131c 	movw	r3, #4380	; 0x111c
 800583c:	4413      	add	r3, r2
 800583e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	f241 1328 	movw	r3, #4392	; 0x1128
 8005850:	4413      	add	r3, r2
 8005852:	6019      	str	r1, [r3, #0]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b098      	sub	sp, #96	; 0x60
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005868:	4a84      	ldr	r2, [pc, #528]	; (8005a7c <HAL_FDCAN_Init+0x21c>)
 800586a:	f107 030c 	add.w	r3, r7, #12
 800586e:	4611      	mov	r1, r2
 8005870:	224c      	movs	r2, #76	; 0x4c
 8005872:	4618      	mov	r0, r3
 8005874:	f00e fca6 	bl	80141c4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e1ca      	b.n	8005c18 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a7e      	ldr	r2, [pc, #504]	; (8005a80 <HAL_FDCAN_Init+0x220>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d106      	bne.n	800589a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005894:	461a      	mov	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fb fd30 	bl	8001314 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0210 	bic.w	r2, r2, #16
 80058c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058c4:	f7fb fffe 	bl	80018c4 <HAL_GetTick>
 80058c8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80058ca:	e014      	b.n	80058f6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80058cc:	f7fb fffa 	bl	80018c4 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b0a      	cmp	r3, #10
 80058d8:	d90d      	bls.n	80058f6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058e0:	f043 0201 	orr.w	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2203      	movs	r2, #3
 80058ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e190      	b.n	8005c18 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b08      	cmp	r3, #8
 8005902:	d0e3      	beq.n	80058cc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005914:	f7fb ffd6 	bl	80018c4 <HAL_GetTick>
 8005918:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800591a:	e014      	b.n	8005946 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800591c:	f7fb ffd2 	bl	80018c4 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b0a      	cmp	r3, #10
 8005928:	d90d      	bls.n	8005946 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005930:	f043 0201 	orr.w	r2, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2203      	movs	r2, #3
 800593e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e168      	b.n	8005c18 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0e3      	beq.n	800591c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0202 	orr.w	r2, r2, #2
 8005962:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	7c1b      	ldrb	r3, [r3, #16]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d108      	bne.n	800597e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597a:	619a      	str	r2, [r3, #24]
 800597c:	e007      	b.n	800598e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800598c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	7c5b      	ldrb	r3, [r3, #17]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d108      	bne.n	80059a8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059a4:	619a      	str	r2, [r3, #24]
 80059a6:	e007      	b.n	80059b8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	7c9b      	ldrb	r3, [r3, #18]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d108      	bne.n	80059d2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059ce:	619a      	str	r2, [r3, #24]
 80059d0:	e007      	b.n	80059e2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699a      	ldr	r2, [r3, #24]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059e0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005a06:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0210 	bic.w	r2, r2, #16
 8005a16:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d108      	bne.n	8005a32 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0204 	orr.w	r2, r2, #4
 8005a2e:	619a      	str	r2, [r3, #24]
 8005a30:	e030      	b.n	8005a94 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d02c      	beq.n	8005a94 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d020      	beq.n	8005a84 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699a      	ldr	r2, [r3, #24]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a50:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0210 	orr.w	r2, r2, #16
 8005a60:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d114      	bne.n	8005a94 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699a      	ldr	r2, [r3, #24]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f042 0220 	orr.w	r2, r2, #32
 8005a78:	619a      	str	r2, [r3, #24]
 8005a7a:	e00b      	b.n	8005a94 <HAL_FDCAN_Init+0x234>
 8005a7c:	08014264 	.word	0x08014264
 8005a80:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699a      	ldr	r2, [r3, #24]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0220 	orr.w	r2, r2, #32
 8005a92:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005aa4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005aac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005abc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005abe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac8:	d115      	bne.n	8005af6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005ad8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005ae2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	3b01      	subs	r3, #1
 8005aec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005af2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005af4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1c:	4413      	add	r3, r2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d012      	beq.n	8005b48 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005b2a:	f023 0107 	bic.w	r1, r3, #7
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005b38:	4413      	add	r3, r2
 8005b3a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d012      	beq.n	8005b76 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b58:	f023 0107 	bic.w	r1, r3, #7
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005b66:	4413      	add	r3, r2
 8005b68:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d013      	beq.n	8005ba6 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b86:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005b94:	4413      	add	r3, r2
 8005b96:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b9a:	011a      	lsls	r2, r3, #4
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d013      	beq.n	8005bd6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005bb6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005bca:	021a      	lsls	r2, r3, #8
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a11      	ldr	r2, [pc, #68]	; (8005c20 <HAL_FDCAN_Init+0x3c0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d107      	bne.n	8005bf0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f022 0203 	bic.w	r2, r2, #3
 8005bee:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fd69 	bl	80066e0 <FDCAN_CalcultateRamBlockAddresses>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005c14:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3760      	adds	r7, #96	; 0x60
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	4000a000 	.word	0x4000a000

08005c24 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d111      	bne.n	8005c5c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e008      	b.n	8005c6e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c62:	f043 0204 	orr.w	r2, r3, #4
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
  }
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
	...

08005c7c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b08b      	sub	sp, #44	; 0x2c
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005c94:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005c96:	7efb      	ldrb	r3, [r7, #27]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	f040 811d 	bne.w	8005ed8 <HAL_FDCAN_GetRxMessage+0x25c>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b40      	cmp	r3, #64	; 0x40
 8005ca2:	d136      	bne.n	8005d12 <HAL_FDCAN_GetRxMessage+0x96>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005cac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d109      	bne.n	8005cc8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cba:	f043 0220 	orr.w	r2, r3, #32
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e110      	b.n	8005eea <HAL_FDCAN_GetRxMessage+0x26e>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d109      	bne.n	8005cec <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0fe      	b.n	8005eea <HAL_FDCAN_GetRxMessage+0x26e>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cf4:	0a1b      	lsrs	r3, r3, #8
 8005cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cfa:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d04:	69f9      	ldr	r1, [r7, #28]
 8005d06:	fb01 f303 	mul.w	r3, r1, r3
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d10:	e052      	b.n	8005db8 <HAL_FDCAN_GetRxMessage+0x13c>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b41      	cmp	r3, #65	; 0x41
 8005d16:	d136      	bne.n	8005d86 <HAL_FDCAN_GetRxMessage+0x10a>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d20:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d109      	bne.n	8005d3c <HAL_FDCAN_GetRxMessage+0xc0>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d2e:	f043 0220 	orr.w	r2, r3, #32
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0d6      	b.n	8005eea <HAL_FDCAN_GetRxMessage+0x26e>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d109      	bne.n	8005d60 <HAL_FDCAN_GetRxMessage+0xe4>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0c4      	b.n	8005eea <HAL_FDCAN_GetRxMessage+0x26e>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d68:	0a1b      	lsrs	r3, r3, #8
 8005d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d6e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d78:	69f9      	ldr	r1, [r7, #28]
 8005d7a:	fb01 f303 	mul.w	r3, r1, r3
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
 8005d84:	e018      	b.n	8005db8 <HAL_FDCAN_GetRxMessage+0x13c>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d309      	bcc.n	8005da4 <HAL_FDCAN_GetRxMessage+0x128>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d96:	f043 0220 	orr.w	r2, r3, #32
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0a2      	b.n	8005eea <HAL_FDCAN_GetRxMessage+0x26e>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	fb01 f303 	mul.w	r3, r1, r3
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d107      	bne.n	8005ddc <HAL_FDCAN_GetRxMessage+0x160>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	0c9b      	lsrs	r3, r3, #18
 8005dd2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e005      	b.n	8005de8 <HAL_FDCAN_GetRxMessage+0x16c>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	3304      	adds	r3, #4
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	0e1b      	lsrs	r3, r3, #24
 8005e3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	0fda      	lsrs	r2, r3, #31
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	3304      	adds	r3, #4
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005e56:	2300      	movs	r3, #0
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	e00a      	b.n	8005e72 <HAL_FDCAN_GetRxMessage+0x1f6>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	441a      	add	r2, r3
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	440b      	add	r3, r1
 8005e68:	7812      	ldrb	r2, [r2, #0]
 8005e6a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	623b      	str	r3, [r7, #32]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	0c1b      	lsrs	r3, r3, #16
 8005e78:	4a1f      	ldr	r2, [pc, #124]	; (8005ef8 <HAL_FDCAN_GetRxMessage+0x27c>)
 8005e7a:	5cd3      	ldrb	r3, [r2, r3]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d3eb      	bcc.n	8005e5c <HAL_FDCAN_GetRxMessage+0x1e0>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b40      	cmp	r3, #64	; 0x40
 8005e88:	d105      	bne.n	8005e96 <HAL_FDCAN_GetRxMessage+0x21a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005e94:	e01e      	b.n	8005ed4 <HAL_FDCAN_GetRxMessage+0x258>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b41      	cmp	r3, #65	; 0x41
 8005e9a:	d105      	bne.n	8005ea8 <HAL_FDCAN_GetRxMessage+0x22c>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8005ea6:	e015      	b.n	8005ed4 <HAL_FDCAN_GetRxMessage+0x258>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b1f      	cmp	r3, #31
 8005eac:	d808      	bhi.n	8005ec0 <HAL_FDCAN_GetRxMessage+0x244>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8005eba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8005ebe:	e009      	b.n	8005ed4 <HAL_FDCAN_GetRxMessage+0x258>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 021f 	and.w	r2, r3, #31
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2101      	movs	r1, #1
 8005ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ed0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e008      	b.n	8005eea <HAL_FDCAN_GetRxMessage+0x26e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ede:	f043 0208 	orr.w	r2, r3, #8
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
  }
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	372c      	adds	r7, #44	; 0x2c
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	0801432c 	.word	0x0801432c

08005efc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f0e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d002      	beq.n	8005f1c <HAL_FDCAN_ActivateNotification+0x20>
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d155      	bne.n	8005fc8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	4013      	ands	r3, r2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d108      	bne.n	8005f3c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0201 	orr.w	r2, r2, #1
 8005f38:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f3a:	e014      	b.n	8005f66 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4013      	ands	r3, r2
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d108      	bne.n	8005f5e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0202 	orr.w	r2, r2, #2
 8005f5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f5c:	e003      	b.n	8005f66 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2203      	movs	r2, #3
 8005f64:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d009      	beq.n	8005f84 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d009      	beq.n	8005fa2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <HAL_FDCAN_ActivateNotification+0xec>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	430b      	orrs	r3, r1
 8005fb4:	6553      	str	r3, [r2, #84]	; 0x54
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <HAL_FDCAN_ActivateNotification+0xf0>)
 8005fb8:	695a      	ldr	r2, [r3, #20]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	0f9b      	lsrs	r3, r3, #30
 8005fbe:	490b      	ldr	r1, [pc, #44]	; (8005fec <HAL_FDCAN_ActivateNotification+0xf0>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	e008      	b.n	8005fda <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fce:	f043 0202 	orr.w	r2, r3, #2
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
  }
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	3fcfffff 	.word	0x3fcfffff
 8005fec:	4000a800 	.word	0x4000a800

08005ff0 <HAL_FDCAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg FDCAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_DeactivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t InactiveITs)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t ITLineSelection;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006000:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(InactiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d002      	beq.n	800600e <HAL_FDCAN_DeactivateNotification+0x1e>
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d14b      	bne.n	80060a6 <HAL_FDCAN_DeactivateNotification+0xb6>
  {
    /* Disable the selected interrupts */
    __HAL_FDCAN_DISABLE_IT(hfdcan, InactiveITs);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	4b2b      	ldr	r3, [pc, #172]	; (80060c4 <HAL_FDCAN_DeactivateNotification+0xd4>)
 8006018:	4013      	ands	r3, r2
 800601a:	43da      	mvns	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	400a      	ands	r2, r1
 8006022:	655a      	str	r2, [r3, #84]	; 0x54
 8006024:	4b28      	ldr	r3, [pc, #160]	; (80060c8 <HAL_FDCAN_DeactivateNotification+0xd8>)
 8006026:	695a      	ldr	r2, [r3, #20]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	0f9b      	lsrs	r3, r3, #30
 800602c:	43db      	mvns	r3, r3
 800602e:	4926      	ldr	r1, [pc, #152]	; (80060c8 <HAL_FDCAN_DeactivateNotification+0xd8>)
 8006030:	4013      	ands	r3, r2
 8006032:	614b      	str	r3, [r1, #20]

    if ((InactiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <HAL_FDCAN_DeactivateNotification+0x58>
    {
      /* Disable Tx Buffer Transmission Interrupts */
      CLEAR_REG(hfdcan->Instance->TXBTIE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2200      	movs	r2, #0
 8006044:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((InactiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604e:	2b00      	cmp	r3, #0
 8006050:	d004      	beq.n	800605c <HAL_FDCAN_DeactivateNotification+0x6c>
    {
      /* Disable Tx Buffer Cancellation Finished Interrupt */
      CLEAR_REG(hfdcan->Instance->TXBCIE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    ITLineSelection = hfdcan->Instance->ILS;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006062:	60bb      	str	r3, [r7, #8]

    if ((hfdcan->Instance->IE | ITLineSelection) == ITLineSelection)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4313      	orrs	r3, r2
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	429a      	cmp	r2, r3
 8006072:	d107      	bne.n	8006084 <HAL_FDCAN_DeactivateNotification+0x94>
    {
      /* Disable Interrupt line 0 */
      CLEAR_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0201 	bic.w	r2, r2, #1
 8006082:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((hfdcan->Instance->IE & ITLineSelection) == 0U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d107      	bne.n	80060a2 <HAL_FDCAN_DeactivateNotification+0xb2>
    {
      /* Disable Interrupt line 1 */
      CLEAR_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0202 	bic.w	r2, r2, #2
 80060a0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Return function status */
    return HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e008      	b.n	80060b8 <HAL_FDCAN_DeactivateNotification+0xc8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ac:	f043 0202 	orr.w	r2, r3, #2
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
  }
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	3fcfffff 	.word	0x3fcfffff
 80060c8:	4000a800 	.word	0x4000a800

080060cc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b092      	sub	sp, #72	; 0x48
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80060d4:	4b90      	ldr	r3, [pc, #576]	; (8006318 <HAL_FDCAN_IRQHandler+0x24c>)
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	079b      	lsls	r3, r3, #30
 80060da:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80060dc:	4b8e      	ldr	r3, [pc, #568]	; (8006318 <HAL_FDCAN_IRQHandler+0x24c>)
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	079b      	lsls	r3, r3, #30
 80060e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060e4:	4013      	ands	r3, r2
 80060e6:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80060f2:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060fc:	4013      	ands	r3, r2
 80060fe:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006112:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006114:	4013      	ands	r3, r2
 8006116:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006122:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800612c:	4013      	ands	r3, r2
 800612e:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006136:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800613a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006144:	4013      	ands	r3, r2
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8006152:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615c:	4013      	ands	r3, r2
 800615e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616a:	2b00      	cmp	r3, #0
 800616c:	d011      	beq.n	8006192 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006184:	651a      	str	r2, [r3, #80]	; 0x50
 8006186:	4b64      	ldr	r3, [pc, #400]	; (8006318 <HAL_FDCAN_IRQHandler+0x24c>)
 8006188:	2200      	movs	r2, #0
 800618a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fa5a 	bl	8006646 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01e      	beq.n	80061de <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d017      	beq.n	80061de <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80061c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061c2:	4013      	ands	r3, r2
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061ce:	651a      	str	r2, [r3, #80]	; 0x50
 80061d0:	4b51      	ldr	r3, [pc, #324]	; (8006318 <HAL_FDCAN_IRQHandler+0x24c>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80061d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fa0b 	bl	80065f4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80061de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00d      	beq.n	8006200 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061ea:	4b4c      	ldr	r3, [pc, #304]	; (800631c <HAL_FDCAN_IRQHandler+0x250>)
 80061ec:	400b      	ands	r3, r1
 80061ee:	6513      	str	r3, [r2, #80]	; 0x50
 80061f0:	4a49      	ldr	r2, [pc, #292]	; (8006318 <HAL_FDCAN_IRQHandler+0x24c>)
 80061f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f4:	0f9b      	lsrs	r3, r3, #30
 80061f6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80061f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f9c4 	bl	8006588 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00d      	beq.n	8006222 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800620c:	4b43      	ldr	r3, [pc, #268]	; (800631c <HAL_FDCAN_IRQHandler+0x250>)
 800620e:	400b      	ands	r3, r1
 8006210:	6513      	str	r3, [r2, #80]	; 0x50
 8006212:	4a41      	ldr	r2, [pc, #260]	; (8006318 <HAL_FDCAN_IRQHandler+0x24c>)
 8006214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006216:	0f9b      	lsrs	r3, r3, #30
 8006218:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800621a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f9be 	bl	800659e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00d      	beq.n	8006244 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800622e:	4b3b      	ldr	r3, [pc, #236]	; (800631c <HAL_FDCAN_IRQHandler+0x250>)
 8006230:	400b      	ands	r3, r1
 8006232:	6513      	str	r3, [r2, #80]	; 0x50
 8006234:	4a38      	ldr	r2, [pc, #224]	; (8006318 <HAL_FDCAN_IRQHandler+0x24c>)
 8006236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006238:	0f9b      	lsrs	r3, r3, #30
 800623a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800623c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fa fe1e 	bl	8000e80 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00d      	beq.n	8006266 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006250:	4b32      	ldr	r3, [pc, #200]	; (800631c <HAL_FDCAN_IRQHandler+0x250>)
 8006252:	400b      	ands	r3, r1
 8006254:	6513      	str	r3, [r2, #80]	; 0x50
 8006256:	4a30      	ldr	r2, [pc, #192]	; (8006318 <HAL_FDCAN_IRQHandler+0x24c>)
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	0f9b      	lsrs	r3, r3, #30
 800625c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800625e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f9a7 	bl	80065b4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006270:	2b00      	cmp	r3, #0
 8006272:	d011      	beq.n	8006298 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800627a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800628a:	651a      	str	r2, [r3, #80]	; 0x50
 800628c:	4b22      	ldr	r3, [pc, #136]	; (8006318 <HAL_FDCAN_IRQHandler+0x24c>)
 800628e:	2200      	movs	r2, #0
 8006290:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f999 	bl	80065ca <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d01e      	beq.n	80062e4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d017      	beq.n	80062e4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80062bc:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c8:	4013      	ands	r3, r2
 80062ca:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d4:	651a      	str	r2, [r3, #80]	; 0x50
 80062d6:	4b10      	ldr	r3, [pc, #64]	; (8006318 <HAL_FDCAN_IRQHandler+0x24c>)
 80062d8:	2200      	movs	r2, #0
 80062da:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80062dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f97d 	bl	80065de <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d016      	beq.n	8006320 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00f      	beq.n	8006320 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006308:	651a      	str	r2, [r3, #80]	; 0x50
 800630a:	4b03      	ldr	r3, [pc, #12]	; (8006318 <HAL_FDCAN_IRQHandler+0x24c>)
 800630c:	2200      	movs	r2, #0
 800630e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f97a 	bl	800660a <HAL_FDCAN_RxBufferNewMessageCallback>
 8006316:	e003      	b.n	8006320 <HAL_FDCAN_IRQHandler+0x254>
 8006318:	4000a800 	.word	0x4000a800
 800631c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d011      	beq.n	8006352 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006344:	651a      	str	r2, [r3, #80]	; 0x50
 8006346:	4b8d      	ldr	r3, [pc, #564]	; (800657c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006348:	2200      	movs	r2, #0
 800634a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f966 	bl	800661e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d011      	beq.n	8006384 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006376:	651a      	str	r2, [r3, #80]	; 0x50
 8006378:	4b80      	ldr	r3, [pc, #512]	; (800657c <HAL_FDCAN_IRQHandler+0x4b0>)
 800637a:	2200      	movs	r2, #0
 800637c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f957 	bl	8006632 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d016      	beq.n	80063c0 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00f      	beq.n	80063c0 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80063a8:	651a      	str	r2, [r3, #80]	; 0x50
 80063aa:	4b74      	ldr	r3, [pc, #464]	; (800657c <HAL_FDCAN_IRQHandler+0x4b0>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00d      	beq.n	80063e2 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063cc:	4b6c      	ldr	r3, [pc, #432]	; (8006580 <HAL_FDCAN_IRQHandler+0x4b4>)
 80063ce:	400b      	ands	r3, r1
 80063d0:	6513      	str	r3, [r2, #80]	; 0x50
 80063d2:	4a6a      	ldr	r2, [pc, #424]	; (800657c <HAL_FDCAN_IRQHandler+0x4b0>)
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	0f9b      	lsrs	r3, r3, #30
 80063d8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80063da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f946 	bl	800666e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80063e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d011      	beq.n	800640c <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063ee:	4b64      	ldr	r3, [pc, #400]	; (8006580 <HAL_FDCAN_IRQHandler+0x4b4>)
 80063f0:	400b      	ands	r3, r1
 80063f2:	6513      	str	r3, [r2, #80]	; 0x50
 80063f4:	4a61      	ldr	r2, [pc, #388]	; (800657c <HAL_FDCAN_IRQHandler+0x4b0>)
 80063f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f8:	0f9b      	lsrs	r3, r3, #30
 80063fa:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a5c      	ldr	r2, [pc, #368]	; (8006584 <HAL_FDCAN_IRQHandler+0x4b8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	f040 80a6 	bne.w	8006564 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 809e 	beq.w	8006564 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643c:	4013      	ands	r3, r2
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800644a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	4013      	ands	r3, r2
 8006456:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006462:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	4013      	ands	r3, r2
 800646e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800647a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	4013      	ands	r3, r2
 8006486:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006492:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4013      	ands	r3, r2
 800649e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d007      	beq.n	80064b6 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ac:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80064ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f8e7 	bl	8006684 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	6a3a      	ldr	r2, [r7, #32]
 80064c2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80064c4:	6a39      	ldr	r1, [r7, #32]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8e7 	bl	800669a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d01b      	beq.n	8006512 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d014      	beq.n	8006512 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ee:	0c1b      	lsrs	r3, r3, #16
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064fe:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2240      	movs	r2, #64	; 0x40
 8006506:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	6939      	ldr	r1, [r7, #16]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f8cf 	bl	80066b0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d007      	beq.n	8006528 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006520:	69f9      	ldr	r1, [r7, #28]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f8d0 	bl	80066c8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00b      	beq.n	8006546 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	431a      	orrs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f873 	bl	800665a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006574:	bf00      	nop
 8006576:	3748      	adds	r7, #72	; 0x48
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	4000a800 	.word	0x4000a800
 8006580:	3fcfffff 	.word	0x3fcfffff
 8006584:	4000a000 	.word	0x4000a000

08006588 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ec:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80066f6:	4ba7      	ldr	r3, [pc, #668]	; (8006994 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	0091      	lsls	r1, r2, #2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6812      	ldr	r2, [r2, #0]
 8006702:	430b      	orrs	r3, r1
 8006704:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006710:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	041a      	lsls	r2, r3, #16
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	4413      	add	r3, r2
 800672c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006736:	4b97      	ldr	r3, [pc, #604]	; (8006994 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006738:	4013      	ands	r3, r2
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	0091      	lsls	r1, r2, #2
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6812      	ldr	r2, [r2, #0]
 8006742:	430b      	orrs	r3, r1
 8006744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006750:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006758:	041a      	lsls	r2, r3, #16
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	4413      	add	r3, r2
 800676e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006778:	4b86      	ldr	r3, [pc, #536]	; (8006994 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800677a:	4013      	ands	r3, r2
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	0091      	lsls	r1, r2, #2
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	430b      	orrs	r3, r1
 8006786:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006792:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	041a      	lsls	r2, r3, #16
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80067ae:	fb02 f303 	mul.w	r3, r2, r3
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	4413      	add	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80067c0:	4b74      	ldr	r3, [pc, #464]	; (8006994 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	0091      	lsls	r1, r2, #2
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6812      	ldr	r2, [r2, #0]
 80067cc:	430b      	orrs	r3, r1
 80067ce:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067da:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e2:	041a      	lsls	r2, r3, #16
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80067f6:	fb02 f303 	mul.w	r3, r2, r3
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	4413      	add	r3, r2
 80067fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006808:	4b62      	ldr	r3, [pc, #392]	; (8006994 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800680a:	4013      	ands	r3, r2
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	0091      	lsls	r1, r2, #2
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6812      	ldr	r2, [r2, #0]
 8006814:	430b      	orrs	r3, r1
 8006816:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006822:	fb02 f303 	mul.w	r3, r2, r3
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	4413      	add	r3, r2
 800682a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006834:	4b57      	ldr	r3, [pc, #348]	; (8006994 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006836:	4013      	ands	r3, r2
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	0091      	lsls	r1, r2, #2
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	430b      	orrs	r3, r1
 8006842:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800684e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006856:	041a      	lsls	r2, r3, #16
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	4413      	add	r3, r2
 800686c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006876:	4b47      	ldr	r3, [pc, #284]	; (8006994 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006878:	4013      	ands	r3, r2
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	0091      	lsls	r1, r2, #2
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6812      	ldr	r2, [r2, #0]
 8006882:	430b      	orrs	r3, r1
 8006884:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006890:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006898:	041a      	lsls	r2, r3, #16
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80068ac:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b4:	061a      	lsls	r2, r3, #24
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c4:	4b34      	ldr	r3, [pc, #208]	; (8006998 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80068c6:	4413      	add	r3, r2
 80068c8:	009a      	lsls	r2, r3, #2
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	441a      	add	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	441a      	add	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80068fa:	fb01 f303 	mul.w	r3, r1, r3
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	441a      	add	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006912:	fb01 f303 	mul.w	r3, r1, r3
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	441a      	add	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800692a:	fb01 f303 	mul.w	r3, r1, r3
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	441a      	add	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	441a      	add	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800695a:	fb01 f303 	mul.w	r3, r1, r3
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	441a      	add	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006976:	fb01 f303 	mul.w	r3, r1, r3
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698a:	4a04      	ldr	r2, [pc, #16]	; (800699c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d915      	bls.n	80069bc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006990:	e006      	b.n	80069a0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006992:	bf00      	nop
 8006994:	ffff0003 	.word	0xffff0003
 8006998:	10002b00 	.word	0x10002b00
 800699c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069a6:	f043 0220 	orr.w	r2, r3, #32
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2203      	movs	r2, #3
 80069b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e010      	b.n	80069de <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	e005      	b.n	80069d0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	3304      	adds	r3, #4
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d3f3      	bcc.n	80069c4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop

080069ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b089      	sub	sp, #36	; 0x24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80069fa:	4b89      	ldr	r3, [pc, #548]	; (8006c20 <HAL_GPIO_Init+0x234>)
 80069fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069fe:	e194      	b.n	8006d2a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	2101      	movs	r1, #1
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	fa01 f303 	lsl.w	r3, r1, r3
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 8186 	beq.w	8006d24 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d00b      	beq.n	8006a38 <HAL_GPIO_Init+0x4c>
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d007      	beq.n	8006a38 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a2c:	2b11      	cmp	r3, #17
 8006a2e:	d003      	beq.n	8006a38 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b12      	cmp	r3, #18
 8006a36:	d130      	bne.n	8006a9a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	2203      	movs	r2, #3
 8006a44:	fa02 f303 	lsl.w	r3, r2, r3
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a6e:	2201      	movs	r2, #1
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	fa02 f303 	lsl.w	r3, r2, r3
 8006a76:	43db      	mvns	r3, r3
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	091b      	lsrs	r3, r3, #4
 8006a84:	f003 0201 	and.w	r2, r3, #1
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	2203      	movs	r2, #3
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	fa02 f303 	lsl.w	r3, r2, r3
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d003      	beq.n	8006ada <HAL_GPIO_Init+0xee>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2b12      	cmp	r3, #18
 8006ad8:	d123      	bne.n	8006b22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	08da      	lsrs	r2, r3, #3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3208      	adds	r2, #8
 8006ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	f003 0307 	and.w	r3, r3, #7
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	220f      	movs	r2, #15
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	43db      	mvns	r3, r3
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	4013      	ands	r3, r2
 8006afc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	691a      	ldr	r2, [r3, #16]
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	08da      	lsrs	r2, r3, #3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3208      	adds	r2, #8
 8006b1c:	69b9      	ldr	r1, [r7, #24]
 8006b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	005b      	lsls	r3, r3, #1
 8006b2c:	2203      	movs	r2, #3
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	43db      	mvns	r3, r3
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	4013      	ands	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f003 0203 	and.w	r2, r3, #3
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 80e0 	beq.w	8006d24 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b64:	4b2f      	ldr	r3, [pc, #188]	; (8006c24 <HAL_GPIO_Init+0x238>)
 8006b66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b6a:	4a2e      	ldr	r2, [pc, #184]	; (8006c24 <HAL_GPIO_Init+0x238>)
 8006b6c:	f043 0302 	orr.w	r3, r3, #2
 8006b70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006b74:	4b2b      	ldr	r3, [pc, #172]	; (8006c24 <HAL_GPIO_Init+0x238>)
 8006b76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b82:	4a29      	ldr	r2, [pc, #164]	; (8006c28 <HAL_GPIO_Init+0x23c>)
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	089b      	lsrs	r3, r3, #2
 8006b88:	3302      	adds	r3, #2
 8006b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	f003 0303 	and.w	r3, r3, #3
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	220f      	movs	r2, #15
 8006b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9e:	43db      	mvns	r3, r3
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a20      	ldr	r2, [pc, #128]	; (8006c2c <HAL_GPIO_Init+0x240>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d052      	beq.n	8006c54 <HAL_GPIO_Init+0x268>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a1f      	ldr	r2, [pc, #124]	; (8006c30 <HAL_GPIO_Init+0x244>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d031      	beq.n	8006c1a <HAL_GPIO_Init+0x22e>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a1e      	ldr	r2, [pc, #120]	; (8006c34 <HAL_GPIO_Init+0x248>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d02b      	beq.n	8006c16 <HAL_GPIO_Init+0x22a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a1d      	ldr	r2, [pc, #116]	; (8006c38 <HAL_GPIO_Init+0x24c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d025      	beq.n	8006c12 <HAL_GPIO_Init+0x226>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a1c      	ldr	r2, [pc, #112]	; (8006c3c <HAL_GPIO_Init+0x250>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d01f      	beq.n	8006c0e <HAL_GPIO_Init+0x222>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a1b      	ldr	r2, [pc, #108]	; (8006c40 <HAL_GPIO_Init+0x254>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d019      	beq.n	8006c0a <HAL_GPIO_Init+0x21e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a1a      	ldr	r2, [pc, #104]	; (8006c44 <HAL_GPIO_Init+0x258>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_GPIO_Init+0x21a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a19      	ldr	r2, [pc, #100]	; (8006c48 <HAL_GPIO_Init+0x25c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00d      	beq.n	8006c02 <HAL_GPIO_Init+0x216>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a18      	ldr	r2, [pc, #96]	; (8006c4c <HAL_GPIO_Init+0x260>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d007      	beq.n	8006bfe <HAL_GPIO_Init+0x212>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a17      	ldr	r2, [pc, #92]	; (8006c50 <HAL_GPIO_Init+0x264>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d101      	bne.n	8006bfa <HAL_GPIO_Init+0x20e>
 8006bf6:	2309      	movs	r3, #9
 8006bf8:	e02d      	b.n	8006c56 <HAL_GPIO_Init+0x26a>
 8006bfa:	230a      	movs	r3, #10
 8006bfc:	e02b      	b.n	8006c56 <HAL_GPIO_Init+0x26a>
 8006bfe:	2308      	movs	r3, #8
 8006c00:	e029      	b.n	8006c56 <HAL_GPIO_Init+0x26a>
 8006c02:	2307      	movs	r3, #7
 8006c04:	e027      	b.n	8006c56 <HAL_GPIO_Init+0x26a>
 8006c06:	2306      	movs	r3, #6
 8006c08:	e025      	b.n	8006c56 <HAL_GPIO_Init+0x26a>
 8006c0a:	2305      	movs	r3, #5
 8006c0c:	e023      	b.n	8006c56 <HAL_GPIO_Init+0x26a>
 8006c0e:	2304      	movs	r3, #4
 8006c10:	e021      	b.n	8006c56 <HAL_GPIO_Init+0x26a>
 8006c12:	2303      	movs	r3, #3
 8006c14:	e01f      	b.n	8006c56 <HAL_GPIO_Init+0x26a>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e01d      	b.n	8006c56 <HAL_GPIO_Init+0x26a>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e01b      	b.n	8006c56 <HAL_GPIO_Init+0x26a>
 8006c1e:	bf00      	nop
 8006c20:	58000080 	.word	0x58000080
 8006c24:	58024400 	.word	0x58024400
 8006c28:	58000400 	.word	0x58000400
 8006c2c:	58020000 	.word	0x58020000
 8006c30:	58020400 	.word	0x58020400
 8006c34:	58020800 	.word	0x58020800
 8006c38:	58020c00 	.word	0x58020c00
 8006c3c:	58021000 	.word	0x58021000
 8006c40:	58021400 	.word	0x58021400
 8006c44:	58021800 	.word	0x58021800
 8006c48:	58021c00 	.word	0x58021c00
 8006c4c:	58022000 	.word	0x58022000
 8006c50:	58022400 	.word	0x58022400
 8006c54:	2300      	movs	r3, #0
 8006c56:	69fa      	ldr	r2, [r7, #28]
 8006c58:	f002 0203 	and.w	r2, r2, #3
 8006c5c:	0092      	lsls	r2, r2, #2
 8006c5e:	4093      	lsls	r3, r2
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c66:	4938      	ldr	r1, [pc, #224]	; (8006d48 <HAL_GPIO_Init+0x35c>)
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	089b      	lsrs	r3, r3, #2
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	43db      	mvns	r3, r3
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	4013      	ands	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	43db      	mvns	r3, r3
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	4013      	ands	r3, r2
 8006cac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	4013      	ands	r3, r2
 8006d06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	3301      	adds	r3, #1
 8006d28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	fa22 f303 	lsr.w	r3, r2, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f47f ae63 	bne.w	8006a00 <HAL_GPIO_Init+0x14>
  }
}
 8006d3a:	bf00      	nop
 8006d3c:	3724      	adds	r7, #36	; 0x24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	58000400 	.word	0x58000400

08006d4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691a      	ldr	r2, [r3, #16]
 8006d5c:	887b      	ldrh	r3, [r7, #2]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d64:	2301      	movs	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]
 8006d68:	e001      	b.n	8006d6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	807b      	strh	r3, [r7, #2]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d8c:	787b      	ldrb	r3, [r7, #1]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d92:	887a      	ldrh	r2, [r7, #2]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d98:	e003      	b.n	8006da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d9a:	887b      	ldrh	r3, [r7, #2]
 8006d9c:	041a      	lsls	r2, r3, #16
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	619a      	str	r2, [r3, #24]
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006db0:	b08f      	sub	sp, #60	; 0x3c
 8006db2:	af0a      	add	r7, sp, #40	; 0x28
 8006db4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e116      	b.n	8006fee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d106      	bne.n	8006de0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fa fbbc 	bl	8001558 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2203      	movs	r2, #3
 8006de4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d102      	bne.n	8006dfa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f008 f842 	bl	800ee88 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	603b      	str	r3, [r7, #0]
 8006e0a:	687e      	ldr	r6, [r7, #4]
 8006e0c:	466d      	mov	r5, sp
 8006e0e:	f106 0410 	add.w	r4, r6, #16
 8006e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006e1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006e22:	1d33      	adds	r3, r6, #4
 8006e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e26:	6838      	ldr	r0, [r7, #0]
 8006e28:	f007 ffcc 	bl	800edc4 <USB_CoreInit>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2202      	movs	r2, #2
 8006e36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e0d7      	b.n	8006fee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2100      	movs	r1, #0
 8006e44:	4618      	mov	r0, r3
 8006e46:	f008 f830 	bl	800eeaa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]
 8006e4e:	e04a      	b.n	8006ee6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e50:	7bfa      	ldrb	r2, [r7, #15]
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	4613      	mov	r3, r2
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	333d      	adds	r3, #61	; 0x3d
 8006e60:	2201      	movs	r2, #1
 8006e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e64:	7bfa      	ldrb	r2, [r7, #15]
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	1a9b      	subs	r3, r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	440b      	add	r3, r1
 8006e72:	333c      	adds	r3, #60	; 0x3c
 8006e74:	7bfa      	ldrb	r2, [r7, #15]
 8006e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006e78:	7bfa      	ldrb	r2, [r7, #15]
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	b298      	uxth	r0, r3
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	4613      	mov	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	1a9b      	subs	r3, r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	440b      	add	r3, r1
 8006e8a:	3342      	adds	r3, #66	; 0x42
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006e90:	7bfa      	ldrb	r2, [r7, #15]
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	4613      	mov	r3, r2
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	1a9b      	subs	r3, r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	333f      	adds	r3, #63	; 0x3f
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006ea4:	7bfa      	ldrb	r2, [r7, #15]
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	1a9b      	subs	r3, r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	3344      	adds	r3, #68	; 0x44
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006eb8:	7bfa      	ldrb	r2, [r7, #15]
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	3348      	adds	r3, #72	; 0x48
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006ecc:	7bfa      	ldrb	r2, [r7, #15]
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	1a9b      	subs	r3, r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	440b      	add	r3, r1
 8006eda:	3350      	adds	r3, #80	; 0x50
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	73fb      	strb	r3, [r7, #15]
 8006ee6:	7bfa      	ldrb	r2, [r7, #15]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d3af      	bcc.n	8006e50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73fb      	strb	r3, [r7, #15]
 8006ef4:	e044      	b.n	8006f80 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006ef6:	7bfa      	ldrb	r2, [r7, #15]
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	1a9b      	subs	r3, r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006f0c:	7bfa      	ldrb	r2, [r7, #15]
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	4613      	mov	r3, r2
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006f1e:	7bfa      	ldrb	r2, [r7, #15]
 8006f20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006f22:	7bfa      	ldrb	r2, [r7, #15]
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	4613      	mov	r3, r2
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	1a9b      	subs	r3, r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006f34:	2200      	movs	r2, #0
 8006f36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f38:	7bfa      	ldrb	r2, [r7, #15]
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	1a9b      	subs	r3, r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f4e:	7bfa      	ldrb	r2, [r7, #15]
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	1a9b      	subs	r3, r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f64:	7bfa      	ldrb	r2, [r7, #15]
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006f76:	2200      	movs	r2, #0
 8006f78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
 8006f80:	7bfa      	ldrb	r2, [r7, #15]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d3b5      	bcc.n	8006ef6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	687e      	ldr	r6, [r7, #4]
 8006f92:	466d      	mov	r5, sp
 8006f94:	f106 0410 	add.w	r4, r6, #16
 8006f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fa0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006fa4:	e885 0003 	stmia.w	r5, {r0, r1}
 8006fa8:	1d33      	adds	r3, r6, #4
 8006faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fac:	6838      	ldr	r0, [r7, #0]
 8006fae:	f007 ffa7 	bl	800ef00 <USB_DevInit>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e014      	b.n	8006fee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d102      	bne.n	8006fe2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f80b 	bl	8006ff8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f008 f949 	bl	800f27e <USB_DevDisconnect>

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006ff8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <HAL_PCDEx_ActivateLPM+0x44>)
 8007028:	4313      	orrs	r3, r2
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	10000003 	.word	0x10000003

08007040 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007048:	4b19      	ldr	r3, [pc, #100]	; (80070b0 <HAL_PWREx_ConfigSupply+0x70>)
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b04      	cmp	r3, #4
 8007052:	d00a      	beq.n	800706a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007054:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <HAL_PWREx_ConfigSupply+0x70>)
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	429a      	cmp	r2, r3
 8007060:	d001      	beq.n	8007066 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e01f      	b.n	80070a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	e01d      	b.n	80070a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800706a:	4b11      	ldr	r3, [pc, #68]	; (80070b0 <HAL_PWREx_ConfigSupply+0x70>)
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f023 0207 	bic.w	r2, r3, #7
 8007072:	490f      	ldr	r1, [pc, #60]	; (80070b0 <HAL_PWREx_ConfigSupply+0x70>)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4313      	orrs	r3, r2
 8007078:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800707a:	f7fa fc23 	bl	80018c4 <HAL_GetTick>
 800707e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007080:	e009      	b.n	8007096 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007082:	f7fa fc1f 	bl	80018c4 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007090:	d901      	bls.n	8007096 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e007      	b.n	80070a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007096:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <HAL_PWREx_ConfigSupply+0x70>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800709e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a2:	d1ee      	bne.n	8007082 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	58024800 	.word	0x58024800

080070b4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	4a04      	ldr	r2, [pc, #16]	; (80070d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80070be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070c2:	60d3      	str	r3, [r2, #12]
}
 80070c4:	bf00      	nop
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	58024800 	.word	0x58024800

080070d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08c      	sub	sp, #48	; 0x30
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e3c4      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 8087 	beq.w	8007202 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070f4:	4ba2      	ldr	r3, [pc, #648]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070fe:	4ba0      	ldr	r3, [pc, #640]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007106:	2b10      	cmp	r3, #16
 8007108:	d007      	beq.n	800711a <HAL_RCC_OscConfig+0x46>
 800710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710c:	2b18      	cmp	r3, #24
 800710e:	d110      	bne.n	8007132 <HAL_RCC_OscConfig+0x5e>
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d10b      	bne.n	8007132 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800711a:	4b99      	ldr	r3, [pc, #612]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d06c      	beq.n	8007200 <HAL_RCC_OscConfig+0x12c>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d168      	bne.n	8007200 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e39e      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800713a:	d106      	bne.n	800714a <HAL_RCC_OscConfig+0x76>
 800713c:	4b90      	ldr	r3, [pc, #576]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a8f      	ldr	r2, [pc, #572]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	e02e      	b.n	80071a8 <HAL_RCC_OscConfig+0xd4>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10c      	bne.n	800716c <HAL_RCC_OscConfig+0x98>
 8007152:	4b8b      	ldr	r3, [pc, #556]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a8a      	ldr	r2, [pc, #552]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	4b88      	ldr	r3, [pc, #544]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a87      	ldr	r2, [pc, #540]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	e01d      	b.n	80071a8 <HAL_RCC_OscConfig+0xd4>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007174:	d10c      	bne.n	8007190 <HAL_RCC_OscConfig+0xbc>
 8007176:	4b82      	ldr	r3, [pc, #520]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a81      	ldr	r2, [pc, #516]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 800717c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	4b7f      	ldr	r3, [pc, #508]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a7e      	ldr	r2, [pc, #504]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	e00b      	b.n	80071a8 <HAL_RCC_OscConfig+0xd4>
 8007190:	4b7b      	ldr	r3, [pc, #492]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a7a      	ldr	r2, [pc, #488]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	4b78      	ldr	r3, [pc, #480]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a77      	ldr	r2, [pc, #476]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 80071a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d013      	beq.n	80071d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b0:	f7fa fb88 	bl	80018c4 <HAL_GetTick>
 80071b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071b8:	f7fa fb84 	bl	80018c4 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b64      	cmp	r3, #100	; 0x64
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e352      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071ca:	4b6d      	ldr	r3, [pc, #436]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0f0      	beq.n	80071b8 <HAL_RCC_OscConfig+0xe4>
 80071d6:	e014      	b.n	8007202 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7fa fb74 	bl	80018c4 <HAL_GetTick>
 80071dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071e0:	f7fa fb70 	bl	80018c4 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b64      	cmp	r3, #100	; 0x64
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e33e      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071f2:	4b63      	ldr	r3, [pc, #396]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1f0      	bne.n	80071e0 <HAL_RCC_OscConfig+0x10c>
 80071fe:	e000      	b.n	8007202 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8092 	beq.w	8007334 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007210:	4b5b      	ldr	r3, [pc, #364]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007218:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800721a:	4b59      	ldr	r3, [pc, #356]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 800721c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <HAL_RCC_OscConfig+0x162>
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	2b18      	cmp	r3, #24
 800722a:	d12d      	bne.n	8007288 <HAL_RCC_OscConfig+0x1b4>
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d128      	bne.n	8007288 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007236:	4b52      	ldr	r3, [pc, #328]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <HAL_RCC_OscConfig+0x17a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e310      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800724e:	f7fa fb67 	bl	8001920 <HAL_GetREVID>
 8007252:	4602      	mov	r2, r0
 8007254:	f241 0303 	movw	r3, #4099	; 0x1003
 8007258:	429a      	cmp	r2, r3
 800725a:	d80a      	bhi.n	8007272 <HAL_RCC_OscConfig+0x19e>
 800725c:	4b48      	ldr	r3, [pc, #288]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	031b      	lsls	r3, r3, #12
 800726a:	4945      	ldr	r1, [pc, #276]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 800726c:	4313      	orrs	r3, r2
 800726e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007270:	e060      	b.n	8007334 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007272:	4b43      	ldr	r3, [pc, #268]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	061b      	lsls	r3, r3, #24
 8007280:	493f      	ldr	r1, [pc, #252]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007282:	4313      	orrs	r3, r2
 8007284:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007286:	e055      	b.n	8007334 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d038      	beq.n	8007302 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007290:	4b3b      	ldr	r3, [pc, #236]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f023 0219 	bic.w	r2, r3, #25
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	4938      	ldr	r1, [pc, #224]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a2:	f7fa fb0f 	bl	80018c4 <HAL_GetTick>
 80072a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072a8:	e008      	b.n	80072bc <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072aa:	f7fa fb0b 	bl	80018c4 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e2d9      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072bc:	4b30      	ldr	r3, [pc, #192]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0f0      	beq.n	80072aa <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072c8:	f7fa fb2a 	bl	8001920 <HAL_GetREVID>
 80072cc:	4602      	mov	r2, r0
 80072ce:	f241 0303 	movw	r3, #4099	; 0x1003
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d80a      	bhi.n	80072ec <HAL_RCC_OscConfig+0x218>
 80072d6:	4b2a      	ldr	r3, [pc, #168]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	031b      	lsls	r3, r3, #12
 80072e4:	4926      	ldr	r1, [pc, #152]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	604b      	str	r3, [r1, #4]
 80072ea:	e023      	b.n	8007334 <HAL_RCC_OscConfig+0x260>
 80072ec:	4b24      	ldr	r3, [pc, #144]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	061b      	lsls	r3, r3, #24
 80072fa:	4921      	ldr	r1, [pc, #132]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	604b      	str	r3, [r1, #4]
 8007300:	e018      	b.n	8007334 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007302:	4b1f      	ldr	r3, [pc, #124]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a1e      	ldr	r2, [pc, #120]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730e:	f7fa fad9 	bl	80018c4 <HAL_GetTick>
 8007312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007314:	e008      	b.n	8007328 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007316:	f7fa fad5 	bl	80018c4 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d901      	bls.n	8007328 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e2a3      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007328:	4b15      	ldr	r3, [pc, #84]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f0      	bne.n	8007316 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0310 	and.w	r3, r3, #16
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8091 	beq.w	8007464 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007342:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800734a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800734c:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	2b08      	cmp	r3, #8
 8007356:	d007      	beq.n	8007368 <HAL_RCC_OscConfig+0x294>
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	2b18      	cmp	r3, #24
 800735c:	d12f      	bne.n	80073be <HAL_RCC_OscConfig+0x2ea>
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f003 0303 	and.w	r3, r3, #3
 8007364:	2b01      	cmp	r3, #1
 8007366:	d12a      	bne.n	80073be <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007368:	4b05      	ldr	r3, [pc, #20]	; (8007380 <HAL_RCC_OscConfig+0x2ac>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007370:	2b00      	cmp	r3, #0
 8007372:	d007      	beq.n	8007384 <HAL_RCC_OscConfig+0x2b0>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	2b80      	cmp	r3, #128	; 0x80
 800737a:	d003      	beq.n	8007384 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e277      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
 8007380:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007384:	f7fa facc 	bl	8001920 <HAL_GetREVID>
 8007388:	4602      	mov	r2, r0
 800738a:	f241 0303 	movw	r3, #4099	; 0x1003
 800738e:	429a      	cmp	r2, r3
 8007390:	d80a      	bhi.n	80073a8 <HAL_RCC_OscConfig+0x2d4>
 8007392:	4ba2      	ldr	r3, [pc, #648]	; (800761c <HAL_RCC_OscConfig+0x548>)
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	069b      	lsls	r3, r3, #26
 80073a0:	499e      	ldr	r1, [pc, #632]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80073a6:	e05d      	b.n	8007464 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073a8:	4b9c      	ldr	r3, [pc, #624]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	061b      	lsls	r3, r3, #24
 80073b6:	4999      	ldr	r1, [pc, #612]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80073bc:	e052      	b.n	8007464 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d035      	beq.n	8007432 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80073c6:	4b95      	ldr	r3, [pc, #596]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a94      	ldr	r2, [pc, #592]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80073cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d2:	f7fa fa77 	bl	80018c4 <HAL_GetTick>
 80073d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073d8:	e008      	b.n	80073ec <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80073da:	f7fa fa73 	bl	80018c4 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e241      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073ec:	4b8b      	ldr	r3, [pc, #556]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0f0      	beq.n	80073da <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073f8:	f7fa fa92 	bl	8001920 <HAL_GetREVID>
 80073fc:	4602      	mov	r2, r0
 80073fe:	f241 0303 	movw	r3, #4099	; 0x1003
 8007402:	429a      	cmp	r2, r3
 8007404:	d80a      	bhi.n	800741c <HAL_RCC_OscConfig+0x348>
 8007406:	4b85      	ldr	r3, [pc, #532]	; (800761c <HAL_RCC_OscConfig+0x548>)
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	069b      	lsls	r3, r3, #26
 8007414:	4981      	ldr	r1, [pc, #516]	; (800761c <HAL_RCC_OscConfig+0x548>)
 8007416:	4313      	orrs	r3, r2
 8007418:	604b      	str	r3, [r1, #4]
 800741a:	e023      	b.n	8007464 <HAL_RCC_OscConfig+0x390>
 800741c:	4b7f      	ldr	r3, [pc, #508]	; (800761c <HAL_RCC_OscConfig+0x548>)
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	061b      	lsls	r3, r3, #24
 800742a:	497c      	ldr	r1, [pc, #496]	; (800761c <HAL_RCC_OscConfig+0x548>)
 800742c:	4313      	orrs	r3, r2
 800742e:	60cb      	str	r3, [r1, #12]
 8007430:	e018      	b.n	8007464 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007432:	4b7a      	ldr	r3, [pc, #488]	; (800761c <HAL_RCC_OscConfig+0x548>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a79      	ldr	r2, [pc, #484]	; (800761c <HAL_RCC_OscConfig+0x548>)
 8007438:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800743c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800743e:	f7fa fa41 	bl	80018c4 <HAL_GetTick>
 8007442:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007444:	e008      	b.n	8007458 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007446:	f7fa fa3d 	bl	80018c4 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b02      	cmp	r3, #2
 8007452:	d901      	bls.n	8007458 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e20b      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007458:	4b70      	ldr	r3, [pc, #448]	; (800761c <HAL_RCC_OscConfig+0x548>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1f0      	bne.n	8007446 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b00      	cmp	r3, #0
 800746e:	d036      	beq.n	80074de <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d019      	beq.n	80074ac <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007478:	4b68      	ldr	r3, [pc, #416]	; (800761c <HAL_RCC_OscConfig+0x548>)
 800747a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747c:	4a67      	ldr	r2, [pc, #412]	; (800761c <HAL_RCC_OscConfig+0x548>)
 800747e:	f043 0301 	orr.w	r3, r3, #1
 8007482:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007484:	f7fa fa1e 	bl	80018c4 <HAL_GetTick>
 8007488:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800748a:	e008      	b.n	800749e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800748c:	f7fa fa1a 	bl	80018c4 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e1e8      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800749e:	4b5f      	ldr	r3, [pc, #380]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80074a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0f0      	beq.n	800748c <HAL_RCC_OscConfig+0x3b8>
 80074aa:	e018      	b.n	80074de <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074ac:	4b5b      	ldr	r3, [pc, #364]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80074ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074b0:	4a5a      	ldr	r2, [pc, #360]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80074b2:	f023 0301 	bic.w	r3, r3, #1
 80074b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b8:	f7fa fa04 	bl	80018c4 <HAL_GetTick>
 80074bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80074be:	e008      	b.n	80074d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074c0:	f7fa fa00 	bl	80018c4 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e1ce      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80074d2:	4b52      	ldr	r3, [pc, #328]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80074d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1f0      	bne.n	80074c0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d036      	beq.n	8007558 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d019      	beq.n	8007526 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074f2:	4b4a      	ldr	r3, [pc, #296]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a49      	ldr	r2, [pc, #292]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80074f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074fe:	f7fa f9e1 	bl	80018c4 <HAL_GetTick>
 8007502:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007504:	e008      	b.n	8007518 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007506:	f7fa f9dd 	bl	80018c4 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b02      	cmp	r3, #2
 8007512:	d901      	bls.n	8007518 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e1ab      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007518:	4b40      	ldr	r3, [pc, #256]	; (800761c <HAL_RCC_OscConfig+0x548>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0f0      	beq.n	8007506 <HAL_RCC_OscConfig+0x432>
 8007524:	e018      	b.n	8007558 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007526:	4b3d      	ldr	r3, [pc, #244]	; (800761c <HAL_RCC_OscConfig+0x548>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a3c      	ldr	r2, [pc, #240]	; (800761c <HAL_RCC_OscConfig+0x548>)
 800752c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007530:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007532:	f7fa f9c7 	bl	80018c4 <HAL_GetTick>
 8007536:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007538:	e008      	b.n	800754c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800753a:	f7fa f9c3 	bl	80018c4 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e191      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800754c:	4b33      	ldr	r3, [pc, #204]	; (800761c <HAL_RCC_OscConfig+0x548>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1f0      	bne.n	800753a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8086 	beq.w	8007672 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007566:	4b2e      	ldr	r3, [pc, #184]	; (8007620 <HAL_RCC_OscConfig+0x54c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a2d      	ldr	r2, [pc, #180]	; (8007620 <HAL_RCC_OscConfig+0x54c>)
 800756c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007570:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007572:	f7fa f9a7 	bl	80018c4 <HAL_GetTick>
 8007576:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007578:	e008      	b.n	800758c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800757a:	f7fa f9a3 	bl	80018c4 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	2b64      	cmp	r3, #100	; 0x64
 8007586:	d901      	bls.n	800758c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e171      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800758c:	4b24      	ldr	r3, [pc, #144]	; (8007620 <HAL_RCC_OscConfig+0x54c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0f0      	beq.n	800757a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d106      	bne.n	80075ae <HAL_RCC_OscConfig+0x4da>
 80075a0:	4b1e      	ldr	r3, [pc, #120]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a4:	4a1d      	ldr	r2, [pc, #116]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80075a6:	f043 0301 	orr.w	r3, r3, #1
 80075aa:	6713      	str	r3, [r2, #112]	; 0x70
 80075ac:	e02d      	b.n	800760a <HAL_RCC_OscConfig+0x536>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10c      	bne.n	80075d0 <HAL_RCC_OscConfig+0x4fc>
 80075b6:	4b19      	ldr	r3, [pc, #100]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80075b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ba:	4a18      	ldr	r2, [pc, #96]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80075bc:	f023 0301 	bic.w	r3, r3, #1
 80075c0:	6713      	str	r3, [r2, #112]	; 0x70
 80075c2:	4b16      	ldr	r3, [pc, #88]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80075c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c6:	4a15      	ldr	r2, [pc, #84]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80075c8:	f023 0304 	bic.w	r3, r3, #4
 80075cc:	6713      	str	r3, [r2, #112]	; 0x70
 80075ce:	e01c      	b.n	800760a <HAL_RCC_OscConfig+0x536>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	2b05      	cmp	r3, #5
 80075d6:	d10c      	bne.n	80075f2 <HAL_RCC_OscConfig+0x51e>
 80075d8:	4b10      	ldr	r3, [pc, #64]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80075da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075dc:	4a0f      	ldr	r2, [pc, #60]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80075de:	f043 0304 	orr.w	r3, r3, #4
 80075e2:	6713      	str	r3, [r2, #112]	; 0x70
 80075e4:	4b0d      	ldr	r3, [pc, #52]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80075e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e8:	4a0c      	ldr	r2, [pc, #48]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80075ea:	f043 0301 	orr.w	r3, r3, #1
 80075ee:	6713      	str	r3, [r2, #112]	; 0x70
 80075f0:	e00b      	b.n	800760a <HAL_RCC_OscConfig+0x536>
 80075f2:	4b0a      	ldr	r3, [pc, #40]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80075f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f6:	4a09      	ldr	r2, [pc, #36]	; (800761c <HAL_RCC_OscConfig+0x548>)
 80075f8:	f023 0301 	bic.w	r3, r3, #1
 80075fc:	6713      	str	r3, [r2, #112]	; 0x70
 80075fe:	4b07      	ldr	r3, [pc, #28]	; (800761c <HAL_RCC_OscConfig+0x548>)
 8007600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007602:	4a06      	ldr	r2, [pc, #24]	; (800761c <HAL_RCC_OscConfig+0x548>)
 8007604:	f023 0304 	bic.w	r3, r3, #4
 8007608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d01a      	beq.n	8007648 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007612:	f7fa f957 	bl	80018c4 <HAL_GetTick>
 8007616:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007618:	e00f      	b.n	800763a <HAL_RCC_OscConfig+0x566>
 800761a:	bf00      	nop
 800761c:	58024400 	.word	0x58024400
 8007620:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007624:	f7fa f94e 	bl	80018c4 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007632:	4293      	cmp	r3, r2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e11a      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800763a:	4b8f      	ldr	r3, [pc, #572]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 800763c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0ee      	beq.n	8007624 <HAL_RCC_OscConfig+0x550>
 8007646:	e014      	b.n	8007672 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007648:	f7fa f93c 	bl	80018c4 <HAL_GetTick>
 800764c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800764e:	e00a      	b.n	8007666 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007650:	f7fa f938 	bl	80018c4 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	f241 3288 	movw	r2, #5000	; 0x1388
 800765e:	4293      	cmp	r3, r2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e104      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007666:	4b84      	ldr	r3, [pc, #528]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1ee      	bne.n	8007650 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 80f9 	beq.w	800786e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800767c:	4b7e      	ldr	r3, [pc, #504]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007684:	2b18      	cmp	r3, #24
 8007686:	f000 80b4 	beq.w	80077f2 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	2b02      	cmp	r3, #2
 8007690:	f040 8095 	bne.w	80077be <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007694:	4b78      	ldr	r3, [pc, #480]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a77      	ldr	r2, [pc, #476]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 800769a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800769e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a0:	f7fa f910 	bl	80018c4 <HAL_GetTick>
 80076a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076a6:	e008      	b.n	80076ba <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076a8:	f7fa f90c 	bl	80018c4 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e0da      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076ba:	4b6f      	ldr	r3, [pc, #444]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1f0      	bne.n	80076a8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076c6:	4b6c      	ldr	r3, [pc, #432]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 80076c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076ca:	4b6c      	ldr	r3, [pc, #432]	; (800787c <HAL_RCC_OscConfig+0x7a8>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076d6:	0112      	lsls	r2, r2, #4
 80076d8:	430a      	orrs	r2, r1
 80076da:	4967      	ldr	r1, [pc, #412]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	628b      	str	r3, [r1, #40]	; 0x28
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e4:	3b01      	subs	r3, #1
 80076e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ee:	3b01      	subs	r3, #1
 80076f0:	025b      	lsls	r3, r3, #9
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	431a      	orrs	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	3b01      	subs	r3, #1
 80076fc:	041b      	lsls	r3, r3, #16
 80076fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007702:	431a      	orrs	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007708:	3b01      	subs	r3, #1
 800770a:	061b      	lsls	r3, r3, #24
 800770c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007710:	4959      	ldr	r1, [pc, #356]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007712:	4313      	orrs	r3, r2
 8007714:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007716:	4b58      	ldr	r3, [pc, #352]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	4a57      	ldr	r2, [pc, #348]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 800771c:	f023 0301 	bic.w	r3, r3, #1
 8007720:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007722:	4b55      	ldr	r3, [pc, #340]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007726:	4b56      	ldr	r3, [pc, #344]	; (8007880 <HAL_RCC_OscConfig+0x7ac>)
 8007728:	4013      	ands	r3, r2
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800772e:	00d2      	lsls	r2, r2, #3
 8007730:	4951      	ldr	r1, [pc, #324]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007732:	4313      	orrs	r3, r2
 8007734:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007736:	4b50      	ldr	r3, [pc, #320]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773a:	f023 020c 	bic.w	r2, r3, #12
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	494d      	ldr	r1, [pc, #308]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007744:	4313      	orrs	r3, r2
 8007746:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007748:	4b4b      	ldr	r3, [pc, #300]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	f023 0202 	bic.w	r2, r3, #2
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007754:	4948      	ldr	r1, [pc, #288]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007756:	4313      	orrs	r3, r2
 8007758:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800775a:	4b47      	ldr	r3, [pc, #284]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	4a46      	ldr	r2, [pc, #280]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007764:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007766:	4b44      	ldr	r3, [pc, #272]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776a:	4a43      	ldr	r2, [pc, #268]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 800776c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007770:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007772:	4b41      	ldr	r3, [pc, #260]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007776:	4a40      	ldr	r2, [pc, #256]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800777c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800777e:	4b3e      	ldr	r3, [pc, #248]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	4a3d      	ldr	r2, [pc, #244]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007784:	f043 0301 	orr.w	r3, r3, #1
 8007788:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800778a:	4b3b      	ldr	r3, [pc, #236]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a3a      	ldr	r2, [pc, #232]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 8007790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007796:	f7fa f895 	bl	80018c4 <HAL_GetTick>
 800779a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800779c:	e008      	b.n	80077b0 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800779e:	f7fa f891 	bl	80018c4 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d901      	bls.n	80077b0 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e05f      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80077b0:	4b31      	ldr	r3, [pc, #196]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0f0      	beq.n	800779e <HAL_RCC_OscConfig+0x6ca>
 80077bc:	e057      	b.n	800786e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077be:	4b2e      	ldr	r3, [pc, #184]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a2d      	ldr	r2, [pc, #180]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 80077c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ca:	f7fa f87b 	bl	80018c4 <HAL_GetTick>
 80077ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077d0:	e008      	b.n	80077e4 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077d2:	f7fa f877 	bl	80018c4 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e045      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077e4:	4b24      	ldr	r3, [pc, #144]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1f0      	bne.n	80077d2 <HAL_RCC_OscConfig+0x6fe>
 80077f0:	e03d      	b.n	800786e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80077f2:	4b21      	ldr	r3, [pc, #132]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80077f8:	4b1f      	ldr	r3, [pc, #124]	; (8007878 <HAL_RCC_OscConfig+0x7a4>)
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	2b01      	cmp	r3, #1
 8007804:	d031      	beq.n	800786a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f003 0203 	and.w	r2, r3, #3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007810:	429a      	cmp	r2, r3
 8007812:	d12a      	bne.n	800786a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	091b      	lsrs	r3, r3, #4
 8007818:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007820:	429a      	cmp	r2, r3
 8007822:	d122      	bne.n	800786a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007830:	429a      	cmp	r2, r3
 8007832:	d11a      	bne.n	800786a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	0a5b      	lsrs	r3, r3, #9
 8007838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007840:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007842:	429a      	cmp	r2, r3
 8007844:	d111      	bne.n	800786a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	0c1b      	lsrs	r3, r3, #16
 800784a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007854:	429a      	cmp	r2, r3
 8007856:	d108      	bne.n	800786a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	0e1b      	lsrs	r3, r3, #24
 800785c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007864:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007866:	429a      	cmp	r2, r3
 8007868:	d001      	beq.n	800786e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3730      	adds	r7, #48	; 0x30
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	58024400 	.word	0x58024400
 800787c:	fffffc0c 	.word	0xfffffc0c
 8007880:	ffff0007 	.word	0xffff0007

08007884 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e19c      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007898:	4b8a      	ldr	r3, [pc, #552]	; (8007ac4 <HAL_RCC_ClockConfig+0x240>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 030f 	and.w	r3, r3, #15
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d910      	bls.n	80078c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078a6:	4b87      	ldr	r3, [pc, #540]	; (8007ac4 <HAL_RCC_ClockConfig+0x240>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f023 020f 	bic.w	r2, r3, #15
 80078ae:	4985      	ldr	r1, [pc, #532]	; (8007ac4 <HAL_RCC_ClockConfig+0x240>)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078b6:	4b83      	ldr	r3, [pc, #524]	; (8007ac4 <HAL_RCC_ClockConfig+0x240>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 030f 	and.w	r3, r3, #15
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d001      	beq.n	80078c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e184      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d010      	beq.n	80078f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691a      	ldr	r2, [r3, #16]
 80078d8:	4b7b      	ldr	r3, [pc, #492]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d908      	bls.n	80078f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078e4:	4b78      	ldr	r3, [pc, #480]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	4975      	ldr	r1, [pc, #468]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0308 	and.w	r3, r3, #8
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d010      	beq.n	8007924 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	695a      	ldr	r2, [r3, #20]
 8007906:	4b70      	ldr	r3, [pc, #448]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800790e:	429a      	cmp	r2, r3
 8007910:	d908      	bls.n	8007924 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007912:	4b6d      	ldr	r3, [pc, #436]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	496a      	ldr	r1, [pc, #424]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007920:	4313      	orrs	r3, r2
 8007922:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b00      	cmp	r3, #0
 800792e:	d010      	beq.n	8007952 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699a      	ldr	r2, [r3, #24]
 8007934:	4b64      	ldr	r3, [pc, #400]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800793c:	429a      	cmp	r2, r3
 800793e:	d908      	bls.n	8007952 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007940:	4b61      	ldr	r3, [pc, #388]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	495e      	ldr	r1, [pc, #376]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 800794e:	4313      	orrs	r3, r2
 8007950:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b00      	cmp	r3, #0
 800795c:	d010      	beq.n	8007980 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69da      	ldr	r2, [r3, #28]
 8007962:	4b59      	ldr	r3, [pc, #356]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800796a:	429a      	cmp	r2, r3
 800796c:	d908      	bls.n	8007980 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800796e:	4b56      	ldr	r3, [pc, #344]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	4953      	ldr	r1, [pc, #332]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 800797c:	4313      	orrs	r3, r2
 800797e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d010      	beq.n	80079ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68da      	ldr	r2, [r3, #12]
 8007990:	4b4d      	ldr	r3, [pc, #308]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	429a      	cmp	r2, r3
 800799a:	d908      	bls.n	80079ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800799c:	4b4a      	ldr	r3, [pc, #296]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	f023 020f 	bic.w	r2, r3, #15
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	4947      	ldr	r1, [pc, #284]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d055      	beq.n	8007a66 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80079ba:	4b43      	ldr	r3, [pc, #268]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	4940      	ldr	r1, [pc, #256]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d107      	bne.n	80079e4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079d4:	4b3c      	ldr	r3, [pc, #240]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d121      	bne.n	8007a24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e0f6      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d107      	bne.n	80079fc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079ec:	4b36      	ldr	r3, [pc, #216]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d115      	bne.n	8007a24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e0ea      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d107      	bne.n	8007a14 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a04:	4b30      	ldr	r3, [pc, #192]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d109      	bne.n	8007a24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e0de      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a14:	4b2c      	ldr	r3, [pc, #176]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e0d6      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a24:	4b28      	ldr	r3, [pc, #160]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f023 0207 	bic.w	r2, r3, #7
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	4925      	ldr	r1, [pc, #148]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a36:	f7f9 ff45 	bl	80018c4 <HAL_GetTick>
 8007a3a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a3c:	e00a      	b.n	8007a54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a3e:	f7f9 ff41 	bl	80018c4 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d901      	bls.n	8007a54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e0be      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a54:	4b1c      	ldr	r3, [pc, #112]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	00db      	lsls	r3, r3, #3
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d1eb      	bne.n	8007a3e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d010      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	4b14      	ldr	r3, [pc, #80]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	f003 030f 	and.w	r3, r3, #15
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d208      	bcs.n	8007a94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a82:	4b11      	ldr	r3, [pc, #68]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	f023 020f 	bic.w	r2, r3, #15
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	490e      	ldr	r1, [pc, #56]	; (8007ac8 <HAL_RCC_ClockConfig+0x244>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a94:	4b0b      	ldr	r3, [pc, #44]	; (8007ac4 <HAL_RCC_ClockConfig+0x240>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 030f 	and.w	r3, r3, #15
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d214      	bcs.n	8007acc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aa2:	4b08      	ldr	r3, [pc, #32]	; (8007ac4 <HAL_RCC_ClockConfig+0x240>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f023 020f 	bic.w	r2, r3, #15
 8007aaa:	4906      	ldr	r1, [pc, #24]	; (8007ac4 <HAL_RCC_ClockConfig+0x240>)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ab2:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <HAL_RCC_ClockConfig+0x240>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d005      	beq.n	8007acc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e086      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x34e>
 8007ac4:	52002000 	.word	0x52002000
 8007ac8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d010      	beq.n	8007afa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691a      	ldr	r2, [r3, #16]
 8007adc:	4b3f      	ldr	r3, [pc, #252]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d208      	bcs.n	8007afa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ae8:	4b3c      	ldr	r3, [pc, #240]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	4939      	ldr	r1, [pc, #228]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0308 	and.w	r3, r3, #8
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d010      	beq.n	8007b28 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	695a      	ldr	r2, [r3, #20]
 8007b0a:	4b34      	ldr	r3, [pc, #208]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d208      	bcs.n	8007b28 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b16:	4b31      	ldr	r3, [pc, #196]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	492e      	ldr	r1, [pc, #184]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d010      	beq.n	8007b56 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699a      	ldr	r2, [r3, #24]
 8007b38:	4b28      	ldr	r3, [pc, #160]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d208      	bcs.n	8007b56 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b44:	4b25      	ldr	r3, [pc, #148]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	4922      	ldr	r1, [pc, #136]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d010      	beq.n	8007b84 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	69da      	ldr	r2, [r3, #28]
 8007b66:	4b1d      	ldr	r3, [pc, #116]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d208      	bcs.n	8007b84 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007b72:	4b1a      	ldr	r3, [pc, #104]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	4917      	ldr	r1, [pc, #92]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b84:	f000 f834 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 8007b88:	4601      	mov	r1, r0
 8007b8a:	4b14      	ldr	r3, [pc, #80]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	0a1b      	lsrs	r3, r3, #8
 8007b90:	f003 030f 	and.w	r3, r3, #15
 8007b94:	4a12      	ldr	r2, [pc, #72]	; (8007be0 <HAL_RCC_ClockConfig+0x35c>)
 8007b96:	5cd3      	ldrb	r3, [r2, r3]
 8007b98:	f003 031f 	and.w	r3, r3, #31
 8007b9c:	fa21 f303 	lsr.w	r3, r1, r3
 8007ba0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ba2:	4b0e      	ldr	r3, [pc, #56]	; (8007bdc <HAL_RCC_ClockConfig+0x358>)
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	f003 030f 	and.w	r3, r3, #15
 8007baa:	4a0d      	ldr	r2, [pc, #52]	; (8007be0 <HAL_RCC_ClockConfig+0x35c>)
 8007bac:	5cd3      	ldrb	r3, [r2, r3]
 8007bae:	f003 031f 	and.w	r3, r3, #31
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb8:	4a0a      	ldr	r2, [pc, #40]	; (8007be4 <HAL_RCC_ClockConfig+0x360>)
 8007bba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007bbc:	4a0a      	ldr	r2, [pc, #40]	; (8007be8 <HAL_RCC_ClockConfig+0x364>)
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007bc2:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <HAL_RCC_ClockConfig+0x368>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7f9 fe32 	bl	8001830 <HAL_InitTick>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	58024400 	.word	0x58024400
 8007be0:	08014314 	.word	0x08014314
 8007be4:	24000004 	.word	0x24000004
 8007be8:	24000000 	.word	0x24000000
 8007bec:	24000008 	.word	0x24000008

08007bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b089      	sub	sp, #36	; 0x24
 8007bf4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bf6:	4baf      	ldr	r3, [pc, #700]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bfe:	2b18      	cmp	r3, #24
 8007c00:	f200 814e 	bhi.w	8007ea0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8007c04:	a201      	add	r2, pc, #4	; (adr r2, 8007c0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0a:	bf00      	nop
 8007c0c:	08007c71 	.word	0x08007c71
 8007c10:	08007ea1 	.word	0x08007ea1
 8007c14:	08007ea1 	.word	0x08007ea1
 8007c18:	08007ea1 	.word	0x08007ea1
 8007c1c:	08007ea1 	.word	0x08007ea1
 8007c20:	08007ea1 	.word	0x08007ea1
 8007c24:	08007ea1 	.word	0x08007ea1
 8007c28:	08007ea1 	.word	0x08007ea1
 8007c2c:	08007c97 	.word	0x08007c97
 8007c30:	08007ea1 	.word	0x08007ea1
 8007c34:	08007ea1 	.word	0x08007ea1
 8007c38:	08007ea1 	.word	0x08007ea1
 8007c3c:	08007ea1 	.word	0x08007ea1
 8007c40:	08007ea1 	.word	0x08007ea1
 8007c44:	08007ea1 	.word	0x08007ea1
 8007c48:	08007ea1 	.word	0x08007ea1
 8007c4c:	08007c9d 	.word	0x08007c9d
 8007c50:	08007ea1 	.word	0x08007ea1
 8007c54:	08007ea1 	.word	0x08007ea1
 8007c58:	08007ea1 	.word	0x08007ea1
 8007c5c:	08007ea1 	.word	0x08007ea1
 8007c60:	08007ea1 	.word	0x08007ea1
 8007c64:	08007ea1 	.word	0x08007ea1
 8007c68:	08007ea1 	.word	0x08007ea1
 8007c6c:	08007ca3 	.word	0x08007ca3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c70:	4b90      	ldr	r3, [pc, #576]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0320 	and.w	r3, r3, #32
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d009      	beq.n	8007c90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c7c:	4b8d      	ldr	r3, [pc, #564]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	08db      	lsrs	r3, r3, #3
 8007c82:	f003 0303 	and.w	r3, r3, #3
 8007c86:	4a8c      	ldr	r2, [pc, #560]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007c88:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007c8e:	e10a      	b.n	8007ea6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c90:	4b89      	ldr	r3, [pc, #548]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007c92:	61bb      	str	r3, [r7, #24]
    break;
 8007c94:	e107      	b.n	8007ea6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007c96:	4b89      	ldr	r3, [pc, #548]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007c98:	61bb      	str	r3, [r7, #24]
    break;
 8007c9a:	e104      	b.n	8007ea6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007c9c:	4b88      	ldr	r3, [pc, #544]	; (8007ec0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007c9e:	61bb      	str	r3, [r7, #24]
    break;
 8007ca0:	e101      	b.n	8007ea6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ca2:	4b84      	ldr	r3, [pc, #528]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca6:	f003 0303 	and.w	r3, r3, #3
 8007caa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007cac:	4b81      	ldr	r3, [pc, #516]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb0:	091b      	lsrs	r3, r3, #4
 8007cb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cb6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007cb8:	4b7e      	ldr	r3, [pc, #504]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007cc2:	4b7c      	ldr	r3, [pc, #496]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc6:	08db      	lsrs	r3, r3, #3
 8007cc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	fb02 f303 	mul.w	r3, r2, r3
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cda:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80da 	beq.w	8007e9a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d05a      	beq.n	8007da2 <HAL_RCC_GetSysClockFreq+0x1b2>
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d302      	bcc.n	8007cf6 <HAL_RCC_GetSysClockFreq+0x106>
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d078      	beq.n	8007de6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8007cf4:	e099      	b.n	8007e2a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf6:	4b6f      	ldr	r3, [pc, #444]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d02d      	beq.n	8007d5e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d02:	4b6c      	ldr	r3, [pc, #432]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	08db      	lsrs	r3, r3, #3
 8007d08:	f003 0303 	and.w	r3, r3, #3
 8007d0c:	4a6a      	ldr	r2, [pc, #424]	; (8007eb8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d12:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	ee07 3a90 	vmov	s15, r3
 8007d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d2c:	4b61      	ldr	r3, [pc, #388]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d34:	ee07 3a90 	vmov	s15, r3
 8007d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d40:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007ec4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007d44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d58:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007d5c:	e087      	b.n	8007e6e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	ee07 3a90 	vmov	s15, r3
 8007d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d68:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007ec8 <HAL_RCC_GetSysClockFreq+0x2d8>
 8007d6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d70:	4b50      	ldr	r3, [pc, #320]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d78:	ee07 3a90 	vmov	s15, r3
 8007d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d80:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d84:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007ec4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007d88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007da0:	e065      	b.n	8007e6e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	ee07 3a90 	vmov	s15, r3
 8007da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dac:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007ecc <HAL_RCC_GetSysClockFreq+0x2dc>
 8007db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db4:	4b3f      	ldr	r3, [pc, #252]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dc8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007ec4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007de4:	e043      	b.n	8007e6e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	ee07 3a90 	vmov	s15, r3
 8007dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007ed0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df8:	4b2e      	ldr	r3, [pc, #184]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e00:	ee07 3a90 	vmov	s15, r3
 8007e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e08:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e0c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007ec4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e28:	e021      	b.n	8007e6e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	ee07 3a90 	vmov	s15, r3
 8007e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e34:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007ecc <HAL_RCC_GetSysClockFreq+0x2dc>
 8007e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3c:	4b1d      	ldr	r3, [pc, #116]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e44:	ee07 3a90 	vmov	s15, r3
 8007e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e50:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007ec4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e6c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007e6e:	4b11      	ldr	r3, [pc, #68]	; (8007eb4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e72:	0a5b      	lsrs	r3, r3, #9
 8007e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e78:	3301      	adds	r3, #1
 8007e7a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	ee07 3a90 	vmov	s15, r3
 8007e82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e92:	ee17 3a90 	vmov	r3, s15
 8007e96:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007e98:	e005      	b.n	8007ea6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	61bb      	str	r3, [r7, #24]
    break;
 8007e9e:	e002      	b.n	8007ea6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007ea0:	4b06      	ldr	r3, [pc, #24]	; (8007ebc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007ea2:	61bb      	str	r3, [r7, #24]
    break;
 8007ea4:	bf00      	nop
  }

  return sysclockfreq;
 8007ea6:	69bb      	ldr	r3, [r7, #24]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3724      	adds	r7, #36	; 0x24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	58024400 	.word	0x58024400
 8007eb8:	03d09000 	.word	0x03d09000
 8007ebc:	003d0900 	.word	0x003d0900
 8007ec0:	007a1200 	.word	0x007a1200
 8007ec4:	46000000 	.word	0x46000000
 8007ec8:	4c742400 	.word	0x4c742400
 8007ecc:	4a742400 	.word	0x4a742400
 8007ed0:	4af42400 	.word	0x4af42400

08007ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007eda:	f7ff fe89 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 8007ede:	4601      	mov	r1, r0
 8007ee0:	4b10      	ldr	r3, [pc, #64]	; (8007f24 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	0a1b      	lsrs	r3, r3, #8
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	4a0f      	ldr	r2, [pc, #60]	; (8007f28 <HAL_RCC_GetHCLKFreq+0x54>)
 8007eec:	5cd3      	ldrb	r3, [r2, r3]
 8007eee:	f003 031f 	and.w	r3, r3, #31
 8007ef2:	fa21 f303 	lsr.w	r3, r1, r3
 8007ef6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ef8:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <HAL_RCC_GetHCLKFreq+0x50>)
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	4a09      	ldr	r2, [pc, #36]	; (8007f28 <HAL_RCC_GetHCLKFreq+0x54>)
 8007f02:	5cd3      	ldrb	r3, [r2, r3]
 8007f04:	f003 031f 	and.w	r3, r3, #31
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0e:	4a07      	ldr	r2, [pc, #28]	; (8007f2c <HAL_RCC_GetHCLKFreq+0x58>)
 8007f10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f12:	4a07      	ldr	r2, [pc, #28]	; (8007f30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007f18:	4b04      	ldr	r3, [pc, #16]	; (8007f2c <HAL_RCC_GetHCLKFreq+0x58>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	58024400 	.word	0x58024400
 8007f28:	08014314 	.word	0x08014314
 8007f2c:	24000004 	.word	0x24000004
 8007f30:	24000000 	.word	0x24000000

08007f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007f38:	f7ff ffcc 	bl	8007ed4 <HAL_RCC_GetHCLKFreq>
 8007f3c:	4601      	mov	r1, r0
 8007f3e:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	091b      	lsrs	r3, r3, #4
 8007f44:	f003 0307 	and.w	r3, r3, #7
 8007f48:	4a04      	ldr	r2, [pc, #16]	; (8007f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f4a:	5cd3      	ldrb	r3, [r2, r3]
 8007f4c:	f003 031f 	and.w	r3, r3, #31
 8007f50:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	58024400 	.word	0x58024400
 8007f5c:	08014314 	.word	0x08014314

08007f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007f64:	f7ff ffb6 	bl	8007ed4 <HAL_RCC_GetHCLKFreq>
 8007f68:	4601      	mov	r1, r0
 8007f6a:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	0a1b      	lsrs	r3, r3, #8
 8007f70:	f003 0307 	and.w	r3, r3, #7
 8007f74:	4a04      	ldr	r2, [pc, #16]	; (8007f88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f76:	5cd3      	ldrb	r3, [r2, r3]
 8007f78:	f003 031f 	and.w	r3, r3, #31
 8007f7c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	58024400 	.word	0x58024400
 8007f88:	08014314 	.word	0x08014314

08007f8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f94:	2300      	movs	r3, #0
 8007f96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f98:	2300      	movs	r3, #0
 8007f9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d03d      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fb0:	d013      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fb6:	d802      	bhi.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d007      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007fbc:	e01f      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007fbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fc2:	d013      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007fc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fc8:	d01c      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007fca:	e018      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fcc:	4baf      	ldr	r3, [pc, #700]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd0:	4aae      	ldr	r2, [pc, #696]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007fd8:	e015      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	2102      	movs	r1, #2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f001 fd23 	bl	8009a2c <RCCEx_PLL2_Config>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007fea:	e00c      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3324      	adds	r3, #36	; 0x24
 8007ff0:	2102      	movs	r1, #2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f001 fdcc 	bl	8009b90 <RCCEx_PLL3_Config>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ffc:	e003      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	75fb      	strb	r3, [r7, #23]
      break;
 8008002:	e000      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8008004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d109      	bne.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800800c:	4b9f      	ldr	r3, [pc, #636]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800800e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008010:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008018:	499c      	ldr	r1, [pc, #624]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800801a:	4313      	orrs	r3, r2
 800801c:	650b      	str	r3, [r1, #80]	; 0x50
 800801e:	e001      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802c:	2b00      	cmp	r3, #0
 800802e:	d03d      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008034:	2b04      	cmp	r3, #4
 8008036:	d826      	bhi.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8008038:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	08008055 	.word	0x08008055
 8008044:	08008063 	.word	0x08008063
 8008048:	08008075 	.word	0x08008075
 800804c:	0800808d 	.word	0x0800808d
 8008050:	0800808d 	.word	0x0800808d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008054:	4b8d      	ldr	r3, [pc, #564]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008058:	4a8c      	ldr	r2, [pc, #560]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800805a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800805e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008060:	e015      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3304      	adds	r3, #4
 8008066:	2100      	movs	r1, #0
 8008068:	4618      	mov	r0, r3
 800806a:	f001 fcdf 	bl	8009a2c <RCCEx_PLL2_Config>
 800806e:	4603      	mov	r3, r0
 8008070:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008072:	e00c      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3324      	adds	r3, #36	; 0x24
 8008078:	2100      	movs	r1, #0
 800807a:	4618      	mov	r0, r3
 800807c:	f001 fd88 	bl	8009b90 <RCCEx_PLL3_Config>
 8008080:	4603      	mov	r3, r0
 8008082:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008084:	e003      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	75fb      	strb	r3, [r7, #23]
      break;
 800808a:	e000      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800808c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d109      	bne.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008094:	4b7d      	ldr	r3, [pc, #500]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008098:	f023 0207 	bic.w	r2, r3, #7
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a0:	497a      	ldr	r1, [pc, #488]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	650b      	str	r3, [r1, #80]	; 0x50
 80080a6:	e001      	b.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d03e      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080bc:	2b80      	cmp	r3, #128	; 0x80
 80080be:	d01c      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80080c0:	2b80      	cmp	r3, #128	; 0x80
 80080c2:	d804      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x142>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d008      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80080c8:	2b40      	cmp	r3, #64	; 0x40
 80080ca:	d00d      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80080cc:	e01e      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x180>
 80080ce:	2bc0      	cmp	r3, #192	; 0xc0
 80080d0:	d01f      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80080d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d6:	d01e      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80080d8:	e018      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080da:	4b6c      	ldr	r3, [pc, #432]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	4a6b      	ldr	r2, [pc, #428]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80080e6:	e017      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3304      	adds	r3, #4
 80080ec:	2100      	movs	r1, #0
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 fc9c 	bl	8009a2c <RCCEx_PLL2_Config>
 80080f4:	4603      	mov	r3, r0
 80080f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80080f8:	e00e      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	3324      	adds	r3, #36	; 0x24
 80080fe:	2100      	movs	r1, #0
 8008100:	4618      	mov	r0, r3
 8008102:	f001 fd45 	bl	8009b90 <RCCEx_PLL3_Config>
 8008106:	4603      	mov	r3, r0
 8008108:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800810a:	e005      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	75fb      	strb	r3, [r7, #23]
      break;
 8008110:	e002      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008112:	bf00      	nop
 8008114:	e000      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008116:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d109      	bne.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800811e:	4b5b      	ldr	r3, [pc, #364]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008122:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812a:	4958      	ldr	r1, [pc, #352]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800812c:	4313      	orrs	r3, r2
 800812e:	650b      	str	r3, [r1, #80]	; 0x50
 8008130:	e001      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800813e:	2b00      	cmp	r3, #0
 8008140:	d044      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800814c:	d01f      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800814e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008152:	d805      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00a      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008158:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800815c:	d00e      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800815e:	e01f      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8008160:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008164:	d01f      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8008166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800816a:	d01e      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800816c:	e018      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800816e:	4b47      	ldr	r3, [pc, #284]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	4a46      	ldr	r2, [pc, #280]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008178:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800817a:	e017      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3304      	adds	r3, #4
 8008180:	2100      	movs	r1, #0
 8008182:	4618      	mov	r0, r3
 8008184:	f001 fc52 	bl	8009a2c <RCCEx_PLL2_Config>
 8008188:	4603      	mov	r3, r0
 800818a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800818c:	e00e      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3324      	adds	r3, #36	; 0x24
 8008192:	2100      	movs	r1, #0
 8008194:	4618      	mov	r0, r3
 8008196:	f001 fcfb 	bl	8009b90 <RCCEx_PLL3_Config>
 800819a:	4603      	mov	r3, r0
 800819c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800819e:	e005      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	75fb      	strb	r3, [r7, #23]
      break;
 80081a4:	e002      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80081a6:	bf00      	nop
 80081a8:	e000      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80081aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10a      	bne.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80081b2:	4b36      	ldr	r3, [pc, #216]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081c0:	4932      	ldr	r1, [pc, #200]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	658b      	str	r3, [r1, #88]	; 0x58
 80081c6:	e001      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d044      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081e2:	d01f      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80081e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081e8:	d805      	bhi.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80081ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081f2:	d00e      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80081f4:	e01f      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80081f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081fa:	d01f      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80081fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008200:	d01e      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008202:	e018      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008204:	4b21      	ldr	r3, [pc, #132]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	4a20      	ldr	r2, [pc, #128]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800820a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800820e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008210:	e017      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3304      	adds	r3, #4
 8008216:	2100      	movs	r1, #0
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fc07 	bl	8009a2c <RCCEx_PLL2_Config>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008222:	e00e      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	3324      	adds	r3, #36	; 0x24
 8008228:	2100      	movs	r1, #0
 800822a:	4618      	mov	r0, r3
 800822c:	f001 fcb0 	bl	8009b90 <RCCEx_PLL3_Config>
 8008230:	4603      	mov	r3, r0
 8008232:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008234:	e005      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	75fb      	strb	r3, [r7, #23]
      break;
 800823a:	e002      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800823c:	bf00      	nop
 800823e:	e000      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008248:	4b10      	ldr	r3, [pc, #64]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800824a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008256:	490d      	ldr	r1, [pc, #52]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008258:	4313      	orrs	r3, r2
 800825a:	658b      	str	r3, [r1, #88]	; 0x58
 800825c:	e001      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d035      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008272:	2b10      	cmp	r3, #16
 8008274:	d00c      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8008276:	2b10      	cmp	r3, #16
 8008278:	d802      	bhi.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800827a:	2b00      	cmp	r3, #0
 800827c:	d01b      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800827e:	e017      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008280:	2b20      	cmp	r3, #32
 8008282:	d00c      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008284:	2b30      	cmp	r3, #48	; 0x30
 8008286:	d018      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8008288:	e012      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800828a:	bf00      	nop
 800828c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008290:	4baf      	ldr	r3, [pc, #700]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	4aae      	ldr	r2, [pc, #696]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800829a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800829c:	e00e      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3304      	adds	r3, #4
 80082a2:	2102      	movs	r1, #2
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 fbc1 	bl	8009a2c <RCCEx_PLL2_Config>
 80082aa:	4603      	mov	r3, r0
 80082ac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80082ae:	e005      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	75fb      	strb	r3, [r7, #23]
      break;
 80082b4:	e002      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80082b6:	bf00      	nop
 80082b8:	e000      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80082ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082bc:	7dfb      	ldrb	r3, [r7, #23]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d109      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80082c2:	4ba3      	ldr	r3, [pc, #652]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ce:	49a0      	ldr	r1, [pc, #640]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80082d4:	e001      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d042      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ee:	d01f      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80082f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082f4:	d805      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00a      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80082fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082fe:	d00e      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008300:	e01f      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008302:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008306:	d01f      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800830c:	d01e      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800830e:	e018      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008310:	4b8f      	ldr	r3, [pc, #572]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	4a8e      	ldr	r2, [pc, #568]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800831a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800831c:	e017      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3304      	adds	r3, #4
 8008322:	2100      	movs	r1, #0
 8008324:	4618      	mov	r0, r3
 8008326:	f001 fb81 	bl	8009a2c <RCCEx_PLL2_Config>
 800832a:	4603      	mov	r3, r0
 800832c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800832e:	e00e      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	3324      	adds	r3, #36	; 0x24
 8008334:	2100      	movs	r1, #0
 8008336:	4618      	mov	r0, r3
 8008338:	f001 fc2a 	bl	8009b90 <RCCEx_PLL3_Config>
 800833c:	4603      	mov	r3, r0
 800833e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008340:	e005      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	75fb      	strb	r3, [r7, #23]
      break;
 8008346:	e002      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008348:	bf00      	nop
 800834a:	e000      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800834c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d109      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008354:	4b7e      	ldr	r3, [pc, #504]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008358:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008360:	497b      	ldr	r1, [pc, #492]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008362:	4313      	orrs	r3, r2
 8008364:	650b      	str	r3, [r1, #80]	; 0x50
 8008366:	e001      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d042      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800837c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008380:	d01b      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008386:	d805      	bhi.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008388:	2b00      	cmp	r3, #0
 800838a:	d022      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800838c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008390:	d00a      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008392:	e01b      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008394:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008398:	d01d      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800839a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800839e:	d01c      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80083a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083a4:	d01b      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x452>
 80083a6:	e011      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3304      	adds	r3, #4
 80083ac:	2101      	movs	r1, #1
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 fb3c 	bl	8009a2c <RCCEx_PLL2_Config>
 80083b4:	4603      	mov	r3, r0
 80083b6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80083b8:	e012      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3324      	adds	r3, #36	; 0x24
 80083be:	2101      	movs	r1, #1
 80083c0:	4618      	mov	r0, r3
 80083c2:	f001 fbe5 	bl	8009b90 <RCCEx_PLL3_Config>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80083ca:	e009      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	75fb      	strb	r3, [r7, #23]
      break;
 80083d0:	e006      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80083d2:	bf00      	nop
 80083d4:	e004      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80083d6:	bf00      	nop
 80083d8:	e002      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80083da:	bf00      	nop
 80083dc:	e000      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80083de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d109      	bne.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80083e6:	4b5a      	ldr	r3, [pc, #360]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f2:	4957      	ldr	r1, [pc, #348]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083f4:	4313      	orrs	r3, r2
 80083f6:	650b      	str	r3, [r1, #80]	; 0x50
 80083f8:	e001      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d044      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008414:	d01b      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800841a:	d805      	bhi.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800841c:	2b00      	cmp	r3, #0
 800841e:	d022      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008424:	d00a      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008426:	e01b      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8008428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842c:	d01d      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800842e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008432:	d01c      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8008434:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008438:	d01b      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800843a:	e011      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3304      	adds	r3, #4
 8008440:	2101      	movs	r1, #1
 8008442:	4618      	mov	r0, r3
 8008444:	f001 faf2 	bl	8009a2c <RCCEx_PLL2_Config>
 8008448:	4603      	mov	r3, r0
 800844a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800844c:	e012      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	3324      	adds	r3, #36	; 0x24
 8008452:	2101      	movs	r1, #1
 8008454:	4618      	mov	r0, r3
 8008456:	f001 fb9b 	bl	8009b90 <RCCEx_PLL3_Config>
 800845a:	4603      	mov	r3, r0
 800845c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800845e:	e009      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	75fb      	strb	r3, [r7, #23]
      break;
 8008464:	e006      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008466:	bf00      	nop
 8008468:	e004      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800846a:	bf00      	nop
 800846c:	e002      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800846e:	bf00      	nop
 8008470:	e000      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008474:	7dfb      	ldrb	r3, [r7, #23]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10a      	bne.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800847a:	4b35      	ldr	r3, [pc, #212]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800847c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800847e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008488:	4931      	ldr	r1, [pc, #196]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800848a:	4313      	orrs	r3, r2
 800848c:	658b      	str	r3, [r1, #88]	; 0x58
 800848e:	e001      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
 8008492:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d02d      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084a8:	d005      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80084aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ae:	d009      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d013      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80084b4:	e00f      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084b6:	4b26      	ldr	r3, [pc, #152]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80084b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ba:	4a25      	ldr	r2, [pc, #148]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80084bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80084c2:	e00c      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3304      	adds	r3, #4
 80084c8:	2101      	movs	r1, #1
 80084ca:	4618      	mov	r0, r3
 80084cc:	f001 faae 	bl	8009a2c <RCCEx_PLL2_Config>
 80084d0:	4603      	mov	r3, r0
 80084d2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80084d4:	e003      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	75fb      	strb	r3, [r7, #23]
      break;
 80084da:	e000      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80084dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d109      	bne.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80084e4:	4b1a      	ldr	r3, [pc, #104]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80084e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084f0:	4917      	ldr	r1, [pc, #92]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	650b      	str	r3, [r1, #80]	; 0x50
 80084f6:	e001      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
 80084fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d035      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850c:	2b03      	cmp	r3, #3
 800850e:	d81b      	bhi.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008510:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008516:	bf00      	nop
 8008518:	08008555 	.word	0x08008555
 800851c:	08008529 	.word	0x08008529
 8008520:	08008537 	.word	0x08008537
 8008524:	08008555 	.word	0x08008555
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008528:	4b09      	ldr	r3, [pc, #36]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	4a08      	ldr	r2, [pc, #32]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800852e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008532:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008534:	e00f      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3304      	adds	r3, #4
 800853a:	2102      	movs	r1, #2
 800853c:	4618      	mov	r0, r3
 800853e:	f001 fa75 	bl	8009a2c <RCCEx_PLL2_Config>
 8008542:	4603      	mov	r3, r0
 8008544:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008546:	e006      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	75fb      	strb	r3, [r7, #23]
      break;
 800854c:	e003      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800854e:	bf00      	nop
 8008550:	58024400 	.word	0x58024400
      break;
 8008554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d109      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800855c:	4bba      	ldr	r3, [pc, #744]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800855e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008560:	f023 0203 	bic.w	r2, r3, #3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008568:	49b7      	ldr	r1, [pc, #732]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800856a:	4313      	orrs	r3, r2
 800856c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800856e:	e001      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008570:	7dfb      	ldrb	r3, [r7, #23]
 8008572:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 8086 	beq.w	800868e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008582:	4bb2      	ldr	r3, [pc, #712]	; (800884c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4ab1      	ldr	r2, [pc, #708]	; (800884c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800858c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800858e:	f7f9 f999 	bl	80018c4 <HAL_GetTick>
 8008592:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008594:	e009      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008596:	f7f9 f995 	bl	80018c4 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2b64      	cmp	r3, #100	; 0x64
 80085a2:	d902      	bls.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	75fb      	strb	r3, [r7, #23]
        break;
 80085a8:	e005      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085aa:	4ba8      	ldr	r3, [pc, #672]	; (800884c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0ef      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d166      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80085bc:	4ba2      	ldr	r3, [pc, #648]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085c6:	4053      	eors	r3, r2
 80085c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d013      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085d0:	4b9d      	ldr	r3, [pc, #628]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085d8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085da:	4b9b      	ldr	r3, [pc, #620]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085de:	4a9a      	ldr	r2, [pc, #616]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085e4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80085e6:	4b98      	ldr	r3, [pc, #608]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ea:	4a97      	ldr	r2, [pc, #604]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085f0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80085f2:	4a95      	ldr	r2, [pc, #596]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008602:	d115      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008604:	f7f9 f95e 	bl	80018c4 <HAL_GetTick>
 8008608:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800860a:	e00b      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800860c:	f7f9 f95a 	bl	80018c4 <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	f241 3288 	movw	r2, #5000	; 0x1388
 800861a:	4293      	cmp	r3, r2
 800861c:	d902      	bls.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	75fb      	strb	r3, [r7, #23]
            break;
 8008622:	e005      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008624:	4b88      	ldr	r3, [pc, #544]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d0ed      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d126      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800863c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008644:	d10d      	bne.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008646:	4b80      	ldr	r3, [pc, #512]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008654:	0919      	lsrs	r1, r3, #4
 8008656:	4b7e      	ldr	r3, [pc, #504]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008658:	400b      	ands	r3, r1
 800865a:	497b      	ldr	r1, [pc, #492]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800865c:	4313      	orrs	r3, r2
 800865e:	610b      	str	r3, [r1, #16]
 8008660:	e005      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008662:	4b79      	ldr	r3, [pc, #484]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	4a78      	ldr	r2, [pc, #480]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008668:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800866c:	6113      	str	r3, [r2, #16]
 800866e:	4b76      	ldr	r3, [pc, #472]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008670:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800867c:	4972      	ldr	r1, [pc, #456]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800867e:	4313      	orrs	r3, r2
 8008680:	670b      	str	r3, [r1, #112]	; 0x70
 8008682:	e004      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	75bb      	strb	r3, [r7, #22]
 8008688:	e001      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868a:	7dfb      	ldrb	r3, [r7, #23]
 800868c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d07d      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800869e:	2b28      	cmp	r3, #40	; 0x28
 80086a0:	d866      	bhi.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80086a2:	a201      	add	r2, pc, #4	; (adr r2, 80086a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80086a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a8:	08008777 	.word	0x08008777
 80086ac:	08008771 	.word	0x08008771
 80086b0:	08008771 	.word	0x08008771
 80086b4:	08008771 	.word	0x08008771
 80086b8:	08008771 	.word	0x08008771
 80086bc:	08008771 	.word	0x08008771
 80086c0:	08008771 	.word	0x08008771
 80086c4:	08008771 	.word	0x08008771
 80086c8:	0800874d 	.word	0x0800874d
 80086cc:	08008771 	.word	0x08008771
 80086d0:	08008771 	.word	0x08008771
 80086d4:	08008771 	.word	0x08008771
 80086d8:	08008771 	.word	0x08008771
 80086dc:	08008771 	.word	0x08008771
 80086e0:	08008771 	.word	0x08008771
 80086e4:	08008771 	.word	0x08008771
 80086e8:	0800875f 	.word	0x0800875f
 80086ec:	08008771 	.word	0x08008771
 80086f0:	08008771 	.word	0x08008771
 80086f4:	08008771 	.word	0x08008771
 80086f8:	08008771 	.word	0x08008771
 80086fc:	08008771 	.word	0x08008771
 8008700:	08008771 	.word	0x08008771
 8008704:	08008771 	.word	0x08008771
 8008708:	08008777 	.word	0x08008777
 800870c:	08008771 	.word	0x08008771
 8008710:	08008771 	.word	0x08008771
 8008714:	08008771 	.word	0x08008771
 8008718:	08008771 	.word	0x08008771
 800871c:	08008771 	.word	0x08008771
 8008720:	08008771 	.word	0x08008771
 8008724:	08008771 	.word	0x08008771
 8008728:	08008777 	.word	0x08008777
 800872c:	08008771 	.word	0x08008771
 8008730:	08008771 	.word	0x08008771
 8008734:	08008771 	.word	0x08008771
 8008738:	08008771 	.word	0x08008771
 800873c:	08008771 	.word	0x08008771
 8008740:	08008771 	.word	0x08008771
 8008744:	08008771 	.word	0x08008771
 8008748:	08008777 	.word	0x08008777
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	3304      	adds	r3, #4
 8008750:	2101      	movs	r1, #1
 8008752:	4618      	mov	r0, r3
 8008754:	f001 f96a 	bl	8009a2c <RCCEx_PLL2_Config>
 8008758:	4603      	mov	r3, r0
 800875a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800875c:	e00c      	b.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3324      	adds	r3, #36	; 0x24
 8008762:	2101      	movs	r1, #1
 8008764:	4618      	mov	r0, r3
 8008766:	f001 fa13 	bl	8009b90 <RCCEx_PLL3_Config>
 800876a:	4603      	mov	r3, r0
 800876c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800876e:	e003      	b.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	75fb      	strb	r3, [r7, #23]
      break;
 8008774:	e000      	b.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8008776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d109      	bne.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800877e:	4b32      	ldr	r3, [pc, #200]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008782:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800878a:	492f      	ldr	r1, [pc, #188]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800878c:	4313      	orrs	r3, r2
 800878e:	654b      	str	r3, [r1, #84]	; 0x54
 8008790:	e001      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d037      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087a6:	2b05      	cmp	r3, #5
 80087a8:	d820      	bhi.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x860>
 80087aa:	a201      	add	r2, pc, #4	; (adr r2, 80087b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	080087f3 	.word	0x080087f3
 80087b4:	080087c9 	.word	0x080087c9
 80087b8:	080087db 	.word	0x080087db
 80087bc:	080087f3 	.word	0x080087f3
 80087c0:	080087f3 	.word	0x080087f3
 80087c4:	080087f3 	.word	0x080087f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3304      	adds	r3, #4
 80087cc:	2101      	movs	r1, #1
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 f92c 	bl	8009a2c <RCCEx_PLL2_Config>
 80087d4:	4603      	mov	r3, r0
 80087d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80087d8:	e00c      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3324      	adds	r3, #36	; 0x24
 80087de:	2101      	movs	r1, #1
 80087e0:	4618      	mov	r0, r3
 80087e2:	f001 f9d5 	bl	8009b90 <RCCEx_PLL3_Config>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80087ea:	e003      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	75fb      	strb	r3, [r7, #23]
      break;
 80087f0:	e000      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80087f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d109      	bne.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80087fa:	4b13      	ldr	r3, [pc, #76]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80087fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fe:	f023 0207 	bic.w	r2, r3, #7
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008806:	4910      	ldr	r1, [pc, #64]	; (8008848 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008808:	4313      	orrs	r3, r2
 800880a:	654b      	str	r3, [r1, #84]	; 0x54
 800880c:	e001      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	2b00      	cmp	r3, #0
 800881c:	d040      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008824:	2b05      	cmp	r3, #5
 8008826:	d827      	bhi.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008828:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800882a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882e:	bf00      	nop
 8008830:	0800887f 	.word	0x0800887f
 8008834:	08008855 	.word	0x08008855
 8008838:	08008867 	.word	0x08008867
 800883c:	0800887f 	.word	0x0800887f
 8008840:	0800887f 	.word	0x0800887f
 8008844:	0800887f 	.word	0x0800887f
 8008848:	58024400 	.word	0x58024400
 800884c:	58024800 	.word	0x58024800
 8008850:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3304      	adds	r3, #4
 8008858:	2101      	movs	r1, #1
 800885a:	4618      	mov	r0, r3
 800885c:	f001 f8e6 	bl	8009a2c <RCCEx_PLL2_Config>
 8008860:	4603      	mov	r3, r0
 8008862:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008864:	e00c      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	3324      	adds	r3, #36	; 0x24
 800886a:	2101      	movs	r1, #1
 800886c:	4618      	mov	r0, r3
 800886e:	f001 f98f 	bl	8009b90 <RCCEx_PLL3_Config>
 8008872:	4603      	mov	r3, r0
 8008874:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008876:	e003      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	75fb      	strb	r3, [r7, #23]
      break;
 800887c:	e000      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800887e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10a      	bne.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008886:	4bb2      	ldr	r3, [pc, #712]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800888a:	f023 0207 	bic.w	r2, r3, #7
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008894:	49ae      	ldr	r1, [pc, #696]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008896:	4313      	orrs	r3, r2
 8008898:	658b      	str	r3, [r1, #88]	; 0x58
 800889a:	e001      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800889c:	7dfb      	ldrb	r3, [r7, #23]
 800889e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0320 	and.w	r3, r3, #32
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d044      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b6:	d01b      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80088b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088bc:	d805      	bhi.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d022      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80088c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088c6:	d00a      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x952>
 80088c8:	e01b      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80088ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ce:	d01d      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x980>
 80088d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088d4:	d01c      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80088d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088da:	d01b      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80088dc:	e011      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3304      	adds	r3, #4
 80088e2:	2100      	movs	r1, #0
 80088e4:	4618      	mov	r0, r3
 80088e6:	f001 f8a1 	bl	8009a2c <RCCEx_PLL2_Config>
 80088ea:	4603      	mov	r3, r0
 80088ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80088ee:	e012      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3324      	adds	r3, #36	; 0x24
 80088f4:	2102      	movs	r1, #2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f001 f94a 	bl	8009b90 <RCCEx_PLL3_Config>
 80088fc:	4603      	mov	r3, r0
 80088fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008900:	e009      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	75fb      	strb	r3, [r7, #23]
      break;
 8008906:	e006      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008908:	bf00      	nop
 800890a:	e004      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800890c:	bf00      	nop
 800890e:	e002      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008910:	bf00      	nop
 8008912:	e000      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10a      	bne.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800891c:	4b8c      	ldr	r3, [pc, #560]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800891e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008920:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800892a:	4989      	ldr	r1, [pc, #548]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800892c:	4313      	orrs	r3, r2
 800892e:	654b      	str	r3, [r1, #84]	; 0x54
 8008930:	e001      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008932:	7dfb      	ldrb	r3, [r7, #23]
 8008934:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893e:	2b00      	cmp	r3, #0
 8008940:	d044      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800894c:	d01b      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800894e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008952:	d805      	bhi.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8008954:	2b00      	cmp	r3, #0
 8008956:	d022      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800895c:	d00a      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800895e:	e01b      	b.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008964:	d01d      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008966:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800896a:	d01c      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800896c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008970:	d01b      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8008972:	e011      	b.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3304      	adds	r3, #4
 8008978:	2100      	movs	r1, #0
 800897a:	4618      	mov	r0, r3
 800897c:	f001 f856 	bl	8009a2c <RCCEx_PLL2_Config>
 8008980:	4603      	mov	r3, r0
 8008982:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008984:	e012      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3324      	adds	r3, #36	; 0x24
 800898a:	2102      	movs	r1, #2
 800898c:	4618      	mov	r0, r3
 800898e:	f001 f8ff 	bl	8009b90 <RCCEx_PLL3_Config>
 8008992:	4603      	mov	r3, r0
 8008994:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008996:	e009      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	75fb      	strb	r3, [r7, #23]
      break;
 800899c:	e006      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800899e:	bf00      	nop
 80089a0:	e004      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80089a2:	bf00      	nop
 80089a4:	e002      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80089a6:	bf00      	nop
 80089a8:	e000      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80089aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10a      	bne.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089b2:	4b67      	ldr	r3, [pc, #412]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80089b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089c0:	4963      	ldr	r1, [pc, #396]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	658b      	str	r3, [r1, #88]	; 0x58
 80089c6:	e001      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c8:	7dfb      	ldrb	r3, [r7, #23]
 80089ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d044      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089e2:	d01b      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80089e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089e8:	d805      	bhi.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d022      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80089ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089f2:	d00a      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80089f4:	e01b      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80089f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089fa:	d01d      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80089fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a00:	d01c      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008a02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a06:	d01b      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008a08:	e011      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	2100      	movs	r1, #0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f001 f80b 	bl	8009a2c <RCCEx_PLL2_Config>
 8008a16:	4603      	mov	r3, r0
 8008a18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a1a:	e012      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3324      	adds	r3, #36	; 0x24
 8008a20:	2102      	movs	r1, #2
 8008a22:	4618      	mov	r0, r3
 8008a24:	f001 f8b4 	bl	8009b90 <RCCEx_PLL3_Config>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a2c:	e009      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	75fb      	strb	r3, [r7, #23]
      break;
 8008a32:	e006      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008a34:	bf00      	nop
 8008a36:	e004      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008a38:	bf00      	nop
 8008a3a:	e002      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008a3c:	bf00      	nop
 8008a3e:	e000      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10a      	bne.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a48:	4b41      	ldr	r3, [pc, #260]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a56:	493e      	ldr	r1, [pc, #248]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	658b      	str	r3, [r1, #88]	; 0x58
 8008a5c:	e001      	b.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0308 	and.w	r3, r3, #8
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d01a      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a78:	d10a      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3324      	adds	r3, #36	; 0x24
 8008a7e:	2102      	movs	r1, #2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f001 f885 	bl	8009b90 <RCCEx_PLL3_Config>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008a90:	4b2f      	ldr	r3, [pc, #188]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a9e:	492c      	ldr	r1, [pc, #176]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0310 	and.w	r3, r3, #16
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d01a      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aba:	d10a      	bne.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3324      	adds	r3, #36	; 0x24
 8008ac0:	2102      	movs	r1, #2
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 f864 	bl	8009b90 <RCCEx_PLL3_Config>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ad2:	4b1f      	ldr	r3, [pc, #124]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ae0:	491b      	ldr	r1, [pc, #108]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d032      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008afc:	d00d      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8008afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b02:	d016      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d111      	bne.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 ff8c 	bl	8009a2c <RCCEx_PLL2_Config>
 8008b14:	4603      	mov	r3, r0
 8008b16:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b18:	e00c      	b.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3324      	adds	r3, #36	; 0x24
 8008b1e:	2102      	movs	r1, #2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 f835 	bl	8009b90 <RCCEx_PLL3_Config>
 8008b26:	4603      	mov	r3, r0
 8008b28:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b2a:	e003      	b.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b30:	e000      	b.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8008b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b34:	7dfb      	ldrb	r3, [r7, #23]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10c      	bne.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b3a:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b48:	4901      	ldr	r1, [pc, #4]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	658b      	str	r3, [r1, #88]	; 0x58
 8008b4e:	e003      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8008b50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d02f      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b6e:	d00c      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008b70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b74:	d015      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8008b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b7a:	d10f      	bne.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b7c:	4b71      	ldr	r3, [pc, #452]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	4a70      	ldr	r2, [pc, #448]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008b88:	e00c      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3324      	adds	r3, #36	; 0x24
 8008b8e:	2101      	movs	r1, #1
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 fffd 	bl	8009b90 <RCCEx_PLL3_Config>
 8008b96:	4603      	mov	r3, r0
 8008b98:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008b9a:	e003      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008ba0:	e000      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8008ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008baa:	4b66      	ldr	r3, [pc, #408]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bb8:	4962      	ldr	r1, [pc, #392]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	654b      	str	r3, [r1, #84]	; 0x54
 8008bbe:	e001      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d029      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bdc:	d007      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008bde:	e00f      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008be0:	4b58      	ldr	r3, [pc, #352]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	4a57      	ldr	r2, [pc, #348]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008bec:	e00b      	b.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	2102      	movs	r1, #2
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 ff19 	bl	8009a2c <RCCEx_PLL2_Config>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008bfe:	e002      	b.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	75fb      	strb	r3, [r7, #23]
      break;
 8008c04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d109      	bne.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008c0c:	4b4d      	ldr	r3, [pc, #308]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c18:	494a      	ldr	r1, [pc, #296]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c1e:	e001      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c20:	7dfb      	ldrb	r3, [r7, #23]
 8008c22:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00a      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3324      	adds	r3, #36	; 0x24
 8008c34:	2102      	movs	r1, #2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 ffaa 	bl	8009b90 <RCCEx_PLL3_Config>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d02f      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c5a:	d00c      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c60:	d802      	bhi.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d011      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8008c66:	e00d      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c6c:	d00f      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c72:	d00e      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008c74:	e006      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c76:	4b33      	ldr	r3, [pc, #204]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	4a32      	ldr	r2, [pc, #200]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008c82:	e007      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	75fb      	strb	r3, [r7, #23]
      break;
 8008c88:	e004      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008c8a:	bf00      	nop
 8008c8c:	e002      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008c8e:	bf00      	nop
 8008c90:	e000      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008c92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c94:	7dfb      	ldrb	r3, [r7, #23]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d109      	bne.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c9a:	4b2a      	ldr	r3, [pc, #168]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ca6:	4927      	ldr	r1, [pc, #156]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	654b      	str	r3, [r1, #84]	; 0x54
 8008cac:	e001      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d008      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008cbe:	4b21      	ldr	r3, [pc, #132]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cca:	491e      	ldr	r1, [pc, #120]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008cdc:	4b19      	ldr	r3, [pc, #100]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ce8:	4916      	ldr	r1, [pc, #88]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00d      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008cfa:	4b12      	ldr	r3, [pc, #72]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	4a11      	ldr	r2, [pc, #68]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008d00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d04:	6113      	str	r3, [r2, #16]
 8008d06:	4b0f      	ldr	r3, [pc, #60]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008d08:	691a      	ldr	r2, [r3, #16]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008d10:	490c      	ldr	r1, [pc, #48]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	da08      	bge.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d1e:	4b09      	ldr	r3, [pc, #36]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d2a:	4906      	ldr	r1, [pc, #24]	; (8008d44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008d30:	7dbb      	ldrb	r3, [r7, #22]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	e000      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	58024400 	.word	0x58024400

08008d48 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b090      	sub	sp, #64	; 0x40
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d56:	d150      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008d58:	4ba1      	ldr	r3, [pc, #644]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d5c:	f003 0307 	and.w	r3, r3, #7
 8008d60:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	2b04      	cmp	r3, #4
 8008d66:	d844      	bhi.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008d68:	a201      	add	r2, pc, #4	; (adr r2, 8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6e:	bf00      	nop
 8008d70:	08008d85 	.word	0x08008d85
 8008d74:	08008d95 	.word	0x08008d95
 8008d78:	08008da5 	.word	0x08008da5
 8008d7c:	08008ded 	.word	0x08008ded
 8008d80:	08008db5 	.word	0x08008db5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fd03 	bl	8009794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d92:	e241      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d94:	f107 0318 	add.w	r3, r7, #24
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fa63 	bl	8009264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008da2:	e239      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008da4:	f107 030c 	add.w	r3, r7, #12
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 fba7 	bl	80094fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008db2:	e231      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008db4:	4b8a      	ldr	r3, [pc, #552]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008dbc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d102      	bne.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008dc4:	4b87      	ldr	r3, [pc, #540]	; (8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008dc8:	e226      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dd0:	d102      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008dd2:	4b85      	ldr	r3, [pc, #532]	; (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dd6:	e21f      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dde:	d102      	bne.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008de0:	4b82      	ldr	r3, [pc, #520]	; (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008de4:	e218      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dea:	e215      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008dec:	4b80      	ldr	r3, [pc, #512]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008df0:	e212      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008df6:	bf00      	nop
 8008df8:	e20e      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e00:	d14f      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008e02:	4b77      	ldr	r3, [pc, #476]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e06:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008e0a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	2b80      	cmp	r3, #128	; 0x80
 8008e10:	d01c      	beq.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008e12:	2b80      	cmp	r3, #128	; 0x80
 8008e14:	d804      	bhi.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d008      	beq.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008e1a:	2b40      	cmp	r3, #64	; 0x40
 8008e1c:	d00e      	beq.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008e1e:	e03c      	b.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008e20:	2bc0      	cmp	r3, #192	; 0xc0
 8008e22:	d037      	beq.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e28:	d018      	beq.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008e2a:	e036      	b.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 fcaf 	bl	8009794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e3a:	e1ed      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e3c:	f107 0318 	add.w	r3, r7, #24
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 fa0f 	bl	8009264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e4a:	e1e5      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e4c:	f107 030c 	add.w	r3, r7, #12
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 fb53 	bl	80094fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e5a:	e1dd      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e5c:	4b60      	ldr	r3, [pc, #384]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d102      	bne.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008e6c:	4b5d      	ldr	r3, [pc, #372]	; (8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008e70:	e1d2      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e78:	d102      	bne.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008e7a:	4b5b      	ldr	r3, [pc, #364]	; (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e7e:	e1cb      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e86:	d102      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008e88:	4b58      	ldr	r3, [pc, #352]	; (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e8c:	e1c4      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e92:	e1c1      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e94:	4b56      	ldr	r3, [pc, #344]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e98:	e1be      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e9e:	bf00      	nop
 8008ea0:	e1ba      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea8:	d153      	bne.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008eaa:	4b4d      	ldr	r3, [pc, #308]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008eb2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008eba:	d01f      	beq.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ec0:	d805      	bhi.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008ec6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eca:	d00f      	beq.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008ecc:	e03d      	b.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008ece:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ed2:	d037      	beq.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008ed4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ed8:	d018      	beq.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008eda:	e036      	b.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f000 fc57 	bl	8009794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eea:	e195      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eec:	f107 0318 	add.w	r3, r7, #24
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 f9b7 	bl	8009264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008efa:	e18d      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008efc:	f107 030c 	add.w	r3, r7, #12
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fafb 	bl	80094fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f0a:	e185      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f0c:	4b34      	ldr	r3, [pc, #208]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f14:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d102      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008f1c:	4b31      	ldr	r3, [pc, #196]	; (8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008f20:	e17a      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f28:	d102      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008f2a:	4b2f      	ldr	r3, [pc, #188]	; (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f2e:	e173      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f36:	d102      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008f38:	4b2c      	ldr	r3, [pc, #176]	; (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f3c:	e16c      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f42:	e169      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008f44:	4b2a      	ldr	r3, [pc, #168]	; (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008f46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f48:	e166      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f4e:	bf00      	nop
 8008f50:	e162      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f58:	d15d      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008f5a:	4b21      	ldr	r3, [pc, #132]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008f62:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f6a:	d01f      	beq.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f70:	d805      	bhi.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008f76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f7a:	d00f      	beq.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008f7c:	e047      	b.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008f7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f82:	d041      	beq.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008f84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f88:	d018      	beq.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008f8a:	e040      	b.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 fbff 	bl	8009794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f9a:	e13d      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f9c:	f107 0318 	add.w	r3, r7, #24
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 f95f 	bl	8009264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008faa:	e135      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fac:	f107 030c 	add.w	r3, r7, #12
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 faa3 	bl	80094fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fba:	e12d      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008fbc:	4b08      	ldr	r3, [pc, #32]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fc4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d102      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008fcc:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008fd0:	e122      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fd8:	d10c      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008fda:	4b03      	ldr	r3, [pc, #12]	; (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fde:	e11b      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008fe0:	58024400 	.word	0x58024400
 8008fe4:	03d09000 	.word	0x03d09000
 8008fe8:	003d0900 	.word	0x003d0900
 8008fec:	007a1200 	.word	0x007a1200
 8008ff0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ffa:	d102      	bne.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008ffc:	4b89      	ldr	r3, [pc, #548]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009000:	e10a      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009006:	e107      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009008:	4b87      	ldr	r3, [pc, #540]	; (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800900a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800900c:	e104      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009012:	bf00      	nop
 8009014:	e100      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901c:	d153      	bne.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800901e:	4b83      	ldr	r3, [pc, #524]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009022:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009026:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800902e:	d01f      	beq.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8009030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009034:	d805      	bhi.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800903a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800903e:	d00f      	beq.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8009040:	e03d      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8009042:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009046:	d037      	beq.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8009048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800904c:	d018      	beq.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800904e:	e036      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009054:	4618      	mov	r0, r3
 8009056:	f000 fb9d 	bl	8009794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800905e:	e0db      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009060:	f107 0318 	add.w	r3, r7, #24
 8009064:	4618      	mov	r0, r3
 8009066:	f000 f8fd 	bl	8009264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800906e:	e0d3      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009070:	f107 030c 	add.w	r3, r7, #12
 8009074:	4618      	mov	r0, r3
 8009076:	f000 fa41 	bl	80094fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800907e:	e0cb      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009080:	4b6a      	ldr	r3, [pc, #424]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009084:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009088:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800908a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800908c:	2b00      	cmp	r3, #0
 800908e:	d102      	bne.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009090:	4b67      	ldr	r3, [pc, #412]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009094:	e0c0      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800909c:	d102      	bne.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800909e:	4b65      	ldr	r3, [pc, #404]	; (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80090a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090a2:	e0b9      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80090a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090aa:	d102      	bne.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80090ac:	4b5d      	ldr	r3, [pc, #372]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80090ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090b0:	e0b2      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80090b2:	2300      	movs	r3, #0
 80090b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090b6:	e0af      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80090b8:	4b5b      	ldr	r3, [pc, #364]	; (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80090ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090bc:	e0ac      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090c2:	bf00      	nop
 80090c4:	e0a8      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80090cc:	d13d      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80090ce:	4b57      	ldr	r3, [pc, #348]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80090d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80090d6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090de:	d00c      	beq.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80090e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090e4:	d011      	beq.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d12b      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090ea:	f107 0318 	add.w	r3, r7, #24
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f8b8 	bl	8009264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f8:	e08e      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090fa:	f107 030c 	add.w	r3, r7, #12
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 f9fc 	bl	80094fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009108:	e086      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800910a:	4b48      	ldr	r3, [pc, #288]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800910c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800910e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009112:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009116:	2b00      	cmp	r3, #0
 8009118:	d102      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800911a:	4b45      	ldr	r3, [pc, #276]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800911c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800911e:	e07b      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009126:	d102      	bne.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8009128:	4b42      	ldr	r3, [pc, #264]	; (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800912c:	e074      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800912e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009134:	d102      	bne.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8009136:	4b3b      	ldr	r3, [pc, #236]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800913a:	e06d      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009140:	e06a      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009146:	bf00      	nop
 8009148:	e066      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009150:	d11f      	bne.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009152:	4b36      	ldr	r3, [pc, #216]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800915a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800915c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009166:	d008      	beq.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009168:	e00f      	b.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800916a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800916e:	4618      	mov	r0, r3
 8009170:	f000 fb10 	bl	8009794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009178:	e04e      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800917a:	f107 0318 	add.w	r3, r7, #24
 800917e:	4618      	mov	r0, r3
 8009180:	f000 f870 	bl	8009264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009188:	e046      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800918e:	bf00      	nop
 8009190:	e042      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009198:	d13c      	bne.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800919a:	4b24      	ldr	r3, [pc, #144]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800919c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800919e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80091a2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091aa:	d01e      	beq.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80091ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091b0:	d805      	bhi.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00d      	beq.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80091b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091ba:	d00e      	beq.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80091bc:	e026      	b.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80091be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091c2:	d01d      	beq.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80091c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091c8:	d01d      	beq.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80091ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091ce:	d014      	beq.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80091d0:	e01c      	b.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80091d2:	f000 f831 	bl	8009238 <HAL_RCCEx_GetD3PCLK1Freq>
 80091d6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80091d8:	e01e      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091da:	f107 0318 	add.w	r3, r7, #24
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 f840 	bl	8009264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091e8:	e016      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ea:	f107 030c 	add.w	r3, r7, #12
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 f984 	bl	80094fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091f8:	e00e      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80091fa:	4b0d      	ldr	r3, [pc, #52]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80091fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091fe:	e00b      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8009200:	4b0c      	ldr	r3, [pc, #48]	; (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009202:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009204:	e008      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8009206:	4b07      	ldr	r3, [pc, #28]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009208:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800920a:	e005      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009210:	bf00      	nop
 8009212:	e001      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800921a:	4618      	mov	r0, r3
 800921c:	3740      	adds	r7, #64	; 0x40
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	007a1200 	.word	0x007a1200
 8009228:	00bb8000 	.word	0x00bb8000
 800922c:	58024400 	.word	0x58024400
 8009230:	03d09000 	.word	0x03d09000
 8009234:	003d0900 	.word	0x003d0900

08009238 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800923c:	f7fe fe4a 	bl	8007ed4 <HAL_RCC_GetHCLKFreq>
 8009240:	4601      	mov	r1, r0
 8009242:	4b06      	ldr	r3, [pc, #24]	; (800925c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	091b      	lsrs	r3, r3, #4
 8009248:	f003 0307 	and.w	r3, r3, #7
 800924c:	4a04      	ldr	r2, [pc, #16]	; (8009260 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800924e:	5cd3      	ldrb	r3, [r2, r3]
 8009250:	f003 031f 	and.w	r3, r3, #31
 8009254:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009258:	4618      	mov	r0, r3
 800925a:	bd80      	pop	{r7, pc}
 800925c:	58024400 	.word	0x58024400
 8009260:	08014314 	.word	0x08014314

08009264 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009264:	b480      	push	{r7}
 8009266:	b089      	sub	sp, #36	; 0x24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800926c:	4b9d      	ldr	r3, [pc, #628]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800926e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009270:	f003 0303 	and.w	r3, r3, #3
 8009274:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009276:	4b9b      	ldr	r3, [pc, #620]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	0b1b      	lsrs	r3, r3, #12
 800927c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009280:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009282:	4b98      	ldr	r3, [pc, #608]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	091b      	lsrs	r3, r3, #4
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800928e:	4b95      	ldr	r3, [pc, #596]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009292:	08db      	lsrs	r3, r3, #3
 8009294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	fb02 f303 	mul.w	r3, r2, r3
 800929e:	ee07 3a90 	vmov	s15, r3
 80092a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 810a 	beq.w	80094c6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d05a      	beq.n	800936e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d302      	bcc.n	80092c2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d078      	beq.n	80093b2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80092c0:	e099      	b.n	80093f6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092c2:	4b88      	ldr	r3, [pc, #544]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 0320 	and.w	r3, r3, #32
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d02d      	beq.n	800932a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092ce:	4b85      	ldr	r3, [pc, #532]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	08db      	lsrs	r3, r3, #3
 80092d4:	f003 0303 	and.w	r3, r3, #3
 80092d8:	4a83      	ldr	r2, [pc, #524]	; (80094e8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80092da:	fa22 f303 	lsr.w	r3, r2, r3
 80092de:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	ee07 3a90 	vmov	s15, r3
 80092f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f8:	4b7a      	ldr	r3, [pc, #488]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80092fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009300:	ee07 3a90 	vmov	s15, r3
 8009304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009308:	ed97 6a03 	vldr	s12, [r7, #12]
 800930c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80094ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009310:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009314:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800931c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009324:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009328:	e087      	b.n	800943a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	ee07 3a90 	vmov	s15, r3
 8009330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009334:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8009338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800933c:	4b69      	ldr	r3, [pc, #420]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800933e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009344:	ee07 3a90 	vmov	s15, r3
 8009348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009350:	eddf 5a66 	vldr	s11, [pc, #408]	; 80094ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009354:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009358:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009360:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009368:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800936c:	e065      	b.n	800943a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	ee07 3a90 	vmov	s15, r3
 8009374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009378:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80094f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800937c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009380:	4b58      	ldr	r3, [pc, #352]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009388:	ee07 3a90 	vmov	s15, r3
 800938c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009390:	ed97 6a03 	vldr	s12, [r7, #12]
 8009394:	eddf 5a55 	vldr	s11, [pc, #340]	; 80094ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009398:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093b0:	e043      	b.n	800943a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	ee07 3a90 	vmov	s15, r3
 80093b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80093c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c4:	4b47      	ldr	r3, [pc, #284]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80093c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093cc:	ee07 3a90 	vmov	s15, r3
 80093d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80093d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80094ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80093dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093f4:	e021      	b.n	800943a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	ee07 3a90 	vmov	s15, r3
 80093fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009400:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80094f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009408:	4b36      	ldr	r3, [pc, #216]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800940a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009410:	ee07 3a90 	vmov	s15, r3
 8009414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009418:	ed97 6a03 	vldr	s12, [r7, #12]
 800941c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80094ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800942c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009434:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009438:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800943a:	4b2a      	ldr	r3, [pc, #168]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800943c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943e:	0a5b      	lsrs	r3, r3, #9
 8009440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009444:	ee07 3a90 	vmov	s15, r3
 8009448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009454:	edd7 6a07 	vldr	s13, [r7, #28]
 8009458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800945c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009460:	ee17 2a90 	vmov	r2, s15
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009468:	4b1e      	ldr	r3, [pc, #120]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946c:	0c1b      	lsrs	r3, r3, #16
 800946e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800947e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009482:	edd7 6a07 	vldr	s13, [r7, #28]
 8009486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800948a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800948e:	ee17 2a90 	vmov	r2, s15
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009496:	4b13      	ldr	r3, [pc, #76]	; (80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949a:	0e1b      	lsrs	r3, r3, #24
 800949c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094a0:	ee07 3a90 	vmov	s15, r3
 80094a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094bc:	ee17 2a90 	vmov	r2, s15
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094c4:	e008      	b.n	80094d8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	609a      	str	r2, [r3, #8]
}
 80094d8:	bf00      	nop
 80094da:	3724      	adds	r7, #36	; 0x24
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	58024400 	.word	0x58024400
 80094e8:	03d09000 	.word	0x03d09000
 80094ec:	46000000 	.word	0x46000000
 80094f0:	4c742400 	.word	0x4c742400
 80094f4:	4a742400 	.word	0x4a742400
 80094f8:	4af42400 	.word	0x4af42400

080094fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b089      	sub	sp, #36	; 0x24
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009504:	4b9d      	ldr	r3, [pc, #628]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009508:	f003 0303 	and.w	r3, r3, #3
 800950c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800950e:	4b9b      	ldr	r3, [pc, #620]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009512:	0d1b      	lsrs	r3, r3, #20
 8009514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009518:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800951a:	4b98      	ldr	r3, [pc, #608]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800951c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951e:	0a1b      	lsrs	r3, r3, #8
 8009520:	f003 0301 	and.w	r3, r3, #1
 8009524:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009526:	4b95      	ldr	r3, [pc, #596]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800952a:	08db      	lsrs	r3, r3, #3
 800952c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	fb02 f303 	mul.w	r3, r2, r3
 8009536:	ee07 3a90 	vmov	s15, r3
 800953a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 810a 	beq.w	800975e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d05a      	beq.n	8009606 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009550:	2b01      	cmp	r3, #1
 8009552:	d302      	bcc.n	800955a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009554:	2b02      	cmp	r3, #2
 8009556:	d078      	beq.n	800964a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8009558:	e099      	b.n	800968e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800955a:	4b88      	ldr	r3, [pc, #544]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b00      	cmp	r3, #0
 8009564:	d02d      	beq.n	80095c2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009566:	4b85      	ldr	r3, [pc, #532]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	08db      	lsrs	r3, r3, #3
 800956c:	f003 0303 	and.w	r3, r3, #3
 8009570:	4a83      	ldr	r2, [pc, #524]	; (8009780 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009572:	fa22 f303 	lsr.w	r3, r2, r3
 8009576:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	ee07 3a90 	vmov	s15, r3
 8009588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009590:	4b7a      	ldr	r3, [pc, #488]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009598:	ee07 3a90 	vmov	s15, r3
 800959c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80095a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80095a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80095c0:	e087      	b.n	80096d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009788 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80095d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d4:	4b69      	ldr	r3, [pc, #420]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095dc:	ee07 3a90 	vmov	s15, r3
 80095e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80095e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80095ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009600:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009604:	e065      	b.n	80096d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	ee07 3a90 	vmov	s15, r3
 800960c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009610:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800978c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009618:	4b58      	ldr	r3, [pc, #352]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800961a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009620:	ee07 3a90 	vmov	s15, r3
 8009624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009628:	ed97 6a03 	vldr	s12, [r7, #12]
 800962c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800963c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009644:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009648:	e043      	b.n	80096d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	ee07 3a90 	vmov	s15, r3
 8009650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009654:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009790 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8009658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965c:	4b47      	ldr	r3, [pc, #284]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800965e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009664:	ee07 3a90 	vmov	s15, r3
 8009668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009670:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009688:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800968c:	e021      	b.n	80096d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	ee07 3a90 	vmov	s15, r3
 8009694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009698:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800978c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800969c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a0:	4b36      	ldr	r3, [pc, #216]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80096a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a8:	ee07 3a90 	vmov	s15, r3
 80096ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80096b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80096b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096d0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80096d2:	4b2a      	ldr	r3, [pc, #168]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80096d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d6:	0a5b      	lsrs	r3, r3, #9
 80096d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096dc:	ee07 3a90 	vmov	s15, r3
 80096e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80096f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096f8:	ee17 2a90 	vmov	r2, s15
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009700:	4b1e      	ldr	r3, [pc, #120]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009704:	0c1b      	lsrs	r3, r3, #16
 8009706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800971a:	edd7 6a07 	vldr	s13, [r7, #28]
 800971e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009726:	ee17 2a90 	vmov	r2, s15
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800972e:	4b13      	ldr	r3, [pc, #76]	; (800977c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	0e1b      	lsrs	r3, r3, #24
 8009734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009738:	ee07 3a90 	vmov	s15, r3
 800973c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009744:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009748:	edd7 6a07 	vldr	s13, [r7, #28]
 800974c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009754:	ee17 2a90 	vmov	r2, s15
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800975c:	e008      	b.n	8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	609a      	str	r2, [r3, #8]
}
 8009770:	bf00      	nop
 8009772:	3724      	adds	r7, #36	; 0x24
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	58024400 	.word	0x58024400
 8009780:	03d09000 	.word	0x03d09000
 8009784:	46000000 	.word	0x46000000
 8009788:	4c742400 	.word	0x4c742400
 800978c:	4a742400 	.word	0x4a742400
 8009790:	4af42400 	.word	0x4af42400

08009794 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009794:	b480      	push	{r7}
 8009796:	b089      	sub	sp, #36	; 0x24
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800979c:	4b9d      	ldr	r3, [pc, #628]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a0:	f003 0303 	and.w	r3, r3, #3
 80097a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80097a6:	4b9b      	ldr	r3, [pc, #620]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097aa:	091b      	lsrs	r3, r3, #4
 80097ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80097b2:	4b98      	ldr	r3, [pc, #608]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80097bc:	4b95      	ldr	r3, [pc, #596]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c0:	08db      	lsrs	r3, r3, #3
 80097c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	fb02 f303 	mul.w	r3, r2, r3
 80097cc:	ee07 3a90 	vmov	s15, r3
 80097d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 810a 	beq.w	80099f4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d05a      	beq.n	800989c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d302      	bcc.n	80097f0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d078      	beq.n	80098e0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80097ee:	e099      	b.n	8009924 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097f0:	4b88      	ldr	r3, [pc, #544]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 0320 	and.w	r3, r3, #32
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d02d      	beq.n	8009858 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097fc:	4b85      	ldr	r3, [pc, #532]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	08db      	lsrs	r3, r3, #3
 8009802:	f003 0303 	and.w	r3, r3, #3
 8009806:	4a84      	ldr	r2, [pc, #528]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8009808:	fa22 f303 	lsr.w	r3, r2, r3
 800980c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	ee07 3a90 	vmov	s15, r3
 8009814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	ee07 3a90 	vmov	s15, r3
 800981e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009826:	4b7b      	ldr	r3, [pc, #492]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982e:	ee07 3a90 	vmov	s15, r3
 8009832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009836:	ed97 6a03 	vldr	s12, [r7, #12]
 800983a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800983e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800984a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800984e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009852:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009856:	e087      	b.n	8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	ee07 3a90 	vmov	s15, r3
 800985e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009862:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8009866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800986a:	4b6a      	ldr	r3, [pc, #424]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800986c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009872:	ee07 3a90 	vmov	s15, r3
 8009876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800987a:	ed97 6a03 	vldr	s12, [r7, #12]
 800987e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800988a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800988e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009896:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800989a:	e065      	b.n	8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80098aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ae:	4b59      	ldr	r3, [pc, #356]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80098b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b6:	ee07 3a90 	vmov	s15, r3
 80098ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098be:	ed97 6a03 	vldr	s12, [r7, #12]
 80098c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80098c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098de:	e043      	b.n	8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098f2:	4b48      	ldr	r3, [pc, #288]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80098f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009902:	ed97 6a03 	vldr	s12, [r7, #12]
 8009906:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800990a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800990e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800991a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800991e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009922:	e021      	b.n	8009968 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800992e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009936:	4b37      	ldr	r3, [pc, #220]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993e:	ee07 3a90 	vmov	s15, r3
 8009942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009946:	ed97 6a03 	vldr	s12, [r7, #12]
 800994a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800994e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800995a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009962:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009966:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009968:	4b2a      	ldr	r3, [pc, #168]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800996a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800996c:	0a5b      	lsrs	r3, r3, #9
 800996e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800997e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009982:	edd7 6a07 	vldr	s13, [r7, #28]
 8009986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800998a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800998e:	ee17 2a90 	vmov	r2, s15
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009996:	4b1f      	ldr	r3, [pc, #124]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999a:	0c1b      	lsrs	r3, r3, #16
 800999c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a0:	ee07 3a90 	vmov	s15, r3
 80099a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80099b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099bc:	ee17 2a90 	vmov	r2, s15
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80099c4:	4b13      	ldr	r3, [pc, #76]	; (8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80099c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c8:	0e1b      	lsrs	r3, r3, #24
 80099ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099de:	edd7 6a07 	vldr	s13, [r7, #28]
 80099e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ea:	ee17 2a90 	vmov	r2, s15
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80099f2:	e008      	b.n	8009a06 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	609a      	str	r2, [r3, #8]
}
 8009a06:	bf00      	nop
 8009a08:	3724      	adds	r7, #36	; 0x24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	58024400 	.word	0x58024400
 8009a18:	03d09000 	.word	0x03d09000
 8009a1c:	46000000 	.word	0x46000000
 8009a20:	4c742400 	.word	0x4c742400
 8009a24:	4a742400 	.word	0x4a742400
 8009a28:	4af42400 	.word	0x4af42400

08009a2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a3a:	4b53      	ldr	r3, [pc, #332]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3e:	f003 0303 	and.w	r3, r3, #3
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d101      	bne.n	8009a4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e099      	b.n	8009b7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a4a:	4b4f      	ldr	r3, [pc, #316]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a4e      	ldr	r2, [pc, #312]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009a50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a56:	f7f7 ff35 	bl	80018c4 <HAL_GetTick>
 8009a5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a5c:	e008      	b.n	8009a70 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a5e:	f7f7 ff31 	bl	80018c4 <HAL_GetTick>
 8009a62:	4602      	mov	r2, r0
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d901      	bls.n	8009a70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e086      	b.n	8009b7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a70:	4b45      	ldr	r3, [pc, #276]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1f0      	bne.n	8009a5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a7c:	4b42      	ldr	r3, [pc, #264]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	031b      	lsls	r3, r3, #12
 8009a8a:	493f      	ldr	r1, [pc, #252]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	628b      	str	r3, [r1, #40]	; 0x28
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	025b      	lsls	r3, r3, #9
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	431a      	orrs	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	041b      	lsls	r3, r3, #16
 8009aae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	061b      	lsls	r3, r3, #24
 8009abc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ac0:	4931      	ldr	r1, [pc, #196]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009ac6:	4b30      	ldr	r3, [pc, #192]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	492d      	ldr	r1, [pc, #180]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ad8:	4b2b      	ldr	r3, [pc, #172]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009adc:	f023 0220 	bic.w	r2, r3, #32
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	4928      	ldr	r1, [pc, #160]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009aea:	4b27      	ldr	r3, [pc, #156]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	4a26      	ldr	r2, [pc, #152]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009af0:	f023 0310 	bic.w	r3, r3, #16
 8009af4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009af6:	4b24      	ldr	r3, [pc, #144]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009af8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009afa:	4b24      	ldr	r3, [pc, #144]	; (8009b8c <RCCEx_PLL2_Config+0x160>)
 8009afc:	4013      	ands	r3, r2
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	69d2      	ldr	r2, [r2, #28]
 8009b02:	00d2      	lsls	r2, r2, #3
 8009b04:	4920      	ldr	r1, [pc, #128]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009b06:	4313      	orrs	r3, r2
 8009b08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b0a:	4b1f      	ldr	r3, [pc, #124]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0e:	4a1e      	ldr	r2, [pc, #120]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009b10:	f043 0310 	orr.w	r3, r3, #16
 8009b14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d106      	bne.n	8009b2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b1c:	4b1a      	ldr	r3, [pc, #104]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b20:	4a19      	ldr	r2, [pc, #100]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b28:	e00f      	b.n	8009b4a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d106      	bne.n	8009b3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b30:	4b15      	ldr	r3, [pc, #84]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b34:	4a14      	ldr	r2, [pc, #80]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b3c:	e005      	b.n	8009b4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b3e:	4b12      	ldr	r3, [pc, #72]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b42:	4a11      	ldr	r2, [pc, #68]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b4a:	4b0f      	ldr	r3, [pc, #60]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a0e      	ldr	r2, [pc, #56]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009b50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b56:	f7f7 feb5 	bl	80018c4 <HAL_GetTick>
 8009b5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b5c:	e008      	b.n	8009b70 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b5e:	f7f7 feb1 	bl	80018c4 <HAL_GetTick>
 8009b62:	4602      	mov	r2, r0
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d901      	bls.n	8009b70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	e006      	b.n	8009b7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b70:	4b05      	ldr	r3, [pc, #20]	; (8009b88 <RCCEx_PLL2_Config+0x15c>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d0f0      	beq.n	8009b5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	58024400 	.word	0x58024400
 8009b8c:	ffff0007 	.word	0xffff0007

08009b90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b9e:	4b53      	ldr	r3, [pc, #332]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba2:	f003 0303 	and.w	r3, r3, #3
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d101      	bne.n	8009bae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e099      	b.n	8009ce2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009bae:	4b4f      	ldr	r3, [pc, #316]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a4e      	ldr	r2, [pc, #312]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bba:	f7f7 fe83 	bl	80018c4 <HAL_GetTick>
 8009bbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bc0:	e008      	b.n	8009bd4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009bc2:	f7f7 fe7f 	bl	80018c4 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d901      	bls.n	8009bd4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e086      	b.n	8009ce2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bd4:	4b45      	ldr	r3, [pc, #276]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1f0      	bne.n	8009bc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009be0:	4b42      	ldr	r3, [pc, #264]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	051b      	lsls	r3, r3, #20
 8009bee:	493f      	ldr	r1, [pc, #252]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	628b      	str	r3, [r1, #40]	; 0x28
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	025b      	lsls	r3, r3, #9
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	431a      	orrs	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	041b      	lsls	r3, r3, #16
 8009c12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c16:	431a      	orrs	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	061b      	lsls	r3, r3, #24
 8009c20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c24:	4931      	ldr	r1, [pc, #196]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c2a:	4b30      	ldr	r3, [pc, #192]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	492d      	ldr	r1, [pc, #180]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c3c:	4b2b      	ldr	r3, [pc, #172]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	4928      	ldr	r1, [pc, #160]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c4e:	4b27      	ldr	r3, [pc, #156]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c52:	4a26      	ldr	r2, [pc, #152]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c5a:	4b24      	ldr	r3, [pc, #144]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c5e:	4b24      	ldr	r3, [pc, #144]	; (8009cf0 <RCCEx_PLL3_Config+0x160>)
 8009c60:	4013      	ands	r3, r2
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	69d2      	ldr	r2, [r2, #28]
 8009c66:	00d2      	lsls	r2, r2, #3
 8009c68:	4920      	ldr	r1, [pc, #128]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c6e:	4b1f      	ldr	r3, [pc, #124]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c72:	4a1e      	ldr	r2, [pc, #120]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d106      	bne.n	8009c8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c80:	4b1a      	ldr	r3, [pc, #104]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	4a19      	ldr	r2, [pc, #100]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c8c:	e00f      	b.n	8009cae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d106      	bne.n	8009ca2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c94:	4b15      	ldr	r3, [pc, #84]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c98:	4a14      	ldr	r2, [pc, #80]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009c9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ca0:	e005      	b.n	8009cae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009ca2:	4b12      	ldr	r3, [pc, #72]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca6:	4a11      	ldr	r2, [pc, #68]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009cae:	4b0f      	ldr	r3, [pc, #60]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a0e      	ldr	r2, [pc, #56]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cba:	f7f7 fe03 	bl	80018c4 <HAL_GetTick>
 8009cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cc0:	e008      	b.n	8009cd4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009cc2:	f7f7 fdff 	bl	80018c4 <HAL_GetTick>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d901      	bls.n	8009cd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e006      	b.n	8009ce2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cd4:	4b05      	ldr	r3, [pc, #20]	; (8009cec <RCCEx_PLL3_Config+0x15c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d0f0      	beq.n	8009cc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	58024400 	.word	0x58024400
 8009cf0:	ffff0007 	.word	0xffff0007

08009cf4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b08a      	sub	sp, #40	; 0x28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e07c      	b.n	8009e00 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10c      	bne.n	8009d2c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d102      	bne.n	8009d26 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2202      	movs	r2, #2
 8009d24:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7f7 fb3e 	bl	80013a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2203      	movs	r2, #3
 8009d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f867 	bl	8009e08 <HAL_SD_InitCard>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e05d      	b.n	8009e00 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009d44:	f107 0308 	add.w	r3, r7, #8
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fdb8 	bl	800a8c0 <HAL_SD_GetCardStatus>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e052      	b.n	8009e00 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009d5a:	7e3b      	ldrb	r3, [r7, #24]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009d60:	7e7b      	ldrb	r3, [r7, #25]
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d10a      	bne.n	8009d84 <HAL_SD_Init+0x90>
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d102      	bne.n	8009d7a <HAL_SD_Init+0x86>
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d004      	beq.n	8009d84 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d80:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d82:	e00b      	b.n	8009d9c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d104      	bne.n	8009d96 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d92:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d94:	e002      	b.n	8009d9c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	4619      	mov	r1, r3
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fe6e 	bl	800aa84 <HAL_SD_ConfigWideBusOperation>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e026      	b.n	8009e00 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009db2:	f7f7 fd87 	bl	80018c4 <HAL_GetTick>
 8009db6:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009db8:	e011      	b.n	8009dde <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8009dba:	f7f7 fd83 	bl	80018c4 <HAL_GetTick>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc8:	d109      	bne.n	8009dde <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009dd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e010      	b.n	8009e00 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 fefa 	bl	800abd8 <HAL_SD_GetCardState>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b04      	cmp	r3, #4
 8009de8:	d1e7      	bne.n	8009dba <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3728      	adds	r7, #40	; 0x28
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009e08:	b5b0      	push	{r4, r5, r7, lr}
 8009e0a:	b08e      	sub	sp, #56	; 0x38
 8009e0c:	af04      	add	r7, sp, #16
 8009e0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009e10:	2300      	movs	r3, #0
 8009e12:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009e14:	2300      	movs	r3, #0
 8009e16:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009e20:	23fa      	movs	r3, #250	; 0xfa
 8009e22:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d107      	bne.n	8009e3c <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f042 0210 	orr.w	r2, r2, #16
 8009e3a:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681d      	ldr	r5, [r3, #0]
 8009e40:	466c      	mov	r4, sp
 8009e42:	f107 0314 	add.w	r3, r7, #20
 8009e46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e4e:	f107 0308 	add.w	r3, r7, #8
 8009e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e54:	4628      	mov	r0, r5
 8009e56:	f004 f9d9 	bl	800e20c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f004 fa1c 	bl	800e29c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8009e64:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009e68:	f7fe ff6e 	bl	8008d48 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	4b2d      	ldr	r3, [pc, #180]	; (8009f24 <HAL_SD_InitCard+0x11c>)
 8009e70:	fba3 2302 	umull	r2, r3, r3, r2
 8009e74:	095b      	lsrs	r3, r3, #5
 8009e76:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d008      	beq.n	8009e90 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8009e7e:	4a2a      	ldr	r2, [pc, #168]	; (8009f28 <HAL_SD_InitCard+0x120>)
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e86:	3301      	adds	r3, #1
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7f7 fd27 	bl	80018dc <HAL_Delay>
 8009e8e:	e002      	b.n	8009e96 <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 8009e90:	2002      	movs	r0, #2
 8009e92:	f7f7 fd23 	bl	80018dc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 ff7c 	bl	800ad94 <SD_PowerON>
 8009e9c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00b      	beq.n	8009ebc <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e02e      	b.n	8009f1a <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 feab 	bl	800ac18 <SD_InitCard>
 8009ec2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00b      	beq.n	8009ee2 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e01b      	b.n	8009f1a <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009eea:	4618      	mov	r0, r3
 8009eec:	f004 fa6c 	bl	800e3c8 <SDMMC_CmdBlockLength>
 8009ef0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00f      	beq.n	8009f18 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a0b      	ldr	r2, [pc, #44]	; (8009f2c <HAL_SD_InitCard+0x124>)
 8009efe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	431a      	orrs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e000      	b.n	8009f1a <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3728      	adds	r7, #40	; 0x28
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bdb0      	pop	{r4, r5, r7, pc}
 8009f22:	bf00      	nop
 8009f24:	10624dd3 	.word	0x10624dd3
 8009f28:	00012110 	.word	0x00012110
 8009f2c:	1fe00fff 	.word	0x1fe00fff

08009f30 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b092      	sub	sp, #72	; 0x48
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
 8009f3c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009f3e:	f7f7 fcc1 	bl	80018c4 <HAL_GetTick>
 8009f42:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d107      	bne.n	8009f62 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e167      	b.n	800a232 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	f040 815a 	bne.w	800a224 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	441a      	add	r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d907      	bls.n	8009f94 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f88:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e14e      	b.n	800a232 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2203      	movs	r2, #3
 8009f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d002      	beq.n	8009fb2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fae:	025b      	lsls	r3, r3, #9
 8009fb0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	025b      	lsls	r3, r3, #9
 8009fbc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009fbe:	2390      	movs	r3, #144	; 0x90
 8009fc0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f107 0214 	add.w	r2, r7, #20
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f004 f9c9 	bl	800e370 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68da      	ldr	r2, [r3, #12]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fec:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d90a      	bls.n	800a00a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a000:	4618      	mov	r0, r3
 800a002:	f004 fa27 	bl	800e454 <SDMMC_CmdReadMultiBlock>
 800a006:	6478      	str	r0, [r7, #68]	; 0x44
 800a008:	e009      	b.n	800a01e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2201      	movs	r2, #1
 800a00e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a016:	4618      	mov	r0, r3
 800a018:	f004 f9f9 	bl	800e40e <SDMMC_CmdReadSingleBlock>
 800a01c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a01e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a020:	2b00      	cmp	r3, #0
 800a022:	d012      	beq.n	800a04a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a84      	ldr	r2, [pc, #528]	; (800a23c <HAL_SD_ReadBlocks+0x30c>)
 800a02a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a032:	431a      	orrs	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e0f3      	b.n	800a232 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a04e:	e058      	b.n	800a102 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d033      	beq.n	800a0c6 <HAL_SD_ReadBlocks+0x196>
 800a05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a060:	2b1f      	cmp	r3, #31
 800a062:	d930      	bls.n	800a0c6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a064:	2300      	movs	r3, #0
 800a066:	643b      	str	r3, [r7, #64]	; 0x40
 800a068:	e027      	b.n	800a0ba <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4618      	mov	r0, r3
 800a070:	f004 f8f6 	bl	800e260 <SDMMC_ReadFIFO>
 800a074:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a07c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a080:	3301      	adds	r3, #1
 800a082:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	0a1b      	lsrs	r3, r3, #8
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a08c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a090:	3301      	adds	r3, #1
 800a092:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a096:	0c1b      	lsrs	r3, r3, #16
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a09c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a6:	0e1b      	lsrs	r3, r3, #24
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800a0b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	643b      	str	r3, [r7, #64]	; 0x40
 800a0ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0bc:	2b07      	cmp	r3, #7
 800a0be:	d9d4      	bls.n	800a06a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c2:	3b20      	subs	r3, #32
 800a0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a0c6:	f7f7 fbfd 	bl	80018c4 <HAL_GetTick>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d902      	bls.n	800a0dc <HAL_SD_ReadBlocks+0x1ac>
 800a0d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d112      	bne.n	800a102 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a56      	ldr	r2, [pc, #344]	; (800a23c <HAL_SD_ReadBlocks+0x30c>)
 800a0e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a0fe:	2303      	movs	r3, #3
 800a100:	e097      	b.n	800a232 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a108:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d09f      	beq.n	800a050 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68da      	ldr	r2, [r3, #12]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a11e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d022      	beq.n	800a174 <HAL_SD_ReadBlocks+0x244>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d91f      	bls.n	800a174 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d01b      	beq.n	800a174 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4618      	mov	r0, r3
 800a142:	f004 f9f1 	bl	800e528 <SDMMC_CmdStopTransfer>
 800a146:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d012      	beq.n	800a174 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a3a      	ldr	r2, [pc, #232]	; (800a23c <HAL_SD_ReadBlocks+0x30c>)
 800a154:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a15c:	431a      	orrs	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e05e      	b.n	800a232 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a17a:	f003 0308 	and.w	r3, r3, #8
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d012      	beq.n	800a1a8 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a2d      	ldr	r2, [pc, #180]	; (800a23c <HAL_SD_ReadBlocks+0x30c>)
 800a188:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a18e:	f043 0208 	orr.w	r2, r3, #8
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e044      	b.n	800a232 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ae:	f003 0302 	and.w	r3, r3, #2
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d012      	beq.n	800a1dc <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a20      	ldr	r2, [pc, #128]	; (800a23c <HAL_SD_ReadBlocks+0x30c>)
 800a1bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c2:	f043 0202 	orr.w	r2, r3, #2
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e02a      	b.n	800a232 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e2:	f003 0320 	and.w	r3, r3, #32
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d012      	beq.n	800a210 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a13      	ldr	r2, [pc, #76]	; (800a23c <HAL_SD_ReadBlocks+0x30c>)
 800a1f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f6:	f043 0220 	orr.w	r2, r3, #32
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e010      	b.n	800a232 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a0a      	ldr	r2, [pc, #40]	; (800a240 <HAL_SD_ReadBlocks+0x310>)
 800a216:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	e006      	b.n	800a232 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a228:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a230:	2301      	movs	r3, #1
  }
}
 800a232:	4618      	mov	r0, r3
 800a234:	3748      	adds	r7, #72	; 0x48
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	1fe00fff 	.word	0x1fe00fff
 800a240:	18000f3a 	.word	0x18000f3a

0800a244 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b092      	sub	sp, #72	; 0x48
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a252:	f7f7 fb37 	bl	80018c4 <HAL_GetTick>
 800a256:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d107      	bne.n	800a276 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e16b      	b.n	800a54e <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	2b01      	cmp	r3, #1
 800a280:	f040 815e 	bne.w	800a540 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a28a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	441a      	add	r2, r3
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a294:	429a      	cmp	r2, r3
 800a296:	d907      	bls.n	800a2a8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e152      	b.n	800a54e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2203      	movs	r2, #3
 800a2ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d002      	beq.n	800a2c6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	025b      	lsls	r3, r3, #9
 800a2c4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ca:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	025b      	lsls	r3, r3, #9
 800a2d0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a2d2:	2390      	movs	r3, #144	; 0x90
 800a2d4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f107 0218 	add.w	r2, r7, #24
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f004 f83f 	bl	800e370 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68da      	ldr	r2, [r3, #12]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a300:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d90a      	bls.n	800a31e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2220      	movs	r2, #32
 800a30c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a314:	4618      	mov	r0, r3
 800a316:	f004 f8e3 	bl	800e4e0 <SDMMC_CmdWriteMultiBlock>
 800a31a:	6478      	str	r0, [r7, #68]	; 0x44
 800a31c:	e009      	b.n	800a332 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2210      	movs	r2, #16
 800a322:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a32a:	4618      	mov	r0, r3
 800a32c:	f004 f8b5 	bl	800e49a <SDMMC_CmdWriteSingleBlock>
 800a330:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a334:	2b00      	cmp	r3, #0
 800a336:	d012      	beq.n	800a35e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a86      	ldr	r2, [pc, #536]	; (800a558 <HAL_SD_WriteBlocks+0x314>)
 800a33e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a346:	431a      	orrs	r2, r3
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e0f7      	b.n	800a54e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a362:	e05c      	b.n	800a41e <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a36a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d037      	beq.n	800a3e2 <HAL_SD_WriteBlocks+0x19e>
 800a372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a374:	2b1f      	cmp	r3, #31
 800a376:	d934      	bls.n	800a3e2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a378:	2300      	movs	r3, #0
 800a37a:	643b      	str	r3, [r7, #64]	; 0x40
 800a37c:	e02b      	b.n	800a3d6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800a37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a386:	3301      	adds	r3, #1
 800a388:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	021a      	lsls	r2, r3, #8
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	4313      	orrs	r3, r2
 800a394:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a398:	3301      	adds	r3, #1
 800a39a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	041a      	lsls	r2, r3, #16
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	061a      	lsls	r2, r3, #24
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3bc:	3301      	adds	r3, #1
 800a3be:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f107 0214 	add.w	r2, r7, #20
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f003 ff55 	bl	800e27a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a3d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d8:	2b07      	cmp	r3, #7
 800a3da:	d9d0      	bls.n	800a37e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3de:	3b20      	subs	r3, #32
 800a3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a3e2:	f7f7 fa6f 	bl	80018c4 <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d902      	bls.n	800a3f8 <HAL_SD_WriteBlocks+0x1b4>
 800a3f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d112      	bne.n	800a41e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a56      	ldr	r2, [pc, #344]	; (800a558 <HAL_SD_WriteBlocks+0x314>)
 800a3fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a406:	431a      	orrs	r2, r3
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e097      	b.n	800a54e <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a424:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d09b      	beq.n	800a364 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68da      	ldr	r2, [r3, #12]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a43a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a446:	2b00      	cmp	r3, #0
 800a448:	d022      	beq.n	800a490 <HAL_SD_WriteBlocks+0x24c>
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d91f      	bls.n	800a490 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a454:	2b03      	cmp	r3, #3
 800a456:	d01b      	beq.n	800a490 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f004 f863 	bl	800e528 <SDMMC_CmdStopTransfer>
 800a462:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a466:	2b00      	cmp	r3, #0
 800a468:	d012      	beq.n	800a490 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a3a      	ldr	r2, [pc, #232]	; (800a558 <HAL_SD_WriteBlocks+0x314>)
 800a470:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a478:	431a      	orrs	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e05e      	b.n	800a54e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a496:	f003 0308 	and.w	r3, r3, #8
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d012      	beq.n	800a4c4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a2d      	ldr	r2, [pc, #180]	; (800a558 <HAL_SD_WriteBlocks+0x314>)
 800a4a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4aa:	f043 0208 	orr.w	r2, r3, #8
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e044      	b.n	800a54e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ca:	f003 0302 	and.w	r3, r3, #2
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d012      	beq.n	800a4f8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a20      	ldr	r2, [pc, #128]	; (800a558 <HAL_SD_WriteBlocks+0x314>)
 800a4d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4de:	f043 0202 	orr.w	r2, r3, #2
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e02a      	b.n	800a54e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fe:	f003 0310 	and.w	r3, r3, #16
 800a502:	2b00      	cmp	r3, #0
 800a504:	d012      	beq.n	800a52c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a13      	ldr	r2, [pc, #76]	; (800a558 <HAL_SD_WriteBlocks+0x314>)
 800a50c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a512:	f043 0210 	orr.w	r2, r3, #16
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	e010      	b.n	800a54e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a0a      	ldr	r2, [pc, #40]	; (800a55c <HAL_SD_WriteBlocks+0x318>)
 800a532:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	e006      	b.n	800a54e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a544:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
  }
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3748      	adds	r7, #72	; 0x48
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	1fe00fff 	.word	0x1fe00fff
 800a55c:	18000f3a 	.word	0x18000f3a

0800a560 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800a56a:	bf00      	nop
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
	...

0800a578 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a586:	0f9b      	lsrs	r3, r3, #30
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a592:	0e9b      	lsrs	r3, r3, #26
 800a594:	b2db      	uxtb	r3, r3
 800a596:	f003 030f 	and.w	r3, r3, #15
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5a4:	0e1b      	lsrs	r3, r3, #24
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	f003 0303 	and.w	r3, r3, #3
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5b6:	0c1b      	lsrs	r3, r3, #16
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5c2:	0a1b      	lsrs	r3, r3, #8
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5d8:	0d1b      	lsrs	r3, r3, #20
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5e4:	0c1b      	lsrs	r3, r3, #16
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	f003 030f 	and.w	r3, r3, #15
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5f6:	0bdb      	lsrs	r3, r3, #15
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a608:	0b9b      	lsrs	r3, r3, #14
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	f003 0301 	and.w	r3, r3, #1
 800a610:	b2da      	uxtb	r2, r3
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a61a:	0b5b      	lsrs	r3, r3, #13
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	b2da      	uxtb	r2, r3
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a62c:	0b1b      	lsrs	r3, r3, #12
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	b2da      	uxtb	r2, r3
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2200      	movs	r2, #0
 800a63e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a644:	2b00      	cmp	r3, #0
 800a646:	d163      	bne.n	800a710 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a64c:	009a      	lsls	r2, r3, #2
 800a64e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a652:	4013      	ands	r3, r2
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a658:	0f92      	lsrs	r2, r2, #30
 800a65a:	431a      	orrs	r2, r3
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a664:	0edb      	lsrs	r3, r3, #27
 800a666:	b2db      	uxtb	r3, r3
 800a668:	f003 0307 	and.w	r3, r3, #7
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a676:	0e1b      	lsrs	r3, r3, #24
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	f003 0307 	and.w	r3, r3, #7
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a688:	0d5b      	lsrs	r3, r3, #21
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	f003 0307 	and.w	r3, r3, #7
 800a690:	b2da      	uxtb	r2, r3
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a69a:	0c9b      	lsrs	r3, r3, #18
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	f003 0307 	and.w	r3, r3, #7
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6ac:	0bdb      	lsrs	r3, r3, #15
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	f003 0307 	and.w	r3, r3, #7
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	1c5a      	adds	r2, r3, #1
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	7e1b      	ldrb	r3, [r3, #24]
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	f003 0307 	and.w	r3, r3, #7
 800a6ce:	3302      	adds	r3, #2
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a6da:	fb02 f203 	mul.w	r2, r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	7a1b      	ldrb	r3, [r3, #8]
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	f003 030f 	and.w	r3, r3, #15
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	409a      	lsls	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a6fc:	0a52      	lsrs	r2, r2, #9
 800a6fe:	fb02 f203 	mul.w	r2, r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a70c:	659a      	str	r2, [r3, #88]	; 0x58
 800a70e:	e031      	b.n	800a774 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a714:	2b01      	cmp	r3, #1
 800a716:	d11d      	bne.n	800a754 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a71c:	041b      	lsls	r3, r3, #16
 800a71e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a726:	0c1b      	lsrs	r3, r3, #16
 800a728:	431a      	orrs	r2, r3
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	3301      	adds	r3, #1
 800a734:	029a      	lsls	r2, r3, #10
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a748:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	659a      	str	r2, [r3, #88]	; 0x58
 800a752:	e00f      	b.n	800a774 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a58      	ldr	r2, [pc, #352]	; (800a8bc <HAL_SD_GetCardCSD+0x344>)
 800a75a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a760:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e09d      	b.n	800a8b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a778:	0b9b      	lsrs	r3, r3, #14
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	f003 0301 	and.w	r3, r3, #1
 800a780:	b2da      	uxtb	r2, r3
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a78a:	09db      	lsrs	r3, r3, #7
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a792:	b2da      	uxtb	r2, r3
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7ac:	0fdb      	lsrs	r3, r3, #31
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7b8:	0f5b      	lsrs	r3, r3, #29
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	f003 0303 	and.w	r3, r3, #3
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7ca:	0e9b      	lsrs	r3, r3, #26
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	f003 0307 	and.w	r3, r3, #7
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7dc:	0d9b      	lsrs	r3, r3, #22
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	f003 030f 	and.w	r3, r3, #15
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7ee:	0d5b      	lsrs	r3, r3, #21
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	b2da      	uxtb	r2, r3
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a80a:	0c1b      	lsrs	r3, r3, #16
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	b2da      	uxtb	r2, r3
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a81e:	0bdb      	lsrs	r3, r3, #15
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a832:	0b9b      	lsrs	r3, r3, #14
 800a834:	b2db      	uxtb	r3, r3
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a846:	0b5b      	lsrs	r3, r3, #13
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a85a:	0b1b      	lsrs	r3, r3, #12
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	b2da      	uxtb	r2, r3
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a86e:	0a9b      	lsrs	r3, r3, #10
 800a870:	b2db      	uxtb	r3, r3
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	b2da      	uxtb	r2, r3
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a882:	0a1b      	lsrs	r3, r3, #8
 800a884:	b2db      	uxtb	r3, r3
 800a886:	f003 0303 	and.w	r3, r3, #3
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a896:	085b      	lsrs	r3, r3, #1
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	1fe00fff 	.word	0x1fe00fff

0800a8c0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b094      	sub	sp, #80	; 0x50
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a8d0:	f107 0308 	add.w	r3, r7, #8
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fb64 	bl	800afa4 <SD_SendSDStatus>
 800a8dc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d011      	beq.n	800a908 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a4f      	ldr	r2, [pc, #316]	; (800aa28 <HAL_SD_GetCardStatus+0x168>)
 800a8ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8f2:	431a      	orrs	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a906:	e070      	b.n	800a9ea <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	099b      	lsrs	r3, r3, #6
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	b2da      	uxtb	r2, r3
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	095b      	lsrs	r3, r3, #5
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	f003 0301 	and.w	r3, r3, #1
 800a922:	b2da      	uxtb	r2, r3
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	0a1b      	lsrs	r3, r3, #8
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a932:	b29a      	uxth	r2, r3
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	0e1b      	lsrs	r3, r3, #24
 800a938:	b29b      	uxth	r3, r3
 800a93a:	4313      	orrs	r3, r2
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	061a      	lsls	r2, r3, #24
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	021b      	lsls	r3, r3, #8
 800a94a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a94e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	0a1b      	lsrs	r3, r3, #8
 800a954:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a958:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	0e1b      	lsrs	r3, r3, #24
 800a95e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	b2da      	uxtb	r2, r3
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	0a1b      	lsrs	r3, r3, #8
 800a970:	b2da      	uxtb	r2, r3
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	0d1b      	lsrs	r3, r3, #20
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	f003 030f 	and.w	r3, r3, #15
 800a980:	b2da      	uxtb	r2, r3
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	0c1b      	lsrs	r3, r3, #16
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a990:	b29a      	uxth	r2, r3
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	b29b      	uxth	r3, r3
 800a996:	b2db      	uxtb	r3, r3
 800a998:	b29b      	uxth	r3, r3
 800a99a:	4313      	orrs	r3, r2
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	0a9b      	lsrs	r3, r3, #10
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	0a1b      	lsrs	r3, r3, #8
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	f003 0303 	and.w	r3, r3, #3
 800a9bc:	b2da      	uxtb	r2, r3
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	091b      	lsrs	r3, r3, #4
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	f003 030f 	and.w	r3, r3, #15
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	f003 030f 	and.w	r3, r3, #15
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	0e1b      	lsrs	r3, r3, #24
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f003 fce8 	bl	800e3c8 <SDMMC_CmdBlockLength>
 800a9f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00d      	beq.n	800aa1c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a08      	ldr	r2, [pc, #32]	; (800aa28 <HAL_SD_GetCardStatus+0x168>)
 800aa06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800aa1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3750      	adds	r7, #80	; 0x50
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	1fe00fff 	.word	0x1fe00fff

0800aa2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aa84:	b5b0      	push	{r4, r5, r7, lr}
 800aa86:	b08e      	sub	sp, #56	; 0x38
 800aa88:	af04      	add	r7, sp, #16
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2203      	movs	r2, #3
 800aa98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa0:	2b03      	cmp	r3, #3
 800aaa2:	d02e      	beq.n	800ab02 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaaa:	d106      	bne.n	800aaba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	639a      	str	r2, [r3, #56]	; 0x38
 800aab8:	e029      	b.n	800ab0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aac0:	d10a      	bne.n	800aad8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fb66 	bl	800b194 <SD_WideBus_Enable>
 800aac8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	431a      	orrs	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	639a      	str	r2, [r3, #56]	; 0x38
 800aad6:	e01a      	b.n	800ab0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10a      	bne.n	800aaf4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fba3 	bl	800b22a <SD_WideBus_Disable>
 800aae4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	431a      	orrs	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	639a      	str	r2, [r3, #56]	; 0x38
 800aaf2:	e00c      	b.n	800ab0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	639a      	str	r2, [r3, #56]	; 0x38
 800ab00:	e005      	b.n	800ab0e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d007      	beq.n	800ab26 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a2e      	ldr	r2, [pc, #184]	; (800abd4 <HAL_SD_ConfigWideBusOperation+0x150>)
 800ab1c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab24:	e034      	b.n	800ab90 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	695b      	ldr	r3, [r3, #20]
 800ab40:	2b03      	cmp	r3, #3
 800ab42:	d903      	bls.n	800ab4c <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	695b      	ldr	r3, [r3, #20]
 800ab48:	61bb      	str	r3, [r7, #24]
 800ab4a:	e012      	b.n	800ab72 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab54:	d103      	bne.n	800ab5e <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	695b      	ldr	r3, [r3, #20]
 800ab5a:	61bb      	str	r3, [r7, #24]
 800ab5c:	e009      	b.n	800ab72 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab66:	d102      	bne.n	800ab6e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800ab68:	2302      	movs	r3, #2
 800ab6a:	61bb      	str	r3, [r7, #24]
 800ab6c:	e001      	b.n	800ab72 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800ab6e:	2304      	movs	r3, #4
 800ab70:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681d      	ldr	r5, [r3, #0]
 800ab76:	466c      	mov	r4, sp
 800ab78:	f107 0314 	add.w	r3, r7, #20
 800ab7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab84:	f107 0308 	add.w	r3, r7, #8
 800ab88:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	f003 fb3e 	bl	800e20c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f003 fc15 	bl	800e3c8 <SDMMC_CmdBlockLength>
 800ab9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aba0:	6a3b      	ldr	r3, [r7, #32]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00c      	beq.n	800abc0 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a0a      	ldr	r2, [pc, #40]	; (800abd4 <HAL_SD_ConfigWideBusOperation+0x150>)
 800abac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abb2:	6a3b      	ldr	r3, [r7, #32]
 800abb4:	431a      	orrs	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800abc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3728      	adds	r7, #40	; 0x28
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bdb0      	pop	{r4, r5, r7, pc}
 800abd4:	1fe00fff 	.word	0x1fe00fff

0800abd8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800abe4:	f107 030c 	add.w	r3, r7, #12
 800abe8:	4619      	mov	r1, r3
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 faaa 	bl	800b144 <SD_SendStatus>
 800abf0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d005      	beq.n	800ac04 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	431a      	orrs	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	0a5b      	lsrs	r3, r3, #9
 800ac08:	f003 030f 	and.w	r3, r3, #15
 800ac0c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ac0e:	693b      	ldr	r3, [r7, #16]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3718      	adds	r7, #24
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ac18:	b590      	push	{r4, r7, lr}
 800ac1a:	b091      	sub	sp, #68	; 0x44
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ac20:	2301      	movs	r3, #1
 800ac22:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f003 fb48 	bl	800e2be <SDMMC_GetPowerState>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d102      	bne.n	800ac3a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ac34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ac38:	e0a8      	b.n	800ad8c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d02e      	beq.n	800aca0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f003 fd94 	bl	800e774 <SDMMC_CmdSendCID>
 800ac4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <SD_InitCard+0x40>
    {
      return errorstate;
 800ac54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac56:	e099      	b.n	800ad8c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f003 fb73 	bl	800e34a <SDMMC_GetResponse>
 800ac64:	4602      	mov	r2, r0
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2104      	movs	r1, #4
 800ac70:	4618      	mov	r0, r3
 800ac72:	f003 fb6a 	bl	800e34a <SDMMC_GetResponse>
 800ac76:	4602      	mov	r2, r0
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2108      	movs	r1, #8
 800ac82:	4618      	mov	r0, r3
 800ac84:	f003 fb61 	bl	800e34a <SDMMC_GetResponse>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	210c      	movs	r1, #12
 800ac94:	4618      	mov	r0, r3
 800ac96:	f003 fb58 	bl	800e34a <SDMMC_GetResponse>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	d00d      	beq.n	800acc4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f107 020e 	add.w	r2, r7, #14
 800acb0:	4611      	mov	r1, r2
 800acb2:	4618      	mov	r0, r3
 800acb4:	f003 fd9d 	bl	800e7f2 <SDMMC_CmdSetRelAdd>
 800acb8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800acba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <SD_InitCard+0xac>
    {
      return errorstate;
 800acc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc2:	e063      	b.n	800ad8c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc8:	2b03      	cmp	r3, #3
 800acca:	d036      	beq.n	800ad3a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800accc:	89fb      	ldrh	r3, [r7, #14]
 800acce:	461a      	mov	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acdc:	041b      	lsls	r3, r3, #16
 800acde:	4619      	mov	r1, r3
 800ace0:	4610      	mov	r0, r2
 800ace2:	f003 fd66 	bl	800e7b2 <SDMMC_CmdSendCSD>
 800ace6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ace8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <SD_InitCard+0xda>
    {
      return errorstate;
 800acee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf0:	e04c      	b.n	800ad8c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2100      	movs	r1, #0
 800acf8:	4618      	mov	r0, r3
 800acfa:	f003 fb26 	bl	800e34a <SDMMC_GetResponse>
 800acfe:	4602      	mov	r2, r0
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2104      	movs	r1, #4
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f003 fb1d 	bl	800e34a <SDMMC_GetResponse>
 800ad10:	4602      	mov	r2, r0
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2108      	movs	r1, #8
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f003 fb14 	bl	800e34a <SDMMC_GetResponse>
 800ad22:	4602      	mov	r2, r0
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	210c      	movs	r1, #12
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f003 fb0b 	bl	800e34a <SDMMC_GetResponse>
 800ad34:	4602      	mov	r2, r0
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2104      	movs	r1, #4
 800ad40:	4618      	mov	r0, r3
 800ad42:	f003 fb02 	bl	800e34a <SDMMC_GetResponse>
 800ad46:	4603      	mov	r3, r0
 800ad48:	0d1a      	lsrs	r2, r3, #20
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ad4e:	f107 0310 	add.w	r3, r7, #16
 800ad52:	4619      	mov	r1, r3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7ff fc0f 	bl	800a578 <HAL_SD_GetCardCSD>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d002      	beq.n	800ad66 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad64:	e012      	b.n	800ad8c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6819      	ldr	r1, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad6e:	041b      	lsls	r3, r3, #16
 800ad70:	f04f 0400 	mov.w	r4, #0
 800ad74:	461a      	mov	r2, r3
 800ad76:	4623      	mov	r3, r4
 800ad78:	4608      	mov	r0, r1
 800ad7a:	f003 fc11 	bl	800e5a0 <SDMMC_CmdSelDesel>
 800ad7e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <SD_InitCard+0x172>
  {
    return errorstate;
 800ad86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad88:	e000      	b.n	800ad8c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3744      	adds	r7, #68	; 0x44
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd90      	pop	{r4, r7, pc}

0800ad94 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b088      	sub	sp, #32
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	61fb      	str	r3, [r7, #28]
 800ada4:	2300      	movs	r3, #0
 800ada6:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800ada8:	f7f6 fd8c 	bl	80018c4 <HAL_GetTick>
 800adac:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f003 fc18 	bl	800e5e8 <SDMMC_CmdGoIdleState>
 800adb8:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d001      	beq.n	800adc4 <SD_PowerON+0x30>
  {
    return errorstate;
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	e0e9      	b.n	800af98 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4618      	mov	r0, r3
 800adca:	f003 fc2b 	bl	800e624 <SDMMC_CmdOperCond>
 800adce:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00d      	beq.n	800adf2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f003 fc01 	bl	800e5e8 <SDMMC_CmdGoIdleState>
 800ade6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d004      	beq.n	800adf8 <SD_PowerON+0x64>
    {
      return errorstate;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	e0d2      	b.n	800af98 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2201      	movs	r2, #1
 800adf6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d137      	bne.n	800ae70 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2100      	movs	r1, #0
 800ae06:	4618      	mov	r0, r3
 800ae08:	f003 fc2c 	bl	800e664 <SDMMC_CmdAppCommand>
 800ae0c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d02d      	beq.n	800ae70 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae18:	e0be      	b.n	800af98 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2100      	movs	r1, #0
 800ae20:	4618      	mov	r0, r3
 800ae22:	f003 fc1f 	bl	800e664 <SDMMC_CmdAppCommand>
 800ae26:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <SD_PowerON+0x9e>
    {
      return errorstate;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	e0b2      	b.n	800af98 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	495a      	ldr	r1, [pc, #360]	; (800afa0 <SD_PowerON+0x20c>)
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f003 fc36 	bl	800e6aa <SDMMC_CmdAppOperCommand>
 800ae3e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae4a:	e0a5      	b.n	800af98 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2100      	movs	r1, #0
 800ae52:	4618      	mov	r0, r3
 800ae54:	f003 fa79 	bl	800e34a <SDMMC_GetResponse>
 800ae58:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	0fdb      	lsrs	r3, r3, #31
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d101      	bne.n	800ae66 <SD_PowerON+0xd2>
 800ae62:	2301      	movs	r3, #1
 800ae64:	e000      	b.n	800ae68 <SD_PowerON+0xd4>
 800ae66:	2300      	movs	r3, #0
 800ae68:	61bb      	str	r3, [r7, #24]

    count++;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d802      	bhi.n	800ae80 <SD_PowerON+0xec>
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d0cc      	beq.n	800ae1a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d902      	bls.n	800ae90 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ae8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae8e:	e083      	b.n	800af98 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d07d      	beq.n	800af96 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d176      	bne.n	800af96 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d071      	beq.n	800af96 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aeb8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f042 0208 	orr.w	r2, r2, #8
 800aec8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4618      	mov	r0, r3
 800aed0:	f003 fcf6 	bl	800e8c0 <SDMMC_CmdVoltageSwitch>
 800aed4:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00c      	beq.n	800aef6 <SD_PowerON+0x162>
        {
          return errorstate;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	e05b      	b.n	800af98 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aee0:	f7f6 fcf0 	bl	80018c4 <HAL_GetTick>
 800aee4:	4602      	mov	r2, r0
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeee:	d102      	bne.n	800aef6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800aef0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aef4:	e050      	b.n	800af98 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af04:	d1ec      	bne.n	800aee0 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800af0e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af1e:	d002      	beq.n	800af26 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800af20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af24:	e038      	b.n	800af98 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800af26:	2001      	movs	r0, #1
 800af28:	f7ff fb1a 	bl	800a560 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f042 0204 	orr.w	r2, r2, #4
 800af3a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800af3c:	e00a      	b.n	800af54 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800af3e:	f7f6 fcc1 	bl	80018c4 <HAL_GetTick>
 800af42:	4602      	mov	r2, r0
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4c:	d102      	bne.n	800af54 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800af4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af52:	e021      	b.n	800af98 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af62:	d1ec      	bne.n	800af3e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800af6c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af7c:	d102      	bne.n	800af84 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800af7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af82:	e009      	b.n	800af98 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2213      	movs	r2, #19
 800af8a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f04f 32ff 	mov.w	r2, #4294967295
 800af94:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3720      	adds	r7, #32
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	c1100000 	.word	0xc1100000

0800afa4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b08c      	sub	sp, #48	; 0x30
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800afae:	f7f6 fc89 	bl	80018c4 <HAL_GetTick>
 800afb2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2100      	movs	r1, #0
 800afbe:	4618      	mov	r0, r3
 800afc0:	f003 f9c3 	bl	800e34a <SDMMC_GetResponse>
 800afc4:	4603      	mov	r3, r0
 800afc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afce:	d102      	bne.n	800afd6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800afd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afd4:	e0b0      	b.n	800b138 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2140      	movs	r1, #64	; 0x40
 800afdc:	4618      	mov	r0, r3
 800afde:	f003 f9f3 	bl	800e3c8 <SDMMC_CmdBlockLength>
 800afe2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800afe4:	6a3b      	ldr	r3, [r7, #32]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d005      	beq.n	800aff6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800aff2:	6a3b      	ldr	r3, [r7, #32]
 800aff4:	e0a0      	b.n	800b138 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800affe:	041b      	lsls	r3, r3, #16
 800b000:	4619      	mov	r1, r3
 800b002:	4610      	mov	r0, r2
 800b004:	f003 fb2e 	bl	800e664 <SDMMC_CmdAppCommand>
 800b008:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d005      	beq.n	800b01c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	e08d      	b.n	800b138 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b01c:	f04f 33ff 	mov.w	r3, #4294967295
 800b020:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b022:	2340      	movs	r3, #64	; 0x40
 800b024:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b026:	2360      	movs	r3, #96	; 0x60
 800b028:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b02a:	2302      	movs	r3, #2
 800b02c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b02e:	2300      	movs	r3, #0
 800b030:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b032:	2301      	movs	r3, #1
 800b034:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f107 0208 	add.w	r2, r7, #8
 800b03e:	4611      	mov	r1, r2
 800b040:	4618      	mov	r0, r3
 800b042:	f003 f995 	bl	800e370 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f003 fc16 	bl	800e87c <SDMMC_CmdStatusRegister>
 800b050:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b052:	6a3b      	ldr	r3, [r7, #32]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d02b      	beq.n	800b0b0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	e069      	b.n	800b138 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b06a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d013      	beq.n	800b09a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800b072:	2300      	movs	r3, #0
 800b074:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b076:	e00d      	b.n	800b094 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f003 f8ef 	bl	800e260 <SDMMC_ReadFIFO>
 800b082:	4602      	mov	r2, r0
 800b084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b086:	601a      	str	r2, [r3, #0]
        pData++;
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	3304      	adds	r3, #4
 800b08c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	3301      	adds	r3, #1
 800b092:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b096:	2b07      	cmp	r3, #7
 800b098:	d9ee      	bls.n	800b078 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b09a:	f7f6 fc13 	bl	80018c4 <HAL_GetTick>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a8:	d102      	bne.n	800b0b0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b0aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0ae:	e043      	b.n	800b138 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d0d2      	beq.n	800b064 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0c4:	f003 0308 	and.w	r3, r3, #8
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d001      	beq.n	800b0d0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b0cc:	2308      	movs	r3, #8
 800b0ce:	e033      	b.n	800b138 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d6:	f003 0302 	and.w	r3, r3, #2
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b0de:	2302      	movs	r3, #2
 800b0e0:	e02a      	b.n	800b138 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e8:	f003 0320 	and.w	r3, r3, #32
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d017      	beq.n	800b120 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b0f0:	2320      	movs	r3, #32
 800b0f2:	e021      	b.n	800b138 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f003 f8b1 	bl	800e260 <SDMMC_ReadFIFO>
 800b0fe:	4602      	mov	r2, r0
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	601a      	str	r2, [r3, #0]
    pData++;
 800b104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b106:	3304      	adds	r3, #4
 800b108:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b10a:	f7f6 fbdb 	bl	80018c4 <HAL_GetTick>
 800b10e:	4602      	mov	r2, r0
 800b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b118:	d102      	bne.n	800b120 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b11a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b11e:	e00b      	b.n	800b138 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1e2      	bne.n	800b0f4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a03      	ldr	r2, [pc, #12]	; (800b140 <SD_SendSDStatus+0x19c>)
 800b134:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3730      	adds	r7, #48	; 0x30
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	18000f3a 	.word	0x18000f3a

0800b144 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d102      	bne.n	800b15a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b154:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b158:	e018      	b.n	800b18c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b162:	041b      	lsls	r3, r3, #16
 800b164:	4619      	mov	r1, r3
 800b166:	4610      	mov	r0, r2
 800b168:	f003 fb65 	bl	800e836 <SDMMC_CmdSendStatus>
 800b16c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	e009      	b.n	800b18c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2100      	movs	r1, #0
 800b17e:	4618      	mov	r0, r3
 800b180:	f003 f8e3 	bl	800e34a <SDMMC_GetResponse>
 800b184:	4602      	mov	r2, r0
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b19c:	2300      	movs	r3, #0
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f003 f8cd 	bl	800e34a <SDMMC_GetResponse>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1ba:	d102      	bne.n	800b1c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b1bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1c0:	e02f      	b.n	800b222 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b1c2:	f107 030c 	add.w	r3, r7, #12
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f879 	bl	800b2c0 <SD_FindSCR>
 800b1ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d001      	beq.n	800b1da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	e023      	b.n	800b222 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d01c      	beq.n	800b21e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ec:	041b      	lsls	r3, r3, #16
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	f003 fa37 	bl	800e664 <SDMMC_CmdAppCommand>
 800b1f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d001      	beq.n	800b202 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	e00f      	b.n	800b222 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2102      	movs	r1, #2
 800b208:	4618      	mov	r0, r3
 800b20a:	f003 fa6e 	bl	800e6ea <SDMMC_CmdBusWidth>
 800b20e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d001      	beq.n	800b21a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	e003      	b.n	800b222 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b21a:	2300      	movs	r3, #0
 800b21c:	e001      	b.n	800b222 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b21e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b222:	4618      	mov	r0, r3
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b086      	sub	sp, #24
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b232:	2300      	movs	r3, #0
 800b234:	60fb      	str	r3, [r7, #12]
 800b236:	2300      	movs	r3, #0
 800b238:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2100      	movs	r1, #0
 800b240:	4618      	mov	r0, r3
 800b242:	f003 f882 	bl	800e34a <SDMMC_GetResponse>
 800b246:	4603      	mov	r3, r0
 800b248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b24c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b250:	d102      	bne.n	800b258 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b256:	e02f      	b.n	800b2b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b258:	f107 030c 	add.w	r3, r7, #12
 800b25c:	4619      	mov	r1, r3
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f82e 	bl	800b2c0 <SD_FindSCR>
 800b264:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	e023      	b.n	800b2b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b276:	2b00      	cmp	r3, #0
 800b278:	d01c      	beq.n	800b2b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b282:	041b      	lsls	r3, r3, #16
 800b284:	4619      	mov	r1, r3
 800b286:	4610      	mov	r0, r2
 800b288:	f003 f9ec 	bl	800e664 <SDMMC_CmdAppCommand>
 800b28c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	e00f      	b.n	800b2b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2100      	movs	r1, #0
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f003 fa23 	bl	800e6ea <SDMMC_CmdBusWidth>
 800b2a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d001      	beq.n	800b2b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	e003      	b.n	800b2b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e001      	b.n	800b2b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b2b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3718      	adds	r7, #24
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08e      	sub	sp, #56	; 0x38
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b2ca:	f7f6 fafb 	bl	80018c4 <HAL_GetTick>
 800b2ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	60bb      	str	r3, [r7, #8]
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2108      	movs	r1, #8
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f003 f86e 	bl	800e3c8 <SDMMC_CmdBlockLength>
 800b2ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f6:	e0ad      	b.n	800b454 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b300:	041b      	lsls	r3, r3, #16
 800b302:	4619      	mov	r1, r3
 800b304:	4610      	mov	r0, r2
 800b306:	f003 f9ad 	bl	800e664 <SDMMC_CmdAppCommand>
 800b30a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b314:	e09e      	b.n	800b454 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b316:	f04f 33ff 	mov.w	r3, #4294967295
 800b31a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b31c:	2308      	movs	r3, #8
 800b31e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b320:	2330      	movs	r3, #48	; 0x30
 800b322:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b324:	2302      	movs	r3, #2
 800b326:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b328:	2300      	movs	r3, #0
 800b32a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b32c:	2301      	movs	r3, #1
 800b32e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f107 0210 	add.w	r2, r7, #16
 800b338:	4611      	mov	r1, r2
 800b33a:	4618      	mov	r0, r3
 800b33c:	f003 f818 	bl	800e370 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4618      	mov	r0, r3
 800b346:	f003 f9f3 	bl	800e730 <SDMMC_CmdSendSCR>
 800b34a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d027      	beq.n	800b3a2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b354:	e07e      	b.n	800b454 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b35c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d113      	bne.n	800b38c <SD_FindSCR+0xcc>
 800b364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b366:	2b00      	cmp	r3, #0
 800b368:	d110      	bne.n	800b38c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4618      	mov	r0, r3
 800b370:	f002 ff76 	bl	800e260 <SDMMC_ReadFIFO>
 800b374:	4603      	mov	r3, r0
 800b376:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4618      	mov	r0, r3
 800b37e:	f002 ff6f 	bl	800e260 <SDMMC_ReadFIFO>
 800b382:	4603      	mov	r3, r0
 800b384:	60fb      	str	r3, [r7, #12]
      index++;
 800b386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b388:	3301      	adds	r3, #1
 800b38a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b38c:	f7f6 fa9a 	bl	80018c4 <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b39a:	d102      	bne.n	800b3a2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b39c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3a0:	e058      	b.n	800b454 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3a8:	f240 532a 	movw	r3, #1322	; 0x52a
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0d1      	beq.n	800b356 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b8:	f003 0308 	and.w	r3, r3, #8
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d005      	beq.n	800b3cc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2208      	movs	r2, #8
 800b3c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b3c8:	2308      	movs	r3, #8
 800b3ca:	e043      	b.n	800b454 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d2:	f003 0302 	and.w	r3, r3, #2
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d005      	beq.n	800b3e6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b3e2:	2302      	movs	r3, #2
 800b3e4:	e036      	b.n	800b454 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ec:	f003 0320 	and.w	r3, r3, #32
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d005      	beq.n	800b400 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2220      	movs	r2, #32
 800b3fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b3fc:	2320      	movs	r3, #32
 800b3fe:	e029      	b.n	800b454 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a15      	ldr	r2, [pc, #84]	; (800b45c <SD_FindSCR+0x19c>)
 800b406:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	061a      	lsls	r2, r3, #24
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	021b      	lsls	r3, r3, #8
 800b410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b414:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	0a1b      	lsrs	r3, r3, #8
 800b41a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b41e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	0e1b      	lsrs	r3, r3, #24
 800b424:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b428:	601a      	str	r2, [r3, #0]
    scr++;
 800b42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42c:	3304      	adds	r3, #4
 800b42e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	061a      	lsls	r2, r3, #24
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	021b      	lsls	r3, r3, #8
 800b438:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b43c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	0a1b      	lsrs	r3, r3, #8
 800b442:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b446:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	0e1b      	lsrs	r3, r3, #24
 800b44c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b450:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3738      	adds	r7, #56	; 0x38
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	18000f3a 	.word	0x18000f3a

0800b460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	e01d      	b.n	800b4ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d106      	bne.n	800b48c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7f5 fffa 	bl	8001480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2202      	movs	r2, #2
 800b490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	3304      	adds	r3, #4
 800b49c:	4619      	mov	r1, r3
 800b49e:	4610      	mov	r0, r2
 800b4a0:	f000 f9a6 	bl	800b7f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
	...

0800b4b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68da      	ldr	r2, [r3, #12]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f042 0201 	orr.w	r2, r2, #1
 800b4ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	689a      	ldr	r2, [r3, #8]
 800b4d6:	4b0c      	ldr	r3, [pc, #48]	; (800b508 <HAL_TIM_Base_Start_IT+0x50>)
 800b4d8:	4013      	ands	r3, r2
 800b4da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b06      	cmp	r3, #6
 800b4e0:	d00b      	beq.n	800b4fa <HAL_TIM_Base_Start_IT+0x42>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4e8:	d007      	beq.n	800b4fa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f042 0201 	orr.w	r2, r2, #1
 800b4f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	00010007 	.word	0x00010007

0800b50c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68da      	ldr	r2, [r3, #12]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f022 0201 	bic.w	r2, r2, #1
 800b522:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	6a1a      	ldr	r2, [r3, #32]
 800b52a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b52e:	4013      	ands	r3, r2
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10f      	bne.n	800b554 <HAL_TIM_Base_Stop_IT+0x48>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	6a1a      	ldr	r2, [r3, #32]
 800b53a:	f240 4344 	movw	r3, #1092	; 0x444
 800b53e:	4013      	ands	r3, r2
 800b540:	2b00      	cmp	r3, #0
 800b542:	d107      	bne.n	800b554 <HAL_TIM_Base_Stop_IT+0x48>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f022 0201 	bic.w	r2, r2, #1
 800b552:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	370c      	adds	r7, #12
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b082      	sub	sp, #8
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	f003 0302 	and.w	r3, r3, #2
 800b574:	2b02      	cmp	r3, #2
 800b576:	d122      	bne.n	800b5be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	f003 0302 	and.w	r3, r3, #2
 800b582:	2b02      	cmp	r3, #2
 800b584:	d11b      	bne.n	800b5be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f06f 0202 	mvn.w	r2, #2
 800b58e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	f003 0303 	and.w	r3, r3, #3
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d003      	beq.n	800b5ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f905 	bl	800b7b4 <HAL_TIM_IC_CaptureCallback>
 800b5aa:	e005      	b.n	800b5b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f8f7 	bl	800b7a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f908 	bl	800b7c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	f003 0304 	and.w	r3, r3, #4
 800b5c8:	2b04      	cmp	r3, #4
 800b5ca:	d122      	bne.n	800b612 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	f003 0304 	and.w	r3, r3, #4
 800b5d6:	2b04      	cmp	r3, #4
 800b5d8:	d11b      	bne.n	800b612 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f06f 0204 	mvn.w	r2, #4
 800b5e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d003      	beq.n	800b600 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f8db 	bl	800b7b4 <HAL_TIM_IC_CaptureCallback>
 800b5fe:	e005      	b.n	800b60c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f8cd 	bl	800b7a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 f8de 	bl	800b7c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	f003 0308 	and.w	r3, r3, #8
 800b61c:	2b08      	cmp	r3, #8
 800b61e:	d122      	bne.n	800b666 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	f003 0308 	and.w	r3, r3, #8
 800b62a:	2b08      	cmp	r3, #8
 800b62c:	d11b      	bne.n	800b666 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f06f 0208 	mvn.w	r2, #8
 800b636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2204      	movs	r2, #4
 800b63c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	69db      	ldr	r3, [r3, #28]
 800b644:	f003 0303 	and.w	r3, r3, #3
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d003      	beq.n	800b654 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f8b1 	bl	800b7b4 <HAL_TIM_IC_CaptureCallback>
 800b652:	e005      	b.n	800b660 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f8a3 	bl	800b7a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f8b4 	bl	800b7c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	f003 0310 	and.w	r3, r3, #16
 800b670:	2b10      	cmp	r3, #16
 800b672:	d122      	bne.n	800b6ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	f003 0310 	and.w	r3, r3, #16
 800b67e:	2b10      	cmp	r3, #16
 800b680:	d11b      	bne.n	800b6ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f06f 0210 	mvn.w	r2, #16
 800b68a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2208      	movs	r2, #8
 800b690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	69db      	ldr	r3, [r3, #28]
 800b698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d003      	beq.n	800b6a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f887 	bl	800b7b4 <HAL_TIM_IC_CaptureCallback>
 800b6a6:	e005      	b.n	800b6b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 f879 	bl	800b7a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f88a 	bl	800b7c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d10e      	bne.n	800b6e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	f003 0301 	and.w	r3, r3, #1
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d107      	bne.n	800b6e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f06f 0201 	mvn.w	r2, #1
 800b6de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f7f5 fc6f 	bl	8000fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6f0:	2b80      	cmp	r3, #128	; 0x80
 800b6f2:	d10e      	bne.n	800b712 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6fe:	2b80      	cmp	r3, #128	; 0x80
 800b700:	d107      	bne.n	800b712 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b70a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f913 	bl	800b938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b71c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b720:	d10e      	bne.n	800b740 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b72c:	2b80      	cmp	r3, #128	; 0x80
 800b72e:	d107      	bne.n	800b740 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f906 	bl	800b94c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b74a:	2b40      	cmp	r3, #64	; 0x40
 800b74c:	d10e      	bne.n	800b76c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b758:	2b40      	cmp	r3, #64	; 0x40
 800b75a:	d107      	bne.n	800b76c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f838 	bl	800b7dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	f003 0320 	and.w	r3, r3, #32
 800b776:	2b20      	cmp	r3, #32
 800b778:	d10e      	bne.n	800b798 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	f003 0320 	and.w	r3, r3, #32
 800b784:	2b20      	cmp	r3, #32
 800b786:	d107      	bne.n	800b798 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f06f 0220 	mvn.w	r2, #32
 800b790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f8c6 	bl	800b924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b798:	bf00      	nop
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7a8:	bf00      	nop
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4a40      	ldr	r2, [pc, #256]	; (800b904 <TIM_Base_SetConfig+0x114>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d013      	beq.n	800b830 <TIM_Base_SetConfig+0x40>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b80e:	d00f      	beq.n	800b830 <TIM_Base_SetConfig+0x40>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a3d      	ldr	r2, [pc, #244]	; (800b908 <TIM_Base_SetConfig+0x118>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d00b      	beq.n	800b830 <TIM_Base_SetConfig+0x40>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a3c      	ldr	r2, [pc, #240]	; (800b90c <TIM_Base_SetConfig+0x11c>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d007      	beq.n	800b830 <TIM_Base_SetConfig+0x40>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a3b      	ldr	r2, [pc, #236]	; (800b910 <TIM_Base_SetConfig+0x120>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d003      	beq.n	800b830 <TIM_Base_SetConfig+0x40>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a3a      	ldr	r2, [pc, #232]	; (800b914 <TIM_Base_SetConfig+0x124>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d108      	bne.n	800b842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	4313      	orrs	r3, r2
 800b840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	4a2f      	ldr	r2, [pc, #188]	; (800b904 <TIM_Base_SetConfig+0x114>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d01f      	beq.n	800b88a <TIM_Base_SetConfig+0x9a>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b850:	d01b      	beq.n	800b88a <TIM_Base_SetConfig+0x9a>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a2c      	ldr	r2, [pc, #176]	; (800b908 <TIM_Base_SetConfig+0x118>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d017      	beq.n	800b88a <TIM_Base_SetConfig+0x9a>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a2b      	ldr	r2, [pc, #172]	; (800b90c <TIM_Base_SetConfig+0x11c>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d013      	beq.n	800b88a <TIM_Base_SetConfig+0x9a>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a2a      	ldr	r2, [pc, #168]	; (800b910 <TIM_Base_SetConfig+0x120>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d00f      	beq.n	800b88a <TIM_Base_SetConfig+0x9a>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a29      	ldr	r2, [pc, #164]	; (800b914 <TIM_Base_SetConfig+0x124>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d00b      	beq.n	800b88a <TIM_Base_SetConfig+0x9a>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a28      	ldr	r2, [pc, #160]	; (800b918 <TIM_Base_SetConfig+0x128>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d007      	beq.n	800b88a <TIM_Base_SetConfig+0x9a>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4a27      	ldr	r2, [pc, #156]	; (800b91c <TIM_Base_SetConfig+0x12c>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d003      	beq.n	800b88a <TIM_Base_SetConfig+0x9a>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4a26      	ldr	r2, [pc, #152]	; (800b920 <TIM_Base_SetConfig+0x130>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d108      	bne.n	800b89c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	4313      	orrs	r3, r2
 800b89a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	689a      	ldr	r2, [r3, #8]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a10      	ldr	r2, [pc, #64]	; (800b904 <TIM_Base_SetConfig+0x114>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d00f      	beq.n	800b8e8 <TIM_Base_SetConfig+0xf8>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a12      	ldr	r2, [pc, #72]	; (800b914 <TIM_Base_SetConfig+0x124>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d00b      	beq.n	800b8e8 <TIM_Base_SetConfig+0xf8>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a11      	ldr	r2, [pc, #68]	; (800b918 <TIM_Base_SetConfig+0x128>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d007      	beq.n	800b8e8 <TIM_Base_SetConfig+0xf8>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a10      	ldr	r2, [pc, #64]	; (800b91c <TIM_Base_SetConfig+0x12c>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d003      	beq.n	800b8e8 <TIM_Base_SetConfig+0xf8>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a0f      	ldr	r2, [pc, #60]	; (800b920 <TIM_Base_SetConfig+0x130>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d103      	bne.n	800b8f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	691a      	ldr	r2, [r3, #16]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	615a      	str	r2, [r3, #20]
}
 800b8f6:	bf00      	nop
 800b8f8:	3714      	adds	r7, #20
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	40010000 	.word	0x40010000
 800b908:	40000400 	.word	0x40000400
 800b90c:	40000800 	.word	0x40000800
 800b910:	40000c00 	.word	0x40000c00
 800b914:	40010400 	.word	0x40010400
 800b918:	40014000 	.word	0x40014000
 800b91c:	40014400 	.word	0x40014400
 800b920:	40014800 	.word	0x40014800

0800b924 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b954:	bf00      	nop
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d101      	bne.n	800b972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	e042      	b.n	800b9f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d106      	bne.n	800b98a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7f5 fd9d 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2224      	movs	r2, #36	; 0x24
 800b98e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f022 0201 	bic.w	r2, r2, #1
 800b9a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f82c 	bl	800ba00 <UART_SetConfig>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d101      	bne.n	800b9b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e022      	b.n	800b9f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d002      	beq.n	800b9c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f002 f99e 	bl	800dcfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	685a      	ldr	r2, [r3, #4]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	689a      	ldr	r2, [r3, #8]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f042 0201 	orr.w	r2, r2, #1
 800b9ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f002 fa25 	bl	800de40 <UART_CheckIdleState>
 800b9f6:	4603      	mov	r3, r0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba00:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ba04:	b090      	sub	sp, #64	; 0x40
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800ba14:	2300      	movs	r3, #0
 800ba16:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	689a      	ldr	r2, [r3, #8]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	691b      	ldr	r3, [r3, #16]
 800ba20:	431a      	orrs	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	431a      	orrs	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	69db      	ldr	r3, [r3, #28]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba36:	4313      	orrs	r3, r2
 800ba38:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	4bc1      	ldr	r3, [pc, #772]	; (800bd48 <UART_SetConfig+0x348>)
 800ba42:	4013      	ands	r3, r2
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	6812      	ldr	r2, [r2, #0]
 800ba48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba4a:	430b      	orrs	r3, r1
 800ba4c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68da      	ldr	r2, [r3, #12]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	430a      	orrs	r2, r1
 800ba62:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	699b      	ldr	r3, [r3, #24]
 800ba68:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4ab7      	ldr	r2, [pc, #732]	; (800bd4c <UART_SetConfig+0x34c>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d004      	beq.n	800ba7e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a1b      	ldr	r3, [r3, #32]
 800ba78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	689a      	ldr	r2, [r3, #8]
 800ba84:	4bb2      	ldr	r3, [pc, #712]	; (800bd50 <UART_SetConfig+0x350>)
 800ba86:	4013      	ands	r3, r2
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	6812      	ldr	r2, [r2, #0]
 800ba8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba8e:	430b      	orrs	r3, r1
 800ba90:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba98:	f023 010f 	bic.w	r1, r3, #15
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	430a      	orrs	r2, r1
 800baa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4aa9      	ldr	r2, [pc, #676]	; (800bd54 <UART_SetConfig+0x354>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d177      	bne.n	800bba2 <UART_SetConfig+0x1a2>
 800bab2:	4ba9      	ldr	r3, [pc, #676]	; (800bd58 <UART_SetConfig+0x358>)
 800bab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800baba:	2b28      	cmp	r3, #40	; 0x28
 800babc:	d86c      	bhi.n	800bb98 <UART_SetConfig+0x198>
 800babe:	a201      	add	r2, pc, #4	; (adr r2, 800bac4 <UART_SetConfig+0xc4>)
 800bac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac4:	0800bb69 	.word	0x0800bb69
 800bac8:	0800bb99 	.word	0x0800bb99
 800bacc:	0800bb99 	.word	0x0800bb99
 800bad0:	0800bb99 	.word	0x0800bb99
 800bad4:	0800bb99 	.word	0x0800bb99
 800bad8:	0800bb99 	.word	0x0800bb99
 800badc:	0800bb99 	.word	0x0800bb99
 800bae0:	0800bb99 	.word	0x0800bb99
 800bae4:	0800bb71 	.word	0x0800bb71
 800bae8:	0800bb99 	.word	0x0800bb99
 800baec:	0800bb99 	.word	0x0800bb99
 800baf0:	0800bb99 	.word	0x0800bb99
 800baf4:	0800bb99 	.word	0x0800bb99
 800baf8:	0800bb99 	.word	0x0800bb99
 800bafc:	0800bb99 	.word	0x0800bb99
 800bb00:	0800bb99 	.word	0x0800bb99
 800bb04:	0800bb79 	.word	0x0800bb79
 800bb08:	0800bb99 	.word	0x0800bb99
 800bb0c:	0800bb99 	.word	0x0800bb99
 800bb10:	0800bb99 	.word	0x0800bb99
 800bb14:	0800bb99 	.word	0x0800bb99
 800bb18:	0800bb99 	.word	0x0800bb99
 800bb1c:	0800bb99 	.word	0x0800bb99
 800bb20:	0800bb99 	.word	0x0800bb99
 800bb24:	0800bb81 	.word	0x0800bb81
 800bb28:	0800bb99 	.word	0x0800bb99
 800bb2c:	0800bb99 	.word	0x0800bb99
 800bb30:	0800bb99 	.word	0x0800bb99
 800bb34:	0800bb99 	.word	0x0800bb99
 800bb38:	0800bb99 	.word	0x0800bb99
 800bb3c:	0800bb99 	.word	0x0800bb99
 800bb40:	0800bb99 	.word	0x0800bb99
 800bb44:	0800bb89 	.word	0x0800bb89
 800bb48:	0800bb99 	.word	0x0800bb99
 800bb4c:	0800bb99 	.word	0x0800bb99
 800bb50:	0800bb99 	.word	0x0800bb99
 800bb54:	0800bb99 	.word	0x0800bb99
 800bb58:	0800bb99 	.word	0x0800bb99
 800bb5c:	0800bb99 	.word	0x0800bb99
 800bb60:	0800bb99 	.word	0x0800bb99
 800bb64:	0800bb91 	.word	0x0800bb91
 800bb68:	2301      	movs	r3, #1
 800bb6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bb6e:	e233      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bb70:	2304      	movs	r3, #4
 800bb72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bb76:	e22f      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bb78:	2308      	movs	r3, #8
 800bb7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bb7e:	e22b      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bb80:	2310      	movs	r3, #16
 800bb82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bb86:	e227      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bb88:	2320      	movs	r3, #32
 800bb8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bb8e:	e223      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bb90:	2340      	movs	r3, #64	; 0x40
 800bb92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bb96:	e21f      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bb98:	2380      	movs	r3, #128	; 0x80
 800bb9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bb9e:	bf00      	nop
 800bba0:	e21a      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a6d      	ldr	r2, [pc, #436]	; (800bd5c <UART_SetConfig+0x35c>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d132      	bne.n	800bc12 <UART_SetConfig+0x212>
 800bbac:	4b6a      	ldr	r3, [pc, #424]	; (800bd58 <UART_SetConfig+0x358>)
 800bbae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbb0:	f003 0307 	and.w	r3, r3, #7
 800bbb4:	2b05      	cmp	r3, #5
 800bbb6:	d827      	bhi.n	800bc08 <UART_SetConfig+0x208>
 800bbb8:	a201      	add	r2, pc, #4	; (adr r2, 800bbc0 <UART_SetConfig+0x1c0>)
 800bbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbbe:	bf00      	nop
 800bbc0:	0800bbd9 	.word	0x0800bbd9
 800bbc4:	0800bbe1 	.word	0x0800bbe1
 800bbc8:	0800bbe9 	.word	0x0800bbe9
 800bbcc:	0800bbf1 	.word	0x0800bbf1
 800bbd0:	0800bbf9 	.word	0x0800bbf9
 800bbd4:	0800bc01 	.word	0x0800bc01
 800bbd8:	2300      	movs	r3, #0
 800bbda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bbde:	e1fb      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bbe0:	2304      	movs	r3, #4
 800bbe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bbe6:	e1f7      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bbe8:	2308      	movs	r3, #8
 800bbea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bbee:	e1f3      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bbf0:	2310      	movs	r3, #16
 800bbf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bbf6:	e1ef      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bbf8:	2320      	movs	r3, #32
 800bbfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bbfe:	e1eb      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bc00:	2340      	movs	r3, #64	; 0x40
 800bc02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bc06:	e1e7      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bc08:	2380      	movs	r3, #128	; 0x80
 800bc0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bc0e:	bf00      	nop
 800bc10:	e1e2      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a52      	ldr	r2, [pc, #328]	; (800bd60 <UART_SetConfig+0x360>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d132      	bne.n	800bc82 <UART_SetConfig+0x282>
 800bc1c:	4b4e      	ldr	r3, [pc, #312]	; (800bd58 <UART_SetConfig+0x358>)
 800bc1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc20:	f003 0307 	and.w	r3, r3, #7
 800bc24:	2b05      	cmp	r3, #5
 800bc26:	d827      	bhi.n	800bc78 <UART_SetConfig+0x278>
 800bc28:	a201      	add	r2, pc, #4	; (adr r2, 800bc30 <UART_SetConfig+0x230>)
 800bc2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc2e:	bf00      	nop
 800bc30:	0800bc49 	.word	0x0800bc49
 800bc34:	0800bc51 	.word	0x0800bc51
 800bc38:	0800bc59 	.word	0x0800bc59
 800bc3c:	0800bc61 	.word	0x0800bc61
 800bc40:	0800bc69 	.word	0x0800bc69
 800bc44:	0800bc71 	.word	0x0800bc71
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bc4e:	e1c3      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bc50:	2304      	movs	r3, #4
 800bc52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bc56:	e1bf      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bc58:	2308      	movs	r3, #8
 800bc5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bc5e:	e1bb      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bc60:	2310      	movs	r3, #16
 800bc62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bc66:	e1b7      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bc68:	2320      	movs	r3, #32
 800bc6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bc6e:	e1b3      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bc70:	2340      	movs	r3, #64	; 0x40
 800bc72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bc76:	e1af      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bc78:	2380      	movs	r3, #128	; 0x80
 800bc7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bc7e:	bf00      	nop
 800bc80:	e1aa      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a37      	ldr	r2, [pc, #220]	; (800bd64 <UART_SetConfig+0x364>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d132      	bne.n	800bcf2 <UART_SetConfig+0x2f2>
 800bc8c:	4b32      	ldr	r3, [pc, #200]	; (800bd58 <UART_SetConfig+0x358>)
 800bc8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc90:	f003 0307 	and.w	r3, r3, #7
 800bc94:	2b05      	cmp	r3, #5
 800bc96:	d827      	bhi.n	800bce8 <UART_SetConfig+0x2e8>
 800bc98:	a201      	add	r2, pc, #4	; (adr r2, 800bca0 <UART_SetConfig+0x2a0>)
 800bc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc9e:	bf00      	nop
 800bca0:	0800bcb9 	.word	0x0800bcb9
 800bca4:	0800bcc1 	.word	0x0800bcc1
 800bca8:	0800bcc9 	.word	0x0800bcc9
 800bcac:	0800bcd1 	.word	0x0800bcd1
 800bcb0:	0800bcd9 	.word	0x0800bcd9
 800bcb4:	0800bce1 	.word	0x0800bce1
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bcbe:	e18b      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bcc0:	2304      	movs	r3, #4
 800bcc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bcc6:	e187      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bcc8:	2308      	movs	r3, #8
 800bcca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bcce:	e183      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bcd0:	2310      	movs	r3, #16
 800bcd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bcd6:	e17f      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bcd8:	2320      	movs	r3, #32
 800bcda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bcde:	e17b      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bce0:	2340      	movs	r3, #64	; 0x40
 800bce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bce6:	e177      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bce8:	2380      	movs	r3, #128	; 0x80
 800bcea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bcee:	bf00      	nop
 800bcf0:	e172      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a1c      	ldr	r2, [pc, #112]	; (800bd68 <UART_SetConfig+0x368>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d144      	bne.n	800bd86 <UART_SetConfig+0x386>
 800bcfc:	4b16      	ldr	r3, [pc, #88]	; (800bd58 <UART_SetConfig+0x358>)
 800bcfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd00:	f003 0307 	and.w	r3, r3, #7
 800bd04:	2b05      	cmp	r3, #5
 800bd06:	d839      	bhi.n	800bd7c <UART_SetConfig+0x37c>
 800bd08:	a201      	add	r2, pc, #4	; (adr r2, 800bd10 <UART_SetConfig+0x310>)
 800bd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd0e:	bf00      	nop
 800bd10:	0800bd29 	.word	0x0800bd29
 800bd14:	0800bd31 	.word	0x0800bd31
 800bd18:	0800bd39 	.word	0x0800bd39
 800bd1c:	0800bd41 	.word	0x0800bd41
 800bd20:	0800bd6d 	.word	0x0800bd6d
 800bd24:	0800bd75 	.word	0x0800bd75
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd2e:	e153      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bd30:	2304      	movs	r3, #4
 800bd32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd36:	e14f      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bd38:	2308      	movs	r3, #8
 800bd3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd3e:	e14b      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bd40:	2310      	movs	r3, #16
 800bd42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd46:	e147      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bd48:	cfff69f3 	.word	0xcfff69f3
 800bd4c:	58000c00 	.word	0x58000c00
 800bd50:	11fff4ff 	.word	0x11fff4ff
 800bd54:	40011000 	.word	0x40011000
 800bd58:	58024400 	.word	0x58024400
 800bd5c:	40004400 	.word	0x40004400
 800bd60:	40004800 	.word	0x40004800
 800bd64:	40004c00 	.word	0x40004c00
 800bd68:	40005000 	.word	0x40005000
 800bd6c:	2320      	movs	r3, #32
 800bd6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd72:	e131      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bd74:	2340      	movs	r3, #64	; 0x40
 800bd76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd7a:	e12d      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bd7c:	2380      	movs	r3, #128	; 0x80
 800bd7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd82:	bf00      	nop
 800bd84:	e128      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4ac3      	ldr	r2, [pc, #780]	; (800c098 <UART_SetConfig+0x698>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d178      	bne.n	800be82 <UART_SetConfig+0x482>
 800bd90:	4bc2      	ldr	r3, [pc, #776]	; (800c09c <UART_SetConfig+0x69c>)
 800bd92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd98:	2b28      	cmp	r3, #40	; 0x28
 800bd9a:	d86d      	bhi.n	800be78 <UART_SetConfig+0x478>
 800bd9c:	a201      	add	r2, pc, #4	; (adr r2, 800bda4 <UART_SetConfig+0x3a4>)
 800bd9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda2:	bf00      	nop
 800bda4:	0800be49 	.word	0x0800be49
 800bda8:	0800be79 	.word	0x0800be79
 800bdac:	0800be79 	.word	0x0800be79
 800bdb0:	0800be79 	.word	0x0800be79
 800bdb4:	0800be79 	.word	0x0800be79
 800bdb8:	0800be79 	.word	0x0800be79
 800bdbc:	0800be79 	.word	0x0800be79
 800bdc0:	0800be79 	.word	0x0800be79
 800bdc4:	0800be51 	.word	0x0800be51
 800bdc8:	0800be79 	.word	0x0800be79
 800bdcc:	0800be79 	.word	0x0800be79
 800bdd0:	0800be79 	.word	0x0800be79
 800bdd4:	0800be79 	.word	0x0800be79
 800bdd8:	0800be79 	.word	0x0800be79
 800bddc:	0800be79 	.word	0x0800be79
 800bde0:	0800be79 	.word	0x0800be79
 800bde4:	0800be59 	.word	0x0800be59
 800bde8:	0800be79 	.word	0x0800be79
 800bdec:	0800be79 	.word	0x0800be79
 800bdf0:	0800be79 	.word	0x0800be79
 800bdf4:	0800be79 	.word	0x0800be79
 800bdf8:	0800be79 	.word	0x0800be79
 800bdfc:	0800be79 	.word	0x0800be79
 800be00:	0800be79 	.word	0x0800be79
 800be04:	0800be61 	.word	0x0800be61
 800be08:	0800be79 	.word	0x0800be79
 800be0c:	0800be79 	.word	0x0800be79
 800be10:	0800be79 	.word	0x0800be79
 800be14:	0800be79 	.word	0x0800be79
 800be18:	0800be79 	.word	0x0800be79
 800be1c:	0800be79 	.word	0x0800be79
 800be20:	0800be79 	.word	0x0800be79
 800be24:	0800be69 	.word	0x0800be69
 800be28:	0800be79 	.word	0x0800be79
 800be2c:	0800be79 	.word	0x0800be79
 800be30:	0800be79 	.word	0x0800be79
 800be34:	0800be79 	.word	0x0800be79
 800be38:	0800be79 	.word	0x0800be79
 800be3c:	0800be79 	.word	0x0800be79
 800be40:	0800be79 	.word	0x0800be79
 800be44:	0800be71 	.word	0x0800be71
 800be48:	2301      	movs	r3, #1
 800be4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be4e:	e0c3      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800be50:	2304      	movs	r3, #4
 800be52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be56:	e0bf      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800be58:	2308      	movs	r3, #8
 800be5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be5e:	e0bb      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800be60:	2310      	movs	r3, #16
 800be62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be66:	e0b7      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800be68:	2320      	movs	r3, #32
 800be6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be6e:	e0b3      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800be70:	2340      	movs	r3, #64	; 0x40
 800be72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be76:	e0af      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800be78:	2380      	movs	r3, #128	; 0x80
 800be7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be7e:	bf00      	nop
 800be80:	e0aa      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a86      	ldr	r2, [pc, #536]	; (800c0a0 <UART_SetConfig+0x6a0>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d132      	bne.n	800bef2 <UART_SetConfig+0x4f2>
 800be8c:	4b83      	ldr	r3, [pc, #524]	; (800c09c <UART_SetConfig+0x69c>)
 800be8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be90:	f003 0307 	and.w	r3, r3, #7
 800be94:	2b05      	cmp	r3, #5
 800be96:	d827      	bhi.n	800bee8 <UART_SetConfig+0x4e8>
 800be98:	a201      	add	r2, pc, #4	; (adr r2, 800bea0 <UART_SetConfig+0x4a0>)
 800be9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9e:	bf00      	nop
 800bea0:	0800beb9 	.word	0x0800beb9
 800bea4:	0800bec1 	.word	0x0800bec1
 800bea8:	0800bec9 	.word	0x0800bec9
 800beac:	0800bed1 	.word	0x0800bed1
 800beb0:	0800bed9 	.word	0x0800bed9
 800beb4:	0800bee1 	.word	0x0800bee1
 800beb8:	2300      	movs	r3, #0
 800beba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bebe:	e08b      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bec0:	2304      	movs	r3, #4
 800bec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bec6:	e087      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bec8:	2308      	movs	r3, #8
 800beca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bece:	e083      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bed0:	2310      	movs	r3, #16
 800bed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bed6:	e07f      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bed8:	2320      	movs	r3, #32
 800beda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bede:	e07b      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bee0:	2340      	movs	r3, #64	; 0x40
 800bee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bee6:	e077      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bee8:	2380      	movs	r3, #128	; 0x80
 800beea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800beee:	bf00      	nop
 800bef0:	e072      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a6b      	ldr	r2, [pc, #428]	; (800c0a4 <UART_SetConfig+0x6a4>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d132      	bne.n	800bf62 <UART_SetConfig+0x562>
 800befc:	4b67      	ldr	r3, [pc, #412]	; (800c09c <UART_SetConfig+0x69c>)
 800befe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf00:	f003 0307 	and.w	r3, r3, #7
 800bf04:	2b05      	cmp	r3, #5
 800bf06:	d827      	bhi.n	800bf58 <UART_SetConfig+0x558>
 800bf08:	a201      	add	r2, pc, #4	; (adr r2, 800bf10 <UART_SetConfig+0x510>)
 800bf0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0e:	bf00      	nop
 800bf10:	0800bf29 	.word	0x0800bf29
 800bf14:	0800bf31 	.word	0x0800bf31
 800bf18:	0800bf39 	.word	0x0800bf39
 800bf1c:	0800bf41 	.word	0x0800bf41
 800bf20:	0800bf49 	.word	0x0800bf49
 800bf24:	0800bf51 	.word	0x0800bf51
 800bf28:	2300      	movs	r3, #0
 800bf2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf2e:	e053      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bf30:	2304      	movs	r3, #4
 800bf32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf36:	e04f      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bf38:	2308      	movs	r3, #8
 800bf3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf3e:	e04b      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bf40:	2310      	movs	r3, #16
 800bf42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf46:	e047      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bf48:	2320      	movs	r3, #32
 800bf4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf4e:	e043      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bf50:	2340      	movs	r3, #64	; 0x40
 800bf52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf56:	e03f      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bf58:	2380      	movs	r3, #128	; 0x80
 800bf5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf5e:	bf00      	nop
 800bf60:	e03a      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a50      	ldr	r2, [pc, #320]	; (800c0a8 <UART_SetConfig+0x6a8>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d132      	bne.n	800bfd2 <UART_SetConfig+0x5d2>
 800bf6c:	4b4b      	ldr	r3, [pc, #300]	; (800c09c <UART_SetConfig+0x69c>)
 800bf6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf70:	f003 0307 	and.w	r3, r3, #7
 800bf74:	2b05      	cmp	r3, #5
 800bf76:	d827      	bhi.n	800bfc8 <UART_SetConfig+0x5c8>
 800bf78:	a201      	add	r2, pc, #4	; (adr r2, 800bf80 <UART_SetConfig+0x580>)
 800bf7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7e:	bf00      	nop
 800bf80:	0800bf99 	.word	0x0800bf99
 800bf84:	0800bfa1 	.word	0x0800bfa1
 800bf88:	0800bfa9 	.word	0x0800bfa9
 800bf8c:	0800bfb1 	.word	0x0800bfb1
 800bf90:	0800bfb9 	.word	0x0800bfb9
 800bf94:	0800bfc1 	.word	0x0800bfc1
 800bf98:	2302      	movs	r3, #2
 800bf9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf9e:	e01b      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bfa0:	2304      	movs	r3, #4
 800bfa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfa6:	e017      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bfa8:	2308      	movs	r3, #8
 800bfaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfae:	e013      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bfb0:	2310      	movs	r3, #16
 800bfb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfb6:	e00f      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bfb8:	2320      	movs	r3, #32
 800bfba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfbe:	e00b      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bfc0:	2340      	movs	r3, #64	; 0x40
 800bfc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfc6:	e007      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bfc8:	2380      	movs	r3, #128	; 0x80
 800bfca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfce:	bf00      	nop
 800bfd0:	e002      	b.n	800bfd8 <UART_SetConfig+0x5d8>
 800bfd2:	2380      	movs	r3, #128	; 0x80
 800bfd4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a32      	ldr	r2, [pc, #200]	; (800c0a8 <UART_SetConfig+0x6a8>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	f040 86f7 	bne.w	800cdd2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bfe4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bfe8:	2b08      	cmp	r3, #8
 800bfea:	f000 80c0 	beq.w	800c16e <UART_SetConfig+0x76e>
 800bfee:	2b08      	cmp	r3, #8
 800bff0:	dc04      	bgt.n	800bffc <UART_SetConfig+0x5fc>
 800bff2:	2b02      	cmp	r3, #2
 800bff4:	d00c      	beq.n	800c010 <UART_SetConfig+0x610>
 800bff6:	2b04      	cmp	r3, #4
 800bff8:	d065      	beq.n	800c0c6 <UART_SetConfig+0x6c6>
 800bffa:	e27a      	b.n	800c4f2 <UART_SetConfig+0xaf2>
 800bffc:	2b20      	cmp	r3, #32
 800bffe:	f000 81b0 	beq.w	800c362 <UART_SetConfig+0x962>
 800c002:	2b40      	cmp	r3, #64	; 0x40
 800c004:	f000 821e 	beq.w	800c444 <UART_SetConfig+0xa44>
 800c008:	2b10      	cmp	r3, #16
 800c00a:	f000 8104 	beq.w	800c216 <UART_SetConfig+0x816>
 800c00e:	e270      	b.n	800c4f2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c010:	f7fd f912 	bl	8009238 <HAL_RCCEx_GetD3PCLK1Freq>
 800c014:	4602      	mov	r2, r0
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d04e      	beq.n	800c0bc <UART_SetConfig+0x6bc>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c022:	2b01      	cmp	r3, #1
 800c024:	d048      	beq.n	800c0b8 <UART_SetConfig+0x6b8>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d042      	beq.n	800c0b4 <UART_SetConfig+0x6b4>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c032:	2b03      	cmp	r3, #3
 800c034:	d03c      	beq.n	800c0b0 <UART_SetConfig+0x6b0>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03a:	2b04      	cmp	r3, #4
 800c03c:	d036      	beq.n	800c0ac <UART_SetConfig+0x6ac>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c042:	2b05      	cmp	r3, #5
 800c044:	d026      	beq.n	800c094 <UART_SetConfig+0x694>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04a:	2b06      	cmp	r3, #6
 800c04c:	d020      	beq.n	800c090 <UART_SetConfig+0x690>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c052:	2b07      	cmp	r3, #7
 800c054:	d01a      	beq.n	800c08c <UART_SetConfig+0x68c>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05a:	2b08      	cmp	r3, #8
 800c05c:	d014      	beq.n	800c088 <UART_SetConfig+0x688>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c062:	2b09      	cmp	r3, #9
 800c064:	d00e      	beq.n	800c084 <UART_SetConfig+0x684>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06a:	2b0a      	cmp	r3, #10
 800c06c:	d008      	beq.n	800c080 <UART_SetConfig+0x680>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c072:	2b0b      	cmp	r3, #11
 800c074:	d102      	bne.n	800c07c <UART_SetConfig+0x67c>
 800c076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c07a:	e020      	b.n	800c0be <UART_SetConfig+0x6be>
 800c07c:	2301      	movs	r3, #1
 800c07e:	e01e      	b.n	800c0be <UART_SetConfig+0x6be>
 800c080:	2380      	movs	r3, #128	; 0x80
 800c082:	e01c      	b.n	800c0be <UART_SetConfig+0x6be>
 800c084:	2340      	movs	r3, #64	; 0x40
 800c086:	e01a      	b.n	800c0be <UART_SetConfig+0x6be>
 800c088:	2320      	movs	r3, #32
 800c08a:	e018      	b.n	800c0be <UART_SetConfig+0x6be>
 800c08c:	2310      	movs	r3, #16
 800c08e:	e016      	b.n	800c0be <UART_SetConfig+0x6be>
 800c090:	230c      	movs	r3, #12
 800c092:	e014      	b.n	800c0be <UART_SetConfig+0x6be>
 800c094:	230a      	movs	r3, #10
 800c096:	e012      	b.n	800c0be <UART_SetConfig+0x6be>
 800c098:	40011400 	.word	0x40011400
 800c09c:	58024400 	.word	0x58024400
 800c0a0:	40007800 	.word	0x40007800
 800c0a4:	40007c00 	.word	0x40007c00
 800c0a8:	58000c00 	.word	0x58000c00
 800c0ac:	2308      	movs	r3, #8
 800c0ae:	e006      	b.n	800c0be <UART_SetConfig+0x6be>
 800c0b0:	2306      	movs	r3, #6
 800c0b2:	e004      	b.n	800c0be <UART_SetConfig+0x6be>
 800c0b4:	2304      	movs	r3, #4
 800c0b6:	e002      	b.n	800c0be <UART_SetConfig+0x6be>
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	e000      	b.n	800c0be <UART_SetConfig+0x6be>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0c4:	e219      	b.n	800c4fa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0c6:	f107 0318 	add.w	r3, r7, #24
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fd f8ca 	bl	8009264 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c0d0:	69fa      	ldr	r2, [r7, #28]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d044      	beq.n	800c164 <UART_SetConfig+0x764>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d03e      	beq.n	800c160 <UART_SetConfig+0x760>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	d038      	beq.n	800c15c <UART_SetConfig+0x75c>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	d032      	beq.n	800c158 <UART_SetConfig+0x758>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f6:	2b04      	cmp	r3, #4
 800c0f8:	d02c      	beq.n	800c154 <UART_SetConfig+0x754>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fe:	2b05      	cmp	r3, #5
 800c100:	d026      	beq.n	800c150 <UART_SetConfig+0x750>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c106:	2b06      	cmp	r3, #6
 800c108:	d020      	beq.n	800c14c <UART_SetConfig+0x74c>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10e:	2b07      	cmp	r3, #7
 800c110:	d01a      	beq.n	800c148 <UART_SetConfig+0x748>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c116:	2b08      	cmp	r3, #8
 800c118:	d014      	beq.n	800c144 <UART_SetConfig+0x744>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11e:	2b09      	cmp	r3, #9
 800c120:	d00e      	beq.n	800c140 <UART_SetConfig+0x740>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c126:	2b0a      	cmp	r3, #10
 800c128:	d008      	beq.n	800c13c <UART_SetConfig+0x73c>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12e:	2b0b      	cmp	r3, #11
 800c130:	d102      	bne.n	800c138 <UART_SetConfig+0x738>
 800c132:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c136:	e016      	b.n	800c166 <UART_SetConfig+0x766>
 800c138:	2301      	movs	r3, #1
 800c13a:	e014      	b.n	800c166 <UART_SetConfig+0x766>
 800c13c:	2380      	movs	r3, #128	; 0x80
 800c13e:	e012      	b.n	800c166 <UART_SetConfig+0x766>
 800c140:	2340      	movs	r3, #64	; 0x40
 800c142:	e010      	b.n	800c166 <UART_SetConfig+0x766>
 800c144:	2320      	movs	r3, #32
 800c146:	e00e      	b.n	800c166 <UART_SetConfig+0x766>
 800c148:	2310      	movs	r3, #16
 800c14a:	e00c      	b.n	800c166 <UART_SetConfig+0x766>
 800c14c:	230c      	movs	r3, #12
 800c14e:	e00a      	b.n	800c166 <UART_SetConfig+0x766>
 800c150:	230a      	movs	r3, #10
 800c152:	e008      	b.n	800c166 <UART_SetConfig+0x766>
 800c154:	2308      	movs	r3, #8
 800c156:	e006      	b.n	800c166 <UART_SetConfig+0x766>
 800c158:	2306      	movs	r3, #6
 800c15a:	e004      	b.n	800c166 <UART_SetConfig+0x766>
 800c15c:	2304      	movs	r3, #4
 800c15e:	e002      	b.n	800c166 <UART_SetConfig+0x766>
 800c160:	2302      	movs	r3, #2
 800c162:	e000      	b.n	800c166 <UART_SetConfig+0x766>
 800c164:	2301      	movs	r3, #1
 800c166:	fbb2 f3f3 	udiv	r3, r2, r3
 800c16a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c16c:	e1c5      	b.n	800c4fa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c16e:	f107 030c 	add.w	r3, r7, #12
 800c172:	4618      	mov	r0, r3
 800c174:	f7fd f9c2 	bl	80094fc <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c178:	693a      	ldr	r2, [r7, #16]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d044      	beq.n	800c20c <UART_SetConfig+0x80c>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c186:	2b01      	cmp	r3, #1
 800c188:	d03e      	beq.n	800c208 <UART_SetConfig+0x808>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18e:	2b02      	cmp	r3, #2
 800c190:	d038      	beq.n	800c204 <UART_SetConfig+0x804>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c196:	2b03      	cmp	r3, #3
 800c198:	d032      	beq.n	800c200 <UART_SetConfig+0x800>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19e:	2b04      	cmp	r3, #4
 800c1a0:	d02c      	beq.n	800c1fc <UART_SetConfig+0x7fc>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a6:	2b05      	cmp	r3, #5
 800c1a8:	d026      	beq.n	800c1f8 <UART_SetConfig+0x7f8>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ae:	2b06      	cmp	r3, #6
 800c1b0:	d020      	beq.n	800c1f4 <UART_SetConfig+0x7f4>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b6:	2b07      	cmp	r3, #7
 800c1b8:	d01a      	beq.n	800c1f0 <UART_SetConfig+0x7f0>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1be:	2b08      	cmp	r3, #8
 800c1c0:	d014      	beq.n	800c1ec <UART_SetConfig+0x7ec>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c6:	2b09      	cmp	r3, #9
 800c1c8:	d00e      	beq.n	800c1e8 <UART_SetConfig+0x7e8>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ce:	2b0a      	cmp	r3, #10
 800c1d0:	d008      	beq.n	800c1e4 <UART_SetConfig+0x7e4>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d6:	2b0b      	cmp	r3, #11
 800c1d8:	d102      	bne.n	800c1e0 <UART_SetConfig+0x7e0>
 800c1da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1de:	e016      	b.n	800c20e <UART_SetConfig+0x80e>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e014      	b.n	800c20e <UART_SetConfig+0x80e>
 800c1e4:	2380      	movs	r3, #128	; 0x80
 800c1e6:	e012      	b.n	800c20e <UART_SetConfig+0x80e>
 800c1e8:	2340      	movs	r3, #64	; 0x40
 800c1ea:	e010      	b.n	800c20e <UART_SetConfig+0x80e>
 800c1ec:	2320      	movs	r3, #32
 800c1ee:	e00e      	b.n	800c20e <UART_SetConfig+0x80e>
 800c1f0:	2310      	movs	r3, #16
 800c1f2:	e00c      	b.n	800c20e <UART_SetConfig+0x80e>
 800c1f4:	230c      	movs	r3, #12
 800c1f6:	e00a      	b.n	800c20e <UART_SetConfig+0x80e>
 800c1f8:	230a      	movs	r3, #10
 800c1fa:	e008      	b.n	800c20e <UART_SetConfig+0x80e>
 800c1fc:	2308      	movs	r3, #8
 800c1fe:	e006      	b.n	800c20e <UART_SetConfig+0x80e>
 800c200:	2306      	movs	r3, #6
 800c202:	e004      	b.n	800c20e <UART_SetConfig+0x80e>
 800c204:	2304      	movs	r3, #4
 800c206:	e002      	b.n	800c20e <UART_SetConfig+0x80e>
 800c208:	2302      	movs	r3, #2
 800c20a:	e000      	b.n	800c20e <UART_SetConfig+0x80e>
 800c20c:	2301      	movs	r3, #1
 800c20e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c214:	e171      	b.n	800c4fa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c216:	4b7a      	ldr	r3, [pc, #488]	; (800c400 <UART_SetConfig+0xa00>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f003 0320 	and.w	r3, r3, #32
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d054      	beq.n	800c2cc <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c222:	4b77      	ldr	r3, [pc, #476]	; (800c400 <UART_SetConfig+0xa00>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	08db      	lsrs	r3, r3, #3
 800c228:	f003 0303 	and.w	r3, r3, #3
 800c22c:	4a75      	ldr	r2, [pc, #468]	; (800c404 <UART_SetConfig+0xa04>)
 800c22e:	40da      	lsrs	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c234:	2b00      	cmp	r3, #0
 800c236:	d044      	beq.n	800c2c2 <UART_SetConfig+0x8c2>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d03e      	beq.n	800c2be <UART_SetConfig+0x8be>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c244:	2b02      	cmp	r3, #2
 800c246:	d038      	beq.n	800c2ba <UART_SetConfig+0x8ba>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d032      	beq.n	800c2b6 <UART_SetConfig+0x8b6>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c254:	2b04      	cmp	r3, #4
 800c256:	d02c      	beq.n	800c2b2 <UART_SetConfig+0x8b2>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25c:	2b05      	cmp	r3, #5
 800c25e:	d026      	beq.n	800c2ae <UART_SetConfig+0x8ae>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c264:	2b06      	cmp	r3, #6
 800c266:	d020      	beq.n	800c2aa <UART_SetConfig+0x8aa>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26c:	2b07      	cmp	r3, #7
 800c26e:	d01a      	beq.n	800c2a6 <UART_SetConfig+0x8a6>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c274:	2b08      	cmp	r3, #8
 800c276:	d014      	beq.n	800c2a2 <UART_SetConfig+0x8a2>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27c:	2b09      	cmp	r3, #9
 800c27e:	d00e      	beq.n	800c29e <UART_SetConfig+0x89e>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c284:	2b0a      	cmp	r3, #10
 800c286:	d008      	beq.n	800c29a <UART_SetConfig+0x89a>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28c:	2b0b      	cmp	r3, #11
 800c28e:	d102      	bne.n	800c296 <UART_SetConfig+0x896>
 800c290:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c294:	e016      	b.n	800c2c4 <UART_SetConfig+0x8c4>
 800c296:	2301      	movs	r3, #1
 800c298:	e014      	b.n	800c2c4 <UART_SetConfig+0x8c4>
 800c29a:	2380      	movs	r3, #128	; 0x80
 800c29c:	e012      	b.n	800c2c4 <UART_SetConfig+0x8c4>
 800c29e:	2340      	movs	r3, #64	; 0x40
 800c2a0:	e010      	b.n	800c2c4 <UART_SetConfig+0x8c4>
 800c2a2:	2320      	movs	r3, #32
 800c2a4:	e00e      	b.n	800c2c4 <UART_SetConfig+0x8c4>
 800c2a6:	2310      	movs	r3, #16
 800c2a8:	e00c      	b.n	800c2c4 <UART_SetConfig+0x8c4>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	e00a      	b.n	800c2c4 <UART_SetConfig+0x8c4>
 800c2ae:	230a      	movs	r3, #10
 800c2b0:	e008      	b.n	800c2c4 <UART_SetConfig+0x8c4>
 800c2b2:	2308      	movs	r3, #8
 800c2b4:	e006      	b.n	800c2c4 <UART_SetConfig+0x8c4>
 800c2b6:	2306      	movs	r3, #6
 800c2b8:	e004      	b.n	800c2c4 <UART_SetConfig+0x8c4>
 800c2ba:	2304      	movs	r3, #4
 800c2bc:	e002      	b.n	800c2c4 <UART_SetConfig+0x8c4>
 800c2be:	2302      	movs	r3, #2
 800c2c0:	e000      	b.n	800c2c4 <UART_SetConfig+0x8c4>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800c2ca:	e116      	b.n	800c4fa <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d043      	beq.n	800c35c <UART_SetConfig+0x95c>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d03d      	beq.n	800c358 <UART_SetConfig+0x958>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d037      	beq.n	800c354 <UART_SetConfig+0x954>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e8:	2b03      	cmp	r3, #3
 800c2ea:	d031      	beq.n	800c350 <UART_SetConfig+0x950>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f0:	2b04      	cmp	r3, #4
 800c2f2:	d02b      	beq.n	800c34c <UART_SetConfig+0x94c>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f8:	2b05      	cmp	r3, #5
 800c2fa:	d025      	beq.n	800c348 <UART_SetConfig+0x948>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c300:	2b06      	cmp	r3, #6
 800c302:	d01f      	beq.n	800c344 <UART_SetConfig+0x944>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c308:	2b07      	cmp	r3, #7
 800c30a:	d019      	beq.n	800c340 <UART_SetConfig+0x940>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c310:	2b08      	cmp	r3, #8
 800c312:	d013      	beq.n	800c33c <UART_SetConfig+0x93c>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c318:	2b09      	cmp	r3, #9
 800c31a:	d00d      	beq.n	800c338 <UART_SetConfig+0x938>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c320:	2b0a      	cmp	r3, #10
 800c322:	d007      	beq.n	800c334 <UART_SetConfig+0x934>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c328:	2b0b      	cmp	r3, #11
 800c32a:	d101      	bne.n	800c330 <UART_SetConfig+0x930>
 800c32c:	4b36      	ldr	r3, [pc, #216]	; (800c408 <UART_SetConfig+0xa08>)
 800c32e:	e016      	b.n	800c35e <UART_SetConfig+0x95e>
 800c330:	4b34      	ldr	r3, [pc, #208]	; (800c404 <UART_SetConfig+0xa04>)
 800c332:	e014      	b.n	800c35e <UART_SetConfig+0x95e>
 800c334:	4b35      	ldr	r3, [pc, #212]	; (800c40c <UART_SetConfig+0xa0c>)
 800c336:	e012      	b.n	800c35e <UART_SetConfig+0x95e>
 800c338:	4b35      	ldr	r3, [pc, #212]	; (800c410 <UART_SetConfig+0xa10>)
 800c33a:	e010      	b.n	800c35e <UART_SetConfig+0x95e>
 800c33c:	4b35      	ldr	r3, [pc, #212]	; (800c414 <UART_SetConfig+0xa14>)
 800c33e:	e00e      	b.n	800c35e <UART_SetConfig+0x95e>
 800c340:	4b35      	ldr	r3, [pc, #212]	; (800c418 <UART_SetConfig+0xa18>)
 800c342:	e00c      	b.n	800c35e <UART_SetConfig+0x95e>
 800c344:	4b35      	ldr	r3, [pc, #212]	; (800c41c <UART_SetConfig+0xa1c>)
 800c346:	e00a      	b.n	800c35e <UART_SetConfig+0x95e>
 800c348:	4b35      	ldr	r3, [pc, #212]	; (800c420 <UART_SetConfig+0xa20>)
 800c34a:	e008      	b.n	800c35e <UART_SetConfig+0x95e>
 800c34c:	4b35      	ldr	r3, [pc, #212]	; (800c424 <UART_SetConfig+0xa24>)
 800c34e:	e006      	b.n	800c35e <UART_SetConfig+0x95e>
 800c350:	4b35      	ldr	r3, [pc, #212]	; (800c428 <UART_SetConfig+0xa28>)
 800c352:	e004      	b.n	800c35e <UART_SetConfig+0x95e>
 800c354:	4b35      	ldr	r3, [pc, #212]	; (800c42c <UART_SetConfig+0xa2c>)
 800c356:	e002      	b.n	800c35e <UART_SetConfig+0x95e>
 800c358:	4b35      	ldr	r3, [pc, #212]	; (800c430 <UART_SetConfig+0xa30>)
 800c35a:	e000      	b.n	800c35e <UART_SetConfig+0x95e>
 800c35c:	4b29      	ldr	r3, [pc, #164]	; (800c404 <UART_SetConfig+0xa04>)
 800c35e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c360:	e0cb      	b.n	800c4fa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c366:	2b00      	cmp	r3, #0
 800c368:	d046      	beq.n	800c3f8 <UART_SetConfig+0x9f8>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d040      	beq.n	800c3f4 <UART_SetConfig+0x9f4>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c376:	2b02      	cmp	r3, #2
 800c378:	d03a      	beq.n	800c3f0 <UART_SetConfig+0x9f0>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c37e:	2b03      	cmp	r3, #3
 800c380:	d034      	beq.n	800c3ec <UART_SetConfig+0x9ec>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c386:	2b04      	cmp	r3, #4
 800c388:	d02e      	beq.n	800c3e8 <UART_SetConfig+0x9e8>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38e:	2b05      	cmp	r3, #5
 800c390:	d028      	beq.n	800c3e4 <UART_SetConfig+0x9e4>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c396:	2b06      	cmp	r3, #6
 800c398:	d022      	beq.n	800c3e0 <UART_SetConfig+0x9e0>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39e:	2b07      	cmp	r3, #7
 800c3a0:	d01c      	beq.n	800c3dc <UART_SetConfig+0x9dc>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a6:	2b08      	cmp	r3, #8
 800c3a8:	d016      	beq.n	800c3d8 <UART_SetConfig+0x9d8>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ae:	2b09      	cmp	r3, #9
 800c3b0:	d00f      	beq.n	800c3d2 <UART_SetConfig+0x9d2>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b6:	2b0a      	cmp	r3, #10
 800c3b8:	d008      	beq.n	800c3cc <UART_SetConfig+0x9cc>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3be:	2b0b      	cmp	r3, #11
 800c3c0:	d102      	bne.n	800c3c8 <UART_SetConfig+0x9c8>
 800c3c2:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c3c6:	e018      	b.n	800c3fa <UART_SetConfig+0x9fa>
 800c3c8:	4b13      	ldr	r3, [pc, #76]	; (800c418 <UART_SetConfig+0xa18>)
 800c3ca:	e016      	b.n	800c3fa <UART_SetConfig+0x9fa>
 800c3cc:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c3d0:	e013      	b.n	800c3fa <UART_SetConfig+0x9fa>
 800c3d2:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c3d6:	e010      	b.n	800c3fa <UART_SetConfig+0x9fa>
 800c3d8:	4b16      	ldr	r3, [pc, #88]	; (800c434 <UART_SetConfig+0xa34>)
 800c3da:	e00e      	b.n	800c3fa <UART_SetConfig+0x9fa>
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	; (800c408 <UART_SetConfig+0xa08>)
 800c3de:	e00c      	b.n	800c3fa <UART_SetConfig+0x9fa>
 800c3e0:	4b15      	ldr	r3, [pc, #84]	; (800c438 <UART_SetConfig+0xa38>)
 800c3e2:	e00a      	b.n	800c3fa <UART_SetConfig+0x9fa>
 800c3e4:	4b15      	ldr	r3, [pc, #84]	; (800c43c <UART_SetConfig+0xa3c>)
 800c3e6:	e008      	b.n	800c3fa <UART_SetConfig+0x9fa>
 800c3e8:	4b08      	ldr	r3, [pc, #32]	; (800c40c <UART_SetConfig+0xa0c>)
 800c3ea:	e006      	b.n	800c3fa <UART_SetConfig+0x9fa>
 800c3ec:	4b14      	ldr	r3, [pc, #80]	; (800c440 <UART_SetConfig+0xa40>)
 800c3ee:	e004      	b.n	800c3fa <UART_SetConfig+0x9fa>
 800c3f0:	4b07      	ldr	r3, [pc, #28]	; (800c410 <UART_SetConfig+0xa10>)
 800c3f2:	e002      	b.n	800c3fa <UART_SetConfig+0x9fa>
 800c3f4:	4b07      	ldr	r3, [pc, #28]	; (800c414 <UART_SetConfig+0xa14>)
 800c3f6:	e000      	b.n	800c3fa <UART_SetConfig+0x9fa>
 800c3f8:	4b07      	ldr	r3, [pc, #28]	; (800c418 <UART_SetConfig+0xa18>)
 800c3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3fc:	e07d      	b.n	800c4fa <UART_SetConfig+0xafa>
 800c3fe:	bf00      	nop
 800c400:	58024400 	.word	0x58024400
 800c404:	03d09000 	.word	0x03d09000
 800c408:	0003d090 	.word	0x0003d090
 800c40c:	0007a120 	.word	0x0007a120
 800c410:	000f4240 	.word	0x000f4240
 800c414:	001e8480 	.word	0x001e8480
 800c418:	003d0900 	.word	0x003d0900
 800c41c:	00516155 	.word	0x00516155
 800c420:	0061a800 	.word	0x0061a800
 800c424:	007a1200 	.word	0x007a1200
 800c428:	00a2c2aa 	.word	0x00a2c2aa
 800c42c:	00f42400 	.word	0x00f42400
 800c430:	01e84800 	.word	0x01e84800
 800c434:	0001e848 	.word	0x0001e848
 800c438:	00051615 	.word	0x00051615
 800c43c:	00061a80 	.word	0x00061a80
 800c440:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d04e      	beq.n	800c4ea <UART_SetConfig+0xaea>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c450:	2b01      	cmp	r3, #1
 800c452:	d047      	beq.n	800c4e4 <UART_SetConfig+0xae4>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d040      	beq.n	800c4de <UART_SetConfig+0xade>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c460:	2b03      	cmp	r3, #3
 800c462:	d039      	beq.n	800c4d8 <UART_SetConfig+0xad8>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c468:	2b04      	cmp	r3, #4
 800c46a:	d032      	beq.n	800c4d2 <UART_SetConfig+0xad2>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c470:	2b05      	cmp	r3, #5
 800c472:	d02b      	beq.n	800c4cc <UART_SetConfig+0xacc>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c478:	2b06      	cmp	r3, #6
 800c47a:	d024      	beq.n	800c4c6 <UART_SetConfig+0xac6>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c480:	2b07      	cmp	r3, #7
 800c482:	d01d      	beq.n	800c4c0 <UART_SetConfig+0xac0>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c488:	2b08      	cmp	r3, #8
 800c48a:	d016      	beq.n	800c4ba <UART_SetConfig+0xaba>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c490:	2b09      	cmp	r3, #9
 800c492:	d00f      	beq.n	800c4b4 <UART_SetConfig+0xab4>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c498:	2b0a      	cmp	r3, #10
 800c49a:	d008      	beq.n	800c4ae <UART_SetConfig+0xaae>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a0:	2b0b      	cmp	r3, #11
 800c4a2:	d101      	bne.n	800c4a8 <UART_SetConfig+0xaa8>
 800c4a4:	2380      	movs	r3, #128	; 0x80
 800c4a6:	e022      	b.n	800c4ee <UART_SetConfig+0xaee>
 800c4a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4ac:	e01f      	b.n	800c4ee <UART_SetConfig+0xaee>
 800c4ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4b2:	e01c      	b.n	800c4ee <UART_SetConfig+0xaee>
 800c4b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4b8:	e019      	b.n	800c4ee <UART_SetConfig+0xaee>
 800c4ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4be:	e016      	b.n	800c4ee <UART_SetConfig+0xaee>
 800c4c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c4c4:	e013      	b.n	800c4ee <UART_SetConfig+0xaee>
 800c4c6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800c4ca:	e010      	b.n	800c4ee <UART_SetConfig+0xaee>
 800c4cc:	f640 43cc 	movw	r3, #3276	; 0xccc
 800c4d0:	e00d      	b.n	800c4ee <UART_SetConfig+0xaee>
 800c4d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4d6:	e00a      	b.n	800c4ee <UART_SetConfig+0xaee>
 800c4d8:	f241 5355 	movw	r3, #5461	; 0x1555
 800c4dc:	e007      	b.n	800c4ee <UART_SetConfig+0xaee>
 800c4de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c4e2:	e004      	b.n	800c4ee <UART_SetConfig+0xaee>
 800c4e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c4e8:	e001      	b.n	800c4ee <UART_SetConfig+0xaee>
 800c4ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4f0:	e003      	b.n	800c4fa <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800c4f8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800c4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f001 83e8 	beq.w	800dcd2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	685a      	ldr	r2, [r3, #4]
 800c506:	4613      	mov	r3, r2
 800c508:	005b      	lsls	r3, r3, #1
 800c50a:	4413      	add	r3, r2
 800c50c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c50e:	429a      	cmp	r2, r3
 800c510:	d305      	bcc.n	800c51e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d904      	bls.n	800c528 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c524:	f001 bbd5 	b.w	800dcd2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800c528:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c52c:	2b08      	cmp	r3, #8
 800c52e:	f000 8154 	beq.w	800c7da <UART_SetConfig+0xdda>
 800c532:	2b08      	cmp	r3, #8
 800c534:	dc06      	bgt.n	800c544 <UART_SetConfig+0xb44>
 800c536:	2b02      	cmp	r3, #2
 800c538:	d00f      	beq.n	800c55a <UART_SetConfig+0xb5a>
 800c53a:	2b04      	cmp	r3, #4
 800c53c:	f000 80ac 	beq.w	800c698 <UART_SetConfig+0xc98>
 800c540:	f000 bc30 	b.w	800cda4 <UART_SetConfig+0x13a4>
 800c544:	2b20      	cmp	r3, #32
 800c546:	f000 832d 	beq.w	800cba4 <UART_SetConfig+0x11a4>
 800c54a:	2b40      	cmp	r3, #64	; 0x40
 800c54c:	f000 83a5 	beq.w	800cc9a <UART_SetConfig+0x129a>
 800c550:	2b10      	cmp	r3, #16
 800c552:	f000 81e3 	beq.w	800c91c <UART_SetConfig+0xf1c>
 800c556:	f000 bc25 	b.w	800cda4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c55a:	f7fc fe6d 	bl	8009238 <HAL_RCCEx_GetD3PCLK1Freq>
 800c55e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c562:	4618      	mov	r0, r3
 800c564:	f04f 0100 	mov.w	r1, #0
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d067      	beq.n	800c640 <UART_SetConfig+0xc40>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c574:	2b01      	cmp	r3, #1
 800c576:	d05e      	beq.n	800c636 <UART_SetConfig+0xc36>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	d055      	beq.n	800c62c <UART_SetConfig+0xc2c>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c584:	2b03      	cmp	r3, #3
 800c586:	d04c      	beq.n	800c622 <UART_SetConfig+0xc22>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58c:	2b04      	cmp	r3, #4
 800c58e:	d043      	beq.n	800c618 <UART_SetConfig+0xc18>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c594:	2b05      	cmp	r3, #5
 800c596:	d03a      	beq.n	800c60e <UART_SetConfig+0xc0e>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59c:	2b06      	cmp	r3, #6
 800c59e:	d031      	beq.n	800c604 <UART_SetConfig+0xc04>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a4:	2b07      	cmp	r3, #7
 800c5a6:	d028      	beq.n	800c5fa <UART_SetConfig+0xbfa>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ac:	2b08      	cmp	r3, #8
 800c5ae:	d01f      	beq.n	800c5f0 <UART_SetConfig+0xbf0>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b4:	2b09      	cmp	r3, #9
 800c5b6:	d016      	beq.n	800c5e6 <UART_SetConfig+0xbe6>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5bc:	2b0a      	cmp	r3, #10
 800c5be:	d00d      	beq.n	800c5dc <UART_SetConfig+0xbdc>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c4:	2b0b      	cmp	r3, #11
 800c5c6:	d104      	bne.n	800c5d2 <UART_SetConfig+0xbd2>
 800c5c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5cc:	f04f 0400 	mov.w	r4, #0
 800c5d0:	e03a      	b.n	800c648 <UART_SetConfig+0xc48>
 800c5d2:	f04f 0301 	mov.w	r3, #1
 800c5d6:	f04f 0400 	mov.w	r4, #0
 800c5da:	e035      	b.n	800c648 <UART_SetConfig+0xc48>
 800c5dc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800c5e0:	f04f 0400 	mov.w	r4, #0
 800c5e4:	e030      	b.n	800c648 <UART_SetConfig+0xc48>
 800c5e6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c5ea:	f04f 0400 	mov.w	r4, #0
 800c5ee:	e02b      	b.n	800c648 <UART_SetConfig+0xc48>
 800c5f0:	f04f 0320 	mov.w	r3, #32
 800c5f4:	f04f 0400 	mov.w	r4, #0
 800c5f8:	e026      	b.n	800c648 <UART_SetConfig+0xc48>
 800c5fa:	f04f 0310 	mov.w	r3, #16
 800c5fe:	f04f 0400 	mov.w	r4, #0
 800c602:	e021      	b.n	800c648 <UART_SetConfig+0xc48>
 800c604:	f04f 030c 	mov.w	r3, #12
 800c608:	f04f 0400 	mov.w	r4, #0
 800c60c:	e01c      	b.n	800c648 <UART_SetConfig+0xc48>
 800c60e:	f04f 030a 	mov.w	r3, #10
 800c612:	f04f 0400 	mov.w	r4, #0
 800c616:	e017      	b.n	800c648 <UART_SetConfig+0xc48>
 800c618:	f04f 0308 	mov.w	r3, #8
 800c61c:	f04f 0400 	mov.w	r4, #0
 800c620:	e012      	b.n	800c648 <UART_SetConfig+0xc48>
 800c622:	f04f 0306 	mov.w	r3, #6
 800c626:	f04f 0400 	mov.w	r4, #0
 800c62a:	e00d      	b.n	800c648 <UART_SetConfig+0xc48>
 800c62c:	f04f 0304 	mov.w	r3, #4
 800c630:	f04f 0400 	mov.w	r4, #0
 800c634:	e008      	b.n	800c648 <UART_SetConfig+0xc48>
 800c636:	f04f 0302 	mov.w	r3, #2
 800c63a:	f04f 0400 	mov.w	r4, #0
 800c63e:	e003      	b.n	800c648 <UART_SetConfig+0xc48>
 800c640:	f04f 0301 	mov.w	r3, #1
 800c644:	f04f 0400 	mov.w	r4, #0
 800c648:	461a      	mov	r2, r3
 800c64a:	4623      	mov	r3, r4
 800c64c:	f7f3 fe44 	bl	80002d8 <__aeabi_uldivmod>
 800c650:	4603      	mov	r3, r0
 800c652:	460c      	mov	r4, r1
 800c654:	4619      	mov	r1, r3
 800c656:	4622      	mov	r2, r4
 800c658:	f04f 0300 	mov.w	r3, #0
 800c65c:	f04f 0400 	mov.w	r4, #0
 800c660:	0214      	lsls	r4, r2, #8
 800c662:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c666:	020b      	lsls	r3, r1, #8
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	6852      	ldr	r2, [r2, #4]
 800c66c:	0852      	lsrs	r2, r2, #1
 800c66e:	4611      	mov	r1, r2
 800c670:	f04f 0200 	mov.w	r2, #0
 800c674:	eb13 0b01 	adds.w	fp, r3, r1
 800c678:	eb44 0c02 	adc.w	ip, r4, r2
 800c67c:	4658      	mov	r0, fp
 800c67e:	4661      	mov	r1, ip
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	f04f 0400 	mov.w	r4, #0
 800c688:	461a      	mov	r2, r3
 800c68a:	4623      	mov	r3, r4
 800c68c:	f7f3 fe24 	bl	80002d8 <__aeabi_uldivmod>
 800c690:	4603      	mov	r3, r0
 800c692:	460c      	mov	r4, r1
 800c694:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c696:	e389      	b.n	800cdac <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c698:	f107 0318 	add.w	r3, r7, #24
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fc fde1 	bl	8009264 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f04f 0100 	mov.w	r1, #0
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d067      	beq.n	800c782 <UART_SetConfig+0xd82>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d05e      	beq.n	800c778 <UART_SetConfig+0xd78>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d055      	beq.n	800c76e <UART_SetConfig+0xd6e>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	d04c      	beq.n	800c764 <UART_SetConfig+0xd64>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ce:	2b04      	cmp	r3, #4
 800c6d0:	d043      	beq.n	800c75a <UART_SetConfig+0xd5a>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d6:	2b05      	cmp	r3, #5
 800c6d8:	d03a      	beq.n	800c750 <UART_SetConfig+0xd50>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6de:	2b06      	cmp	r3, #6
 800c6e0:	d031      	beq.n	800c746 <UART_SetConfig+0xd46>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e6:	2b07      	cmp	r3, #7
 800c6e8:	d028      	beq.n	800c73c <UART_SetConfig+0xd3c>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ee:	2b08      	cmp	r3, #8
 800c6f0:	d01f      	beq.n	800c732 <UART_SetConfig+0xd32>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f6:	2b09      	cmp	r3, #9
 800c6f8:	d016      	beq.n	800c728 <UART_SetConfig+0xd28>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fe:	2b0a      	cmp	r3, #10
 800c700:	d00d      	beq.n	800c71e <UART_SetConfig+0xd1e>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c706:	2b0b      	cmp	r3, #11
 800c708:	d104      	bne.n	800c714 <UART_SetConfig+0xd14>
 800c70a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c70e:	f04f 0400 	mov.w	r4, #0
 800c712:	e03a      	b.n	800c78a <UART_SetConfig+0xd8a>
 800c714:	f04f 0301 	mov.w	r3, #1
 800c718:	f04f 0400 	mov.w	r4, #0
 800c71c:	e035      	b.n	800c78a <UART_SetConfig+0xd8a>
 800c71e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800c722:	f04f 0400 	mov.w	r4, #0
 800c726:	e030      	b.n	800c78a <UART_SetConfig+0xd8a>
 800c728:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c72c:	f04f 0400 	mov.w	r4, #0
 800c730:	e02b      	b.n	800c78a <UART_SetConfig+0xd8a>
 800c732:	f04f 0320 	mov.w	r3, #32
 800c736:	f04f 0400 	mov.w	r4, #0
 800c73a:	e026      	b.n	800c78a <UART_SetConfig+0xd8a>
 800c73c:	f04f 0310 	mov.w	r3, #16
 800c740:	f04f 0400 	mov.w	r4, #0
 800c744:	e021      	b.n	800c78a <UART_SetConfig+0xd8a>
 800c746:	f04f 030c 	mov.w	r3, #12
 800c74a:	f04f 0400 	mov.w	r4, #0
 800c74e:	e01c      	b.n	800c78a <UART_SetConfig+0xd8a>
 800c750:	f04f 030a 	mov.w	r3, #10
 800c754:	f04f 0400 	mov.w	r4, #0
 800c758:	e017      	b.n	800c78a <UART_SetConfig+0xd8a>
 800c75a:	f04f 0308 	mov.w	r3, #8
 800c75e:	f04f 0400 	mov.w	r4, #0
 800c762:	e012      	b.n	800c78a <UART_SetConfig+0xd8a>
 800c764:	f04f 0306 	mov.w	r3, #6
 800c768:	f04f 0400 	mov.w	r4, #0
 800c76c:	e00d      	b.n	800c78a <UART_SetConfig+0xd8a>
 800c76e:	f04f 0304 	mov.w	r3, #4
 800c772:	f04f 0400 	mov.w	r4, #0
 800c776:	e008      	b.n	800c78a <UART_SetConfig+0xd8a>
 800c778:	f04f 0302 	mov.w	r3, #2
 800c77c:	f04f 0400 	mov.w	r4, #0
 800c780:	e003      	b.n	800c78a <UART_SetConfig+0xd8a>
 800c782:	f04f 0301 	mov.w	r3, #1
 800c786:	f04f 0400 	mov.w	r4, #0
 800c78a:	461a      	mov	r2, r3
 800c78c:	4623      	mov	r3, r4
 800c78e:	f7f3 fda3 	bl	80002d8 <__aeabi_uldivmod>
 800c792:	4603      	mov	r3, r0
 800c794:	460c      	mov	r4, r1
 800c796:	4619      	mov	r1, r3
 800c798:	4622      	mov	r2, r4
 800c79a:	f04f 0300 	mov.w	r3, #0
 800c79e:	f04f 0400 	mov.w	r4, #0
 800c7a2:	0214      	lsls	r4, r2, #8
 800c7a4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c7a8:	020b      	lsls	r3, r1, #8
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	6852      	ldr	r2, [r2, #4]
 800c7ae:	0852      	lsrs	r2, r2, #1
 800c7b0:	4611      	mov	r1, r2
 800c7b2:	f04f 0200 	mov.w	r2, #0
 800c7b6:	eb13 0b01 	adds.w	fp, r3, r1
 800c7ba:	eb44 0c02 	adc.w	ip, r4, r2
 800c7be:	4658      	mov	r0, fp
 800c7c0:	4661      	mov	r1, ip
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	f04f 0400 	mov.w	r4, #0
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	4623      	mov	r3, r4
 800c7ce:	f7f3 fd83 	bl	80002d8 <__aeabi_uldivmod>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	460c      	mov	r4, r1
 800c7d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c7d8:	e2e8      	b.n	800cdac <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7da:	f107 030c 	add.w	r3, r7, #12
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7fc fe8c 	bl	80094fc <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f04f 0100 	mov.w	r1, #0
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d067      	beq.n	800c8c4 <UART_SetConfig+0xec4>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d05e      	beq.n	800c8ba <UART_SetConfig+0xeba>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c800:	2b02      	cmp	r3, #2
 800c802:	d055      	beq.n	800c8b0 <UART_SetConfig+0xeb0>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c808:	2b03      	cmp	r3, #3
 800c80a:	d04c      	beq.n	800c8a6 <UART_SetConfig+0xea6>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c810:	2b04      	cmp	r3, #4
 800c812:	d043      	beq.n	800c89c <UART_SetConfig+0xe9c>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c818:	2b05      	cmp	r3, #5
 800c81a:	d03a      	beq.n	800c892 <UART_SetConfig+0xe92>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c820:	2b06      	cmp	r3, #6
 800c822:	d031      	beq.n	800c888 <UART_SetConfig+0xe88>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c828:	2b07      	cmp	r3, #7
 800c82a:	d028      	beq.n	800c87e <UART_SetConfig+0xe7e>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c830:	2b08      	cmp	r3, #8
 800c832:	d01f      	beq.n	800c874 <UART_SetConfig+0xe74>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c838:	2b09      	cmp	r3, #9
 800c83a:	d016      	beq.n	800c86a <UART_SetConfig+0xe6a>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c840:	2b0a      	cmp	r3, #10
 800c842:	d00d      	beq.n	800c860 <UART_SetConfig+0xe60>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c848:	2b0b      	cmp	r3, #11
 800c84a:	d104      	bne.n	800c856 <UART_SetConfig+0xe56>
 800c84c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c850:	f04f 0400 	mov.w	r4, #0
 800c854:	e03a      	b.n	800c8cc <UART_SetConfig+0xecc>
 800c856:	f04f 0301 	mov.w	r3, #1
 800c85a:	f04f 0400 	mov.w	r4, #0
 800c85e:	e035      	b.n	800c8cc <UART_SetConfig+0xecc>
 800c860:	f04f 0380 	mov.w	r3, #128	; 0x80
 800c864:	f04f 0400 	mov.w	r4, #0
 800c868:	e030      	b.n	800c8cc <UART_SetConfig+0xecc>
 800c86a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c86e:	f04f 0400 	mov.w	r4, #0
 800c872:	e02b      	b.n	800c8cc <UART_SetConfig+0xecc>
 800c874:	f04f 0320 	mov.w	r3, #32
 800c878:	f04f 0400 	mov.w	r4, #0
 800c87c:	e026      	b.n	800c8cc <UART_SetConfig+0xecc>
 800c87e:	f04f 0310 	mov.w	r3, #16
 800c882:	f04f 0400 	mov.w	r4, #0
 800c886:	e021      	b.n	800c8cc <UART_SetConfig+0xecc>
 800c888:	f04f 030c 	mov.w	r3, #12
 800c88c:	f04f 0400 	mov.w	r4, #0
 800c890:	e01c      	b.n	800c8cc <UART_SetConfig+0xecc>
 800c892:	f04f 030a 	mov.w	r3, #10
 800c896:	f04f 0400 	mov.w	r4, #0
 800c89a:	e017      	b.n	800c8cc <UART_SetConfig+0xecc>
 800c89c:	f04f 0308 	mov.w	r3, #8
 800c8a0:	f04f 0400 	mov.w	r4, #0
 800c8a4:	e012      	b.n	800c8cc <UART_SetConfig+0xecc>
 800c8a6:	f04f 0306 	mov.w	r3, #6
 800c8aa:	f04f 0400 	mov.w	r4, #0
 800c8ae:	e00d      	b.n	800c8cc <UART_SetConfig+0xecc>
 800c8b0:	f04f 0304 	mov.w	r3, #4
 800c8b4:	f04f 0400 	mov.w	r4, #0
 800c8b8:	e008      	b.n	800c8cc <UART_SetConfig+0xecc>
 800c8ba:	f04f 0302 	mov.w	r3, #2
 800c8be:	f04f 0400 	mov.w	r4, #0
 800c8c2:	e003      	b.n	800c8cc <UART_SetConfig+0xecc>
 800c8c4:	f04f 0301 	mov.w	r3, #1
 800c8c8:	f04f 0400 	mov.w	r4, #0
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	4623      	mov	r3, r4
 800c8d0:	f7f3 fd02 	bl	80002d8 <__aeabi_uldivmod>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	460c      	mov	r4, r1
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4622      	mov	r2, r4
 800c8dc:	f04f 0300 	mov.w	r3, #0
 800c8e0:	f04f 0400 	mov.w	r4, #0
 800c8e4:	0214      	lsls	r4, r2, #8
 800c8e6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c8ea:	020b      	lsls	r3, r1, #8
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	6852      	ldr	r2, [r2, #4]
 800c8f0:	0852      	lsrs	r2, r2, #1
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	f04f 0200 	mov.w	r2, #0
 800c8f8:	eb13 0b01 	adds.w	fp, r3, r1
 800c8fc:	eb44 0c02 	adc.w	ip, r4, r2
 800c900:	4658      	mov	r0, fp
 800c902:	4661      	mov	r1, ip
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	f04f 0400 	mov.w	r4, #0
 800c90c:	461a      	mov	r2, r3
 800c90e:	4623      	mov	r3, r4
 800c910:	f7f3 fce2 	bl	80002d8 <__aeabi_uldivmod>
 800c914:	4603      	mov	r3, r0
 800c916:	460c      	mov	r4, r1
 800c918:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c91a:	e247      	b.n	800cdac <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c91c:	4b96      	ldr	r3, [pc, #600]	; (800cb78 <UART_SetConfig+0x1178>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 0320 	and.w	r3, r3, #32
 800c924:	2b00      	cmp	r3, #0
 800c926:	f000 80a3 	beq.w	800ca70 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c92a:	4b93      	ldr	r3, [pc, #588]	; (800cb78 <UART_SetConfig+0x1178>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	08db      	lsrs	r3, r3, #3
 800c930:	f003 0303 	and.w	r3, r3, #3
 800c934:	4a91      	ldr	r2, [pc, #580]	; (800cb7c <UART_SetConfig+0x117c>)
 800c936:	fa22 f303 	lsr.w	r3, r2, r3
 800c93a:	4618      	mov	r0, r3
 800c93c:	f04f 0100 	mov.w	r1, #0
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c944:	2b00      	cmp	r3, #0
 800c946:	d067      	beq.n	800ca18 <UART_SetConfig+0x1018>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d05e      	beq.n	800ca0e <UART_SetConfig+0x100e>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c954:	2b02      	cmp	r3, #2
 800c956:	d055      	beq.n	800ca04 <UART_SetConfig+0x1004>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95c:	2b03      	cmp	r3, #3
 800c95e:	d04c      	beq.n	800c9fa <UART_SetConfig+0xffa>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c964:	2b04      	cmp	r3, #4
 800c966:	d043      	beq.n	800c9f0 <UART_SetConfig+0xff0>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96c:	2b05      	cmp	r3, #5
 800c96e:	d03a      	beq.n	800c9e6 <UART_SetConfig+0xfe6>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c974:	2b06      	cmp	r3, #6
 800c976:	d031      	beq.n	800c9dc <UART_SetConfig+0xfdc>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97c:	2b07      	cmp	r3, #7
 800c97e:	d028      	beq.n	800c9d2 <UART_SetConfig+0xfd2>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c984:	2b08      	cmp	r3, #8
 800c986:	d01f      	beq.n	800c9c8 <UART_SetConfig+0xfc8>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c98c:	2b09      	cmp	r3, #9
 800c98e:	d016      	beq.n	800c9be <UART_SetConfig+0xfbe>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c994:	2b0a      	cmp	r3, #10
 800c996:	d00d      	beq.n	800c9b4 <UART_SetConfig+0xfb4>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99c:	2b0b      	cmp	r3, #11
 800c99e:	d104      	bne.n	800c9aa <UART_SetConfig+0xfaa>
 800c9a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9a4:	f04f 0400 	mov.w	r4, #0
 800c9a8:	e03a      	b.n	800ca20 <UART_SetConfig+0x1020>
 800c9aa:	f04f 0301 	mov.w	r3, #1
 800c9ae:	f04f 0400 	mov.w	r4, #0
 800c9b2:	e035      	b.n	800ca20 <UART_SetConfig+0x1020>
 800c9b4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800c9b8:	f04f 0400 	mov.w	r4, #0
 800c9bc:	e030      	b.n	800ca20 <UART_SetConfig+0x1020>
 800c9be:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c9c2:	f04f 0400 	mov.w	r4, #0
 800c9c6:	e02b      	b.n	800ca20 <UART_SetConfig+0x1020>
 800c9c8:	f04f 0320 	mov.w	r3, #32
 800c9cc:	f04f 0400 	mov.w	r4, #0
 800c9d0:	e026      	b.n	800ca20 <UART_SetConfig+0x1020>
 800c9d2:	f04f 0310 	mov.w	r3, #16
 800c9d6:	f04f 0400 	mov.w	r4, #0
 800c9da:	e021      	b.n	800ca20 <UART_SetConfig+0x1020>
 800c9dc:	f04f 030c 	mov.w	r3, #12
 800c9e0:	f04f 0400 	mov.w	r4, #0
 800c9e4:	e01c      	b.n	800ca20 <UART_SetConfig+0x1020>
 800c9e6:	f04f 030a 	mov.w	r3, #10
 800c9ea:	f04f 0400 	mov.w	r4, #0
 800c9ee:	e017      	b.n	800ca20 <UART_SetConfig+0x1020>
 800c9f0:	f04f 0308 	mov.w	r3, #8
 800c9f4:	f04f 0400 	mov.w	r4, #0
 800c9f8:	e012      	b.n	800ca20 <UART_SetConfig+0x1020>
 800c9fa:	f04f 0306 	mov.w	r3, #6
 800c9fe:	f04f 0400 	mov.w	r4, #0
 800ca02:	e00d      	b.n	800ca20 <UART_SetConfig+0x1020>
 800ca04:	f04f 0304 	mov.w	r3, #4
 800ca08:	f04f 0400 	mov.w	r4, #0
 800ca0c:	e008      	b.n	800ca20 <UART_SetConfig+0x1020>
 800ca0e:	f04f 0302 	mov.w	r3, #2
 800ca12:	f04f 0400 	mov.w	r4, #0
 800ca16:	e003      	b.n	800ca20 <UART_SetConfig+0x1020>
 800ca18:	f04f 0301 	mov.w	r3, #1
 800ca1c:	f04f 0400 	mov.w	r4, #0
 800ca20:	461a      	mov	r2, r3
 800ca22:	4623      	mov	r3, r4
 800ca24:	f7f3 fc58 	bl	80002d8 <__aeabi_uldivmod>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	460c      	mov	r4, r1
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	4622      	mov	r2, r4
 800ca30:	f04f 0300 	mov.w	r3, #0
 800ca34:	f04f 0400 	mov.w	r4, #0
 800ca38:	0214      	lsls	r4, r2, #8
 800ca3a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ca3e:	020b      	lsls	r3, r1, #8
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	6852      	ldr	r2, [r2, #4]
 800ca44:	0852      	lsrs	r2, r2, #1
 800ca46:	4611      	mov	r1, r2
 800ca48:	f04f 0200 	mov.w	r2, #0
 800ca4c:	eb13 0b01 	adds.w	fp, r3, r1
 800ca50:	eb44 0c02 	adc.w	ip, r4, r2
 800ca54:	4658      	mov	r0, fp
 800ca56:	4661      	mov	r1, ip
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	f04f 0400 	mov.w	r4, #0
 800ca60:	461a      	mov	r2, r3
 800ca62:	4623      	mov	r3, r4
 800ca64:	f7f3 fc38 	bl	80002d8 <__aeabi_uldivmod>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	460c      	mov	r4, r1
 800ca6c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800ca6e:	e19d      	b.n	800cdac <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d05b      	beq.n	800cb30 <UART_SetConfig+0x1130>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d053      	beq.n	800cb28 <UART_SetConfig+0x1128>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca84:	2b02      	cmp	r3, #2
 800ca86:	d04b      	beq.n	800cb20 <UART_SetConfig+0x1120>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca8c:	2b03      	cmp	r3, #3
 800ca8e:	d043      	beq.n	800cb18 <UART_SetConfig+0x1118>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca94:	2b04      	cmp	r3, #4
 800ca96:	d03b      	beq.n	800cb10 <UART_SetConfig+0x1110>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9c:	2b05      	cmp	r3, #5
 800ca9e:	d033      	beq.n	800cb08 <UART_SetConfig+0x1108>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa4:	2b06      	cmp	r3, #6
 800caa6:	d02b      	beq.n	800cb00 <UART_SetConfig+0x1100>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caac:	2b07      	cmp	r3, #7
 800caae:	d023      	beq.n	800caf8 <UART_SetConfig+0x10f8>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab4:	2b08      	cmp	r3, #8
 800cab6:	d01b      	beq.n	800caf0 <UART_SetConfig+0x10f0>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cabc:	2b09      	cmp	r3, #9
 800cabe:	d013      	beq.n	800cae8 <UART_SetConfig+0x10e8>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac4:	2b0a      	cmp	r3, #10
 800cac6:	d00b      	beq.n	800cae0 <UART_SetConfig+0x10e0>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cacc:	2b0b      	cmp	r3, #11
 800cace:	d103      	bne.n	800cad8 <UART_SetConfig+0x10d8>
 800cad0:	4b2a      	ldr	r3, [pc, #168]	; (800cb7c <UART_SetConfig+0x117c>)
 800cad2:	f04f 0400 	mov.w	r4, #0
 800cad6:	e02e      	b.n	800cb36 <UART_SetConfig+0x1136>
 800cad8:	4b29      	ldr	r3, [pc, #164]	; (800cb80 <UART_SetConfig+0x1180>)
 800cada:	f04f 0403 	mov.w	r4, #3
 800cade:	e02a      	b.n	800cb36 <UART_SetConfig+0x1136>
 800cae0:	4b28      	ldr	r3, [pc, #160]	; (800cb84 <UART_SetConfig+0x1184>)
 800cae2:	f04f 0400 	mov.w	r4, #0
 800cae6:	e026      	b.n	800cb36 <UART_SetConfig+0x1136>
 800cae8:	4b27      	ldr	r3, [pc, #156]	; (800cb88 <UART_SetConfig+0x1188>)
 800caea:	f04f 0400 	mov.w	r4, #0
 800caee:	e022      	b.n	800cb36 <UART_SetConfig+0x1136>
 800caf0:	4b26      	ldr	r3, [pc, #152]	; (800cb8c <UART_SetConfig+0x118c>)
 800caf2:	f04f 0400 	mov.w	r4, #0
 800caf6:	e01e      	b.n	800cb36 <UART_SetConfig+0x1136>
 800caf8:	4b25      	ldr	r3, [pc, #148]	; (800cb90 <UART_SetConfig+0x1190>)
 800cafa:	f04f 0400 	mov.w	r4, #0
 800cafe:	e01a      	b.n	800cb36 <UART_SetConfig+0x1136>
 800cb00:	a419      	add	r4, pc, #100	; (adr r4, 800cb68 <UART_SetConfig+0x1168>)
 800cb02:	e9d4 3400 	ldrd	r3, r4, [r4]
 800cb06:	e016      	b.n	800cb36 <UART_SetConfig+0x1136>
 800cb08:	4b22      	ldr	r3, [pc, #136]	; (800cb94 <UART_SetConfig+0x1194>)
 800cb0a:	f04f 0400 	mov.w	r4, #0
 800cb0e:	e012      	b.n	800cb36 <UART_SetConfig+0x1136>
 800cb10:	4b21      	ldr	r3, [pc, #132]	; (800cb98 <UART_SetConfig+0x1198>)
 800cb12:	f04f 0400 	mov.w	r4, #0
 800cb16:	e00e      	b.n	800cb36 <UART_SetConfig+0x1136>
 800cb18:	a415      	add	r4, pc, #84	; (adr r4, 800cb70 <UART_SetConfig+0x1170>)
 800cb1a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800cb1e:	e00a      	b.n	800cb36 <UART_SetConfig+0x1136>
 800cb20:	4b1e      	ldr	r3, [pc, #120]	; (800cb9c <UART_SetConfig+0x119c>)
 800cb22:	f04f 0400 	mov.w	r4, #0
 800cb26:	e006      	b.n	800cb36 <UART_SetConfig+0x1136>
 800cb28:	4b1d      	ldr	r3, [pc, #116]	; (800cba0 <UART_SetConfig+0x11a0>)
 800cb2a:	f04f 0401 	mov.w	r4, #1
 800cb2e:	e002      	b.n	800cb36 <UART_SetConfig+0x1136>
 800cb30:	4b13      	ldr	r3, [pc, #76]	; (800cb80 <UART_SetConfig+0x1180>)
 800cb32:	f04f 0403 	mov.w	r4, #3
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	6852      	ldr	r2, [r2, #4]
 800cb3a:	0852      	lsrs	r2, r2, #1
 800cb3c:	4611      	mov	r1, r2
 800cb3e:	f04f 0200 	mov.w	r2, #0
 800cb42:	eb13 0b01 	adds.w	fp, r3, r1
 800cb46:	eb44 0c02 	adc.w	ip, r4, r2
 800cb4a:	4658      	mov	r0, fp
 800cb4c:	4661      	mov	r1, ip
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	f04f 0400 	mov.w	r4, #0
 800cb56:	461a      	mov	r2, r3
 800cb58:	4623      	mov	r3, r4
 800cb5a:	f7f3 fbbd 	bl	80002d8 <__aeabi_uldivmod>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	460c      	mov	r4, r1
 800cb62:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cb64:	e122      	b.n	800cdac <UART_SetConfig+0x13ac>
 800cb66:	bf00      	nop
 800cb68:	51615500 	.word	0x51615500
 800cb6c:	00000000 	.word	0x00000000
 800cb70:	a2c2aa00 	.word	0xa2c2aa00
 800cb74:	00000000 	.word	0x00000000
 800cb78:	58024400 	.word	0x58024400
 800cb7c:	03d09000 	.word	0x03d09000
 800cb80:	d0900000 	.word	0xd0900000
 800cb84:	07a12000 	.word	0x07a12000
 800cb88:	0f424000 	.word	0x0f424000
 800cb8c:	1e848000 	.word	0x1e848000
 800cb90:	3d090000 	.word	0x3d090000
 800cb94:	61a80000 	.word	0x61a80000
 800cb98:	7a120000 	.word	0x7a120000
 800cb9c:	f4240000 	.word	0xf4240000
 800cba0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d05b      	beq.n	800cc64 <UART_SetConfig+0x1264>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d053      	beq.n	800cc5c <UART_SetConfig+0x125c>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d04b      	beq.n	800cc54 <UART_SetConfig+0x1254>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc0:	2b03      	cmp	r3, #3
 800cbc2:	d043      	beq.n	800cc4c <UART_SetConfig+0x124c>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc8:	2b04      	cmp	r3, #4
 800cbca:	d03b      	beq.n	800cc44 <UART_SetConfig+0x1244>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd0:	2b05      	cmp	r3, #5
 800cbd2:	d033      	beq.n	800cc3c <UART_SetConfig+0x123c>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd8:	2b06      	cmp	r3, #6
 800cbda:	d02b      	beq.n	800cc34 <UART_SetConfig+0x1234>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe0:	2b07      	cmp	r3, #7
 800cbe2:	d023      	beq.n	800cc2c <UART_SetConfig+0x122c>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe8:	2b08      	cmp	r3, #8
 800cbea:	d01b      	beq.n	800cc24 <UART_SetConfig+0x1224>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf0:	2b09      	cmp	r3, #9
 800cbf2:	d013      	beq.n	800cc1c <UART_SetConfig+0x121c>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf8:	2b0a      	cmp	r3, #10
 800cbfa:	d00b      	beq.n	800cc14 <UART_SetConfig+0x1214>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc00:	2b0b      	cmp	r3, #11
 800cc02:	d103      	bne.n	800cc0c <UART_SetConfig+0x120c>
 800cc04:	4bc0      	ldr	r3, [pc, #768]	; (800cf08 <UART_SetConfig+0x1508>)
 800cc06:	f04f 0400 	mov.w	r4, #0
 800cc0a:	e02e      	b.n	800cc6a <UART_SetConfig+0x126a>
 800cc0c:	4bbf      	ldr	r3, [pc, #764]	; (800cf0c <UART_SetConfig+0x150c>)
 800cc0e:	f04f 0400 	mov.w	r4, #0
 800cc12:	e02a      	b.n	800cc6a <UART_SetConfig+0x126a>
 800cc14:	4bbe      	ldr	r3, [pc, #760]	; (800cf10 <UART_SetConfig+0x1510>)
 800cc16:	f04f 0400 	mov.w	r4, #0
 800cc1a:	e026      	b.n	800cc6a <UART_SetConfig+0x126a>
 800cc1c:	4bbd      	ldr	r3, [pc, #756]	; (800cf14 <UART_SetConfig+0x1514>)
 800cc1e:	f04f 0400 	mov.w	r4, #0
 800cc22:	e022      	b.n	800cc6a <UART_SetConfig+0x126a>
 800cc24:	4bbc      	ldr	r3, [pc, #752]	; (800cf18 <UART_SetConfig+0x1518>)
 800cc26:	f04f 0400 	mov.w	r4, #0
 800cc2a:	e01e      	b.n	800cc6a <UART_SetConfig+0x126a>
 800cc2c:	4bbb      	ldr	r3, [pc, #748]	; (800cf1c <UART_SetConfig+0x151c>)
 800cc2e:	f04f 0400 	mov.w	r4, #0
 800cc32:	e01a      	b.n	800cc6a <UART_SetConfig+0x126a>
 800cc34:	a4b0      	add	r4, pc, #704	; (adr r4, 800cef8 <UART_SetConfig+0x14f8>)
 800cc36:	e9d4 3400 	ldrd	r3, r4, [r4]
 800cc3a:	e016      	b.n	800cc6a <UART_SetConfig+0x126a>
 800cc3c:	4bb8      	ldr	r3, [pc, #736]	; (800cf20 <UART_SetConfig+0x1520>)
 800cc3e:	f04f 0400 	mov.w	r4, #0
 800cc42:	e012      	b.n	800cc6a <UART_SetConfig+0x126a>
 800cc44:	4bb7      	ldr	r3, [pc, #732]	; (800cf24 <UART_SetConfig+0x1524>)
 800cc46:	f04f 0400 	mov.w	r4, #0
 800cc4a:	e00e      	b.n	800cc6a <UART_SetConfig+0x126a>
 800cc4c:	a4ac      	add	r4, pc, #688	; (adr r4, 800cf00 <UART_SetConfig+0x1500>)
 800cc4e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800cc52:	e00a      	b.n	800cc6a <UART_SetConfig+0x126a>
 800cc54:	4bb4      	ldr	r3, [pc, #720]	; (800cf28 <UART_SetConfig+0x1528>)
 800cc56:	f04f 0400 	mov.w	r4, #0
 800cc5a:	e006      	b.n	800cc6a <UART_SetConfig+0x126a>
 800cc5c:	4bb3      	ldr	r3, [pc, #716]	; (800cf2c <UART_SetConfig+0x152c>)
 800cc5e:	f04f 0400 	mov.w	r4, #0
 800cc62:	e002      	b.n	800cc6a <UART_SetConfig+0x126a>
 800cc64:	4ba9      	ldr	r3, [pc, #676]	; (800cf0c <UART_SetConfig+0x150c>)
 800cc66:	f04f 0400 	mov.w	r4, #0
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	6852      	ldr	r2, [r2, #4]
 800cc6e:	0852      	lsrs	r2, r2, #1
 800cc70:	4611      	mov	r1, r2
 800cc72:	f04f 0200 	mov.w	r2, #0
 800cc76:	eb13 0b01 	adds.w	fp, r3, r1
 800cc7a:	eb44 0c02 	adc.w	ip, r4, r2
 800cc7e:	4658      	mov	r0, fp
 800cc80:	4661      	mov	r1, ip
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	f04f 0400 	mov.w	r4, #0
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	4623      	mov	r3, r4
 800cc8e:	f7f3 fb23 	bl	80002d8 <__aeabi_uldivmod>
 800cc92:	4603      	mov	r3, r0
 800cc94:	460c      	mov	r4, r1
 800cc96:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc98:	e088      	b.n	800cdac <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d064      	beq.n	800cd6c <UART_SetConfig+0x136c>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d05b      	beq.n	800cd62 <UART_SetConfig+0x1362>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d052      	beq.n	800cd58 <UART_SetConfig+0x1358>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb6:	2b03      	cmp	r3, #3
 800ccb8:	d04a      	beq.n	800cd50 <UART_SetConfig+0x1350>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbe:	2b04      	cmp	r3, #4
 800ccc0:	d041      	beq.n	800cd46 <UART_SetConfig+0x1346>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc6:	2b05      	cmp	r3, #5
 800ccc8:	d039      	beq.n	800cd3e <UART_SetConfig+0x133e>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccce:	2b06      	cmp	r3, #6
 800ccd0:	d031      	beq.n	800cd36 <UART_SetConfig+0x1336>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd6:	2b07      	cmp	r3, #7
 800ccd8:	d028      	beq.n	800cd2c <UART_SetConfig+0x132c>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccde:	2b08      	cmp	r3, #8
 800cce0:	d01f      	beq.n	800cd22 <UART_SetConfig+0x1322>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce6:	2b09      	cmp	r3, #9
 800cce8:	d016      	beq.n	800cd18 <UART_SetConfig+0x1318>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccee:	2b0a      	cmp	r3, #10
 800ccf0:	d00d      	beq.n	800cd0e <UART_SetConfig+0x130e>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf6:	2b0b      	cmp	r3, #11
 800ccf8:	d104      	bne.n	800cd04 <UART_SetConfig+0x1304>
 800ccfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccfe:	f04f 0400 	mov.w	r4, #0
 800cd02:	e037      	b.n	800cd74 <UART_SetConfig+0x1374>
 800cd04:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cd08:	f04f 0400 	mov.w	r4, #0
 800cd0c:	e032      	b.n	800cd74 <UART_SetConfig+0x1374>
 800cd0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cd12:	f04f 0400 	mov.w	r4, #0
 800cd16:	e02d      	b.n	800cd74 <UART_SetConfig+0x1374>
 800cd18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cd1c:	f04f 0400 	mov.w	r4, #0
 800cd20:	e028      	b.n	800cd74 <UART_SetConfig+0x1374>
 800cd22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cd26:	f04f 0400 	mov.w	r4, #0
 800cd2a:	e023      	b.n	800cd74 <UART_SetConfig+0x1374>
 800cd2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cd30:	f04f 0400 	mov.w	r4, #0
 800cd34:	e01e      	b.n	800cd74 <UART_SetConfig+0x1374>
 800cd36:	4b7e      	ldr	r3, [pc, #504]	; (800cf30 <UART_SetConfig+0x1530>)
 800cd38:	f04f 0400 	mov.w	r4, #0
 800cd3c:	e01a      	b.n	800cd74 <UART_SetConfig+0x1374>
 800cd3e:	4b7d      	ldr	r3, [pc, #500]	; (800cf34 <UART_SetConfig+0x1534>)
 800cd40:	f04f 0400 	mov.w	r4, #0
 800cd44:	e016      	b.n	800cd74 <UART_SetConfig+0x1374>
 800cd46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cd4a:	f04f 0400 	mov.w	r4, #0
 800cd4e:	e011      	b.n	800cd74 <UART_SetConfig+0x1374>
 800cd50:	4b79      	ldr	r3, [pc, #484]	; (800cf38 <UART_SetConfig+0x1538>)
 800cd52:	f04f 0400 	mov.w	r4, #0
 800cd56:	e00d      	b.n	800cd74 <UART_SetConfig+0x1374>
 800cd58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cd5c:	f04f 0400 	mov.w	r4, #0
 800cd60:	e008      	b.n	800cd74 <UART_SetConfig+0x1374>
 800cd62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cd66:	f04f 0400 	mov.w	r4, #0
 800cd6a:	e003      	b.n	800cd74 <UART_SetConfig+0x1374>
 800cd6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cd70:	f04f 0400 	mov.w	r4, #0
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	6852      	ldr	r2, [r2, #4]
 800cd78:	0852      	lsrs	r2, r2, #1
 800cd7a:	4611      	mov	r1, r2
 800cd7c:	f04f 0200 	mov.w	r2, #0
 800cd80:	eb13 0b01 	adds.w	fp, r3, r1
 800cd84:	eb44 0c02 	adc.w	ip, r4, r2
 800cd88:	4658      	mov	r0, fp
 800cd8a:	4661      	mov	r1, ip
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	f04f 0400 	mov.w	r4, #0
 800cd94:	461a      	mov	r2, r3
 800cd96:	4623      	mov	r3, r4
 800cd98:	f7f3 fa9e 	bl	80002d8 <__aeabi_uldivmod>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cda2:	e003      	b.n	800cdac <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800cda4:	2301      	movs	r3, #1
 800cda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800cdaa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cdac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cdb2:	d309      	bcc.n	800cdc8 <UART_SetConfig+0x13c8>
 800cdb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdba:	d205      	bcs.n	800cdc8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdc2:	60da      	str	r2, [r3, #12]
 800cdc4:	f000 bf85 	b.w	800dcd2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdce:	f000 bf80 	b.w	800dcd2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	69db      	ldr	r3, [r3, #28]
 800cdd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdda:	f040 83da 	bne.w	800d592 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800cdde:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cde2:	2b40      	cmp	r3, #64	; 0x40
 800cde4:	f200 83b3 	bhi.w	800d54e <UART_SetConfig+0x1b4e>
 800cde8:	a201      	add	r2, pc, #4	; (adr r2, 800cdf0 <UART_SetConfig+0x13f0>)
 800cdea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdee:	bf00      	nop
 800cdf0:	0800cf3d 	.word	0x0800cf3d
 800cdf4:	0800cff5 	.word	0x0800cff5
 800cdf8:	0800d54f 	.word	0x0800d54f
 800cdfc:	0800d54f 	.word	0x0800d54f
 800ce00:	0800d0ad 	.word	0x0800d0ad
 800ce04:	0800d54f 	.word	0x0800d54f
 800ce08:	0800d54f 	.word	0x0800d54f
 800ce0c:	0800d54f 	.word	0x0800d54f
 800ce10:	0800d169 	.word	0x0800d169
 800ce14:	0800d54f 	.word	0x0800d54f
 800ce18:	0800d54f 	.word	0x0800d54f
 800ce1c:	0800d54f 	.word	0x0800d54f
 800ce20:	0800d54f 	.word	0x0800d54f
 800ce24:	0800d54f 	.word	0x0800d54f
 800ce28:	0800d54f 	.word	0x0800d54f
 800ce2c:	0800d54f 	.word	0x0800d54f
 800ce30:	0800d225 	.word	0x0800d225
 800ce34:	0800d54f 	.word	0x0800d54f
 800ce38:	0800d54f 	.word	0x0800d54f
 800ce3c:	0800d54f 	.word	0x0800d54f
 800ce40:	0800d54f 	.word	0x0800d54f
 800ce44:	0800d54f 	.word	0x0800d54f
 800ce48:	0800d54f 	.word	0x0800d54f
 800ce4c:	0800d54f 	.word	0x0800d54f
 800ce50:	0800d54f 	.word	0x0800d54f
 800ce54:	0800d54f 	.word	0x0800d54f
 800ce58:	0800d54f 	.word	0x0800d54f
 800ce5c:	0800d54f 	.word	0x0800d54f
 800ce60:	0800d54f 	.word	0x0800d54f
 800ce64:	0800d54f 	.word	0x0800d54f
 800ce68:	0800d54f 	.word	0x0800d54f
 800ce6c:	0800d54f 	.word	0x0800d54f
 800ce70:	0800d397 	.word	0x0800d397
 800ce74:	0800d54f 	.word	0x0800d54f
 800ce78:	0800d54f 	.word	0x0800d54f
 800ce7c:	0800d54f 	.word	0x0800d54f
 800ce80:	0800d54f 	.word	0x0800d54f
 800ce84:	0800d54f 	.word	0x0800d54f
 800ce88:	0800d54f 	.word	0x0800d54f
 800ce8c:	0800d54f 	.word	0x0800d54f
 800ce90:	0800d54f 	.word	0x0800d54f
 800ce94:	0800d54f 	.word	0x0800d54f
 800ce98:	0800d54f 	.word	0x0800d54f
 800ce9c:	0800d54f 	.word	0x0800d54f
 800cea0:	0800d54f 	.word	0x0800d54f
 800cea4:	0800d54f 	.word	0x0800d54f
 800cea8:	0800d54f 	.word	0x0800d54f
 800ceac:	0800d54f 	.word	0x0800d54f
 800ceb0:	0800d54f 	.word	0x0800d54f
 800ceb4:	0800d54f 	.word	0x0800d54f
 800ceb8:	0800d54f 	.word	0x0800d54f
 800cebc:	0800d54f 	.word	0x0800d54f
 800cec0:	0800d54f 	.word	0x0800d54f
 800cec4:	0800d54f 	.word	0x0800d54f
 800cec8:	0800d54f 	.word	0x0800d54f
 800cecc:	0800d54f 	.word	0x0800d54f
 800ced0:	0800d54f 	.word	0x0800d54f
 800ced4:	0800d54f 	.word	0x0800d54f
 800ced8:	0800d54f 	.word	0x0800d54f
 800cedc:	0800d54f 	.word	0x0800d54f
 800cee0:	0800d54f 	.word	0x0800d54f
 800cee4:	0800d54f 	.word	0x0800d54f
 800cee8:	0800d54f 	.word	0x0800d54f
 800ceec:	0800d54f 	.word	0x0800d54f
 800cef0:	0800d48d 	.word	0x0800d48d
 800cef4:	f3af 8000 	nop.w
 800cef8:	05161500 	.word	0x05161500
 800cefc:	00000000 	.word	0x00000000
 800cf00:	0a2c2a00 	.word	0x0a2c2a00
 800cf04:	00000000 	.word	0x00000000
 800cf08:	003d0900 	.word	0x003d0900
 800cf0c:	3d090000 	.word	0x3d090000
 800cf10:	007a1200 	.word	0x007a1200
 800cf14:	00f42400 	.word	0x00f42400
 800cf18:	01e84800 	.word	0x01e84800
 800cf1c:	03d09000 	.word	0x03d09000
 800cf20:	061a8000 	.word	0x061a8000
 800cf24:	07a12000 	.word	0x07a12000
 800cf28:	0f424000 	.word	0x0f424000
 800cf2c:	1e848000 	.word	0x1e848000
 800cf30:	000aaa00 	.word	0x000aaa00
 800cf34:	000ccc00 	.word	0x000ccc00
 800cf38:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf3c:	f7fa fffa 	bl	8007f34 <HAL_RCC_GetPCLK1Freq>
 800cf40:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d044      	beq.n	800cfd4 <UART_SetConfig+0x15d4>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	d03e      	beq.n	800cfd0 <UART_SetConfig+0x15d0>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf56:	2b02      	cmp	r3, #2
 800cf58:	d038      	beq.n	800cfcc <UART_SetConfig+0x15cc>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf5e:	2b03      	cmp	r3, #3
 800cf60:	d032      	beq.n	800cfc8 <UART_SetConfig+0x15c8>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf66:	2b04      	cmp	r3, #4
 800cf68:	d02c      	beq.n	800cfc4 <UART_SetConfig+0x15c4>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6e:	2b05      	cmp	r3, #5
 800cf70:	d026      	beq.n	800cfc0 <UART_SetConfig+0x15c0>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf76:	2b06      	cmp	r3, #6
 800cf78:	d020      	beq.n	800cfbc <UART_SetConfig+0x15bc>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf7e:	2b07      	cmp	r3, #7
 800cf80:	d01a      	beq.n	800cfb8 <UART_SetConfig+0x15b8>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf86:	2b08      	cmp	r3, #8
 800cf88:	d014      	beq.n	800cfb4 <UART_SetConfig+0x15b4>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8e:	2b09      	cmp	r3, #9
 800cf90:	d00e      	beq.n	800cfb0 <UART_SetConfig+0x15b0>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf96:	2b0a      	cmp	r3, #10
 800cf98:	d008      	beq.n	800cfac <UART_SetConfig+0x15ac>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf9e:	2b0b      	cmp	r3, #11
 800cfa0:	d102      	bne.n	800cfa8 <UART_SetConfig+0x15a8>
 800cfa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfa6:	e016      	b.n	800cfd6 <UART_SetConfig+0x15d6>
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	e014      	b.n	800cfd6 <UART_SetConfig+0x15d6>
 800cfac:	2380      	movs	r3, #128	; 0x80
 800cfae:	e012      	b.n	800cfd6 <UART_SetConfig+0x15d6>
 800cfb0:	2340      	movs	r3, #64	; 0x40
 800cfb2:	e010      	b.n	800cfd6 <UART_SetConfig+0x15d6>
 800cfb4:	2320      	movs	r3, #32
 800cfb6:	e00e      	b.n	800cfd6 <UART_SetConfig+0x15d6>
 800cfb8:	2310      	movs	r3, #16
 800cfba:	e00c      	b.n	800cfd6 <UART_SetConfig+0x15d6>
 800cfbc:	230c      	movs	r3, #12
 800cfbe:	e00a      	b.n	800cfd6 <UART_SetConfig+0x15d6>
 800cfc0:	230a      	movs	r3, #10
 800cfc2:	e008      	b.n	800cfd6 <UART_SetConfig+0x15d6>
 800cfc4:	2308      	movs	r3, #8
 800cfc6:	e006      	b.n	800cfd6 <UART_SetConfig+0x15d6>
 800cfc8:	2306      	movs	r3, #6
 800cfca:	e004      	b.n	800cfd6 <UART_SetConfig+0x15d6>
 800cfcc:	2304      	movs	r3, #4
 800cfce:	e002      	b.n	800cfd6 <UART_SetConfig+0x15d6>
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	e000      	b.n	800cfd6 <UART_SetConfig+0x15d6>
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfdc:	005a      	lsls	r2, r3, #1
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	085b      	lsrs	r3, r3, #1
 800cfe4:	441a      	add	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cff2:	e2b0      	b.n	800d556 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cff4:	f7fa ffb4 	bl	8007f60 <HAL_RCC_GetPCLK2Freq>
 800cff8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d044      	beq.n	800d08c <UART_SetConfig+0x168c>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d006:	2b01      	cmp	r3, #1
 800d008:	d03e      	beq.n	800d088 <UART_SetConfig+0x1688>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00e:	2b02      	cmp	r3, #2
 800d010:	d038      	beq.n	800d084 <UART_SetConfig+0x1684>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d016:	2b03      	cmp	r3, #3
 800d018:	d032      	beq.n	800d080 <UART_SetConfig+0x1680>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01e:	2b04      	cmp	r3, #4
 800d020:	d02c      	beq.n	800d07c <UART_SetConfig+0x167c>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d026:	2b05      	cmp	r3, #5
 800d028:	d026      	beq.n	800d078 <UART_SetConfig+0x1678>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02e:	2b06      	cmp	r3, #6
 800d030:	d020      	beq.n	800d074 <UART_SetConfig+0x1674>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d036:	2b07      	cmp	r3, #7
 800d038:	d01a      	beq.n	800d070 <UART_SetConfig+0x1670>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03e:	2b08      	cmp	r3, #8
 800d040:	d014      	beq.n	800d06c <UART_SetConfig+0x166c>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d046:	2b09      	cmp	r3, #9
 800d048:	d00e      	beq.n	800d068 <UART_SetConfig+0x1668>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04e:	2b0a      	cmp	r3, #10
 800d050:	d008      	beq.n	800d064 <UART_SetConfig+0x1664>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d056:	2b0b      	cmp	r3, #11
 800d058:	d102      	bne.n	800d060 <UART_SetConfig+0x1660>
 800d05a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d05e:	e016      	b.n	800d08e <UART_SetConfig+0x168e>
 800d060:	2301      	movs	r3, #1
 800d062:	e014      	b.n	800d08e <UART_SetConfig+0x168e>
 800d064:	2380      	movs	r3, #128	; 0x80
 800d066:	e012      	b.n	800d08e <UART_SetConfig+0x168e>
 800d068:	2340      	movs	r3, #64	; 0x40
 800d06a:	e010      	b.n	800d08e <UART_SetConfig+0x168e>
 800d06c:	2320      	movs	r3, #32
 800d06e:	e00e      	b.n	800d08e <UART_SetConfig+0x168e>
 800d070:	2310      	movs	r3, #16
 800d072:	e00c      	b.n	800d08e <UART_SetConfig+0x168e>
 800d074:	230c      	movs	r3, #12
 800d076:	e00a      	b.n	800d08e <UART_SetConfig+0x168e>
 800d078:	230a      	movs	r3, #10
 800d07a:	e008      	b.n	800d08e <UART_SetConfig+0x168e>
 800d07c:	2308      	movs	r3, #8
 800d07e:	e006      	b.n	800d08e <UART_SetConfig+0x168e>
 800d080:	2306      	movs	r3, #6
 800d082:	e004      	b.n	800d08e <UART_SetConfig+0x168e>
 800d084:	2304      	movs	r3, #4
 800d086:	e002      	b.n	800d08e <UART_SetConfig+0x168e>
 800d088:	2302      	movs	r3, #2
 800d08a:	e000      	b.n	800d08e <UART_SetConfig+0x168e>
 800d08c:	2301      	movs	r3, #1
 800d08e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d090:	fbb2 f3f3 	udiv	r3, r2, r3
 800d094:	005a      	lsls	r2, r3, #1
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	085b      	lsrs	r3, r3, #1
 800d09c:	441a      	add	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d0aa:	e254      	b.n	800d556 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0ac:	f107 0318 	add.w	r3, r7, #24
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7fc f8d7 	bl	8009264 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0b6:	69fa      	ldr	r2, [r7, #28]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d044      	beq.n	800d14a <UART_SetConfig+0x174a>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d03e      	beq.n	800d146 <UART_SetConfig+0x1746>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0cc:	2b02      	cmp	r3, #2
 800d0ce:	d038      	beq.n	800d142 <UART_SetConfig+0x1742>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d4:	2b03      	cmp	r3, #3
 800d0d6:	d032      	beq.n	800d13e <UART_SetConfig+0x173e>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0dc:	2b04      	cmp	r3, #4
 800d0de:	d02c      	beq.n	800d13a <UART_SetConfig+0x173a>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e4:	2b05      	cmp	r3, #5
 800d0e6:	d026      	beq.n	800d136 <UART_SetConfig+0x1736>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ec:	2b06      	cmp	r3, #6
 800d0ee:	d020      	beq.n	800d132 <UART_SetConfig+0x1732>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f4:	2b07      	cmp	r3, #7
 800d0f6:	d01a      	beq.n	800d12e <UART_SetConfig+0x172e>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fc:	2b08      	cmp	r3, #8
 800d0fe:	d014      	beq.n	800d12a <UART_SetConfig+0x172a>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d104:	2b09      	cmp	r3, #9
 800d106:	d00e      	beq.n	800d126 <UART_SetConfig+0x1726>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10c:	2b0a      	cmp	r3, #10
 800d10e:	d008      	beq.n	800d122 <UART_SetConfig+0x1722>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d114:	2b0b      	cmp	r3, #11
 800d116:	d102      	bne.n	800d11e <UART_SetConfig+0x171e>
 800d118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d11c:	e016      	b.n	800d14c <UART_SetConfig+0x174c>
 800d11e:	2301      	movs	r3, #1
 800d120:	e014      	b.n	800d14c <UART_SetConfig+0x174c>
 800d122:	2380      	movs	r3, #128	; 0x80
 800d124:	e012      	b.n	800d14c <UART_SetConfig+0x174c>
 800d126:	2340      	movs	r3, #64	; 0x40
 800d128:	e010      	b.n	800d14c <UART_SetConfig+0x174c>
 800d12a:	2320      	movs	r3, #32
 800d12c:	e00e      	b.n	800d14c <UART_SetConfig+0x174c>
 800d12e:	2310      	movs	r3, #16
 800d130:	e00c      	b.n	800d14c <UART_SetConfig+0x174c>
 800d132:	230c      	movs	r3, #12
 800d134:	e00a      	b.n	800d14c <UART_SetConfig+0x174c>
 800d136:	230a      	movs	r3, #10
 800d138:	e008      	b.n	800d14c <UART_SetConfig+0x174c>
 800d13a:	2308      	movs	r3, #8
 800d13c:	e006      	b.n	800d14c <UART_SetConfig+0x174c>
 800d13e:	2306      	movs	r3, #6
 800d140:	e004      	b.n	800d14c <UART_SetConfig+0x174c>
 800d142:	2304      	movs	r3, #4
 800d144:	e002      	b.n	800d14c <UART_SetConfig+0x174c>
 800d146:	2302      	movs	r3, #2
 800d148:	e000      	b.n	800d14c <UART_SetConfig+0x174c>
 800d14a:	2301      	movs	r3, #1
 800d14c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d150:	005a      	lsls	r2, r3, #1
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	085b      	lsrs	r3, r3, #1
 800d158:	441a      	add	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d162:	b29b      	uxth	r3, r3
 800d164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d166:	e1f6      	b.n	800d556 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d168:	f107 030c 	add.w	r3, r7, #12
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7fc f9c5 	bl	80094fc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d172:	693a      	ldr	r2, [r7, #16]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d044      	beq.n	800d206 <UART_SetConfig+0x1806>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d180:	2b01      	cmp	r3, #1
 800d182:	d03e      	beq.n	800d202 <UART_SetConfig+0x1802>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d038      	beq.n	800d1fe <UART_SetConfig+0x17fe>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d190:	2b03      	cmp	r3, #3
 800d192:	d032      	beq.n	800d1fa <UART_SetConfig+0x17fa>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d198:	2b04      	cmp	r3, #4
 800d19a:	d02c      	beq.n	800d1f6 <UART_SetConfig+0x17f6>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a0:	2b05      	cmp	r3, #5
 800d1a2:	d026      	beq.n	800d1f2 <UART_SetConfig+0x17f2>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a8:	2b06      	cmp	r3, #6
 800d1aa:	d020      	beq.n	800d1ee <UART_SetConfig+0x17ee>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b0:	2b07      	cmp	r3, #7
 800d1b2:	d01a      	beq.n	800d1ea <UART_SetConfig+0x17ea>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b8:	2b08      	cmp	r3, #8
 800d1ba:	d014      	beq.n	800d1e6 <UART_SetConfig+0x17e6>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c0:	2b09      	cmp	r3, #9
 800d1c2:	d00e      	beq.n	800d1e2 <UART_SetConfig+0x17e2>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c8:	2b0a      	cmp	r3, #10
 800d1ca:	d008      	beq.n	800d1de <UART_SetConfig+0x17de>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d0:	2b0b      	cmp	r3, #11
 800d1d2:	d102      	bne.n	800d1da <UART_SetConfig+0x17da>
 800d1d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1d8:	e016      	b.n	800d208 <UART_SetConfig+0x1808>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e014      	b.n	800d208 <UART_SetConfig+0x1808>
 800d1de:	2380      	movs	r3, #128	; 0x80
 800d1e0:	e012      	b.n	800d208 <UART_SetConfig+0x1808>
 800d1e2:	2340      	movs	r3, #64	; 0x40
 800d1e4:	e010      	b.n	800d208 <UART_SetConfig+0x1808>
 800d1e6:	2320      	movs	r3, #32
 800d1e8:	e00e      	b.n	800d208 <UART_SetConfig+0x1808>
 800d1ea:	2310      	movs	r3, #16
 800d1ec:	e00c      	b.n	800d208 <UART_SetConfig+0x1808>
 800d1ee:	230c      	movs	r3, #12
 800d1f0:	e00a      	b.n	800d208 <UART_SetConfig+0x1808>
 800d1f2:	230a      	movs	r3, #10
 800d1f4:	e008      	b.n	800d208 <UART_SetConfig+0x1808>
 800d1f6:	2308      	movs	r3, #8
 800d1f8:	e006      	b.n	800d208 <UART_SetConfig+0x1808>
 800d1fa:	2306      	movs	r3, #6
 800d1fc:	e004      	b.n	800d208 <UART_SetConfig+0x1808>
 800d1fe:	2304      	movs	r3, #4
 800d200:	e002      	b.n	800d208 <UART_SetConfig+0x1808>
 800d202:	2302      	movs	r3, #2
 800d204:	e000      	b.n	800d208 <UART_SetConfig+0x1808>
 800d206:	2301      	movs	r3, #1
 800d208:	fbb2 f3f3 	udiv	r3, r2, r3
 800d20c:	005a      	lsls	r2, r3, #1
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	085b      	lsrs	r3, r3, #1
 800d214:	441a      	add	r2, r3
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d21e:	b29b      	uxth	r3, r3
 800d220:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d222:	e198      	b.n	800d556 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d224:	4b87      	ldr	r3, [pc, #540]	; (800d444 <UART_SetConfig+0x1a44>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f003 0320 	and.w	r3, r3, #32
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d05e      	beq.n	800d2ee <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d230:	4b84      	ldr	r3, [pc, #528]	; (800d444 <UART_SetConfig+0x1a44>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	08db      	lsrs	r3, r3, #3
 800d236:	f003 0303 	and.w	r3, r3, #3
 800d23a:	4a83      	ldr	r2, [pc, #524]	; (800d448 <UART_SetConfig+0x1a48>)
 800d23c:	40da      	lsrs	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d242:	2b00      	cmp	r3, #0
 800d244:	d044      	beq.n	800d2d0 <UART_SetConfig+0x18d0>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d03e      	beq.n	800d2cc <UART_SetConfig+0x18cc>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d252:	2b02      	cmp	r3, #2
 800d254:	d038      	beq.n	800d2c8 <UART_SetConfig+0x18c8>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25a:	2b03      	cmp	r3, #3
 800d25c:	d032      	beq.n	800d2c4 <UART_SetConfig+0x18c4>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d262:	2b04      	cmp	r3, #4
 800d264:	d02c      	beq.n	800d2c0 <UART_SetConfig+0x18c0>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d26a:	2b05      	cmp	r3, #5
 800d26c:	d026      	beq.n	800d2bc <UART_SetConfig+0x18bc>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d272:	2b06      	cmp	r3, #6
 800d274:	d020      	beq.n	800d2b8 <UART_SetConfig+0x18b8>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27a:	2b07      	cmp	r3, #7
 800d27c:	d01a      	beq.n	800d2b4 <UART_SetConfig+0x18b4>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d282:	2b08      	cmp	r3, #8
 800d284:	d014      	beq.n	800d2b0 <UART_SetConfig+0x18b0>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d28a:	2b09      	cmp	r3, #9
 800d28c:	d00e      	beq.n	800d2ac <UART_SetConfig+0x18ac>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d292:	2b0a      	cmp	r3, #10
 800d294:	d008      	beq.n	800d2a8 <UART_SetConfig+0x18a8>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29a:	2b0b      	cmp	r3, #11
 800d29c:	d102      	bne.n	800d2a4 <UART_SetConfig+0x18a4>
 800d29e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2a2:	e016      	b.n	800d2d2 <UART_SetConfig+0x18d2>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e014      	b.n	800d2d2 <UART_SetConfig+0x18d2>
 800d2a8:	2380      	movs	r3, #128	; 0x80
 800d2aa:	e012      	b.n	800d2d2 <UART_SetConfig+0x18d2>
 800d2ac:	2340      	movs	r3, #64	; 0x40
 800d2ae:	e010      	b.n	800d2d2 <UART_SetConfig+0x18d2>
 800d2b0:	2320      	movs	r3, #32
 800d2b2:	e00e      	b.n	800d2d2 <UART_SetConfig+0x18d2>
 800d2b4:	2310      	movs	r3, #16
 800d2b6:	e00c      	b.n	800d2d2 <UART_SetConfig+0x18d2>
 800d2b8:	230c      	movs	r3, #12
 800d2ba:	e00a      	b.n	800d2d2 <UART_SetConfig+0x18d2>
 800d2bc:	230a      	movs	r3, #10
 800d2be:	e008      	b.n	800d2d2 <UART_SetConfig+0x18d2>
 800d2c0:	2308      	movs	r3, #8
 800d2c2:	e006      	b.n	800d2d2 <UART_SetConfig+0x18d2>
 800d2c4:	2306      	movs	r3, #6
 800d2c6:	e004      	b.n	800d2d2 <UART_SetConfig+0x18d2>
 800d2c8:	2304      	movs	r3, #4
 800d2ca:	e002      	b.n	800d2d2 <UART_SetConfig+0x18d2>
 800d2cc:	2302      	movs	r3, #2
 800d2ce:	e000      	b.n	800d2d2 <UART_SetConfig+0x18d2>
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2d6:	005a      	lsls	r2, r3, #1
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	085b      	lsrs	r3, r3, #1
 800d2de:	441a      	add	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800d2ec:	e133      	b.n	800d556 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d043      	beq.n	800d37e <UART_SetConfig+0x197e>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d03d      	beq.n	800d37a <UART_SetConfig+0x197a>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d302:	2b02      	cmp	r3, #2
 800d304:	d037      	beq.n	800d376 <UART_SetConfig+0x1976>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	d031      	beq.n	800d372 <UART_SetConfig+0x1972>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d312:	2b04      	cmp	r3, #4
 800d314:	d02b      	beq.n	800d36e <UART_SetConfig+0x196e>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d31a:	2b05      	cmp	r3, #5
 800d31c:	d025      	beq.n	800d36a <UART_SetConfig+0x196a>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d322:	2b06      	cmp	r3, #6
 800d324:	d01f      	beq.n	800d366 <UART_SetConfig+0x1966>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32a:	2b07      	cmp	r3, #7
 800d32c:	d019      	beq.n	800d362 <UART_SetConfig+0x1962>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d332:	2b08      	cmp	r3, #8
 800d334:	d013      	beq.n	800d35e <UART_SetConfig+0x195e>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33a:	2b09      	cmp	r3, #9
 800d33c:	d00d      	beq.n	800d35a <UART_SetConfig+0x195a>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d342:	2b0a      	cmp	r3, #10
 800d344:	d007      	beq.n	800d356 <UART_SetConfig+0x1956>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34a:	2b0b      	cmp	r3, #11
 800d34c:	d101      	bne.n	800d352 <UART_SetConfig+0x1952>
 800d34e:	4b3f      	ldr	r3, [pc, #252]	; (800d44c <UART_SetConfig+0x1a4c>)
 800d350:	e016      	b.n	800d380 <UART_SetConfig+0x1980>
 800d352:	4b3f      	ldr	r3, [pc, #252]	; (800d450 <UART_SetConfig+0x1a50>)
 800d354:	e014      	b.n	800d380 <UART_SetConfig+0x1980>
 800d356:	4b3f      	ldr	r3, [pc, #252]	; (800d454 <UART_SetConfig+0x1a54>)
 800d358:	e012      	b.n	800d380 <UART_SetConfig+0x1980>
 800d35a:	4b3f      	ldr	r3, [pc, #252]	; (800d458 <UART_SetConfig+0x1a58>)
 800d35c:	e010      	b.n	800d380 <UART_SetConfig+0x1980>
 800d35e:	4b3f      	ldr	r3, [pc, #252]	; (800d45c <UART_SetConfig+0x1a5c>)
 800d360:	e00e      	b.n	800d380 <UART_SetConfig+0x1980>
 800d362:	4b3f      	ldr	r3, [pc, #252]	; (800d460 <UART_SetConfig+0x1a60>)
 800d364:	e00c      	b.n	800d380 <UART_SetConfig+0x1980>
 800d366:	4b3f      	ldr	r3, [pc, #252]	; (800d464 <UART_SetConfig+0x1a64>)
 800d368:	e00a      	b.n	800d380 <UART_SetConfig+0x1980>
 800d36a:	4b3f      	ldr	r3, [pc, #252]	; (800d468 <UART_SetConfig+0x1a68>)
 800d36c:	e008      	b.n	800d380 <UART_SetConfig+0x1980>
 800d36e:	4b3f      	ldr	r3, [pc, #252]	; (800d46c <UART_SetConfig+0x1a6c>)
 800d370:	e006      	b.n	800d380 <UART_SetConfig+0x1980>
 800d372:	4b3f      	ldr	r3, [pc, #252]	; (800d470 <UART_SetConfig+0x1a70>)
 800d374:	e004      	b.n	800d380 <UART_SetConfig+0x1980>
 800d376:	4b3f      	ldr	r3, [pc, #252]	; (800d474 <UART_SetConfig+0x1a74>)
 800d378:	e002      	b.n	800d380 <UART_SetConfig+0x1980>
 800d37a:	4b33      	ldr	r3, [pc, #204]	; (800d448 <UART_SetConfig+0x1a48>)
 800d37c:	e000      	b.n	800d380 <UART_SetConfig+0x1980>
 800d37e:	4b34      	ldr	r3, [pc, #208]	; (800d450 <UART_SetConfig+0x1a50>)
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	6852      	ldr	r2, [r2, #4]
 800d384:	0852      	lsrs	r2, r2, #1
 800d386:	441a      	add	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d390:	b29b      	uxth	r3, r3
 800d392:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d394:	e0df      	b.n	800d556 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d045      	beq.n	800d42a <UART_SetConfig+0x1a2a>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d03f      	beq.n	800d426 <UART_SetConfig+0x1a26>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3aa:	2b02      	cmp	r3, #2
 800d3ac:	d039      	beq.n	800d422 <UART_SetConfig+0x1a22>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b2:	2b03      	cmp	r3, #3
 800d3b4:	d033      	beq.n	800d41e <UART_SetConfig+0x1a1e>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ba:	2b04      	cmp	r3, #4
 800d3bc:	d02d      	beq.n	800d41a <UART_SetConfig+0x1a1a>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c2:	2b05      	cmp	r3, #5
 800d3c4:	d027      	beq.n	800d416 <UART_SetConfig+0x1a16>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ca:	2b06      	cmp	r3, #6
 800d3cc:	d021      	beq.n	800d412 <UART_SetConfig+0x1a12>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d2:	2b07      	cmp	r3, #7
 800d3d4:	d01b      	beq.n	800d40e <UART_SetConfig+0x1a0e>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3da:	2b08      	cmp	r3, #8
 800d3dc:	d015      	beq.n	800d40a <UART_SetConfig+0x1a0a>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e2:	2b09      	cmp	r3, #9
 800d3e4:	d00f      	beq.n	800d406 <UART_SetConfig+0x1a06>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ea:	2b0a      	cmp	r3, #10
 800d3ec:	d008      	beq.n	800d400 <UART_SetConfig+0x1a00>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f2:	2b0b      	cmp	r3, #11
 800d3f4:	d102      	bne.n	800d3fc <UART_SetConfig+0x19fc>
 800d3f6:	f647 2312 	movw	r3, #31250	; 0x7a12
 800d3fa:	e017      	b.n	800d42c <UART_SetConfig+0x1a2c>
 800d3fc:	4b18      	ldr	r3, [pc, #96]	; (800d460 <UART_SetConfig+0x1a60>)
 800d3fe:	e015      	b.n	800d42c <UART_SetConfig+0x1a2c>
 800d400:	f24f 4324 	movw	r3, #62500	; 0xf424
 800d404:	e012      	b.n	800d42c <UART_SetConfig+0x1a2c>
 800d406:	4b1c      	ldr	r3, [pc, #112]	; (800d478 <UART_SetConfig+0x1a78>)
 800d408:	e010      	b.n	800d42c <UART_SetConfig+0x1a2c>
 800d40a:	4b1c      	ldr	r3, [pc, #112]	; (800d47c <UART_SetConfig+0x1a7c>)
 800d40c:	e00e      	b.n	800d42c <UART_SetConfig+0x1a2c>
 800d40e:	4b0f      	ldr	r3, [pc, #60]	; (800d44c <UART_SetConfig+0x1a4c>)
 800d410:	e00c      	b.n	800d42c <UART_SetConfig+0x1a2c>
 800d412:	4b1b      	ldr	r3, [pc, #108]	; (800d480 <UART_SetConfig+0x1a80>)
 800d414:	e00a      	b.n	800d42c <UART_SetConfig+0x1a2c>
 800d416:	4b1b      	ldr	r3, [pc, #108]	; (800d484 <UART_SetConfig+0x1a84>)
 800d418:	e008      	b.n	800d42c <UART_SetConfig+0x1a2c>
 800d41a:	4b0e      	ldr	r3, [pc, #56]	; (800d454 <UART_SetConfig+0x1a54>)
 800d41c:	e006      	b.n	800d42c <UART_SetConfig+0x1a2c>
 800d41e:	4b1a      	ldr	r3, [pc, #104]	; (800d488 <UART_SetConfig+0x1a88>)
 800d420:	e004      	b.n	800d42c <UART_SetConfig+0x1a2c>
 800d422:	4b0d      	ldr	r3, [pc, #52]	; (800d458 <UART_SetConfig+0x1a58>)
 800d424:	e002      	b.n	800d42c <UART_SetConfig+0x1a2c>
 800d426:	4b0d      	ldr	r3, [pc, #52]	; (800d45c <UART_SetConfig+0x1a5c>)
 800d428:	e000      	b.n	800d42c <UART_SetConfig+0x1a2c>
 800d42a:	4b0d      	ldr	r3, [pc, #52]	; (800d460 <UART_SetConfig+0x1a60>)
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	6852      	ldr	r2, [r2, #4]
 800d430:	0852      	lsrs	r2, r2, #1
 800d432:	441a      	add	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	fbb2 f3f3 	udiv	r3, r2, r3
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d440:	e089      	b.n	800d556 <UART_SetConfig+0x1b56>
 800d442:	bf00      	nop
 800d444:	58024400 	.word	0x58024400
 800d448:	03d09000 	.word	0x03d09000
 800d44c:	0007a120 	.word	0x0007a120
 800d450:	07a12000 	.word	0x07a12000
 800d454:	000f4240 	.word	0x000f4240
 800d458:	001e8480 	.word	0x001e8480
 800d45c:	003d0900 	.word	0x003d0900
 800d460:	007a1200 	.word	0x007a1200
 800d464:	00a2c2aa 	.word	0x00a2c2aa
 800d468:	00c35000 	.word	0x00c35000
 800d46c:	00f42400 	.word	0x00f42400
 800d470:	01458554 	.word	0x01458554
 800d474:	01e84800 	.word	0x01e84800
 800d478:	0001e848 	.word	0x0001e848
 800d47c:	0003d090 	.word	0x0003d090
 800d480:	000a2c2a 	.word	0x000a2c2a
 800d484:	000c3500 	.word	0x000c3500
 800d488:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d490:	2b00      	cmp	r3, #0
 800d492:	d04f      	beq.n	800d534 <UART_SetConfig+0x1b34>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d048      	beq.n	800d52e <UART_SetConfig+0x1b2e>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a0:	2b02      	cmp	r3, #2
 800d4a2:	d041      	beq.n	800d528 <UART_SetConfig+0x1b28>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a8:	2b03      	cmp	r3, #3
 800d4aa:	d03a      	beq.n	800d522 <UART_SetConfig+0x1b22>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b0:	2b04      	cmp	r3, #4
 800d4b2:	d033      	beq.n	800d51c <UART_SetConfig+0x1b1c>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b8:	2b05      	cmp	r3, #5
 800d4ba:	d02c      	beq.n	800d516 <UART_SetConfig+0x1b16>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c0:	2b06      	cmp	r3, #6
 800d4c2:	d025      	beq.n	800d510 <UART_SetConfig+0x1b10>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c8:	2b07      	cmp	r3, #7
 800d4ca:	d01e      	beq.n	800d50a <UART_SetConfig+0x1b0a>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d0:	2b08      	cmp	r3, #8
 800d4d2:	d017      	beq.n	800d504 <UART_SetConfig+0x1b04>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d8:	2b09      	cmp	r3, #9
 800d4da:	d010      	beq.n	800d4fe <UART_SetConfig+0x1afe>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e0:	2b0a      	cmp	r3, #10
 800d4e2:	d009      	beq.n	800d4f8 <UART_SetConfig+0x1af8>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e8:	2b0b      	cmp	r3, #11
 800d4ea:	d102      	bne.n	800d4f2 <UART_SetConfig+0x1af2>
 800d4ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4f0:	e022      	b.n	800d538 <UART_SetConfig+0x1b38>
 800d4f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d4f6:	e01f      	b.n	800d538 <UART_SetConfig+0x1b38>
 800d4f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4fc:	e01c      	b.n	800d538 <UART_SetConfig+0x1b38>
 800d4fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d502:	e019      	b.n	800d538 <UART_SetConfig+0x1b38>
 800d504:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d508:	e016      	b.n	800d538 <UART_SetConfig+0x1b38>
 800d50a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d50e:	e013      	b.n	800d538 <UART_SetConfig+0x1b38>
 800d510:	f241 5354 	movw	r3, #5460	; 0x1554
 800d514:	e010      	b.n	800d538 <UART_SetConfig+0x1b38>
 800d516:	f641 1398 	movw	r3, #6552	; 0x1998
 800d51a:	e00d      	b.n	800d538 <UART_SetConfig+0x1b38>
 800d51c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d520:	e00a      	b.n	800d538 <UART_SetConfig+0x1b38>
 800d522:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800d526:	e007      	b.n	800d538 <UART_SetConfig+0x1b38>
 800d528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d52c:	e004      	b.n	800d538 <UART_SetConfig+0x1b38>
 800d52e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d532:	e001      	b.n	800d538 <UART_SetConfig+0x1b38>
 800d534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	6852      	ldr	r2, [r2, #4]
 800d53c:	0852      	lsrs	r2, r2, #1
 800d53e:	441a      	add	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	fbb2 f3f3 	udiv	r3, r2, r3
 800d548:	b29b      	uxth	r3, r3
 800d54a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d54c:	e003      	b.n	800d556 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800d54e:	2301      	movs	r3, #1
 800d550:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800d554:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d558:	2b0f      	cmp	r3, #15
 800d55a:	d916      	bls.n	800d58a <UART_SetConfig+0x1b8a>
 800d55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d55e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d562:	d212      	bcs.n	800d58a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d566:	b29b      	uxth	r3, r3
 800d568:	f023 030f 	bic.w	r3, r3, #15
 800d56c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d570:	085b      	lsrs	r3, r3, #1
 800d572:	b29b      	uxth	r3, r3
 800d574:	f003 0307 	and.w	r3, r3, #7
 800d578:	b29a      	uxth	r2, r3
 800d57a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d57c:	4313      	orrs	r3, r2
 800d57e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d586:	60da      	str	r2, [r3, #12]
 800d588:	e3a3      	b.n	800dcd2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800d58a:	2301      	movs	r3, #1
 800d58c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d590:	e39f      	b.n	800dcd2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800d592:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d596:	2b40      	cmp	r3, #64	; 0x40
 800d598:	f200 8388 	bhi.w	800dcac <UART_SetConfig+0x22ac>
 800d59c:	a201      	add	r2, pc, #4	; (adr r2, 800d5a4 <UART_SetConfig+0x1ba4>)
 800d59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a2:	bf00      	nop
 800d5a4:	0800d6a9 	.word	0x0800d6a9
 800d5a8:	0800d75f 	.word	0x0800d75f
 800d5ac:	0800dcad 	.word	0x0800dcad
 800d5b0:	0800dcad 	.word	0x0800dcad
 800d5b4:	0800d815 	.word	0x0800d815
 800d5b8:	0800dcad 	.word	0x0800dcad
 800d5bc:	0800dcad 	.word	0x0800dcad
 800d5c0:	0800dcad 	.word	0x0800dcad
 800d5c4:	0800d8cf 	.word	0x0800d8cf
 800d5c8:	0800dcad 	.word	0x0800dcad
 800d5cc:	0800dcad 	.word	0x0800dcad
 800d5d0:	0800dcad 	.word	0x0800dcad
 800d5d4:	0800dcad 	.word	0x0800dcad
 800d5d8:	0800dcad 	.word	0x0800dcad
 800d5dc:	0800dcad 	.word	0x0800dcad
 800d5e0:	0800dcad 	.word	0x0800dcad
 800d5e4:	0800d989 	.word	0x0800d989
 800d5e8:	0800dcad 	.word	0x0800dcad
 800d5ec:	0800dcad 	.word	0x0800dcad
 800d5f0:	0800dcad 	.word	0x0800dcad
 800d5f4:	0800dcad 	.word	0x0800dcad
 800d5f8:	0800dcad 	.word	0x0800dcad
 800d5fc:	0800dcad 	.word	0x0800dcad
 800d600:	0800dcad 	.word	0x0800dcad
 800d604:	0800dcad 	.word	0x0800dcad
 800d608:	0800dcad 	.word	0x0800dcad
 800d60c:	0800dcad 	.word	0x0800dcad
 800d610:	0800dcad 	.word	0x0800dcad
 800d614:	0800dcad 	.word	0x0800dcad
 800d618:	0800dcad 	.word	0x0800dcad
 800d61c:	0800dcad 	.word	0x0800dcad
 800d620:	0800dcad 	.word	0x0800dcad
 800d624:	0800daf9 	.word	0x0800daf9
 800d628:	0800dcad 	.word	0x0800dcad
 800d62c:	0800dcad 	.word	0x0800dcad
 800d630:	0800dcad 	.word	0x0800dcad
 800d634:	0800dcad 	.word	0x0800dcad
 800d638:	0800dcad 	.word	0x0800dcad
 800d63c:	0800dcad 	.word	0x0800dcad
 800d640:	0800dcad 	.word	0x0800dcad
 800d644:	0800dcad 	.word	0x0800dcad
 800d648:	0800dcad 	.word	0x0800dcad
 800d64c:	0800dcad 	.word	0x0800dcad
 800d650:	0800dcad 	.word	0x0800dcad
 800d654:	0800dcad 	.word	0x0800dcad
 800d658:	0800dcad 	.word	0x0800dcad
 800d65c:	0800dcad 	.word	0x0800dcad
 800d660:	0800dcad 	.word	0x0800dcad
 800d664:	0800dcad 	.word	0x0800dcad
 800d668:	0800dcad 	.word	0x0800dcad
 800d66c:	0800dcad 	.word	0x0800dcad
 800d670:	0800dcad 	.word	0x0800dcad
 800d674:	0800dcad 	.word	0x0800dcad
 800d678:	0800dcad 	.word	0x0800dcad
 800d67c:	0800dcad 	.word	0x0800dcad
 800d680:	0800dcad 	.word	0x0800dcad
 800d684:	0800dcad 	.word	0x0800dcad
 800d688:	0800dcad 	.word	0x0800dcad
 800d68c:	0800dcad 	.word	0x0800dcad
 800d690:	0800dcad 	.word	0x0800dcad
 800d694:	0800dcad 	.word	0x0800dcad
 800d698:	0800dcad 	.word	0x0800dcad
 800d69c:	0800dcad 	.word	0x0800dcad
 800d6a0:	0800dcad 	.word	0x0800dcad
 800d6a4:	0800dbed 	.word	0x0800dbed
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6a8:	f7fa fc44 	bl	8007f34 <HAL_RCC_GetPCLK1Freq>
 800d6ac:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d044      	beq.n	800d740 <UART_SetConfig+0x1d40>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d03e      	beq.n	800d73c <UART_SetConfig+0x1d3c>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c2:	2b02      	cmp	r3, #2
 800d6c4:	d038      	beq.n	800d738 <UART_SetConfig+0x1d38>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ca:	2b03      	cmp	r3, #3
 800d6cc:	d032      	beq.n	800d734 <UART_SetConfig+0x1d34>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d2:	2b04      	cmp	r3, #4
 800d6d4:	d02c      	beq.n	800d730 <UART_SetConfig+0x1d30>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6da:	2b05      	cmp	r3, #5
 800d6dc:	d026      	beq.n	800d72c <UART_SetConfig+0x1d2c>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e2:	2b06      	cmp	r3, #6
 800d6e4:	d020      	beq.n	800d728 <UART_SetConfig+0x1d28>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ea:	2b07      	cmp	r3, #7
 800d6ec:	d01a      	beq.n	800d724 <UART_SetConfig+0x1d24>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f2:	2b08      	cmp	r3, #8
 800d6f4:	d014      	beq.n	800d720 <UART_SetConfig+0x1d20>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fa:	2b09      	cmp	r3, #9
 800d6fc:	d00e      	beq.n	800d71c <UART_SetConfig+0x1d1c>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d702:	2b0a      	cmp	r3, #10
 800d704:	d008      	beq.n	800d718 <UART_SetConfig+0x1d18>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70a:	2b0b      	cmp	r3, #11
 800d70c:	d102      	bne.n	800d714 <UART_SetConfig+0x1d14>
 800d70e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d712:	e016      	b.n	800d742 <UART_SetConfig+0x1d42>
 800d714:	2301      	movs	r3, #1
 800d716:	e014      	b.n	800d742 <UART_SetConfig+0x1d42>
 800d718:	2380      	movs	r3, #128	; 0x80
 800d71a:	e012      	b.n	800d742 <UART_SetConfig+0x1d42>
 800d71c:	2340      	movs	r3, #64	; 0x40
 800d71e:	e010      	b.n	800d742 <UART_SetConfig+0x1d42>
 800d720:	2320      	movs	r3, #32
 800d722:	e00e      	b.n	800d742 <UART_SetConfig+0x1d42>
 800d724:	2310      	movs	r3, #16
 800d726:	e00c      	b.n	800d742 <UART_SetConfig+0x1d42>
 800d728:	230c      	movs	r3, #12
 800d72a:	e00a      	b.n	800d742 <UART_SetConfig+0x1d42>
 800d72c:	230a      	movs	r3, #10
 800d72e:	e008      	b.n	800d742 <UART_SetConfig+0x1d42>
 800d730:	2308      	movs	r3, #8
 800d732:	e006      	b.n	800d742 <UART_SetConfig+0x1d42>
 800d734:	2306      	movs	r3, #6
 800d736:	e004      	b.n	800d742 <UART_SetConfig+0x1d42>
 800d738:	2304      	movs	r3, #4
 800d73a:	e002      	b.n	800d742 <UART_SetConfig+0x1d42>
 800d73c:	2302      	movs	r3, #2
 800d73e:	e000      	b.n	800d742 <UART_SetConfig+0x1d42>
 800d740:	2301      	movs	r3, #1
 800d742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d744:	fbb2 f2f3 	udiv	r2, r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	085b      	lsrs	r3, r3, #1
 800d74e:	441a      	add	r2, r3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	fbb2 f3f3 	udiv	r3, r2, r3
 800d758:	b29b      	uxth	r3, r3
 800d75a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d75c:	e2aa      	b.n	800dcb4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d75e:	f7fa fbff 	bl	8007f60 <HAL_RCC_GetPCLK2Freq>
 800d762:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d044      	beq.n	800d7f6 <UART_SetConfig+0x1df6>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d770:	2b01      	cmp	r3, #1
 800d772:	d03e      	beq.n	800d7f2 <UART_SetConfig+0x1df2>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d778:	2b02      	cmp	r3, #2
 800d77a:	d038      	beq.n	800d7ee <UART_SetConfig+0x1dee>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d780:	2b03      	cmp	r3, #3
 800d782:	d032      	beq.n	800d7ea <UART_SetConfig+0x1dea>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d788:	2b04      	cmp	r3, #4
 800d78a:	d02c      	beq.n	800d7e6 <UART_SetConfig+0x1de6>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d790:	2b05      	cmp	r3, #5
 800d792:	d026      	beq.n	800d7e2 <UART_SetConfig+0x1de2>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d798:	2b06      	cmp	r3, #6
 800d79a:	d020      	beq.n	800d7de <UART_SetConfig+0x1dde>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a0:	2b07      	cmp	r3, #7
 800d7a2:	d01a      	beq.n	800d7da <UART_SetConfig+0x1dda>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a8:	2b08      	cmp	r3, #8
 800d7aa:	d014      	beq.n	800d7d6 <UART_SetConfig+0x1dd6>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b0:	2b09      	cmp	r3, #9
 800d7b2:	d00e      	beq.n	800d7d2 <UART_SetConfig+0x1dd2>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b8:	2b0a      	cmp	r3, #10
 800d7ba:	d008      	beq.n	800d7ce <UART_SetConfig+0x1dce>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c0:	2b0b      	cmp	r3, #11
 800d7c2:	d102      	bne.n	800d7ca <UART_SetConfig+0x1dca>
 800d7c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d7c8:	e016      	b.n	800d7f8 <UART_SetConfig+0x1df8>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e014      	b.n	800d7f8 <UART_SetConfig+0x1df8>
 800d7ce:	2380      	movs	r3, #128	; 0x80
 800d7d0:	e012      	b.n	800d7f8 <UART_SetConfig+0x1df8>
 800d7d2:	2340      	movs	r3, #64	; 0x40
 800d7d4:	e010      	b.n	800d7f8 <UART_SetConfig+0x1df8>
 800d7d6:	2320      	movs	r3, #32
 800d7d8:	e00e      	b.n	800d7f8 <UART_SetConfig+0x1df8>
 800d7da:	2310      	movs	r3, #16
 800d7dc:	e00c      	b.n	800d7f8 <UART_SetConfig+0x1df8>
 800d7de:	230c      	movs	r3, #12
 800d7e0:	e00a      	b.n	800d7f8 <UART_SetConfig+0x1df8>
 800d7e2:	230a      	movs	r3, #10
 800d7e4:	e008      	b.n	800d7f8 <UART_SetConfig+0x1df8>
 800d7e6:	2308      	movs	r3, #8
 800d7e8:	e006      	b.n	800d7f8 <UART_SetConfig+0x1df8>
 800d7ea:	2306      	movs	r3, #6
 800d7ec:	e004      	b.n	800d7f8 <UART_SetConfig+0x1df8>
 800d7ee:	2304      	movs	r3, #4
 800d7f0:	e002      	b.n	800d7f8 <UART_SetConfig+0x1df8>
 800d7f2:	2302      	movs	r3, #2
 800d7f4:	e000      	b.n	800d7f8 <UART_SetConfig+0x1df8>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7fa:	fbb2 f2f3 	udiv	r2, r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	085b      	lsrs	r3, r3, #1
 800d804:	441a      	add	r2, r3
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d80e:	b29b      	uxth	r3, r3
 800d810:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d812:	e24f      	b.n	800dcb4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d814:	f107 0318 	add.w	r3, r7, #24
 800d818:	4618      	mov	r0, r3
 800d81a:	f7fb fd23 	bl	8009264 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d81e:	69fa      	ldr	r2, [r7, #28]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d824:	2b00      	cmp	r3, #0
 800d826:	d044      	beq.n	800d8b2 <UART_SetConfig+0x1eb2>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d03e      	beq.n	800d8ae <UART_SetConfig+0x1eae>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d834:	2b02      	cmp	r3, #2
 800d836:	d038      	beq.n	800d8aa <UART_SetConfig+0x1eaa>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83c:	2b03      	cmp	r3, #3
 800d83e:	d032      	beq.n	800d8a6 <UART_SetConfig+0x1ea6>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d844:	2b04      	cmp	r3, #4
 800d846:	d02c      	beq.n	800d8a2 <UART_SetConfig+0x1ea2>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84c:	2b05      	cmp	r3, #5
 800d84e:	d026      	beq.n	800d89e <UART_SetConfig+0x1e9e>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d854:	2b06      	cmp	r3, #6
 800d856:	d020      	beq.n	800d89a <UART_SetConfig+0x1e9a>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d85c:	2b07      	cmp	r3, #7
 800d85e:	d01a      	beq.n	800d896 <UART_SetConfig+0x1e96>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d864:	2b08      	cmp	r3, #8
 800d866:	d014      	beq.n	800d892 <UART_SetConfig+0x1e92>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86c:	2b09      	cmp	r3, #9
 800d86e:	d00e      	beq.n	800d88e <UART_SetConfig+0x1e8e>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d874:	2b0a      	cmp	r3, #10
 800d876:	d008      	beq.n	800d88a <UART_SetConfig+0x1e8a>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87c:	2b0b      	cmp	r3, #11
 800d87e:	d102      	bne.n	800d886 <UART_SetConfig+0x1e86>
 800d880:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d884:	e016      	b.n	800d8b4 <UART_SetConfig+0x1eb4>
 800d886:	2301      	movs	r3, #1
 800d888:	e014      	b.n	800d8b4 <UART_SetConfig+0x1eb4>
 800d88a:	2380      	movs	r3, #128	; 0x80
 800d88c:	e012      	b.n	800d8b4 <UART_SetConfig+0x1eb4>
 800d88e:	2340      	movs	r3, #64	; 0x40
 800d890:	e010      	b.n	800d8b4 <UART_SetConfig+0x1eb4>
 800d892:	2320      	movs	r3, #32
 800d894:	e00e      	b.n	800d8b4 <UART_SetConfig+0x1eb4>
 800d896:	2310      	movs	r3, #16
 800d898:	e00c      	b.n	800d8b4 <UART_SetConfig+0x1eb4>
 800d89a:	230c      	movs	r3, #12
 800d89c:	e00a      	b.n	800d8b4 <UART_SetConfig+0x1eb4>
 800d89e:	230a      	movs	r3, #10
 800d8a0:	e008      	b.n	800d8b4 <UART_SetConfig+0x1eb4>
 800d8a2:	2308      	movs	r3, #8
 800d8a4:	e006      	b.n	800d8b4 <UART_SetConfig+0x1eb4>
 800d8a6:	2306      	movs	r3, #6
 800d8a8:	e004      	b.n	800d8b4 <UART_SetConfig+0x1eb4>
 800d8aa:	2304      	movs	r3, #4
 800d8ac:	e002      	b.n	800d8b4 <UART_SetConfig+0x1eb4>
 800d8ae:	2302      	movs	r3, #2
 800d8b0:	e000      	b.n	800d8b4 <UART_SetConfig+0x1eb4>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	085b      	lsrs	r3, r3, #1
 800d8be:	441a      	add	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d8cc:	e1f2      	b.n	800dcb4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8ce:	f107 030c 	add.w	r3, r7, #12
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7fb fe12 	bl	80094fc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8d8:	693a      	ldr	r2, [r7, #16]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d044      	beq.n	800d96c <UART_SetConfig+0x1f6c>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d03e      	beq.n	800d968 <UART_SetConfig+0x1f68>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ee:	2b02      	cmp	r3, #2
 800d8f0:	d038      	beq.n	800d964 <UART_SetConfig+0x1f64>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f6:	2b03      	cmp	r3, #3
 800d8f8:	d032      	beq.n	800d960 <UART_SetConfig+0x1f60>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8fe:	2b04      	cmp	r3, #4
 800d900:	d02c      	beq.n	800d95c <UART_SetConfig+0x1f5c>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d906:	2b05      	cmp	r3, #5
 800d908:	d026      	beq.n	800d958 <UART_SetConfig+0x1f58>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90e:	2b06      	cmp	r3, #6
 800d910:	d020      	beq.n	800d954 <UART_SetConfig+0x1f54>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d916:	2b07      	cmp	r3, #7
 800d918:	d01a      	beq.n	800d950 <UART_SetConfig+0x1f50>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91e:	2b08      	cmp	r3, #8
 800d920:	d014      	beq.n	800d94c <UART_SetConfig+0x1f4c>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d926:	2b09      	cmp	r3, #9
 800d928:	d00e      	beq.n	800d948 <UART_SetConfig+0x1f48>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d92e:	2b0a      	cmp	r3, #10
 800d930:	d008      	beq.n	800d944 <UART_SetConfig+0x1f44>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d936:	2b0b      	cmp	r3, #11
 800d938:	d102      	bne.n	800d940 <UART_SetConfig+0x1f40>
 800d93a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d93e:	e016      	b.n	800d96e <UART_SetConfig+0x1f6e>
 800d940:	2301      	movs	r3, #1
 800d942:	e014      	b.n	800d96e <UART_SetConfig+0x1f6e>
 800d944:	2380      	movs	r3, #128	; 0x80
 800d946:	e012      	b.n	800d96e <UART_SetConfig+0x1f6e>
 800d948:	2340      	movs	r3, #64	; 0x40
 800d94a:	e010      	b.n	800d96e <UART_SetConfig+0x1f6e>
 800d94c:	2320      	movs	r3, #32
 800d94e:	e00e      	b.n	800d96e <UART_SetConfig+0x1f6e>
 800d950:	2310      	movs	r3, #16
 800d952:	e00c      	b.n	800d96e <UART_SetConfig+0x1f6e>
 800d954:	230c      	movs	r3, #12
 800d956:	e00a      	b.n	800d96e <UART_SetConfig+0x1f6e>
 800d958:	230a      	movs	r3, #10
 800d95a:	e008      	b.n	800d96e <UART_SetConfig+0x1f6e>
 800d95c:	2308      	movs	r3, #8
 800d95e:	e006      	b.n	800d96e <UART_SetConfig+0x1f6e>
 800d960:	2306      	movs	r3, #6
 800d962:	e004      	b.n	800d96e <UART_SetConfig+0x1f6e>
 800d964:	2304      	movs	r3, #4
 800d966:	e002      	b.n	800d96e <UART_SetConfig+0x1f6e>
 800d968:	2302      	movs	r3, #2
 800d96a:	e000      	b.n	800d96e <UART_SetConfig+0x1f6e>
 800d96c:	2301      	movs	r3, #1
 800d96e:	fbb2 f2f3 	udiv	r2, r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	085b      	lsrs	r3, r3, #1
 800d978:	441a      	add	r2, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d982:	b29b      	uxth	r3, r3
 800d984:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d986:	e195      	b.n	800dcb4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d988:	4b87      	ldr	r3, [pc, #540]	; (800dba8 <UART_SetConfig+0x21a8>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f003 0320 	and.w	r3, r3, #32
 800d990:	2b00      	cmp	r3, #0
 800d992:	d05d      	beq.n	800da50 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d994:	4b84      	ldr	r3, [pc, #528]	; (800dba8 <UART_SetConfig+0x21a8>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	08db      	lsrs	r3, r3, #3
 800d99a:	f003 0303 	and.w	r3, r3, #3
 800d99e:	4a83      	ldr	r2, [pc, #524]	; (800dbac <UART_SetConfig+0x21ac>)
 800d9a0:	40da      	lsrs	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d044      	beq.n	800da34 <UART_SetConfig+0x2034>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d03e      	beq.n	800da30 <UART_SetConfig+0x2030>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	d038      	beq.n	800da2c <UART_SetConfig+0x202c>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9be:	2b03      	cmp	r3, #3
 800d9c0:	d032      	beq.n	800da28 <UART_SetConfig+0x2028>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c6:	2b04      	cmp	r3, #4
 800d9c8:	d02c      	beq.n	800da24 <UART_SetConfig+0x2024>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ce:	2b05      	cmp	r3, #5
 800d9d0:	d026      	beq.n	800da20 <UART_SetConfig+0x2020>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d6:	2b06      	cmp	r3, #6
 800d9d8:	d020      	beq.n	800da1c <UART_SetConfig+0x201c>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9de:	2b07      	cmp	r3, #7
 800d9e0:	d01a      	beq.n	800da18 <UART_SetConfig+0x2018>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e6:	2b08      	cmp	r3, #8
 800d9e8:	d014      	beq.n	800da14 <UART_SetConfig+0x2014>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ee:	2b09      	cmp	r3, #9
 800d9f0:	d00e      	beq.n	800da10 <UART_SetConfig+0x2010>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f6:	2b0a      	cmp	r3, #10
 800d9f8:	d008      	beq.n	800da0c <UART_SetConfig+0x200c>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9fe:	2b0b      	cmp	r3, #11
 800da00:	d102      	bne.n	800da08 <UART_SetConfig+0x2008>
 800da02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da06:	e016      	b.n	800da36 <UART_SetConfig+0x2036>
 800da08:	2301      	movs	r3, #1
 800da0a:	e014      	b.n	800da36 <UART_SetConfig+0x2036>
 800da0c:	2380      	movs	r3, #128	; 0x80
 800da0e:	e012      	b.n	800da36 <UART_SetConfig+0x2036>
 800da10:	2340      	movs	r3, #64	; 0x40
 800da12:	e010      	b.n	800da36 <UART_SetConfig+0x2036>
 800da14:	2320      	movs	r3, #32
 800da16:	e00e      	b.n	800da36 <UART_SetConfig+0x2036>
 800da18:	2310      	movs	r3, #16
 800da1a:	e00c      	b.n	800da36 <UART_SetConfig+0x2036>
 800da1c:	230c      	movs	r3, #12
 800da1e:	e00a      	b.n	800da36 <UART_SetConfig+0x2036>
 800da20:	230a      	movs	r3, #10
 800da22:	e008      	b.n	800da36 <UART_SetConfig+0x2036>
 800da24:	2308      	movs	r3, #8
 800da26:	e006      	b.n	800da36 <UART_SetConfig+0x2036>
 800da28:	2306      	movs	r3, #6
 800da2a:	e004      	b.n	800da36 <UART_SetConfig+0x2036>
 800da2c:	2304      	movs	r3, #4
 800da2e:	e002      	b.n	800da36 <UART_SetConfig+0x2036>
 800da30:	2302      	movs	r3, #2
 800da32:	e000      	b.n	800da36 <UART_SetConfig+0x2036>
 800da34:	2301      	movs	r3, #1
 800da36:	fbb2 f2f3 	udiv	r2, r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	085b      	lsrs	r3, r3, #1
 800da40:	441a      	add	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	fbb2 f3f3 	udiv	r3, r2, r3
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800da4e:	e131      	b.n	800dcb4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da54:	2b00      	cmp	r3, #0
 800da56:	d043      	beq.n	800dae0 <UART_SetConfig+0x20e0>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	d03d      	beq.n	800dadc <UART_SetConfig+0x20dc>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da64:	2b02      	cmp	r3, #2
 800da66:	d037      	beq.n	800dad8 <UART_SetConfig+0x20d8>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6c:	2b03      	cmp	r3, #3
 800da6e:	d031      	beq.n	800dad4 <UART_SetConfig+0x20d4>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da74:	2b04      	cmp	r3, #4
 800da76:	d02b      	beq.n	800dad0 <UART_SetConfig+0x20d0>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7c:	2b05      	cmp	r3, #5
 800da7e:	d025      	beq.n	800dacc <UART_SetConfig+0x20cc>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da84:	2b06      	cmp	r3, #6
 800da86:	d01f      	beq.n	800dac8 <UART_SetConfig+0x20c8>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8c:	2b07      	cmp	r3, #7
 800da8e:	d019      	beq.n	800dac4 <UART_SetConfig+0x20c4>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da94:	2b08      	cmp	r3, #8
 800da96:	d013      	beq.n	800dac0 <UART_SetConfig+0x20c0>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9c:	2b09      	cmp	r3, #9
 800da9e:	d00d      	beq.n	800dabc <UART_SetConfig+0x20bc>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa4:	2b0a      	cmp	r3, #10
 800daa6:	d007      	beq.n	800dab8 <UART_SetConfig+0x20b8>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daac:	2b0b      	cmp	r3, #11
 800daae:	d101      	bne.n	800dab4 <UART_SetConfig+0x20b4>
 800dab0:	4b3f      	ldr	r3, [pc, #252]	; (800dbb0 <UART_SetConfig+0x21b0>)
 800dab2:	e016      	b.n	800dae2 <UART_SetConfig+0x20e2>
 800dab4:	4b3d      	ldr	r3, [pc, #244]	; (800dbac <UART_SetConfig+0x21ac>)
 800dab6:	e014      	b.n	800dae2 <UART_SetConfig+0x20e2>
 800dab8:	4b3e      	ldr	r3, [pc, #248]	; (800dbb4 <UART_SetConfig+0x21b4>)
 800daba:	e012      	b.n	800dae2 <UART_SetConfig+0x20e2>
 800dabc:	4b3e      	ldr	r3, [pc, #248]	; (800dbb8 <UART_SetConfig+0x21b8>)
 800dabe:	e010      	b.n	800dae2 <UART_SetConfig+0x20e2>
 800dac0:	4b3e      	ldr	r3, [pc, #248]	; (800dbbc <UART_SetConfig+0x21bc>)
 800dac2:	e00e      	b.n	800dae2 <UART_SetConfig+0x20e2>
 800dac4:	4b3e      	ldr	r3, [pc, #248]	; (800dbc0 <UART_SetConfig+0x21c0>)
 800dac6:	e00c      	b.n	800dae2 <UART_SetConfig+0x20e2>
 800dac8:	4b3e      	ldr	r3, [pc, #248]	; (800dbc4 <UART_SetConfig+0x21c4>)
 800daca:	e00a      	b.n	800dae2 <UART_SetConfig+0x20e2>
 800dacc:	4b3e      	ldr	r3, [pc, #248]	; (800dbc8 <UART_SetConfig+0x21c8>)
 800dace:	e008      	b.n	800dae2 <UART_SetConfig+0x20e2>
 800dad0:	4b3e      	ldr	r3, [pc, #248]	; (800dbcc <UART_SetConfig+0x21cc>)
 800dad2:	e006      	b.n	800dae2 <UART_SetConfig+0x20e2>
 800dad4:	4b3e      	ldr	r3, [pc, #248]	; (800dbd0 <UART_SetConfig+0x21d0>)
 800dad6:	e004      	b.n	800dae2 <UART_SetConfig+0x20e2>
 800dad8:	4b3e      	ldr	r3, [pc, #248]	; (800dbd4 <UART_SetConfig+0x21d4>)
 800dada:	e002      	b.n	800dae2 <UART_SetConfig+0x20e2>
 800dadc:	4b3e      	ldr	r3, [pc, #248]	; (800dbd8 <UART_SetConfig+0x21d8>)
 800dade:	e000      	b.n	800dae2 <UART_SetConfig+0x20e2>
 800dae0:	4b32      	ldr	r3, [pc, #200]	; (800dbac <UART_SetConfig+0x21ac>)
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	6852      	ldr	r2, [r2, #4]
 800dae6:	0852      	lsrs	r2, r2, #1
 800dae8:	441a      	add	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	fbb2 f3f3 	udiv	r3, r2, r3
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800daf6:	e0dd      	b.n	800dcb4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d046      	beq.n	800db8e <UART_SetConfig+0x218e>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db04:	2b01      	cmp	r3, #1
 800db06:	d040      	beq.n	800db8a <UART_SetConfig+0x218a>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0c:	2b02      	cmp	r3, #2
 800db0e:	d03a      	beq.n	800db86 <UART_SetConfig+0x2186>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db14:	2b03      	cmp	r3, #3
 800db16:	d034      	beq.n	800db82 <UART_SetConfig+0x2182>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db1c:	2b04      	cmp	r3, #4
 800db1e:	d02e      	beq.n	800db7e <UART_SetConfig+0x217e>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db24:	2b05      	cmp	r3, #5
 800db26:	d028      	beq.n	800db7a <UART_SetConfig+0x217a>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db2c:	2b06      	cmp	r3, #6
 800db2e:	d022      	beq.n	800db76 <UART_SetConfig+0x2176>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db34:	2b07      	cmp	r3, #7
 800db36:	d01c      	beq.n	800db72 <UART_SetConfig+0x2172>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3c:	2b08      	cmp	r3, #8
 800db3e:	d016      	beq.n	800db6e <UART_SetConfig+0x216e>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db44:	2b09      	cmp	r3, #9
 800db46:	d00f      	beq.n	800db68 <UART_SetConfig+0x2168>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db4c:	2b0a      	cmp	r3, #10
 800db4e:	d008      	beq.n	800db62 <UART_SetConfig+0x2162>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db54:	2b0b      	cmp	r3, #11
 800db56:	d102      	bne.n	800db5e <UART_SetConfig+0x215e>
 800db58:	f643 5309 	movw	r3, #15625	; 0x3d09
 800db5c:	e018      	b.n	800db90 <UART_SetConfig+0x2190>
 800db5e:	4b18      	ldr	r3, [pc, #96]	; (800dbc0 <UART_SetConfig+0x21c0>)
 800db60:	e016      	b.n	800db90 <UART_SetConfig+0x2190>
 800db62:	f647 2312 	movw	r3, #31250	; 0x7a12
 800db66:	e013      	b.n	800db90 <UART_SetConfig+0x2190>
 800db68:	f24f 4324 	movw	r3, #62500	; 0xf424
 800db6c:	e010      	b.n	800db90 <UART_SetConfig+0x2190>
 800db6e:	4b1b      	ldr	r3, [pc, #108]	; (800dbdc <UART_SetConfig+0x21dc>)
 800db70:	e00e      	b.n	800db90 <UART_SetConfig+0x2190>
 800db72:	4b0f      	ldr	r3, [pc, #60]	; (800dbb0 <UART_SetConfig+0x21b0>)
 800db74:	e00c      	b.n	800db90 <UART_SetConfig+0x2190>
 800db76:	4b1a      	ldr	r3, [pc, #104]	; (800dbe0 <UART_SetConfig+0x21e0>)
 800db78:	e00a      	b.n	800db90 <UART_SetConfig+0x2190>
 800db7a:	4b1a      	ldr	r3, [pc, #104]	; (800dbe4 <UART_SetConfig+0x21e4>)
 800db7c:	e008      	b.n	800db90 <UART_SetConfig+0x2190>
 800db7e:	4b0d      	ldr	r3, [pc, #52]	; (800dbb4 <UART_SetConfig+0x21b4>)
 800db80:	e006      	b.n	800db90 <UART_SetConfig+0x2190>
 800db82:	4b19      	ldr	r3, [pc, #100]	; (800dbe8 <UART_SetConfig+0x21e8>)
 800db84:	e004      	b.n	800db90 <UART_SetConfig+0x2190>
 800db86:	4b0c      	ldr	r3, [pc, #48]	; (800dbb8 <UART_SetConfig+0x21b8>)
 800db88:	e002      	b.n	800db90 <UART_SetConfig+0x2190>
 800db8a:	4b0c      	ldr	r3, [pc, #48]	; (800dbbc <UART_SetConfig+0x21bc>)
 800db8c:	e000      	b.n	800db90 <UART_SetConfig+0x2190>
 800db8e:	4b0c      	ldr	r3, [pc, #48]	; (800dbc0 <UART_SetConfig+0x21c0>)
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	6852      	ldr	r2, [r2, #4]
 800db94:	0852      	lsrs	r2, r2, #1
 800db96:	441a      	add	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dba4:	e086      	b.n	800dcb4 <UART_SetConfig+0x22b4>
 800dba6:	bf00      	nop
 800dba8:	58024400 	.word	0x58024400
 800dbac:	03d09000 	.word	0x03d09000
 800dbb0:	0003d090 	.word	0x0003d090
 800dbb4:	0007a120 	.word	0x0007a120
 800dbb8:	000f4240 	.word	0x000f4240
 800dbbc:	001e8480 	.word	0x001e8480
 800dbc0:	003d0900 	.word	0x003d0900
 800dbc4:	00516155 	.word	0x00516155
 800dbc8:	0061a800 	.word	0x0061a800
 800dbcc:	007a1200 	.word	0x007a1200
 800dbd0:	00a2c2aa 	.word	0x00a2c2aa
 800dbd4:	00f42400 	.word	0x00f42400
 800dbd8:	01e84800 	.word	0x01e84800
 800dbdc:	0001e848 	.word	0x0001e848
 800dbe0:	00051615 	.word	0x00051615
 800dbe4:	00061a80 	.word	0x00061a80
 800dbe8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d04e      	beq.n	800dc92 <UART_SetConfig+0x2292>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d047      	beq.n	800dc8c <UART_SetConfig+0x228c>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc00:	2b02      	cmp	r3, #2
 800dc02:	d040      	beq.n	800dc86 <UART_SetConfig+0x2286>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc08:	2b03      	cmp	r3, #3
 800dc0a:	d039      	beq.n	800dc80 <UART_SetConfig+0x2280>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc10:	2b04      	cmp	r3, #4
 800dc12:	d032      	beq.n	800dc7a <UART_SetConfig+0x227a>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc18:	2b05      	cmp	r3, #5
 800dc1a:	d02b      	beq.n	800dc74 <UART_SetConfig+0x2274>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc20:	2b06      	cmp	r3, #6
 800dc22:	d024      	beq.n	800dc6e <UART_SetConfig+0x226e>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc28:	2b07      	cmp	r3, #7
 800dc2a:	d01d      	beq.n	800dc68 <UART_SetConfig+0x2268>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc30:	2b08      	cmp	r3, #8
 800dc32:	d016      	beq.n	800dc62 <UART_SetConfig+0x2262>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc38:	2b09      	cmp	r3, #9
 800dc3a:	d00f      	beq.n	800dc5c <UART_SetConfig+0x225c>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc40:	2b0a      	cmp	r3, #10
 800dc42:	d008      	beq.n	800dc56 <UART_SetConfig+0x2256>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc48:	2b0b      	cmp	r3, #11
 800dc4a:	d101      	bne.n	800dc50 <UART_SetConfig+0x2250>
 800dc4c:	2380      	movs	r3, #128	; 0x80
 800dc4e:	e022      	b.n	800dc96 <UART_SetConfig+0x2296>
 800dc50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc54:	e01f      	b.n	800dc96 <UART_SetConfig+0x2296>
 800dc56:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc5a:	e01c      	b.n	800dc96 <UART_SetConfig+0x2296>
 800dc5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc60:	e019      	b.n	800dc96 <UART_SetConfig+0x2296>
 800dc62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc66:	e016      	b.n	800dc96 <UART_SetConfig+0x2296>
 800dc68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc6c:	e013      	b.n	800dc96 <UART_SetConfig+0x2296>
 800dc6e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800dc72:	e010      	b.n	800dc96 <UART_SetConfig+0x2296>
 800dc74:	f640 43cc 	movw	r3, #3276	; 0xccc
 800dc78:	e00d      	b.n	800dc96 <UART_SetConfig+0x2296>
 800dc7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc7e:	e00a      	b.n	800dc96 <UART_SetConfig+0x2296>
 800dc80:	f241 5355 	movw	r3, #5461	; 0x1555
 800dc84:	e007      	b.n	800dc96 <UART_SetConfig+0x2296>
 800dc86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc8a:	e004      	b.n	800dc96 <UART_SetConfig+0x2296>
 800dc8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dc90:	e001      	b.n	800dc96 <UART_SetConfig+0x2296>
 800dc92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	6852      	ldr	r2, [r2, #4]
 800dc9a:	0852      	lsrs	r2, r2, #1
 800dc9c:	441a      	add	r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dcaa:	e003      	b.n	800dcb4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800dcac:	2301      	movs	r3, #1
 800dcae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800dcb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dcb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb6:	2b0f      	cmp	r3, #15
 800dcb8:	d908      	bls.n	800dccc <UART_SetConfig+0x22cc>
 800dcba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcc0:	d204      	bcs.n	800dccc <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcc8:	60da      	str	r2, [r3, #12]
 800dcca:	e002      	b.n	800dcd2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800dccc:	2301      	movs	r3, #1
 800dcce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2201      	movs	r2, #1
 800dcde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800dcee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3740      	adds	r7, #64	; 0x40
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800dcfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd08:	f003 0301 	and.w	r3, r3, #1
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00a      	beq.n	800dd26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	430a      	orrs	r2, r1
 800dd24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd2a:	f003 0302 	and.w	r3, r3, #2
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00a      	beq.n	800dd48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	430a      	orrs	r2, r1
 800dd46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd4c:	f003 0304 	and.w	r3, r3, #4
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d00a      	beq.n	800dd6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	430a      	orrs	r2, r1
 800dd68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd6e:	f003 0308 	and.w	r3, r3, #8
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d00a      	beq.n	800dd8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	430a      	orrs	r2, r1
 800dd8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd90:	f003 0310 	and.w	r3, r3, #16
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00a      	beq.n	800ddae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	430a      	orrs	r2, r1
 800ddac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb2:	f003 0320 	and.w	r3, r3, #32
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00a      	beq.n	800ddd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	430a      	orrs	r2, r1
 800ddce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d01a      	beq.n	800de12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	430a      	orrs	r2, r1
 800ddf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddfa:	d10a      	bne.n	800de12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	430a      	orrs	r2, r1
 800de10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00a      	beq.n	800de34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	430a      	orrs	r2, r1
 800de32:	605a      	str	r2, [r3, #4]
  }
}
 800de34:	bf00      	nop
 800de36:	370c      	adds	r7, #12
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af02      	add	r7, sp, #8
 800de46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800de50:	f7f3 fd38 	bl	80018c4 <HAL_GetTick>
 800de54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f003 0308 	and.w	r3, r3, #8
 800de60:	2b08      	cmp	r3, #8
 800de62:	d10e      	bne.n	800de82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 f82c 	bl	800ded0 <UART_WaitOnFlagUntilTimeout>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d001      	beq.n	800de82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de7e:	2303      	movs	r3, #3
 800de80:	e022      	b.n	800dec8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f003 0304 	and.w	r3, r3, #4
 800de8c:	2b04      	cmp	r3, #4
 800de8e:	d10e      	bne.n	800deae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2200      	movs	r2, #0
 800de9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 f816 	bl	800ded0 <UART_WaitOnFlagUntilTimeout>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d001      	beq.n	800deae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800deaa:	2303      	movs	r3, #3
 800deac:	e00c      	b.n	800dec8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2220      	movs	r2, #32
 800deb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2220      	movs	r2, #32
 800deba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2200      	movs	r2, #0
 800dec2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800dec6:	2300      	movs	r3, #0
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	603b      	str	r3, [r7, #0]
 800dedc:	4613      	mov	r3, r2
 800dede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dee0:	e062      	b.n	800dfa8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dee8:	d05e      	beq.n	800dfa8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800deea:	f7f3 fceb 	bl	80018c4 <HAL_GetTick>
 800deee:	4602      	mov	r2, r0
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	1ad3      	subs	r3, r2, r3
 800def4:	69ba      	ldr	r2, [r7, #24]
 800def6:	429a      	cmp	r2, r3
 800def8:	d302      	bcc.n	800df00 <UART_WaitOnFlagUntilTimeout+0x30>
 800defa:	69bb      	ldr	r3, [r7, #24]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d11d      	bne.n	800df3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800df0e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	689a      	ldr	r2, [r3, #8]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f022 0201 	bic.w	r2, r2, #1
 800df1e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2220      	movs	r2, #32
 800df24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2220      	movs	r2, #32
 800df2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2200      	movs	r2, #0
 800df34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800df38:	2303      	movs	r3, #3
 800df3a:	e045      	b.n	800dfc8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f003 0304 	and.w	r3, r3, #4
 800df46:	2b00      	cmp	r3, #0
 800df48:	d02e      	beq.n	800dfa8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	69db      	ldr	r3, [r3, #28]
 800df50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df58:	d126      	bne.n	800dfa8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df62:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800df72:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	689a      	ldr	r2, [r3, #8]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f022 0201 	bic.w	r2, r2, #1
 800df82:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2220      	movs	r2, #32
 800df88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2220      	movs	r2, #32
 800df90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2220      	movs	r2, #32
 800df98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800dfa4:	2303      	movs	r3, #3
 800dfa6:	e00f      	b.n	800dfc8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	69da      	ldr	r2, [r3, #28]
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	4013      	ands	r3, r2
 800dfb2:	68ba      	ldr	r2, [r7, #8]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	bf0c      	ite	eq
 800dfb8:	2301      	moveq	r3, #1
 800dfba:	2300      	movne	r3, #0
 800dfbc:	b2db      	uxtb	r3, r3
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	79fb      	ldrb	r3, [r7, #7]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d08d      	beq.n	800dee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b085      	sub	sp, #20
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d101      	bne.n	800dfe6 <HAL_UARTEx_DisableFifoMode+0x16>
 800dfe2:	2302      	movs	r3, #2
 800dfe4:	e027      	b.n	800e036 <HAL_UARTEx_DisableFifoMode+0x66>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2201      	movs	r2, #1
 800dfea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2224      	movs	r2, #36	; 0x24
 800dff2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f022 0201 	bic.w	r2, r2, #1
 800e00c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e014:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2220      	movs	r2, #32
 800e028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2200      	movs	r2, #0
 800e030:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e034:	2300      	movs	r3, #0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3714      	adds	r7, #20
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr

0800e042 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b084      	sub	sp, #16
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
 800e04a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e052:	2b01      	cmp	r3, #1
 800e054:	d101      	bne.n	800e05a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e056:	2302      	movs	r3, #2
 800e058:	e02d      	b.n	800e0b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2224      	movs	r2, #36	; 0x24
 800e066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	681a      	ldr	r2, [r3, #0]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f022 0201 	bic.w	r2, r2, #1
 800e080:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	683a      	ldr	r2, [r7, #0]
 800e092:	430a      	orrs	r2, r1
 800e094:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 f850 	bl	800e13c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2220      	movs	r2, #32
 800e0a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b084      	sub	sp, #16
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d101      	bne.n	800e0d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e0d2:	2302      	movs	r3, #2
 800e0d4:	e02d      	b.n	800e132 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2224      	movs	r2, #36	; 0x24
 800e0e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f022 0201 	bic.w	r2, r2, #1
 800e0fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	683a      	ldr	r2, [r7, #0]
 800e10e:	430a      	orrs	r2, r1
 800e110:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f000 f812 	bl	800e13c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	68fa      	ldr	r2, [r7, #12]
 800e11e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2220      	movs	r2, #32
 800e124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e130:	2300      	movs	r3, #0
}
 800e132:	4618      	mov	r0, r3
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
	...

0800e13c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b089      	sub	sp, #36	; 0x24
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800e144:	4a2f      	ldr	r2, [pc, #188]	; (800e204 <UARTEx_SetNbDataToProcess+0xc8>)
 800e146:	f107 0314 	add.w	r3, r7, #20
 800e14a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e14e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800e152:	4a2d      	ldr	r2, [pc, #180]	; (800e208 <UARTEx_SetNbDataToProcess+0xcc>)
 800e154:	f107 030c 	add.w	r3, r7, #12
 800e158:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e15c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e164:	2b00      	cmp	r3, #0
 800e166:	d108      	bne.n	800e17a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2201      	movs	r2, #1
 800e16c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2201      	movs	r2, #1
 800e174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e178:	e03d      	b.n	800e1f6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e17a:	2308      	movs	r3, #8
 800e17c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e17e:	2308      	movs	r3, #8
 800e180:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	0e5b      	lsrs	r3, r3, #25
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	f003 0307 	and.w	r3, r3, #7
 800e190:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	689b      	ldr	r3, [r3, #8]
 800e198:	0f5b      	lsrs	r3, r3, #29
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	f003 0307 	and.w	r3, r3, #7
 800e1a0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800e1a2:	7fbb      	ldrb	r3, [r7, #30]
 800e1a4:	7f3a      	ldrb	r2, [r7, #28]
 800e1a6:	f107 0120 	add.w	r1, r7, #32
 800e1aa:	440a      	add	r2, r1
 800e1ac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e1b0:	fb02 f303 	mul.w	r3, r2, r3
 800e1b4:	7f3a      	ldrb	r2, [r7, #28]
 800e1b6:	f107 0120 	add.w	r1, r7, #32
 800e1ba:	440a      	add	r2, r1
 800e1bc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e1c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800e1cc:	7ffb      	ldrb	r3, [r7, #31]
 800e1ce:	7f7a      	ldrb	r2, [r7, #29]
 800e1d0:	f107 0120 	add.w	r1, r7, #32
 800e1d4:	440a      	add	r2, r1
 800e1d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e1da:	fb02 f303 	mul.w	r3, r2, r3
 800e1de:	7f7a      	ldrb	r2, [r7, #29]
 800e1e0:	f107 0120 	add.w	r1, r7, #32
 800e1e4:	440a      	add	r2, r1
 800e1e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e1ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e1f6:	bf00      	nop
 800e1f8:	3724      	adds	r7, #36	; 0x24
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
 800e202:	bf00      	nop
 800e204:	080142b0 	.word	0x080142b0
 800e208:	080142b8 	.word	0x080142b8

0800e20c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e20c:	b084      	sub	sp, #16
 800e20e:	b480      	push	{r7}
 800e210:	b085      	sub	sp, #20
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
 800e216:	f107 001c 	add.w	r0, r7, #28
 800e21a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e21e:	2300      	movs	r3, #0
 800e220:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e222:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800e224:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e226:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800e22a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800e22e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800e232:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	4313      	orrs	r3, r2
 800e238:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	685a      	ldr	r2, [r3, #4]
 800e23e:	4b07      	ldr	r3, [pc, #28]	; (800e25c <SDMMC_Init+0x50>)
 800e240:	4013      	ands	r3, r2
 800e242:	68fa      	ldr	r2, [r7, #12]
 800e244:	431a      	orrs	r2, r3
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e24a:	2300      	movs	r3, #0
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3714      	adds	r7, #20
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	b004      	add	sp, #16
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop
 800e25c:	ffc02c00 	.word	0xffc02c00

0800e260 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e260:	b480      	push	{r7}
 800e262:	b083      	sub	sp, #12
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e26e:	4618      	mov	r0, r3
 800e270:	370c      	adds	r7, #12
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr

0800e27a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e27a:	b480      	push	{r7}
 800e27c:	b083      	sub	sp, #12
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
 800e282:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e28e:	2300      	movs	r3, #0
}
 800e290:	4618      	mov	r0, r3
 800e292:	370c      	adds	r7, #12
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f043 0203 	orr.w	r2, r3, #3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	370c      	adds	r7, #12
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr

0800e2be <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e2be:	b480      	push	{r7}
 800e2c0:	b083      	sub	sp, #12
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f003 0303 	and.w	r3, r3, #3
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	370c      	adds	r7, #12
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr
	...

0800e2dc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e2fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e300:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e306:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68da      	ldr	r2, [r3, #12]
 800e312:	4b06      	ldr	r3, [pc, #24]	; (800e32c <SDMMC_SendCommand+0x50>)
 800e314:	4013      	ands	r3, r2
 800e316:	68fa      	ldr	r2, [r7, #12]
 800e318:	431a      	orrs	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e31e:	2300      	movs	r3, #0
}
 800e320:	4618      	mov	r0, r3
 800e322:	3714      	adds	r7, #20
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr
 800e32c:	fffee0c0 	.word	0xfffee0c0

0800e330 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	691b      	ldr	r3, [r3, #16]
 800e33c:	b2db      	uxtb	r3, r3
}
 800e33e:	4618      	mov	r0, r3
 800e340:	370c      	adds	r7, #12
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr

0800e34a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e34a:	b480      	push	{r7}
 800e34c:	b085      	sub	sp, #20
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
 800e352:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	3314      	adds	r3, #20
 800e358:	461a      	mov	r2, r3
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	4413      	add	r3, r2
 800e35e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3714      	adds	r7, #20
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e37a:	2300      	movs	r3, #0
 800e37c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	685a      	ldr	r2, [r3, #4]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e396:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e39c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e3a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e3a4:	68fa      	ldr	r2, [r7, #12]
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	431a      	orrs	r2, r3
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e3ba:	2300      	movs	r3, #0

}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3714      	adds	r7, #20
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b088      	sub	sp, #32
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e3d6:	2310      	movs	r3, #16
 800e3d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3ea:	f107 0308 	add.w	r3, r7, #8
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7ff ff73 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e3f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3fa:	2110      	movs	r1, #16
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 faab 	bl	800e958 <SDMMC_GetCmdResp1>
 800e402:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e404:	69fb      	ldr	r3, [r7, #28]
}
 800e406:	4618      	mov	r0, r3
 800e408:	3720      	adds	r7, #32
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}

0800e40e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e40e:	b580      	push	{r7, lr}
 800e410:	b088      	sub	sp, #32
 800e412:	af00      	add	r7, sp, #0
 800e414:	6078      	str	r0, [r7, #4]
 800e416:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e41c:	2311      	movs	r3, #17
 800e41e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e420:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e426:	2300      	movs	r3, #0
 800e428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e42a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e42e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e430:	f107 0308 	add.w	r3, r7, #8
 800e434:	4619      	mov	r1, r3
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f7ff ff50 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e43c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e440:	2111      	movs	r1, #17
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 fa88 	bl	800e958 <SDMMC_GetCmdResp1>
 800e448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e44a:	69fb      	ldr	r3, [r7, #28]
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3720      	adds	r7, #32
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b088      	sub	sp, #32
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e462:	2312      	movs	r3, #18
 800e464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e46a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e46c:	2300      	movs	r3, #0
 800e46e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e474:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e476:	f107 0308 	add.w	r3, r7, #8
 800e47a:	4619      	mov	r1, r3
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f7ff ff2d 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e482:	f241 3288 	movw	r2, #5000	; 0x1388
 800e486:	2112      	movs	r1, #18
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 fa65 	bl	800e958 <SDMMC_GetCmdResp1>
 800e48e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e490:	69fb      	ldr	r3, [r7, #28]
}
 800e492:	4618      	mov	r0, r3
 800e494:	3720      	adds	r7, #32
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b088      	sub	sp, #32
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
 800e4a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e4a8:	2318      	movs	r3, #24
 800e4aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4bc:	f107 0308 	add.w	r3, r7, #8
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f7ff ff0a 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e4c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4cc:	2118      	movs	r1, #24
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 fa42 	bl	800e958 <SDMMC_GetCmdResp1>
 800e4d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4d6:	69fb      	ldr	r3, [r7, #28]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3720      	adds	r7, #32
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b088      	sub	sp, #32
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e4ee:	2319      	movs	r3, #25
 800e4f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e500:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e502:	f107 0308 	add.w	r3, r7, #8
 800e506:	4619      	mov	r1, r3
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f7ff fee7 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e50e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e512:	2119      	movs	r1, #25
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 fa1f 	bl	800e958 <SDMMC_GetCmdResp1>
 800e51a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e51c:	69fb      	ldr	r3, [r7, #28]
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3720      	adds	r7, #32
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
	...

0800e528 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b088      	sub	sp, #32
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e530:	2300      	movs	r3, #0
 800e532:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e534:	230c      	movs	r3, #12
 800e536:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e53c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e53e:	2300      	movs	r3, #0
 800e540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e546:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	68db      	ldr	r3, [r3, #12]
 800e54c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e560:	f107 0308 	add.w	r3, r7, #8
 800e564:	4619      	mov	r1, r3
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7ff feb8 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e56c:	4a0b      	ldr	r2, [pc, #44]	; (800e59c <SDMMC_CmdStopTransfer+0x74>)
 800e56e:	210c      	movs	r1, #12
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f000 f9f1 	bl	800e958 <SDMMC_GetCmdResp1>
 800e576:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e584:	69fb      	ldr	r3, [r7, #28]
 800e586:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e58a:	d101      	bne.n	800e590 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e58c:	2300      	movs	r3, #0
 800e58e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e590:	69fb      	ldr	r3, [r7, #28]
}
 800e592:	4618      	mov	r0, r3
 800e594:	3720      	adds	r7, #32
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	05f5e100 	.word	0x05f5e100

0800e5a0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b08a      	sub	sp, #40	; 0x28
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e5b0:	2307      	movs	r3, #7
 800e5b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5b8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e5c2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5c4:	f107 0310 	add.w	r3, r7, #16
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	68f8      	ldr	r0, [r7, #12]
 800e5cc:	f7ff fe86 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e5d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5d4:	2107      	movs	r1, #7
 800e5d6:	68f8      	ldr	r0, [r7, #12]
 800e5d8:	f000 f9be 	bl	800e958 <SDMMC_GetCmdResp1>
 800e5dc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3728      	adds	r7, #40	; 0x28
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b088      	sub	sp, #32
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e604:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e606:	f107 0308 	add.w	r3, r7, #8
 800e60a:	4619      	mov	r1, r3
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f7ff fe65 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 f976 	bl	800e904 <SDMMC_GetCmdError>
 800e618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e61a:	69fb      	ldr	r3, [r7, #28]
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3720      	adds	r7, #32
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b088      	sub	sp, #32
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e62c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e632:	2308      	movs	r3, #8
 800e634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e63a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e63c:	2300      	movs	r3, #0
 800e63e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e644:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e646:	f107 0308 	add.w	r3, r7, #8
 800e64a:	4619      	mov	r1, r3
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7ff fe45 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 fb6a 	bl	800ed2c <SDMMC_GetCmdResp7>
 800e658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e65a:	69fb      	ldr	r3, [r7, #28]
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3720      	adds	r7, #32
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b088      	sub	sp, #32
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e672:	2337      	movs	r3, #55	; 0x37
 800e674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e67a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e67c:	2300      	movs	r3, #0
 800e67e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e684:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e686:	f107 0308 	add.w	r3, r7, #8
 800e68a:	4619      	mov	r1, r3
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f7ff fe25 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e692:	f241 3288 	movw	r2, #5000	; 0x1388
 800e696:	2137      	movs	r1, #55	; 0x37
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 f95d 	bl	800e958 <SDMMC_GetCmdResp1>
 800e69e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6a0:	69fb      	ldr	r3, [r7, #28]
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3720      	adds	r7, #32
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}

0800e6aa <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b088      	sub	sp, #32
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
 800e6b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e6b8:	2329      	movs	r3, #41	; 0x29
 800e6ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e6ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6cc:	f107 0308 	add.w	r3, r7, #8
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f7ff fe02 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 fa75 	bl	800ebc8 <SDMMC_GetCmdResp3>
 800e6de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6e0:	69fb      	ldr	r3, [r7, #28]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3720      	adds	r7, #32
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b088      	sub	sp, #32
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
 800e6f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e6f8:	2306      	movs	r3, #6
 800e6fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e702:	2300      	movs	r3, #0
 800e704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e70a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e70c:	f107 0308 	add.w	r3, r7, #8
 800e710:	4619      	mov	r1, r3
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7ff fde2 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e718:	f241 3288 	movw	r2, #5000	; 0x1388
 800e71c:	2106      	movs	r1, #6
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 f91a 	bl	800e958 <SDMMC_GetCmdResp1>
 800e724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e726:	69fb      	ldr	r3, [r7, #28]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3720      	adds	r7, #32
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b088      	sub	sp, #32
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e738:	2300      	movs	r3, #0
 800e73a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e73c:	2333      	movs	r3, #51	; 0x33
 800e73e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e740:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e746:	2300      	movs	r3, #0
 800e748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e74a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e74e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e750:	f107 0308 	add.w	r3, r7, #8
 800e754:	4619      	mov	r1, r3
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f7ff fdc0 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e760:	2133      	movs	r1, #51	; 0x33
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 f8f8 	bl	800e958 <SDMMC_GetCmdResp1>
 800e768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e76a:	69fb      	ldr	r3, [r7, #28]
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3720      	adds	r7, #32
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b088      	sub	sp, #32
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e77c:	2300      	movs	r3, #0
 800e77e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e780:	2302      	movs	r3, #2
 800e782:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e784:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e78a:	2300      	movs	r3, #0
 800e78c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e78e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e792:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e794:	f107 0308 	add.w	r3, r7, #8
 800e798:	4619      	mov	r1, r3
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f7ff fd9e 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 f9c9 	bl	800eb38 <SDMMC_GetCmdResp2>
 800e7a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7a8:	69fb      	ldr	r3, [r7, #28]
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3720      	adds	r7, #32
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b088      	sub	sp, #32
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e7c0:	2309      	movs	r3, #9
 800e7c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e7c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e7c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e7d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7d4:	f107 0308 	add.w	r3, r7, #8
 800e7d8:	4619      	mov	r1, r3
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7ff fd7e 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f000 f9a9 	bl	800eb38 <SDMMC_GetCmdResp2>
 800e7e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7e8:	69fb      	ldr	r3, [r7, #28]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3720      	adds	r7, #32
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b088      	sub	sp, #32
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e800:	2303      	movs	r3, #3
 800e802:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e804:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e808:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e80a:	2300      	movs	r3, #0
 800e80c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e80e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e812:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e814:	f107 0308 	add.w	r3, r7, #8
 800e818:	4619      	mov	r1, r3
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7ff fd5e 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e820:	683a      	ldr	r2, [r7, #0]
 800e822:	2103      	movs	r1, #3
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 fa0b 	bl	800ec40 <SDMMC_GetCmdResp6>
 800e82a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e82c:	69fb      	ldr	r3, [r7, #28]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3720      	adds	r7, #32
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b088      	sub	sp, #32
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
 800e83e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e844:	230d      	movs	r3, #13
 800e846:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e84c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e84e:	2300      	movs	r3, #0
 800e850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e856:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e858:	f107 0308 	add.w	r3, r7, #8
 800e85c:	4619      	mov	r1, r3
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f7ff fd3c 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e864:	f241 3288 	movw	r2, #5000	; 0x1388
 800e868:	210d      	movs	r1, #13
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 f874 	bl	800e958 <SDMMC_GetCmdResp1>
 800e870:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e872:	69fb      	ldr	r3, [r7, #28]
}
 800e874:	4618      	mov	r0, r3
 800e876:	3720      	adds	r7, #32
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b088      	sub	sp, #32
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e884:	2300      	movs	r3, #0
 800e886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e888:	230d      	movs	r3, #13
 800e88a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e88c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e892:	2300      	movs	r3, #0
 800e894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e89a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e89c:	f107 0308 	add.w	r3, r7, #8
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f7ff fd1a 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e8a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8ac:	210d      	movs	r1, #13
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f000 f852 	bl	800e958 <SDMMC_GetCmdResp1>
 800e8b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8b6:	69fb      	ldr	r3, [r7, #28]
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3720      	adds	r7, #32
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b088      	sub	sp, #32
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800e8cc:	230b      	movs	r3, #11
 800e8ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e8d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e8de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8e0:	f107 0308 	add.w	r3, r7, #8
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f7ff fcf8 	bl	800e2dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800e8ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8f0:	210b      	movs	r1, #11
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 f830 	bl	800e958 <SDMMC_GetCmdResp1>
 800e8f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8fa:	69fb      	ldr	r3, [r7, #28]
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3720      	adds	r7, #32
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e904:	b490      	push	{r4, r7}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e90c:	4b0f      	ldr	r3, [pc, #60]	; (800e94c <SDMMC_GetCmdError+0x48>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a0f      	ldr	r2, [pc, #60]	; (800e950 <SDMMC_GetCmdError+0x4c>)
 800e912:	fba2 2303 	umull	r2, r3, r2, r3
 800e916:	0a5b      	lsrs	r3, r3, #9
 800e918:	f241 3288 	movw	r2, #5000	; 0x1388
 800e91c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800e920:	4623      	mov	r3, r4
 800e922:	1e5c      	subs	r4, r3, #1
 800e924:	2b00      	cmp	r3, #0
 800e926:	d102      	bne.n	800e92e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e928:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e92c:	e009      	b.n	800e942 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e936:	2b00      	cmp	r3, #0
 800e938:	d0f2      	beq.n	800e920 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4a05      	ldr	r2, [pc, #20]	; (800e954 <SDMMC_GetCmdError+0x50>)
 800e93e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e940:	2300      	movs	r3, #0
}
 800e942:	4618      	mov	r0, r3
 800e944:	3708      	adds	r7, #8
 800e946:	46bd      	mov	sp, r7
 800e948:	bc90      	pop	{r4, r7}
 800e94a:	4770      	bx	lr
 800e94c:	24000000 	.word	0x24000000
 800e950:	10624dd3 	.word	0x10624dd3
 800e954:	002000c5 	.word	0x002000c5

0800e958 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e958:	b590      	push	{r4, r7, lr}
 800e95a:	b087      	sub	sp, #28
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	460b      	mov	r3, r1
 800e962:	607a      	str	r2, [r7, #4]
 800e964:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e966:	4b6f      	ldr	r3, [pc, #444]	; (800eb24 <SDMMC_GetCmdResp1+0x1cc>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a6f      	ldr	r2, [pc, #444]	; (800eb28 <SDMMC_GetCmdResp1+0x1d0>)
 800e96c:	fba2 2303 	umull	r2, r3, r2, r3
 800e970:	0a5b      	lsrs	r3, r3, #9
 800e972:	687a      	ldr	r2, [r7, #4]
 800e974:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800e978:	4623      	mov	r3, r4
 800e97a:	1e5c      	subs	r4, r3, #1
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d102      	bne.n	800e986 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e980:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e984:	e0c9      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e98a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e98c:	697a      	ldr	r2, [r7, #20]
 800e98e:	4b67      	ldr	r3, [pc, #412]	; (800eb2c <SDMMC_GetCmdResp1+0x1d4>)
 800e990:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e992:	2b00      	cmp	r3, #0
 800e994:	d0f0      	beq.n	800e978 <SDMMC_GetCmdResp1+0x20>
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d1eb      	bne.n	800e978 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9a4:	f003 0304 	and.w	r3, r3, #4
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d004      	beq.n	800e9b6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2204      	movs	r2, #4
 800e9b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e9b2:	2304      	movs	r3, #4
 800e9b4:	e0b1      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ba:	f003 0301 	and.w	r3, r3, #1
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d004      	beq.n	800e9cc <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	e0a6      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	4a58      	ldr	r2, [pc, #352]	; (800eb30 <SDMMC_GetCmdResp1+0x1d8>)
 800e9d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f7ff fcac 	bl	800e330 <SDMMC_GetCommandResponse>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	461a      	mov	r2, r3
 800e9dc:	7afb      	ldrb	r3, [r7, #11]
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d001      	beq.n	800e9e6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	e099      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e9e6:	2100      	movs	r1, #0
 800e9e8:	68f8      	ldr	r0, [r7, #12]
 800e9ea:	f7ff fcae 	bl	800e34a <SDMMC_GetResponse>
 800e9ee:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e9f0:	693a      	ldr	r2, [r7, #16]
 800e9f2:	4b50      	ldr	r3, [pc, #320]	; (800eb34 <SDMMC_GetCmdResp1+0x1dc>)
 800e9f4:	4013      	ands	r3, r2
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d101      	bne.n	800e9fe <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	e08d      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	da02      	bge.n	800ea0a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ea04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ea08:	e087      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d001      	beq.n	800ea18 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ea14:	2340      	movs	r3, #64	; 0x40
 800ea16:	e080      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d001      	beq.n	800ea26 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ea22:	2380      	movs	r3, #128	; 0x80
 800ea24:	e079      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d002      	beq.n	800ea36 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ea30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea34:	e071      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d002      	beq.n	800ea46 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ea40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea44:	e069      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d002      	beq.n	800ea56 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ea50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea54:	e061      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d002      	beq.n	800ea66 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ea60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea64:	e059      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d002      	beq.n	800ea76 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ea70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea74:	e051      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d002      	beq.n	800ea86 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ea80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea84:	e049      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d002      	beq.n	800ea96 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ea90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ea94:	e041      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d002      	beq.n	800eaa6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800eaa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eaa4:	e039      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d002      	beq.n	800eab6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800eab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800eab4:	e031      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d002      	beq.n	800eac6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800eac0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800eac4:	e029      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d002      	beq.n	800ead6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ead0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ead4:	e021      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d002      	beq.n	800eae6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eae0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800eae4:	e019      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d002      	beq.n	800eaf6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800eaf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800eaf4:	e011      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d002      	beq.n	800eb06 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800eb00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800eb04:	e009      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	f003 0308 	and.w	r3, r3, #8
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d002      	beq.n	800eb16 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800eb10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800eb14:	e001      	b.n	800eb1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eb16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	371c      	adds	r7, #28
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd90      	pop	{r4, r7, pc}
 800eb22:	bf00      	nop
 800eb24:	24000000 	.word	0x24000000
 800eb28:	10624dd3 	.word	0x10624dd3
 800eb2c:	00200045 	.word	0x00200045
 800eb30:	002000c5 	.word	0x002000c5
 800eb34:	fdffe008 	.word	0xfdffe008

0800eb38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800eb38:	b490      	push	{r4, r7}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eb40:	4b1e      	ldr	r3, [pc, #120]	; (800ebbc <SDMMC_GetCmdResp2+0x84>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4a1e      	ldr	r2, [pc, #120]	; (800ebc0 <SDMMC_GetCmdResp2+0x88>)
 800eb46:	fba2 2303 	umull	r2, r3, r2, r3
 800eb4a:	0a5b      	lsrs	r3, r3, #9
 800eb4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb50:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800eb54:	4623      	mov	r3, r4
 800eb56:	1e5c      	subs	r4, r3, #1
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d102      	bne.n	800eb62 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb60:	e026      	b.n	800ebb0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb66:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d0f0      	beq.n	800eb54 <SDMMC_GetCmdResp2+0x1c>
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d1eb      	bne.n	800eb54 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb80:	f003 0304 	and.w	r3, r3, #4
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d004      	beq.n	800eb92 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2204      	movs	r2, #4
 800eb8c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb8e:	2304      	movs	r3, #4
 800eb90:	e00e      	b.n	800ebb0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb96:	f003 0301 	and.w	r3, r3, #1
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d004      	beq.n	800eba8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2201      	movs	r2, #1
 800eba2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eba4:	2301      	movs	r3, #1
 800eba6:	e003      	b.n	800ebb0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4a06      	ldr	r2, [pc, #24]	; (800ebc4 <SDMMC_GetCmdResp2+0x8c>)
 800ebac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ebae:	2300      	movs	r3, #0
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3710      	adds	r7, #16
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bc90      	pop	{r4, r7}
 800ebb8:	4770      	bx	lr
 800ebba:	bf00      	nop
 800ebbc:	24000000 	.word	0x24000000
 800ebc0:	10624dd3 	.word	0x10624dd3
 800ebc4:	002000c5 	.word	0x002000c5

0800ebc8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ebc8:	b490      	push	{r4, r7}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ebd0:	4b18      	ldr	r3, [pc, #96]	; (800ec34 <SDMMC_GetCmdResp3+0x6c>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	4a18      	ldr	r2, [pc, #96]	; (800ec38 <SDMMC_GetCmdResp3+0x70>)
 800ebd6:	fba2 2303 	umull	r2, r3, r2, r3
 800ebda:	0a5b      	lsrs	r3, r3, #9
 800ebdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebe0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800ebe4:	4623      	mov	r3, r4
 800ebe6:	1e5c      	subs	r4, r3, #1
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d102      	bne.n	800ebf2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ebec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ebf0:	e01b      	b.n	800ec2a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebf6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d0f0      	beq.n	800ebe4 <SDMMC_GetCmdResp3+0x1c>
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1eb      	bne.n	800ebe4 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec10:	f003 0304 	and.w	r3, r3, #4
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d004      	beq.n	800ec22 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2204      	movs	r2, #4
 800ec1c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec1e:	2304      	movs	r3, #4
 800ec20:	e003      	b.n	800ec2a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	4a05      	ldr	r2, [pc, #20]	; (800ec3c <SDMMC_GetCmdResp3+0x74>)
 800ec26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ec28:	2300      	movs	r3, #0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3710      	adds	r7, #16
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bc90      	pop	{r4, r7}
 800ec32:	4770      	bx	lr
 800ec34:	24000000 	.word	0x24000000
 800ec38:	10624dd3 	.word	0x10624dd3
 800ec3c:	002000c5 	.word	0x002000c5

0800ec40 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ec40:	b590      	push	{r4, r7, lr}
 800ec42:	b087      	sub	sp, #28
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	60f8      	str	r0, [r7, #12]
 800ec48:	460b      	mov	r3, r1
 800ec4a:	607a      	str	r2, [r7, #4]
 800ec4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ec4e:	4b34      	ldr	r3, [pc, #208]	; (800ed20 <SDMMC_GetCmdResp6+0xe0>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4a34      	ldr	r2, [pc, #208]	; (800ed24 <SDMMC_GetCmdResp6+0xe4>)
 800ec54:	fba2 2303 	umull	r2, r3, r2, r3
 800ec58:	0a5b      	lsrs	r3, r3, #9
 800ec5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec5e:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800ec62:	4623      	mov	r3, r4
 800ec64:	1e5c      	subs	r4, r3, #1
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d102      	bne.n	800ec70 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec6e:	e052      	b.n	800ed16 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec74:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d0f0      	beq.n	800ec62 <SDMMC_GetCmdResp6+0x22>
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d1eb      	bne.n	800ec62 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec8e:	f003 0304 	and.w	r3, r3, #4
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d004      	beq.n	800eca0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2204      	movs	r2, #4
 800ec9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec9c:	2304      	movs	r3, #4
 800ec9e:	e03a      	b.n	800ed16 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca4:	f003 0301 	and.w	r3, r3, #1
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d004      	beq.n	800ecb6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2201      	movs	r2, #1
 800ecb0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	e02f      	b.n	800ed16 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	f7ff fb3a 	bl	800e330 <SDMMC_GetCommandResponse>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	7afb      	ldrb	r3, [r7, #11]
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d001      	beq.n	800ecca <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e025      	b.n	800ed16 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	4a16      	ldr	r2, [pc, #88]	; (800ed28 <SDMMC_GetCmdResp6+0xe8>)
 800ecce:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ecd0:	2100      	movs	r1, #0
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f7ff fb39 	bl	800e34a <SDMMC_GetResponse>
 800ecd8:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d106      	bne.n	800ecf2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	0c1b      	lsrs	r3, r3, #16
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	e011      	b.n	800ed16 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d002      	beq.n	800ed02 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ecfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed00:	e009      	b.n	800ed16 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d002      	beq.n	800ed12 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ed0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed10:	e001      	b.n	800ed16 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ed12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	371c      	adds	r7, #28
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd90      	pop	{r4, r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	24000000 	.word	0x24000000
 800ed24:	10624dd3 	.word	0x10624dd3
 800ed28:	002000c5 	.word	0x002000c5

0800ed2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ed2c:	b490      	push	{r4, r7}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ed34:	4b21      	ldr	r3, [pc, #132]	; (800edbc <SDMMC_GetCmdResp7+0x90>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4a21      	ldr	r2, [pc, #132]	; (800edc0 <SDMMC_GetCmdResp7+0x94>)
 800ed3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed3e:	0a5b      	lsrs	r3, r3, #9
 800ed40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed44:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800ed48:	4623      	mov	r3, r4
 800ed4a:	1e5c      	subs	r4, r3, #1
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d102      	bne.n	800ed56 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ed54:	e02c      	b.n	800edb0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed5a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d0f0      	beq.n	800ed48 <SDMMC_GetCmdResp7+0x1c>
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1eb      	bne.n	800ed48 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed74:	f003 0304 	and.w	r3, r3, #4
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d004      	beq.n	800ed86 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2204      	movs	r2, #4
 800ed80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed82:	2304      	movs	r3, #4
 800ed84:	e014      	b.n	800edb0 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed8a:	f003 0301 	and.w	r3, r3, #1
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d004      	beq.n	800ed9c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2201      	movs	r2, #1
 800ed96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	e009      	b.n	800edb0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eda0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d002      	beq.n	800edae <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2240      	movs	r2, #64	; 0x40
 800edac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800edae:	2300      	movs	r3, #0

}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3710      	adds	r7, #16
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bc90      	pop	{r4, r7}
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	24000000 	.word	0x24000000
 800edc0:	10624dd3 	.word	0x10624dd3

0800edc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800edc4:	b084      	sub	sp, #16
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b084      	sub	sp, #16
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
 800edce:	f107 001c 	add.w	r0, r7, #28
 800edd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800edd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d120      	bne.n	800ee1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ede0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	68da      	ldr	r2, [r3, #12]
 800edec:	4b25      	ldr	r3, [pc, #148]	; (800ee84 <USB_CoreInit+0xc0>)
 800edee:	4013      	ands	r3, r2
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ee00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d105      	bne.n	800ee12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 fa4c 	bl	800f2b0 <USB_CoreReset>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	73fb      	strb	r3, [r7, #15]
 800ee1c:	e01a      	b.n	800ee54 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	68db      	ldr	r3, [r3, #12]
 800ee22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f000 fa40 	bl	800f2b0 <USB_CoreReset>
 800ee30:	4603      	mov	r3, r0
 800ee32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ee34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d106      	bne.n	800ee48 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	639a      	str	r2, [r3, #56]	; 0x38
 800ee46:	e005      	b.n	800ee54 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ee54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee56:	2b01      	cmp	r3, #1
 800ee58:	d10b      	bne.n	800ee72 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	689b      	ldr	r3, [r3, #8]
 800ee5e:	f043 0206 	orr.w	r2, r3, #6
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	689b      	ldr	r3, [r3, #8]
 800ee6a:	f043 0220 	orr.w	r2, r3, #32
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ee72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3710      	adds	r7, #16
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ee7e:	b004      	add	sp, #16
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	ffbdffbf 	.word	0xffbdffbf

0800ee88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	689b      	ldr	r3, [r3, #8]
 800ee94:	f023 0201 	bic.w	r2, r3, #1
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ee9c:	2300      	movs	r3, #0
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	370c      	adds	r7, #12
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr

0800eeaa <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b082      	sub	sp, #8
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
 800eeb2:	460b      	mov	r3, r1
 800eeb4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800eec2:	78fb      	ldrb	r3, [r7, #3]
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d106      	bne.n	800eed6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	60da      	str	r2, [r3, #12]
 800eed4:	e00b      	b.n	800eeee <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800eed6:	78fb      	ldrb	r3, [r7, #3]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d106      	bne.n	800eeea <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	60da      	str	r2, [r3, #12]
 800eee8:	e001      	b.n	800eeee <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800eeea:	2301      	movs	r3, #1
 800eeec:	e003      	b.n	800eef6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800eeee:	2032      	movs	r0, #50	; 0x32
 800eef0:	f7f2 fcf4 	bl	80018dc <HAL_Delay>

  return HAL_OK;
 800eef4:	2300      	movs	r3, #0
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
	...

0800ef00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ef00:	b084      	sub	sp, #16
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b086      	sub	sp, #24
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	6078      	str	r0, [r7, #4]
 800ef0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ef0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ef12:	2300      	movs	r3, #0
 800ef14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	613b      	str	r3, [r7, #16]
 800ef1e:	e009      	b.n	800ef34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ef20:	687a      	ldr	r2, [r7, #4]
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	3340      	adds	r3, #64	; 0x40
 800ef26:	009b      	lsls	r3, r3, #2
 800ef28:	4413      	add	r3, r2
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	3301      	adds	r3, #1
 800ef32:	613b      	str	r3, [r7, #16]
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	2b0e      	cmp	r3, #14
 800ef38:	d9f2      	bls.n	800ef20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ef3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d11c      	bne.n	800ef7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	68fa      	ldr	r2, [r7, #12]
 800ef4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef4e:	f043 0302 	orr.w	r3, r3, #2
 800ef52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	601a      	str	r2, [r3, #0]
 800ef78:	e005      	b.n	800ef86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	2300      	movs	r3, #0
 800ef90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef98:	4619      	mov	r1, r3
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efa0:	461a      	mov	r2, r3
 800efa2:	680b      	ldr	r3, [r1, #0]
 800efa4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800efa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d10c      	bne.n	800efc6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800efac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d104      	bne.n	800efbc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800efb2:	2100      	movs	r1, #0
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 f949 	bl	800f24c <USB_SetDevSpeed>
 800efba:	e008      	b.n	800efce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800efbc:	2101      	movs	r1, #1
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 f944 	bl	800f24c <USB_SetDevSpeed>
 800efc4:	e003      	b.n	800efce <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800efc6:	2103      	movs	r1, #3
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f000 f93f 	bl	800f24c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800efce:	2110      	movs	r1, #16
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 f8f3 	bl	800f1bc <USB_FlushTxFifo>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d001      	beq.n	800efe0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800efdc:	2301      	movs	r3, #1
 800efde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f000 f911 	bl	800f208 <USB_FlushRxFifo>
 800efe6:	4603      	mov	r3, r0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d001      	beq.n	800eff0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800efec:	2301      	movs	r3, #1
 800efee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eff6:	461a      	mov	r2, r3
 800eff8:	2300      	movs	r3, #0
 800effa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f002:	461a      	mov	r2, r3
 800f004:	2300      	movs	r3, #0
 800f006:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f00e:	461a      	mov	r2, r3
 800f010:	2300      	movs	r3, #0
 800f012:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f014:	2300      	movs	r3, #0
 800f016:	613b      	str	r3, [r7, #16]
 800f018:	e043      	b.n	800f0a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	015a      	lsls	r2, r3, #5
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	4413      	add	r3, r2
 800f022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f02c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f030:	d118      	bne.n	800f064 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d10a      	bne.n	800f04e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	015a      	lsls	r2, r3, #5
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	4413      	add	r3, r2
 800f040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f044:	461a      	mov	r2, r3
 800f046:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f04a:	6013      	str	r3, [r2, #0]
 800f04c:	e013      	b.n	800f076 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	015a      	lsls	r2, r3, #5
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	4413      	add	r3, r2
 800f056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f05a:	461a      	mov	r2, r3
 800f05c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f060:	6013      	str	r3, [r2, #0]
 800f062:	e008      	b.n	800f076 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	015a      	lsls	r2, r3, #5
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	4413      	add	r3, r2
 800f06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f070:	461a      	mov	r2, r3
 800f072:	2300      	movs	r3, #0
 800f074:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	015a      	lsls	r2, r3, #5
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	4413      	add	r3, r2
 800f07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f082:	461a      	mov	r2, r3
 800f084:	2300      	movs	r3, #0
 800f086:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	015a      	lsls	r2, r3, #5
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	4413      	add	r3, r2
 800f090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f094:	461a      	mov	r2, r3
 800f096:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f09a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	613b      	str	r3, [r7, #16]
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a4:	693a      	ldr	r2, [r7, #16]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d3b7      	bcc.n	800f01a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	613b      	str	r3, [r7, #16]
 800f0ae:	e043      	b.n	800f138 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	015a      	lsls	r2, r3, #5
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f0c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f0c6:	d118      	bne.n	800f0fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d10a      	bne.n	800f0e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	015a      	lsls	r2, r3, #5
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	4413      	add	r3, r2
 800f0d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0da:	461a      	mov	r2, r3
 800f0dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f0e0:	6013      	str	r3, [r2, #0]
 800f0e2:	e013      	b.n	800f10c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	015a      	lsls	r2, r3, #5
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	4413      	add	r3, r2
 800f0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f0f6:	6013      	str	r3, [r2, #0]
 800f0f8:	e008      	b.n	800f10c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	015a      	lsls	r2, r3, #5
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	4413      	add	r3, r2
 800f102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f106:	461a      	mov	r2, r3
 800f108:	2300      	movs	r3, #0
 800f10a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	015a      	lsls	r2, r3, #5
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	4413      	add	r3, r2
 800f114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f118:	461a      	mov	r2, r3
 800f11a:	2300      	movs	r3, #0
 800f11c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	015a      	lsls	r2, r3, #5
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	4413      	add	r3, r2
 800f126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f12a:	461a      	mov	r2, r3
 800f12c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f130:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	3301      	adds	r3, #1
 800f136:	613b      	str	r3, [r7, #16]
 800f138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13a:	693a      	ldr	r2, [r7, #16]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d3b7      	bcc.n	800f0b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f146:	691b      	ldr	r3, [r3, #16]
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f14e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f152:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2200      	movs	r2, #0
 800f158:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f160:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f164:	2b00      	cmp	r3, #0
 800f166:	d105      	bne.n	800f174 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	699b      	ldr	r3, [r3, #24]
 800f16c:	f043 0210 	orr.w	r2, r3, #16
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	699a      	ldr	r2, [r3, #24]
 800f178:	4b0e      	ldr	r3, [pc, #56]	; (800f1b4 <USB_DevInit+0x2b4>)
 800f17a:	4313      	orrs	r3, r2
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f182:	2b00      	cmp	r3, #0
 800f184:	d005      	beq.n	800f192 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	699b      	ldr	r3, [r3, #24]
 800f18a:	f043 0208 	orr.w	r2, r3, #8
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f194:	2b01      	cmp	r3, #1
 800f196:	d105      	bne.n	800f1a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	699a      	ldr	r2, [r3, #24]
 800f19c:	4b06      	ldr	r3, [pc, #24]	; (800f1b8 <USB_DevInit+0x2b8>)
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3718      	adds	r7, #24
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f1b0:	b004      	add	sp, #16
 800f1b2:	4770      	bx	lr
 800f1b4:	803c3800 	.word	0x803c3800
 800f1b8:	40000004 	.word	0x40000004

0800f1bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b085      	sub	sp, #20
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	019b      	lsls	r3, r3, #6
 800f1ce:	f043 0220 	orr.w	r2, r3, #32
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	3301      	adds	r3, #1
 800f1da:	60fb      	str	r3, [r7, #12]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	4a09      	ldr	r2, [pc, #36]	; (800f204 <USB_FlushTxFifo+0x48>)
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d901      	bls.n	800f1e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f1e4:	2303      	movs	r3, #3
 800f1e6:	e006      	b.n	800f1f6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	691b      	ldr	r3, [r3, #16]
 800f1ec:	f003 0320 	and.w	r3, r3, #32
 800f1f0:	2b20      	cmp	r3, #32
 800f1f2:	d0f0      	beq.n	800f1d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f1f4:	2300      	movs	r3, #0
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3714      	adds	r7, #20
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr
 800f202:	bf00      	nop
 800f204:	00030d40 	.word	0x00030d40

0800f208 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f208:	b480      	push	{r7}
 800f20a:	b085      	sub	sp, #20
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f210:	2300      	movs	r3, #0
 800f212:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2210      	movs	r2, #16
 800f218:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	3301      	adds	r3, #1
 800f21e:	60fb      	str	r3, [r7, #12]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	4a09      	ldr	r2, [pc, #36]	; (800f248 <USB_FlushRxFifo+0x40>)
 800f224:	4293      	cmp	r3, r2
 800f226:	d901      	bls.n	800f22c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f228:	2303      	movs	r3, #3
 800f22a:	e006      	b.n	800f23a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	691b      	ldr	r3, [r3, #16]
 800f230:	f003 0310 	and.w	r3, r3, #16
 800f234:	2b10      	cmp	r3, #16
 800f236:	d0f0      	beq.n	800f21a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f238:	2300      	movs	r3, #0
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3714      	adds	r7, #20
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr
 800f246:	bf00      	nop
 800f248:	00030d40 	.word	0x00030d40

0800f24c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b085      	sub	sp, #20
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	460b      	mov	r3, r1
 800f256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	78fb      	ldrb	r3, [r7, #3]
 800f266:	68f9      	ldr	r1, [r7, #12]
 800f268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f26c:	4313      	orrs	r3, r2
 800f26e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f270:	2300      	movs	r3, #0
}
 800f272:	4618      	mov	r0, r3
 800f274:	3714      	adds	r7, #20
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr

0800f27e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b084      	sub	sp, #16
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	68fa      	ldr	r2, [r7, #12]
 800f294:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f298:	f043 0302 	orr.w	r3, r3, #2
 800f29c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f29e:	2003      	movs	r0, #3
 800f2a0:	f7f2 fb1c 	bl	80018dc <HAL_Delay>

  return HAL_OK;
 800f2a4:	2300      	movs	r3, #0
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3710      	adds	r7, #16
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
	...

0800f2b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	3301      	adds	r3, #1
 800f2c0:	60fb      	str	r3, [r7, #12]
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	4a13      	ldr	r2, [pc, #76]	; (800f314 <USB_CoreReset+0x64>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d901      	bls.n	800f2ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f2ca:	2303      	movs	r3, #3
 800f2cc:	e01b      	b.n	800f306 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	691b      	ldr	r3, [r3, #16]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	daf2      	bge.n	800f2bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	691b      	ldr	r3, [r3, #16]
 800f2de:	f043 0201 	orr.w	r2, r3, #1
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	60fb      	str	r3, [r7, #12]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	4a09      	ldr	r2, [pc, #36]	; (800f314 <USB_CoreReset+0x64>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d901      	bls.n	800f2f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f2f4:	2303      	movs	r3, #3
 800f2f6:	e006      	b.n	800f306 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	691b      	ldr	r3, [r3, #16]
 800f2fc:	f003 0301 	and.w	r3, r3, #1
 800f300:	2b01      	cmp	r3, #1
 800f302:	d0f0      	beq.n	800f2e6 <USB_CoreReset+0x36>

  return HAL_OK;
 800f304:	2300      	movs	r3, #0
}
 800f306:	4618      	mov	r0, r3
 800f308:	3714      	adds	r7, #20
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop
 800f314:	00030d40 	.word	0x00030d40

0800f318 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f31c:	4904      	ldr	r1, [pc, #16]	; (800f330 <MX_FATFS_Init+0x18>)
 800f31e:	4805      	ldr	r0, [pc, #20]	; (800f334 <MX_FATFS_Init+0x1c>)
 800f320:	f004 fe56 	bl	8013fd0 <FATFS_LinkDriver>
 800f324:	4603      	mov	r3, r0
 800f326:	461a      	mov	r2, r3
 800f328:	4b03      	ldr	r3, [pc, #12]	; (800f338 <MX_FATFS_Init+0x20>)
 800f32a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800f32c:	bf00      	nop
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	24002e14 	.word	0x24002e14
 800f334:	0801433c 	.word	0x0801433c
 800f338:	24002e10 	.word	0x24002e10

0800f33c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f33c:	b480      	push	{r7}
 800f33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f340:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800f342:	4618      	mov	r0, r3
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f352:	2300      	movs	r3, #0
 800f354:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f356:	f000 f86b 	bl	800f430 <BSP_SD_IsDetected>
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b01      	cmp	r3, #1
 800f35e:	d001      	beq.n	800f364 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f360:	2302      	movs	r3, #2
 800f362:	e005      	b.n	800f370 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f364:	4804      	ldr	r0, [pc, #16]	; (800f378 <BSP_SD_Init+0x2c>)
 800f366:	f7fa fcc5 	bl	8009cf4 <HAL_SD_Init>
 800f36a:	4603      	mov	r3, r0
 800f36c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800f36e:	79fb      	ldrb	r3, [r7, #7]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3708      	adds	r7, #8
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	24000a1c 	.word	0x24000a1c

0800f37c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b088      	sub	sp, #32
 800f380:	af02      	add	r7, sp, #8
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	607a      	str	r2, [r7, #4]
 800f388:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f38a:	2300      	movs	r3, #0
 800f38c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	9300      	str	r3, [sp, #0]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	68ba      	ldr	r2, [r7, #8]
 800f396:	68f9      	ldr	r1, [r7, #12]
 800f398:	4806      	ldr	r0, [pc, #24]	; (800f3b4 <BSP_SD_ReadBlocks+0x38>)
 800f39a:	f7fa fdc9 	bl	8009f30 <HAL_SD_ReadBlocks>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800f3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3718      	adds	r7, #24
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	24000a1c 	.word	0x24000a1c

0800f3b8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b088      	sub	sp, #32
 800f3bc:	af02      	add	r7, sp, #8
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	607a      	str	r2, [r7, #4]
 800f3c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	9300      	str	r3, [sp, #0]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	68ba      	ldr	r2, [r7, #8]
 800f3d2:	68f9      	ldr	r1, [r7, #12]
 800f3d4:	4806      	ldr	r0, [pc, #24]	; (800f3f0 <BSP_SD_WriteBlocks+0x38>)
 800f3d6:	f7fa ff35 	bl	800a244 <HAL_SD_WriteBlocks>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d001      	beq.n	800f3e4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800f3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3718      	adds	r7, #24
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	24000a1c 	.word	0x24000a1c

0800f3f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f3f8:	4805      	ldr	r0, [pc, #20]	; (800f410 <BSP_SD_GetCardState+0x1c>)
 800f3fa:	f7fb fbed 	bl	800abd8 <HAL_SD_GetCardState>
 800f3fe:	4603      	mov	r3, r0
 800f400:	2b04      	cmp	r3, #4
 800f402:	bf14      	ite	ne
 800f404:	2301      	movne	r3, #1
 800f406:	2300      	moveq	r3, #0
 800f408:	b2db      	uxtb	r3, r3
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	24000a1c 	.word	0x24000a1c

0800f414 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f41c:	6879      	ldr	r1, [r7, #4]
 800f41e:	4803      	ldr	r0, [pc, #12]	; (800f42c <BSP_SD_GetCardInfo+0x18>)
 800f420:	f7fb fb04 	bl	800aa2c <HAL_SD_GetCardInfo>
}
 800f424:	bf00      	nop
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	24000a1c 	.word	0x24000a1c

0800f430 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f436:	2301      	movs	r3, #1
 800f438:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800f43a:	f000 f80b 	bl	800f454 <BSP_PlatformIsDetected>
 800f43e:	4603      	mov	r3, r0
 800f440:	2b00      	cmp	r3, #0
 800f442:	d101      	bne.n	800f448 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f444:	2300      	movs	r3, #0
 800f446:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f448:	79fb      	ldrb	r3, [r7, #7]
 800f44a:	b2db      	uxtb	r3, r3
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3708      	adds	r7, #8
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f45a:	2301      	movs	r3, #1
 800f45c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f45e:	2180      	movs	r1, #128	; 0x80
 800f460:	4806      	ldr	r0, [pc, #24]	; (800f47c <BSP_PlatformIsDetected+0x28>)
 800f462:	f7f7 fc73 	bl	8006d4c <HAL_GPIO_ReadPin>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d001      	beq.n	800f470 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800f46c:	2300      	movs	r3, #0
 800f46e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800f470:	79fb      	ldrb	r3, [r7, #7]
}  
 800f472:	4618      	mov	r0, r3
 800f474:	3708      	adds	r7, #8
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	58020800 	.word	0x58020800

0800f480 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	4603      	mov	r3, r0
 800f488:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f48a:	4b0b      	ldr	r3, [pc, #44]	; (800f4b8 <SD_CheckStatus+0x38>)
 800f48c:	2201      	movs	r2, #1
 800f48e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f490:	f7ff ffb0 	bl	800f3f4 <BSP_SD_GetCardState>
 800f494:	4603      	mov	r3, r0
 800f496:	2b00      	cmp	r3, #0
 800f498:	d107      	bne.n	800f4aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f49a:	4b07      	ldr	r3, [pc, #28]	; (800f4b8 <SD_CheckStatus+0x38>)
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	f023 0301 	bic.w	r3, r3, #1
 800f4a4:	b2da      	uxtb	r2, r3
 800f4a6:	4b04      	ldr	r3, [pc, #16]	; (800f4b8 <SD_CheckStatus+0x38>)
 800f4a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f4aa:	4b03      	ldr	r3, [pc, #12]	; (800f4b8 <SD_CheckStatus+0x38>)
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	b2db      	uxtb	r3, r3
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3708      	adds	r7, #8
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	2400000d 	.word	0x2400000d

0800f4bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800f4c6:	4b0b      	ldr	r3, [pc, #44]	; (800f4f4 <SD_initialize+0x38>)
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f4cc:	f7ff ff3e 	bl	800f34c <BSP_SD_Init>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d107      	bne.n	800f4e6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f4d6:	79fb      	ldrb	r3, [r7, #7]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7ff ffd1 	bl	800f480 <SD_CheckStatus>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	4b04      	ldr	r3, [pc, #16]	; (800f4f4 <SD_initialize+0x38>)
 800f4e4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f4e6:	4b03      	ldr	r3, [pc, #12]	; (800f4f4 <SD_initialize+0x38>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	b2db      	uxtb	r3, r3
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	2400000d 	.word	0x2400000d

0800f4f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	4603      	mov	r3, r0
 800f500:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f502:	79fb      	ldrb	r3, [r7, #7]
 800f504:	4618      	mov	r0, r3
 800f506:	f7ff ffbb 	bl	800f480 <SD_CheckStatus>
 800f50a:	4603      	mov	r3, r0
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3708      	adds	r7, #8
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b086      	sub	sp, #24
 800f518:	af00      	add	r7, sp, #0
 800f51a:	60b9      	str	r1, [r7, #8]
 800f51c:	607a      	str	r2, [r7, #4]
 800f51e:	603b      	str	r3, [r7, #0]
 800f520:	4603      	mov	r3, r0
 800f522:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f524:	2301      	movs	r3, #1
 800f526:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f528:	f04f 33ff 	mov.w	r3, #4294967295
 800f52c:	683a      	ldr	r2, [r7, #0]
 800f52e:	6879      	ldr	r1, [r7, #4]
 800f530:	68b8      	ldr	r0, [r7, #8]
 800f532:	f7ff ff23 	bl	800f37c <BSP_SD_ReadBlocks>
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d107      	bne.n	800f54c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f53c:	bf00      	nop
 800f53e:	f7ff ff59 	bl	800f3f4 <BSP_SD_GetCardState>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d1fa      	bne.n	800f53e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f548:	2300      	movs	r3, #0
 800f54a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f54c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3718      	adds	r7, #24
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}

0800f556 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f556:	b580      	push	{r7, lr}
 800f558:	b086      	sub	sp, #24
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
 800f560:	603b      	str	r3, [r7, #0]
 800f562:	4603      	mov	r3, r0
 800f564:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f566:	2301      	movs	r3, #1
 800f568:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f56a:	f04f 33ff 	mov.w	r3, #4294967295
 800f56e:	683a      	ldr	r2, [r7, #0]
 800f570:	6879      	ldr	r1, [r7, #4]
 800f572:	68b8      	ldr	r0, [r7, #8]
 800f574:	f7ff ff20 	bl	800f3b8 <BSP_SD_WriteBlocks>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d107      	bne.n	800f58e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f57e:	bf00      	nop
 800f580:	f7ff ff38 	bl	800f3f4 <BSP_SD_GetCardState>
 800f584:	4603      	mov	r3, r0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1fa      	bne.n	800f580 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f58a:	2300      	movs	r3, #0
 800f58c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f590:	4618      	mov	r0, r3
 800f592:	3718      	adds	r7, #24
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b08c      	sub	sp, #48	; 0x30
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	4603      	mov	r3, r0
 800f5a0:	603a      	str	r2, [r7, #0]
 800f5a2:	71fb      	strb	r3, [r7, #7]
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f5ae:	4b25      	ldr	r3, [pc, #148]	; (800f644 <SD_ioctl+0xac>)
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	f003 0301 	and.w	r3, r3, #1
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d001      	beq.n	800f5c0 <SD_ioctl+0x28>
 800f5bc:	2303      	movs	r3, #3
 800f5be:	e03c      	b.n	800f63a <SD_ioctl+0xa2>

  switch (cmd)
 800f5c0:	79bb      	ldrb	r3, [r7, #6]
 800f5c2:	2b03      	cmp	r3, #3
 800f5c4:	d834      	bhi.n	800f630 <SD_ioctl+0x98>
 800f5c6:	a201      	add	r2, pc, #4	; (adr r2, 800f5cc <SD_ioctl+0x34>)
 800f5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5cc:	0800f5dd 	.word	0x0800f5dd
 800f5d0:	0800f5e5 	.word	0x0800f5e5
 800f5d4:	0800f5fd 	.word	0x0800f5fd
 800f5d8:	0800f617 	.word	0x0800f617
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f5e2:	e028      	b.n	800f636 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f5e4:	f107 0308 	add.w	r3, r7, #8
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7ff ff13 	bl	800f414 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f5ee:	6a3a      	ldr	r2, [r7, #32]
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f5fa:	e01c      	b.n	800f636 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f5fc:	f107 0308 	add.w	r3, r7, #8
 800f600:	4618      	mov	r0, r3
 800f602:	f7ff ff07 	bl	800f414 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f608:	b29a      	uxth	r2, r3
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f60e:	2300      	movs	r3, #0
 800f610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f614:	e00f      	b.n	800f636 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f616:	f107 0308 	add.w	r3, r7, #8
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7ff fefa 	bl	800f414 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f622:	0a5a      	lsrs	r2, r3, #9
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f62e:	e002      	b.n	800f636 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f630:	2304      	movs	r3, #4
 800f632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3730      	adds	r7, #48	; 0x30
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
 800f642:	bf00      	nop
 800f644:	2400000d 	.word	0x2400000d

0800f648 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	4603      	mov	r3, r0
 800f650:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f652:	79fb      	ldrb	r3, [r7, #7]
 800f654:	4a08      	ldr	r2, [pc, #32]	; (800f678 <disk_status+0x30>)
 800f656:	009b      	lsls	r3, r3, #2
 800f658:	4413      	add	r3, r2
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	79fa      	ldrb	r2, [r7, #7]
 800f660:	4905      	ldr	r1, [pc, #20]	; (800f678 <disk_status+0x30>)
 800f662:	440a      	add	r2, r1
 800f664:	7a12      	ldrb	r2, [r2, #8]
 800f666:	4610      	mov	r0, r2
 800f668:	4798      	blx	r3
 800f66a:	4603      	mov	r3, r0
 800f66c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3710      	adds	r7, #16
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	24000574 	.word	0x24000574

0800f67c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	4603      	mov	r3, r0
 800f684:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f686:	2300      	movs	r3, #0
 800f688:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f68a:	79fb      	ldrb	r3, [r7, #7]
 800f68c:	4a0d      	ldr	r2, [pc, #52]	; (800f6c4 <disk_initialize+0x48>)
 800f68e:	5cd3      	ldrb	r3, [r2, r3]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d111      	bne.n	800f6b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f694:	79fb      	ldrb	r3, [r7, #7]
 800f696:	4a0b      	ldr	r2, [pc, #44]	; (800f6c4 <disk_initialize+0x48>)
 800f698:	2101      	movs	r1, #1
 800f69a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f69c:	79fb      	ldrb	r3, [r7, #7]
 800f69e:	4a09      	ldr	r2, [pc, #36]	; (800f6c4 <disk_initialize+0x48>)
 800f6a0:	009b      	lsls	r3, r3, #2
 800f6a2:	4413      	add	r3, r2
 800f6a4:	685b      	ldr	r3, [r3, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	79fa      	ldrb	r2, [r7, #7]
 800f6aa:	4906      	ldr	r1, [pc, #24]	; (800f6c4 <disk_initialize+0x48>)
 800f6ac:	440a      	add	r2, r1
 800f6ae:	7a12      	ldrb	r2, [r2, #8]
 800f6b0:	4610      	mov	r0, r2
 800f6b2:	4798      	blx	r3
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3710      	adds	r7, #16
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	24000574 	.word	0x24000574

0800f6c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f6c8:	b590      	push	{r4, r7, lr}
 800f6ca:	b087      	sub	sp, #28
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60b9      	str	r1, [r7, #8]
 800f6d0:	607a      	str	r2, [r7, #4]
 800f6d2:	603b      	str	r3, [r7, #0]
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f6d8:	7bfb      	ldrb	r3, [r7, #15]
 800f6da:	4a0a      	ldr	r2, [pc, #40]	; (800f704 <disk_read+0x3c>)
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	4413      	add	r3, r2
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	689c      	ldr	r4, [r3, #8]
 800f6e4:	7bfb      	ldrb	r3, [r7, #15]
 800f6e6:	4a07      	ldr	r2, [pc, #28]	; (800f704 <disk_read+0x3c>)
 800f6e8:	4413      	add	r3, r2
 800f6ea:	7a18      	ldrb	r0, [r3, #8]
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	68b9      	ldr	r1, [r7, #8]
 800f6f2:	47a0      	blx	r4
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800f6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	371c      	adds	r7, #28
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd90      	pop	{r4, r7, pc}
 800f702:	bf00      	nop
 800f704:	24000574 	.word	0x24000574

0800f708 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f708:	b590      	push	{r4, r7, lr}
 800f70a:	b087      	sub	sp, #28
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	60b9      	str	r1, [r7, #8]
 800f710:	607a      	str	r2, [r7, #4]
 800f712:	603b      	str	r3, [r7, #0]
 800f714:	4603      	mov	r3, r0
 800f716:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f718:	7bfb      	ldrb	r3, [r7, #15]
 800f71a:	4a0a      	ldr	r2, [pc, #40]	; (800f744 <disk_write+0x3c>)
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	4413      	add	r3, r2
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	68dc      	ldr	r4, [r3, #12]
 800f724:	7bfb      	ldrb	r3, [r7, #15]
 800f726:	4a07      	ldr	r2, [pc, #28]	; (800f744 <disk_write+0x3c>)
 800f728:	4413      	add	r3, r2
 800f72a:	7a18      	ldrb	r0, [r3, #8]
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	68b9      	ldr	r1, [r7, #8]
 800f732:	47a0      	blx	r4
 800f734:	4603      	mov	r3, r0
 800f736:	75fb      	strb	r3, [r7, #23]
  return res;
 800f738:	7dfb      	ldrb	r3, [r7, #23]
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	371c      	adds	r7, #28
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd90      	pop	{r4, r7, pc}
 800f742:	bf00      	nop
 800f744:	24000574 	.word	0x24000574

0800f748 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	4603      	mov	r3, r0
 800f750:	603a      	str	r2, [r7, #0]
 800f752:	71fb      	strb	r3, [r7, #7]
 800f754:	460b      	mov	r3, r1
 800f756:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f758:	79fb      	ldrb	r3, [r7, #7]
 800f75a:	4a09      	ldr	r2, [pc, #36]	; (800f780 <disk_ioctl+0x38>)
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	4413      	add	r3, r2
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	691b      	ldr	r3, [r3, #16]
 800f764:	79fa      	ldrb	r2, [r7, #7]
 800f766:	4906      	ldr	r1, [pc, #24]	; (800f780 <disk_ioctl+0x38>)
 800f768:	440a      	add	r2, r1
 800f76a:	7a10      	ldrb	r0, [r2, #8]
 800f76c:	79b9      	ldrb	r1, [r7, #6]
 800f76e:	683a      	ldr	r2, [r7, #0]
 800f770:	4798      	blx	r3
 800f772:	4603      	mov	r3, r0
 800f774:	73fb      	strb	r3, [r7, #15]
  return res;
 800f776:	7bfb      	ldrb	r3, [r7, #15]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3710      	adds	r7, #16
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	24000574 	.word	0x24000574

0800f784 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f784:	b480      	push	{r7}
 800f786:	b085      	sub	sp, #20
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	3301      	adds	r3, #1
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f794:	89fb      	ldrh	r3, [r7, #14]
 800f796:	021b      	lsls	r3, r3, #8
 800f798:	b21a      	sxth	r2, r3
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	b21b      	sxth	r3, r3
 800f7a0:	4313      	orrs	r3, r2
 800f7a2:	b21b      	sxth	r3, r3
 800f7a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f7a6:	89fb      	ldrh	r3, [r7, #14]
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3714      	adds	r7, #20
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr

0800f7b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b085      	sub	sp, #20
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	3303      	adds	r3, #3
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	021b      	lsls	r3, r3, #8
 800f7c8:	687a      	ldr	r2, [r7, #4]
 800f7ca:	3202      	adds	r2, #2
 800f7cc:	7812      	ldrb	r2, [r2, #0]
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	021b      	lsls	r3, r3, #8
 800f7d6:	687a      	ldr	r2, [r7, #4]
 800f7d8:	3201      	adds	r2, #1
 800f7da:	7812      	ldrb	r2, [r2, #0]
 800f7dc:	4313      	orrs	r3, r2
 800f7de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	021b      	lsls	r3, r3, #8
 800f7e4:	687a      	ldr	r2, [r7, #4]
 800f7e6:	7812      	ldrb	r2, [r2, #0]
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	60fb      	str	r3, [r7, #12]
	return rv;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3714      	adds	r7, #20
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr

0800f7fa <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800f7fa:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800f7fe:	b085      	sub	sp, #20
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	3307      	adds	r3, #7
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	b2db      	uxtb	r3, r3
 800f80c:	f04f 0400 	mov.w	r4, #0
 800f810:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 800f814:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f818:	f04f 0b00 	mov.w	fp, #0
 800f81c:	f04f 0c00 	mov.w	ip, #0
 800f820:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f824:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f828:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	3206      	adds	r2, #6
 800f830:	7812      	ldrb	r2, [r2, #0]
 800f832:	b2d1      	uxtb	r1, r2
 800f834:	f04f 0200 	mov.w	r2, #0
 800f838:	ea4b 0301 	orr.w	r3, fp, r1
 800f83c:	ea4c 0402 	orr.w	r4, ip, r2
 800f840:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 800f844:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f848:	f04f 0b00 	mov.w	fp, #0
 800f84c:	f04f 0c00 	mov.w	ip, #0
 800f850:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f854:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f858:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	3205      	adds	r2, #5
 800f860:	7812      	ldrb	r2, [r2, #0]
 800f862:	b2d1      	uxtb	r1, r2
 800f864:	f04f 0200 	mov.w	r2, #0
 800f868:	ea4b 0301 	orr.w	r3, fp, r1
 800f86c:	ea4c 0402 	orr.w	r4, ip, r2
 800f870:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 800f874:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f878:	f04f 0b00 	mov.w	fp, #0
 800f87c:	f04f 0c00 	mov.w	ip, #0
 800f880:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f884:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f888:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f88c:	687a      	ldr	r2, [r7, #4]
 800f88e:	3204      	adds	r2, #4
 800f890:	7812      	ldrb	r2, [r2, #0]
 800f892:	b2d1      	uxtb	r1, r2
 800f894:	f04f 0200 	mov.w	r2, #0
 800f898:	ea4b 0301 	orr.w	r3, fp, r1
 800f89c:	ea4c 0402 	orr.w	r4, ip, r2
 800f8a0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 800f8a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f8a8:	f04f 0b00 	mov.w	fp, #0
 800f8ac:	f04f 0c00 	mov.w	ip, #0
 800f8b0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f8b4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f8b8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f8bc:	687a      	ldr	r2, [r7, #4]
 800f8be:	3203      	adds	r2, #3
 800f8c0:	7812      	ldrb	r2, [r2, #0]
 800f8c2:	b2d1      	uxtb	r1, r2
 800f8c4:	f04f 0200 	mov.w	r2, #0
 800f8c8:	ea4b 0301 	orr.w	r3, fp, r1
 800f8cc:	ea4c 0402 	orr.w	r4, ip, r2
 800f8d0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 800f8d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f8d8:	f04f 0b00 	mov.w	fp, #0
 800f8dc:	f04f 0c00 	mov.w	ip, #0
 800f8e0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f8e4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f8e8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f8ec:	687a      	ldr	r2, [r7, #4]
 800f8ee:	3202      	adds	r2, #2
 800f8f0:	7812      	ldrb	r2, [r2, #0]
 800f8f2:	b2d1      	uxtb	r1, r2
 800f8f4:	f04f 0200 	mov.w	r2, #0
 800f8f8:	ea4b 0301 	orr.w	r3, fp, r1
 800f8fc:	ea4c 0402 	orr.w	r4, ip, r2
 800f900:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 800f904:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f908:	f04f 0b00 	mov.w	fp, #0
 800f90c:	f04f 0c00 	mov.w	ip, #0
 800f910:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f914:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f918:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f91c:	687a      	ldr	r2, [r7, #4]
 800f91e:	3201      	adds	r2, #1
 800f920:	7812      	ldrb	r2, [r2, #0]
 800f922:	b2d1      	uxtb	r1, r2
 800f924:	f04f 0200 	mov.w	r2, #0
 800f928:	ea4b 0301 	orr.w	r3, fp, r1
 800f92c:	ea4c 0402 	orr.w	r4, ip, r2
 800f930:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 800f934:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f938:	f04f 0b00 	mov.w	fp, #0
 800f93c:	f04f 0c00 	mov.w	ip, #0
 800f940:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f944:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f948:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	7812      	ldrb	r2, [r2, #0]
 800f950:	b2d1      	uxtb	r1, r2
 800f952:	f04f 0200 	mov.w	r2, #0
 800f956:	ea4b 0301 	orr.w	r3, fp, r1
 800f95a:	ea4c 0402 	orr.w	r4, ip, r2
 800f95e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 800f962:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800f966:	4618      	mov	r0, r3
 800f968:	4621      	mov	r1, r4
 800f96a:	3714      	adds	r7, #20
 800f96c:	46bd      	mov	sp, r7
 800f96e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800f972:	4770      	bx	lr

0800f974 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	460b      	mov	r3, r1
 800f97e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	1c5a      	adds	r2, r3, #1
 800f984:	607a      	str	r2, [r7, #4]
 800f986:	887a      	ldrh	r2, [r7, #2]
 800f988:	b2d2      	uxtb	r2, r2
 800f98a:	701a      	strb	r2, [r3, #0]
 800f98c:	887b      	ldrh	r3, [r7, #2]
 800f98e:	0a1b      	lsrs	r3, r3, #8
 800f990:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	1c5a      	adds	r2, r3, #1
 800f996:	607a      	str	r2, [r7, #4]
 800f998:	887a      	ldrh	r2, [r7, #2]
 800f99a:	b2d2      	uxtb	r2, r2
 800f99c:	701a      	strb	r2, [r3, #0]
}
 800f99e:	bf00      	nop
 800f9a0:	370c      	adds	r7, #12
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr

0800f9aa <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f9aa:	b480      	push	{r7}
 800f9ac:	b083      	sub	sp, #12
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	6078      	str	r0, [r7, #4]
 800f9b2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	1c5a      	adds	r2, r3, #1
 800f9b8:	607a      	str	r2, [r7, #4]
 800f9ba:	683a      	ldr	r2, [r7, #0]
 800f9bc:	b2d2      	uxtb	r2, r2
 800f9be:	701a      	strb	r2, [r3, #0]
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	0a1b      	lsrs	r3, r3, #8
 800f9c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	1c5a      	adds	r2, r3, #1
 800f9ca:	607a      	str	r2, [r7, #4]
 800f9cc:	683a      	ldr	r2, [r7, #0]
 800f9ce:	b2d2      	uxtb	r2, r2
 800f9d0:	701a      	strb	r2, [r3, #0]
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	0a1b      	lsrs	r3, r3, #8
 800f9d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	1c5a      	adds	r2, r3, #1
 800f9dc:	607a      	str	r2, [r7, #4]
 800f9de:	683a      	ldr	r2, [r7, #0]
 800f9e0:	b2d2      	uxtb	r2, r2
 800f9e2:	701a      	strb	r2, [r3, #0]
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	0a1b      	lsrs	r3, r3, #8
 800f9e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	1c5a      	adds	r2, r3, #1
 800f9ee:	607a      	str	r2, [r7, #4]
 800f9f0:	683a      	ldr	r2, [r7, #0]
 800f9f2:	b2d2      	uxtb	r2, r2
 800f9f4:	701a      	strb	r2, [r3, #0]
}
 800f9f6:	bf00      	nop
 800f9f8:	370c      	adds	r7, #12
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr

0800fa02 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800fa02:	b490      	push	{r4, r7}
 800fa04:	b084      	sub	sp, #16
 800fa06:	af00      	add	r7, sp, #0
 800fa08:	60f8      	str	r0, [r7, #12]
 800fa0a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	1c5a      	adds	r2, r3, #1
 800fa12:	60fa      	str	r2, [r7, #12]
 800fa14:	783a      	ldrb	r2, [r7, #0]
 800fa16:	701a      	strb	r2, [r3, #0]
 800fa18:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fa1c:	f04f 0300 	mov.w	r3, #0
 800fa20:	f04f 0400 	mov.w	r4, #0
 800fa24:	0a0b      	lsrs	r3, r1, #8
 800fa26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fa2a:	0a14      	lsrs	r4, r2, #8
 800fa2c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	1c5a      	adds	r2, r3, #1
 800fa34:	60fa      	str	r2, [r7, #12]
 800fa36:	783a      	ldrb	r2, [r7, #0]
 800fa38:	701a      	strb	r2, [r3, #0]
 800fa3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fa3e:	f04f 0300 	mov.w	r3, #0
 800fa42:	f04f 0400 	mov.w	r4, #0
 800fa46:	0a0b      	lsrs	r3, r1, #8
 800fa48:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fa4c:	0a14      	lsrs	r4, r2, #8
 800fa4e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	1c5a      	adds	r2, r3, #1
 800fa56:	60fa      	str	r2, [r7, #12]
 800fa58:	783a      	ldrb	r2, [r7, #0]
 800fa5a:	701a      	strb	r2, [r3, #0]
 800fa5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fa60:	f04f 0300 	mov.w	r3, #0
 800fa64:	f04f 0400 	mov.w	r4, #0
 800fa68:	0a0b      	lsrs	r3, r1, #8
 800fa6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fa6e:	0a14      	lsrs	r4, r2, #8
 800fa70:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	1c5a      	adds	r2, r3, #1
 800fa78:	60fa      	str	r2, [r7, #12]
 800fa7a:	783a      	ldrb	r2, [r7, #0]
 800fa7c:	701a      	strb	r2, [r3, #0]
 800fa7e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fa82:	f04f 0300 	mov.w	r3, #0
 800fa86:	f04f 0400 	mov.w	r4, #0
 800fa8a:	0a0b      	lsrs	r3, r1, #8
 800fa8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fa90:	0a14      	lsrs	r4, r2, #8
 800fa92:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	1c5a      	adds	r2, r3, #1
 800fa9a:	60fa      	str	r2, [r7, #12]
 800fa9c:	783a      	ldrb	r2, [r7, #0]
 800fa9e:	701a      	strb	r2, [r3, #0]
 800faa0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800faa4:	f04f 0300 	mov.w	r3, #0
 800faa8:	f04f 0400 	mov.w	r4, #0
 800faac:	0a0b      	lsrs	r3, r1, #8
 800faae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fab2:	0a14      	lsrs	r4, r2, #8
 800fab4:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	1c5a      	adds	r2, r3, #1
 800fabc:	60fa      	str	r2, [r7, #12]
 800fabe:	783a      	ldrb	r2, [r7, #0]
 800fac0:	701a      	strb	r2, [r3, #0]
 800fac2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fac6:	f04f 0300 	mov.w	r3, #0
 800faca:	f04f 0400 	mov.w	r4, #0
 800face:	0a0b      	lsrs	r3, r1, #8
 800fad0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fad4:	0a14      	lsrs	r4, r2, #8
 800fad6:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	1c5a      	adds	r2, r3, #1
 800fade:	60fa      	str	r2, [r7, #12]
 800fae0:	783a      	ldrb	r2, [r7, #0]
 800fae2:	701a      	strb	r2, [r3, #0]
 800fae4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fae8:	f04f 0300 	mov.w	r3, #0
 800faec:	f04f 0400 	mov.w	r4, #0
 800faf0:	0a0b      	lsrs	r3, r1, #8
 800faf2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800faf6:	0a14      	lsrs	r4, r2, #8
 800faf8:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	1c5a      	adds	r2, r3, #1
 800fb00:	60fa      	str	r2, [r7, #12]
 800fb02:	783a      	ldrb	r2, [r7, #0]
 800fb04:	701a      	strb	r2, [r3, #0]
}
 800fb06:	bf00      	nop
 800fb08:	3710      	adds	r7, #16
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bc90      	pop	{r4, r7}
 800fb0e:	4770      	bx	lr

0800fb10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fb10:	b480      	push	{r7}
 800fb12:	b087      	sub	sp, #28
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d00d      	beq.n	800fb46 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fb2a:	693a      	ldr	r2, [r7, #16]
 800fb2c:	1c53      	adds	r3, r2, #1
 800fb2e:	613b      	str	r3, [r7, #16]
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	1c59      	adds	r1, r3, #1
 800fb34:	6179      	str	r1, [r7, #20]
 800fb36:	7812      	ldrb	r2, [r2, #0]
 800fb38:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	3b01      	subs	r3, #1
 800fb3e:	607b      	str	r3, [r7, #4]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d1f1      	bne.n	800fb2a <mem_cpy+0x1a>
	}
}
 800fb46:	bf00      	nop
 800fb48:	371c      	adds	r7, #28
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr

0800fb52 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fb52:	b480      	push	{r7}
 800fb54:	b087      	sub	sp, #28
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	60f8      	str	r0, [r7, #12]
 800fb5a:	60b9      	str	r1, [r7, #8]
 800fb5c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	1c5a      	adds	r2, r3, #1
 800fb66:	617a      	str	r2, [r7, #20]
 800fb68:	68ba      	ldr	r2, [r7, #8]
 800fb6a:	b2d2      	uxtb	r2, r2
 800fb6c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	3b01      	subs	r3, #1
 800fb72:	607b      	str	r3, [r7, #4]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d1f3      	bne.n	800fb62 <mem_set+0x10>
}
 800fb7a:	bf00      	nop
 800fb7c:	371c      	adds	r7, #28
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr

0800fb86 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fb86:	b480      	push	{r7}
 800fb88:	b089      	sub	sp, #36	; 0x24
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	60f8      	str	r0, [r7, #12]
 800fb8e:	60b9      	str	r1, [r7, #8]
 800fb90:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	61fb      	str	r3, [r7, #28]
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	1c5a      	adds	r2, r3, #1
 800fba2:	61fa      	str	r2, [r7, #28]
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	4619      	mov	r1, r3
 800fba8:	69bb      	ldr	r3, [r7, #24]
 800fbaa:	1c5a      	adds	r2, r3, #1
 800fbac:	61ba      	str	r2, [r7, #24]
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	1acb      	subs	r3, r1, r3
 800fbb2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	607b      	str	r3, [r7, #4]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d002      	beq.n	800fbc6 <mem_cmp+0x40>
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d0eb      	beq.n	800fb9e <mem_cmp+0x18>

	return r;
 800fbc6:	697b      	ldr	r3, [r7, #20]
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3724      	adds	r7, #36	; 0x24
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr

0800fbd4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fbde:	e002      	b.n	800fbe6 <chk_chr+0x12>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	607b      	str	r3, [r7, #4]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d005      	beq.n	800fbfa <chk_chr+0x26>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d1f2      	bne.n	800fbe0 <chk_chr+0xc>
	return *str;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	781b      	ldrb	r3, [r3, #0]
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	370c      	adds	r7, #12
 800fc02:	46bd      	mov	sp, r7
 800fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc08:	4770      	bx	lr
	...

0800fc0c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b085      	sub	sp, #20
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fc16:	2300      	movs	r3, #0
 800fc18:	60bb      	str	r3, [r7, #8]
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	60fb      	str	r3, [r7, #12]
 800fc1e:	e029      	b.n	800fc74 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fc20:	4a27      	ldr	r2, [pc, #156]	; (800fcc0 <chk_lock+0xb4>)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	011b      	lsls	r3, r3, #4
 800fc26:	4413      	add	r3, r2
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d01d      	beq.n	800fc6a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fc2e:	4a24      	ldr	r2, [pc, #144]	; (800fcc0 <chk_lock+0xb4>)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	011b      	lsls	r3, r3, #4
 800fc34:	4413      	add	r3, r2
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d116      	bne.n	800fc6e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fc40:	4a1f      	ldr	r2, [pc, #124]	; (800fcc0 <chk_lock+0xb4>)
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	011b      	lsls	r3, r3, #4
 800fc46:	4413      	add	r3, r2
 800fc48:	3304      	adds	r3, #4
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d10c      	bne.n	800fc6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fc54:	4a1a      	ldr	r2, [pc, #104]	; (800fcc0 <chk_lock+0xb4>)
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	011b      	lsls	r3, r3, #4
 800fc5a:	4413      	add	r3, r2
 800fc5c:	3308      	adds	r3, #8
 800fc5e:	681a      	ldr	r2, [r3, #0]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d102      	bne.n	800fc6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fc68:	e007      	b.n	800fc7a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	3301      	adds	r3, #1
 800fc72:	60fb      	str	r3, [r7, #12]
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d9d2      	bls.n	800fc20 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	2b02      	cmp	r3, #2
 800fc7e:	d109      	bne.n	800fc94 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d102      	bne.n	800fc8c <chk_lock+0x80>
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	2b02      	cmp	r3, #2
 800fc8a:	d101      	bne.n	800fc90 <chk_lock+0x84>
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	e010      	b.n	800fcb2 <chk_lock+0xa6>
 800fc90:	2312      	movs	r3, #18
 800fc92:	e00e      	b.n	800fcb2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d108      	bne.n	800fcac <chk_lock+0xa0>
 800fc9a:	4a09      	ldr	r2, [pc, #36]	; (800fcc0 <chk_lock+0xb4>)
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	011b      	lsls	r3, r3, #4
 800fca0:	4413      	add	r3, r2
 800fca2:	330c      	adds	r3, #12
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcaa:	d101      	bne.n	800fcb0 <chk_lock+0xa4>
 800fcac:	2310      	movs	r3, #16
 800fcae:	e000      	b.n	800fcb2 <chk_lock+0xa6>
 800fcb0:	2300      	movs	r3, #0
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3714      	adds	r7, #20
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop
 800fcc0:	240000f4 	.word	0x240000f4

0800fcc4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fcca:	2300      	movs	r3, #0
 800fccc:	607b      	str	r3, [r7, #4]
 800fcce:	e002      	b.n	800fcd6 <enq_lock+0x12>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	607b      	str	r3, [r7, #4]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d806      	bhi.n	800fcea <enq_lock+0x26>
 800fcdc:	4a09      	ldr	r2, [pc, #36]	; (800fd04 <enq_lock+0x40>)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	011b      	lsls	r3, r3, #4
 800fce2:	4413      	add	r3, r2
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d1f2      	bne.n	800fcd0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2b02      	cmp	r3, #2
 800fcee:	bf14      	ite	ne
 800fcf0:	2301      	movne	r3, #1
 800fcf2:	2300      	moveq	r3, #0
 800fcf4:	b2db      	uxtb	r3, r3
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	370c      	adds	r7, #12
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr
 800fd02:	bf00      	nop
 800fd04:	240000f4 	.word	0x240000f4

0800fd08 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fd12:	2300      	movs	r3, #0
 800fd14:	60fb      	str	r3, [r7, #12]
 800fd16:	e01f      	b.n	800fd58 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fd18:	4a41      	ldr	r2, [pc, #260]	; (800fe20 <inc_lock+0x118>)
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	011b      	lsls	r3, r3, #4
 800fd1e:	4413      	add	r3, r2
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d113      	bne.n	800fd52 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fd2a:	4a3d      	ldr	r2, [pc, #244]	; (800fe20 <inc_lock+0x118>)
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	011b      	lsls	r3, r3, #4
 800fd30:	4413      	add	r3, r2
 800fd32:	3304      	adds	r3, #4
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d109      	bne.n	800fd52 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fd3e:	4a38      	ldr	r2, [pc, #224]	; (800fe20 <inc_lock+0x118>)
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	011b      	lsls	r3, r3, #4
 800fd44:	4413      	add	r3, r2
 800fd46:	3308      	adds	r3, #8
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d006      	beq.n	800fd60 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	3301      	adds	r3, #1
 800fd56:	60fb      	str	r3, [r7, #12]
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2b01      	cmp	r3, #1
 800fd5c:	d9dc      	bls.n	800fd18 <inc_lock+0x10>
 800fd5e:	e000      	b.n	800fd62 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fd60:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	2b02      	cmp	r3, #2
 800fd66:	d132      	bne.n	800fdce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	60fb      	str	r3, [r7, #12]
 800fd6c:	e002      	b.n	800fd74 <inc_lock+0x6c>
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	3301      	adds	r3, #1
 800fd72:	60fb      	str	r3, [r7, #12]
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d806      	bhi.n	800fd88 <inc_lock+0x80>
 800fd7a:	4a29      	ldr	r2, [pc, #164]	; (800fe20 <inc_lock+0x118>)
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	011b      	lsls	r3, r3, #4
 800fd80:	4413      	add	r3, r2
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d1f2      	bne.n	800fd6e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	2b02      	cmp	r3, #2
 800fd8c:	d101      	bne.n	800fd92 <inc_lock+0x8a>
 800fd8e:	2300      	movs	r3, #0
 800fd90:	e040      	b.n	800fe14 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681a      	ldr	r2, [r3, #0]
 800fd96:	4922      	ldr	r1, [pc, #136]	; (800fe20 <inc_lock+0x118>)
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	011b      	lsls	r3, r3, #4
 800fd9c:	440b      	add	r3, r1
 800fd9e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	689a      	ldr	r2, [r3, #8]
 800fda4:	491e      	ldr	r1, [pc, #120]	; (800fe20 <inc_lock+0x118>)
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	011b      	lsls	r3, r3, #4
 800fdaa:	440b      	add	r3, r1
 800fdac:	3304      	adds	r3, #4
 800fdae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fdb4:	491a      	ldr	r1, [pc, #104]	; (800fe20 <inc_lock+0x118>)
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	011b      	lsls	r3, r3, #4
 800fdba:	440b      	add	r3, r1
 800fdbc:	3308      	adds	r3, #8
 800fdbe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fdc0:	4a17      	ldr	r2, [pc, #92]	; (800fe20 <inc_lock+0x118>)
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	011b      	lsls	r3, r3, #4
 800fdc6:	4413      	add	r3, r2
 800fdc8:	330c      	adds	r3, #12
 800fdca:	2200      	movs	r2, #0
 800fdcc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d009      	beq.n	800fde8 <inc_lock+0xe0>
 800fdd4:	4a12      	ldr	r2, [pc, #72]	; (800fe20 <inc_lock+0x118>)
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	011b      	lsls	r3, r3, #4
 800fdda:	4413      	add	r3, r2
 800fddc:	330c      	adds	r3, #12
 800fdde:	881b      	ldrh	r3, [r3, #0]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d001      	beq.n	800fde8 <inc_lock+0xe0>
 800fde4:	2300      	movs	r3, #0
 800fde6:	e015      	b.n	800fe14 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d108      	bne.n	800fe00 <inc_lock+0xf8>
 800fdee:	4a0c      	ldr	r2, [pc, #48]	; (800fe20 <inc_lock+0x118>)
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	011b      	lsls	r3, r3, #4
 800fdf4:	4413      	add	r3, r2
 800fdf6:	330c      	adds	r3, #12
 800fdf8:	881b      	ldrh	r3, [r3, #0]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	b29a      	uxth	r2, r3
 800fdfe:	e001      	b.n	800fe04 <inc_lock+0xfc>
 800fe00:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fe04:	4906      	ldr	r1, [pc, #24]	; (800fe20 <inc_lock+0x118>)
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	011b      	lsls	r3, r3, #4
 800fe0a:	440b      	add	r3, r1
 800fe0c:	330c      	adds	r3, #12
 800fe0e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	3301      	adds	r3, #1
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3714      	adds	r7, #20
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr
 800fe20:	240000f4 	.word	0x240000f4

0800fe24 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b085      	sub	sp, #20
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	3b01      	subs	r3, #1
 800fe30:	607b      	str	r3, [r7, #4]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d825      	bhi.n	800fe84 <dec_lock+0x60>
		n = Files[i].ctr;
 800fe38:	4a17      	ldr	r2, [pc, #92]	; (800fe98 <dec_lock+0x74>)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	011b      	lsls	r3, r3, #4
 800fe3e:	4413      	add	r3, r2
 800fe40:	330c      	adds	r3, #12
 800fe42:	881b      	ldrh	r3, [r3, #0]
 800fe44:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fe46:	89fb      	ldrh	r3, [r7, #14]
 800fe48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe4c:	d101      	bne.n	800fe52 <dec_lock+0x2e>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fe52:	89fb      	ldrh	r3, [r7, #14]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d002      	beq.n	800fe5e <dec_lock+0x3a>
 800fe58:	89fb      	ldrh	r3, [r7, #14]
 800fe5a:	3b01      	subs	r3, #1
 800fe5c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fe5e:	4a0e      	ldr	r2, [pc, #56]	; (800fe98 <dec_lock+0x74>)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	011b      	lsls	r3, r3, #4
 800fe64:	4413      	add	r3, r2
 800fe66:	330c      	adds	r3, #12
 800fe68:	89fa      	ldrh	r2, [r7, #14]
 800fe6a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fe6c:	89fb      	ldrh	r3, [r7, #14]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d105      	bne.n	800fe7e <dec_lock+0x5a>
 800fe72:	4a09      	ldr	r2, [pc, #36]	; (800fe98 <dec_lock+0x74>)
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	011b      	lsls	r3, r3, #4
 800fe78:	4413      	add	r3, r2
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	737b      	strb	r3, [r7, #13]
 800fe82:	e001      	b.n	800fe88 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fe84:	2302      	movs	r3, #2
 800fe86:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fe88:	7b7b      	ldrb	r3, [r7, #13]
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3714      	adds	r7, #20
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr
 800fe96:	bf00      	nop
 800fe98:	240000f4 	.word	0x240000f4

0800fe9c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b085      	sub	sp, #20
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fea4:	2300      	movs	r3, #0
 800fea6:	60fb      	str	r3, [r7, #12]
 800fea8:	e010      	b.n	800fecc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800feaa:	4a0d      	ldr	r2, [pc, #52]	; (800fee0 <clear_lock+0x44>)
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	011b      	lsls	r3, r3, #4
 800feb0:	4413      	add	r3, r2
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	687a      	ldr	r2, [r7, #4]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d105      	bne.n	800fec6 <clear_lock+0x2a>
 800feba:	4a09      	ldr	r2, [pc, #36]	; (800fee0 <clear_lock+0x44>)
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	011b      	lsls	r3, r3, #4
 800fec0:	4413      	add	r3, r2
 800fec2:	2200      	movs	r2, #0
 800fec4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	3301      	adds	r3, #1
 800feca:	60fb      	str	r3, [r7, #12]
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	2b01      	cmp	r3, #1
 800fed0:	d9eb      	bls.n	800feaa <clear_lock+0xe>
	}
}
 800fed2:	bf00      	nop
 800fed4:	3714      	adds	r7, #20
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr
 800fede:	bf00      	nop
 800fee0:	240000f4 	.word	0x240000f4

0800fee4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b086      	sub	sp, #24
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800feec:	2300      	movs	r3, #0
 800feee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	78db      	ldrb	r3, [r3, #3]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d034      	beq.n	800ff62 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fefc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	7858      	ldrb	r0, [r3, #1]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ff08:	2301      	movs	r3, #1
 800ff0a:	697a      	ldr	r2, [r7, #20]
 800ff0c:	f7ff fbfc 	bl	800f708 <disk_write>
 800ff10:	4603      	mov	r3, r0
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d002      	beq.n	800ff1c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ff16:	2301      	movs	r3, #1
 800ff18:	73fb      	strb	r3, [r7, #15]
 800ff1a:	e022      	b.n	800ff62 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff26:	697a      	ldr	r2, [r7, #20]
 800ff28:	1ad2      	subs	r2, r2, r3
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d217      	bcs.n	800ff62 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	789b      	ldrb	r3, [r3, #2]
 800ff36:	613b      	str	r3, [r7, #16]
 800ff38:	e010      	b.n	800ff5c <sync_window+0x78>
					wsect += fs->fsize;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff3e:	697a      	ldr	r2, [r7, #20]
 800ff40:	4413      	add	r3, r2
 800ff42:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	7858      	ldrb	r0, [r3, #1]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ff4e:	2301      	movs	r3, #1
 800ff50:	697a      	ldr	r2, [r7, #20]
 800ff52:	f7ff fbd9 	bl	800f708 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	3b01      	subs	r3, #1
 800ff5a:	613b      	str	r3, [r7, #16]
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	d8eb      	bhi.n	800ff3a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ff62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3718      	adds	r7, #24
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b084      	sub	sp, #16
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ff76:	2300      	movs	r3, #0
 800ff78:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff7e:	683a      	ldr	r2, [r7, #0]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d01b      	beq.n	800ffbc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f7ff ffad 	bl	800fee4 <sync_window>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ff8e:	7bfb      	ldrb	r3, [r7, #15]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d113      	bne.n	800ffbc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	7858      	ldrb	r0, [r3, #1]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	683a      	ldr	r2, [r7, #0]
 800ffa2:	f7ff fb91 	bl	800f6c8 <disk_read>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d004      	beq.n	800ffb6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ffac:	f04f 33ff 	mov.w	r3, #4294967295
 800ffb0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	683a      	ldr	r2, [r7, #0]
 800ffba:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800ffbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3710      	adds	r7, #16
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
	...

0800ffc8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f7ff ff87 	bl	800fee4 <sync_window>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ffda:	7bfb      	ldrb	r3, [r7, #15]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d159      	bne.n	8010094 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	2b03      	cmp	r3, #3
 800ffe6:	d149      	bne.n	801007c <sync_fs+0xb4>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	791b      	ldrb	r3, [r3, #4]
 800ffec:	2b01      	cmp	r3, #1
 800ffee:	d145      	bne.n	801007c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	899b      	ldrh	r3, [r3, #12]
 800fffa:	461a      	mov	r2, r3
 800fffc:	2100      	movs	r1, #0
 800fffe:	f7ff fda8 	bl	800fb52 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	333c      	adds	r3, #60	; 0x3c
 8010006:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801000a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801000e:	4618      	mov	r0, r3
 8010010:	f7ff fcb0 	bl	800f974 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	333c      	adds	r3, #60	; 0x3c
 8010018:	4921      	ldr	r1, [pc, #132]	; (80100a0 <sync_fs+0xd8>)
 801001a:	4618      	mov	r0, r3
 801001c:	f7ff fcc5 	bl	800f9aa <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	333c      	adds	r3, #60	; 0x3c
 8010024:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010028:	491e      	ldr	r1, [pc, #120]	; (80100a4 <sync_fs+0xdc>)
 801002a:	4618      	mov	r0, r3
 801002c:	f7ff fcbd 	bl	800f9aa <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	333c      	adds	r3, #60	; 0x3c
 8010034:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	69db      	ldr	r3, [r3, #28]
 801003c:	4619      	mov	r1, r3
 801003e:	4610      	mov	r0, r2
 8010040:	f7ff fcb3 	bl	800f9aa <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	333c      	adds	r3, #60	; 0x3c
 8010048:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	699b      	ldr	r3, [r3, #24]
 8010050:	4619      	mov	r1, r3
 8010052:	4610      	mov	r0, r2
 8010054:	f7ff fca9 	bl	800f9aa <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801005c:	1c5a      	adds	r2, r3, #1
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	7858      	ldrb	r0, [r3, #1]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010070:	2301      	movs	r3, #1
 8010072:	f7ff fb49 	bl	800f708 <disk_write>
			fs->fsi_flag = 0;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2200      	movs	r2, #0
 801007a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	785b      	ldrb	r3, [r3, #1]
 8010080:	2200      	movs	r2, #0
 8010082:	2100      	movs	r1, #0
 8010084:	4618      	mov	r0, r3
 8010086:	f7ff fb5f 	bl	800f748 <disk_ioctl>
 801008a:	4603      	mov	r3, r0
 801008c:	2b00      	cmp	r3, #0
 801008e:	d001      	beq.n	8010094 <sync_fs+0xcc>
 8010090:	2301      	movs	r3, #1
 8010092:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010094:	7bfb      	ldrb	r3, [r7, #15]
}
 8010096:	4618      	mov	r0, r3
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	41615252 	.word	0x41615252
 80100a4:	61417272 	.word	0x61417272

080100a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	3b02      	subs	r3, #2
 80100b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6a1b      	ldr	r3, [r3, #32]
 80100bc:	3b02      	subs	r3, #2
 80100be:	683a      	ldr	r2, [r7, #0]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d301      	bcc.n	80100c8 <clust2sect+0x20>
 80100c4:	2300      	movs	r3, #0
 80100c6:	e008      	b.n	80100da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	895b      	ldrh	r3, [r3, #10]
 80100cc:	461a      	mov	r2, r3
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	fb03 f202 	mul.w	r2, r3, r2
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100d8:	4413      	add	r3, r2
}
 80100da:	4618      	mov	r0, r3
 80100dc:	370c      	adds	r7, #12
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr
	...

080100e8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80100e8:	b590      	push	{r4, r7, lr}
 80100ea:	b089      	sub	sp, #36	; 0x24
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d904      	bls.n	8010108 <get_fat+0x20>
 80100fe:	69bb      	ldr	r3, [r7, #24]
 8010100:	6a1b      	ldr	r3, [r3, #32]
 8010102:	683a      	ldr	r2, [r7, #0]
 8010104:	429a      	cmp	r2, r3
 8010106:	d302      	bcc.n	801010e <get_fat+0x26>
		val = 1;	/* Internal error */
 8010108:	2301      	movs	r3, #1
 801010a:	61fb      	str	r3, [r7, #28]
 801010c:	e13a      	b.n	8010384 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801010e:	f04f 33ff 	mov.w	r3, #4294967295
 8010112:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8010114:	69bb      	ldr	r3, [r7, #24]
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	3b01      	subs	r3, #1
 801011a:	2b03      	cmp	r3, #3
 801011c:	f200 8126 	bhi.w	801036c <get_fat+0x284>
 8010120:	a201      	add	r2, pc, #4	; (adr r2, 8010128 <get_fat+0x40>)
 8010122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010126:	bf00      	nop
 8010128:	08010139 	.word	0x08010139
 801012c:	080101e7 	.word	0x080101e7
 8010130:	08010233 	.word	0x08010233
 8010134:	08010283 	.word	0x08010283
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	60fb      	str	r3, [r7, #12]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	085b      	lsrs	r3, r3, #1
 8010140:	68fa      	ldr	r2, [r7, #12]
 8010142:	4413      	add	r3, r2
 8010144:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801014a:	69bb      	ldr	r3, [r7, #24]
 801014c:	899b      	ldrh	r3, [r3, #12]
 801014e:	4619      	mov	r1, r3
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	fbb3 f3f1 	udiv	r3, r3, r1
 8010156:	4413      	add	r3, r2
 8010158:	4619      	mov	r1, r3
 801015a:	69b8      	ldr	r0, [r7, #24]
 801015c:	f7ff ff06 	bl	800ff6c <move_window>
 8010160:	4603      	mov	r3, r0
 8010162:	2b00      	cmp	r3, #0
 8010164:	f040 8105 	bne.w	8010372 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	1c5a      	adds	r2, r3, #1
 801016c:	60fa      	str	r2, [r7, #12]
 801016e:	69ba      	ldr	r2, [r7, #24]
 8010170:	8992      	ldrh	r2, [r2, #12]
 8010172:	fbb3 f1f2 	udiv	r1, r3, r2
 8010176:	fb02 f201 	mul.w	r2, r2, r1
 801017a:	1a9b      	subs	r3, r3, r2
 801017c:	69ba      	ldr	r2, [r7, #24]
 801017e:	4413      	add	r3, r2
 8010180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010184:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801018a:	69bb      	ldr	r3, [r7, #24]
 801018c:	899b      	ldrh	r3, [r3, #12]
 801018e:	4619      	mov	r1, r3
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	fbb3 f3f1 	udiv	r3, r3, r1
 8010196:	4413      	add	r3, r2
 8010198:	4619      	mov	r1, r3
 801019a:	69b8      	ldr	r0, [r7, #24]
 801019c:	f7ff fee6 	bl	800ff6c <move_window>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f040 80e7 	bne.w	8010376 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80101a8:	69bb      	ldr	r3, [r7, #24]
 80101aa:	899b      	ldrh	r3, [r3, #12]
 80101ac:	461a      	mov	r2, r3
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80101b4:	fb02 f201 	mul.w	r2, r2, r1
 80101b8:	1a9b      	subs	r3, r3, r2
 80101ba:	69ba      	ldr	r2, [r7, #24]
 80101bc:	4413      	add	r3, r2
 80101be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80101c2:	021b      	lsls	r3, r3, #8
 80101c4:	461a      	mov	r2, r3
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	4313      	orrs	r3, r2
 80101ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	f003 0301 	and.w	r3, r3, #1
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d002      	beq.n	80101dc <get_fat+0xf4>
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	091b      	lsrs	r3, r3, #4
 80101da:	e002      	b.n	80101e2 <get_fat+0xfa>
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80101e2:	61fb      	str	r3, [r7, #28]
			break;
 80101e4:	e0ce      	b.n	8010384 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80101e6:	69bb      	ldr	r3, [r7, #24]
 80101e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	899b      	ldrh	r3, [r3, #12]
 80101ee:	085b      	lsrs	r3, r3, #1
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	4619      	mov	r1, r3
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80101fa:	4413      	add	r3, r2
 80101fc:	4619      	mov	r1, r3
 80101fe:	69b8      	ldr	r0, [r7, #24]
 8010200:	f7ff feb4 	bl	800ff6c <move_window>
 8010204:	4603      	mov	r3, r0
 8010206:	2b00      	cmp	r3, #0
 8010208:	f040 80b7 	bne.w	801037a <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801020c:	69bb      	ldr	r3, [r7, #24]
 801020e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	005b      	lsls	r3, r3, #1
 8010216:	69ba      	ldr	r2, [r7, #24]
 8010218:	8992      	ldrh	r2, [r2, #12]
 801021a:	fbb3 f0f2 	udiv	r0, r3, r2
 801021e:	fb02 f200 	mul.w	r2, r2, r0
 8010222:	1a9b      	subs	r3, r3, r2
 8010224:	440b      	add	r3, r1
 8010226:	4618      	mov	r0, r3
 8010228:	f7ff faac 	bl	800f784 <ld_word>
 801022c:	4603      	mov	r3, r0
 801022e:	61fb      	str	r3, [r7, #28]
			break;
 8010230:	e0a8      	b.n	8010384 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	899b      	ldrh	r3, [r3, #12]
 801023a:	089b      	lsrs	r3, r3, #2
 801023c:	b29b      	uxth	r3, r3
 801023e:	4619      	mov	r1, r3
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	fbb3 f3f1 	udiv	r3, r3, r1
 8010246:	4413      	add	r3, r2
 8010248:	4619      	mov	r1, r3
 801024a:	69b8      	ldr	r0, [r7, #24]
 801024c:	f7ff fe8e 	bl	800ff6c <move_window>
 8010250:	4603      	mov	r3, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	f040 8093 	bne.w	801037e <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010258:	69bb      	ldr	r3, [r7, #24]
 801025a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	009b      	lsls	r3, r3, #2
 8010262:	69ba      	ldr	r2, [r7, #24]
 8010264:	8992      	ldrh	r2, [r2, #12]
 8010266:	fbb3 f0f2 	udiv	r0, r3, r2
 801026a:	fb02 f200 	mul.w	r2, r2, r0
 801026e:	1a9b      	subs	r3, r3, r2
 8010270:	440b      	add	r3, r1
 8010272:	4618      	mov	r0, r3
 8010274:	f7ff fa9e 	bl	800f7b4 <ld_dword>
 8010278:	4603      	mov	r3, r0
 801027a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801027e:	61fb      	str	r3, [r7, #28]
			break;
 8010280:	e080      	b.n	8010384 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010288:	4323      	orrs	r3, r4
 801028a:	d06f      	beq.n	801036c <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	689b      	ldr	r3, [r3, #8]
 8010290:	683a      	ldr	r2, [r7, #0]
 8010292:	1ad3      	subs	r3, r2, r3
 8010294:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801029c:	f113 30ff 	adds.w	r0, r3, #4294967295
 80102a0:	f144 31ff 	adc.w	r1, r4, #4294967295
 80102a4:	69bb      	ldr	r3, [r7, #24]
 80102a6:	899b      	ldrh	r3, [r3, #12]
 80102a8:	b29b      	uxth	r3, r3
 80102aa:	f04f 0400 	mov.w	r4, #0
 80102ae:	461a      	mov	r2, r3
 80102b0:	4623      	mov	r3, r4
 80102b2:	f7f0 f811 	bl	80002d8 <__aeabi_uldivmod>
 80102b6:	4603      	mov	r3, r0
 80102b8:	460c      	mov	r4, r1
 80102ba:	461a      	mov	r2, r3
 80102bc:	69bb      	ldr	r3, [r7, #24]
 80102be:	895b      	ldrh	r3, [r3, #10]
 80102c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80102c4:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	79db      	ldrb	r3, [r3, #7]
 80102ca:	2b02      	cmp	r3, #2
 80102cc:	d10e      	bne.n	80102ec <get_fat+0x204>
					if (cofs <= clen) {
 80102ce:	697a      	ldr	r2, [r7, #20]
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d80a      	bhi.n	80102ec <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80102d6:	697a      	ldr	r2, [r7, #20]
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d002      	beq.n	80102e4 <get_fat+0x1fc>
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	3301      	adds	r3, #1
 80102e2:	e001      	b.n	80102e8 <get_fat+0x200>
 80102e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80102e8:	61fb      	str	r3, [r7, #28]
						break;
 80102ea:	e04b      	b.n	8010384 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	79db      	ldrb	r3, [r3, #7]
 80102f0:	2b03      	cmp	r3, #3
 80102f2:	d108      	bne.n	8010306 <get_fat+0x21e>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	699b      	ldr	r3, [r3, #24]
 80102f8:	697a      	ldr	r2, [r7, #20]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d203      	bcs.n	8010306 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	3301      	adds	r3, #1
 8010302:	61fb      	str	r3, [r7, #28]
					break;
 8010304:	e03e      	b.n	8010384 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	79db      	ldrb	r3, [r3, #7]
 801030a:	2b02      	cmp	r3, #2
 801030c:	d02e      	beq.n	801036c <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	69db      	ldr	r3, [r3, #28]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d003      	beq.n	801031e <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8010316:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801031a:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 801031c:	e032      	b.n	8010384 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801031e:	69bb      	ldr	r3, [r7, #24]
 8010320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010322:	69bb      	ldr	r3, [r7, #24]
 8010324:	899b      	ldrh	r3, [r3, #12]
 8010326:	089b      	lsrs	r3, r3, #2
 8010328:	b29b      	uxth	r3, r3
 801032a:	4619      	mov	r1, r3
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010332:	4413      	add	r3, r2
 8010334:	4619      	mov	r1, r3
 8010336:	69b8      	ldr	r0, [r7, #24]
 8010338:	f7ff fe18 	bl	800ff6c <move_window>
 801033c:	4603      	mov	r3, r0
 801033e:	2b00      	cmp	r3, #0
 8010340:	d11f      	bne.n	8010382 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8010342:	69bb      	ldr	r3, [r7, #24]
 8010344:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	69ba      	ldr	r2, [r7, #24]
 801034e:	8992      	ldrh	r2, [r2, #12]
 8010350:	fbb3 f0f2 	udiv	r0, r3, r2
 8010354:	fb02 f200 	mul.w	r2, r2, r0
 8010358:	1a9b      	subs	r3, r3, r2
 801035a:	440b      	add	r3, r1
 801035c:	4618      	mov	r0, r3
 801035e:	f7ff fa29 	bl	800f7b4 <ld_dword>
 8010362:	4603      	mov	r3, r0
 8010364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010368:	61fb      	str	r3, [r7, #28]
					break;
 801036a:	e00b      	b.n	8010384 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801036c:	2301      	movs	r3, #1
 801036e:	61fb      	str	r3, [r7, #28]
 8010370:	e008      	b.n	8010384 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010372:	bf00      	nop
 8010374:	e006      	b.n	8010384 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010376:	bf00      	nop
 8010378:	e004      	b.n	8010384 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801037a:	bf00      	nop
 801037c:	e002      	b.n	8010384 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801037e:	bf00      	nop
 8010380:	e000      	b.n	8010384 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010382:	bf00      	nop
		}
	}

	return val;
 8010384:	69fb      	ldr	r3, [r7, #28]
}
 8010386:	4618      	mov	r0, r3
 8010388:	3724      	adds	r7, #36	; 0x24
 801038a:	46bd      	mov	sp, r7
 801038c:	bd90      	pop	{r4, r7, pc}
 801038e:	bf00      	nop

08010390 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010390:	b590      	push	{r4, r7, lr}
 8010392:	b089      	sub	sp, #36	; 0x24
 8010394:	af00      	add	r7, sp, #0
 8010396:	60f8      	str	r0, [r7, #12]
 8010398:	60b9      	str	r1, [r7, #8]
 801039a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801039c:	2302      	movs	r3, #2
 801039e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	f240 8111 	bls.w	80105ca <put_fat+0x23a>
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6a1b      	ldr	r3, [r3, #32]
 80103ac:	68ba      	ldr	r2, [r7, #8]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	f080 810b 	bcs.w	80105ca <put_fat+0x23a>
		switch (fs->fs_type) {
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	3b01      	subs	r3, #1
 80103ba:	2b03      	cmp	r3, #3
 80103bc:	f200 8105 	bhi.w	80105ca <put_fat+0x23a>
 80103c0:	a201      	add	r2, pc, #4	; (adr r2, 80103c8 <put_fat+0x38>)
 80103c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103c6:	bf00      	nop
 80103c8:	080103d9 	.word	0x080103d9
 80103cc:	080104dd 	.word	0x080104dd
 80103d0:	08010533 	.word	0x08010533
 80103d4:	08010533 	.word	0x08010533
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	61bb      	str	r3, [r7, #24]
 80103dc:	69bb      	ldr	r3, [r7, #24]
 80103de:	085b      	lsrs	r3, r3, #1
 80103e0:	69ba      	ldr	r2, [r7, #24]
 80103e2:	4413      	add	r3, r2
 80103e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	899b      	ldrh	r3, [r3, #12]
 80103ee:	4619      	mov	r1, r3
 80103f0:	69bb      	ldr	r3, [r7, #24]
 80103f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80103f6:	4413      	add	r3, r2
 80103f8:	4619      	mov	r1, r3
 80103fa:	68f8      	ldr	r0, [r7, #12]
 80103fc:	f7ff fdb6 	bl	800ff6c <move_window>
 8010400:	4603      	mov	r3, r0
 8010402:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010404:	7ffb      	ldrb	r3, [r7, #31]
 8010406:	2b00      	cmp	r3, #0
 8010408:	f040 80d8 	bne.w	80105bc <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010412:	69bb      	ldr	r3, [r7, #24]
 8010414:	1c5a      	adds	r2, r3, #1
 8010416:	61ba      	str	r2, [r7, #24]
 8010418:	68fa      	ldr	r2, [r7, #12]
 801041a:	8992      	ldrh	r2, [r2, #12]
 801041c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010420:	fb02 f200 	mul.w	r2, r2, r0
 8010424:	1a9b      	subs	r3, r3, r2
 8010426:	440b      	add	r3, r1
 8010428:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	f003 0301 	and.w	r3, r3, #1
 8010430:	2b00      	cmp	r3, #0
 8010432:	d00d      	beq.n	8010450 <put_fat+0xc0>
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	b25b      	sxtb	r3, r3
 801043a:	f003 030f 	and.w	r3, r3, #15
 801043e:	b25a      	sxtb	r2, r3
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	b2db      	uxtb	r3, r3
 8010444:	011b      	lsls	r3, r3, #4
 8010446:	b25b      	sxtb	r3, r3
 8010448:	4313      	orrs	r3, r2
 801044a:	b25b      	sxtb	r3, r3
 801044c:	b2db      	uxtb	r3, r3
 801044e:	e001      	b.n	8010454 <put_fat+0xc4>
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	b2db      	uxtb	r3, r3
 8010454:	697a      	ldr	r2, [r7, #20]
 8010456:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2201      	movs	r2, #1
 801045c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	899b      	ldrh	r3, [r3, #12]
 8010466:	4619      	mov	r1, r3
 8010468:	69bb      	ldr	r3, [r7, #24]
 801046a:	fbb3 f3f1 	udiv	r3, r3, r1
 801046e:	4413      	add	r3, r2
 8010470:	4619      	mov	r1, r3
 8010472:	68f8      	ldr	r0, [r7, #12]
 8010474:	f7ff fd7a 	bl	800ff6c <move_window>
 8010478:	4603      	mov	r3, r0
 801047a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801047c:	7ffb      	ldrb	r3, [r7, #31]
 801047e:	2b00      	cmp	r3, #0
 8010480:	f040 809e 	bne.w	80105c0 <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	899b      	ldrh	r3, [r3, #12]
 801048e:	461a      	mov	r2, r3
 8010490:	69bb      	ldr	r3, [r7, #24]
 8010492:	fbb3 f0f2 	udiv	r0, r3, r2
 8010496:	fb02 f200 	mul.w	r2, r2, r0
 801049a:	1a9b      	subs	r3, r3, r2
 801049c:	440b      	add	r3, r1
 801049e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	f003 0301 	and.w	r3, r3, #1
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d003      	beq.n	80104b2 <put_fat+0x122>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	091b      	lsrs	r3, r3, #4
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	e00e      	b.n	80104d0 <put_fat+0x140>
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	b25b      	sxtb	r3, r3
 80104b8:	f023 030f 	bic.w	r3, r3, #15
 80104bc:	b25a      	sxtb	r2, r3
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	0a1b      	lsrs	r3, r3, #8
 80104c2:	b25b      	sxtb	r3, r3
 80104c4:	f003 030f 	and.w	r3, r3, #15
 80104c8:	b25b      	sxtb	r3, r3
 80104ca:	4313      	orrs	r3, r2
 80104cc:	b25b      	sxtb	r3, r3
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	697a      	ldr	r2, [r7, #20]
 80104d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2201      	movs	r2, #1
 80104d8:	70da      	strb	r2, [r3, #3]
			break;
 80104da:	e076      	b.n	80105ca <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	899b      	ldrh	r3, [r3, #12]
 80104e4:	085b      	lsrs	r3, r3, #1
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	4619      	mov	r1, r3
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80104f0:	4413      	add	r3, r2
 80104f2:	4619      	mov	r1, r3
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f7ff fd39 	bl	800ff6c <move_window>
 80104fa:	4603      	mov	r3, r0
 80104fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80104fe:	7ffb      	ldrb	r3, [r7, #31]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d15f      	bne.n	80105c4 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	005b      	lsls	r3, r3, #1
 801050e:	68fa      	ldr	r2, [r7, #12]
 8010510:	8992      	ldrh	r2, [r2, #12]
 8010512:	fbb3 f0f2 	udiv	r0, r3, r2
 8010516:	fb02 f200 	mul.w	r2, r2, r0
 801051a:	1a9b      	subs	r3, r3, r2
 801051c:	440b      	add	r3, r1
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	b292      	uxth	r2, r2
 8010522:	4611      	mov	r1, r2
 8010524:	4618      	mov	r0, r3
 8010526:	f7ff fa25 	bl	800f974 <st_word>
			fs->wflag = 1;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2201      	movs	r2, #1
 801052e:	70da      	strb	r2, [r3, #3]
			break;
 8010530:	e04b      	b.n	80105ca <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	899b      	ldrh	r3, [r3, #12]
 801053a:	089b      	lsrs	r3, r3, #2
 801053c:	b29b      	uxth	r3, r3
 801053e:	4619      	mov	r1, r3
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	fbb3 f3f1 	udiv	r3, r3, r1
 8010546:	4413      	add	r3, r2
 8010548:	4619      	mov	r1, r3
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	f7ff fd0e 	bl	800ff6c <move_window>
 8010550:	4603      	mov	r3, r0
 8010552:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010554:	7ffb      	ldrb	r3, [r7, #31]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d136      	bne.n	80105c8 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	2b04      	cmp	r3, #4
 8010560:	d017      	beq.n	8010592 <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	009b      	lsls	r3, r3, #2
 8010572:	68fa      	ldr	r2, [r7, #12]
 8010574:	8992      	ldrh	r2, [r2, #12]
 8010576:	fbb3 f0f2 	udiv	r0, r3, r2
 801057a:	fb02 f200 	mul.w	r2, r2, r0
 801057e:	1a9b      	subs	r3, r3, r2
 8010580:	440b      	add	r3, r1
 8010582:	4618      	mov	r0, r3
 8010584:	f7ff f916 	bl	800f7b4 <ld_dword>
 8010588:	4603      	mov	r3, r0
 801058a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801058e:	4323      	orrs	r3, r4
 8010590:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	009b      	lsls	r3, r3, #2
 801059c:	68fa      	ldr	r2, [r7, #12]
 801059e:	8992      	ldrh	r2, [r2, #12]
 80105a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80105a4:	fb02 f200 	mul.w	r2, r2, r0
 80105a8:	1a9b      	subs	r3, r3, r2
 80105aa:	440b      	add	r3, r1
 80105ac:	6879      	ldr	r1, [r7, #4]
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7ff f9fb 	bl	800f9aa <st_dword>
			fs->wflag = 1;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	2201      	movs	r2, #1
 80105b8:	70da      	strb	r2, [r3, #3]
			break;
 80105ba:	e006      	b.n	80105ca <put_fat+0x23a>
			if (res != FR_OK) break;
 80105bc:	bf00      	nop
 80105be:	e004      	b.n	80105ca <put_fat+0x23a>
			if (res != FR_OK) break;
 80105c0:	bf00      	nop
 80105c2:	e002      	b.n	80105ca <put_fat+0x23a>
			if (res != FR_OK) break;
 80105c4:	bf00      	nop
 80105c6:	e000      	b.n	80105ca <put_fat+0x23a>
			if (res != FR_OK) break;
 80105c8:	bf00      	nop
		}
	}
	return res;
 80105ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3724      	adds	r7, #36	; 0x24
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd90      	pop	{r4, r7, pc}

080105d4 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b08a      	sub	sp, #40	; 0x28
 80105d8:	af00      	add	r7, sp, #0
 80105da:	60f8      	str	r0, [r7, #12]
 80105dc:	60b9      	str	r1, [r7, #8]
 80105de:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	3b02      	subs	r3, #2
 80105e4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	6a1b      	ldr	r3, [r3, #32]
 80105ea:	3b02      	subs	r3, #2
 80105ec:	68ba      	ldr	r2, [r7, #8]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d301      	bcc.n	80105f6 <find_bitmap+0x22>
 80105f2:	2300      	movs	r3, #0
 80105f4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	61fb      	str	r3, [r7, #28]
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	61bb      	str	r3, [r7, #24]
 80105fe:	2300      	movs	r3, #0
 8010600:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010606:	69fb      	ldr	r3, [r7, #28]
 8010608:	08db      	lsrs	r3, r3, #3
 801060a:	68f9      	ldr	r1, [r7, #12]
 801060c:	8989      	ldrh	r1, [r1, #12]
 801060e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010612:	4413      	add	r3, r2
 8010614:	4619      	mov	r1, r3
 8010616:	68f8      	ldr	r0, [r7, #12]
 8010618:	f7ff fca8 	bl	800ff6c <move_window>
 801061c:	4603      	mov	r3, r0
 801061e:	2b00      	cmp	r3, #0
 8010620:	d002      	beq.n	8010628 <find_bitmap+0x54>
 8010622:	f04f 33ff 	mov.w	r3, #4294967295
 8010626:	e058      	b.n	80106da <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	08db      	lsrs	r3, r3, #3
 801062c:	68fa      	ldr	r2, [r7, #12]
 801062e:	8992      	ldrh	r2, [r2, #12]
 8010630:	fbb3 f1f2 	udiv	r1, r3, r2
 8010634:	fb02 f201 	mul.w	r2, r2, r1
 8010638:	1a9b      	subs	r3, r3, r2
 801063a:	623b      	str	r3, [r7, #32]
 801063c:	69fb      	ldr	r3, [r7, #28]
 801063e:	f003 0307 	and.w	r3, r3, #7
 8010642:	2201      	movs	r2, #1
 8010644:	fa02 f303 	lsl.w	r3, r2, r3
 8010648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	6a3b      	ldr	r3, [r7, #32]
 8010650:	4413      	add	r3, r2
 8010652:	333c      	adds	r3, #60	; 0x3c
 8010654:	781a      	ldrb	r2, [r3, #0]
 8010656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801065a:	4013      	ands	r3, r2
 801065c:	74fb      	strb	r3, [r7, #19]
 801065e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010662:	005b      	lsls	r3, r3, #1
 8010664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	3301      	adds	r3, #1
 801066c:	61fb      	str	r3, [r7, #28]
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	6a1b      	ldr	r3, [r3, #32]
 8010672:	3b02      	subs	r3, #2
 8010674:	69fa      	ldr	r2, [r7, #28]
 8010676:	429a      	cmp	r2, r3
 8010678:	d307      	bcc.n	801068a <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 801067a:	2300      	movs	r3, #0
 801067c:	61fb      	str	r3, [r7, #28]
 801067e:	2300      	movs	r3, #0
 8010680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	899b      	ldrh	r3, [r3, #12]
 8010688:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 801068a:	7cfb      	ldrb	r3, [r7, #19]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d109      	bne.n	80106a4 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	3301      	adds	r3, #1
 8010694:	617b      	str	r3, [r7, #20]
 8010696:	697a      	ldr	r2, [r7, #20]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	429a      	cmp	r2, r3
 801069c:	d106      	bne.n	80106ac <find_bitmap+0xd8>
 801069e:	69bb      	ldr	r3, [r7, #24]
 80106a0:	3302      	adds	r3, #2
 80106a2:	e01a      	b.n	80106da <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	61bb      	str	r3, [r7, #24]
 80106a8:	2300      	movs	r3, #0
 80106aa:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80106ac:	69fa      	ldr	r2, [r7, #28]
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d101      	bne.n	80106b8 <find_bitmap+0xe4>
 80106b4:	2300      	movs	r3, #0
 80106b6:	e010      	b.n	80106da <find_bitmap+0x106>
			} while (bm);
 80106b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d1c5      	bne.n	801064c <find_bitmap+0x78>
			bm = 1;
 80106c0:	2301      	movs	r3, #1
 80106c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 80106c6:	6a3b      	ldr	r3, [r7, #32]
 80106c8:	3301      	adds	r3, #1
 80106ca:	623b      	str	r3, [r7, #32]
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	899b      	ldrh	r3, [r3, #12]
 80106d0:	461a      	mov	r2, r3
 80106d2:	6a3b      	ldr	r3, [r7, #32]
 80106d4:	4293      	cmp	r3, r2
 80106d6:	d3b9      	bcc.n	801064c <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80106d8:	e793      	b.n	8010602 <find_bitmap+0x2e>
	}
}
 80106da:	4618      	mov	r0, r3
 80106dc:	3728      	adds	r7, #40	; 0x28
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}

080106e2 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 80106e2:	b580      	push	{r7, lr}
 80106e4:	b088      	sub	sp, #32
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	60f8      	str	r0, [r7, #12]
 80106ea:	60b9      	str	r1, [r7, #8]
 80106ec:	607a      	str	r2, [r7, #4]
 80106ee:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	3b02      	subs	r3, #2
 80106f4:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	08db      	lsrs	r3, r3, #3
 80106fe:	68f9      	ldr	r1, [r7, #12]
 8010700:	8989      	ldrh	r1, [r1, #12]
 8010702:	fbb3 f3f1 	udiv	r3, r3, r1
 8010706:	4413      	add	r3, r2
 8010708:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	08db      	lsrs	r3, r3, #3
 801070e:	68fa      	ldr	r2, [r7, #12]
 8010710:	8992      	ldrh	r2, [r2, #12]
 8010712:	fbb3 f1f2 	udiv	r1, r3, r2
 8010716:	fb02 f201 	mul.w	r2, r2, r1
 801071a:	1a9b      	subs	r3, r3, r2
 801071c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	f003 0307 	and.w	r3, r3, #7
 8010724:	2201      	movs	r2, #1
 8010726:	fa02 f303 	lsl.w	r3, r2, r3
 801072a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	1c5a      	adds	r2, r3, #1
 8010730:	617a      	str	r2, [r7, #20]
 8010732:	4619      	mov	r1, r3
 8010734:	68f8      	ldr	r0, [r7, #12]
 8010736:	f7ff fc19 	bl	800ff6c <move_window>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d001      	beq.n	8010744 <change_bitmap+0x62>
 8010740:	2301      	movs	r3, #1
 8010742:	e03f      	b.n	80107c4 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8010744:	68fa      	ldr	r2, [r7, #12]
 8010746:	69bb      	ldr	r3, [r7, #24]
 8010748:	4413      	add	r3, r2
 801074a:	333c      	adds	r3, #60	; 0x3c
 801074c:	781a      	ldrb	r2, [r3, #0]
 801074e:	7ffb      	ldrb	r3, [r7, #31]
 8010750:	4013      	ands	r3, r2
 8010752:	b2db      	uxtb	r3, r3
 8010754:	2b00      	cmp	r3, #0
 8010756:	bf14      	ite	ne
 8010758:	2301      	movne	r3, #1
 801075a:	2300      	moveq	r3, #0
 801075c:	b2db      	uxtb	r3, r3
 801075e:	461a      	mov	r2, r3
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	4293      	cmp	r3, r2
 8010764:	d101      	bne.n	801076a <change_bitmap+0x88>
 8010766:	2302      	movs	r3, #2
 8010768:	e02c      	b.n	80107c4 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	69bb      	ldr	r3, [r7, #24]
 801076e:	4413      	add	r3, r2
 8010770:	333c      	adds	r3, #60	; 0x3c
 8010772:	781a      	ldrb	r2, [r3, #0]
 8010774:	7ffb      	ldrb	r3, [r7, #31]
 8010776:	4053      	eors	r3, r2
 8010778:	b2d9      	uxtb	r1, r3
 801077a:	68fa      	ldr	r2, [r7, #12]
 801077c:	69bb      	ldr	r3, [r7, #24]
 801077e:	4413      	add	r3, r2
 8010780:	333c      	adds	r3, #60	; 0x3c
 8010782:	460a      	mov	r2, r1
 8010784:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	2201      	movs	r2, #1
 801078a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	3b01      	subs	r3, #1
 8010790:	607b      	str	r3, [r7, #4]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d101      	bne.n	801079c <change_bitmap+0xba>
 8010798:	2300      	movs	r3, #0
 801079a:	e013      	b.n	80107c4 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 801079c:	7ffb      	ldrb	r3, [r7, #31]
 801079e:	005b      	lsls	r3, r3, #1
 80107a0:	77fb      	strb	r3, [r7, #31]
 80107a2:	7ffb      	ldrb	r3, [r7, #31]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d1cd      	bne.n	8010744 <change_bitmap+0x62>
			bm = 1;
 80107a8:	2301      	movs	r3, #1
 80107aa:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 80107ac:	69bb      	ldr	r3, [r7, #24]
 80107ae:	3301      	adds	r3, #1
 80107b0:	61bb      	str	r3, [r7, #24]
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	899b      	ldrh	r3, [r3, #12]
 80107b6:	461a      	mov	r2, r3
 80107b8:	69bb      	ldr	r3, [r7, #24]
 80107ba:	4293      	cmp	r3, r2
 80107bc:	d3c2      	bcc.n	8010744 <change_bitmap+0x62>
		i = 0;
 80107be:	2300      	movs	r3, #0
 80107c0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80107c2:	e7b3      	b.n	801072c <change_bitmap+0x4a>
	}
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3720      	adds	r7, #32
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b086      	sub	sp, #24
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	79db      	ldrb	r3, [r3, #7]
 80107d8:	2b03      	cmp	r3, #3
 80107da:	d121      	bne.n	8010820 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	689b      	ldr	r3, [r3, #8]
 80107e0:	617b      	str	r3, [r7, #20]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	699b      	ldr	r3, [r3, #24]
 80107e6:	613b      	str	r3, [r7, #16]
 80107e8:	e014      	b.n	8010814 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	6818      	ldr	r0, [r3, #0]
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	3301      	adds	r3, #1
 80107f2:	461a      	mov	r2, r3
 80107f4:	6979      	ldr	r1, [r7, #20]
 80107f6:	f7ff fdcb 	bl	8010390 <put_fat>
 80107fa:	4603      	mov	r3, r0
 80107fc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 80107fe:	7bfb      	ldrb	r3, [r7, #15]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d001      	beq.n	8010808 <fill_first_frag+0x3c>
 8010804:	7bfb      	ldrb	r3, [r7, #15]
 8010806:	e00c      	b.n	8010822 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	3301      	adds	r3, #1
 801080c:	617b      	str	r3, [r7, #20]
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	3b01      	subs	r3, #1
 8010812:	613b      	str	r3, [r7, #16]
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d1e7      	bne.n	80107ea <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2200      	movs	r2, #0
 801081e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8010820:	2300      	movs	r3, #0
}
 8010822:	4618      	mov	r0, r3
 8010824:	3718      	adds	r7, #24
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}

0801082a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 801082a:	b580      	push	{r7, lr}
 801082c:	b086      	sub	sp, #24
 801082e:	af00      	add	r7, sp, #0
 8010830:	60f8      	str	r0, [r7, #12]
 8010832:	60b9      	str	r1, [r7, #8]
 8010834:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8010836:	e020      	b.n	801087a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	6818      	ldr	r0, [r3, #0]
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	69db      	ldr	r3, [r3, #28]
 8010840:	68ba      	ldr	r2, [r7, #8]
 8010842:	1ad3      	subs	r3, r2, r3
 8010844:	1c59      	adds	r1, r3, #1
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	69db      	ldr	r3, [r3, #28]
 801084a:	2b01      	cmp	r3, #1
 801084c:	d905      	bls.n	801085a <fill_last_frag+0x30>
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	69db      	ldr	r3, [r3, #28]
 8010852:	68ba      	ldr	r2, [r7, #8]
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	3302      	adds	r3, #2
 8010858:	e000      	b.n	801085c <fill_last_frag+0x32>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	461a      	mov	r2, r3
 801085e:	f7ff fd97 	bl	8010390 <put_fat>
 8010862:	4603      	mov	r3, r0
 8010864:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8010866:	7dfb      	ldrb	r3, [r7, #23]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d001      	beq.n	8010870 <fill_last_frag+0x46>
 801086c:	7dfb      	ldrb	r3, [r7, #23]
 801086e:	e009      	b.n	8010884 <fill_last_frag+0x5a>
		obj->n_frag--;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	69db      	ldr	r3, [r3, #28]
 8010874:	1e5a      	subs	r2, r3, #1
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	69db      	ldr	r3, [r3, #28]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d1da      	bne.n	8010838 <fill_last_frag+0xe>
	}
	return FR_OK;
 8010882:	2300      	movs	r3, #0
}
 8010884:	4618      	mov	r0, r3
 8010886:	3718      	adds	r7, #24
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}

0801088c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b08a      	sub	sp, #40	; 0x28
 8010890:	af00      	add	r7, sp, #0
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	60b9      	str	r1, [r7, #8]
 8010896:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010898:	2300      	movs	r3, #0
 801089a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	627b      	str	r3, [r7, #36]	; 0x24
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d904      	bls.n	80108ba <remove_chain+0x2e>
 80108b0:	69bb      	ldr	r3, [r7, #24]
 80108b2:	6a1b      	ldr	r3, [r3, #32]
 80108b4:	68ba      	ldr	r2, [r7, #8]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d301      	bcc.n	80108be <remove_chain+0x32>
 80108ba:	2302      	movs	r3, #2
 80108bc:	e096      	b.n	80109ec <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d014      	beq.n	80108ee <remove_chain+0x62>
 80108c4:	69bb      	ldr	r3, [r7, #24]
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	2b04      	cmp	r3, #4
 80108ca:	d103      	bne.n	80108d4 <remove_chain+0x48>
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	79db      	ldrb	r3, [r3, #7]
 80108d0:	2b02      	cmp	r3, #2
 80108d2:	d00c      	beq.n	80108ee <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80108d4:	f04f 32ff 	mov.w	r2, #4294967295
 80108d8:	6879      	ldr	r1, [r7, #4]
 80108da:	69b8      	ldr	r0, [r7, #24]
 80108dc:	f7ff fd58 	bl	8010390 <put_fat>
 80108e0:	4603      	mov	r3, r0
 80108e2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80108e4:	7ffb      	ldrb	r3, [r7, #31]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d001      	beq.n	80108ee <remove_chain+0x62>
 80108ea:	7ffb      	ldrb	r3, [r7, #31]
 80108ec:	e07e      	b.n	80109ec <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80108ee:	68b9      	ldr	r1, [r7, #8]
 80108f0:	68f8      	ldr	r0, [r7, #12]
 80108f2:	f7ff fbf9 	bl	80100e8 <get_fat>
 80108f6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d055      	beq.n	80109aa <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	2b01      	cmp	r3, #1
 8010902:	d101      	bne.n	8010908 <remove_chain+0x7c>
 8010904:	2302      	movs	r3, #2
 8010906:	e071      	b.n	80109ec <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801090e:	d101      	bne.n	8010914 <remove_chain+0x88>
 8010910:	2301      	movs	r3, #1
 8010912:	e06b      	b.n	80109ec <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8010914:	69bb      	ldr	r3, [r7, #24]
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	2b04      	cmp	r3, #4
 801091a:	d00b      	beq.n	8010934 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801091c:	2200      	movs	r2, #0
 801091e:	68b9      	ldr	r1, [r7, #8]
 8010920:	69b8      	ldr	r0, [r7, #24]
 8010922:	f7ff fd35 	bl	8010390 <put_fat>
 8010926:	4603      	mov	r3, r0
 8010928:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801092a:	7ffb      	ldrb	r3, [r7, #31]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d001      	beq.n	8010934 <remove_chain+0xa8>
 8010930:	7ffb      	ldrb	r3, [r7, #31]
 8010932:	e05b      	b.n	80109ec <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010934:	69bb      	ldr	r3, [r7, #24]
 8010936:	69da      	ldr	r2, [r3, #28]
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	6a1b      	ldr	r3, [r3, #32]
 801093c:	3b02      	subs	r3, #2
 801093e:	429a      	cmp	r2, r3
 8010940:	d20b      	bcs.n	801095a <remove_chain+0xce>
			fs->free_clst++;
 8010942:	69bb      	ldr	r3, [r7, #24]
 8010944:	69db      	ldr	r3, [r3, #28]
 8010946:	1c5a      	adds	r2, r3, #1
 8010948:	69bb      	ldr	r3, [r7, #24]
 801094a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 801094c:	69bb      	ldr	r3, [r7, #24]
 801094e:	791b      	ldrb	r3, [r3, #4]
 8010950:	f043 0301 	orr.w	r3, r3, #1
 8010954:	b2da      	uxtb	r2, r3
 8010956:	69bb      	ldr	r3, [r7, #24]
 8010958:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 801095a:	6a3b      	ldr	r3, [r7, #32]
 801095c:	3301      	adds	r3, #1
 801095e:	697a      	ldr	r2, [r7, #20]
 8010960:	429a      	cmp	r2, r3
 8010962:	d102      	bne.n	801096a <remove_chain+0xde>
			ecl = nxt;
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	623b      	str	r3, [r7, #32]
 8010968:	e017      	b.n	801099a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801096a:	69bb      	ldr	r3, [r7, #24]
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	2b04      	cmp	r3, #4
 8010970:	d10f      	bne.n	8010992 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8010972:	6a3a      	ldr	r2, [r7, #32]
 8010974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010976:	1ad3      	subs	r3, r2, r3
 8010978:	1c5a      	adds	r2, r3, #1
 801097a:	2300      	movs	r3, #0
 801097c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801097e:	69b8      	ldr	r0, [r7, #24]
 8010980:	f7ff feaf 	bl	80106e2 <change_bitmap>
 8010984:	4603      	mov	r3, r0
 8010986:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8010988:	7ffb      	ldrb	r3, [r7, #31]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d001      	beq.n	8010992 <remove_chain+0x106>
 801098e:	7ffb      	ldrb	r3, [r7, #31]
 8010990:	e02c      	b.n	80109ec <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	623b      	str	r3, [r7, #32]
 8010996:	6a3b      	ldr	r3, [r7, #32]
 8010998:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801099e:	69bb      	ldr	r3, [r7, #24]
 80109a0:	6a1b      	ldr	r3, [r3, #32]
 80109a2:	68ba      	ldr	r2, [r7, #8]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d3a2      	bcc.n	80108ee <remove_chain+0x62>
 80109a8:	e000      	b.n	80109ac <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80109aa:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 80109ac:	69bb      	ldr	r3, [r7, #24]
 80109ae:	781b      	ldrb	r3, [r3, #0]
 80109b0:	2b04      	cmp	r3, #4
 80109b2:	d11a      	bne.n	80109ea <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d103      	bne.n	80109c2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	2200      	movs	r2, #0
 80109be:	71da      	strb	r2, [r3, #7]
 80109c0:	e013      	b.n	80109ea <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	79db      	ldrb	r3, [r3, #7]
 80109c6:	2b03      	cmp	r3, #3
 80109c8:	d10f      	bne.n	80109ea <remove_chain+0x15e>
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	689b      	ldr	r3, [r3, #8]
 80109ce:	687a      	ldr	r2, [r7, #4]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d30a      	bcc.n	80109ea <remove_chain+0x15e>
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	689a      	ldr	r2, [r3, #8]
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	699b      	ldr	r3, [r3, #24]
 80109dc:	4413      	add	r3, r2
 80109de:	687a      	ldr	r2, [r7, #4]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d802      	bhi.n	80109ea <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2202      	movs	r2, #2
 80109e8:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 80109ea:	2300      	movs	r3, #0
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3728      	adds	r7, #40	; 0x28
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b088      	sub	sp, #32
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d10d      	bne.n	8010a26 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	699b      	ldr	r3, [r3, #24]
 8010a0e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010a10:	69bb      	ldr	r3, [r7, #24]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d004      	beq.n	8010a20 <create_chain+0x2c>
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	6a1b      	ldr	r3, [r3, #32]
 8010a1a:	69ba      	ldr	r2, [r7, #24]
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d31b      	bcc.n	8010a58 <create_chain+0x64>
 8010a20:	2301      	movs	r3, #1
 8010a22:	61bb      	str	r3, [r7, #24]
 8010a24:	e018      	b.n	8010a58 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010a26:	6839      	ldr	r1, [r7, #0]
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f7ff fb5d 	bl	80100e8 <get_fat>
 8010a2e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2b01      	cmp	r3, #1
 8010a34:	d801      	bhi.n	8010a3a <create_chain+0x46>
 8010a36:	2301      	movs	r3, #1
 8010a38:	e0d9      	b.n	8010bee <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a40:	d101      	bne.n	8010a46 <create_chain+0x52>
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	e0d3      	b.n	8010bee <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010a46:	693b      	ldr	r3, [r7, #16]
 8010a48:	6a1b      	ldr	r3, [r3, #32]
 8010a4a:	68fa      	ldr	r2, [r7, #12]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d201      	bcs.n	8010a54 <create_chain+0x60>
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	e0cc      	b.n	8010bee <create_chain+0x1fa>
		scl = clst;
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	2b04      	cmp	r3, #4
 8010a5e:	d164      	bne.n	8010b2a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8010a60:	2201      	movs	r2, #1
 8010a62:	69b9      	ldr	r1, [r7, #24]
 8010a64:	6938      	ldr	r0, [r7, #16]
 8010a66:	f7ff fdb5 	bl	80105d4 <find_bitmap>
 8010a6a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8010a6c:	69fb      	ldr	r3, [r7, #28]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d003      	beq.n	8010a7a <create_chain+0x86>
 8010a72:	69fb      	ldr	r3, [r7, #28]
 8010a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a78:	d101      	bne.n	8010a7e <create_chain+0x8a>
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	e0b7      	b.n	8010bee <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8010a7e:	2301      	movs	r3, #1
 8010a80:	2201      	movs	r2, #1
 8010a82:	69f9      	ldr	r1, [r7, #28]
 8010a84:	6938      	ldr	r0, [r7, #16]
 8010a86:	f7ff fe2c 	bl	80106e2 <change_bitmap>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8010a8e:	7dfb      	ldrb	r3, [r7, #23]
 8010a90:	2b02      	cmp	r3, #2
 8010a92:	d101      	bne.n	8010a98 <create_chain+0xa4>
 8010a94:	2301      	movs	r3, #1
 8010a96:	e0aa      	b.n	8010bee <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8010a98:	7dfb      	ldrb	r3, [r7, #23]
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d102      	bne.n	8010aa4 <create_chain+0xb0>
 8010a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8010aa2:	e0a4      	b.n	8010bee <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d103      	bne.n	8010ab2 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2202      	movs	r2, #2
 8010aae:	71da      	strb	r2, [r3, #7]
 8010ab0:	e011      	b.n	8010ad6 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	79db      	ldrb	r3, [r3, #7]
 8010ab6:	2b02      	cmp	r3, #2
 8010ab8:	d10d      	bne.n	8010ad6 <create_chain+0xe2>
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	3301      	adds	r3, #1
 8010abe:	69fa      	ldr	r2, [r7, #28]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d008      	beq.n	8010ad6 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	689b      	ldr	r3, [r3, #8]
 8010ac8:	69ba      	ldr	r2, [r7, #24]
 8010aca:	1ad2      	subs	r2, r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2203      	movs	r2, #3
 8010ad4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	79db      	ldrb	r3, [r3, #7]
 8010ada:	2b02      	cmp	r3, #2
 8010adc:	d064      	beq.n	8010ba8 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	69fa      	ldr	r2, [r7, #28]
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d10b      	bne.n	8010b00 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	69db      	ldr	r3, [r3, #28]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d003      	beq.n	8010af8 <create_chain+0x104>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	69db      	ldr	r3, [r3, #28]
 8010af4:	3301      	adds	r3, #1
 8010af6:	e000      	b.n	8010afa <create_chain+0x106>
 8010af8:	2302      	movs	r3, #2
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	61d3      	str	r3, [r2, #28]
 8010afe:	e053      	b.n	8010ba8 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	69db      	ldr	r3, [r3, #28]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d102      	bne.n	8010b0e <create_chain+0x11a>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8010b0e:	69fa      	ldr	r2, [r7, #28]
 8010b10:	6839      	ldr	r1, [r7, #0]
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f7ff fe89 	bl	801082a <fill_last_frag>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8010b1c:	7dfb      	ldrb	r3, [r7, #23]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d142      	bne.n	8010ba8 <create_chain+0x1b4>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2201      	movs	r2, #1
 8010b26:	61da      	str	r2, [r3, #28]
 8010b28:	e03e      	b.n	8010ba8 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010b2a:	69bb      	ldr	r3, [r7, #24]
 8010b2c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	3301      	adds	r3, #1
 8010b32:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	6a1b      	ldr	r3, [r3, #32]
 8010b38:	69fa      	ldr	r2, [r7, #28]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d307      	bcc.n	8010b4e <create_chain+0x15a>
				ncl = 2;
 8010b3e:	2302      	movs	r3, #2
 8010b40:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010b42:	69fa      	ldr	r2, [r7, #28]
 8010b44:	69bb      	ldr	r3, [r7, #24]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d901      	bls.n	8010b4e <create_chain+0x15a>
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	e04f      	b.n	8010bee <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010b4e:	69f9      	ldr	r1, [r7, #28]
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f7ff fac9 	bl	80100e8 <get_fat>
 8010b56:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d00e      	beq.n	8010b7c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2b01      	cmp	r3, #1
 8010b62:	d003      	beq.n	8010b6c <create_chain+0x178>
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b6a:	d101      	bne.n	8010b70 <create_chain+0x17c>
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	e03e      	b.n	8010bee <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8010b70:	69fa      	ldr	r2, [r7, #28]
 8010b72:	69bb      	ldr	r3, [r7, #24]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d1da      	bne.n	8010b2e <create_chain+0x13a>
 8010b78:	2300      	movs	r3, #0
 8010b7a:	e038      	b.n	8010bee <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8010b7c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8010b82:	69f9      	ldr	r1, [r7, #28]
 8010b84:	6938      	ldr	r0, [r7, #16]
 8010b86:	f7ff fc03 	bl	8010390 <put_fat>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010b8e:	7dfb      	ldrb	r3, [r7, #23]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d109      	bne.n	8010ba8 <create_chain+0x1b4>
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d006      	beq.n	8010ba8 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010b9a:	69fa      	ldr	r2, [r7, #28]
 8010b9c:	6839      	ldr	r1, [r7, #0]
 8010b9e:	6938      	ldr	r0, [r7, #16]
 8010ba0:	f7ff fbf6 	bl	8010390 <put_fat>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010ba8:	7dfb      	ldrb	r3, [r7, #23]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d116      	bne.n	8010bdc <create_chain+0x1e8>
		fs->last_clst = ncl;
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	69fa      	ldr	r2, [r7, #28]
 8010bb2:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	69da      	ldr	r2, [r3, #28]
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	6a1b      	ldr	r3, [r3, #32]
 8010bbc:	3b02      	subs	r3, #2
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d804      	bhi.n	8010bcc <create_chain+0x1d8>
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	69db      	ldr	r3, [r3, #28]
 8010bc6:	1e5a      	subs	r2, r3, #1
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	791b      	ldrb	r3, [r3, #4]
 8010bd0:	f043 0301 	orr.w	r3, r3, #1
 8010bd4:	b2da      	uxtb	r2, r3
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	711a      	strb	r2, [r3, #4]
 8010bda:	e007      	b.n	8010bec <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010bdc:	7dfb      	ldrb	r3, [r7, #23]
 8010bde:	2b01      	cmp	r3, #1
 8010be0:	d102      	bne.n	8010be8 <create_chain+0x1f4>
 8010be2:	f04f 33ff 	mov.w	r3, #4294967295
 8010be6:	e000      	b.n	8010bea <create_chain+0x1f6>
 8010be8:	2301      	movs	r3, #1
 8010bea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010bec:	69fb      	ldr	r3, [r7, #28]
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3720      	adds	r7, #32
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}

08010bf6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010bf6:	b590      	push	{r4, r7, lr}
 8010bf8:	b089      	sub	sp, #36	; 0x24
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	60f8      	str	r0, [r7, #12]
 8010bfe:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c0c:	3304      	adds	r3, #4
 8010c0e:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	899b      	ldrh	r3, [r3, #12]
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	f04f 0400 	mov.w	r4, #0
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	4623      	mov	r3, r4
 8010c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c22:	f7ef fb59 	bl	80002d8 <__aeabi_uldivmod>
 8010c26:	4603      	mov	r3, r0
 8010c28:	460c      	mov	r4, r1
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	4621      	mov	r1, r4
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	895b      	ldrh	r3, [r3, #10]
 8010c32:	b29b      	uxth	r3, r3
 8010c34:	f04f 0400 	mov.w	r4, #0
 8010c38:	461a      	mov	r2, r3
 8010c3a:	4623      	mov	r3, r4
 8010c3c:	f7ef fb4c 	bl	80002d8 <__aeabi_uldivmod>
 8010c40:	4603      	mov	r3, r0
 8010c42:	460c      	mov	r4, r1
 8010c44:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010c46:	69bb      	ldr	r3, [r7, #24]
 8010c48:	1d1a      	adds	r2, r3, #4
 8010c4a:	61ba      	str	r2, [r7, #24]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d101      	bne.n	8010c5a <clmt_clust+0x64>
 8010c56:	2300      	movs	r3, #0
 8010c58:	e010      	b.n	8010c7c <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 8010c5a:	69fa      	ldr	r2, [r7, #28]
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d307      	bcc.n	8010c72 <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 8010c62:	69fa      	ldr	r2, [r7, #28]
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	1ad3      	subs	r3, r2, r3
 8010c68:	61fb      	str	r3, [r7, #28]
 8010c6a:	69bb      	ldr	r3, [r7, #24]
 8010c6c:	3304      	adds	r3, #4
 8010c6e:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010c70:	e7e9      	b.n	8010c46 <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 8010c72:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010c74:	69bb      	ldr	r3, [r7, #24]
 8010c76:	681a      	ldr	r2, [r3, #0]
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	4413      	add	r3, r2
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3724      	adds	r7, #36	; 0x24
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd90      	pop	{r4, r7, pc}

08010c84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b086      	sub	sp, #24
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	2b04      	cmp	r3, #4
 8010c9a:	d102      	bne.n	8010ca2 <dir_sdi+0x1e>
 8010c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ca0:	e001      	b.n	8010ca6 <dir_sdi+0x22>
 8010ca2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d904      	bls.n	8010cb6 <dir_sdi+0x32>
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	f003 031f 	and.w	r3, r3, #31
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d001      	beq.n	8010cba <dir_sdi+0x36>
		return FR_INT_ERR;
 8010cb6:	2302      	movs	r3, #2
 8010cb8:	e074      	b.n	8010da4 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	683a      	ldr	r2, [r7, #0]
 8010cbe:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	689b      	ldr	r3, [r3, #8]
 8010cc4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d109      	bne.n	8010ce0 <dir_sdi+0x5c>
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	781b      	ldrb	r3, [r3, #0]
 8010cd0:	2b02      	cmp	r3, #2
 8010cd2:	d905      	bls.n	8010ce0 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cd8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d10c      	bne.n	8010d00 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	095b      	lsrs	r3, r3, #5
 8010cea:	693a      	ldr	r2, [r7, #16]
 8010cec:	8912      	ldrh	r2, [r2, #8]
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d301      	bcc.n	8010cf6 <dir_sdi+0x72>
 8010cf2:	2302      	movs	r3, #2
 8010cf4:	e056      	b.n	8010da4 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	639a      	str	r2, [r3, #56]	; 0x38
 8010cfe:	e02d      	b.n	8010d5c <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	895b      	ldrh	r3, [r3, #10]
 8010d04:	461a      	mov	r2, r3
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	899b      	ldrh	r3, [r3, #12]
 8010d0a:	fb03 f302 	mul.w	r3, r3, r2
 8010d0e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010d10:	e019      	b.n	8010d46 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6979      	ldr	r1, [r7, #20]
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7ff f9e6 	bl	80100e8 <get_fat>
 8010d1c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d24:	d101      	bne.n	8010d2a <dir_sdi+0xa6>
 8010d26:	2301      	movs	r3, #1
 8010d28:	e03c      	b.n	8010da4 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d904      	bls.n	8010d3a <dir_sdi+0xb6>
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	6a1b      	ldr	r3, [r3, #32]
 8010d34:	697a      	ldr	r2, [r7, #20]
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d301      	bcc.n	8010d3e <dir_sdi+0xba>
 8010d3a:	2302      	movs	r3, #2
 8010d3c:	e032      	b.n	8010da4 <dir_sdi+0x120>
			ofs -= csz;
 8010d3e:	683a      	ldr	r2, [r7, #0]
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	1ad3      	subs	r3, r2, r3
 8010d44:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010d46:	683a      	ldr	r2, [r7, #0]
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d2e1      	bcs.n	8010d12 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 8010d4e:	6979      	ldr	r1, [r7, #20]
 8010d50:	6938      	ldr	r0, [r7, #16]
 8010d52:	f7ff f9a9 	bl	80100a8 <clust2sect>
 8010d56:	4602      	mov	r2, r0
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	697a      	ldr	r2, [r7, #20]
 8010d60:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <dir_sdi+0xea>
 8010d6a:	2302      	movs	r3, #2
 8010d6c:	e01a      	b.n	8010da4 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	899b      	ldrh	r3, [r3, #12]
 8010d76:	4619      	mov	r1, r3
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d7e:	441a      	add	r2, r3
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	899b      	ldrh	r3, [r3, #12]
 8010d8e:	461a      	mov	r2, r3
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d96:	fb02 f200 	mul.w	r2, r2, r0
 8010d9a:	1a9b      	subs	r3, r3, r2
 8010d9c:	18ca      	adds	r2, r1, r3
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8010da2:	2300      	movs	r3, #0
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3718      	adds	r7, #24
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}

08010dac <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b086      	sub	sp, #24
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
 8010db4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dc0:	3320      	adds	r3, #32
 8010dc2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d00b      	beq.n	8010de4 <dir_next+0x38>
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	781b      	ldrb	r3, [r3, #0]
 8010dd0:	2b04      	cmp	r3, #4
 8010dd2:	d102      	bne.n	8010dda <dir_next+0x2e>
 8010dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dd8:	e001      	b.n	8010dde <dir_next+0x32>
 8010dda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d801      	bhi.n	8010de8 <dir_next+0x3c>
 8010de4:	2304      	movs	r3, #4
 8010de6:	e0c3      	b.n	8010f70 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	899b      	ldrh	r3, [r3, #12]
 8010dec:	461a      	mov	r2, r3
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	fbb3 f1f2 	udiv	r1, r3, r2
 8010df4:	fb02 f201 	mul.w	r2, r2, r1
 8010df8:	1a9b      	subs	r3, r3, r2
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f040 80a5 	bne.w	8010f4a <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e04:	1c5a      	adds	r2, r3, #1
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d10b      	bne.n	8010e2a <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	095b      	lsrs	r3, r3, #5
 8010e16:	68fa      	ldr	r2, [r7, #12]
 8010e18:	8912      	ldrh	r2, [r2, #8]
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	f0c0 8095 	bcc.w	8010f4a <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2200      	movs	r2, #0
 8010e24:	639a      	str	r2, [r3, #56]	; 0x38
 8010e26:	2304      	movs	r3, #4
 8010e28:	e0a2      	b.n	8010f70 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	899b      	ldrh	r3, [r3, #12]
 8010e2e:	461a      	mov	r2, r3
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e36:	68fa      	ldr	r2, [r7, #12]
 8010e38:	8952      	ldrh	r2, [r2, #10]
 8010e3a:	3a01      	subs	r2, #1
 8010e3c:	4013      	ands	r3, r2
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	f040 8083 	bne.w	8010f4a <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	4610      	mov	r0, r2
 8010e4e:	f7ff f94b 	bl	80100e8 <get_fat>
 8010e52:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	2b01      	cmp	r3, #1
 8010e58:	d801      	bhi.n	8010e5e <dir_next+0xb2>
 8010e5a:	2302      	movs	r3, #2
 8010e5c:	e088      	b.n	8010f70 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e64:	d101      	bne.n	8010e6a <dir_next+0xbe>
 8010e66:	2301      	movs	r3, #1
 8010e68:	e082      	b.n	8010f70 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	6a1b      	ldr	r3, [r3, #32]
 8010e6e:	697a      	ldr	r2, [r7, #20]
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d360      	bcc.n	8010f36 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d104      	bne.n	8010e84 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	639a      	str	r2, [r3, #56]	; 0x38
 8010e80:	2304      	movs	r3, #4
 8010e82:	e075      	b.n	8010f70 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e8a:	4619      	mov	r1, r3
 8010e8c:	4610      	mov	r0, r2
 8010e8e:	f7ff fdb1 	bl	80109f4 <create_chain>
 8010e92:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d101      	bne.n	8010e9e <dir_next+0xf2>
 8010e9a:	2307      	movs	r3, #7
 8010e9c:	e068      	b.n	8010f70 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010e9e:	697b      	ldr	r3, [r7, #20]
 8010ea0:	2b01      	cmp	r3, #1
 8010ea2:	d101      	bne.n	8010ea8 <dir_next+0xfc>
 8010ea4:	2302      	movs	r3, #2
 8010ea6:	e063      	b.n	8010f70 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eae:	d101      	bne.n	8010eb4 <dir_next+0x108>
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	e05d      	b.n	8010f70 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	79db      	ldrb	r3, [r3, #7]
 8010eb8:	f043 0304 	orr.w	r3, r3, #4
 8010ebc:	b2da      	uxtb	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010ec2:	68f8      	ldr	r0, [r7, #12]
 8010ec4:	f7ff f80e 	bl	800fee4 <sync_window>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d001      	beq.n	8010ed2 <dir_next+0x126>
 8010ece:	2301      	movs	r3, #1
 8010ed0:	e04e      	b.n	8010f70 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	899b      	ldrh	r3, [r3, #12]
 8010edc:	461a      	mov	r2, r3
 8010ede:	2100      	movs	r1, #0
 8010ee0:	f7fe fe37 	bl	800fb52 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	613b      	str	r3, [r7, #16]
 8010ee8:	6979      	ldr	r1, [r7, #20]
 8010eea:	68f8      	ldr	r0, [r7, #12]
 8010eec:	f7ff f8dc 	bl	80100a8 <clust2sect>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	639a      	str	r2, [r3, #56]	; 0x38
 8010ef6:	e012      	b.n	8010f1e <dir_next+0x172>
						fs->wflag = 1;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	2201      	movs	r2, #1
 8010efc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010efe:	68f8      	ldr	r0, [r7, #12]
 8010f00:	f7fe fff0 	bl	800fee4 <sync_window>
 8010f04:	4603      	mov	r3, r0
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d001      	beq.n	8010f0e <dir_next+0x162>
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	e030      	b.n	8010f70 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	3301      	adds	r3, #1
 8010f12:	613b      	str	r3, [r7, #16]
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f18:	1c5a      	adds	r2, r3, #1
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	895b      	ldrh	r3, [r3, #10]
 8010f22:	461a      	mov	r2, r3
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d3e6      	bcc.n	8010ef8 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	1ad2      	subs	r2, r2, r3
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	697a      	ldr	r2, [r7, #20]
 8010f3a:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8010f3c:	6979      	ldr	r1, [r7, #20]
 8010f3e:	68f8      	ldr	r0, [r7, #12]
 8010f40:	f7ff f8b2 	bl	80100a8 <clust2sect>
 8010f44:	4602      	mov	r2, r0
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	68ba      	ldr	r2, [r7, #8]
 8010f4e:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	899b      	ldrh	r3, [r3, #12]
 8010f5a:	461a      	mov	r2, r3
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f62:	fb02 f200 	mul.w	r2, r2, r0
 8010f66:	1a9b      	subs	r3, r3, r2
 8010f68:	18ca      	adds	r2, r1, r3
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8010f6e:	2300      	movs	r3, #0
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	3718      	adds	r7, #24
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}

08010f78 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b086      	sub	sp, #24
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010f88:	2100      	movs	r1, #0
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f7ff fe7a 	bl	8010c84 <dir_sdi>
 8010f90:	4603      	mov	r3, r0
 8010f92:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010f94:	7dfb      	ldrb	r3, [r7, #23]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d140      	bne.n	801101c <dir_alloc+0xa4>
		n = 0;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	f7fe ffe1 	bl	800ff6c <move_window>
 8010faa:	4603      	mov	r3, r0
 8010fac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010fae:	7dfb      	ldrb	r3, [r7, #23]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d132      	bne.n	801101a <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	2b04      	cmp	r3, #4
 8010fba:	d108      	bne.n	8010fce <dir_alloc+0x56>
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	b25b      	sxtb	r3, r3
 8010fc4:	43db      	mvns	r3, r3
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	09db      	lsrs	r3, r3, #7
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	e00f      	b.n	8010fee <dir_alloc+0x76>
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	2be5      	cmp	r3, #229	; 0xe5
 8010fd6:	d004      	beq.n	8010fe2 <dir_alloc+0x6a>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d101      	bne.n	8010fe6 <dir_alloc+0x6e>
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	e000      	b.n	8010fe8 <dir_alloc+0x70>
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	f003 0301 	and.w	r3, r3, #1
 8010fec:	b2db      	uxtb	r3, r3
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d007      	beq.n	8011002 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	3301      	adds	r3, #1
 8010ff6:	613b      	str	r3, [r7, #16]
 8010ff8:	693a      	ldr	r2, [r7, #16]
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	429a      	cmp	r2, r3
 8010ffe:	d102      	bne.n	8011006 <dir_alloc+0x8e>
 8011000:	e00c      	b.n	801101c <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011002:	2300      	movs	r3, #0
 8011004:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011006:	2101      	movs	r1, #1
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f7ff fecf 	bl	8010dac <dir_next>
 801100e:	4603      	mov	r3, r0
 8011010:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011012:	7dfb      	ldrb	r3, [r7, #23]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d0c2      	beq.n	8010f9e <dir_alloc+0x26>
 8011018:	e000      	b.n	801101c <dir_alloc+0xa4>
			if (res != FR_OK) break;
 801101a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801101c:	7dfb      	ldrb	r3, [r7, #23]
 801101e:	2b04      	cmp	r3, #4
 8011020:	d101      	bne.n	8011026 <dir_alloc+0xae>
 8011022:	2307      	movs	r3, #7
 8011024:	75fb      	strb	r3, [r7, #23]
	return res;
 8011026:	7dfb      	ldrb	r3, [r7, #23]
}
 8011028:	4618      	mov	r0, r3
 801102a:	3718      	adds	r7, #24
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}

08011030 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b084      	sub	sp, #16
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	331a      	adds	r3, #26
 801103e:	4618      	mov	r0, r3
 8011040:	f7fe fba0 	bl	800f784 <ld_word>
 8011044:	4603      	mov	r3, r0
 8011046:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	2b03      	cmp	r3, #3
 801104e:	d109      	bne.n	8011064 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	3314      	adds	r3, #20
 8011054:	4618      	mov	r0, r3
 8011056:	f7fe fb95 	bl	800f784 <ld_word>
 801105a:	4603      	mov	r3, r0
 801105c:	041b      	lsls	r3, r3, #16
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	4313      	orrs	r3, r2
 8011062:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011064:	68fb      	ldr	r3, [r7, #12]
}
 8011066:	4618      	mov	r0, r3
 8011068:	3710      	adds	r7, #16
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}

0801106e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801106e:	b580      	push	{r7, lr}
 8011070:	b084      	sub	sp, #16
 8011072:	af00      	add	r7, sp, #0
 8011074:	60f8      	str	r0, [r7, #12]
 8011076:	60b9      	str	r1, [r7, #8]
 8011078:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	331a      	adds	r3, #26
 801107e:	687a      	ldr	r2, [r7, #4]
 8011080:	b292      	uxth	r2, r2
 8011082:	4611      	mov	r1, r2
 8011084:	4618      	mov	r0, r3
 8011086:	f7fe fc75 	bl	800f974 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	2b03      	cmp	r3, #3
 8011090:	d109      	bne.n	80110a6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	f103 0214 	add.w	r2, r3, #20
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	0c1b      	lsrs	r3, r3, #16
 801109c:	b29b      	uxth	r3, r3
 801109e:	4619      	mov	r1, r3
 80110a0:	4610      	mov	r0, r2
 80110a2:	f7fe fc67 	bl	800f974 <st_word>
	}
}
 80110a6:	bf00      	nop
 80110a8:	3710      	adds	r7, #16
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
	...

080110b0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80110b0:	b590      	push	{r4, r7, lr}
 80110b2:	b087      	sub	sp, #28
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	331a      	adds	r3, #26
 80110be:	4618      	mov	r0, r3
 80110c0:	f7fe fb60 	bl	800f784 <ld_word>
 80110c4:	4603      	mov	r3, r0
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d001      	beq.n	80110ce <cmp_lfn+0x1e>
 80110ca:	2300      	movs	r3, #0
 80110cc:	e059      	b.n	8011182 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110d6:	1e5a      	subs	r2, r3, #1
 80110d8:	4613      	mov	r3, r2
 80110da:	005b      	lsls	r3, r3, #1
 80110dc:	4413      	add	r3, r2
 80110de:	009b      	lsls	r3, r3, #2
 80110e0:	4413      	add	r3, r2
 80110e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80110e4:	2301      	movs	r3, #1
 80110e6:	81fb      	strh	r3, [r7, #14]
 80110e8:	2300      	movs	r3, #0
 80110ea:	613b      	str	r3, [r7, #16]
 80110ec:	e033      	b.n	8011156 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80110ee:	4a27      	ldr	r2, [pc, #156]	; (801118c <cmp_lfn+0xdc>)
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	4413      	add	r3, r2
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	461a      	mov	r2, r3
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	4413      	add	r3, r2
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7fe fb41 	bl	800f784 <ld_word>
 8011102:	4603      	mov	r3, r0
 8011104:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011106:	89fb      	ldrh	r3, [r7, #14]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d01a      	beq.n	8011142 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	2bfe      	cmp	r3, #254	; 0xfe
 8011110:	d812      	bhi.n	8011138 <cmp_lfn+0x88>
 8011112:	89bb      	ldrh	r3, [r7, #12]
 8011114:	4618      	mov	r0, r3
 8011116:	f002 ffa7 	bl	8014068 <ff_wtoupper>
 801111a:	4603      	mov	r3, r0
 801111c:	461c      	mov	r4, r3
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	1c5a      	adds	r2, r3, #1
 8011122:	617a      	str	r2, [r7, #20]
 8011124:	005b      	lsls	r3, r3, #1
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	4413      	add	r3, r2
 801112a:	881b      	ldrh	r3, [r3, #0]
 801112c:	4618      	mov	r0, r3
 801112e:	f002 ff9b 	bl	8014068 <ff_wtoupper>
 8011132:	4603      	mov	r3, r0
 8011134:	429c      	cmp	r4, r3
 8011136:	d001      	beq.n	801113c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011138:	2300      	movs	r3, #0
 801113a:	e022      	b.n	8011182 <cmp_lfn+0xd2>
			}
			wc = uc;
 801113c:	89bb      	ldrh	r3, [r7, #12]
 801113e:	81fb      	strh	r3, [r7, #14]
 8011140:	e006      	b.n	8011150 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011142:	89bb      	ldrh	r3, [r7, #12]
 8011144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011148:	4293      	cmp	r3, r2
 801114a:	d001      	beq.n	8011150 <cmp_lfn+0xa0>
 801114c:	2300      	movs	r3, #0
 801114e:	e018      	b.n	8011182 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	3301      	adds	r3, #1
 8011154:	613b      	str	r3, [r7, #16]
 8011156:	693b      	ldr	r3, [r7, #16]
 8011158:	2b0c      	cmp	r3, #12
 801115a:	d9c8      	bls.n	80110ee <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011164:	2b00      	cmp	r3, #0
 8011166:	d00b      	beq.n	8011180 <cmp_lfn+0xd0>
 8011168:	89fb      	ldrh	r3, [r7, #14]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d008      	beq.n	8011180 <cmp_lfn+0xd0>
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	005b      	lsls	r3, r3, #1
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	4413      	add	r3, r2
 8011176:	881b      	ldrh	r3, [r3, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d001      	beq.n	8011180 <cmp_lfn+0xd0>
 801117c:	2300      	movs	r3, #0
 801117e:	e000      	b.n	8011182 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011180:	2301      	movs	r3, #1
}
 8011182:	4618      	mov	r0, r3
 8011184:	371c      	adds	r7, #28
 8011186:	46bd      	mov	sp, r7
 8011188:	bd90      	pop	{r4, r7, pc}
 801118a:	bf00      	nop
 801118c:	080143d0 	.word	0x080143d0

08011190 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b086      	sub	sp, #24
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	331a      	adds	r3, #26
 801119e:	4618      	mov	r0, r3
 80111a0:	f7fe faf0 	bl	800f784 <ld_word>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d001      	beq.n	80111ae <pick_lfn+0x1e>
 80111aa:	2300      	movs	r3, #0
 80111ac:	e04d      	b.n	801124a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111b6:	1e5a      	subs	r2, r3, #1
 80111b8:	4613      	mov	r3, r2
 80111ba:	005b      	lsls	r3, r3, #1
 80111bc:	4413      	add	r3, r2
 80111be:	009b      	lsls	r3, r3, #2
 80111c0:	4413      	add	r3, r2
 80111c2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80111c4:	2301      	movs	r3, #1
 80111c6:	81fb      	strh	r3, [r7, #14]
 80111c8:	2300      	movs	r3, #0
 80111ca:	613b      	str	r3, [r7, #16]
 80111cc:	e028      	b.n	8011220 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80111ce:	4a21      	ldr	r2, [pc, #132]	; (8011254 <pick_lfn+0xc4>)
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	4413      	add	r3, r2
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	461a      	mov	r2, r3
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	4413      	add	r3, r2
 80111dc:	4618      	mov	r0, r3
 80111de:	f7fe fad1 	bl	800f784 <ld_word>
 80111e2:	4603      	mov	r3, r0
 80111e4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80111e6:	89fb      	ldrh	r3, [r7, #14]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d00f      	beq.n	801120c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	2bfe      	cmp	r3, #254	; 0xfe
 80111f0:	d901      	bls.n	80111f6 <pick_lfn+0x66>
 80111f2:	2300      	movs	r3, #0
 80111f4:	e029      	b.n	801124a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80111f6:	89bb      	ldrh	r3, [r7, #12]
 80111f8:	81fb      	strh	r3, [r7, #14]
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	1c5a      	adds	r2, r3, #1
 80111fe:	617a      	str	r2, [r7, #20]
 8011200:	005b      	lsls	r3, r3, #1
 8011202:	687a      	ldr	r2, [r7, #4]
 8011204:	4413      	add	r3, r2
 8011206:	89fa      	ldrh	r2, [r7, #14]
 8011208:	801a      	strh	r2, [r3, #0]
 801120a:	e006      	b.n	801121a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801120c:	89bb      	ldrh	r3, [r7, #12]
 801120e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011212:	4293      	cmp	r3, r2
 8011214:	d001      	beq.n	801121a <pick_lfn+0x8a>
 8011216:	2300      	movs	r3, #0
 8011218:	e017      	b.n	801124a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	3301      	adds	r3, #1
 801121e:	613b      	str	r3, [r7, #16]
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	2b0c      	cmp	r3, #12
 8011224:	d9d3      	bls.n	80111ce <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	781b      	ldrb	r3, [r3, #0]
 801122a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801122e:	2b00      	cmp	r3, #0
 8011230:	d00a      	beq.n	8011248 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8011232:	697b      	ldr	r3, [r7, #20]
 8011234:	2bfe      	cmp	r3, #254	; 0xfe
 8011236:	d901      	bls.n	801123c <pick_lfn+0xac>
 8011238:	2300      	movs	r3, #0
 801123a:	e006      	b.n	801124a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	005b      	lsls	r3, r3, #1
 8011240:	687a      	ldr	r2, [r7, #4]
 8011242:	4413      	add	r3, r2
 8011244:	2200      	movs	r2, #0
 8011246:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8011248:	2301      	movs	r3, #1
}
 801124a:	4618      	mov	r0, r3
 801124c:	3718      	adds	r7, #24
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
 8011252:	bf00      	nop
 8011254:	080143d0 	.word	0x080143d0

08011258 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b088      	sub	sp, #32
 801125c:	af00      	add	r7, sp, #0
 801125e:	60f8      	str	r0, [r7, #12]
 8011260:	60b9      	str	r1, [r7, #8]
 8011262:	4611      	mov	r1, r2
 8011264:	461a      	mov	r2, r3
 8011266:	460b      	mov	r3, r1
 8011268:	71fb      	strb	r3, [r7, #7]
 801126a:	4613      	mov	r3, r2
 801126c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	330d      	adds	r3, #13
 8011272:	79ba      	ldrb	r2, [r7, #6]
 8011274:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	330b      	adds	r3, #11
 801127a:	220f      	movs	r2, #15
 801127c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	330c      	adds	r3, #12
 8011282:	2200      	movs	r2, #0
 8011284:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	331a      	adds	r3, #26
 801128a:	2100      	movs	r1, #0
 801128c:	4618      	mov	r0, r3
 801128e:	f7fe fb71 	bl	800f974 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011292:	79fb      	ldrb	r3, [r7, #7]
 8011294:	1e5a      	subs	r2, r3, #1
 8011296:	4613      	mov	r3, r2
 8011298:	005b      	lsls	r3, r3, #1
 801129a:	4413      	add	r3, r2
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	4413      	add	r3, r2
 80112a0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80112a2:	2300      	movs	r3, #0
 80112a4:	82fb      	strh	r3, [r7, #22]
 80112a6:	2300      	movs	r3, #0
 80112a8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80112aa:	8afb      	ldrh	r3, [r7, #22]
 80112ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112b0:	4293      	cmp	r3, r2
 80112b2:	d007      	beq.n	80112c4 <put_lfn+0x6c>
 80112b4:	69fb      	ldr	r3, [r7, #28]
 80112b6:	1c5a      	adds	r2, r3, #1
 80112b8:	61fa      	str	r2, [r7, #28]
 80112ba:	005b      	lsls	r3, r3, #1
 80112bc:	68fa      	ldr	r2, [r7, #12]
 80112be:	4413      	add	r3, r2
 80112c0:	881b      	ldrh	r3, [r3, #0]
 80112c2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80112c4:	4a17      	ldr	r2, [pc, #92]	; (8011324 <put_lfn+0xcc>)
 80112c6:	69bb      	ldr	r3, [r7, #24]
 80112c8:	4413      	add	r3, r2
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	461a      	mov	r2, r3
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	4413      	add	r3, r2
 80112d2:	8afa      	ldrh	r2, [r7, #22]
 80112d4:	4611      	mov	r1, r2
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7fe fb4c 	bl	800f974 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80112dc:	8afb      	ldrh	r3, [r7, #22]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d102      	bne.n	80112e8 <put_lfn+0x90>
 80112e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112e6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80112e8:	69bb      	ldr	r3, [r7, #24]
 80112ea:	3301      	adds	r3, #1
 80112ec:	61bb      	str	r3, [r7, #24]
 80112ee:	69bb      	ldr	r3, [r7, #24]
 80112f0:	2b0c      	cmp	r3, #12
 80112f2:	d9da      	bls.n	80112aa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80112f4:	8afb      	ldrh	r3, [r7, #22]
 80112f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d006      	beq.n	801130c <put_lfn+0xb4>
 80112fe:	69fb      	ldr	r3, [r7, #28]
 8011300:	005b      	lsls	r3, r3, #1
 8011302:	68fa      	ldr	r2, [r7, #12]
 8011304:	4413      	add	r3, r2
 8011306:	881b      	ldrh	r3, [r3, #0]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d103      	bne.n	8011314 <put_lfn+0xbc>
 801130c:	79fb      	ldrb	r3, [r7, #7]
 801130e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011312:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	79fa      	ldrb	r2, [r7, #7]
 8011318:	701a      	strb	r2, [r3, #0]
}
 801131a:	bf00      	nop
 801131c:	3720      	adds	r7, #32
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	080143d0 	.word	0x080143d0

08011328 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b08c      	sub	sp, #48	; 0x30
 801132c:	af00      	add	r7, sp, #0
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	607a      	str	r2, [r7, #4]
 8011334:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011336:	220b      	movs	r2, #11
 8011338:	68b9      	ldr	r1, [r7, #8]
 801133a:	68f8      	ldr	r0, [r7, #12]
 801133c:	f7fe fbe8 	bl	800fb10 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	2b05      	cmp	r3, #5
 8011344:	d929      	bls.n	801139a <gen_numname+0x72>
		sr = seq;
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801134a:	e020      	b.n	801138e <gen_numname+0x66>
			wc = *lfn++;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	1c9a      	adds	r2, r3, #2
 8011350:	607a      	str	r2, [r7, #4]
 8011352:	881b      	ldrh	r3, [r3, #0]
 8011354:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011356:	2300      	movs	r3, #0
 8011358:	62bb      	str	r3, [r7, #40]	; 0x28
 801135a:	e015      	b.n	8011388 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801135c:	69fb      	ldr	r3, [r7, #28]
 801135e:	005a      	lsls	r2, r3, #1
 8011360:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011362:	f003 0301 	and.w	r3, r3, #1
 8011366:	4413      	add	r3, r2
 8011368:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801136a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801136c:	085b      	lsrs	r3, r3, #1
 801136e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011376:	2b00      	cmp	r3, #0
 8011378:	d003      	beq.n	8011382 <gen_numname+0x5a>
 801137a:	69fa      	ldr	r2, [r7, #28]
 801137c:	4b31      	ldr	r3, [pc, #196]	; (8011444 <gen_numname+0x11c>)
 801137e:	4053      	eors	r3, r2
 8011380:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011384:	3301      	adds	r3, #1
 8011386:	62bb      	str	r3, [r7, #40]	; 0x28
 8011388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801138a:	2b0f      	cmp	r3, #15
 801138c:	d9e6      	bls.n	801135c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	881b      	ldrh	r3, [r3, #0]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d1da      	bne.n	801134c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011396:	69fb      	ldr	r3, [r7, #28]
 8011398:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801139a:	2307      	movs	r3, #7
 801139c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	f003 030f 	and.w	r3, r3, #15
 80113a6:	b2db      	uxtb	r3, r3
 80113a8:	3330      	adds	r3, #48	; 0x30
 80113aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80113ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113b2:	2b39      	cmp	r3, #57	; 0x39
 80113b4:	d904      	bls.n	80113c0 <gen_numname+0x98>
 80113b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113ba:	3307      	adds	r3, #7
 80113bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80113c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c2:	1e5a      	subs	r2, r3, #1
 80113c4:	62ba      	str	r2, [r7, #40]	; 0x28
 80113c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80113ca:	4413      	add	r3, r2
 80113cc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80113d0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	091b      	lsrs	r3, r3, #4
 80113d8:	603b      	str	r3, [r7, #0]
	} while (seq);
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d1de      	bne.n	801139e <gen_numname+0x76>
	ns[i] = '~';
 80113e0:	f107 0214 	add.w	r2, r7, #20
 80113e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e6:	4413      	add	r3, r2
 80113e8:	227e      	movs	r2, #126	; 0x7e
 80113ea:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80113ec:	2300      	movs	r3, #0
 80113ee:	627b      	str	r3, [r7, #36]	; 0x24
 80113f0:	e002      	b.n	80113f8 <gen_numname+0xd0>
 80113f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f4:	3301      	adds	r3, #1
 80113f6:	627b      	str	r3, [r7, #36]	; 0x24
 80113f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d205      	bcs.n	801140c <gen_numname+0xe4>
 8011400:	68fa      	ldr	r2, [r7, #12]
 8011402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011404:	4413      	add	r3, r2
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	2b20      	cmp	r3, #32
 801140a:	d1f2      	bne.n	80113f2 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140e:	2b07      	cmp	r3, #7
 8011410:	d808      	bhi.n	8011424 <gen_numname+0xfc>
 8011412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011414:	1c5a      	adds	r2, r3, #1
 8011416:	62ba      	str	r2, [r7, #40]	; 0x28
 8011418:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801141c:	4413      	add	r3, r2
 801141e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011422:	e000      	b.n	8011426 <gen_numname+0xfe>
 8011424:	2120      	movs	r1, #32
 8011426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011428:	1c5a      	adds	r2, r3, #1
 801142a:	627a      	str	r2, [r7, #36]	; 0x24
 801142c:	68fa      	ldr	r2, [r7, #12]
 801142e:	4413      	add	r3, r2
 8011430:	460a      	mov	r2, r1
 8011432:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011436:	2b07      	cmp	r3, #7
 8011438:	d9e8      	bls.n	801140c <gen_numname+0xe4>
}
 801143a:	bf00      	nop
 801143c:	3730      	adds	r7, #48	; 0x30
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	00011021 	.word	0x00011021

08011448 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011448:	b480      	push	{r7}
 801144a:	b085      	sub	sp, #20
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011450:	2300      	movs	r3, #0
 8011452:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011454:	230b      	movs	r3, #11
 8011456:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011458:	7bfb      	ldrb	r3, [r7, #15]
 801145a:	b2da      	uxtb	r2, r3
 801145c:	0852      	lsrs	r2, r2, #1
 801145e:	01db      	lsls	r3, r3, #7
 8011460:	4313      	orrs	r3, r2
 8011462:	b2da      	uxtb	r2, r3
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	1c59      	adds	r1, r3, #1
 8011468:	6079      	str	r1, [r7, #4]
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	4413      	add	r3, r2
 801146e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	3b01      	subs	r3, #1
 8011474:	60bb      	str	r3, [r7, #8]
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d1ed      	bne.n	8011458 <sum_sfn+0x10>
	return sum;
 801147c:	7bfb      	ldrb	r3, [r7, #15]
}
 801147e:	4618      	mov	r0, r3
 8011480:	3714      	adds	r7, #20
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr

0801148a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 801148a:	b480      	push	{r7}
 801148c:	b087      	sub	sp, #28
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	3301      	adds	r3, #1
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	3301      	adds	r3, #1
 801149a:	015b      	lsls	r3, r3, #5
 801149c:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 801149e:	2300      	movs	r3, #0
 80114a0:	827b      	strh	r3, [r7, #18]
 80114a2:	2300      	movs	r3, #0
 80114a4:	617b      	str	r3, [r7, #20]
 80114a6:	e018      	b.n	80114da <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	2b02      	cmp	r3, #2
 80114ac:	d103      	bne.n	80114b6 <xdir_sum+0x2c>
			i++;
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	3301      	adds	r3, #1
 80114b2:	617b      	str	r3, [r7, #20]
 80114b4:	e00e      	b.n	80114d4 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80114b6:	8a7b      	ldrh	r3, [r7, #18]
 80114b8:	03db      	lsls	r3, r3, #15
 80114ba:	b29a      	uxth	r2, r3
 80114bc:	8a7b      	ldrh	r3, [r7, #18]
 80114be:	085b      	lsrs	r3, r3, #1
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	4413      	add	r3, r2
 80114c4:	b29a      	uxth	r2, r3
 80114c6:	6879      	ldr	r1, [r7, #4]
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	440b      	add	r3, r1
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	4413      	add	r3, r2
 80114d2:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	3301      	adds	r3, #1
 80114d8:	617b      	str	r3, [r7, #20]
 80114da:	697a      	ldr	r2, [r7, #20]
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	429a      	cmp	r2, r3
 80114e0:	d3e2      	bcc.n	80114a8 <xdir_sum+0x1e>
		}
	}
	return sum;
 80114e2:	8a7b      	ldrh	r3, [r7, #18]
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	371c      	adds	r7, #28
 80114e8:	46bd      	mov	sp, r7
 80114ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ee:	4770      	bx	lr

080114f0 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 80114f8:	2300      	movs	r3, #0
 80114fa:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 80114fc:	e01f      	b.n	801153e <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 80114fe:	89bb      	ldrh	r3, [r7, #12]
 8011500:	4618      	mov	r0, r3
 8011502:	f002 fdb1 	bl	8014068 <ff_wtoupper>
 8011506:	4603      	mov	r3, r0
 8011508:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 801150a:	89fb      	ldrh	r3, [r7, #14]
 801150c:	03db      	lsls	r3, r3, #15
 801150e:	b29a      	uxth	r2, r3
 8011510:	89fb      	ldrh	r3, [r7, #14]
 8011512:	085b      	lsrs	r3, r3, #1
 8011514:	b29b      	uxth	r3, r3
 8011516:	4413      	add	r3, r2
 8011518:	b29a      	uxth	r2, r3
 801151a:	89bb      	ldrh	r3, [r7, #12]
 801151c:	b2db      	uxtb	r3, r3
 801151e:	b29b      	uxth	r3, r3
 8011520:	4413      	add	r3, r2
 8011522:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8011524:	89fb      	ldrh	r3, [r7, #14]
 8011526:	03db      	lsls	r3, r3, #15
 8011528:	b29a      	uxth	r2, r3
 801152a:	89fb      	ldrh	r3, [r7, #14]
 801152c:	085b      	lsrs	r3, r3, #1
 801152e:	b29b      	uxth	r3, r3
 8011530:	4413      	add	r3, r2
 8011532:	b29a      	uxth	r2, r3
 8011534:	89bb      	ldrh	r3, [r7, #12]
 8011536:	0a1b      	lsrs	r3, r3, #8
 8011538:	b29b      	uxth	r3, r3
 801153a:	4413      	add	r3, r2
 801153c:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	1c9a      	adds	r2, r3, #2
 8011542:	607a      	str	r2, [r7, #4]
 8011544:	881b      	ldrh	r3, [r3, #0]
 8011546:	81bb      	strh	r3, [r7, #12]
 8011548:	89bb      	ldrh	r3, [r7, #12]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d1d7      	bne.n	80114fe <xname_sum+0xe>
	}
	return sum;
 801154e:	89fb      	ldrh	r3, [r7, #14]
}
 8011550:	4618      	mov	r0, r3
 8011552:	3710      	adds	r7, #16
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8011558:	b590      	push	{r4, r7, lr}
 801155a:	b087      	sub	sp, #28
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	695b      	ldr	r3, [r3, #20]
 8011566:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681a      	ldr	r2, [r3, #0]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011570:	4619      	mov	r1, r3
 8011572:	4610      	mov	r0, r2
 8011574:	f7fe fcfa 	bl	800ff6c <move_window>
 8011578:	4603      	mov	r3, r0
 801157a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 801157c:	7bfb      	ldrb	r3, [r7, #15]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d001      	beq.n	8011586 <load_xdir+0x2e>
 8011582:	7bfb      	ldrb	r3, [r7, #15]
 8011584:	e09f      	b.n	80116c6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801158a:	781b      	ldrb	r3, [r3, #0]
 801158c:	2b85      	cmp	r3, #133	; 0x85
 801158e:	d001      	beq.n	8011594 <load_xdir+0x3c>
 8011590:	2302      	movs	r3, #2
 8011592:	e098      	b.n	80116c6 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011598:	2220      	movs	r2, #32
 801159a:	4619      	mov	r1, r3
 801159c:	6938      	ldr	r0, [r7, #16]
 801159e:	f7fe fab7 	bl	800fb10 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	3301      	adds	r3, #1
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	3301      	adds	r3, #1
 80115aa:	015b      	lsls	r3, r3, #5
 80115ac:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	2b5f      	cmp	r3, #95	; 0x5f
 80115b2:	d903      	bls.n	80115bc <load_xdir+0x64>
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80115ba:	d901      	bls.n	80115c0 <load_xdir+0x68>
 80115bc:	2302      	movs	r3, #2
 80115be:	e082      	b.n	80116c6 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 80115c0:	2100      	movs	r1, #0
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f7ff fbf2 	bl	8010dac <dir_next>
 80115c8:	4603      	mov	r3, r0
 80115ca:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80115cc:	7bfb      	ldrb	r3, [r7, #15]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d001      	beq.n	80115d6 <load_xdir+0x7e>
 80115d2:	7bfb      	ldrb	r3, [r7, #15]
 80115d4:	e077      	b.n	80116c6 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115de:	4619      	mov	r1, r3
 80115e0:	4610      	mov	r0, r2
 80115e2:	f7fe fcc3 	bl	800ff6c <move_window>
 80115e6:	4603      	mov	r3, r0
 80115e8:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80115ea:	7bfb      	ldrb	r3, [r7, #15]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d001      	beq.n	80115f4 <load_xdir+0x9c>
 80115f0:	7bfb      	ldrb	r3, [r7, #15]
 80115f2:	e068      	b.n	80116c6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	2bc0      	cmp	r3, #192	; 0xc0
 80115fc:	d001      	beq.n	8011602 <load_xdir+0xaa>
 80115fe:	2302      	movs	r3, #2
 8011600:	e061      	b.n	80116c6 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	f103 0020 	add.w	r0, r3, #32
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801160c:	2220      	movs	r2, #32
 801160e:	4619      	mov	r1, r3
 8011610:	f7fe fa7e 	bl	800fb10 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	3323      	adds	r3, #35	; 0x23
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	332c      	adds	r3, #44	; 0x2c
 801161c:	4a2c      	ldr	r2, [pc, #176]	; (80116d0 <load_xdir+0x178>)
 801161e:	fba2 2303 	umull	r2, r3, r2, r3
 8011622:	08db      	lsrs	r3, r3, #3
 8011624:	015b      	lsls	r3, r3, #5
 8011626:	68ba      	ldr	r2, [r7, #8]
 8011628:	429a      	cmp	r2, r3
 801162a:	d201      	bcs.n	8011630 <load_xdir+0xd8>
 801162c:	2302      	movs	r3, #2
 801162e:	e04a      	b.n	80116c6 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8011630:	2340      	movs	r3, #64	; 0x40
 8011632:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8011634:	2100      	movs	r1, #0
 8011636:	6878      	ldr	r0, [r7, #4]
 8011638:	f7ff fbb8 	bl	8010dac <dir_next>
 801163c:	4603      	mov	r3, r0
 801163e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8011640:	7bfb      	ldrb	r3, [r7, #15]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d001      	beq.n	801164a <load_xdir+0xf2>
 8011646:	7bfb      	ldrb	r3, [r7, #15]
 8011648:	e03d      	b.n	80116c6 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681a      	ldr	r2, [r3, #0]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011652:	4619      	mov	r1, r3
 8011654:	4610      	mov	r0, r2
 8011656:	f7fe fc89 	bl	800ff6c <move_window>
 801165a:	4603      	mov	r3, r0
 801165c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 801165e:	7bfb      	ldrb	r3, [r7, #15]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d001      	beq.n	8011668 <load_xdir+0x110>
 8011664:	7bfb      	ldrb	r3, [r7, #15]
 8011666:	e02e      	b.n	80116c6 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	2bc1      	cmp	r3, #193	; 0xc1
 8011670:	d001      	beq.n	8011676 <load_xdir+0x11e>
 8011672:	2302      	movs	r3, #2
 8011674:	e027      	b.n	80116c6 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 801167c:	d208      	bcs.n	8011690 <load_xdir+0x138>
 801167e:	693a      	ldr	r2, [r7, #16]
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	18d0      	adds	r0, r2, r3
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011688:	2220      	movs	r2, #32
 801168a:	4619      	mov	r1, r3
 801168c:	f7fe fa40 	bl	800fb10 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	3320      	adds	r3, #32
 8011694:	617b      	str	r3, [r7, #20]
 8011696:	697a      	ldr	r2, [r7, #20]
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	429a      	cmp	r2, r3
 801169c:	d3ca      	bcc.n	8011634 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80116a4:	d80e      	bhi.n	80116c4 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80116a6:	6938      	ldr	r0, [r7, #16]
 80116a8:	f7ff feef 	bl	801148a <xdir_sum>
 80116ac:	4603      	mov	r3, r0
 80116ae:	461c      	mov	r4, r3
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	3302      	adds	r3, #2
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7fe f865 	bl	800f784 <ld_word>
 80116ba:	4603      	mov	r3, r0
 80116bc:	429c      	cmp	r4, r3
 80116be:	d001      	beq.n	80116c4 <load_xdir+0x16c>
 80116c0:	2302      	movs	r3, #2
 80116c2:	e000      	b.n	80116c6 <load_xdir+0x16e>
	}
	return FR_OK;
 80116c4:	2300      	movs	r3, #0
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	371c      	adds	r7, #28
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd90      	pop	{r4, r7, pc}
 80116ce:	bf00      	nop
 80116d0:	88888889 	.word	0x88888889

080116d4 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 80116d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80116d8:	b084      	sub	sp, #16
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
 80116de:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	681a      	ldr	r2, [r3, #0]
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	6a1a      	ldr	r2, [r3, #32]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f4:	b2da      	uxtb	r2, r3
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116fe:	469b      	mov	fp, r3
 8011700:	f04f 0c00 	mov.w	ip, #0
 8011704:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8011708:	f04f 0200 	mov.w	r2, #0
 801170c:	ea0b 0301 	and.w	r3, fp, r1
 8011710:	ea0c 0402 	and.w	r4, ip, r2
 8011714:	687a      	ldr	r2, [r7, #4]
 8011716:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011726:	4619      	mov	r1, r3
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f7ff faab 	bl	8010c84 <dir_sdi>
 801172e:	4603      	mov	r3, r0
 8011730:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011732:	7bfb      	ldrb	r3, [r7, #15]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d104      	bne.n	8011742 <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f7ff ff0d 	bl	8011558 <load_xdir>
 801173e:	4603      	mov	r3, r0
 8011740:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8011742:	7bfb      	ldrb	r3, [r7, #15]
}
 8011744:	4618      	mov	r0, r3
 8011746:	3710      	adds	r7, #16
 8011748:	46bd      	mov	sp, r7
 801174a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0801174e <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 801174e:	b590      	push	{r4, r7, lr}
 8011750:	b087      	sub	sp, #28
 8011752:	af00      	add	r7, sp, #0
 8011754:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	695b      	ldr	r3, [r3, #20]
 801175c:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	1c9c      	adds	r4, r3, #2
 8011762:	68f8      	ldr	r0, [r7, #12]
 8011764:	f7ff fe91 	bl	801148a <xdir_sum>
 8011768:	4603      	mov	r3, r0
 801176a:	4619      	mov	r1, r3
 801176c:	4620      	mov	r0, r4
 801176e:	f7fe f901 	bl	800f974 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	3301      	adds	r3, #1
 8011776:	781b      	ldrb	r3, [r3, #0]
 8011778:	3301      	adds	r3, #1
 801177a:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011780:	4619      	mov	r1, r3
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	f7ff fa7e 	bl	8010c84 <dir_sdi>
 8011788:	4603      	mov	r3, r0
 801178a:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 801178c:	e026      	b.n	80117dc <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681a      	ldr	r2, [r3, #0]
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011796:	4619      	mov	r1, r3
 8011798:	4610      	mov	r0, r2
 801179a:	f7fe fbe7 	bl	800ff6c <move_window>
 801179e:	4603      	mov	r3, r0
 80117a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80117a2:	7dfb      	ldrb	r3, [r7, #23]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d11d      	bne.n	80117e4 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117ac:	2220      	movs	r2, #32
 80117ae:	68f9      	ldr	r1, [r7, #12]
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7fe f9ad 	bl	800fb10 <mem_cpy>
		dp->obj.fs->wflag = 1;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	2201      	movs	r2, #1
 80117bc:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	3b01      	subs	r3, #1
 80117c2:	613b      	str	r3, [r7, #16]
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d00e      	beq.n	80117e8 <store_xdir+0x9a>
		dirb += SZDIRE;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	3320      	adds	r3, #32
 80117ce:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80117d0:	2100      	movs	r1, #0
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f7ff faea 	bl	8010dac <dir_next>
 80117d8:	4603      	mov	r3, r0
 80117da:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80117dc:	7dfb      	ldrb	r3, [r7, #23]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d0d5      	beq.n	801178e <store_xdir+0x40>
 80117e2:	e002      	b.n	80117ea <store_xdir+0x9c>
		if (res != FR_OK) break;
 80117e4:	bf00      	nop
 80117e6:	e000      	b.n	80117ea <store_xdir+0x9c>
		if (--nent == 0) break;
 80117e8:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80117ea:	7dfb      	ldrb	r3, [r7, #23]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d002      	beq.n	80117f6 <store_xdir+0xa8>
 80117f0:	7dfb      	ldrb	r3, [r7, #23]
 80117f2:	2b01      	cmp	r3, #1
 80117f4:	d101      	bne.n	80117fa <store_xdir+0xac>
 80117f6:	7dfb      	ldrb	r3, [r7, #23]
 80117f8:	e000      	b.n	80117fc <store_xdir+0xae>
 80117fa:	2302      	movs	r3, #2
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	371c      	adds	r7, #28
 8011800:	46bd      	mov	sp, r7
 8011802:	bd90      	pop	{r4, r7, pc}

08011804 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8011804:	b590      	push	{r4, r7, lr}
 8011806:	b085      	sub	sp, #20
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 801180e:	2240      	movs	r2, #64	; 0x40
 8011810:	2100      	movs	r1, #0
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f7fe f99d 	bl	800fb52 <mem_set>
	dirb[XDIR_Type] = 0x85;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2285      	movs	r2, #133	; 0x85
 801181c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	3320      	adds	r3, #32
 8011822:	22c0      	movs	r2, #192	; 0xc0
 8011824:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8011826:	2300      	movs	r3, #0
 8011828:	72bb      	strb	r3, [r7, #10]
 801182a:	2301      	movs	r3, #1
 801182c:	72fb      	strb	r3, [r7, #11]
 801182e:	2301      	movs	r3, #1
 8011830:	813b      	strh	r3, [r7, #8]
 8011832:	2340      	movs	r3, #64	; 0x40
 8011834:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	1c5a      	adds	r2, r3, #1
 801183a:	60fa      	str	r2, [r7, #12]
 801183c:	687a      	ldr	r2, [r7, #4]
 801183e:	4413      	add	r3, r2
 8011840:	22c1      	movs	r2, #193	; 0xc1
 8011842:	701a      	strb	r2, [r3, #0]
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	1c5a      	adds	r2, r3, #1
 8011848:	60fa      	str	r2, [r7, #12]
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	4413      	add	r3, r2
 801184e:	2200      	movs	r2, #0
 8011850:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8011852:	893b      	ldrh	r3, [r7, #8]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d00b      	beq.n	8011870 <create_xdir+0x6c>
 8011858:	7abb      	ldrb	r3, [r7, #10]
 801185a:	005b      	lsls	r3, r3, #1
 801185c:	683a      	ldr	r2, [r7, #0]
 801185e:	4413      	add	r3, r2
 8011860:	881b      	ldrh	r3, [r3, #0]
 8011862:	813b      	strh	r3, [r7, #8]
 8011864:	893b      	ldrh	r3, [r7, #8]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d002      	beq.n	8011870 <create_xdir+0x6c>
 801186a:	7abb      	ldrb	r3, [r7, #10]
 801186c:	3301      	adds	r3, #1
 801186e:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	4413      	add	r3, r2
 8011876:	893a      	ldrh	r2, [r7, #8]
 8011878:	4611      	mov	r1, r2
 801187a:	4618      	mov	r0, r3
 801187c:	f7fe f87a 	bl	800f974 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	3302      	adds	r3, #2
 8011884:	60fb      	str	r3, [r7, #12]
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	f003 031f 	and.w	r3, r3, #31
 801188c:	2b00      	cmp	r3, #0
 801188e:	d1e0      	bne.n	8011852 <create_xdir+0x4e>
		nb++;
 8011890:	7afb      	ldrb	r3, [r7, #11]
 8011892:	3301      	adds	r3, #1
 8011894:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8011896:	7abb      	ldrb	r3, [r7, #10]
 8011898:	005b      	lsls	r3, r3, #1
 801189a:	683a      	ldr	r2, [r7, #0]
 801189c:	4413      	add	r3, r2
 801189e:	881b      	ldrh	r3, [r3, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d1c8      	bne.n	8011836 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	3323      	adds	r3, #35	; 0x23
 80118a8:	7aba      	ldrb	r2, [r7, #10]
 80118aa:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	3301      	adds	r3, #1
 80118b0:	7afa      	ldrb	r2, [r7, #11]
 80118b2:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80118ba:	6838      	ldr	r0, [r7, #0]
 80118bc:	f7ff fe18 	bl	80114f0 <xname_sum>
 80118c0:	4603      	mov	r3, r0
 80118c2:	4619      	mov	r1, r3
 80118c4:	4620      	mov	r0, r4
 80118c6:	f7fe f855 	bl	800f974 <st_word>
}
 80118ca:	bf00      	nop
 80118cc:	3714      	adds	r7, #20
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd90      	pop	{r4, r7, pc}

080118d2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80118d2:	b580      	push	{r7, lr}
 80118d4:	b086      	sub	sp, #24
 80118d6:	af00      	add	r7, sp, #0
 80118d8:	6078      	str	r0, [r7, #4]
 80118da:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80118dc:	2304      	movs	r3, #4
 80118de:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80118e6:	23ff      	movs	r3, #255	; 0xff
 80118e8:	757b      	strb	r3, [r7, #21]
 80118ea:	23ff      	movs	r3, #255	; 0xff
 80118ec:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80118ee:	e09f      	b.n	8011a30 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118f4:	4619      	mov	r1, r3
 80118f6:	6938      	ldr	r0, [r7, #16]
 80118f8:	f7fe fb38 	bl	800ff6c <move_window>
 80118fc:	4603      	mov	r3, r0
 80118fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011900:	7dfb      	ldrb	r3, [r7, #23]
 8011902:	2b00      	cmp	r3, #0
 8011904:	f040 809a 	bne.w	8011a3c <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8011910:	7dbb      	ldrb	r3, [r7, #22]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d102      	bne.n	801191c <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011916:	2304      	movs	r3, #4
 8011918:	75fb      	strb	r3, [r7, #23]
 801191a:	e096      	b.n	8011a4a <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	2b04      	cmp	r3, #4
 8011922:	d118      	bne.n	8011956 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8011924:	7dbb      	ldrb	r3, [r7, #22]
 8011926:	2b85      	cmp	r3, #133	; 0x85
 8011928:	d179      	bne.n	8011a1e <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f7ff fe10 	bl	8011558 <load_xdir>
 8011938:	4603      	mov	r3, r0
 801193a:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 801193c:	7dfb      	ldrb	r3, [r7, #23]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d17e      	bne.n	8011a40 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	695b      	ldr	r3, [r3, #20]
 8011946:	3304      	adds	r3, #4
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801194e:	b2da      	uxtb	r2, r3
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	719a      	strb	r2, [r3, #6]
					}
					break;
 8011954:	e074      	b.n	8011a40 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801195a:	330b      	adds	r3, #11
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011962:	73fb      	strb	r3, [r7, #15]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	7bfa      	ldrb	r2, [r7, #15]
 8011968:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801196a:	7dbb      	ldrb	r3, [r7, #22]
 801196c:	2be5      	cmp	r3, #229	; 0xe5
 801196e:	d00e      	beq.n	801198e <dir_read+0xbc>
 8011970:	7dbb      	ldrb	r3, [r7, #22]
 8011972:	2b2e      	cmp	r3, #46	; 0x2e
 8011974:	d00b      	beq.n	801198e <dir_read+0xbc>
 8011976:	7bfb      	ldrb	r3, [r7, #15]
 8011978:	f023 0320 	bic.w	r3, r3, #32
 801197c:	2b08      	cmp	r3, #8
 801197e:	bf0c      	ite	eq
 8011980:	2301      	moveq	r3, #1
 8011982:	2300      	movne	r3, #0
 8011984:	b2db      	uxtb	r3, r3
 8011986:	461a      	mov	r2, r3
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	4293      	cmp	r3, r2
 801198c:	d002      	beq.n	8011994 <dir_read+0xc2>
				ord = 0xFF;
 801198e:	23ff      	movs	r3, #255	; 0xff
 8011990:	757b      	strb	r3, [r7, #21]
 8011992:	e044      	b.n	8011a1e <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011994:	7bfb      	ldrb	r3, [r7, #15]
 8011996:	2b0f      	cmp	r3, #15
 8011998:	d12f      	bne.n	80119fa <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801199a:	7dbb      	ldrb	r3, [r7, #22]
 801199c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d00d      	beq.n	80119c0 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119a8:	7b5b      	ldrb	r3, [r3, #13]
 80119aa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80119ac:	7dbb      	ldrb	r3, [r7, #22]
 80119ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80119b2:	75bb      	strb	r3, [r7, #22]
 80119b4:	7dbb      	ldrb	r3, [r7, #22]
 80119b6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80119c0:	7dba      	ldrb	r2, [r7, #22]
 80119c2:	7d7b      	ldrb	r3, [r7, #21]
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d115      	bne.n	80119f4 <dir_read+0x122>
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119cc:	330d      	adds	r3, #13
 80119ce:	781b      	ldrb	r3, [r3, #0]
 80119d0:	7d3a      	ldrb	r2, [r7, #20]
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d10e      	bne.n	80119f4 <dir_read+0x122>
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	691a      	ldr	r2, [r3, #16]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119de:	4619      	mov	r1, r3
 80119e0:	4610      	mov	r0, r2
 80119e2:	f7ff fbd5 	bl	8011190 <pick_lfn>
 80119e6:	4603      	mov	r3, r0
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d003      	beq.n	80119f4 <dir_read+0x122>
 80119ec:	7d7b      	ldrb	r3, [r7, #21]
 80119ee:	3b01      	subs	r3, #1
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	e000      	b.n	80119f6 <dir_read+0x124>
 80119f4:	23ff      	movs	r3, #255	; 0xff
 80119f6:	757b      	strb	r3, [r7, #21]
 80119f8:	e011      	b.n	8011a1e <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80119fa:	7d7b      	ldrb	r3, [r7, #21]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d109      	bne.n	8011a14 <dir_read+0x142>
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7ff fd1f 	bl	8011448 <sum_sfn>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	7d3b      	ldrb	r3, [r7, #20]
 8011a10:	4293      	cmp	r3, r2
 8011a12:	d017      	beq.n	8011a44 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f04f 32ff 	mov.w	r2, #4294967295
 8011a1a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8011a1c:	e012      	b.n	8011a44 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011a1e:	2100      	movs	r1, #0
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f7ff f9c3 	bl	8010dac <dir_next>
 8011a26:	4603      	mov	r3, r0
 8011a28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011a2a:	7dfb      	ldrb	r3, [r7, #23]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d10b      	bne.n	8011a48 <dir_read+0x176>
	while (dp->sect) {
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	f47f af5b 	bne.w	80118f0 <dir_read+0x1e>
 8011a3a:	e006      	b.n	8011a4a <dir_read+0x178>
		if (res != FR_OK) break;
 8011a3c:	bf00      	nop
 8011a3e:	e004      	b.n	8011a4a <dir_read+0x178>
					break;
 8011a40:	bf00      	nop
 8011a42:	e002      	b.n	8011a4a <dir_read+0x178>
					break;
 8011a44:	bf00      	nop
 8011a46:	e000      	b.n	8011a4a <dir_read+0x178>
		if (res != FR_OK) break;
 8011a48:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011a4a:	7dfb      	ldrb	r3, [r7, #23]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d002      	beq.n	8011a56 <dir_read+0x184>
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2200      	movs	r2, #0
 8011a54:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8011a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3718      	adds	r7, #24
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011a60:	b590      	push	{r4, r7, lr}
 8011a62:	b089      	sub	sp, #36	; 0x24
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011a6e:	2100      	movs	r1, #0
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f7ff f907 	bl	8010c84 <dir_sdi>
 8011a76:	4603      	mov	r3, r0
 8011a78:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8011a7a:	7ffb      	ldrb	r3, [r7, #31]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d001      	beq.n	8011a84 <dir_find+0x24>
 8011a80:	7ffb      	ldrb	r3, [r7, #31]
 8011a82:	e112      	b.n	8011caa <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	781b      	ldrb	r3, [r3, #0]
 8011a88:	2b04      	cmp	r3, #4
 8011a8a:	d164      	bne.n	8011b56 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	691b      	ldr	r3, [r3, #16]
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7ff fd2d 	bl	80114f0 <xname_sum>
 8011a96:	4603      	mov	r3, r0
 8011a98:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8011a9a:	e04f      	b.n	8011b3c <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	695b      	ldr	r3, [r3, #20]
 8011aa0:	3324      	adds	r3, #36	; 0x24
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7fd fe6e 	bl	800f784 <ld_word>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	461a      	mov	r2, r3
 8011aac:	893b      	ldrh	r3, [r7, #8]
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d000      	beq.n	8011ab4 <dir_find+0x54>
 8011ab2:	e043      	b.n	8011b3c <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	695b      	ldr	r3, [r3, #20]
 8011ab8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011abc:	76fb      	strb	r3, [r7, #27]
 8011abe:	2340      	movs	r3, #64	; 0x40
 8011ac0:	617b      	str	r3, [r7, #20]
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	613b      	str	r3, [r7, #16]
 8011ac6:	e029      	b.n	8011b1c <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	f003 031f 	and.w	r3, r3, #31
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d102      	bne.n	8011ad8 <dir_find+0x78>
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	3302      	adds	r3, #2
 8011ad6:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	695a      	ldr	r2, [r3, #20]
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	4413      	add	r3, r2
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f7fd fe4f 	bl	800f784 <ld_word>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f002 fabd 	bl	8014068 <ff_wtoupper>
 8011aee:	4603      	mov	r3, r0
 8011af0:	461c      	mov	r4, r3
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	691a      	ldr	r2, [r3, #16]
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	005b      	lsls	r3, r3, #1
 8011afa:	4413      	add	r3, r2
 8011afc:	881b      	ldrh	r3, [r3, #0]
 8011afe:	4618      	mov	r0, r3
 8011b00:	f002 fab2 	bl	8014068 <ff_wtoupper>
 8011b04:	4603      	mov	r3, r0
 8011b06:	429c      	cmp	r4, r3
 8011b08:	d10c      	bne.n	8011b24 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8011b0a:	7efb      	ldrb	r3, [r7, #27]
 8011b0c:	3b01      	subs	r3, #1
 8011b0e:	76fb      	strb	r3, [r7, #27]
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	3302      	adds	r3, #2
 8011b14:	617b      	str	r3, [r7, #20]
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	3301      	adds	r3, #1
 8011b1a:	613b      	str	r3, [r7, #16]
 8011b1c:	7efb      	ldrb	r3, [r7, #27]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d1d2      	bne.n	8011ac8 <dir_find+0x68>
 8011b22:	e000      	b.n	8011b26 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8011b24:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8011b26:	7efb      	ldrb	r3, [r7, #27]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d107      	bne.n	8011b3c <dir_find+0xdc>
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	691a      	ldr	r2, [r3, #16]
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	005b      	lsls	r3, r3, #1
 8011b34:	4413      	add	r3, r2
 8011b36:	881b      	ldrh	r3, [r3, #0]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d009      	beq.n	8011b50 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8011b3c:	2100      	movs	r1, #0
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f7ff fec7 	bl	80118d2 <dir_read>
 8011b44:	4603      	mov	r3, r0
 8011b46:	77fb      	strb	r3, [r7, #31]
 8011b48:	7ffb      	ldrb	r3, [r7, #31]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d0a6      	beq.n	8011a9c <dir_find+0x3c>
 8011b4e:	e000      	b.n	8011b52 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8011b50:	bf00      	nop
		}
		return res;
 8011b52:	7ffb      	ldrb	r3, [r7, #31]
 8011b54:	e0a9      	b.n	8011caa <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011b56:	23ff      	movs	r3, #255	; 0xff
 8011b58:	773b      	strb	r3, [r7, #28]
 8011b5a:	7f3b      	ldrb	r3, [r7, #28]
 8011b5c:	777b      	strb	r3, [r7, #29]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f04f 32ff 	mov.w	r2, #4294967295
 8011b64:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b6a:	4619      	mov	r1, r3
 8011b6c:	68f8      	ldr	r0, [r7, #12]
 8011b6e:	f7fe f9fd 	bl	800ff6c <move_window>
 8011b72:	4603      	mov	r3, r0
 8011b74:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8011b76:	7ffb      	ldrb	r3, [r7, #31]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	f040 8090 	bne.w	8011c9e <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b82:	781b      	ldrb	r3, [r3, #0]
 8011b84:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011b86:	7fbb      	ldrb	r3, [r7, #30]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d102      	bne.n	8011b92 <dir_find+0x132>
 8011b8c:	2304      	movs	r3, #4
 8011b8e:	77fb      	strb	r3, [r7, #31]
 8011b90:	e08a      	b.n	8011ca8 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b96:	330b      	adds	r3, #11
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011b9e:	72fb      	strb	r3, [r7, #11]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	7afa      	ldrb	r2, [r7, #11]
 8011ba4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011ba6:	7fbb      	ldrb	r3, [r7, #30]
 8011ba8:	2be5      	cmp	r3, #229	; 0xe5
 8011baa:	d007      	beq.n	8011bbc <dir_find+0x15c>
 8011bac:	7afb      	ldrb	r3, [r7, #11]
 8011bae:	f003 0308 	and.w	r3, r3, #8
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d009      	beq.n	8011bca <dir_find+0x16a>
 8011bb6:	7afb      	ldrb	r3, [r7, #11]
 8011bb8:	2b0f      	cmp	r3, #15
 8011bba:	d006      	beq.n	8011bca <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011bbc:	23ff      	movs	r3, #255	; 0xff
 8011bbe:	777b      	strb	r3, [r7, #29]
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8011bc6:	64da      	str	r2, [r3, #76]	; 0x4c
 8011bc8:	e05e      	b.n	8011c88 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011bca:	7afb      	ldrb	r3, [r7, #11]
 8011bcc:	2b0f      	cmp	r3, #15
 8011bce:	d136      	bne.n	8011c3e <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8011bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d154      	bne.n	8011c88 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011bde:	7fbb      	ldrb	r3, [r7, #30]
 8011be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d00d      	beq.n	8011c04 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bec:	7b5b      	ldrb	r3, [r3, #13]
 8011bee:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011bf0:	7fbb      	ldrb	r3, [r7, #30]
 8011bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011bf6:	77bb      	strb	r3, [r7, #30]
 8011bf8:	7fbb      	ldrb	r3, [r7, #30]
 8011bfa:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011c04:	7fba      	ldrb	r2, [r7, #30]
 8011c06:	7f7b      	ldrb	r3, [r7, #29]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d115      	bne.n	8011c38 <dir_find+0x1d8>
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c10:	330d      	adds	r3, #13
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	7f3a      	ldrb	r2, [r7, #28]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d10e      	bne.n	8011c38 <dir_find+0x1d8>
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	691a      	ldr	r2, [r3, #16]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c22:	4619      	mov	r1, r3
 8011c24:	4610      	mov	r0, r2
 8011c26:	f7ff fa43 	bl	80110b0 <cmp_lfn>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d003      	beq.n	8011c38 <dir_find+0x1d8>
 8011c30:	7f7b      	ldrb	r3, [r7, #29]
 8011c32:	3b01      	subs	r3, #1
 8011c34:	b2db      	uxtb	r3, r3
 8011c36:	e000      	b.n	8011c3a <dir_find+0x1da>
 8011c38:	23ff      	movs	r3, #255	; 0xff
 8011c3a:	777b      	strb	r3, [r7, #29]
 8011c3c:	e024      	b.n	8011c88 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011c3e:	7f7b      	ldrb	r3, [r7, #29]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d109      	bne.n	8011c58 <dir_find+0x1f8>
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7ff fbfd 	bl	8011448 <sum_sfn>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	461a      	mov	r2, r3
 8011c52:	7f3b      	ldrb	r3, [r7, #28]
 8011c54:	4293      	cmp	r3, r2
 8011c56:	d024      	beq.n	8011ca2 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8011c5e:	f003 0301 	and.w	r3, r3, #1
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d10a      	bne.n	8011c7c <dir_find+0x21c>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	3340      	adds	r3, #64	; 0x40
 8011c6e:	220b      	movs	r2, #11
 8011c70:	4619      	mov	r1, r3
 8011c72:	f7fd ff88 	bl	800fb86 <mem_cmp>
 8011c76:	4603      	mov	r3, r0
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d014      	beq.n	8011ca6 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011c7c:	23ff      	movs	r3, #255	; 0xff
 8011c7e:	777b      	strb	r3, [r7, #29]
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f04f 32ff 	mov.w	r2, #4294967295
 8011c86:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011c88:	2100      	movs	r1, #0
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f7ff f88e 	bl	8010dac <dir_next>
 8011c90:	4603      	mov	r3, r0
 8011c92:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8011c94:	7ffb      	ldrb	r3, [r7, #31]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	f43f af65 	beq.w	8011b66 <dir_find+0x106>
 8011c9c:	e004      	b.n	8011ca8 <dir_find+0x248>
		if (res != FR_OK) break;
 8011c9e:	bf00      	nop
 8011ca0:	e002      	b.n	8011ca8 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011ca2:	bf00      	nop
 8011ca4:	e000      	b.n	8011ca8 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011ca6:	bf00      	nop

	return res;
 8011ca8:	7ffb      	ldrb	r3, [r7, #31]
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3724      	adds	r7, #36	; 0x24
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd90      	pop	{r4, r7, pc}
	...

08011cb4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011cb4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8011cb8:	b0a0      	sub	sp, #128	; 0x80
 8011cba:	af00      	add	r7, sp, #0
 8011cbc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8011cca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d001      	beq.n	8011cd6 <dir_register+0x22>
 8011cd2:	2306      	movs	r3, #6
 8011cd4:	e198      	b.n	8012008 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	677b      	str	r3, [r7, #116]	; 0x74
 8011cda:	e002      	b.n	8011ce2 <dir_register+0x2e>
 8011cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011cde:	3301      	adds	r3, #1
 8011ce0:	677b      	str	r3, [r7, #116]	; 0x74
 8011ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ce4:	691a      	ldr	r2, [r3, #16]
 8011ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011ce8:	005b      	lsls	r3, r3, #1
 8011cea:	4413      	add	r3, r2
 8011cec:	881b      	ldrh	r3, [r3, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d1f4      	bne.n	8011cdc <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	2b04      	cmp	r3, #4
 8011cf8:	f040 80a9 	bne.w	8011e4e <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8011cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011cfe:	330e      	adds	r3, #14
 8011d00:	4aa7      	ldr	r2, [pc, #668]	; (8011fa0 <dir_register+0x2ec>)
 8011d02:	fba2 2303 	umull	r2, r3, r2, r3
 8011d06:	08db      	lsrs	r3, r3, #3
 8011d08:	3302      	adds	r3, #2
 8011d0a:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8011d0c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7ff f932 	bl	8010f78 <dir_alloc>
 8011d14:	4603      	mov	r3, r0
 8011d16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8011d1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d002      	beq.n	8011d28 <dir_register+0x74>
 8011d22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011d26:	e16f      	b.n	8012008 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d2c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011d2e:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8011d32:	440b      	add	r3, r1
 8011d34:	015b      	lsls	r3, r3, #5
 8011d36:	1ad2      	subs	r2, r2, r3
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	689b      	ldr	r3, [r3, #8]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d07a      	beq.n	8011e3a <dir_register+0x186>
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	79db      	ldrb	r3, [r3, #7]
 8011d48:	f003 0304 	and.w	r3, r3, #4
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d074      	beq.n	8011e3a <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8011d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d58:	895b      	ldrh	r3, [r3, #10]
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d5e:	899b      	ldrh	r3, [r3, #12]
 8011d60:	fb03 f300 	mul.w	r3, r3, r0
 8011d64:	469b      	mov	fp, r3
 8011d66:	f04f 0c00 	mov.w	ip, #0
 8011d6a:	eb1b 0301 	adds.w	r3, fp, r1
 8011d6e:	eb4c 0402 	adc.w	r4, ip, r2
 8011d72:	687a      	ldr	r2, [r7, #4]
 8011d74:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f7fe fd26 	bl	80107cc <fill_first_frag>
 8011d80:	4603      	mov	r3, r0
 8011d82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8011d86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d002      	beq.n	8011d94 <dir_register+0xe0>
 8011d8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011d92:	e139      	b.n	8012008 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8011d9e:	4619      	mov	r1, r3
 8011da0:	f7fe fd43 	bl	801082a <fill_last_frag>
 8011da4:	4603      	mov	r3, r0
 8011da6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8011daa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d002      	beq.n	8011db8 <dir_register+0x104>
 8011db2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011db6:	e127      	b.n	8012008 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	f107 0308 	add.w	r3, r7, #8
 8011dbe:	4611      	mov	r1, r2
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7ff fc87 	bl	80116d4 <load_obj_dir>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8011dcc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d002      	beq.n	8011dda <dir_register+0x126>
 8011dd4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011dd8:	e116      	b.n	8012008 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8011dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ddc:	695b      	ldr	r3, [r3, #20]
 8011dde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8011de8:	461a      	mov	r2, r3
 8011dea:	4623      	mov	r3, r4
 8011dec:	4608      	mov	r0, r1
 8011dee:	f7fd fe08 	bl	800fa02 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8011df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011df4:	695b      	ldr	r3, [r3, #20]
 8011df6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8011e00:	461a      	mov	r2, r3
 8011e02:	4623      	mov	r3, r4
 8011e04:	4608      	mov	r0, r1
 8011e06:	f7fd fdfc 	bl	800fa02 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	79da      	ldrb	r2, [r3, #7]
 8011e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e10:	695b      	ldr	r3, [r3, #20]
 8011e12:	3321      	adds	r3, #33	; 0x21
 8011e14:	f042 0201 	orr.w	r2, r2, #1
 8011e18:	b2d2      	uxtb	r2, r2
 8011e1a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8011e1c:	f107 0308 	add.w	r3, r7, #8
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7ff fc94 	bl	801174e <store_xdir>
 8011e26:	4603      	mov	r3, r0
 8011e28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8011e2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d002      	beq.n	8011e3a <dir_register+0x186>
 8011e34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011e38:	e0e6      	b.n	8012008 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8011e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e3c:	695a      	ldr	r2, [r3, #20]
 8011e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e40:	691b      	ldr	r3, [r3, #16]
 8011e42:	4619      	mov	r1, r3
 8011e44:	4610      	mov	r0, r2
 8011e46:	f7ff fcdd 	bl	8011804 <create_xdir>
		return FR_OK;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	e0dc      	b.n	8012008 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8011e54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011e58:	220c      	movs	r2, #12
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7fd fe58 	bl	800fb10 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011e60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011e64:	f003 0301 	and.w	r3, r3, #1
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d033      	beq.n	8011ed4 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2240      	movs	r2, #64	; 0x40
 8011e70:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8011e74:	2301      	movs	r3, #1
 8011e76:	67bb      	str	r3, [r7, #120]	; 0x78
 8011e78:	e016      	b.n	8011ea8 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e82:	691a      	ldr	r2, [r3, #16]
 8011e84:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8011e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e8a:	f7ff fa4d 	bl	8011328 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f7ff fde6 	bl	8011a60 <dir_find>
 8011e94:	4603      	mov	r3, r0
 8011e96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8011e9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d106      	bne.n	8011eb0 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 8011ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ea4:	3301      	adds	r3, #1
 8011ea6:	67bb      	str	r3, [r7, #120]	; 0x78
 8011ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011eaa:	2b63      	cmp	r3, #99	; 0x63
 8011eac:	d9e5      	bls.n	8011e7a <dir_register+0x1c6>
 8011eae:	e000      	b.n	8011eb2 <dir_register+0x1fe>
			if (res != FR_OK) break;
 8011eb0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011eb4:	2b64      	cmp	r3, #100	; 0x64
 8011eb6:	d101      	bne.n	8011ebc <dir_register+0x208>
 8011eb8:	2307      	movs	r3, #7
 8011eba:	e0a5      	b.n	8012008 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011ebc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011ec0:	2b04      	cmp	r3, #4
 8011ec2:	d002      	beq.n	8011eca <dir_register+0x216>
 8011ec4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011ec8:	e09e      	b.n	8012008 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011eca:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011ed4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011ed8:	f003 0302 	and.w	r3, r3, #2
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d007      	beq.n	8011ef0 <dir_register+0x23c>
 8011ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011ee2:	330c      	adds	r3, #12
 8011ee4:	4a2f      	ldr	r2, [pc, #188]	; (8011fa4 <dir_register+0x2f0>)
 8011ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8011eea:	089b      	lsrs	r3, r3, #2
 8011eec:	3301      	adds	r3, #1
 8011eee:	e000      	b.n	8011ef2 <dir_register+0x23e>
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011ef4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f7ff f83e 	bl	8010f78 <dir_alloc>
 8011efc:	4603      	mov	r3, r0
 8011efe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011f02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d14f      	bne.n	8011faa <dir_register+0x2f6>
 8011f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f0c:	3b01      	subs	r3, #1
 8011f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8011f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d049      	beq.n	8011faa <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f1c:	015b      	lsls	r3, r3, #5
 8011f1e:	1ad3      	subs	r3, r2, r3
 8011f20:	4619      	mov	r1, r3
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f7fe feae 	bl	8010c84 <dir_sdi>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8011f2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d139      	bne.n	8011faa <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	3340      	adds	r3, #64	; 0x40
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7ff fa84 	bl	8011448 <sum_sfn>
 8011f40:	4603      	mov	r3, r0
 8011f42:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011f4e:	f7fe f80d 	bl	800ff6c <move_window>
 8011f52:	4603      	mov	r3, r0
 8011f54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8011f58:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d123      	bne.n	8011fa8 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8011f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f62:	6918      	ldr	r0, [r3, #16]
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8011f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f6a:	b2da      	uxtb	r2, r3
 8011f6c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011f70:	f7ff f972 	bl	8011258 <put_lfn>
				fs->wflag = 1;
 8011f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f76:	2201      	movs	r2, #1
 8011f78:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8011f7a:	2100      	movs	r1, #0
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f7fe ff15 	bl	8010dac <dir_next>
 8011f82:	4603      	mov	r3, r0
 8011f84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8011f88:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d10c      	bne.n	8011faa <dir_register+0x2f6>
 8011f90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f92:	3b01      	subs	r3, #1
 8011f94:	673b      	str	r3, [r7, #112]	; 0x70
 8011f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d1d4      	bne.n	8011f46 <dir_register+0x292>
 8011f9c:	e005      	b.n	8011faa <dir_register+0x2f6>
 8011f9e:	bf00      	nop
 8011fa0:	88888889 	.word	0x88888889
 8011fa4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8011fa8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011faa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d128      	bne.n	8012004 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011fba:	f7fd ffd7 	bl	800ff6c <move_window>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8011fc4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d11b      	bne.n	8012004 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fd0:	2220      	movs	r2, #32
 8011fd2:	2100      	movs	r1, #0
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7fd fdbc 	bl	800fb52 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	3340      	adds	r3, #64	; 0x40
 8011fe2:	220b      	movs	r2, #11
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	f7fd fd93 	bl	800fb10 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ff4:	330c      	adds	r3, #12
 8011ff6:	f002 0218 	and.w	r2, r2, #24
 8011ffa:	b2d2      	uxtb	r2, r2
 8011ffc:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8011ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012000:	2201      	movs	r2, #1
 8012002:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012004:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8012008:	4618      	mov	r0, r3
 801200a:	3780      	adds	r7, #128	; 0x80
 801200c:	46bd      	mov	sp, r7
 801200e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8012012:	bf00      	nop

08012014 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b08a      	sub	sp, #40	; 0x28
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
 801201c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	613b      	str	r3, [r7, #16]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	691b      	ldr	r3, [r3, #16]
 801202a:	60fb      	str	r3, [r7, #12]
 801202c:	2300      	movs	r3, #0
 801202e:	617b      	str	r3, [r7, #20]
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012034:	69bb      	ldr	r3, [r7, #24]
 8012036:	1c5a      	adds	r2, r3, #1
 8012038:	61ba      	str	r2, [r7, #24]
 801203a:	693a      	ldr	r2, [r7, #16]
 801203c:	4413      	add	r3, r2
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8012042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012044:	2b1f      	cmp	r3, #31
 8012046:	d940      	bls.n	80120ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801204a:	2b2f      	cmp	r3, #47	; 0x2f
 801204c:	d006      	beq.n	801205c <create_name+0x48>
 801204e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012050:	2b5c      	cmp	r3, #92	; 0x5c
 8012052:	d110      	bne.n	8012076 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012054:	e002      	b.n	801205c <create_name+0x48>
 8012056:	69bb      	ldr	r3, [r7, #24]
 8012058:	3301      	adds	r3, #1
 801205a:	61bb      	str	r3, [r7, #24]
 801205c:	693a      	ldr	r2, [r7, #16]
 801205e:	69bb      	ldr	r3, [r7, #24]
 8012060:	4413      	add	r3, r2
 8012062:	781b      	ldrb	r3, [r3, #0]
 8012064:	2b2f      	cmp	r3, #47	; 0x2f
 8012066:	d0f6      	beq.n	8012056 <create_name+0x42>
 8012068:	693a      	ldr	r2, [r7, #16]
 801206a:	69bb      	ldr	r3, [r7, #24]
 801206c:	4413      	add	r3, r2
 801206e:	781b      	ldrb	r3, [r3, #0]
 8012070:	2b5c      	cmp	r3, #92	; 0x5c
 8012072:	d0f0      	beq.n	8012056 <create_name+0x42>
			break;
 8012074:	e02a      	b.n	80120cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	2bfe      	cmp	r3, #254	; 0xfe
 801207a:	d901      	bls.n	8012080 <create_name+0x6c>
 801207c:	2306      	movs	r3, #6
 801207e:	e177      	b.n	8012370 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012082:	b2db      	uxtb	r3, r3
 8012084:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012088:	2101      	movs	r1, #1
 801208a:	4618      	mov	r0, r3
 801208c:	f001 ffb0 	bl	8013ff0 <ff_convert>
 8012090:	4603      	mov	r3, r0
 8012092:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012096:	2b00      	cmp	r3, #0
 8012098:	d101      	bne.n	801209e <create_name+0x8a>
 801209a:	2306      	movs	r3, #6
 801209c:	e168      	b.n	8012370 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801209e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120a0:	2b7f      	cmp	r3, #127	; 0x7f
 80120a2:	d809      	bhi.n	80120b8 <create_name+0xa4>
 80120a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120a6:	4619      	mov	r1, r3
 80120a8:	48b3      	ldr	r0, [pc, #716]	; (8012378 <create_name+0x364>)
 80120aa:	f7fd fd93 	bl	800fbd4 <chk_chr>
 80120ae:	4603      	mov	r3, r0
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d001      	beq.n	80120b8 <create_name+0xa4>
 80120b4:	2306      	movs	r3, #6
 80120b6:	e15b      	b.n	8012370 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80120b8:	697b      	ldr	r3, [r7, #20]
 80120ba:	1c5a      	adds	r2, r3, #1
 80120bc:	617a      	str	r2, [r7, #20]
 80120be:	005b      	lsls	r3, r3, #1
 80120c0:	68fa      	ldr	r2, [r7, #12]
 80120c2:	4413      	add	r3, r2
 80120c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80120c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80120c8:	e7b4      	b.n	8012034 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80120ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80120cc:	693a      	ldr	r2, [r7, #16]
 80120ce:	69bb      	ldr	r3, [r7, #24]
 80120d0:	441a      	add	r2, r3
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80120d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120d8:	2b1f      	cmp	r3, #31
 80120da:	d801      	bhi.n	80120e0 <create_name+0xcc>
 80120dc:	2304      	movs	r3, #4
 80120de:	e000      	b.n	80120e2 <create_name+0xce>
 80120e0:	2300      	movs	r3, #0
 80120e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80120e6:	e011      	b.n	801210c <create_name+0xf8>
		w = lfn[di - 1];
 80120e8:	697a      	ldr	r2, [r7, #20]
 80120ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80120ee:	4413      	add	r3, r2
 80120f0:	005b      	lsls	r3, r3, #1
 80120f2:	68fa      	ldr	r2, [r7, #12]
 80120f4:	4413      	add	r3, r2
 80120f6:	881b      	ldrh	r3, [r3, #0]
 80120f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80120fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120fc:	2b20      	cmp	r3, #32
 80120fe:	d002      	beq.n	8012106 <create_name+0xf2>
 8012100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012102:	2b2e      	cmp	r3, #46	; 0x2e
 8012104:	d106      	bne.n	8012114 <create_name+0x100>
		di--;
 8012106:	697b      	ldr	r3, [r7, #20]
 8012108:	3b01      	subs	r3, #1
 801210a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d1ea      	bne.n	80120e8 <create_name+0xd4>
 8012112:	e000      	b.n	8012116 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8012114:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	005b      	lsls	r3, r3, #1
 801211a:	68fa      	ldr	r2, [r7, #12]
 801211c:	4413      	add	r3, r2
 801211e:	2200      	movs	r2, #0
 8012120:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d101      	bne.n	801212c <create_name+0x118>
 8012128:	2306      	movs	r3, #6
 801212a:	e121      	b.n	8012370 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	3340      	adds	r3, #64	; 0x40
 8012130:	220b      	movs	r2, #11
 8012132:	2120      	movs	r1, #32
 8012134:	4618      	mov	r0, r3
 8012136:	f7fd fd0c 	bl	800fb52 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801213a:	2300      	movs	r3, #0
 801213c:	61bb      	str	r3, [r7, #24]
 801213e:	e002      	b.n	8012146 <create_name+0x132>
 8012140:	69bb      	ldr	r3, [r7, #24]
 8012142:	3301      	adds	r3, #1
 8012144:	61bb      	str	r3, [r7, #24]
 8012146:	69bb      	ldr	r3, [r7, #24]
 8012148:	005b      	lsls	r3, r3, #1
 801214a:	68fa      	ldr	r2, [r7, #12]
 801214c:	4413      	add	r3, r2
 801214e:	881b      	ldrh	r3, [r3, #0]
 8012150:	2b20      	cmp	r3, #32
 8012152:	d0f5      	beq.n	8012140 <create_name+0x12c>
 8012154:	69bb      	ldr	r3, [r7, #24]
 8012156:	005b      	lsls	r3, r3, #1
 8012158:	68fa      	ldr	r2, [r7, #12]
 801215a:	4413      	add	r3, r2
 801215c:	881b      	ldrh	r3, [r3, #0]
 801215e:	2b2e      	cmp	r3, #46	; 0x2e
 8012160:	d0ee      	beq.n	8012140 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012162:	69bb      	ldr	r3, [r7, #24]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d009      	beq.n	801217c <create_name+0x168>
 8012168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801216c:	f043 0303 	orr.w	r3, r3, #3
 8012170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012174:	e002      	b.n	801217c <create_name+0x168>
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	3b01      	subs	r3, #1
 801217a:	617b      	str	r3, [r7, #20]
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d009      	beq.n	8012196 <create_name+0x182>
 8012182:	697a      	ldr	r2, [r7, #20]
 8012184:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012188:	4413      	add	r3, r2
 801218a:	005b      	lsls	r3, r3, #1
 801218c:	68fa      	ldr	r2, [r7, #12]
 801218e:	4413      	add	r3, r2
 8012190:	881b      	ldrh	r3, [r3, #0]
 8012192:	2b2e      	cmp	r3, #46	; 0x2e
 8012194:	d1ef      	bne.n	8012176 <create_name+0x162>

	i = b = 0; ni = 8;
 8012196:	2300      	movs	r3, #0
 8012198:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801219c:	2300      	movs	r3, #0
 801219e:	623b      	str	r3, [r7, #32]
 80121a0:	2308      	movs	r3, #8
 80121a2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80121a4:	69bb      	ldr	r3, [r7, #24]
 80121a6:	1c5a      	adds	r2, r3, #1
 80121a8:	61ba      	str	r2, [r7, #24]
 80121aa:	005b      	lsls	r3, r3, #1
 80121ac:	68fa      	ldr	r2, [r7, #12]
 80121ae:	4413      	add	r3, r2
 80121b0:	881b      	ldrh	r3, [r3, #0]
 80121b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80121b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	f000 8090 	beq.w	80122dc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80121bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121be:	2b20      	cmp	r3, #32
 80121c0:	d006      	beq.n	80121d0 <create_name+0x1bc>
 80121c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121c4:	2b2e      	cmp	r3, #46	; 0x2e
 80121c6:	d10a      	bne.n	80121de <create_name+0x1ca>
 80121c8:	69ba      	ldr	r2, [r7, #24]
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	429a      	cmp	r2, r3
 80121ce:	d006      	beq.n	80121de <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80121d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121d4:	f043 0303 	orr.w	r3, r3, #3
 80121d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80121dc:	e07d      	b.n	80122da <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80121de:	6a3a      	ldr	r2, [r7, #32]
 80121e0:	69fb      	ldr	r3, [r7, #28]
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d203      	bcs.n	80121ee <create_name+0x1da>
 80121e6:	69ba      	ldr	r2, [r7, #24]
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d123      	bne.n	8012236 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80121ee:	69fb      	ldr	r3, [r7, #28]
 80121f0:	2b0b      	cmp	r3, #11
 80121f2:	d106      	bne.n	8012202 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80121f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121f8:	f043 0303 	orr.w	r3, r3, #3
 80121fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012200:	e06f      	b.n	80122e2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8012202:	69ba      	ldr	r2, [r7, #24]
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	429a      	cmp	r2, r3
 8012208:	d005      	beq.n	8012216 <create_name+0x202>
 801220a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801220e:	f043 0303 	orr.w	r3, r3, #3
 8012212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8012216:	69ba      	ldr	r2, [r7, #24]
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	429a      	cmp	r2, r3
 801221c:	d860      	bhi.n	80122e0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	61bb      	str	r3, [r7, #24]
 8012222:	2308      	movs	r3, #8
 8012224:	623b      	str	r3, [r7, #32]
 8012226:	230b      	movs	r3, #11
 8012228:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801222a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801222e:	009b      	lsls	r3, r3, #2
 8012230:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012234:	e051      	b.n	80122da <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8012236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012238:	2b7f      	cmp	r3, #127	; 0x7f
 801223a:	d914      	bls.n	8012266 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801223c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801223e:	2100      	movs	r1, #0
 8012240:	4618      	mov	r0, r3
 8012242:	f001 fed5 	bl	8013ff0 <ff_convert>
 8012246:	4603      	mov	r3, r0
 8012248:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801224a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801224c:	2b00      	cmp	r3, #0
 801224e:	d004      	beq.n	801225a <create_name+0x246>
 8012250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012252:	3b80      	subs	r3, #128	; 0x80
 8012254:	4a49      	ldr	r2, [pc, #292]	; (801237c <create_name+0x368>)
 8012256:	5cd3      	ldrb	r3, [r2, r3]
 8012258:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801225a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801225e:	f043 0302 	orr.w	r3, r3, #2
 8012262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012268:	2b00      	cmp	r3, #0
 801226a:	d007      	beq.n	801227c <create_name+0x268>
 801226c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801226e:	4619      	mov	r1, r3
 8012270:	4843      	ldr	r0, [pc, #268]	; (8012380 <create_name+0x36c>)
 8012272:	f7fd fcaf 	bl	800fbd4 <chk_chr>
 8012276:	4603      	mov	r3, r0
 8012278:	2b00      	cmp	r3, #0
 801227a:	d008      	beq.n	801228e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801227c:	235f      	movs	r3, #95	; 0x5f
 801227e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012284:	f043 0303 	orr.w	r3, r3, #3
 8012288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801228c:	e01b      	b.n	80122c6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801228e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012290:	2b40      	cmp	r3, #64	; 0x40
 8012292:	d909      	bls.n	80122a8 <create_name+0x294>
 8012294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012296:	2b5a      	cmp	r3, #90	; 0x5a
 8012298:	d806      	bhi.n	80122a8 <create_name+0x294>
					b |= 2;
 801229a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801229e:	f043 0302 	orr.w	r3, r3, #2
 80122a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80122a6:	e00e      	b.n	80122c6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80122a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122aa:	2b60      	cmp	r3, #96	; 0x60
 80122ac:	d90b      	bls.n	80122c6 <create_name+0x2b2>
 80122ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122b0:	2b7a      	cmp	r3, #122	; 0x7a
 80122b2:	d808      	bhi.n	80122c6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80122b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80122b8:	f043 0301 	orr.w	r3, r3, #1
 80122bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80122c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122c2:	3b20      	subs	r3, #32
 80122c4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80122c6:	6a3b      	ldr	r3, [r7, #32]
 80122c8:	1c5a      	adds	r2, r3, #1
 80122ca:	623a      	str	r2, [r7, #32]
 80122cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80122ce:	b2d1      	uxtb	r1, r2
 80122d0:	687a      	ldr	r2, [r7, #4]
 80122d2:	4413      	add	r3, r2
 80122d4:	460a      	mov	r2, r1
 80122d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 80122da:	e763      	b.n	80121a4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80122dc:	bf00      	nop
 80122de:	e000      	b.n	80122e2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80122e0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80122e8:	2be5      	cmp	r3, #229	; 0xe5
 80122ea:	d103      	bne.n	80122f4 <create_name+0x2e0>
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2205      	movs	r2, #5
 80122f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	2b08      	cmp	r3, #8
 80122f8:	d104      	bne.n	8012304 <create_name+0x2f0>
 80122fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80122fe:	009b      	lsls	r3, r3, #2
 8012300:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012304:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012308:	f003 030c 	and.w	r3, r3, #12
 801230c:	2b0c      	cmp	r3, #12
 801230e:	d005      	beq.n	801231c <create_name+0x308>
 8012310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012314:	f003 0303 	and.w	r3, r3, #3
 8012318:	2b03      	cmp	r3, #3
 801231a:	d105      	bne.n	8012328 <create_name+0x314>
 801231c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012320:	f043 0302 	orr.w	r3, r3, #2
 8012324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801232c:	f003 0302 	and.w	r3, r3, #2
 8012330:	2b00      	cmp	r3, #0
 8012332:	d117      	bne.n	8012364 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012334:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012338:	f003 0303 	and.w	r3, r3, #3
 801233c:	2b01      	cmp	r3, #1
 801233e:	d105      	bne.n	801234c <create_name+0x338>
 8012340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012344:	f043 0310 	orr.w	r3, r3, #16
 8012348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801234c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012350:	f003 030c 	and.w	r3, r3, #12
 8012354:	2b04      	cmp	r3, #4
 8012356:	d105      	bne.n	8012364 <create_name+0x350>
 8012358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801235c:	f043 0308 	orr.w	r3, r3, #8
 8012360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801236a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 801236e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012370:	4618      	mov	r0, r3
 8012372:	3728      	adds	r7, #40	; 0x28
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}
 8012378:	080142c0 	.word	0x080142c0
 801237c:	08014350 	.word	0x08014350
 8012380:	080142cc 	.word	0x080142cc

08012384 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012384:	b590      	push	{r4, r7, lr}
 8012386:	b087      	sub	sp, #28
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012398:	e002      	b.n	80123a0 <follow_path+0x1c>
 801239a:	683b      	ldr	r3, [r7, #0]
 801239c:	3301      	adds	r3, #1
 801239e:	603b      	str	r3, [r7, #0]
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	2b2f      	cmp	r3, #47	; 0x2f
 80123a6:	d0f8      	beq.n	801239a <follow_path+0x16>
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	2b5c      	cmp	r3, #92	; 0x5c
 80123ae:	d0f4      	beq.n	801239a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80123b0:	693b      	ldr	r3, [r7, #16]
 80123b2:	2200      	movs	r2, #0
 80123b4:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	2200      	movs	r2, #0
 80123ba:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	781b      	ldrb	r3, [r3, #0]
 80123c0:	2b1f      	cmp	r3, #31
 80123c2:	d80a      	bhi.n	80123da <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2280      	movs	r2, #128	; 0x80
 80123c8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 80123cc:	2100      	movs	r1, #0
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f7fe fc58 	bl	8010c84 <dir_sdi>
 80123d4:	4603      	mov	r3, r0
 80123d6:	75fb      	strb	r3, [r7, #23]
 80123d8:	e07c      	b.n	80124d4 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80123da:	463b      	mov	r3, r7
 80123dc:	4619      	mov	r1, r3
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f7ff fe18 	bl	8012014 <create_name>
 80123e4:	4603      	mov	r3, r0
 80123e6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80123e8:	7dfb      	ldrb	r3, [r7, #23]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d16d      	bne.n	80124ca <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	f7ff fb36 	bl	8011a60 <dir_find>
 80123f4:	4603      	mov	r3, r0
 80123f6:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80123fe:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012400:	7dfb      	ldrb	r3, [r7, #23]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d00a      	beq.n	801241c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012406:	7dfb      	ldrb	r3, [r7, #23]
 8012408:	2b04      	cmp	r3, #4
 801240a:	d160      	bne.n	80124ce <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801240c:	7afb      	ldrb	r3, [r7, #11]
 801240e:	f003 0304 	and.w	r3, r3, #4
 8012412:	2b00      	cmp	r3, #0
 8012414:	d15b      	bne.n	80124ce <follow_path+0x14a>
 8012416:	2305      	movs	r3, #5
 8012418:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801241a:	e058      	b.n	80124ce <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801241c:	7afb      	ldrb	r3, [r7, #11]
 801241e:	f003 0304 	and.w	r3, r3, #4
 8012422:	2b00      	cmp	r3, #0
 8012424:	d155      	bne.n	80124d2 <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	799b      	ldrb	r3, [r3, #6]
 801242a:	f003 0310 	and.w	r3, r3, #16
 801242e:	2b00      	cmp	r3, #0
 8012430:	d102      	bne.n	8012438 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8012432:	2305      	movs	r3, #5
 8012434:	75fb      	strb	r3, [r7, #23]
 8012436:	e04d      	b.n	80124d4 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	2b04      	cmp	r3, #4
 801243e:	d12f      	bne.n	80124a0 <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 8012440:	693b      	ldr	r3, [r7, #16]
 8012442:	689a      	ldr	r2, [r3, #8]
 8012444:	693b      	ldr	r3, [r7, #16]
 8012446:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8012448:	693b      	ldr	r3, [r7, #16]
 801244a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801244e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012452:	693a      	ldr	r2, [r7, #16]
 8012454:	79d2      	ldrb	r2, [r2, #7]
 8012456:	431a      	orrs	r2, r3
 8012458:	693b      	ldr	r3, [r7, #16]
 801245a:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	695b      	ldr	r3, [r3, #20]
 8012468:	3334      	adds	r3, #52	; 0x34
 801246a:	4618      	mov	r0, r3
 801246c:	f7fd f9a2 	bl	800f7b4 <ld_dword>
 8012470:	4602      	mov	r2, r0
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	695b      	ldr	r3, [r3, #20]
 801247a:	3321      	adds	r3, #33	; 0x21
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	f003 0302 	and.w	r3, r3, #2
 8012482:	b2da      	uxtb	r2, r3
 8012484:	693b      	ldr	r3, [r7, #16]
 8012486:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	695b      	ldr	r3, [r3, #20]
 801248c:	3338      	adds	r3, #56	; 0x38
 801248e:	4618      	mov	r0, r3
 8012490:	f7fd f9b3 	bl	800f7fa <ld_qword>
 8012494:	4603      	mov	r3, r0
 8012496:	460c      	mov	r4, r1
 8012498:	693a      	ldr	r2, [r7, #16]
 801249a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801249e:	e79c      	b.n	80123da <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124aa:	68fa      	ldr	r2, [r7, #12]
 80124ac:	8992      	ldrh	r2, [r2, #12]
 80124ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80124b2:	fb02 f200 	mul.w	r2, r2, r0
 80124b6:	1a9b      	subs	r3, r3, r2
 80124b8:	440b      	add	r3, r1
 80124ba:	4619      	mov	r1, r3
 80124bc:	68f8      	ldr	r0, [r7, #12]
 80124be:	f7fe fdb7 	bl	8011030 <ld_clust>
 80124c2:	4602      	mov	r2, r0
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80124c8:	e787      	b.n	80123da <follow_path+0x56>
			if (res != FR_OK) break;
 80124ca:	bf00      	nop
 80124cc:	e002      	b.n	80124d4 <follow_path+0x150>
				break;
 80124ce:	bf00      	nop
 80124d0:	e000      	b.n	80124d4 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80124d2:	bf00      	nop
			}
		}
	}

	return res;
 80124d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	371c      	adds	r7, #28
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd90      	pop	{r4, r7, pc}

080124de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80124de:	b480      	push	{r7}
 80124e0:	b087      	sub	sp, #28
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80124e6:	f04f 33ff 	mov.w	r3, #4294967295
 80124ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d031      	beq.n	8012558 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	617b      	str	r3, [r7, #20]
 80124fa:	e002      	b.n	8012502 <get_ldnumber+0x24>
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	3301      	adds	r3, #1
 8012500:	617b      	str	r3, [r7, #20]
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	2b1f      	cmp	r3, #31
 8012508:	d903      	bls.n	8012512 <get_ldnumber+0x34>
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	2b3a      	cmp	r3, #58	; 0x3a
 8012510:	d1f4      	bne.n	80124fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	2b3a      	cmp	r3, #58	; 0x3a
 8012518:	d11c      	bne.n	8012554 <get_ldnumber+0x76>
			tp = *path;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	1c5a      	adds	r2, r3, #1
 8012524:	60fa      	str	r2, [r7, #12]
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	3b30      	subs	r3, #48	; 0x30
 801252a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	2b09      	cmp	r3, #9
 8012530:	d80e      	bhi.n	8012550 <get_ldnumber+0x72>
 8012532:	68fa      	ldr	r2, [r7, #12]
 8012534:	697b      	ldr	r3, [r7, #20]
 8012536:	429a      	cmp	r2, r3
 8012538:	d10a      	bne.n	8012550 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d107      	bne.n	8012550 <get_ldnumber+0x72>
					vol = (int)i;
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	3301      	adds	r3, #1
 8012548:	617b      	str	r3, [r7, #20]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	697a      	ldr	r2, [r7, #20]
 801254e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	e002      	b.n	801255a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012554:	2300      	movs	r3, #0
 8012556:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012558:	693b      	ldr	r3, [r7, #16]
}
 801255a:	4618      	mov	r0, r3
 801255c:	371c      	adds	r7, #28
 801255e:	46bd      	mov	sp, r7
 8012560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012564:	4770      	bx	lr
	...

08012568 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2200      	movs	r2, #0
 8012576:	70da      	strb	r2, [r3, #3]
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f04f 32ff 	mov.w	r2, #4294967295
 801257e:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012580:	6839      	ldr	r1, [r7, #0]
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f7fd fcf2 	bl	800ff6c <move_window>
 8012588:	4603      	mov	r3, r0
 801258a:	2b00      	cmp	r3, #0
 801258c:	d001      	beq.n	8012592 <check_fs+0x2a>
 801258e:	2304      	movs	r3, #4
 8012590:	e044      	b.n	801261c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	333c      	adds	r3, #60	; 0x3c
 8012596:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801259a:	4618      	mov	r0, r3
 801259c:	f7fd f8f2 	bl	800f784 <ld_word>
 80125a0:	4603      	mov	r3, r0
 80125a2:	461a      	mov	r2, r3
 80125a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80125a8:	429a      	cmp	r2, r3
 80125aa:	d001      	beq.n	80125b0 <check_fs+0x48>
 80125ac:	2303      	movs	r3, #3
 80125ae:	e035      	b.n	801261c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80125b6:	2be9      	cmp	r3, #233	; 0xe9
 80125b8:	d009      	beq.n	80125ce <check_fs+0x66>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80125c0:	2beb      	cmp	r3, #235	; 0xeb
 80125c2:	d11e      	bne.n	8012602 <check_fs+0x9a>
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80125ca:	2b90      	cmp	r3, #144	; 0x90
 80125cc:	d119      	bne.n	8012602 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	333c      	adds	r3, #60	; 0x3c
 80125d2:	3336      	adds	r3, #54	; 0x36
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7fd f8ed 	bl	800f7b4 <ld_dword>
 80125da:	4603      	mov	r3, r0
 80125dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80125e0:	4a10      	ldr	r2, [pc, #64]	; (8012624 <check_fs+0xbc>)
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d101      	bne.n	80125ea <check_fs+0x82>
 80125e6:	2300      	movs	r3, #0
 80125e8:	e018      	b.n	801261c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	333c      	adds	r3, #60	; 0x3c
 80125ee:	3352      	adds	r3, #82	; 0x52
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7fd f8df 	bl	800f7b4 <ld_dword>
 80125f6:	4602      	mov	r2, r0
 80125f8:	4b0b      	ldr	r3, [pc, #44]	; (8012628 <check_fs+0xc0>)
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d101      	bne.n	8012602 <check_fs+0x9a>
 80125fe:	2300      	movs	r3, #0
 8012600:	e00c      	b.n	801261c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	333c      	adds	r3, #60	; 0x3c
 8012606:	220b      	movs	r2, #11
 8012608:	4908      	ldr	r1, [pc, #32]	; (801262c <check_fs+0xc4>)
 801260a:	4618      	mov	r0, r3
 801260c:	f7fd fabb 	bl	800fb86 <mem_cmp>
 8012610:	4603      	mov	r3, r0
 8012612:	2b00      	cmp	r3, #0
 8012614:	d101      	bne.n	801261a <check_fs+0xb2>
 8012616:	2301      	movs	r3, #1
 8012618:	e000      	b.n	801261c <check_fs+0xb4>
#endif
	return 2;
 801261a:	2302      	movs	r3, #2
}
 801261c:	4618      	mov	r0, r3
 801261e:	3708      	adds	r7, #8
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}
 8012624:	00544146 	.word	0x00544146
 8012628:	33544146 	.word	0x33544146
 801262c:	080142d4 	.word	0x080142d4

08012630 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012630:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012634:	b098      	sub	sp, #96	; 0x60
 8012636:	af00      	add	r7, sp, #0
 8012638:	60f8      	str	r0, [r7, #12]
 801263a:	60b9      	str	r1, [r7, #8]
 801263c:	4613      	mov	r3, r2
 801263e:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	2200      	movs	r2, #0
 8012644:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012646:	68f8      	ldr	r0, [r7, #12]
 8012648:	f7ff ff49 	bl	80124de <get_ldnumber>
 801264c:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 801264e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012650:	2b00      	cmp	r3, #0
 8012652:	da01      	bge.n	8012658 <find_volume+0x28>
 8012654:	230b      	movs	r3, #11
 8012656:	e36e      	b.n	8012d36 <find_volume+0x706>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012658:	4aaa      	ldr	r2, [pc, #680]	; (8012904 <find_volume+0x2d4>)
 801265a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012660:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012664:	2b00      	cmp	r3, #0
 8012666:	d101      	bne.n	801266c <find_volume+0x3c>
 8012668:	230c      	movs	r3, #12
 801266a:	e364      	b.n	8012d36 <find_volume+0x706>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012670:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012672:	79fb      	ldrb	r3, [r7, #7]
 8012674:	f023 0301 	bic.w	r3, r3, #1
 8012678:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801267a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d01a      	beq.n	80126b8 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8012682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012684:	785b      	ldrb	r3, [r3, #1]
 8012686:	4618      	mov	r0, r3
 8012688:	f7fc ffde 	bl	800f648 <disk_status>
 801268c:	4603      	mov	r3, r0
 801268e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012692:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012696:	f003 0301 	and.w	r3, r3, #1
 801269a:	2b00      	cmp	r3, #0
 801269c:	d10c      	bne.n	80126b8 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801269e:	79fb      	ldrb	r3, [r7, #7]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d007      	beq.n	80126b4 <find_volume+0x84>
 80126a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80126a8:	f003 0304 	and.w	r3, r3, #4
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d001      	beq.n	80126b4 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80126b0:	230a      	movs	r3, #10
 80126b2:	e340      	b.n	8012d36 <find_volume+0x706>
			}
			return FR_OK;				/* The file system object is valid */
 80126b4:	2300      	movs	r3, #0
 80126b6:	e33e      	b.n	8012d36 <find_volume+0x706>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80126b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126ba:	2200      	movs	r2, #0
 80126bc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80126be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126c0:	b2da      	uxtb	r2, r3
 80126c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126c4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80126c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126c8:	785b      	ldrb	r3, [r3, #1]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7fc ffd6 	bl	800f67c <disk_initialize>
 80126d0:	4603      	mov	r3, r0
 80126d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80126d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80126da:	f003 0301 	and.w	r3, r3, #1
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d001      	beq.n	80126e6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80126e2:	2303      	movs	r3, #3
 80126e4:	e327      	b.n	8012d36 <find_volume+0x706>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80126e6:	79fb      	ldrb	r3, [r7, #7]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d007      	beq.n	80126fc <find_volume+0xcc>
 80126ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80126f0:	f003 0304 	and.w	r3, r3, #4
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d001      	beq.n	80126fc <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80126f8:	230a      	movs	r3, #10
 80126fa:	e31c      	b.n	8012d36 <find_volume+0x706>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80126fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126fe:	7858      	ldrb	r0, [r3, #1]
 8012700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012702:	330c      	adds	r3, #12
 8012704:	461a      	mov	r2, r3
 8012706:	2102      	movs	r1, #2
 8012708:	f7fd f81e 	bl	800f748 <disk_ioctl>
 801270c:	4603      	mov	r3, r0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d001      	beq.n	8012716 <find_volume+0xe6>
 8012712:	2301      	movs	r3, #1
 8012714:	e30f      	b.n	8012d36 <find_volume+0x706>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012718:	899b      	ldrh	r3, [r3, #12]
 801271a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801271e:	d80d      	bhi.n	801273c <find_volume+0x10c>
 8012720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012722:	899b      	ldrh	r3, [r3, #12]
 8012724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012728:	d308      	bcc.n	801273c <find_volume+0x10c>
 801272a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801272c:	899b      	ldrh	r3, [r3, #12]
 801272e:	461a      	mov	r2, r3
 8012730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012732:	899b      	ldrh	r3, [r3, #12]
 8012734:	3b01      	subs	r3, #1
 8012736:	4013      	ands	r3, r2
 8012738:	2b00      	cmp	r3, #0
 801273a:	d001      	beq.n	8012740 <find_volume+0x110>
 801273c:	2301      	movs	r3, #1
 801273e:	e2fa      	b.n	8012d36 <find_volume+0x706>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012740:	2300      	movs	r3, #0
 8012742:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012744:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012746:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012748:	f7ff ff0e 	bl	8012568 <check_fs>
 801274c:	4603      	mov	r3, r0
 801274e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012752:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012756:	2b02      	cmp	r3, #2
 8012758:	d14b      	bne.n	80127f2 <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801275a:	2300      	movs	r3, #0
 801275c:	64bb      	str	r3, [r7, #72]	; 0x48
 801275e:	e01f      	b.n	80127a0 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012762:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8012766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012768:	011b      	lsls	r3, r3, #4
 801276a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801276e:	4413      	add	r3, r2
 8012770:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012774:	3304      	adds	r3, #4
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d006      	beq.n	801278a <find_volume+0x15a>
 801277c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801277e:	3308      	adds	r3, #8
 8012780:	4618      	mov	r0, r3
 8012782:	f7fd f817 	bl	800f7b4 <ld_dword>
 8012786:	4602      	mov	r2, r0
 8012788:	e000      	b.n	801278c <find_volume+0x15c>
 801278a:	2200      	movs	r2, #0
 801278c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801278e:	009b      	lsls	r3, r3, #2
 8012790:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8012794:	440b      	add	r3, r1
 8012796:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801279a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801279c:	3301      	adds	r3, #1
 801279e:	64bb      	str	r3, [r7, #72]	; 0x48
 80127a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127a2:	2b03      	cmp	r3, #3
 80127a4:	d9dc      	bls.n	8012760 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80127a6:	2300      	movs	r3, #0
 80127a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 80127aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d002      	beq.n	80127b6 <find_volume+0x186>
 80127b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127b2:	3b01      	subs	r3, #1
 80127b4:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 80127b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80127be:	4413      	add	r3, r2
 80127c0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80127c4:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80127c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d005      	beq.n	80127d8 <find_volume+0x1a8>
 80127cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80127ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80127d0:	f7ff feca 	bl	8012568 <check_fs>
 80127d4:	4603      	mov	r3, r0
 80127d6:	e000      	b.n	80127da <find_volume+0x1aa>
 80127d8:	2303      	movs	r3, #3
 80127da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80127de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80127e2:	2b01      	cmp	r3, #1
 80127e4:	d905      	bls.n	80127f2 <find_volume+0x1c2>
 80127e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127e8:	3301      	adds	r3, #1
 80127ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80127ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127ee:	2b03      	cmp	r3, #3
 80127f0:	d9e1      	bls.n	80127b6 <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80127f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80127f6:	2b04      	cmp	r3, #4
 80127f8:	d101      	bne.n	80127fe <find_volume+0x1ce>
 80127fa:	2301      	movs	r3, #1
 80127fc:	e29b      	b.n	8012d36 <find_volume+0x706>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80127fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012802:	2b01      	cmp	r3, #1
 8012804:	d901      	bls.n	801280a <find_volume+0x1da>
 8012806:	230d      	movs	r3, #13
 8012808:	e295      	b.n	8012d36 <find_volume+0x706>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 801280a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801280e:	2b01      	cmp	r3, #1
 8012810:	f040 8101 	bne.w	8012a16 <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8012814:	230b      	movs	r3, #11
 8012816:	64bb      	str	r3, [r7, #72]	; 0x48
 8012818:	e002      	b.n	8012820 <find_volume+0x1f0>
 801281a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801281c:	3301      	adds	r3, #1
 801281e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012822:	2b3f      	cmp	r3, #63	; 0x3f
 8012824:	d806      	bhi.n	8012834 <find_volume+0x204>
 8012826:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801282a:	4413      	add	r3, r2
 801282c:	333c      	adds	r3, #60	; 0x3c
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d0f2      	beq.n	801281a <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8012834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012836:	2b3f      	cmp	r3, #63	; 0x3f
 8012838:	d801      	bhi.n	801283e <find_volume+0x20e>
 801283a:	230d      	movs	r3, #13
 801283c:	e27b      	b.n	8012d36 <find_volume+0x706>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 801283e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012840:	333c      	adds	r3, #60	; 0x3c
 8012842:	3368      	adds	r3, #104	; 0x68
 8012844:	4618      	mov	r0, r3
 8012846:	f7fc ff9d 	bl	800f784 <ld_word>
 801284a:	4603      	mov	r3, r0
 801284c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012850:	d001      	beq.n	8012856 <find_volume+0x226>
 8012852:	230d      	movs	r3, #13
 8012854:	e26f      	b.n	8012d36 <find_volume+0x706>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8012856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012858:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 801285c:	461a      	mov	r2, r3
 801285e:	2301      	movs	r3, #1
 8012860:	4093      	lsls	r3, r2
 8012862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012864:	8992      	ldrh	r2, [r2, #12]
 8012866:	4293      	cmp	r3, r2
 8012868:	d001      	beq.n	801286e <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 801286a:	230d      	movs	r3, #13
 801286c:	e263      	b.n	8012d36 <find_volume+0x706>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 801286e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012870:	333c      	adds	r3, #60	; 0x3c
 8012872:	3348      	adds	r3, #72	; 0x48
 8012874:	4618      	mov	r0, r3
 8012876:	f7fc ffc0 	bl	800f7fa <ld_qword>
 801287a:	460a      	mov	r2, r1
 801287c:	4601      	mov	r1, r0
 801287e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012880:	469b      	mov	fp, r3
 8012882:	f04f 0c00 	mov.w	ip, #0
 8012886:	eb1b 0301 	adds.w	r3, fp, r1
 801288a:	eb4c 0402 	adc.w	r4, ip, r2
 801288e:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8012892:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012896:	2c01      	cmp	r4, #1
 8012898:	bf08      	it	eq
 801289a:	2b00      	cmpeq	r3, #0
 801289c:	d301      	bcc.n	80128a2 <find_volume+0x272>
 801289e:	230d      	movs	r3, #13
 80128a0:	e249      	b.n	8012d36 <find_volume+0x706>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80128a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128a4:	333c      	adds	r3, #60	; 0x3c
 80128a6:	3354      	adds	r3, #84	; 0x54
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7fc ff83 	bl	800f7b4 <ld_dword>
 80128ae:	4602      	mov	r2, r0
 80128b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128b2:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80128b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128b6:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 80128ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128bc:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80128be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128c0:	789b      	ldrb	r3, [r3, #2]
 80128c2:	2b01      	cmp	r3, #1
 80128c4:	d001      	beq.n	80128ca <find_volume+0x29a>
 80128c6:	230d      	movs	r3, #13
 80128c8:	e235      	b.n	8012d36 <find_volume+0x706>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80128ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128cc:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80128d0:	461a      	mov	r2, r3
 80128d2:	2301      	movs	r3, #1
 80128d4:	4093      	lsls	r3, r2
 80128d6:	b29a      	uxth	r2, r3
 80128d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128da:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80128dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128de:	895b      	ldrh	r3, [r3, #10]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d101      	bne.n	80128e8 <find_volume+0x2b8>
 80128e4:	230d      	movs	r3, #13
 80128e6:	e226      	b.n	8012d36 <find_volume+0x706>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80128e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128ea:	333c      	adds	r3, #60	; 0x3c
 80128ec:	335c      	adds	r3, #92	; 0x5c
 80128ee:	4618      	mov	r0, r3
 80128f0:	f7fc ff60 	bl	800f7b4 <ld_dword>
 80128f4:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80128f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f8:	4a03      	ldr	r2, [pc, #12]	; (8012908 <find_volume+0x2d8>)
 80128fa:	4293      	cmp	r3, r2
 80128fc:	d906      	bls.n	801290c <find_volume+0x2dc>
 80128fe:	230d      	movs	r3, #13
 8012900:	e219      	b.n	8012d36 <find_volume+0x706>
 8012902:	bf00      	nop
 8012904:	240000ec 	.word	0x240000ec
 8012908:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 801290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290e:	1c9a      	adds	r2, r3, #2
 8012910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012912:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8012914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012916:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012918:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 801291a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801291c:	333c      	adds	r3, #60	; 0x3c
 801291e:	3358      	adds	r3, #88	; 0x58
 8012920:	4618      	mov	r0, r3
 8012922:	f7fc ff47 	bl	800f7b4 <ld_dword>
 8012926:	4602      	mov	r2, r0
 8012928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801292a:	441a      	add	r2, r3
 801292c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801292e:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8012930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012932:	333c      	adds	r3, #60	; 0x3c
 8012934:	3350      	adds	r3, #80	; 0x50
 8012936:	4618      	mov	r0, r3
 8012938:	f7fc ff3c 	bl	800f7b4 <ld_dword>
 801293c:	4602      	mov	r2, r0
 801293e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012940:	441a      	add	r2, r3
 8012942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012944:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8012946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801294a:	4619      	mov	r1, r3
 801294c:	f04f 0200 	mov.w	r2, #0
 8012950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012952:	895b      	ldrh	r3, [r3, #10]
 8012954:	4618      	mov	r0, r3
 8012956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012958:	fb03 f300 	mul.w	r3, r3, r0
 801295c:	469b      	mov	fp, r3
 801295e:	f04f 0c00 	mov.w	ip, #0
 8012962:	eb1b 0301 	adds.w	r3, fp, r1
 8012966:	eb4c 0402 	adc.w	r4, ip, r2
 801296a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801296e:	42a2      	cmp	r2, r4
 8012970:	bf08      	it	eq
 8012972:	4299      	cmpeq	r1, r3
 8012974:	d201      	bcs.n	801297a <find_volume+0x34a>
 8012976:	230d      	movs	r3, #13
 8012978:	e1dd      	b.n	8012d36 <find_volume+0x706>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 801297a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801297c:	333c      	adds	r3, #60	; 0x3c
 801297e:	3360      	adds	r3, #96	; 0x60
 8012980:	4618      	mov	r0, r3
 8012982:	f7fc ff17 	bl	800f7b4 <ld_dword>
 8012986:	4602      	mov	r2, r0
 8012988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801298a:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 801298c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012990:	4619      	mov	r1, r3
 8012992:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012994:	f7fd fb88 	bl	80100a8 <clust2sect>
 8012998:	4603      	mov	r3, r0
 801299a:	4619      	mov	r1, r3
 801299c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801299e:	f7fd fae5 	bl	800ff6c <move_window>
 80129a2:	4603      	mov	r3, r0
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d001      	beq.n	80129ac <find_volume+0x37c>
 80129a8:	2301      	movs	r3, #1
 80129aa:	e1c4      	b.n	8012d36 <find_volume+0x706>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80129ac:	2300      	movs	r3, #0
 80129ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80129b0:	e015      	b.n	80129de <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80129b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80129b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129b6:	4413      	add	r3, r2
 80129b8:	333c      	adds	r3, #60	; 0x3c
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	2b81      	cmp	r3, #129	; 0x81
 80129be:	d10b      	bne.n	80129d8 <find_volume+0x3a8>
 80129c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129c2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80129c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129c8:	3314      	adds	r3, #20
 80129ca:	4413      	add	r3, r2
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7fc fef1 	bl	800f7b4 <ld_dword>
 80129d2:	4603      	mov	r3, r0
 80129d4:	2b02      	cmp	r3, #2
 80129d6:	d009      	beq.n	80129ec <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80129d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129da:	3320      	adds	r3, #32
 80129dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80129de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129e0:	899b      	ldrh	r3, [r3, #12]
 80129e2:	461a      	mov	r2, r3
 80129e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129e6:	4293      	cmp	r3, r2
 80129e8:	d3e3      	bcc.n	80129b2 <find_volume+0x382>
 80129ea:	e000      	b.n	80129ee <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80129ec:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 80129ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129f0:	899b      	ldrh	r3, [r3, #12]
 80129f2:	461a      	mov	r2, r3
 80129f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129f6:	4293      	cmp	r3, r2
 80129f8:	d101      	bne.n	80129fe <find_volume+0x3ce>
 80129fa:	230d      	movs	r3, #13
 80129fc:	e19b      	b.n	8012d36 <find_volume+0x706>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80129fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a00:	f04f 32ff 	mov.w	r2, #4294967295
 8012a04:	61da      	str	r2, [r3, #28]
 8012a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a08:	69da      	ldr	r2, [r3, #28]
 8012a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a0c:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8012a0e:	2304      	movs	r3, #4
 8012a10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012a14:	e177      	b.n	8012d06 <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a18:	333c      	adds	r3, #60	; 0x3c
 8012a1a:	330b      	adds	r3, #11
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7fc feb1 	bl	800f784 <ld_word>
 8012a22:	4603      	mov	r3, r0
 8012a24:	461a      	mov	r2, r3
 8012a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a28:	899b      	ldrh	r3, [r3, #12]
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d001      	beq.n	8012a32 <find_volume+0x402>
 8012a2e:	230d      	movs	r3, #13
 8012a30:	e181      	b.n	8012d36 <find_volume+0x706>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a34:	333c      	adds	r3, #60	; 0x3c
 8012a36:	3316      	adds	r3, #22
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7fc fea3 	bl	800f784 <ld_word>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d106      	bne.n	8012a56 <find_volume+0x426>
 8012a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a4a:	333c      	adds	r3, #60	; 0x3c
 8012a4c:	3324      	adds	r3, #36	; 0x24
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7fc feb0 	bl	800f7b4 <ld_dword>
 8012a54:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 8012a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012a5a:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a5e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8012a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a64:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a68:	789b      	ldrb	r3, [r3, #2]
 8012a6a:	2b01      	cmp	r3, #1
 8012a6c:	d005      	beq.n	8012a7a <find_volume+0x44a>
 8012a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a70:	789b      	ldrb	r3, [r3, #2]
 8012a72:	2b02      	cmp	r3, #2
 8012a74:	d001      	beq.n	8012a7a <find_volume+0x44a>
 8012a76:	230d      	movs	r3, #13
 8012a78:	e15d      	b.n	8012d36 <find_volume+0x706>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a7c:	789b      	ldrb	r3, [r3, #2]
 8012a7e:	461a      	mov	r2, r3
 8012a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a82:	fb02 f303 	mul.w	r3, r2, r3
 8012a86:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a8a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8012a8e:	b29a      	uxth	r2, r3
 8012a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a92:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a96:	895b      	ldrh	r3, [r3, #10]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d008      	beq.n	8012aae <find_volume+0x47e>
 8012a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a9e:	895b      	ldrh	r3, [r3, #10]
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aa4:	895b      	ldrh	r3, [r3, #10]
 8012aa6:	3b01      	subs	r3, #1
 8012aa8:	4013      	ands	r3, r2
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d001      	beq.n	8012ab2 <find_volume+0x482>
 8012aae:	230d      	movs	r3, #13
 8012ab0:	e141      	b.n	8012d36 <find_volume+0x706>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ab4:	333c      	adds	r3, #60	; 0x3c
 8012ab6:	3311      	adds	r3, #17
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f7fc fe63 	bl	800f784 <ld_word>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ac4:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ac8:	891b      	ldrh	r3, [r3, #8]
 8012aca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012acc:	8992      	ldrh	r2, [r2, #12]
 8012ace:	0952      	lsrs	r2, r2, #5
 8012ad0:	b292      	uxth	r2, r2
 8012ad2:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ad6:	fb02 f201 	mul.w	r2, r2, r1
 8012ada:	1a9b      	subs	r3, r3, r2
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d001      	beq.n	8012ae6 <find_volume+0x4b6>
 8012ae2:	230d      	movs	r3, #13
 8012ae4:	e127      	b.n	8012d36 <find_volume+0x706>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ae8:	333c      	adds	r3, #60	; 0x3c
 8012aea:	3313      	adds	r3, #19
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7fc fe49 	bl	800f784 <ld_word>
 8012af2:	4603      	mov	r3, r0
 8012af4:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d106      	bne.n	8012b0a <find_volume+0x4da>
 8012afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012afe:	333c      	adds	r3, #60	; 0x3c
 8012b00:	3320      	adds	r3, #32
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7fc fe56 	bl	800f7b4 <ld_dword>
 8012b08:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b0c:	333c      	adds	r3, #60	; 0x3c
 8012b0e:	330e      	adds	r3, #14
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7fc fe37 	bl	800f784 <ld_word>
 8012b16:	4603      	mov	r3, r0
 8012b18:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012b1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d101      	bne.n	8012b24 <find_volume+0x4f4>
 8012b20:	230d      	movs	r3, #13
 8012b22:	e108      	b.n	8012d36 <find_volume+0x706>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012b24:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b28:	4413      	add	r3, r2
 8012b2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012b2c:	8911      	ldrh	r1, [r2, #8]
 8012b2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012b30:	8992      	ldrh	r2, [r2, #12]
 8012b32:	0952      	lsrs	r2, r2, #5
 8012b34:	b292      	uxth	r2, r2
 8012b36:	fbb1 f2f2 	udiv	r2, r1, r2
 8012b3a:	b292      	uxth	r2, r2
 8012b3c:	4413      	add	r3, r2
 8012b3e:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012b40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d201      	bcs.n	8012b4c <find_volume+0x51c>
 8012b48:	230d      	movs	r3, #13
 8012b4a:	e0f4      	b.n	8012d36 <find_volume+0x706>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012b4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b50:	1ad3      	subs	r3, r2, r3
 8012b52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012b54:	8952      	ldrh	r2, [r2, #10]
 8012b56:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d101      	bne.n	8012b66 <find_volume+0x536>
 8012b62:	230d      	movs	r3, #13
 8012b64:	e0e7      	b.n	8012d36 <find_volume+0x706>
		fmt = FS_FAT32;
 8012b66:	2303      	movs	r3, #3
 8012b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b6e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012b72:	4293      	cmp	r3, r2
 8012b74:	d802      	bhi.n	8012b7c <find_volume+0x54c>
 8012b76:	2302      	movs	r3, #2
 8012b78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012b82:	4293      	cmp	r3, r2
 8012b84:	d802      	bhi.n	8012b8c <find_volume+0x55c>
 8012b86:	2301      	movs	r3, #1
 8012b88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8e:	1c9a      	adds	r2, r3, #2
 8012b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b92:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8012b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b98:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012b9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012b9e:	441a      	add	r2, r3
 8012ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ba2:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8012ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba8:	441a      	add	r2, r3
 8012baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bac:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8012bae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012bb2:	2b03      	cmp	r3, #3
 8012bb4:	d11e      	bne.n	8012bf4 <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bb8:	333c      	adds	r3, #60	; 0x3c
 8012bba:	332a      	adds	r3, #42	; 0x2a
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7fc fde1 	bl	800f784 <ld_word>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d001      	beq.n	8012bcc <find_volume+0x59c>
 8012bc8:	230d      	movs	r3, #13
 8012bca:	e0b4      	b.n	8012d36 <find_volume+0x706>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bce:	891b      	ldrh	r3, [r3, #8]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d001      	beq.n	8012bd8 <find_volume+0x5a8>
 8012bd4:	230d      	movs	r3, #13
 8012bd6:	e0ae      	b.n	8012d36 <find_volume+0x706>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bda:	333c      	adds	r3, #60	; 0x3c
 8012bdc:	332c      	adds	r3, #44	; 0x2c
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7fc fde8 	bl	800f7b4 <ld_dword>
 8012be4:	4602      	mov	r2, r0
 8012be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012be8:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bec:	6a1b      	ldr	r3, [r3, #32]
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012bf2:	e01f      	b.n	8012c34 <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bf6:	891b      	ldrh	r3, [r3, #8]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d101      	bne.n	8012c00 <find_volume+0x5d0>
 8012bfc:	230d      	movs	r3, #13
 8012bfe:	e09a      	b.n	8012d36 <find_volume+0x706>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c06:	441a      	add	r2, r3
 8012c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c0a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c10:	2b02      	cmp	r3, #2
 8012c12:	d103      	bne.n	8012c1c <find_volume+0x5ec>
 8012c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c16:	6a1b      	ldr	r3, [r3, #32]
 8012c18:	005b      	lsls	r3, r3, #1
 8012c1a:	e00a      	b.n	8012c32 <find_volume+0x602>
 8012c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c1e:	6a1a      	ldr	r2, [r3, #32]
 8012c20:	4613      	mov	r3, r2
 8012c22:	005b      	lsls	r3, r3, #1
 8012c24:	4413      	add	r3, r2
 8012c26:	085a      	lsrs	r2, r3, #1
 8012c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c2a:	6a1b      	ldr	r3, [r3, #32]
 8012c2c:	f003 0301 	and.w	r3, r3, #1
 8012c30:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012c32:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c3a:	899b      	ldrh	r3, [r3, #12]
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c40:	440b      	add	r3, r1
 8012c42:	3b01      	subs	r3, #1
 8012c44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012c46:	8989      	ldrh	r1, [r1, #12]
 8012c48:	fbb3 f3f1 	udiv	r3, r3, r1
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d201      	bcs.n	8012c54 <find_volume+0x624>
 8012c50:	230d      	movs	r3, #13
 8012c52:	e070      	b.n	8012d36 <find_volume+0x706>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c56:	f04f 32ff 	mov.w	r2, #4294967295
 8012c5a:	61da      	str	r2, [r3, #28]
 8012c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c5e:	69da      	ldr	r2, [r3, #28]
 8012c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c62:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8012c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c66:	2280      	movs	r2, #128	; 0x80
 8012c68:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012c6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c6e:	2b03      	cmp	r3, #3
 8012c70:	d149      	bne.n	8012d06 <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c74:	333c      	adds	r3, #60	; 0x3c
 8012c76:	3330      	adds	r3, #48	; 0x30
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7fc fd83 	bl	800f784 <ld_word>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	2b01      	cmp	r3, #1
 8012c82:	d140      	bne.n	8012d06 <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c86:	3301      	adds	r3, #1
 8012c88:	4619      	mov	r1, r3
 8012c8a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012c8c:	f7fd f96e 	bl	800ff6c <move_window>
 8012c90:	4603      	mov	r3, r0
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d137      	bne.n	8012d06 <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 8012c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c98:	2200      	movs	r2, #0
 8012c9a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c9e:	333c      	adds	r3, #60	; 0x3c
 8012ca0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7fc fd6d 	bl	800f784 <ld_word>
 8012caa:	4603      	mov	r3, r0
 8012cac:	461a      	mov	r2, r3
 8012cae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d127      	bne.n	8012d06 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cb8:	333c      	adds	r3, #60	; 0x3c
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7fc fd7a 	bl	800f7b4 <ld_dword>
 8012cc0:	4602      	mov	r2, r0
 8012cc2:	4b1f      	ldr	r3, [pc, #124]	; (8012d40 <find_volume+0x710>)
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	d11e      	bne.n	8012d06 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cca:	333c      	adds	r3, #60	; 0x3c
 8012ccc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7fc fd6f 	bl	800f7b4 <ld_dword>
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	4b1a      	ldr	r3, [pc, #104]	; (8012d44 <find_volume+0x714>)
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	d113      	bne.n	8012d06 <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ce0:	333c      	adds	r3, #60	; 0x3c
 8012ce2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7fc fd64 	bl	800f7b4 <ld_dword>
 8012cec:	4602      	mov	r2, r0
 8012cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cf0:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cf4:	333c      	adds	r3, #60	; 0x3c
 8012cf6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7fc fd5a 	bl	800f7b4 <ld_dword>
 8012d00:	4602      	mov	r2, r0
 8012d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d04:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d08:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8012d0c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012d0e:	4b0e      	ldr	r3, [pc, #56]	; (8012d48 <find_volume+0x718>)
 8012d10:	881b      	ldrh	r3, [r3, #0]
 8012d12:	3301      	adds	r3, #1
 8012d14:	b29a      	uxth	r2, r3
 8012d16:	4b0c      	ldr	r3, [pc, #48]	; (8012d48 <find_volume+0x718>)
 8012d18:	801a      	strh	r2, [r3, #0]
 8012d1a:	4b0b      	ldr	r3, [pc, #44]	; (8012d48 <find_volume+0x718>)
 8012d1c:	881a      	ldrh	r2, [r3, #0]
 8012d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d20:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8012d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d24:	4a09      	ldr	r2, [pc, #36]	; (8012d4c <find_volume+0x71c>)
 8012d26:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8012d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d2a:	4a09      	ldr	r2, [pc, #36]	; (8012d50 <find_volume+0x720>)
 8012d2c:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012d2e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012d30:	f7fd f8b4 	bl	800fe9c <clear_lock>
#endif
	return FR_OK;
 8012d34:	2300      	movs	r3, #0
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3760      	adds	r7, #96	; 0x60
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8012d40:	41615252 	.word	0x41615252
 8012d44:	61417272 	.word	0x61417272
 8012d48:	240000f0 	.word	0x240000f0
 8012d4c:	24000374 	.word	0x24000374
 8012d50:	24000114 	.word	0x24000114

08012d54 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b084      	sub	sp, #16
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
 8012d5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012d5e:	2309      	movs	r3, #9
 8012d60:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d01c      	beq.n	8012da2 <validate+0x4e>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d018      	beq.n	8012da2 <validate+0x4e>
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d013      	beq.n	8012da2 <validate+0x4e>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	889a      	ldrh	r2, [r3, #4]
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	88db      	ldrh	r3, [r3, #6]
 8012d84:	429a      	cmp	r2, r3
 8012d86:	d10c      	bne.n	8012da2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	785b      	ldrb	r3, [r3, #1]
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7fc fc5a 	bl	800f648 <disk_status>
 8012d94:	4603      	mov	r3, r0
 8012d96:	f003 0301 	and.w	r3, r3, #1
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d101      	bne.n	8012da2 <validate+0x4e>
			res = FR_OK;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012da2:	7bfb      	ldrb	r3, [r7, #15]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d102      	bne.n	8012dae <validate+0x5a>
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	e000      	b.n	8012db0 <validate+0x5c>
 8012dae:	2300      	movs	r3, #0
 8012db0:	683a      	ldr	r2, [r7, #0]
 8012db2:	6013      	str	r3, [r2, #0]
	return res;
 8012db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3710      	adds	r7, #16
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}
	...

08012dc0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b088      	sub	sp, #32
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	60f8      	str	r0, [r7, #12]
 8012dc8:	60b9      	str	r1, [r7, #8]
 8012dca:	4613      	mov	r3, r2
 8012dcc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012dd2:	f107 0310 	add.w	r3, r7, #16
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f7ff fb81 	bl	80124de <get_ldnumber>
 8012ddc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012dde:	69fb      	ldr	r3, [r7, #28]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	da01      	bge.n	8012de8 <f_mount+0x28>
 8012de4:	230b      	movs	r3, #11
 8012de6:	e02b      	b.n	8012e40 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012de8:	4a17      	ldr	r2, [pc, #92]	; (8012e48 <f_mount+0x88>)
 8012dea:	69fb      	ldr	r3, [r7, #28]
 8012dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012df0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012df2:	69bb      	ldr	r3, [r7, #24]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d005      	beq.n	8012e04 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012df8:	69b8      	ldr	r0, [r7, #24]
 8012dfa:	f7fd f84f 	bl	800fe9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012dfe:	69bb      	ldr	r3, [r7, #24]
 8012e00:	2200      	movs	r2, #0
 8012e02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d002      	beq.n	8012e10 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012e10:	68fa      	ldr	r2, [r7, #12]
 8012e12:	490d      	ldr	r1, [pc, #52]	; (8012e48 <f_mount+0x88>)
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d002      	beq.n	8012e26 <f_mount+0x66>
 8012e20:	79fb      	ldrb	r3, [r7, #7]
 8012e22:	2b01      	cmp	r3, #1
 8012e24:	d001      	beq.n	8012e2a <f_mount+0x6a>
 8012e26:	2300      	movs	r3, #0
 8012e28:	e00a      	b.n	8012e40 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012e2a:	f107 010c 	add.w	r1, r7, #12
 8012e2e:	f107 0308 	add.w	r3, r7, #8
 8012e32:	2200      	movs	r2, #0
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7ff fbfb 	bl	8012630 <find_volume>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3720      	adds	r7, #32
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}
 8012e48:	240000ec 	.word	0x240000ec

08012e4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012e4c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012e50:	b0a2      	sub	sp, #136	; 0x88
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	60f8      	str	r0, [r7, #12]
 8012e56:	60b9      	str	r1, [r7, #8]
 8012e58:	4613      	mov	r3, r2
 8012e5a:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d101      	bne.n	8012e66 <f_open+0x1a>
 8012e62:	2309      	movs	r3, #9
 8012e64:	e2a8      	b.n	80133b8 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012e66:	79fb      	ldrb	r3, [r7, #7]
 8012e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e6c:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012e6e:	79fa      	ldrb	r2, [r7, #7]
 8012e70:	f107 0114 	add.w	r1, r7, #20
 8012e74:	f107 0308 	add.w	r3, r7, #8
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f7ff fbd9 	bl	8012630 <find_volume>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 8012e84:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	f040 828c 	bne.w	80133a6 <f_open+0x55a>
		dj.obj.fs = fs;
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012e92:	68ba      	ldr	r2, [r7, #8]
 8012e94:	f107 0318 	add.w	r3, r7, #24
 8012e98:	4611      	mov	r1, r2
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7ff fa72 	bl	8012384 <follow_path>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012ea6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d11a      	bne.n	8012ee4 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012eae:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8012eb2:	b25b      	sxtb	r3, r3
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	da03      	bge.n	8012ec0 <f_open+0x74>
				res = FR_INVALID_NAME;
 8012eb8:	2306      	movs	r3, #6
 8012eba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8012ebe:	e011      	b.n	8012ee4 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012ec0:	79fb      	ldrb	r3, [r7, #7]
 8012ec2:	f023 0301 	bic.w	r3, r3, #1
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	bf14      	ite	ne
 8012eca:	2301      	movne	r3, #1
 8012ecc:	2300      	moveq	r3, #0
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	f107 0318 	add.w	r3, r7, #24
 8012ed6:	4611      	mov	r1, r2
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7fc fe97 	bl	800fc0c <chk_lock>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012ee4:	79fb      	ldrb	r3, [r7, #7]
 8012ee6:	f003 031c 	and.w	r3, r3, #28
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	f000 8109 	beq.w	8013102 <f_open+0x2b6>
			if (res != FR_OK) {					/* No file, create new */
 8012ef0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d017      	beq.n	8012f28 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012ef8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012efc:	2b04      	cmp	r3, #4
 8012efe:	d10e      	bne.n	8012f1e <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012f00:	f7fc fee0 	bl	800fcc4 <enq_lock>
 8012f04:	4603      	mov	r3, r0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d006      	beq.n	8012f18 <f_open+0xcc>
 8012f0a:	f107 0318 	add.w	r3, r7, #24
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7fe fed0 	bl	8011cb4 <dir_register>
 8012f14:	4603      	mov	r3, r0
 8012f16:	e000      	b.n	8012f1a <f_open+0xce>
 8012f18:	2312      	movs	r3, #18
 8012f1a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012f1e:	79fb      	ldrb	r3, [r7, #7]
 8012f20:	f043 0308 	orr.w	r3, r3, #8
 8012f24:	71fb      	strb	r3, [r7, #7]
 8012f26:	e010      	b.n	8012f4a <f_open+0xfe>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012f28:	7fbb      	ldrb	r3, [r7, #30]
 8012f2a:	f003 0311 	and.w	r3, r3, #17
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d003      	beq.n	8012f3a <f_open+0xee>
					res = FR_DENIED;
 8012f32:	2307      	movs	r3, #7
 8012f34:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8012f38:	e007      	b.n	8012f4a <f_open+0xfe>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012f3a:	79fb      	ldrb	r3, [r7, #7]
 8012f3c:	f003 0304 	and.w	r3, r3, #4
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d002      	beq.n	8012f4a <f_open+0xfe>
 8012f44:	2308      	movs	r3, #8
 8012f46:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012f4a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	f040 80f1 	bne.w	8013136 <f_open+0x2ea>
 8012f54:	79fb      	ldrb	r3, [r7, #7]
 8012f56:	f003 0308 	and.w	r3, r3, #8
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	f000 80eb 	beq.w	8013136 <f_open+0x2ea>
				dw = GET_FATTIME();
 8012f60:	f7fc f9ec 	bl	800f33c <get_fattime>
 8012f64:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8012f66:	697b      	ldr	r3, [r7, #20]
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	2b04      	cmp	r3, #4
 8012f6c:	f040 8082 	bne.w	8013074 <f_open+0x228>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8012f70:	697a      	ldr	r2, [r7, #20]
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	695b      	ldr	r3, [r3, #20]
 8012f7a:	3334      	adds	r3, #52	; 0x34
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7fc fc19 	bl	800f7b4 <ld_dword>
 8012f82:	4602      	mov	r2, r0
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	695b      	ldr	r3, [r3, #20]
 8012f8c:	3338      	adds	r3, #56	; 0x38
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fc fc33 	bl	800f7fa <ld_qword>
 8012f94:	4603      	mov	r3, r0
 8012f96:	460c      	mov	r4, r1
 8012f98:	68fa      	ldr	r2, [r7, #12]
 8012f9a:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	695b      	ldr	r3, [r3, #20]
 8012fa2:	3321      	adds	r3, #33	; 0x21
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	f003 0302 	and.w	r3, r3, #2
 8012faa:	b2da      	uxtb	r2, r3
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	695b      	ldr	r3, [r3, #20]
 8012fba:	3308      	adds	r3, #8
 8012fbc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f7fc fcf3 	bl	800f9aa <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	695b      	ldr	r3, [r3, #20]
 8012fc8:	3314      	adds	r3, #20
 8012fca:	2200      	movs	r2, #0
 8012fcc:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	695b      	ldr	r3, [r3, #20]
 8012fd2:	330c      	adds	r3, #12
 8012fd4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7fc fce7 	bl	800f9aa <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8012fdc:	697b      	ldr	r3, [r7, #20]
 8012fde:	695b      	ldr	r3, [r3, #20]
 8012fe0:	3315      	adds	r3, #21
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	695b      	ldr	r3, [r3, #20]
 8012fea:	3304      	adds	r3, #4
 8012fec:	2220      	movs	r2, #32
 8012fee:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8012ff0:	697b      	ldr	r3, [r7, #20]
 8012ff2:	695b      	ldr	r3, [r3, #20]
 8012ff4:	3334      	adds	r3, #52	; 0x34
 8012ff6:	2100      	movs	r1, #0
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f7fc fcd6 	bl	800f9aa <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	695b      	ldr	r3, [r3, #20]
 8013002:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013006:	f04f 0200 	mov.w	r2, #0
 801300a:	f04f 0300 	mov.w	r3, #0
 801300e:	4608      	mov	r0, r1
 8013010:	f7fc fcf7 	bl	800fa02 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	695b      	ldr	r3, [r3, #20]
 8013018:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801301c:	f04f 0200 	mov.w	r2, #0
 8013020:	f04f 0300 	mov.w	r3, #0
 8013024:	4608      	mov	r0, r1
 8013026:	f7fc fcec 	bl	800fa02 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	695b      	ldr	r3, [r3, #20]
 801302e:	3321      	adds	r3, #33	; 0x21
 8013030:	2201      	movs	r2, #1
 8013032:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8013034:	f107 0318 	add.w	r3, r7, #24
 8013038:	4618      	mov	r0, r3
 801303a:	f7fe fb88 	bl	801174e <store_xdir>
 801303e:	4603      	mov	r3, r0
 8013040:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8013044:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013048:	2b00      	cmp	r3, #0
 801304a:	d174      	bne.n	8013136 <f_open+0x2ea>
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	689b      	ldr	r3, [r3, #8]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d070      	beq.n	8013136 <f_open+0x2ea>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8013054:	68f8      	ldr	r0, [r7, #12]
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	689b      	ldr	r3, [r3, #8]
 801305a:	2200      	movs	r2, #0
 801305c:	4619      	mov	r1, r3
 801305e:	f7fd fc15 	bl	801088c <remove_chain>
 8013062:	4603      	mov	r3, r0
 8013064:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	689a      	ldr	r2, [r3, #8]
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	3a01      	subs	r2, #1
 8013070:	619a      	str	r2, [r3, #24]
 8013072:	e060      	b.n	8013136 <f_open+0x2ea>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013076:	330e      	adds	r3, #14
 8013078:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801307a:	4618      	mov	r0, r3
 801307c:	f7fc fc95 	bl	800f9aa <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013082:	3316      	adds	r3, #22
 8013084:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013086:	4618      	mov	r0, r3
 8013088:	f7fc fc8f 	bl	800f9aa <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801308c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801308e:	330b      	adds	r3, #11
 8013090:	2220      	movs	r2, #32
 8013092:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013098:	4611      	mov	r1, r2
 801309a:	4618      	mov	r0, r3
 801309c:	f7fd ffc8 	bl	8011030 <ld_clust>
 80130a0:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80130a6:	2200      	movs	r2, #0
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7fd ffe0 	bl	801106e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80130ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130b0:	331c      	adds	r3, #28
 80130b2:	2100      	movs	r1, #0
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7fc fc78 	bl	800f9aa <st_dword>
					fs->wflag = 1;
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	2201      	movs	r2, #1
 80130be:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80130c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d037      	beq.n	8013136 <f_open+0x2ea>
						dw = fs->winsect;
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130ca:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 80130cc:	f107 0318 	add.w	r3, r7, #24
 80130d0:	2200      	movs	r2, #0
 80130d2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7fd fbd9 	bl	801088c <remove_chain>
 80130da:	4603      	mov	r3, r0
 80130dc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 80130e0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d126      	bne.n	8013136 <f_open+0x2ea>
							res = move_window(fs, dw);
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80130ec:	4618      	mov	r0, r3
 80130ee:	f7fc ff3d 	bl	800ff6c <move_window>
 80130f2:	4603      	mov	r3, r0
 80130f4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80130f8:	697b      	ldr	r3, [r7, #20]
 80130fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80130fc:	3a01      	subs	r2, #1
 80130fe:	619a      	str	r2, [r3, #24]
 8013100:	e019      	b.n	8013136 <f_open+0x2ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013102:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013106:	2b00      	cmp	r3, #0
 8013108:	d115      	bne.n	8013136 <f_open+0x2ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801310a:	7fbb      	ldrb	r3, [r7, #30]
 801310c:	f003 0310 	and.w	r3, r3, #16
 8013110:	2b00      	cmp	r3, #0
 8013112:	d003      	beq.n	801311c <f_open+0x2d0>
					res = FR_NO_FILE;
 8013114:	2304      	movs	r3, #4
 8013116:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 801311a:	e00c      	b.n	8013136 <f_open+0x2ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801311c:	79fb      	ldrb	r3, [r7, #7]
 801311e:	f003 0302 	and.w	r3, r3, #2
 8013122:	2b00      	cmp	r3, #0
 8013124:	d007      	beq.n	8013136 <f_open+0x2ea>
 8013126:	7fbb      	ldrb	r3, [r7, #30]
 8013128:	f003 0301 	and.w	r3, r3, #1
 801312c:	2b00      	cmp	r3, #0
 801312e:	d002      	beq.n	8013136 <f_open+0x2ea>
						res = FR_DENIED;
 8013130:	2307      	movs	r3, #7
 8013132:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 8013136:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801313a:	2b00      	cmp	r3, #0
 801313c:	d128      	bne.n	8013190 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801313e:	79fb      	ldrb	r3, [r7, #7]
 8013140:	f003 0308 	and.w	r3, r3, #8
 8013144:	2b00      	cmp	r3, #0
 8013146:	d003      	beq.n	8013150 <f_open+0x304>
				mode |= FA_MODIFIED;
 8013148:	79fb      	ldrb	r3, [r7, #7]
 801314a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801314e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8013158:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801315e:	79fb      	ldrb	r3, [r7, #7]
 8013160:	f023 0301 	bic.w	r3, r3, #1
 8013164:	2b00      	cmp	r3, #0
 8013166:	bf14      	ite	ne
 8013168:	2301      	movne	r3, #1
 801316a:	2300      	moveq	r3, #0
 801316c:	b2db      	uxtb	r3, r3
 801316e:	461a      	mov	r2, r3
 8013170:	f107 0318 	add.w	r3, r7, #24
 8013174:	4611      	mov	r1, r2
 8013176:	4618      	mov	r0, r3
 8013178:	f7fc fdc6 	bl	800fd08 <inc_lock>
 801317c:	4602      	mov	r2, r0
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013186:	2b00      	cmp	r3, #0
 8013188:	d102      	bne.n	8013190 <f_open+0x344>
 801318a:	2302      	movs	r3, #2
 801318c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013190:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013194:	2b00      	cmp	r3, #0
 8013196:	f040 8106 	bne.w	80133a6 <f_open+0x55a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801319a:	697b      	ldr	r3, [r7, #20]
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	2b04      	cmp	r3, #4
 80131a0:	d12b      	bne.n	80131fa <f_open+0x3ae>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80131a2:	6a3a      	ldr	r2, [r7, #32]
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80131a8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80131ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80131b0:	7ffa      	ldrb	r2, [r7, #31]
 80131b2:	431a      	orrs	r2, r3
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80131b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	695b      	ldr	r3, [r3, #20]
 80131c2:	3334      	adds	r3, #52	; 0x34
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7fc faf5 	bl	800f7b4 <ld_dword>
 80131ca:	4602      	mov	r2, r0
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	695b      	ldr	r3, [r3, #20]
 80131d4:	3338      	adds	r3, #56	; 0x38
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7fc fb0f 	bl	800f7fa <ld_qword>
 80131dc:	4603      	mov	r3, r0
 80131de:	460c      	mov	r4, r1
 80131e0:	68fa      	ldr	r2, [r7, #12]
 80131e2:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	695b      	ldr	r3, [r3, #20]
 80131ea:	3321      	adds	r3, #33	; 0x21
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	f003 0302 	and.w	r3, r3, #2
 80131f2:	b2da      	uxtb	r2, r3
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	71da      	strb	r2, [r3, #7]
 80131f8:	e013      	b.n	8013222 <f_open+0x3d6>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131fe:	4611      	mov	r1, r2
 8013200:	4618      	mov	r0, r3
 8013202:	f7fd ff15 	bl	8011030 <ld_clust>
 8013206:	4602      	mov	r2, r0
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801320c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801320e:	331c      	adds	r3, #28
 8013210:	4618      	mov	r0, r3
 8013212:	f7fc facf 	bl	800f7b4 <ld_dword>
 8013216:	4603      	mov	r3, r0
 8013218:	f04f 0400 	mov.w	r4, #0
 801321c:	68fa      	ldr	r2, [r7, #12]
 801321e:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2200      	movs	r2, #0
 8013226:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013228:	697a      	ldr	r2, [r7, #20]
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	88da      	ldrh	r2, [r3, #6]
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	79fa      	ldrb	r2, [r7, #7]
 801323a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2200      	movs	r2, #0
 8013242:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	2200      	movs	r2, #0
 801324a:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 801324c:	68fa      	ldr	r2, [r7, #12]
 801324e:	f04f 0300 	mov.w	r3, #0
 8013252:	f04f 0400 	mov.w	r4, #0
 8013256:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	3354      	adds	r3, #84	; 0x54
 801325e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013262:	2100      	movs	r1, #0
 8013264:	4618      	mov	r0, r3
 8013266:	f7fc fc74 	bl	800fb52 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801326a:	79fb      	ldrb	r3, [r7, #7]
 801326c:	f003 0320 	and.w	r3, r3, #32
 8013270:	2b00      	cmp	r3, #0
 8013272:	f000 8098 	beq.w	80133a6 <f_open+0x55a>
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801327c:	4323      	orrs	r3, r4
 801327e:	f000 8092 	beq.w	80133a6 <f_open+0x55a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013288:	68fa      	ldr	r2, [r7, #12]
 801328a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801328e:	697b      	ldr	r3, [r7, #20]
 8013290:	895b      	ldrh	r3, [r3, #10]
 8013292:	461a      	mov	r2, r3
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	899b      	ldrh	r3, [r3, #12]
 8013298:	fb03 f302 	mul.w	r3, r3, r2
 801329c:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	689b      	ldr	r3, [r3, #8]
 80132a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80132ac:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 80132b0:	e024      	b.n	80132fc <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7fc ff15 	bl	80100e8 <get_fat>
 80132be:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 80132c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80132c6:	2b01      	cmp	r3, #1
 80132c8:	d802      	bhi.n	80132d0 <f_open+0x484>
 80132ca:	2302      	movs	r3, #2
 80132cc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80132d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80132d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132d8:	d102      	bne.n	80132e0 <f_open+0x494>
 80132da:	2301      	movs	r3, #1
 80132dc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80132e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80132e2:	469b      	mov	fp, r3
 80132e4:	f04f 0c00 	mov.w	ip, #0
 80132e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80132ec:	460b      	mov	r3, r1
 80132ee:	4614      	mov	r4, r2
 80132f0:	ebb3 030b 	subs.w	r3, r3, fp
 80132f4:	eb64 040c 	sbc.w	r4, r4, ip
 80132f8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 80132fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013300:	2b00      	cmp	r3, #0
 8013302:	d109      	bne.n	8013318 <f_open+0x4cc>
 8013304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013306:	4619      	mov	r1, r3
 8013308:	f04f 0200 	mov.w	r2, #0
 801330c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8013310:	42a2      	cmp	r2, r4
 8013312:	bf08      	it	eq
 8013314:	4299      	cmpeq	r1, r3
 8013316:	d3cc      	bcc.n	80132b2 <f_open+0x466>
				}
				fp->clust = clst;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801331e:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013320:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013324:	2b00      	cmp	r3, #0
 8013326:	d13e      	bne.n	80133a6 <f_open+0x55a>
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	899b      	ldrh	r3, [r3, #12]
 801332c:	b29b      	uxth	r3, r3
 801332e:	f04f 0400 	mov.w	r4, #0
 8013332:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8013336:	461a      	mov	r2, r3
 8013338:	4623      	mov	r3, r4
 801333a:	f7ec ffcd 	bl	80002d8 <__aeabi_uldivmod>
 801333e:	461c      	mov	r4, r3
 8013340:	4613      	mov	r3, r2
 8013342:	4323      	orrs	r3, r4
 8013344:	d02f      	beq.n	80133a6 <f_open+0x55a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801334c:	4618      	mov	r0, r3
 801334e:	f7fc feab 	bl	80100a8 <clust2sect>
 8013352:	66b8      	str	r0, [r7, #104]	; 0x68
 8013354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013356:	2b00      	cmp	r3, #0
 8013358:	d103      	bne.n	8013362 <f_open+0x516>
						res = FR_INT_ERR;
 801335a:	2302      	movs	r3, #2
 801335c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8013360:	e021      	b.n	80133a6 <f_open+0x55a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013362:	697b      	ldr	r3, [r7, #20]
 8013364:	899b      	ldrh	r3, [r3, #12]
 8013366:	b29b      	uxth	r3, r3
 8013368:	f04f 0400 	mov.w	r4, #0
 801336c:	461a      	mov	r2, r3
 801336e:	4623      	mov	r3, r4
 8013370:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8013374:	f7ec ffb0 	bl	80002d8 <__aeabi_uldivmod>
 8013378:	4603      	mov	r3, r0
 801337a:	460c      	mov	r4, r1
 801337c:	461a      	mov	r2, r3
 801337e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013380:	441a      	add	r2, r3
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	7858      	ldrb	r0, [r3, #1]
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013394:	2301      	movs	r3, #1
 8013396:	f7fc f997 	bl	800f6c8 <disk_read>
 801339a:	4603      	mov	r3, r0
 801339c:	2b00      	cmp	r3, #0
 801339e:	d002      	beq.n	80133a6 <f_open+0x55a>
 80133a0:	2301      	movs	r3, #1
 80133a2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80133a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d002      	beq.n	80133b4 <f_open+0x568>
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	2200      	movs	r2, #0
 80133b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80133b4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3788      	adds	r7, #136	; 0x88
 80133bc:	46bd      	mov	sp, r7
 80133be:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080133c2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80133c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133c4:	b08d      	sub	sp, #52	; 0x34
 80133c6:	af00      	add	r7, sp, #0
 80133c8:	60f8      	str	r0, [r7, #12]
 80133ca:	60b9      	str	r1, [r7, #8]
 80133cc:	607a      	str	r2, [r7, #4]
 80133ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	2200      	movs	r2, #0
 80133d8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	f107 0210 	add.w	r2, r7, #16
 80133e0:	4611      	mov	r1, r2
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7ff fcb6 	bl	8012d54 <validate>
 80133e8:	4603      	mov	r3, r0
 80133ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80133ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d108      	bne.n	8013408 <f_write+0x46>
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80133fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013404:	2b00      	cmp	r3, #0
 8013406:	d002      	beq.n	801340e <f_write+0x4c>
 8013408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801340c:	e1ab      	b.n	8013766 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013414:	f003 0302 	and.w	r3, r3, #2
 8013418:	2b00      	cmp	r3, #0
 801341a:	d101      	bne.n	8013420 <f_write+0x5e>
 801341c:	2307      	movs	r3, #7
 801341e:	e1a2      	b.n	8013766 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013420:	693b      	ldr	r3, [r7, #16]
 8013422:	781b      	ldrb	r3, [r3, #0]
 8013424:	2b04      	cmp	r3, #4
 8013426:	f000 818e 	beq.w	8013746 <f_write+0x384>
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013430:	461a      	mov	r2, r3
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	441a      	add	r2, r3
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801343c:	429a      	cmp	r2, r3
 801343e:	f080 8182 	bcs.w	8013746 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013448:	43db      	mvns	r3, r3
 801344a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801344c:	e17b      	b.n	8013746 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	899b      	ldrh	r3, [r3, #12]
 8013458:	b29b      	uxth	r3, r3
 801345a:	f04f 0400 	mov.w	r4, #0
 801345e:	461a      	mov	r2, r3
 8013460:	4623      	mov	r3, r4
 8013462:	f7ec ff39 	bl	80002d8 <__aeabi_uldivmod>
 8013466:	461c      	mov	r4, r3
 8013468:	4613      	mov	r3, r2
 801346a:	4323      	orrs	r3, r4
 801346c:	f040 810c 	bne.w	8013688 <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013476:	693b      	ldr	r3, [r7, #16]
 8013478:	899b      	ldrh	r3, [r3, #12]
 801347a:	b29b      	uxth	r3, r3
 801347c:	f04f 0400 	mov.w	r4, #0
 8013480:	461a      	mov	r2, r3
 8013482:	4623      	mov	r3, r4
 8013484:	f7ec ff28 	bl	80002d8 <__aeabi_uldivmod>
 8013488:	4603      	mov	r3, r0
 801348a:	460c      	mov	r4, r1
 801348c:	461a      	mov	r2, r3
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	895b      	ldrh	r3, [r3, #10]
 8013492:	3b01      	subs	r3, #1
 8013494:	4013      	ands	r3, r2
 8013496:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013498:	69bb      	ldr	r3, [r7, #24]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d148      	bne.n	8013530 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80134a4:	4323      	orrs	r3, r4
 80134a6:	d10c      	bne.n	80134c2 <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	689b      	ldr	r3, [r3, #8]
 80134ac:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80134ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d11c      	bne.n	80134ee <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	2100      	movs	r1, #0
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7fd fa9b 	bl	80109f4 <create_chain>
 80134be:	62b8      	str	r0, [r7, #40]	; 0x28
 80134c0:	e015      	b.n	80134ee <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d009      	beq.n	80134de <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80134d0:	461a      	mov	r2, r3
 80134d2:	4623      	mov	r3, r4
 80134d4:	68f8      	ldr	r0, [r7, #12]
 80134d6:	f7fd fb8e 	bl	8010bf6 <clmt_clust>
 80134da:	62b8      	str	r0, [r7, #40]	; 0x28
 80134dc:	e007      	b.n	80134ee <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80134de:	68fa      	ldr	r2, [r7, #12]
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134e4:	4619      	mov	r1, r3
 80134e6:	4610      	mov	r0, r2
 80134e8:	f7fd fa84 	bl	80109f4 <create_chain>
 80134ec:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80134ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	f000 812d 	beq.w	8013750 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80134f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f8:	2b01      	cmp	r3, #1
 80134fa:	d105      	bne.n	8013508 <f_write+0x146>
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	2202      	movs	r2, #2
 8013500:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013504:	2302      	movs	r3, #2
 8013506:	e12e      	b.n	8013766 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801350a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801350e:	d105      	bne.n	801351c <f_write+0x15a>
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	2201      	movs	r2, #1
 8013514:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013518:	2301      	movs	r3, #1
 801351a:	e124      	b.n	8013766 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013520:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	689b      	ldr	r3, [r3, #8]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d102      	bne.n	8013530 <f_write+0x16e>
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801352e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013536:	b25b      	sxtb	r3, r3
 8013538:	2b00      	cmp	r3, #0
 801353a:	da1b      	bge.n	8013574 <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	7858      	ldrb	r0, [r3, #1]
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801354a:	2301      	movs	r3, #1
 801354c:	f7fc f8dc 	bl	800f708 <disk_write>
 8013550:	4603      	mov	r3, r0
 8013552:	2b00      	cmp	r3, #0
 8013554:	d005      	beq.n	8013562 <f_write+0x1a0>
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	2201      	movs	r2, #1
 801355a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801355e:	2301      	movs	r3, #1
 8013560:	e101      	b.n	8013766 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801356c:	b2da      	uxtb	r2, r3
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013574:	693a      	ldr	r2, [r7, #16]
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801357a:	4619      	mov	r1, r3
 801357c:	4610      	mov	r0, r2
 801357e:	f7fc fd93 	bl	80100a8 <clust2sect>
 8013582:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013584:	697b      	ldr	r3, [r7, #20]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d105      	bne.n	8013596 <f_write+0x1d4>
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	2202      	movs	r2, #2
 801358e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013592:	2302      	movs	r3, #2
 8013594:	e0e7      	b.n	8013766 <f_write+0x3a4>
			sect += csect;
 8013596:	697a      	ldr	r2, [r7, #20]
 8013598:	69bb      	ldr	r3, [r7, #24]
 801359a:	4413      	add	r3, r2
 801359c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	899b      	ldrh	r3, [r3, #12]
 80135a2:	461a      	mov	r2, r3
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80135aa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80135ac:	6a3b      	ldr	r3, [r7, #32]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d046      	beq.n	8013640 <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80135b2:	69ba      	ldr	r2, [r7, #24]
 80135b4:	6a3b      	ldr	r3, [r7, #32]
 80135b6:	4413      	add	r3, r2
 80135b8:	693a      	ldr	r2, [r7, #16]
 80135ba:	8952      	ldrh	r2, [r2, #10]
 80135bc:	4293      	cmp	r3, r2
 80135be:	d905      	bls.n	80135cc <f_write+0x20a>
					cc = fs->csize - csect;
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	895b      	ldrh	r3, [r3, #10]
 80135c4:	461a      	mov	r2, r3
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	1ad3      	subs	r3, r2, r3
 80135ca:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	7858      	ldrb	r0, [r3, #1]
 80135d0:	6a3b      	ldr	r3, [r7, #32]
 80135d2:	697a      	ldr	r2, [r7, #20]
 80135d4:	69f9      	ldr	r1, [r7, #28]
 80135d6:	f7fc f897 	bl	800f708 <disk_write>
 80135da:	4603      	mov	r3, r0
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d005      	beq.n	80135ec <f_write+0x22a>
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	2201      	movs	r2, #1
 80135e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80135e8:	2301      	movs	r3, #1
 80135ea:	e0bc      	b.n	8013766 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	6a3a      	ldr	r2, [r7, #32]
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d91a      	bls.n	8013630 <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	1ad3      	subs	r3, r2, r3
 8013608:	693a      	ldr	r2, [r7, #16]
 801360a:	8992      	ldrh	r2, [r2, #12]
 801360c:	fb02 f303 	mul.w	r3, r2, r3
 8013610:	69fa      	ldr	r2, [r7, #28]
 8013612:	18d1      	adds	r1, r2, r3
 8013614:	693b      	ldr	r3, [r7, #16]
 8013616:	899b      	ldrh	r3, [r3, #12]
 8013618:	461a      	mov	r2, r3
 801361a:	f7fc fa79 	bl	800fb10 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013628:	b2da      	uxtb	r2, r3
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	899b      	ldrh	r3, [r3, #12]
 8013634:	461a      	mov	r2, r3
 8013636:	6a3b      	ldr	r3, [r7, #32]
 8013638:	fb02 f303 	mul.w	r3, r2, r3
 801363c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801363e:	e058      	b.n	80136f2 <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013644:	697a      	ldr	r2, [r7, #20]
 8013646:	429a      	cmp	r2, r3
 8013648:	d01b      	beq.n	8013682 <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013656:	42a2      	cmp	r2, r4
 8013658:	bf08      	it	eq
 801365a:	4299      	cmpeq	r1, r3
 801365c:	d211      	bcs.n	8013682 <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	7858      	ldrb	r0, [r3, #1]
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013668:	2301      	movs	r3, #1
 801366a:	697a      	ldr	r2, [r7, #20]
 801366c:	f7fc f82c 	bl	800f6c8 <disk_read>
 8013670:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013672:	2b00      	cmp	r3, #0
 8013674:	d005      	beq.n	8013682 <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	2201      	movs	r2, #1
 801367a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801367e:	2301      	movs	r3, #1
 8013680:	e071      	b.n	8013766 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	697a      	ldr	r2, [r7, #20]
 8013686:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	899b      	ldrh	r3, [r3, #12]
 801368c:	4618      	mov	r0, r3
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013694:	693a      	ldr	r2, [r7, #16]
 8013696:	8992      	ldrh	r2, [r2, #12]
 8013698:	fbb3 f1f2 	udiv	r1, r3, r2
 801369c:	fb02 f201 	mul.w	r2, r2, r1
 80136a0:	1a9b      	subs	r3, r3, r2
 80136a2:	1ac3      	subs	r3, r0, r3
 80136a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80136a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d901      	bls.n	80136b2 <f_write+0x2f0>
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	f103 0554 	add.w	r5, r3, #84	; 0x54
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80136be:	693b      	ldr	r3, [r7, #16]
 80136c0:	899b      	ldrh	r3, [r3, #12]
 80136c2:	b29b      	uxth	r3, r3
 80136c4:	f04f 0400 	mov.w	r4, #0
 80136c8:	461a      	mov	r2, r3
 80136ca:	4623      	mov	r3, r4
 80136cc:	f7ec fe04 	bl	80002d8 <__aeabi_uldivmod>
 80136d0:	461c      	mov	r4, r3
 80136d2:	4613      	mov	r3, r2
 80136d4:	442b      	add	r3, r5
 80136d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136d8:	69f9      	ldr	r1, [r7, #28]
 80136da:	4618      	mov	r0, r3
 80136dc:	f7fc fa18 	bl	800fb10 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80136e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80136ea:	b2da      	uxtb	r2, r3
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80136f2:	69fa      	ldr	r2, [r7, #28]
 80136f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f6:	4413      	add	r3, r2
 80136f8:	61fb      	str	r3, [r7, #28]
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8013700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013702:	461d      	mov	r5, r3
 8013704:	f04f 0600 	mov.w	r6, #0
 8013708:	186b      	adds	r3, r5, r1
 801370a:	eb46 0402 	adc.w	r4, r6, r2
 801370e:	68fa      	ldr	r2, [r7, #12]
 8013710:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801371a:	68fa      	ldr	r2, [r7, #12]
 801371c:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 8013720:	4294      	cmp	r4, r2
 8013722:	bf08      	it	eq
 8013724:	428b      	cmpeq	r3, r1
 8013726:	d201      	bcs.n	801372c <f_write+0x36a>
 8013728:	460b      	mov	r3, r1
 801372a:	4614      	mov	r4, r2
 801372c:	68fa      	ldr	r2, [r7, #12]
 801372e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	681a      	ldr	r2, [r3, #0]
 8013736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013738:	441a      	add	r2, r3
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	601a      	str	r2, [r3, #0]
 801373e:	687a      	ldr	r2, [r7, #4]
 8013740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013742:	1ad3      	subs	r3, r2, r3
 8013744:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2b00      	cmp	r3, #0
 801374a:	f47f ae80 	bne.w	801344e <f_write+0x8c>
 801374e:	e000      	b.n	8013752 <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013750:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801375c:	b2da      	uxtb	r2, r3
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8013764:	2300      	movs	r3, #0
}
 8013766:	4618      	mov	r0, r3
 8013768:	3734      	adds	r7, #52	; 0x34
 801376a:	46bd      	mov	sp, r7
 801376c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801376e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801376e:	b590      	push	{r4, r7, lr}
 8013770:	b09b      	sub	sp, #108	; 0x6c
 8013772:	af00      	add	r7, sp, #0
 8013774:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801377c:	4611      	mov	r1, r2
 801377e:	4618      	mov	r0, r3
 8013780:	f7ff fae8 	bl	8012d54 <validate>
 8013784:	4603      	mov	r3, r0
 8013786:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801378a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801378e:	2b00      	cmp	r3, #0
 8013790:	f040 8109 	bne.w	80139a6 <f_sync+0x238>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801379a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801379e:	2b00      	cmp	r3, #0
 80137a0:	f000 8101 	beq.w	80139a6 <f_sync+0x238>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80137aa:	b25b      	sxtb	r3, r3
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	da17      	bge.n	80137e0 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80137b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137b2:	7858      	ldrb	r0, [r3, #1]
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80137be:	2301      	movs	r3, #1
 80137c0:	f7fb ffa2 	bl	800f708 <disk_write>
 80137c4:	4603      	mov	r3, r0
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d001      	beq.n	80137ce <f_sync+0x60>
 80137ca:	2301      	movs	r3, #1
 80137cc:	e0ed      	b.n	80139aa <f_sync+0x23c>
				fp->flag &= (BYTE)~FA_DIRTY;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80137d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137d8:	b2da      	uxtb	r2, r3
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80137e0:	f7fb fdac 	bl	800f33c <get_fattime>
 80137e4:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80137e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80137e8:	781b      	ldrb	r3, [r3, #0]
 80137ea:	2b04      	cmp	r3, #4
 80137ec:	f040 8090 	bne.w	8013910 <f_sync+0x1a2>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7fc ffea 	bl	80107cc <fill_first_frag>
 80137f8:	4603      	mov	r3, r0
 80137fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 80137fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013802:	2b00      	cmp	r3, #0
 8013804:	d10a      	bne.n	801381c <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8013806:	6878      	ldr	r0, [r7, #4]
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801380c:	f04f 32ff 	mov.w	r2, #4294967295
 8013810:	4619      	mov	r1, r3
 8013812:	f7fd f80a 	bl	801082a <fill_last_frag>
 8013816:	4603      	mov	r3, r0
 8013818:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 801381c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013820:	2b00      	cmp	r3, #0
 8013822:	f040 80c0 	bne.w	80139a6 <f_sync+0x238>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8013826:	687a      	ldr	r2, [r7, #4]
 8013828:	f107 0308 	add.w	r3, r7, #8
 801382c:	4611      	mov	r1, r2
 801382e:	4618      	mov	r0, r3
 8013830:	f7fd ff50 	bl	80116d4 <load_obj_dir>
 8013834:	4603      	mov	r3, r0
 8013836:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 801383a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801383e:	2b00      	cmp	r3, #0
 8013840:	f040 80b1 	bne.w	80139a6 <f_sync+0x238>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8013844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013846:	695b      	ldr	r3, [r3, #20]
 8013848:	3304      	adds	r3, #4
 801384a:	781a      	ldrb	r2, [r3, #0]
 801384c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801384e:	695b      	ldr	r3, [r3, #20]
 8013850:	3304      	adds	r3, #4
 8013852:	f042 0220 	orr.w	r2, r2, #32
 8013856:	b2d2      	uxtb	r2, r2
 8013858:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	79da      	ldrb	r2, [r3, #7]
 801385e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013860:	695b      	ldr	r3, [r3, #20]
 8013862:	3321      	adds	r3, #33	; 0x21
 8013864:	f042 0201 	orr.w	r2, r2, #1
 8013868:	b2d2      	uxtb	r2, r2
 801386a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 801386c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801386e:	695b      	ldr	r3, [r3, #20]
 8013870:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	689b      	ldr	r3, [r3, #8]
 8013878:	4619      	mov	r1, r3
 801387a:	4610      	mov	r0, r2
 801387c:	f7fc f895 	bl	800f9aa <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8013880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013882:	695b      	ldr	r3, [r3, #20]
 8013884:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801388e:	461a      	mov	r2, r3
 8013890:	4623      	mov	r3, r4
 8013892:	4608      	mov	r0, r1
 8013894:	f7fc f8b5 	bl	800fa02 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8013898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801389a:	695b      	ldr	r3, [r3, #20]
 801389c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80138a6:	461a      	mov	r2, r3
 80138a8:	4623      	mov	r3, r4
 80138aa:	4608      	mov	r0, r1
 80138ac:	f7fc f8a9 	bl	800fa02 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80138b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80138b2:	695b      	ldr	r3, [r3, #20]
 80138b4:	330c      	adds	r3, #12
 80138b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7fc f876 	bl	800f9aa <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80138be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80138c0:	695b      	ldr	r3, [r3, #20]
 80138c2:	3315      	adds	r3, #21
 80138c4:	2200      	movs	r2, #0
 80138c6:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80138c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80138ca:	695b      	ldr	r3, [r3, #20]
 80138cc:	3310      	adds	r3, #16
 80138ce:	2100      	movs	r1, #0
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7fc f86a 	bl	800f9aa <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80138d6:	f107 0308 	add.w	r3, r7, #8
 80138da:	4618      	mov	r0, r3
 80138dc:	f7fd ff37 	bl	801174e <store_xdir>
 80138e0:	4603      	mov	r3, r0
 80138e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80138e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d15b      	bne.n	80139a6 <f_sync+0x238>
							res = sync_fs(fs);
 80138ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80138f0:	4618      	mov	r0, r3
 80138f2:	f7fc fb69 	bl	800ffc8 <sync_fs>
 80138f6:	4603      	mov	r3, r0
 80138f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013906:	b2da      	uxtb	r2, r3
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 801390e:	e04a      	b.n	80139a6 <f_sync+0x238>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013916:	4619      	mov	r1, r3
 8013918:	4610      	mov	r0, r2
 801391a:	f7fc fb27 	bl	800ff6c <move_window>
 801391e:	4603      	mov	r3, r0
 8013920:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8013924:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013928:	2b00      	cmp	r3, #0
 801392a:	d13c      	bne.n	80139a6 <f_sync+0x238>
					dir = fp->dir_ptr;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013930:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013934:	330b      	adds	r3, #11
 8013936:	781a      	ldrb	r2, [r3, #0]
 8013938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801393a:	330b      	adds	r3, #11
 801393c:	f042 0220 	orr.w	r2, r2, #32
 8013940:	b2d2      	uxtb	r2, r2
 8013942:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6818      	ldr	r0, [r3, #0]
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	689b      	ldr	r3, [r3, #8]
 801394c:	461a      	mov	r2, r3
 801394e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8013950:	f7fd fb8d 	bl	801106e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013956:	f103 021c 	add.w	r2, r3, #28
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013960:	4619      	mov	r1, r3
 8013962:	4610      	mov	r0, r2
 8013964:	f7fc f821 	bl	800f9aa <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801396a:	3316      	adds	r3, #22
 801396c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801396e:	4618      	mov	r0, r3
 8013970:	f7fc f81b 	bl	800f9aa <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013976:	3312      	adds	r3, #18
 8013978:	2100      	movs	r1, #0
 801397a:	4618      	mov	r0, r3
 801397c:	f7fb fffa 	bl	800f974 <st_word>
					fs->wflag = 1;
 8013980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013982:	2201      	movs	r2, #1
 8013984:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013988:	4618      	mov	r0, r3
 801398a:	f7fc fb1d 	bl	800ffc8 <sync_fs>
 801398e:	4603      	mov	r3, r0
 8013990:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801399a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801399e:	b2da      	uxtb	r2, r3
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80139a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	376c      	adds	r7, #108	; 0x6c
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd90      	pop	{r4, r7, pc}

080139b2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80139b2:	b580      	push	{r7, lr}
 80139b4:	b084      	sub	sp, #16
 80139b6:	af00      	add	r7, sp, #0
 80139b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f7ff fed7 	bl	801376e <f_sync>
 80139c0:	4603      	mov	r3, r0
 80139c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80139c4:	7bfb      	ldrb	r3, [r7, #15]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d118      	bne.n	80139fc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	f107 0208 	add.w	r2, r7, #8
 80139d0:	4611      	mov	r1, r2
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7ff f9be 	bl	8012d54 <validate>
 80139d8:	4603      	mov	r3, r0
 80139da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80139dc:	7bfb      	ldrb	r3, [r7, #15]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d10c      	bne.n	80139fc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139e6:	4618      	mov	r0, r3
 80139e8:	f7fc fa1c 	bl	800fe24 <dec_lock>
 80139ec:	4603      	mov	r3, r0
 80139ee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80139f0:	7bfb      	ldrb	r3, [r7, #15]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d102      	bne.n	80139fc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2200      	movs	r2, #0
 80139fa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80139fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3710      	adds	r7, #16
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}

08013a06 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8013a06:	b580      	push	{r7, lr}
 8013a08:	b084      	sub	sp, #16
 8013a0a:	af00      	add	r7, sp, #0
 8013a0c:	6078      	str	r0, [r7, #4]
 8013a0e:	460b      	mov	r3, r1
 8013a10:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8013a12:	78fb      	ldrb	r3, [r7, #3]
 8013a14:	2b0a      	cmp	r3, #10
 8013a16:	d103      	bne.n	8013a20 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8013a18:	210d      	movs	r1, #13
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f7ff fff3 	bl	8013a06 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	db25      	blt.n	8013a78 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	1c5a      	adds	r2, r3, #1
 8013a30:	60fa      	str	r2, [r7, #12]
 8013a32:	687a      	ldr	r2, [r7, #4]
 8013a34:	4413      	add	r3, r2
 8013a36:	78fa      	ldrb	r2, [r7, #3]
 8013a38:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2b3c      	cmp	r3, #60	; 0x3c
 8013a3e:	dd12      	ble.n	8013a66 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6818      	ldr	r0, [r3, #0]
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f103 010c 	add.w	r1, r3, #12
 8013a4a:	68fa      	ldr	r2, [r7, #12]
 8013a4c:	f107 0308 	add.w	r3, r7, #8
 8013a50:	f7ff fcb7 	bl	80133c2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8013a54:	68ba      	ldr	r2, [r7, #8]
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d101      	bne.n	8013a60 <putc_bfd+0x5a>
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	e001      	b.n	8013a64 <putc_bfd+0x5e>
 8013a60:	f04f 33ff 	mov.w	r3, #4294967295
 8013a64:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	68fa      	ldr	r2, [r7, #12]
 8013a6a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	689b      	ldr	r3, [r3, #8]
 8013a70:	1c5a      	adds	r2, r3, #1
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	609a      	str	r2, [r3, #8]
 8013a76:	e000      	b.n	8013a7a <putc_bfd+0x74>
	if (i < 0) return;
 8013a78:	bf00      	nop
}
 8013a7a:	3710      	adds	r7, #16
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}

08013a80 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b084      	sub	sp, #16
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	685b      	ldr	r3, [r3, #4]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	db17      	blt.n	8013ac0 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	6818      	ldr	r0, [r3, #0]
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f103 010c 	add.w	r1, r3, #12
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	f107 030c 	add.w	r3, r7, #12
 8013aa4:	f7ff fc8d 	bl	80133c2 <f_write>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d108      	bne.n	8013ac0 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d102      	bne.n	8013ac0 <putc_flush+0x40>
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	689b      	ldr	r3, [r3, #8]
 8013abe:	e001      	b.n	8013ac4 <putc_flush+0x44>
	return EOF;
 8013ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3710      	adds	r7, #16
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}

08013acc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8013acc:	b480      	push	{r7}
 8013ace:	b083      	sub	sp, #12
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
 8013ad4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	683a      	ldr	r2, [r7, #0]
 8013ada:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	605a      	str	r2, [r3, #4]
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	685a      	ldr	r2, [r3, #4]
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	609a      	str	r2, [r3, #8]
}
 8013aea:	bf00      	nop
 8013aec:	370c      	adds	r7, #12
 8013aee:	46bd      	mov	sp, r7
 8013af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af4:	4770      	bx	lr
	...

08013af8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8013af8:	b40e      	push	{r1, r2, r3}
 8013afa:	b580      	push	{r7, lr}
 8013afc:	b0a7      	sub	sp, #156	; 0x9c
 8013afe:	af00      	add	r7, sp, #0
 8013b00:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8013b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b06:	6879      	ldr	r1, [r7, #4]
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7ff ffdf 	bl	8013acc <putc_init>

	va_start(arp, fmt);
 8013b0e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013b12:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8013b14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013b18:	1c5a      	adds	r2, r3, #1
 8013b1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013b1e:	781b      	ldrb	r3, [r3, #0]
 8013b20:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8013b24:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	f000 81f4 	beq.w	8013f16 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8013b2e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013b32:	2b25      	cmp	r3, #37	; 0x25
 8013b34:	d008      	beq.n	8013b48 <f_printf+0x50>
			putc_bfd(&pb, c);
 8013b36:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8013b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b3e:	4611      	mov	r1, r2
 8013b40:	4618      	mov	r0, r3
 8013b42:	f7ff ff60 	bl	8013a06 <putc_bfd>
			continue;
 8013b46:	e1e5      	b.n	8013f14 <f_printf+0x41c>
		}
		w = f = 0;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013b4e:	2300      	movs	r3, #0
 8013b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8013b54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013b58:	1c5a      	adds	r2, r3, #1
 8013b5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013b5e:	781b      	ldrb	r3, [r3, #0]
 8013b60:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8013b64:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013b68:	2b30      	cmp	r3, #48	; 0x30
 8013b6a:	d10b      	bne.n	8013b84 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8013b6c:	2301      	movs	r3, #1
 8013b6e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013b72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013b76:	1c5a      	adds	r2, r3, #1
 8013b78:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013b7c:	781b      	ldrb	r3, [r3, #0]
 8013b7e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8013b82:	e024      	b.n	8013bce <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8013b84:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013b88:	2b2d      	cmp	r3, #45	; 0x2d
 8013b8a:	d120      	bne.n	8013bce <f_printf+0xd6>
				f = 2; c = *fmt++;
 8013b8c:	2302      	movs	r3, #2
 8013b8e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013b96:	1c5a      	adds	r2, r3, #1
 8013b98:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8013ba2:	e014      	b.n	8013bce <f_printf+0xd6>
			w = w * 10 + c - '0';
 8013ba4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013ba8:	4613      	mov	r3, r2
 8013baa:	009b      	lsls	r3, r3, #2
 8013bac:	4413      	add	r3, r2
 8013bae:	005b      	lsls	r3, r3, #1
 8013bb0:	461a      	mov	r2, r3
 8013bb2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013bb6:	4413      	add	r3, r2
 8013bb8:	3b30      	subs	r3, #48	; 0x30
 8013bba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8013bbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013bc2:	1c5a      	adds	r2, r3, #1
 8013bc4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013bc8:	781b      	ldrb	r3, [r3, #0]
 8013bca:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8013bce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013bd2:	2b2f      	cmp	r3, #47	; 0x2f
 8013bd4:	d903      	bls.n	8013bde <f_printf+0xe6>
 8013bd6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013bda:	2b39      	cmp	r3, #57	; 0x39
 8013bdc:	d9e2      	bls.n	8013ba4 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8013bde:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013be2:	2b6c      	cmp	r3, #108	; 0x6c
 8013be4:	d003      	beq.n	8013bee <f_printf+0xf6>
 8013be6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013bea:	2b4c      	cmp	r3, #76	; 0x4c
 8013bec:	d10d      	bne.n	8013c0a <f_printf+0x112>
			f |= 4; c = *fmt++;
 8013bee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013bf2:	f043 0304 	orr.w	r3, r3, #4
 8013bf6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013bfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013bfe:	1c5a      	adds	r2, r3, #1
 8013c00:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8013c0a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	f000 8183 	beq.w	8013f1a <f_printf+0x422>
		d = c;
 8013c14:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013c18:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8013c1c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013c20:	2b60      	cmp	r3, #96	; 0x60
 8013c22:	d908      	bls.n	8013c36 <f_printf+0x13e>
 8013c24:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013c28:	2b7a      	cmp	r3, #122	; 0x7a
 8013c2a:	d804      	bhi.n	8013c36 <f_printf+0x13e>
 8013c2c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013c30:	3b20      	subs	r3, #32
 8013c32:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8013c36:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013c3a:	3b42      	subs	r3, #66	; 0x42
 8013c3c:	2b16      	cmp	r3, #22
 8013c3e:	f200 8098 	bhi.w	8013d72 <f_printf+0x27a>
 8013c42:	a201      	add	r2, pc, #4	; (adr r2, 8013c48 <f_printf+0x150>)
 8013c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c48:	08013d53 	.word	0x08013d53
 8013c4c:	08013d3b 	.word	0x08013d3b
 8013c50:	08013d63 	.word	0x08013d63
 8013c54:	08013d73 	.word	0x08013d73
 8013c58:	08013d73 	.word	0x08013d73
 8013c5c:	08013d73 	.word	0x08013d73
 8013c60:	08013d73 	.word	0x08013d73
 8013c64:	08013d73 	.word	0x08013d73
 8013c68:	08013d73 	.word	0x08013d73
 8013c6c:	08013d73 	.word	0x08013d73
 8013c70:	08013d73 	.word	0x08013d73
 8013c74:	08013d73 	.word	0x08013d73
 8013c78:	08013d73 	.word	0x08013d73
 8013c7c:	08013d5b 	.word	0x08013d5b
 8013c80:	08013d73 	.word	0x08013d73
 8013c84:	08013d73 	.word	0x08013d73
 8013c88:	08013d73 	.word	0x08013d73
 8013c8c:	08013ca5 	.word	0x08013ca5
 8013c90:	08013d73 	.word	0x08013d73
 8013c94:	08013d63 	.word	0x08013d63
 8013c98:	08013d73 	.word	0x08013d73
 8013c9c:	08013d73 	.word	0x08013d73
 8013ca0:	08013d6b 	.word	0x08013d6b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8013ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013ca6:	1d1a      	adds	r2, r3, #4
 8013ca8:	67ba      	str	r2, [r7, #120]	; 0x78
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013cb4:	e004      	b.n	8013cc0 <f_printf+0x1c8>
 8013cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013cba:	3301      	adds	r3, #1
 8013cbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013cc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013cc6:	4413      	add	r3, r2
 8013cc8:	781b      	ldrb	r3, [r3, #0]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d1f3      	bne.n	8013cb6 <f_printf+0x1be>
			if (!(f & 2)) {
 8013cce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013cd2:	f003 0302 	and.w	r3, r3, #2
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d11a      	bne.n	8013d10 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8013cda:	e005      	b.n	8013ce8 <f_printf+0x1f0>
 8013cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ce0:	2120      	movs	r1, #32
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f7ff fe8f 	bl	8013a06 <putc_bfd>
 8013ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013cec:	1c5a      	adds	r2, r3, #1
 8013cee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013cf2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d8f0      	bhi.n	8013cdc <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8013cfa:	e009      	b.n	8013d10 <f_printf+0x218>
 8013cfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013cfe:	1c5a      	adds	r2, r3, #1
 8013d00:	67fa      	str	r2, [r7, #124]	; 0x7c
 8013d02:	781a      	ldrb	r2, [r3, #0]
 8013d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013d08:	4611      	mov	r1, r2
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7ff fe7b 	bl	8013a06 <putc_bfd>
 8013d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013d12:	781b      	ldrb	r3, [r3, #0]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d1f1      	bne.n	8013cfc <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8013d18:	e005      	b.n	8013d26 <f_printf+0x22e>
 8013d1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013d1e:	2120      	movs	r1, #32
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7ff fe70 	bl	8013a06 <putc_bfd>
 8013d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013d2a:	1c5a      	adds	r2, r3, #1
 8013d2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013d30:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d8f0      	bhi.n	8013d1a <f_printf+0x222>
			continue;
 8013d38:	e0ec      	b.n	8013f14 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8013d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013d3c:	1d1a      	adds	r2, r3, #4
 8013d3e:	67ba      	str	r2, [r7, #120]	; 0x78
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	b2da      	uxtb	r2, r3
 8013d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013d48:	4611      	mov	r1, r2
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7ff fe5b 	bl	8013a06 <putc_bfd>
 8013d50:	e0e0      	b.n	8013f14 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8013d52:	2302      	movs	r3, #2
 8013d54:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013d58:	e014      	b.n	8013d84 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8013d5a:	2308      	movs	r3, #8
 8013d5c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013d60:	e010      	b.n	8013d84 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8013d62:	230a      	movs	r3, #10
 8013d64:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013d68:	e00c      	b.n	8013d84 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8013d6a:	2310      	movs	r3, #16
 8013d6c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013d70:	e008      	b.n	8013d84 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8013d72:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8013d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013d7a:	4611      	mov	r1, r2
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7ff fe42 	bl	8013a06 <putc_bfd>
 8013d82:	e0c7      	b.n	8013f14 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8013d84:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013d88:	f003 0304 	and.w	r3, r3, #4
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d004      	beq.n	8013d9a <f_printf+0x2a2>
 8013d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013d92:	1d1a      	adds	r2, r3, #4
 8013d94:	67ba      	str	r2, [r7, #120]	; 0x78
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	e00c      	b.n	8013db4 <f_printf+0x2bc>
 8013d9a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013d9e:	2b44      	cmp	r3, #68	; 0x44
 8013da0:	d104      	bne.n	8013dac <f_printf+0x2b4>
 8013da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013da4:	1d1a      	adds	r2, r3, #4
 8013da6:	67ba      	str	r2, [r7, #120]	; 0x78
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	e003      	b.n	8013db4 <f_printf+0x2bc>
 8013dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013dae:	1d1a      	adds	r2, r3, #4
 8013db0:	67ba      	str	r2, [r7, #120]	; 0x78
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8013db8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013dbc:	2b44      	cmp	r3, #68	; 0x44
 8013dbe:	d10e      	bne.n	8013dde <f_printf+0x2e6>
 8013dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	da0a      	bge.n	8013dde <f_printf+0x2e6>
			v = 0 - v;
 8013dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013dcc:	425b      	negs	r3, r3
 8013dce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8013dd2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013dd6:	f043 0308 	orr.w	r3, r3, #8
 8013dda:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8013dde:	2300      	movs	r3, #0
 8013de0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8013de4:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8013de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013dec:	fbb3 f1f2 	udiv	r1, r3, r2
 8013df0:	fb02 f201 	mul.w	r2, r2, r1
 8013df4:	1a9b      	subs	r3, r3, r2
 8013df6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8013dfa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8013dfe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8013e0a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013e0e:	2b09      	cmp	r3, #9
 8013e10:	d90b      	bls.n	8013e2a <f_printf+0x332>
 8013e12:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013e16:	2b78      	cmp	r3, #120	; 0x78
 8013e18:	d101      	bne.n	8013e1e <f_printf+0x326>
 8013e1a:	2227      	movs	r2, #39	; 0x27
 8013e1c:	e000      	b.n	8013e20 <f_printf+0x328>
 8013e1e:	2207      	movs	r2, #7
 8013e20:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013e24:	4413      	add	r3, r2
 8013e26:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8013e2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013e2e:	1c5a      	adds	r2, r3, #1
 8013e30:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013e34:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8013e38:	3230      	adds	r2, #48	; 0x30
 8013e3a:	b2d2      	uxtb	r2, r2
 8013e3c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8013e40:	440b      	add	r3, r1
 8013e42:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8013e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d003      	beq.n	8013e56 <f_printf+0x35e>
 8013e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013e52:	2b1f      	cmp	r3, #31
 8013e54:	d9c6      	bls.n	8013de4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8013e56:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013e5a:	f003 0308 	and.w	r3, r3, #8
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d00a      	beq.n	8013e78 <f_printf+0x380>
 8013e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013e66:	1c5a      	adds	r2, r3, #1
 8013e68:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013e6c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8013e70:	4413      	add	r3, r2
 8013e72:	222d      	movs	r2, #45	; 0x2d
 8013e74:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8013e78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013e7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013e80:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013e84:	f003 0301 	and.w	r3, r3, #1
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d001      	beq.n	8013e90 <f_printf+0x398>
 8013e8c:	2330      	movs	r3, #48	; 0x30
 8013e8e:	e000      	b.n	8013e92 <f_printf+0x39a>
 8013e90:	2320      	movs	r3, #32
 8013e92:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8013e96:	e007      	b.n	8013ea8 <f_printf+0x3b0>
 8013e98:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8013e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ea0:	4611      	mov	r1, r2
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7ff fdaf 	bl	8013a06 <putc_bfd>
 8013ea8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013eac:	f003 0302 	and.w	r3, r3, #2
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d108      	bne.n	8013ec6 <f_printf+0x3ce>
 8013eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013eb8:	1c5a      	adds	r2, r3, #1
 8013eba:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013ebe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d8e8      	bhi.n	8013e98 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8013ec6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013eca:	3b01      	subs	r3, #1
 8013ecc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013ed0:	f107 020c 	add.w	r2, r7, #12
 8013ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013ed8:	4413      	add	r3, r2
 8013eda:	781a      	ldrb	r2, [r3, #0]
 8013edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ee0:	4611      	mov	r1, r2
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7ff fd8f 	bl	8013a06 <putc_bfd>
		} while (i);
 8013ee8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d1ea      	bne.n	8013ec6 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8013ef0:	e007      	b.n	8013f02 <f_printf+0x40a>
 8013ef2:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8013ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013efa:	4611      	mov	r1, r2
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7ff fd82 	bl	8013a06 <putc_bfd>
 8013f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013f06:	1c5a      	adds	r2, r3, #1
 8013f08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013f0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d8ee      	bhi.n	8013ef2 <f_printf+0x3fa>
		c = *fmt++;
 8013f14:	e5fe      	b.n	8013b14 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8013f16:	bf00      	nop
 8013f18:	e000      	b.n	8013f1c <f_printf+0x424>
		if (!c) break;
 8013f1a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8013f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013f20:	4618      	mov	r0, r3
 8013f22:	f7ff fdad 	bl	8013a80 <putc_flush>
 8013f26:	4603      	mov	r3, r0
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	379c      	adds	r7, #156	; 0x9c
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013f32:	b003      	add	sp, #12
 8013f34:	4770      	bx	lr
 8013f36:	bf00      	nop

08013f38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013f38:	b480      	push	{r7}
 8013f3a:	b087      	sub	sp, #28
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	60f8      	str	r0, [r7, #12]
 8013f40:	60b9      	str	r1, [r7, #8]
 8013f42:	4613      	mov	r3, r2
 8013f44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013f46:	2301      	movs	r3, #1
 8013f48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013f4e:	4b1f      	ldr	r3, [pc, #124]	; (8013fcc <FATFS_LinkDriverEx+0x94>)
 8013f50:	7a5b      	ldrb	r3, [r3, #9]
 8013f52:	b2db      	uxtb	r3, r3
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d131      	bne.n	8013fbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013f58:	4b1c      	ldr	r3, [pc, #112]	; (8013fcc <FATFS_LinkDriverEx+0x94>)
 8013f5a:	7a5b      	ldrb	r3, [r3, #9]
 8013f5c:	b2db      	uxtb	r3, r3
 8013f5e:	461a      	mov	r2, r3
 8013f60:	4b1a      	ldr	r3, [pc, #104]	; (8013fcc <FATFS_LinkDriverEx+0x94>)
 8013f62:	2100      	movs	r1, #0
 8013f64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013f66:	4b19      	ldr	r3, [pc, #100]	; (8013fcc <FATFS_LinkDriverEx+0x94>)
 8013f68:	7a5b      	ldrb	r3, [r3, #9]
 8013f6a:	b2db      	uxtb	r3, r3
 8013f6c:	4a17      	ldr	r2, [pc, #92]	; (8013fcc <FATFS_LinkDriverEx+0x94>)
 8013f6e:	009b      	lsls	r3, r3, #2
 8013f70:	4413      	add	r3, r2
 8013f72:	68fa      	ldr	r2, [r7, #12]
 8013f74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013f76:	4b15      	ldr	r3, [pc, #84]	; (8013fcc <FATFS_LinkDriverEx+0x94>)
 8013f78:	7a5b      	ldrb	r3, [r3, #9]
 8013f7a:	b2db      	uxtb	r3, r3
 8013f7c:	461a      	mov	r2, r3
 8013f7e:	4b13      	ldr	r3, [pc, #76]	; (8013fcc <FATFS_LinkDriverEx+0x94>)
 8013f80:	4413      	add	r3, r2
 8013f82:	79fa      	ldrb	r2, [r7, #7]
 8013f84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013f86:	4b11      	ldr	r3, [pc, #68]	; (8013fcc <FATFS_LinkDriverEx+0x94>)
 8013f88:	7a5b      	ldrb	r3, [r3, #9]
 8013f8a:	b2db      	uxtb	r3, r3
 8013f8c:	1c5a      	adds	r2, r3, #1
 8013f8e:	b2d1      	uxtb	r1, r2
 8013f90:	4a0e      	ldr	r2, [pc, #56]	; (8013fcc <FATFS_LinkDriverEx+0x94>)
 8013f92:	7251      	strb	r1, [r2, #9]
 8013f94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013f96:	7dbb      	ldrb	r3, [r7, #22]
 8013f98:	3330      	adds	r3, #48	; 0x30
 8013f9a:	b2da      	uxtb	r2, r3
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	3301      	adds	r3, #1
 8013fa4:	223a      	movs	r2, #58	; 0x3a
 8013fa6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013fa8:	68bb      	ldr	r3, [r7, #8]
 8013faa:	3302      	adds	r3, #2
 8013fac:	222f      	movs	r2, #47	; 0x2f
 8013fae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	3303      	adds	r3, #3
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013fb8:	2300      	movs	r3, #0
 8013fba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	371c      	adds	r7, #28
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc8:	4770      	bx	lr
 8013fca:	bf00      	nop
 8013fcc:	24000574 	.word	0x24000574

08013fd0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013fda:	2200      	movs	r2, #0
 8013fdc:	6839      	ldr	r1, [r7, #0]
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f7ff ffaa 	bl	8013f38 <FATFS_LinkDriverEx>
 8013fe4:	4603      	mov	r3, r0
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3708      	adds	r7, #8
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
	...

08013ff0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8013ff0:	b480      	push	{r7}
 8013ff2:	b085      	sub	sp, #20
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	6039      	str	r1, [r7, #0]
 8013ffa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8013ffc:	88fb      	ldrh	r3, [r7, #6]
 8013ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8014000:	d802      	bhi.n	8014008 <ff_convert+0x18>
		c = chr;
 8014002:	88fb      	ldrh	r3, [r7, #6]
 8014004:	81fb      	strh	r3, [r7, #14]
 8014006:	e025      	b.n	8014054 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d00b      	beq.n	8014026 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801400e:	88fb      	ldrh	r3, [r7, #6]
 8014010:	2bff      	cmp	r3, #255	; 0xff
 8014012:	d805      	bhi.n	8014020 <ff_convert+0x30>
 8014014:	88fb      	ldrh	r3, [r7, #6]
 8014016:	3b80      	subs	r3, #128	; 0x80
 8014018:	4a12      	ldr	r2, [pc, #72]	; (8014064 <ff_convert+0x74>)
 801401a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801401e:	e000      	b.n	8014022 <ff_convert+0x32>
 8014020:	2300      	movs	r3, #0
 8014022:	81fb      	strh	r3, [r7, #14]
 8014024:	e016      	b.n	8014054 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8014026:	2300      	movs	r3, #0
 8014028:	81fb      	strh	r3, [r7, #14]
 801402a:	e009      	b.n	8014040 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801402c:	89fb      	ldrh	r3, [r7, #14]
 801402e:	4a0d      	ldr	r2, [pc, #52]	; (8014064 <ff_convert+0x74>)
 8014030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014034:	88fa      	ldrh	r2, [r7, #6]
 8014036:	429a      	cmp	r2, r3
 8014038:	d006      	beq.n	8014048 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801403a:	89fb      	ldrh	r3, [r7, #14]
 801403c:	3301      	adds	r3, #1
 801403e:	81fb      	strh	r3, [r7, #14]
 8014040:	89fb      	ldrh	r3, [r7, #14]
 8014042:	2b7f      	cmp	r3, #127	; 0x7f
 8014044:	d9f2      	bls.n	801402c <ff_convert+0x3c>
 8014046:	e000      	b.n	801404a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8014048:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801404a:	89fb      	ldrh	r3, [r7, #14]
 801404c:	3380      	adds	r3, #128	; 0x80
 801404e:	b29b      	uxth	r3, r3
 8014050:	b2db      	uxtb	r3, r3
 8014052:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8014054:	89fb      	ldrh	r3, [r7, #14]
}
 8014056:	4618      	mov	r0, r3
 8014058:	3714      	adds	r7, #20
 801405a:	46bd      	mov	sp, r7
 801405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014060:	4770      	bx	lr
 8014062:	bf00      	nop
 8014064:	080143e0 	.word	0x080143e0

08014068 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014068:	b480      	push	{r7}
 801406a:	b087      	sub	sp, #28
 801406c:	af00      	add	r7, sp, #0
 801406e:	4603      	mov	r3, r0
 8014070:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8014072:	88fb      	ldrh	r3, [r7, #6]
 8014074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014078:	d201      	bcs.n	801407e <ff_wtoupper+0x16>
 801407a:	4b3e      	ldr	r3, [pc, #248]	; (8014174 <ff_wtoupper+0x10c>)
 801407c:	e000      	b.n	8014080 <ff_wtoupper+0x18>
 801407e:	4b3e      	ldr	r3, [pc, #248]	; (8014178 <ff_wtoupper+0x110>)
 8014080:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	1c9a      	adds	r2, r3, #2
 8014086:	617a      	str	r2, [r7, #20]
 8014088:	881b      	ldrh	r3, [r3, #0]
 801408a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801408c:	8a7b      	ldrh	r3, [r7, #18]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d068      	beq.n	8014164 <ff_wtoupper+0xfc>
 8014092:	88fa      	ldrh	r2, [r7, #6]
 8014094:	8a7b      	ldrh	r3, [r7, #18]
 8014096:	429a      	cmp	r2, r3
 8014098:	d364      	bcc.n	8014164 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	1c9a      	adds	r2, r3, #2
 801409e:	617a      	str	r2, [r7, #20]
 80140a0:	881b      	ldrh	r3, [r3, #0]
 80140a2:	823b      	strh	r3, [r7, #16]
 80140a4:	8a3b      	ldrh	r3, [r7, #16]
 80140a6:	0a1b      	lsrs	r3, r3, #8
 80140a8:	81fb      	strh	r3, [r7, #14]
 80140aa:	8a3b      	ldrh	r3, [r7, #16]
 80140ac:	b2db      	uxtb	r3, r3
 80140ae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80140b0:	88fa      	ldrh	r2, [r7, #6]
 80140b2:	8a79      	ldrh	r1, [r7, #18]
 80140b4:	8a3b      	ldrh	r3, [r7, #16]
 80140b6:	440b      	add	r3, r1
 80140b8:	429a      	cmp	r2, r3
 80140ba:	da49      	bge.n	8014150 <ff_wtoupper+0xe8>
			switch (cmd) {
 80140bc:	89fb      	ldrh	r3, [r7, #14]
 80140be:	2b08      	cmp	r3, #8
 80140c0:	d84f      	bhi.n	8014162 <ff_wtoupper+0xfa>
 80140c2:	a201      	add	r2, pc, #4	; (adr r2, 80140c8 <ff_wtoupper+0x60>)
 80140c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140c8:	080140ed 	.word	0x080140ed
 80140cc:	080140ff 	.word	0x080140ff
 80140d0:	08014115 	.word	0x08014115
 80140d4:	0801411d 	.word	0x0801411d
 80140d8:	08014125 	.word	0x08014125
 80140dc:	0801412d 	.word	0x0801412d
 80140e0:	08014135 	.word	0x08014135
 80140e4:	0801413d 	.word	0x0801413d
 80140e8:	08014145 	.word	0x08014145
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80140ec:	88fa      	ldrh	r2, [r7, #6]
 80140ee:	8a7b      	ldrh	r3, [r7, #18]
 80140f0:	1ad3      	subs	r3, r2, r3
 80140f2:	005b      	lsls	r3, r3, #1
 80140f4:	697a      	ldr	r2, [r7, #20]
 80140f6:	4413      	add	r3, r2
 80140f8:	881b      	ldrh	r3, [r3, #0]
 80140fa:	80fb      	strh	r3, [r7, #6]
 80140fc:	e027      	b.n	801414e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80140fe:	88fa      	ldrh	r2, [r7, #6]
 8014100:	8a7b      	ldrh	r3, [r7, #18]
 8014102:	1ad3      	subs	r3, r2, r3
 8014104:	b29b      	uxth	r3, r3
 8014106:	f003 0301 	and.w	r3, r3, #1
 801410a:	b29b      	uxth	r3, r3
 801410c:	88fa      	ldrh	r2, [r7, #6]
 801410e:	1ad3      	subs	r3, r2, r3
 8014110:	80fb      	strh	r3, [r7, #6]
 8014112:	e01c      	b.n	801414e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014114:	88fb      	ldrh	r3, [r7, #6]
 8014116:	3b10      	subs	r3, #16
 8014118:	80fb      	strh	r3, [r7, #6]
 801411a:	e018      	b.n	801414e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801411c:	88fb      	ldrh	r3, [r7, #6]
 801411e:	3b20      	subs	r3, #32
 8014120:	80fb      	strh	r3, [r7, #6]
 8014122:	e014      	b.n	801414e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014124:	88fb      	ldrh	r3, [r7, #6]
 8014126:	3b30      	subs	r3, #48	; 0x30
 8014128:	80fb      	strh	r3, [r7, #6]
 801412a:	e010      	b.n	801414e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801412c:	88fb      	ldrh	r3, [r7, #6]
 801412e:	3b1a      	subs	r3, #26
 8014130:	80fb      	strh	r3, [r7, #6]
 8014132:	e00c      	b.n	801414e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8014134:	88fb      	ldrh	r3, [r7, #6]
 8014136:	3308      	adds	r3, #8
 8014138:	80fb      	strh	r3, [r7, #6]
 801413a:	e008      	b.n	801414e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801413c:	88fb      	ldrh	r3, [r7, #6]
 801413e:	3b50      	subs	r3, #80	; 0x50
 8014140:	80fb      	strh	r3, [r7, #6]
 8014142:	e004      	b.n	801414e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014144:	88fb      	ldrh	r3, [r7, #6]
 8014146:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801414a:	80fb      	strh	r3, [r7, #6]
 801414c:	bf00      	nop
			}
			break;
 801414e:	e008      	b.n	8014162 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014150:	89fb      	ldrh	r3, [r7, #14]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d195      	bne.n	8014082 <ff_wtoupper+0x1a>
 8014156:	8a3b      	ldrh	r3, [r7, #16]
 8014158:	005b      	lsls	r3, r3, #1
 801415a:	697a      	ldr	r2, [r7, #20]
 801415c:	4413      	add	r3, r2
 801415e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014160:	e78f      	b.n	8014082 <ff_wtoupper+0x1a>
			break;
 8014162:	bf00      	nop
	}

	return chr;
 8014164:	88fb      	ldrh	r3, [r7, #6]
}
 8014166:	4618      	mov	r0, r3
 8014168:	371c      	adds	r7, #28
 801416a:	46bd      	mov	sp, r7
 801416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014170:	4770      	bx	lr
 8014172:	bf00      	nop
 8014174:	080144e0 	.word	0x080144e0
 8014178:	080146d4 	.word	0x080146d4

0801417c <__libc_init_array>:
 801417c:	b570      	push	{r4, r5, r6, lr}
 801417e:	4e0d      	ldr	r6, [pc, #52]	; (80141b4 <__libc_init_array+0x38>)
 8014180:	4c0d      	ldr	r4, [pc, #52]	; (80141b8 <__libc_init_array+0x3c>)
 8014182:	1ba4      	subs	r4, r4, r6
 8014184:	10a4      	asrs	r4, r4, #2
 8014186:	2500      	movs	r5, #0
 8014188:	42a5      	cmp	r5, r4
 801418a:	d109      	bne.n	80141a0 <__libc_init_array+0x24>
 801418c:	4e0b      	ldr	r6, [pc, #44]	; (80141bc <__libc_init_array+0x40>)
 801418e:	4c0c      	ldr	r4, [pc, #48]	; (80141c0 <__libc_init_array+0x44>)
 8014190:	f000 f82c 	bl	80141ec <_init>
 8014194:	1ba4      	subs	r4, r4, r6
 8014196:	10a4      	asrs	r4, r4, #2
 8014198:	2500      	movs	r5, #0
 801419a:	42a5      	cmp	r5, r4
 801419c:	d105      	bne.n	80141aa <__libc_init_array+0x2e>
 801419e:	bd70      	pop	{r4, r5, r6, pc}
 80141a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80141a4:	4798      	blx	r3
 80141a6:	3501      	adds	r5, #1
 80141a8:	e7ee      	b.n	8014188 <__libc_init_array+0xc>
 80141aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80141ae:	4798      	blx	r3
 80141b0:	3501      	adds	r5, #1
 80141b2:	e7f2      	b.n	801419a <__libc_init_array+0x1e>
 80141b4:	08014798 	.word	0x08014798
 80141b8:	08014798 	.word	0x08014798
 80141bc:	08014798 	.word	0x08014798
 80141c0:	0801479c 	.word	0x0801479c

080141c4 <memcpy>:
 80141c4:	b510      	push	{r4, lr}
 80141c6:	1e43      	subs	r3, r0, #1
 80141c8:	440a      	add	r2, r1
 80141ca:	4291      	cmp	r1, r2
 80141cc:	d100      	bne.n	80141d0 <memcpy+0xc>
 80141ce:	bd10      	pop	{r4, pc}
 80141d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141d8:	e7f7      	b.n	80141ca <memcpy+0x6>

080141da <memset>:
 80141da:	4402      	add	r2, r0
 80141dc:	4603      	mov	r3, r0
 80141de:	4293      	cmp	r3, r2
 80141e0:	d100      	bne.n	80141e4 <memset+0xa>
 80141e2:	4770      	bx	lr
 80141e4:	f803 1b01 	strb.w	r1, [r3], #1
 80141e8:	e7f9      	b.n	80141de <memset+0x4>
	...

080141ec <_init>:
 80141ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ee:	bf00      	nop
 80141f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141f2:	bc08      	pop	{r3}
 80141f4:	469e      	mov	lr, r3
 80141f6:	4770      	bx	lr

080141f8 <_fini>:
 80141f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141fa:	bf00      	nop
 80141fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141fe:	bc08      	pop	{r3}
 8014200:	469e      	mov	lr, r3
 8014202:	4770      	bx	lr
