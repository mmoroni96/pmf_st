
CANDELA_STRUM_OK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000141d4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0801446c  0801446c  0002446c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080149a8  080149a8  000300d0  2**0
                  CONTENTS
  4 .ARM          00000008  080149a8  080149a8  000249a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080149b0  080149b0  000300d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080149b0  080149b0  000249b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080149b4  080149b4  000249b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080149b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080149c8  00030010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08014a28  00030070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00024974  240000d0  08014a88  000300d0  2**3
                  ALLOC
 12 ._user_heap_stack 00006004  24024a44  08014a88  00034a44  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003c7a9  00000000  00000000  000300fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00005446  00000000  00000000  0006c8a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002440  00000000  00000000  00071cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002268  00000000  00000000  00074130  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003f008  00000000  00000000  00076398  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0002148a  00000000  00000000  000b53a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0018d8c7  00000000  00000000  000d682a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  002640f1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009f24  00000000  00000000  0026416c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08014454 	.word	0x08014454

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08014454 	.word	0x08014454

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 f98d 	bl	80018fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f869 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fba3 	bl	8000d30 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 fb81 	bl	8000cf0 <MX_DMA_Init>
  MX_ETH_Init();
 80005ee:	f000 f9ff 	bl	80009f0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 faff 	bl	8000bf4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 fb49 	bl	8000c8c <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 80005fa:	f000 fa4b 	bl	8000a94 <MX_FDCAN1_Init>
  MX_SDMMC1_SD_Init();
 80005fe:	f000 faad 	bl	8000b5c <MX_SDMMC1_SD_Init>
  MX_TIM17_Init();
 8000602:	f000 fad1 	bl	8000ba8 <MX_TIM17_Init>
  MX_ADC3_Init();
 8000606:	f000 f97d 	bl	8000904 <MX_ADC3_Init>
  MX_FATFS_Init();
 800060a:	f00f fa51 	bl	800fab0 <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800060e:	f000 f965 	bl	80008dc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // SD Card Initialization
  char path[] = "DATA_LOG.TXT";
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <main+0xbc>)
 8000614:	463c      	mov	r4, r7
 8000616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000618:	c407      	stmia	r4!, {r0, r1, r2}
 800061a:	7023      	strb	r3, [r4, #0]
  res = f_mount(&SDFatFs, SDPath, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	491e      	ldr	r1, [pc, #120]	; (8000698 <main+0xc0>)
 8000620:	481e      	ldr	r0, [pc, #120]	; (800069c <main+0xc4>)
 8000622:	f012 ff99 	bl	8013558 <f_mount>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <main+0xc8>)
 800062c:	701a      	strb	r2, [r3, #0]
  res = f_open(&SDFile, &path[0], FA_CREATE_ALWAYS);
 800062e:	463b      	mov	r3, r7
 8000630:	2208      	movs	r2, #8
 8000632:	4619      	mov	r1, r3
 8000634:	481b      	ldr	r0, [pc, #108]	; (80006a4 <main+0xcc>)
 8000636:	f012 ffd5 	bl	80135e4 <f_open>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <main+0xc8>)
 8000640:	701a      	strb	r2, [r3, #0]
  res = f_close(&SDFile);
 8000642:	4818      	ldr	r0, [pc, #96]	; (80006a4 <main+0xcc>)
 8000644:	f013 fd81 	bl	801414a <f_close>
 8000648:	4603      	mov	r3, r0
 800064a:	461a      	mov	r2, r3
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <main+0xc8>)
 800064e:	701a      	strb	r2, [r3, #0]
  res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);
 8000650:	463b      	mov	r3, r7
 8000652:	2232      	movs	r2, #50	; 0x32
 8000654:	4619      	mov	r1, r3
 8000656:	4813      	ldr	r0, [pc, #76]	; (80006a4 <main+0xcc>)
 8000658:	f012 ffc4 	bl	80135e4 <f_open>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <main+0xc8>)
 8000662:	701a      	strb	r2, [r3, #0]
  //f_printf(&SDFile,"Timer, ID, Acc_X, Acc_Y, Acc_Z, Gyr_X, Gyr_Y, Temp\n");
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET,ADC_SINGLE_ENDED);
 8000664:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000668:	2100      	movs	r1, #0
 800066a:	480f      	ldr	r0, [pc, #60]	; (80006a8 <main+0xd0>)
 800066c:	f002 fe9c 	bl	80033a8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)analogDmaData, ADC_CONVERTED_DATA_BUFFER_SIZE);
 8000670:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000674:	490d      	ldr	r1, [pc, #52]	; (80006ac <main+0xd4>)
 8000676:	480c      	ldr	r0, [pc, #48]	; (80006a8 <main+0xd0>)
 8000678:	f001 fdd6 	bl	8002228 <HAL_ADC_Start_DMA>
  // CAN Initialization
  HAL_FDCAN_Start(&hfdcan1);
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <main+0xd8>)
 800067e:	f005 ff09 	bl	8006494 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2101      	movs	r1, #1
 8000686:	480a      	ldr	r0, [pc, #40]	; (80006b0 <main+0xd8>)
 8000688:	f006 f870 	bl	800676c <HAL_FDCAN_ActivateNotification>

  // TIMER Initialization
  HAL_TIM_Base_Start_IT(&htim17);
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <main+0xdc>)
 800068e:	f00b fadd 	bl	800bc4c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0xba>
 8000694:	0801446c 	.word	0x0801446c
 8000698:	240229ac 	.word	0x240229ac
 800069c:	24001bc0 	.word	0x24001bc0
 80006a0:	240228b0 	.word	0x240228b0
 80006a4:	240229b0 	.word	0x240229b0
 80006a8:	24001b5c 	.word	0x24001b5c
 80006ac:	24002ce0 	.word	0x24002ce0
 80006b0:	24002bfc 	.word	0x24002bfc
 80006b4:	24000aa0 	.word	0x24000aa0

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0cc      	sub	sp, #304	; 0x130
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006c2:	224c      	movs	r2, #76	; 0x4c
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f013 febb 	bl	8014442 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006d0:	2220      	movs	r2, #32
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f013 feb4 	bl	8014442 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4618      	mov	r0, r3
 80006e0:	23bc      	movs	r3, #188	; 0xbc
 80006e2:	461a      	mov	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f013 feac 	bl	8014442 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ea:	2002      	movs	r0, #2
 80006ec:	f007 f872 	bl	80077d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	4b75      	ldr	r3, [pc, #468]	; (80008cc <SystemClock_Config+0x214>)
 80006f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fa:	4a74      	ldr	r2, [pc, #464]	; (80008cc <SystemClock_Config+0x214>)
 80006fc:	f023 0301 	bic.w	r3, r3, #1
 8000700:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000702:	4b72      	ldr	r3, [pc, #456]	; (80008cc <SystemClock_Config+0x214>)
 8000704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000706:	f003 0201 	and.w	r2, r3, #1
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	4b70      	ldr	r3, [pc, #448]	; (80008d0 <SystemClock_Config+0x218>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a6f      	ldr	r2, [pc, #444]	; (80008d0 <SystemClock_Config+0x218>)
 8000714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000718:	6193      	str	r3, [r2, #24]
 800071a:	4b6d      	ldr	r3, [pc, #436]	; (80008d0 <SystemClock_Config+0x218>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800072a:	bf00      	nop
 800072c:	4b68      	ldr	r3, [pc, #416]	; (80008d0 <SystemClock_Config+0x218>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000738:	d1f8      	bne.n	800072c <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800073a:	4b66      	ldr	r3, [pc, #408]	; (80008d4 <SystemClock_Config+0x21c>)
 800073c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800073e:	f023 0303 	bic.w	r3, r3, #3
 8000742:	4a64      	ldr	r2, [pc, #400]	; (80008d4 <SystemClock_Config+0x21c>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074a:	2301      	movs	r3, #1
 800074c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000750:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000754:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	2302      	movs	r3, #2
 8000760:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 800076a:	2318      	movs	r3, #24
 800076c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000776:	2304      	movs	r3, #4
 8000778:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000782:	230c      	movs	r3, #12
 8000784:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000788:	2300      	movs	r3, #0
 800078a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000798:	4618      	mov	r0, r3
 800079a:	f007 f865 	bl	8007868 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80007a4:	f000 fcb0 	bl	8001108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	233f      	movs	r3, #63	; 0x3f
 80007aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2303      	movs	r3, #3
 80007b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f007 fc1a 	bl	8008018 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x136>
  {
    Error_Handler();
 80007ea:	f000 fc8d 	bl	8001108 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4a39      	ldr	r2, [pc, #228]	; (80008d8 <SystemClock_Config+0x220>)
 80007f4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2201      	movs	r2, #1
 80007fc:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	2212      	movs	r2, #18
 8000804:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2201      	movs	r2, #1
 800080c:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	2202      	movs	r2, #2
 8000814:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2202      	movs	r2, #2
 800081c:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	22c0      	movs	r2, #192	; 0xc0
 8000824:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	2220      	movs	r2, #32
 800082c:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000836:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	2201      	movs	r2, #1
 800083e:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2218      	movs	r2, #24
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	2202      	movs	r2, #2
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2204      	movs	r2, #4
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 1;
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	2201      	movs	r2, #1
 800085e:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000868:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2200      	movs	r2, #0
 8000870:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	2200      	movs	r2, #0
 8000878:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	2200      	movs	r2, #0
 8000880:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2200      	movs	r2, #0
 8000888:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2200      	movs	r2, #0
 8000890:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800089a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	2200      	movs	r2, #0
 80008a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	4618      	mov	r0, r3
 80008ae:	f007 ff37 	bl	8008720 <HAL_RCCEx_PeriphCLKConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x204>
  {
    Error_Handler();
 80008b8:	f000 fc26 	bl	8001108 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80008bc:	f006 ffc4 	bl	8007848 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80008c0:	bf00      	nop
 80008c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	58000400 	.word	0x58000400
 80008d0:	58024800 	.word	0x58024800
 80008d4:	58024400 	.word	0x58024400
 80008d8:	000d8002 	.word	0x000d8002

080008dc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	2013      	movs	r0, #19
 80008e6:	f002 fed0 	bl	800368a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80008ea:	2013      	movs	r0, #19
 80008ec:	f002 fee7 	bl	80036be <HAL_NVIC_EnableIRQ>
  /* TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2076      	movs	r0, #118	; 0x76
 80008f6:	f002 fec8 	bl	800368a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80008fa:	2076      	movs	r0, #118	; 0x76
 80008fc:	f002 fedf 	bl	80036be <HAL_NVIC_EnableIRQ>
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]
 800091a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 800091c:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <MX_ADC3_Init+0xdc>)
 800091e:	4a31      	ldr	r2, [pc, #196]	; (80009e4 <MX_ADC3_Init+0xe0>)
 8000920:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <MX_ADC3_Init+0xdc>)
 8000924:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8000928:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <MX_ADC3_Init+0xdc>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000930:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <MX_ADC3_Init+0xdc>)
 8000932:	2201      	movs	r2, #1
 8000934:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <MX_ADC3_Init+0xdc>)
 8000938:	2204      	movs	r2, #4
 800093a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <MX_ADC3_Init+0xdc>)
 800093e:	2200      	movs	r2, #0
 8000940:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000942:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <MX_ADC3_Init+0xdc>)
 8000944:	2201      	movs	r2, #1
 8000946:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 2;
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <MX_ADC3_Init+0xdc>)
 800094a:	2202      	movs	r2, #2
 800094c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <MX_ADC3_Init+0xdc>)
 8000950:	2200      	movs	r2, #0
 8000952:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_ADC3_Init+0xdc>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_ADC3_Init+0xdc>)
 800095c:	2200      	movs	r2, #0
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_ADC3_Init+0xdc>)
 8000962:	2203      	movs	r2, #3
 8000964:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_ADC3_Init+0xdc>)
 8000968:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800096c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_ADC3_Init+0xdc>)
 8000970:	2200      	movs	r2, #0
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_ADC3_Init+0xdc>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800097c:	4818      	ldr	r0, [pc, #96]	; (80009e0 <MX_ADC3_Init+0xdc>)
 800097e:	f001 fab3 	bl	8001ee8 <HAL_ADC_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000988:	f000 fbbe 	bl	8001108 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_ADC3_Init+0xe4>)
 800098e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000990:	2306      	movs	r3, #6
 8000992:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000998:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800099c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800099e:	2304      	movs	r3, #4
 80009a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	4619      	mov	r1, r3
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_ADC3_Init+0xdc>)
 80009ac:	f001 ff4e 	bl	800284c <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 80009b6:	f000 fba7 	bl	8001108 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_ADC3_Init+0xe8>)
 80009bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009be:	230c      	movs	r3, #12
 80009c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_ADC3_Init+0xdc>)
 80009c8:	f001 ff40 	bl	800284c <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 80009d2:	f000 fb99 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3720      	adds	r7, #32
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	24001b5c 	.word	0x24001b5c
 80009e4:	58026000 	.word	0x58026000
 80009e8:	2a000400 	.word	0x2a000400
 80009ec:	14f00020 	.word	0x14f00020

080009f0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_ETH_Init+0x90>)
 80009f6:	4a23      	ldr	r2, [pc, #140]	; (8000a84 <MX_ETH_Init+0x94>)
 80009f8:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_ETH_Init+0x90>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_ETH_Init+0x90>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	3301      	adds	r3, #1
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_ETH_Init+0x90>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	3302      	adds	r3, #2
 8000a12:	22e1      	movs	r2, #225	; 0xe1
 8000a14:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_ETH_Init+0x90>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	3303      	adds	r3, #3
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_ETH_Init+0x90>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	3304      	adds	r3, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_ETH_Init+0x90>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	3305      	adds	r3, #5
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_ETH_Init+0x90>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_ETH_Init+0x90>)
 8000a3c:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_ETH_Init+0x98>)
 8000a3e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_ETH_Init+0x90>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_ETH_Init+0x9c>)
 8000a44:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_ETH_Init+0x90>)
 8000a48:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a4c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <MX_ETH_Init+0x90>)
 8000a50:	f004 ff28 	bl	80058a4 <HAL_ETH_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 fb55 	bl	8001108 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a5e:	2234      	movs	r2, #52	; 0x34
 8000a60:	2100      	movs	r1, #0
 8000a62:	480b      	ldr	r0, [pc, #44]	; (8000a90 <MX_ETH_Init+0xa0>)
 8000a64:	f013 fced 	bl	8014442 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_ETH_Init+0xa0>)
 8000a6a:	2221      	movs	r2, #33	; 0x21
 8000a6c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_ETH_Init+0xa0>)
 8000a70:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a74:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_ETH_Init+0xa0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	24022900 	.word	0x24022900
 8000a84:	40028000 	.word	0x40028000
 8000a88:	24000070 	.word	0x24000070
 8000a8c:	24000010 	.word	0x24000010
 8000a90:	24022970 	.word	0x24022970

08000a94 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a98:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000a9a:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <MX_FDCAN1_Init+0xc4>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ab6:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000abe:	2205      	movs	r2, #5
 8000ac0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000aca:	220d      	movs	r2, #13
 8000acc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000ad6:	2205      	movs	r2, #5
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000ae2:	220d      	movs	r2, #13
 8000ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000b00:	2220      	movs	r2, #32
 8000b02:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000b18:	2220      	movs	r2, #32
 8000b1a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000b1e:	2204      	movs	r2, #4
 8000b20:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 8;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 8;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000b30:	2208      	movs	r2, #8
 8000b32:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000b3c:	2204      	movs	r2, #4
 8000b3e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_FDCAN1_Init+0xc0>)
 8000b42:	f005 fac5 	bl	80060d0 <HAL_FDCAN_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b4c:	f000 fadc 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	24002bfc 	.word	0x24002bfc
 8000b58:	4000a000 	.word	0x4000a000

08000b5c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_SDMMC1_SD_Init+0x44>)
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <MX_SDMMC1_SD_Init+0x48>)
 8000b64:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_SDMMC1_SD_Init+0x44>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_SDMMC1_SD_Init+0x44>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_SDMMC1_SD_Init+0x44>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_SDMMC1_SD_Init+0x44>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_SDMMC1_SD_Init+0x44>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_SDMMC1_SD_Init+0x44>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if(HAL_SD_Init(&hsd1)!=HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_SDMMC1_SD_Init+0x44>)
 8000b8c:	f009 fc7c 	bl	800a488 <HAL_SD_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_SDMMC1_SD_Init+0x3e>
  {Error_Handler();
 8000b96:	f000 fab7 	bl	8001108 <Error_Handler>
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	24000a20 	.word	0x24000a20
 8000ba4:	52007000 	.word	0x52007000

08000ba8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_TIM17_Init+0x44>)
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <MX_TIM17_Init+0x48>)
 8000bb0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 12799;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_TIM17_Init+0x44>)
 8000bb4:	f243 12ff 	movw	r2, #12799	; 0x31ff
 8000bb8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_TIM17_Init+0x44>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 25;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <MX_TIM17_Init+0x44>)
 8000bc2:	2219      	movs	r2, #25
 8000bc4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_TIM17_Init+0x44>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <MX_TIM17_Init+0x44>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_TIM17_Init+0x44>)
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_TIM17_Init+0x44>)
 8000bda:	f00b f80b 	bl	800bbf4 <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000be4:	f000 fa90 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	24000aa0 	.word	0x24000aa0
 8000bf0:	40014800 	.word	0x40014800

08000bf4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000bfa:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <MX_USART3_UART_Init+0x94>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c3e:	f00b fa59 	bl	800c0f4 <HAL_UART_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c48:	f000 fa5e 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c50:	f00d fdc3 	bl	800e7da <HAL_UARTEx_SetTxFifoThreshold>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c5a:	f000 fa55 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c62:	f00d fdf8 	bl	800e856 <HAL_UARTEx_SetRxFifoThreshold>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c6c:	f000 fa4c 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c72:	f00d fd79 	bl	800e768 <HAL_UARTEx_DisableFifoMode>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f000 fa44 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2400058c 	.word	0x2400058c
 8000c88:	40004800 	.word	0x40004800

08000c8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c92:	4a16      	ldr	r2, [pc, #88]	; (8000cec <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c94:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c98:	2209      	movs	r2, #9
 8000c9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000caa:	2202      	movs	r2, #2
 8000cac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd4:	f006 fc35 	bl	8007542 <HAL_PCD_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000cde:	f000 fa13 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	24000618 	.word	0x24000618
 8000cec:	40080000 	.word	0x40080000

08000cf0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <MX_DMA_Init+0x3c>)
 8000cf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cfc:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <MX_DMA_Init+0x3c>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_DMA_Init+0x3c>)
 8000d08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	200b      	movs	r0, #11
 8000d1a:	f002 fcb6 	bl	800368a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d1e:	200b      	movs	r0, #11
 8000d20:	f002 fccd 	bl	80036be <HAL_NVIC_EnableIRQ>

}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	58024400 	.word	0x58024400

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	4b5d      	ldr	r3, [pc, #372]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	4a5b      	ldr	r2, [pc, #364]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d56:	4b59      	ldr	r3, [pc, #356]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
 8000d62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d64:	4b55      	ldr	r3, [pc, #340]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	4a54      	ldr	r2, [pc, #336]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000d6c:	f043 0320 	orr.w	r3, r3, #32
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d74:	4b51      	ldr	r3, [pc, #324]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	f003 0320 	and.w	r3, r3, #32
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d82:	4b4e      	ldr	r3, [pc, #312]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d88:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d92:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da6:	4a45      	ldr	r2, [pc, #276]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db0:	4b42      	ldr	r3, [pc, #264]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b3f      	ldr	r3, [pc, #252]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc4:	4a3d      	ldr	r2, [pc, #244]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dce:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ddc:	4b37      	ldr	r3, [pc, #220]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de2:	4a36      	ldr	r2, [pc, #216]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dec:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfa:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e00:	4a2e      	ldr	r2, [pc, #184]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0a:	4b2c      	ldr	r3, [pc, #176]	; (8000ebc <MX_GPIO_Init+0x18c>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000e1e:	4828      	ldr	r0, [pc, #160]	; (8000ec0 <MX_GPIO_Init+0x190>)
 8000e20:	f006 fb76 	bl	8007510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2140      	movs	r1, #64	; 0x40
 8000e28:	4826      	ldr	r0, [pc, #152]	; (8000ec4 <MX_GPIO_Init+0x194>)
 8000e2a:	f006 fb71 	bl	8007510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e34:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <MX_GPIO_Init+0x198>)
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	4822      	ldr	r0, [pc, #136]	; (8000ecc <MX_GPIO_Init+0x19c>)
 8000e44:	f006 f99c 	bl	8007180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000e48:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <MX_GPIO_Init+0x190>)
 8000e62:	f006 f98d 	bl	8007180 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e66:	2340      	movs	r3, #64	; 0x40
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <MX_GPIO_Init+0x194>)
 8000e7e:	f006 f97f 	bl	8007180 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	4619      	mov	r1, r3
 8000e94:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <MX_GPIO_Init+0x194>)
 8000e96:	f006 f973 	bl	8007180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4807      	ldr	r0, [pc, #28]	; (8000ecc <MX_GPIO_Init+0x19c>)
 8000eae:	f006 f967 	bl	8007180 <HAL_GPIO_Init>

}
 8000eb2:	bf00      	nop
 8000eb4:	3730      	adds	r7, #48	; 0x30
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58020400 	.word	0x58020400
 8000ec4:	58021800 	.word	0x58021800
 8000ec8:	11110000 	.word	0x11110000
 8000ecc:	58020800 	.word	0x58020800

08000ed0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,rxData.Data8u) == HAL_OK){
 8000eda:	4b4a      	ldr	r3, [pc, #296]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000edc:	4a4a      	ldr	r2, [pc, #296]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000ede:	2140      	movs	r1, #64	; 0x40
 8000ee0:	484a      	ldr	r0, [pc, #296]	; (800100c <HAL_FDCAN_RxFifo0Callback+0x13c>)
 8000ee2:	f005 fb03 	bl	80064ec <HAL_FDCAN_GetRxMessage>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f040 8087 	bne.w	8000ffc <HAL_FDCAN_RxFifo0Callback+0x12c>
		if((RxHeader.Identifier>>5) == 0x00){
 8000eee:	4b46      	ldr	r3, [pc, #280]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d12d      	bne.n	8000f54 <HAL_FDCAN_RxFifo0Callback+0x84>
			Dati.ID = (uint8_t)RxHeader.Identifier;
 8000ef8:	4b43      	ldr	r3, [pc, #268]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b44      	ldr	r3, [pc, #272]	; (8001010 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f00:	771a      	strb	r2, [r3, #28]
			Dati.Timer = rxData.Data8u[0] | rxData.Data8u[1]<<8 | rxData.Data8u[2]<<16 | rxData.Data8u[3]<<24;
 8000f02:	4b40      	ldr	r3, [pc, #256]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b3e      	ldr	r3, [pc, #248]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f0a:	785b      	ldrb	r3, [r3, #1]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	4b3c      	ldr	r3, [pc, #240]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f12:	789b      	ldrb	r3, [r3, #2]
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	431a      	orrs	r2, r3
 8000f18:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f1a:	78db      	ldrb	r3, [r3, #3]
 8000f1c:	061b      	lsls	r3, r3, #24
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f24:	619a      	str	r2, [r3, #24]
			Dati.Gir_x = rxData.Data8u[4] | rxData.Data8u[5]<<8;
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	4b35      	ldr	r3, [pc, #212]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f2e:	795b      	ldrb	r3, [r3, #5]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	4b35      	ldr	r3, [pc, #212]	; (8001010 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f3a:	80da      	strh	r2, [r3, #6]
			Dati.Gir_y = rxData.Data8u[6] | rxData.Data8u[7]<<8;
 8000f3c:	4b31      	ldr	r3, [pc, #196]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f3e:	799b      	ldrb	r3, [r3, #6]
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f44:	79db      	ldrb	r3, [r3, #7]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f50:	811a      	strh	r2, [r3, #8]
		else{
			Dati.ID = (uint8_t)RxHeader.Identifier & 0x1F;
			Dati.Pres = rxData.Data8u[0] | rxData.Data8u[1]<<8 | rxData.Data8u[2]<<16 | rxData.Data8u[3]<<24;
		}
	}
}
 8000f52:	e053      	b.n	8000ffc <HAL_FDCAN_RxFifo0Callback+0x12c>
		else if((RxHeader.Identifier>>5) == 0x01){
 8000f54:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	095b      	lsrs	r3, r3, #5
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d134      	bne.n	8000fc8 <HAL_FDCAN_RxFifo0Callback+0xf8>
			Dati.ID = (uint8_t)RxHeader.Identifier & 0x1F;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	f003 031f 	and.w	r3, r3, #31
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f6c:	771a      	strb	r2, [r3, #28]
			Dati.Acc_x = rxData.Data8u[0] | rxData.Data8u[1]<<8;
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f76:	785b      	ldrb	r3, [r3, #1]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f82:	801a      	strh	r2, [r3, #0]
			Dati.Acc_y = rxData.Data8u[2] | rxData.Data8u[3]<<8;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f86:	789b      	ldrb	r3, [r3, #2]
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f8c:	78db      	ldrb	r3, [r3, #3]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f98:	805a      	strh	r2, [r3, #2]
			Dati.Acc_z = rxData.Data8u[4] | rxData.Data8u[5]<<8;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000f9c:	791b      	ldrb	r3, [r3, #4]
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000fa2:	795b      	ldrb	r3, [r3, #5]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000fae:	809a      	strh	r2, [r3, #4]
			Dati.T_b = rxData.Data8u[6] | rxData.Data8u[7]<<8;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000fb2:	799b      	ldrb	r3, [r3, #6]
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000fb8:	79db      	ldrb	r3, [r3, #7]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000fc4:	81da      	strh	r2, [r3, #14]
}
 8000fc6:	e019      	b.n	8000ffc <HAL_FDCAN_RxFifo0Callback+0x12c>
			Dati.ID = (uint8_t)RxHeader.Identifier & 0x1F;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f003 031f 	and.w	r3, r3, #31
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000fd6:	771a      	strb	r2, [r3, #28]
			Dati.Pres = rxData.Data8u[0] | rxData.Data8u[1]<<8 | rxData.Data8u[2]<<16 | rxData.Data8u[3]<<24;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000fe0:	785b      	ldrb	r3, [r3, #1]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000fe8:	789b      	ldrb	r3, [r3, #2]
 8000fea:	041b      	lsls	r3, r3, #16
 8000fec:	431a      	orrs	r2, r3
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000ff0:	78db      	ldrb	r3, [r3, #3]
 8000ff2:	061b      	lsls	r3, r3, #24
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000ffa:	611a      	str	r2, [r3, #16]
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	24000584 	.word	0x24000584
 8001008:	240228d8 	.word	0x240228d8
 800100c:	24002bfc 	.word	0x24002bfc
 8001010:	24002c9c 	.word	0x24002c9c

08001014 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17){ //check if the interrupt comes from TIM17
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0e      	ldr	r2, [pc, #56]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d116      	bne.n	8001054 <HAL_TIM_PeriodElapsedCallback+0x40>
    	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001026:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102a:	480d      	ldr	r0, [pc, #52]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800102c:	f006 fa58 	bl	80074e0 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d10e      	bne.n	8001054 <HAL_TIM_PeriodElapsedCallback+0x40>
    		HAL_TIM_Base_Stop_IT(&htim17);
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001038:	f00a fe32 	bl	800bca0 <HAL_TIM_Base_Stop_IT>
    		//HAL_FDCAN_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
    		res = f_close(&SDFile);
 800103c:	480a      	ldr	r0, [pc, #40]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800103e:	f013 f884 	bl	801414a <f_close>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001048:	701a      	strb	r2, [r3, #0]
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800104a:	2201      	movs	r2, #1
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	4808      	ldr	r0, [pc, #32]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001050:	f006 fa5e 	bl	8007510 <HAL_GPIO_WritePin>
    	}

    }
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40014800 	.word	0x40014800
 8001060:	58020800 	.word	0x58020800
 8001064:	24000aa0 	.word	0x24000aa0
 8001068:	240229b0 	.word	0x240229b0
 800106c:	240228b0 	.word	0x240228b0
 8001070:	58020400 	.word	0x58020400

08001074 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	uint32_t result;
	result=f_write(&SDFile,analogDmaData,ADC_CONVERTED_DATA_BUFFER_SIZE/2, &br);
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800107e:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 8001082:	4906      	ldr	r1, [pc, #24]	; (800109c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001084:	4806      	ldr	r0, [pc, #24]	; (80010a0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001086:	f012 fd68 	bl	8013b5a <f_write>
 800108a:	4603      	mov	r3, r0
 800108c:	60fb      	str	r3, [r7, #12]

}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	24000ae0 	.word	0x24000ae0
 800109c:	24002ce0 	.word	0x24002ce0
 80010a0:	240229b0 	.word	0x240229b0

080010a4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
uint32_t result;
i++;
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80010b4:	6013      	str	r3, [r2, #0]

result=f_write(&SDFile,&analogDmaData[ADC_CONVERTED_DATA_BUFFER_SIZE/2-2],ADC_CONVERTED_DATA_BUFFER_SIZE/2, &br);
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_ADC_ConvCpltCallback+0x50>)
 80010b8:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 80010bc:	490e      	ldr	r1, [pc, #56]	; (80010f8 <HAL_ADC_ConvCpltCallback+0x54>)
 80010be:	480f      	ldr	r0, [pc, #60]	; (80010fc <HAL_ADC_ConvCpltCallback+0x58>)
 80010c0:	f012 fd4b 	bl	8013b5a <f_write>
 80010c4:	4603      	mov	r3, r0
 80010c6:	60fb      	str	r3, [r7, #12]
if(i>=100){res = f_close(&SDFile);
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b63      	cmp	r3, #99	; 0x63
 80010ce:	d90b      	bls.n	80010e8 <HAL_ADC_ConvCpltCallback+0x44>
 80010d0:	480a      	ldr	r0, [pc, #40]	; (80010fc <HAL_ADC_ConvCpltCallback+0x58>)
 80010d2:	f013 f83a 	bl	801414a <f_close>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_ADC_ConvCpltCallback+0x5c>)
 80010dc:	701a      	strb	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);}
 80010de:	2201      	movs	r2, #1
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	4808      	ldr	r0, [pc, #32]	; (8001104 <HAL_ADC_ConvCpltCallback+0x60>)
 80010e4:	f006 fa14 	bl	8007510 <HAL_GPIO_WritePin>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	240000ec 	.word	0x240000ec
 80010f4:	24000ae0 	.word	0x24000ae0
 80010f8:	24012ac4 	.word	0x24012ac4
 80010fc:	240229b0 	.word	0x240229b0
 8001100:	240228b0 	.word	0x240228b0
 8001104:	58020400 	.word	0x58020400

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_MspInit+0x30>)
 8001120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001124:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_MspInit+0x30>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_MspInit+0x30>)
 8001130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	58024400 	.word	0x58024400

0800114c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a41      	ldr	r2, [pc, #260]	; (8001270 <HAL_ADC_MspInit+0x124>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d17c      	bne.n	8001268 <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800116e:	4b41      	ldr	r3, [pc, #260]	; (8001274 <HAL_ADC_MspInit+0x128>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001174:	4a3f      	ldr	r2, [pc, #252]	; (8001274 <HAL_ADC_MspInit+0x128>)
 8001176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <HAL_ADC_MspInit+0x128>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800118c:	4b39      	ldr	r3, [pc, #228]	; (8001274 <HAL_ADC_MspInit+0x128>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001192:	4a38      	ldr	r2, [pc, #224]	; (8001274 <HAL_ADC_MspInit+0x128>)
 8001194:	f043 0320 	orr.w	r3, r3, #32
 8001198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800119c:	4b35      	ldr	r3, [pc, #212]	; (8001274 <HAL_ADC_MspInit+0x128>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a2:	f003 0320 	and.w	r3, r3, #32
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b32      	ldr	r3, [pc, #200]	; (8001274 <HAL_ADC_MspInit+0x128>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b0:	4a30      	ldr	r2, [pc, #192]	; (8001274 <HAL_ADC_MspInit+0x128>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ba:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <HAL_ADC_MspInit+0x128>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration    
    PF3     ------> ADC3_INP5
    PC0     ------> ADC3_INP10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011c8:	2308      	movs	r3, #8
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011cc:	2303      	movs	r3, #3
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	4827      	ldr	r0, [pc, #156]	; (8001278 <HAL_ADC_MspInit+0x12c>)
 80011dc:	f005 ffd0 	bl	8007180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011e0:	2301      	movs	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e4:	2303      	movs	r3, #3
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4822      	ldr	r0, [pc, #136]	; (800127c <HAL_ADC_MspInit+0x130>)
 80011f4:	f005 ffc4 	bl	8007180 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <HAL_ADC_MspInit+0x134>)
 80011fa:	4a22      	ldr	r2, [pc, #136]	; (8001284 <HAL_ADC_MspInit+0x138>)
 80011fc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <HAL_ADC_MspInit+0x134>)
 8001200:	2273      	movs	r2, #115	; 0x73
 8001202:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <HAL_ADC_MspInit+0x134>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_ADC_MspInit+0x134>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_ADC_MspInit+0x134>)
 8001212:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001216:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_ADC_MspInit+0x134>)
 800121a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_ADC_MspInit+0x134>)
 8001222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001226:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_ADC_MspInit+0x134>)
 800122a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_ADC_MspInit+0x134>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_ADC_MspInit+0x134>)
 8001238:	2200      	movs	r2, #0
 800123a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800123c:	4810      	ldr	r0, [pc, #64]	; (8001280 <HAL_ADC_MspInit+0x134>)
 800123e:	f002 fa59 	bl	80036f4 <HAL_DMA_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001248:	f7ff ff5e 	bl	8001108 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <HAL_ADC_MspInit+0x134>)
 8001250:	64da      	str	r2, [r3, #76]	; 0x4c
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <HAL_ADC_MspInit+0x134>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	207f      	movs	r0, #127	; 0x7f
 800125e:	f002 fa14 	bl	800368a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001262:	207f      	movs	r0, #127	; 0x7f
 8001264:	f002 fa2b 	bl	80036be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	58026000 	.word	0x58026000
 8001274:	58024400 	.word	0x58024400
 8001278:	58021400 	.word	0x58021400
 800127c:	58020800 	.word	0x58020800
 8001280:	24000ae4 	.word	0x24000ae4
 8001284:	40020010 	.word	0x40020010

08001288 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08e      	sub	sp, #56	; 0x38
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a59      	ldr	r2, [pc, #356]	; (800140c <HAL_ETH_MspInit+0x184>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	f040 80ab 	bne.w	8001402 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80012ac:	4b58      	ldr	r3, [pc, #352]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012b2:	4a57      	ldr	r2, [pc, #348]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012bc:	4b54      	ldr	r3, [pc, #336]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80012ca:	4b51      	ldr	r3, [pc, #324]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012d0:	4a4f      	ldr	r2, [pc, #316]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012da:	4b4d      	ldr	r3, [pc, #308]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80012e8:	4b49      	ldr	r3, [pc, #292]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ee:	4a48      	ldr	r2, [pc, #288]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012f8:	4b45      	ldr	r3, [pc, #276]	; (8001410 <HAL_ETH_MspInit+0x188>)
 80012fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	4b42      	ldr	r3, [pc, #264]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130c:	4a40      	ldr	r2, [pc, #256]	; (8001410 <HAL_ETH_MspInit+0x188>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001316:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132a:	4a39      	ldr	r2, [pc, #228]	; (8001410 <HAL_ETH_MspInit+0x188>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001348:	4a31      	ldr	r2, [pc, #196]	; (8001410 <HAL_ETH_MspInit+0x188>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001366:	4a2a      	ldr	r2, [pc, #168]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_ETH_MspInit+0x188>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800137e:	2332      	movs	r3, #50	; 0x32
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800138e:	230b      	movs	r3, #11
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	4619      	mov	r1, r3
 8001398:	481e      	ldr	r0, [pc, #120]	; (8001414 <HAL_ETH_MspInit+0x18c>)
 800139a:	f005 fef1 	bl	8007180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800139e:	2386      	movs	r3, #134	; 0x86
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ae:	230b      	movs	r3, #11
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	4619      	mov	r1, r3
 80013b8:	4817      	ldr	r0, [pc, #92]	; (8001418 <HAL_ETH_MspInit+0x190>)
 80013ba:	f005 fee1 	bl	8007180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013d0:	230b      	movs	r3, #11
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	4619      	mov	r1, r3
 80013da:	4810      	ldr	r0, [pc, #64]	; (800141c <HAL_ETH_MspInit+0x194>)
 80013dc:	f005 fed0 	bl	8007180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f2:	230b      	movs	r3, #11
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4808      	ldr	r0, [pc, #32]	; (8001420 <HAL_ETH_MspInit+0x198>)
 80013fe:	f005 febf 	bl	8007180 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3738      	adds	r7, #56	; 0x38
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40028000 	.word	0x40028000
 8001410:	58024400 	.word	0x58024400
 8001414:	58020800 	.word	0x58020800
 8001418:	58020000 	.word	0x58020000
 800141c:	58020400 	.word	0x58020400
 8001420:	58021800 	.word	0x58021800

08001424 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <HAL_FDCAN_MspInit+0x88>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d12d      	bne.n	80014a2 <HAL_FDCAN_MspInit+0x7e>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <HAL_FDCAN_MspInit+0x8c>)
 8001448:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800144c:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <HAL_FDCAN_MspInit+0x8c>)
 800144e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001452:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <HAL_FDCAN_MspInit+0x8c>)
 8001458:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800145c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_FDCAN_MspInit+0x8c>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146a:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <HAL_FDCAN_MspInit+0x8c>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_FDCAN_MspInit+0x8c>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001482:	2303      	movs	r3, #3
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001492:	2309      	movs	r3, #9
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_FDCAN_MspInit+0x90>)
 800149e:	f005 fe6f 	bl	8007180 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	4000a000 	.word	0x4000a000
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58020c00 	.word	0x58020c00

080014b8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a32      	ldr	r2, [pc, #200]	; (80015a0 <HAL_SD_MspInit+0xe8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d15e      	bne.n	8001598 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80014da:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <HAL_SD_MspInit+0xec>)
 80014dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014e0:	4a30      	ldr	r2, [pc, #192]	; (80015a4 <HAL_SD_MspInit+0xec>)
 80014e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <HAL_SD_MspInit+0xec>)
 80014ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <HAL_SD_MspInit+0xec>)
 80014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fe:	4a29      	ldr	r2, [pc, #164]	; (80015a4 <HAL_SD_MspInit+0xec>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001508:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <HAL_SD_MspInit+0xec>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_SD_MspInit+0xec>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151c:	4a21      	ldr	r2, [pc, #132]	; (80015a4 <HAL_SD_MspInit+0xec>)
 800151e:	f043 0308 	orr.w	r3, r3, #8
 8001522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <HAL_SD_MspInit+0xec>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153e:	2301      	movs	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001546:	230c      	movs	r3, #12
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4815      	ldr	r0, [pc, #84]	; (80015a8 <HAL_SD_MspInit+0xf0>)
 8001552:	f005 fe15 	bl	8007180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001568:	230c      	movs	r3, #12
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <HAL_SD_MspInit+0xf0>)
 8001574:	f005 fe04 	bl	8007180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001578:	2304      	movs	r3, #4
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001580:	2301      	movs	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001588:	230c      	movs	r3, #12
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <HAL_SD_MspInit+0xf4>)
 8001594:	f005 fdf4 	bl	8007180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	52007000 	.word	0x52007000
 80015a4:	58024400 	.word	0x58024400
 80015a8:	58020800 	.word	0x58020800
 80015ac:	58020c00 	.word	0x58020c00

080015b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <HAL_TIM_Base_MspInit+0x3c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10e      	bne.n	80015e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_TIM_Base_MspInit+0x40>)
 80015c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015c8:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_TIM_Base_MspInit+0x40>)
 80015ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_TIM_Base_MspInit+0x40>)
 80015d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	40014800 	.word	0x40014800
 80015f0:	58024400 	.word	0x58024400

080015f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1a      	ldr	r2, [pc, #104]	; (800167c <HAL_UART_MspInit+0x88>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d12e      	bne.n	8001674 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_UART_MspInit+0x8c>)
 8001618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800161c:	4a18      	ldr	r2, [pc, #96]	; (8001680 <HAL_UART_MspInit+0x8c>)
 800161e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001622:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_UART_MspInit+0x8c>)
 8001628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800162c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_UART_MspInit+0x8c>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	4a11      	ldr	r2, [pc, #68]	; (8001680 <HAL_UART_MspInit+0x8c>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_UART_MspInit+0x8c>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001652:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001664:	2307      	movs	r3, #7
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_UART_MspInit+0x90>)
 8001670:	f005 fd86 	bl	8007180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40004800 	.word	0x40004800
 8001680:	58024400 	.word	0x58024400
 8001684:	58020c00 	.word	0x58020c00

08001688 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <HAL_PCD_MspInit+0xa4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d13b      	bne.n	8001722 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_PCD_MspInit+0xa8>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b0:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <HAL_PCD_MspInit+0xa8>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <HAL_PCD_MspInit+0xa8>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016c8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80016da:	230a      	movs	r3, #10
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4813      	ldr	r0, [pc, #76]	; (8001734 <HAL_PCD_MspInit+0xac>)
 80016e6:	f005 fd4b 	bl	8007180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	480d      	ldr	r0, [pc, #52]	; (8001734 <HAL_PCD_MspInit+0xac>)
 8001700:	f005 fd3e 	bl	8007180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_PCD_MspInit+0xa8>)
 8001706:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_PCD_MspInit+0xa8>)
 800170c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001710:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_PCD_MspInit+0xa8>)
 8001716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800171a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40080000 	.word	0x40080000
 8001730:	58024400 	.word	0x58024400
 8001734:	58020000 	.word	0x58020000

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <MemManage_Handler+0x4>

08001752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <UsageFault_Handler+0x4>

0800175e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178c:	f000 f928 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}

08001794 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <DMA1_Stream0_IRQHandler+0x10>)
 800179a:	f002 fd71 	bl	8004280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	24000ae4 	.word	0x24000ae4

080017a8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <FDCAN1_IT0_IRQHandler+0x10>)
 80017ae:	f005 f857 	bl	8006860 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	24002bfc 	.word	0x24002bfc

080017bc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <TIM17_IRQHandler+0x10>)
 80017c2:	f00a fa98 	bl	800bcf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	24000aa0 	.word	0x24000aa0

080017d0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <ADC3_IRQHandler+0x10>)
 80017d6:	f000 fdeb 	bl	80023b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	24001b5c 	.word	0x24001b5c

080017e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017e8:	4b29      	ldr	r3, [pc, #164]	; (8001890 <SystemInit+0xac>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	4a28      	ldr	r2, [pc, #160]	; (8001890 <SystemInit+0xac>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <SystemInit+0xb0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a25      	ldr	r2, [pc, #148]	; (8001894 <SystemInit+0xb0>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001804:	4b23      	ldr	r3, [pc, #140]	; (8001894 <SystemInit+0xb0>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <SystemInit+0xb0>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4921      	ldr	r1, [pc, #132]	; (8001894 <SystemInit+0xb0>)
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <SystemInit+0xb4>)
 8001812:	4013      	ands	r3, r2
 8001814:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <SystemInit+0xb0>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <SystemInit+0xb0>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <SystemInit+0xb0>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <SystemInit+0xb0>)
 800182a:	2200      	movs	r2, #0
 800182c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <SystemInit+0xb0>)
 8001830:	2200      	movs	r2, #0
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <SystemInit+0xb0>)
 8001836:	2200      	movs	r2, #0
 8001838:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <SystemInit+0xb0>)
 800183c:	2200      	movs	r2, #0
 800183e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <SystemInit+0xb0>)
 8001842:	2200      	movs	r2, #0
 8001844:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <SystemInit+0xb0>)
 8001848:	2200      	movs	r2, #0
 800184a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <SystemInit+0xb0>)
 800184e:	2200      	movs	r2, #0
 8001850:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <SystemInit+0xb0>)
 8001854:	2200      	movs	r2, #0
 8001856:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <SystemInit+0xb0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <SystemInit+0xb0>)
 800185e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001862:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <SystemInit+0xb0>)
 8001866:	2200      	movs	r2, #0
 8001868:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <SystemInit+0xb8>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <SystemInit+0xbc>)
 8001870:	4013      	ands	r3, r2
 8001872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001876:	d202      	bcs.n	800187e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <SystemInit+0xc0>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SystemInit+0xac>)
 8001880:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001884:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00
 8001894:	58024400 	.word	0x58024400
 8001898:	eaf6ed7f 	.word	0xeaf6ed7f
 800189c:	5c001000 	.word	0x5c001000
 80018a0:	ffff0000 	.word	0xffff0000
 80018a4:	51008108 	.word	0x51008108

080018a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ae:	e003      	b.n	80018b8 <LoopCopyDataInit>

080018b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018b6:	3104      	adds	r1, #4

080018b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018c0:	d3f6      	bcc.n	80018b0 <CopyDataInit>
  ldr  r2, =_sbss
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018c4:	e002      	b.n	80018cc <LoopFillZerobss>

080018c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018c8:	f842 3b04 	str.w	r3, [r2], #4

080018cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018d0:	d3f9      	bcc.n	80018c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018d2:	f7ff ff87 	bl	80017e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d6:	f012 fd85 	bl	80143e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018da:	f7fe fe7d 	bl	80005d8 <main>
  bx  lr    
 80018de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80018e4:	080149b8 	.word	0x080149b8
  ldr  r0, =_sdata
 80018e8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80018ec:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80018f0:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 80018f4:	24024a44 	.word	0x24024a44

080018f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC_IRQHandler>
	...

080018fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001902:	2003      	movs	r0, #3
 8001904:	f001 feb6 	bl	8003674 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001908:	f006 fd3c 	bl	8008384 <HAL_RCC_GetSysClockFreq>
 800190c:	4601      	mov	r1, r0
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_Init+0x68>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	4a13      	ldr	r2, [pc, #76]	; (8001968 <HAL_Init+0x6c>)
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	fa21 f303 	lsr.w	r3, r1, r3
 8001924:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_Init+0x68>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <HAL_Init+0x6c>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
 800193c:	4a0b      	ldr	r2, [pc, #44]	; (800196c <HAL_Init+0x70>)
 800193e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001940:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_Init+0x74>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001946:	2000      	movs	r0, #0
 8001948:	f000 f814 	bl	8001974 <HAL_InitTick>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e002      	b.n	800195c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001956:	f7ff fbdf 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	58024400 	.word	0x58024400
 8001968:	0801452c 	.word	0x0801452c
 800196c:	24000004 	.word	0x24000004
 8001970:	24000000 	.word	0x24000000

08001974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_InitTick+0x60>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e021      	b.n	80019cc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_InitTick+0x64>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_InitTick+0x60>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f001 fe9b 	bl	80036da <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f001 fe65 	bl	800368a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_InitTick+0x68>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2400000c 	.word	0x2400000c
 80019d8:	24000000 	.word	0x24000000
 80019dc:	24000008 	.word	0x24000008

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	2400000c 	.word	0x2400000c
 8001a04:	240229a4 	.word	0x240229a4

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	240229a4 	.word	0x240229a4

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_Delay+0x40>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2400000c 	.word	0x2400000c

08001a64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_GetREVID+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	0c1b      	lsrs	r3, r3, #16
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	5c001000 	.word	0x5c001000

08001a7c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a8c:	4904      	ldr	r1, [pc, #16]	; (8001aa0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	58000400 	.word	0x58000400

08001aa4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	609a      	str	r2, [r3, #8]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b0c:	b490      	push	{r4, r7}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3360      	adds	r3, #96	; 0x60
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	430b      	orrs	r3, r1
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc90      	pop	{r4, r7}
 8001b44:	4770      	bx	lr

08001b46 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	431a      	orrs	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001b78:	b490      	push	{r4, r7}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3360      	adds	r3, #96	; 0x60
 8001b88:	461a      	mov	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	6023      	str	r3, [r4, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc90      	pop	{r4, r7}
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bce:	b490      	push	{r4, r7}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3330      	adds	r3, #48	; 0x30
 8001bde:	461a      	mov	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	4413      	add	r3, r2
 8001bec:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001bee:	6822      	ldr	r2, [r4, #0]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	211f      	movs	r1, #31
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	401a      	ands	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	0e9b      	lsrs	r3, r3, #26
 8001c04:	f003 011f 	and.w	r1, r3, #31
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	4313      	orrs	r3, r2
 8001c14:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc90      	pop	{r4, r7}
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60da      	str	r2, [r3, #12]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c6c:	b490      	push	{r4, r7}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3314      	adds	r3, #20
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	0e5b      	lsrs	r3, r3, #25
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001c8c:	6822      	ldr	r2, [r4, #0]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	0d1b      	lsrs	r3, r3, #20
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	2107      	movs	r1, #7
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	0d1b      	lsrs	r3, r3, #20
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc90      	pop	{r4, r7}
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0318 	and.w	r3, r3, #24
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ce0:	40d9      	lsrs	r1, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cea:	431a      	orrs	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	000fffff 	.word	0x000fffff

08001d04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 031f 	and.w	r3, r3, #31
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6093      	str	r3, [r2, #8]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	5fffffc0 	.word	0x5fffffc0

08001d60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d74:	d101      	bne.n	8001d7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <LL_ADC_EnableInternalRegulator+0x24>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	6fffffc0 	.word	0x6fffffc0

08001db0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dc4:	d101      	bne.n	8001dca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <LL_ADC_Enable+0x24>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	f043 0201 	orr.w	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	7fffffc0 	.word	0x7fffffc0

08001e00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <LL_ADC_Disable+0x24>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	f043 0202 	orr.w	r2, r3, #2
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	7fffffc0 	.word	0x7fffffc0

08001e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <LL_ADC_IsEnabled+0x18>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <LL_ADC_IsEnabled+0x1a>
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d101      	bne.n	8001e66 <LL_ADC_IsDisableOngoing+0x18>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <LL_ADC_IsDisableOngoing+0x1a>
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <LL_ADC_REG_StartConversion+0x24>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	f043 0204 	orr.w	r2, r3, #4
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	7fffffc0 	.word	0x7fffffc0

08001e9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d101      	bne.n	8001eb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d101      	bne.n	8001eda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e18e      	b.n	8002220 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff f91b 	bl	800114c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff19 	bl	8001d60 <LL_ADC_IsDeepPowerDownEnabled>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff feff 	bl	8001d3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff34 	bl	8001db0 <LL_ADC_IsInternalRegulatorEnabled>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d113      	bne.n	8001f76 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff18 	bl	8001d88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f58:	4b9a      	ldr	r3, [pc, #616]	; (80021c4 <HAL_ADC_Init+0x2dc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	4a9a      	ldr	r2, [pc, #616]	; (80021c8 <HAL_ADC_Init+0x2e0>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f68:	e002      	b.n	8001f70 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f9      	bne.n	8001f6a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff18 	bl	8001db0 <LL_ADC_IsInternalRegulatorEnabled>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10d      	bne.n	8001fa2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	f043 0210 	orr.w	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff78 	bl	8001e9c <LL_ADC_REG_IsConversionOngoing>
 8001fac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f040 8129 	bne.w	800220e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 8125 	bne.w	800220e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fcc:	f043 0202 	orr.w	r2, r3, #2
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff25 	bl	8001e28 <LL_ADC_IsEnabled>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d136      	bne.n	8002052 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a78      	ldr	r2, [pc, #480]	; (80021cc <HAL_ADC_Init+0x2e4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d004      	beq.n	8001ff8 <HAL_ADC_Init+0x110>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a77      	ldr	r2, [pc, #476]	; (80021d0 <HAL_ADC_Init+0x2e8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d10e      	bne.n	8002016 <HAL_ADC_Init+0x12e>
 8001ff8:	4874      	ldr	r0, [pc, #464]	; (80021cc <HAL_ADC_Init+0x2e4>)
 8001ffa:	f7ff ff15 	bl	8001e28 <LL_ADC_IsEnabled>
 8001ffe:	4604      	mov	r4, r0
 8002000:	4873      	ldr	r0, [pc, #460]	; (80021d0 <HAL_ADC_Init+0x2e8>)
 8002002:	f7ff ff11 	bl	8001e28 <LL_ADC_IsEnabled>
 8002006:	4603      	mov	r3, r0
 8002008:	4323      	orrs	r3, r4
 800200a:	2b00      	cmp	r3, #0
 800200c:	bf0c      	ite	eq
 800200e:	2301      	moveq	r3, #1
 8002010:	2300      	movne	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	e008      	b.n	8002028 <HAL_ADC_Init+0x140>
 8002016:	486f      	ldr	r0, [pc, #444]	; (80021d4 <HAL_ADC_Init+0x2ec>)
 8002018:	f7ff ff06 	bl	8001e28 <LL_ADC_IsEnabled>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf0c      	ite	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	2300      	movne	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a66      	ldr	r2, [pc, #408]	; (80021cc <HAL_ADC_Init+0x2e4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_ADC_Init+0x158>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a65      	ldr	r2, [pc, #404]	; (80021d0 <HAL_ADC_Init+0x2e8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_ADC_Init+0x15c>
 8002040:	4a65      	ldr	r2, [pc, #404]	; (80021d8 <HAL_ADC_Init+0x2f0>)
 8002042:	e000      	b.n	8002046 <HAL_ADC_Init+0x15e>
 8002044:	4a65      	ldr	r2, [pc, #404]	; (80021dc <HAL_ADC_Init+0x2f4>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4619      	mov	r1, r3
 800204c:	4610      	mov	r0, r2
 800204e:	f7ff fd29 	bl	8001aa4 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002052:	f7ff fd07 	bl	8001a64 <HAL_GetREVID>
 8002056:	4602      	mov	r2, r0
 8002058:	f241 0303 	movw	r3, #4099	; 0x1003
 800205c:	429a      	cmp	r2, r3
 800205e:	d914      	bls.n	800208a <HAL_ADC_Init+0x1a2>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b10      	cmp	r3, #16
 8002066:	d110      	bne.n	800208a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7d5b      	ldrb	r3, [r3, #21]
 800206c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002072:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002078:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7f1b      	ldrb	r3, [r3, #28]
 800207e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002080:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002082:	f043 030c 	orr.w	r3, r3, #12
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	e00d      	b.n	80020a6 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7d5b      	ldrb	r3, [r3, #21]
 800208e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002094:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800209a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7f1b      	ldrb	r3, [r3, #28]
 80020a0:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7f1b      	ldrb	r3, [r3, #28]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d106      	bne.n	80020bc <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	045b      	lsls	r3, r3, #17
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d009      	beq.n	80020d8 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	4b40      	ldr	r3, [pc, #256]	; (80021e0 <HAL_ADC_Init+0x2f8>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	69b9      	ldr	r1, [r7, #24]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fed3 	bl	8001e9c <LL_ADC_REG_IsConversionOngoing>
 80020f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fee0 	bl	8001ec2 <LL_ADC_INJ_IsConversionOngoing>
 8002102:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d14a      	bne.n	80021a0 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d147      	bne.n	80021a0 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7d1b      	ldrb	r3, [r3, #20]
 8002114:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_ADC_Init+0x2fc>)
 8002126:	4013      	ands	r3, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	69b9      	ldr	r1, [r7, #24]
 800212e:	430b      	orrs	r3, r1
 8002130:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002138:	2b01      	cmp	r3, #1
 800213a:	d11b      	bne.n	8002174 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <HAL_ADC_Init+0x300>)
 800214a:	4013      	ands	r3, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002150:	3a01      	subs	r2, #1
 8002152:	0411      	lsls	r1, r2, #16
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002164:	430a      	orrs	r2, r1
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	611a      	str	r2, [r3, #16]
 8002172:	e007      	b.n	8002184 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 ffda 	bl	8003154 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d121      	bne.n	80021ec <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f023 010f 	bic.w	r1, r3, #15
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	1e5a      	subs	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
 80021c0:	e01c      	b.n	80021fc <HAL_ADC_Init+0x314>
 80021c2:	bf00      	nop
 80021c4:	24000000 	.word	0x24000000
 80021c8:	053e2d63 	.word	0x053e2d63
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40022100 	.word	0x40022100
 80021d4:	58026000 	.word	0x58026000
 80021d8:	40022300 	.word	0x40022300
 80021dc:	58026300 	.word	0x58026300
 80021e0:	fff0c003 	.word	0xfff0c003
 80021e4:	ffffbffc 	.word	0xffffbffc
 80021e8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 020f 	bic.w	r2, r2, #15
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	f023 0303 	bic.w	r3, r3, #3
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
 800220c:	e007      	b.n	800221e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	f043 0210 	orr.w	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800221e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3724      	adds	r7, #36	; 0x24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd90      	pop	{r4, r7, pc}

08002228 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a55      	ldr	r2, [pc, #340]	; (8002390 <HAL_ADC_Start_DMA+0x168>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_ADC_Start_DMA+0x20>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a54      	ldr	r2, [pc, #336]	; (8002394 <HAL_ADC_Start_DMA+0x16c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d101      	bne.n	800224c <HAL_ADC_Start_DMA+0x24>
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_ADC_Start_DMA+0x170>)
 800224a:	e000      	b.n	800224e <HAL_ADC_Start_DMA+0x26>
 800224c:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_ADC_Start_DMA+0x174>)
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fd58 	bl	8001d04 <LL_ADC_GetMultimode>
 8002254:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fe1e 	bl	8001e9c <LL_ADC_REG_IsConversionOngoing>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 808c 	bne.w	8002380 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_ADC_Start_DMA+0x4e>
 8002272:	2302      	movs	r3, #2
 8002274:	e087      	b.n	8002386 <HAL_ADC_Start_DMA+0x15e>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b05      	cmp	r3, #5
 8002288:	d002      	beq.n	8002290 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b09      	cmp	r3, #9
 800228e:	d170      	bne.n	8002372 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 fdef 	bl	8002e74 <ADC_Enable>
 8002296:	4603      	mov	r3, r0
 8002298:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800229a:	7dfb      	ldrb	r3, [r7, #23]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d163      	bne.n	8002368 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022a4:	4b3e      	ldr	r3, [pc, #248]	; (80023a0 <HAL_ADC_Start_DMA+0x178>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a37      	ldr	r2, [pc, #220]	; (8002394 <HAL_ADC_Start_DMA+0x16c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d002      	beq.n	80022c0 <HAL_ADC_Start_DMA+0x98>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	e000      	b.n	80022c2 <HAL_ADC_Start_DMA+0x9a>
 80022c0:	4b33      	ldr	r3, [pc, #204]	; (8002390 <HAL_ADC_Start_DMA+0x168>)
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d002      	beq.n	80022d0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	f023 0206 	bic.w	r2, r3, #6
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	659a      	str	r2, [r3, #88]	; 0x58
 80022f4:	e002      	b.n	80022fc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002300:	4a28      	ldr	r2, [pc, #160]	; (80023a4 <HAL_ADC_Start_DMA+0x17c>)
 8002302:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002308:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <HAL_ADC_Start_DMA+0x180>)
 800230a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002310:	4a26      	ldr	r2, [pc, #152]	; (80023ac <HAL_ADC_Start_DMA+0x184>)
 8002312:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	221c      	movs	r2, #28
 800231a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0210 	orr.w	r2, r2, #16
 8002332:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f7ff fc6e 	bl	8001c20 <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3340      	adds	r3, #64	; 0x40
 800234e:	4619      	mov	r1, r3
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f001 fd2a 	bl	8003dac <HAL_DMA_Start_IT>
 8002358:	4603      	mov	r3, r0
 800235a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fd87 	bl	8001e74 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002366:	e00d      	b.n	8002384 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002370:	e008      	b.n	8002384 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800237e:	e001      	b.n	8002384 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002380:	2302      	movs	r3, #2
 8002382:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002384:	7dfb      	ldrb	r3, [r7, #23]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40022000 	.word	0x40022000
 8002394:	40022100 	.word	0x40022100
 8002398:	40022300 	.word	0x40022300
 800239c:	58026300 	.word	0x58026300
 80023a0:	fffff0fe 	.word	0xfffff0fe
 80023a4:	0800302d 	.word	0x0800302d
 80023a8:	08003105 	.word	0x08003105
 80023ac:	08003121 	.word	0x08003121

080023b0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a87      	ldr	r2, [pc, #540]	; (80025f0 <HAL_ADC_IRQHandler+0x240>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_ADC_IRQHandler+0x30>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a86      	ldr	r2, [pc, #536]	; (80025f4 <HAL_ADC_IRQHandler+0x244>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_IRQHandler+0x34>
 80023e0:	4b85      	ldr	r3, [pc, #532]	; (80025f8 <HAL_ADC_IRQHandler+0x248>)
 80023e2:	e000      	b.n	80023e6 <HAL_ADC_IRQHandler+0x36>
 80023e4:	4b85      	ldr	r3, [pc, #532]	; (80025fc <HAL_ADC_IRQHandler+0x24c>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fc8c 	bl	8001d04 <LL_ADC_GetMultimode>
 80023ec:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d017      	beq.n	8002428 <HAL_ADC_IRQHandler+0x78>
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d012      	beq.n	8002428 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f001 f850 	bl	80034c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2202      	movs	r2, #2
 8002426:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <HAL_ADC_IRQHandler+0x8c>
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10a      	bne.n	8002452 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 8083 	beq.w	800254e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d07d      	beq.n	800254e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fb9a 	bl	8001ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d062      	beq.n	8002540 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a5d      	ldr	r2, [pc, #372]	; (80025f4 <HAL_ADC_IRQHandler+0x244>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d002      	beq.n	800248a <HAL_ADC_IRQHandler+0xda>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	e000      	b.n	800248c <HAL_ADC_IRQHandler+0xdc>
 800248a:	4b59      	ldr	r3, [pc, #356]	; (80025f0 <HAL_ADC_IRQHandler+0x240>)
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	4293      	cmp	r3, r2
 8002492:	d008      	beq.n	80024a6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b05      	cmp	r3, #5
 800249e:	d002      	beq.n	80024a6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b09      	cmp	r3, #9
 80024a4:	d104      	bne.n	80024b0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	623b      	str	r3, [r7, #32]
 80024ae:	e00c      	b.n	80024ca <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a4f      	ldr	r2, [pc, #316]	; (80025f4 <HAL_ADC_IRQHandler+0x244>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d002      	beq.n	80024c0 <HAL_ADC_IRQHandler+0x110>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	e000      	b.n	80024c2 <HAL_ADC_IRQHandler+0x112>
 80024c0:	4b4b      	ldr	r3, [pc, #300]	; (80025f0 <HAL_ADC_IRQHandler+0x240>)
 80024c2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d135      	bne.n	8002540 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d12e      	bne.n	8002540 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fcd8 	bl	8001e9c <LL_ADC_REG_IsConversionOngoing>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d11a      	bne.n	8002528 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 020c 	bic.w	r2, r2, #12
 8002500:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d112      	bne.n	8002540 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f043 0201 	orr.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
 8002526:	e00b      	b.n	8002540 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	f043 0210 	orr.w	r2, r3, #16
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7fe fdaf 	bl	80010a4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	220c      	movs	r2, #12
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <HAL_ADC_IRQHandler+0x1b2>
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10b      	bne.n	800257a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a0 	beq.w	80026ae <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 809a 	beq.w	80026ae <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	d105      	bne.n	8002592 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fb55 	bl	8001c46 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800259c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fb00 	bl	8001ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025a8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <HAL_ADC_IRQHandler+0x244>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d002      	beq.n	80025ba <HAL_ADC_IRQHandler+0x20a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	e000      	b.n	80025bc <HAL_ADC_IRQHandler+0x20c>
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_ADC_IRQHandler+0x240>)
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d008      	beq.n	80025d6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b06      	cmp	r3, #6
 80025ce:	d002      	beq.n	80025d6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b07      	cmp	r3, #7
 80025d4:	d104      	bne.n	80025e0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	623b      	str	r3, [r7, #32]
 80025de:	e014      	b.n	800260a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <HAL_ADC_IRQHandler+0x244>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00a      	beq.n	8002600 <HAL_ADC_IRQHandler+0x250>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	e008      	b.n	8002602 <HAL_ADC_IRQHandler+0x252>
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40022100 	.word	0x40022100
 80025f8:	40022300 	.word	0x40022300
 80025fc:	58026300 	.word	0x58026300
 8002600:	4b84      	ldr	r3, [pc, #528]	; (8002814 <HAL_ADC_IRQHandler+0x464>)
 8002602:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10c      	bne.n	800262a <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002616:	2b00      	cmp	r3, #0
 8002618:	d142      	bne.n	80026a0 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d03f      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002626:	2b00      	cmp	r3, #0
 8002628:	d13a      	bne.n	80026a0 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d133      	bne.n	80026a0 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d12e      	bne.n	80026a0 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fc3b 	bl	8001ec2 <LL_ADC_INJ_IsConversionOngoing>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d11a      	bne.n	8002688 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002660:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d112      	bne.n	80026a0 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
 8002686:	e00b      	b.n	80026a0 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268c:	f043 0210 	orr.w	r2, r3, #16
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	f043 0201 	orr.w	r2, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fee5 	bl	8003470 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2260      	movs	r2, #96	; 0x60
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d011      	beq.n	80026dc <HAL_ADC_IRQHandler+0x32c>
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00c      	beq.n	80026dc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f8a8 	bl	8002824 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d012      	beq.n	800270c <HAL_ADC_IRQHandler+0x35c>
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fecb 	bl	8003498 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800270a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002712:	2b00      	cmp	r3, #0
 8002714:	d012      	beq.n	800273c <HAL_ADC_IRQHandler+0x38c>
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00d      	beq.n	800273c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 febd 	bl	80034ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d043      	beq.n	80027ce <HAL_ADC_IRQHandler+0x41e>
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b00      	cmp	r3, #0
 800274e:	d03e      	beq.n	80027ce <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002758:	2301      	movs	r3, #1
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
 800275c:	e021      	b.n	80027a2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2a      	ldr	r2, [pc, #168]	; (8002814 <HAL_ADC_IRQHandler+0x464>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_ADC_IRQHandler+0x3c8>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a29      	ldr	r2, [pc, #164]	; (8002818 <HAL_ADC_IRQHandler+0x468>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d101      	bne.n	800277c <HAL_ADC_IRQHandler+0x3cc>
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <HAL_ADC_IRQHandler+0x46c>)
 800277a:	e000      	b.n	800277e <HAL_ADC_IRQHandler+0x3ce>
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <HAL_ADC_IRQHandler+0x470>)
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff face 	bl	8001d20 <LL_ADC_GetMultiDMATransfer>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800278a:	2301      	movs	r3, #1
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
 800278e:	e008      	b.n	80027a2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_ADC_IRQHandler+0x3f2>
      {
        overrun_error = 1UL;
 800279e:	2301      	movs	r3, #1
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      }
    }

    if (overrun_error == 1UL)
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d10e      	bne.n	80027c6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	f043 0202 	orr.w	r2, r3, #2
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f839 	bl	8002838 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2210      	movs	r2, #16
 80027cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d018      	beq.n	800280a <HAL_ADC_IRQHandler+0x45a>
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d013      	beq.n	800280a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	f043 0208 	orr.w	r2, r3, #8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002802:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fe3d 	bl	8003484 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800280a:	bf00      	nop
 800280c:	3728      	adds	r7, #40	; 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40022000 	.word	0x40022000
 8002818:	40022100 	.word	0x40022100
 800281c:	40022300 	.word	0x40022300
 8002820:	58026300 	.word	0x58026300

08002824 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b099      	sub	sp, #100	; 0x64
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4a99      	ldr	r2, [pc, #612]	; (8002acc <HAL_ADC_ConfigChannel+0x280>)
 8002866:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x2a>
 8002872:	2302      	movs	r3, #2
 8002874:	e2e6      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x5f8>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fb0a 	bl	8001e9c <LL_ADC_REG_IsConversionOngoing>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 82cb 	bne.w	8002e26 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002898:	2b00      	cmp	r3, #0
 800289a:	d108      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x62>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2201      	movs	r2, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	e00f      	b.n	80028ce <HAL_ADC_ConfigChannel+0x82>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2201      	movs	r2, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	69d1      	ldr	r1, [r2, #28]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	430b      	orrs	r3, r1
 80028da:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	f7ff f970 	bl	8001bce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fad2 	bl	8001e9c <LL_ADC_REG_IsConversionOngoing>
 80028f8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fadf 	bl	8001ec2 <LL_ADC_INJ_IsConversionOngoing>
 8002904:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 80b3 	bne.w	8002a74 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800290e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002910:	2b00      	cmp	r3, #0
 8002912:	f040 80af 	bne.w	8002a74 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6819      	ldr	r1, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	461a      	mov	r2, r3
 8002924:	f7ff f9a2 	bl	8001c6c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002928:	4b69      	ldr	r3, [pc, #420]	; (8002ad0 <HAL_ADC_ConfigChannel+0x284>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002934:	d10b      	bne.n	800294e <HAL_ADC_ConfigChannel+0x102>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	e01d      	b.n	800298a <HAL_ADC_ConfigChannel+0x13e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10b      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x128>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	e00a      	b.n	800298a <HAL_ADC_ConfigChannel+0x13e>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b04      	cmp	r3, #4
 8002992:	d027      	beq.n	80029e4 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6919      	ldr	r1, [r3, #16]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a2:	f7ff f8b3 	bl	8001b0c <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6919      	ldr	r1, [r3, #16]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	7e5b      	ldrb	r3, [r3, #25]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d102      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x170>
 80029b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80029ba:	e000      	b.n	80029be <HAL_ADC_ConfigChannel+0x172>
 80029bc:	2300      	movs	r3, #0
 80029be:	461a      	mov	r2, r3
 80029c0:	f7ff f8da 	bl	8001b78 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6919      	ldr	r1, [r3, #16]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	7e1b      	ldrb	r3, [r3, #24]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d102      	bne.n	80029da <HAL_ADC_ConfigChannel+0x18e>
 80029d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029d8:	e000      	b.n	80029dc <HAL_ADC_ConfigChannel+0x190>
 80029da:	2300      	movs	r3, #0
 80029dc:	461a      	mov	r2, r3
 80029de:	f7ff f8b2 	bl	8001b46 <LL_ADC_SetDataRightShift>
 80029e2:	e047      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	069b      	lsls	r3, r3, #26
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d107      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a06:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	069b      	lsls	r3, r3, #26
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d107      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a2a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	069b      	lsls	r3, r3, #26
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d107      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a4e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	069b      	lsls	r3, r3, #26
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d107      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a72:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff f9d5 	bl	8001e28 <LL_ADC_IsEnabled>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f040 81d9 	bne.w	8002e38 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	461a      	mov	r2, r3
 8002a94:	f7ff f912 	bl	8001cbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a0b      	ldr	r2, [pc, #44]	; (8002acc <HAL_ADC_ConfigChannel+0x280>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	f040 8101 	bne.w	8002ca6 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10f      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x288>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	3301      	adds	r3, #1
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	bf94      	ite	ls
 8002ac4:	2301      	movls	r3, #1
 8002ac6:	2300      	movhi	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	e016      	b.n	8002afa <HAL_ADC_ConfigChannel+0x2ae>
 8002acc:	47ff0000 	.word	0x47ff0000
 8002ad0:	5c001000 	.word	0x5c001000
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	3301      	adds	r3, #1
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	2b09      	cmp	r3, #9
 8002af2:	bf94      	ite	ls
 8002af4:	2301      	movls	r3, #1
 8002af6:	2300      	movhi	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d064      	beq.n	8002bc8 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d107      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x2ce>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	0e9b      	lsrs	r3, r3, #26
 8002b10:	3301      	adds	r3, #1
 8002b12:	069b      	lsls	r3, r3, #26
 8002b14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b18:	e00e      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x2ec>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	069b      	lsls	r3, r3, #26
 8002b34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d109      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x30c>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0e9b      	lsrs	r3, r3, #26
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	e010      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x32e>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2101      	movs	r1, #1
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	ea42 0103 	orr.w	r1, r2, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x354>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 021f 	and.w	r2, r3, #31
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	051b      	lsls	r3, r3, #20
 8002b9e:	e011      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x378>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	e069      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d107      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x398>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	0e9b      	lsrs	r3, r3, #26
 8002bda:	3301      	adds	r3, #1
 8002bdc:	069b      	lsls	r3, r3, #26
 8002bde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be2:	e00e      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x3b6>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	61fb      	str	r3, [r7, #28]
  return result;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	069b      	lsls	r3, r3, #26
 8002bfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x3d6>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0e9b      	lsrs	r3, r3, #26
 8002c14:	3301      	adds	r3, #1
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	e010      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x3f8>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	617b      	str	r3, [r7, #20]
  return result;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	ea42 0103 	orr.w	r1, r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10d      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x424>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	0e9b      	lsrs	r3, r3, #26
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	3b1e      	subs	r3, #30
 8002c68:	051b      	lsls	r3, r3, #20
 8002c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	e014      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x44e>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	60fb      	str	r3, [r7, #12]
  return result;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f003 021f 	and.w	r2, r3, #31
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	3b1e      	subs	r3, #30
 8002c94:	051b      	lsls	r3, r3, #20
 8002c96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	6892      	ldr	r2, [r2, #8]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f7fe ffe3 	bl	8001c6c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f280 80c4 	bge.w	8002e38 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a65      	ldr	r2, [pc, #404]	; (8002e4c <HAL_ADC_ConfigChannel+0x600>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_ADC_ConfigChannel+0x478>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a64      	ldr	r2, [pc, #400]	; (8002e50 <HAL_ADC_ConfigChannel+0x604>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d101      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x47c>
 8002cc4:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <HAL_ADC_ConfigChannel+0x608>)
 8002cc6:	e000      	b.n	8002cca <HAL_ADC_ConfigChannel+0x47e>
 8002cc8:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <HAL_ADC_ConfigChannel+0x60c>)
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe ff10 	bl	8001af0 <LL_ADC_GetCommonPathInternalCh>
 8002cd0:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a5d      	ldr	r2, [pc, #372]	; (8002e4c <HAL_ADC_ConfigChannel+0x600>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_ADC_ConfigChannel+0x49a>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a5b      	ldr	r2, [pc, #364]	; (8002e50 <HAL_ADC_ConfigChannel+0x604>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10e      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x4b8>
 8002ce6:	4859      	ldr	r0, [pc, #356]	; (8002e4c <HAL_ADC_ConfigChannel+0x600>)
 8002ce8:	f7ff f89e 	bl	8001e28 <LL_ADC_IsEnabled>
 8002cec:	4604      	mov	r4, r0
 8002cee:	4858      	ldr	r0, [pc, #352]	; (8002e50 <HAL_ADC_ConfigChannel+0x604>)
 8002cf0:	f7ff f89a 	bl	8001e28 <LL_ADC_IsEnabled>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4323      	orrs	r3, r4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e008      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x4ca>
 8002d04:	4855      	ldr	r0, [pc, #340]	; (8002e5c <HAL_ADC_ConfigChannel+0x610>)
 8002d06:	f7ff f88f 	bl	8001e28 <LL_ADC_IsEnabled>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d07b      	beq.n	8002e12 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a50      	ldr	r2, [pc, #320]	; (8002e60 <HAL_ADC_ConfigChannel+0x614>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d12e      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x536>
 8002d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d129      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a4a      	ldr	r2, [pc, #296]	; (8002e5c <HAL_ADC_ConfigChannel+0x610>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d17f      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a43      	ldr	r2, [pc, #268]	; (8002e4c <HAL_ADC_ConfigChannel+0x600>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_ADC_ConfigChannel+0x500>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a42      	ldr	r2, [pc, #264]	; (8002e50 <HAL_ADC_ConfigChannel+0x604>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x504>
 8002d4c:	4a41      	ldr	r2, [pc, #260]	; (8002e54 <HAL_ADC_ConfigChannel+0x608>)
 8002d4e:	e000      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x506>
 8002d50:	4a41      	ldr	r2, [pc, #260]	; (8002e58 <HAL_ADC_ConfigChannel+0x60c>)
 8002d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	f7fe feb5 	bl	8001aca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d60:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <HAL_ADC_ConfigChannel+0x618>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <HAL_ADC_ConfigChannel+0x61c>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	099b      	lsrs	r3, r3, #6
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002d72:	e002      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f9      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d80:	e05a      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a39      	ldr	r2, [pc, #228]	; (8002e6c <HAL_ADC_ConfigChannel+0x620>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d11e      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x57e>
 8002d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d119      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a30      	ldr	r2, [pc, #192]	; (8002e5c <HAL_ADC_ConfigChannel+0x610>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d14b      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a29      	ldr	r2, [pc, #164]	; (8002e4c <HAL_ADC_ConfigChannel+0x600>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_ADC_ConfigChannel+0x568>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a28      	ldr	r2, [pc, #160]	; (8002e50 <HAL_ADC_ConfigChannel+0x604>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x56c>
 8002db4:	4a27      	ldr	r2, [pc, #156]	; (8002e54 <HAL_ADC_ConfigChannel+0x608>)
 8002db6:	e000      	b.n	8002dba <HAL_ADC_ConfigChannel+0x56e>
 8002db8:	4a27      	ldr	r2, [pc, #156]	; (8002e58 <HAL_ADC_ConfigChannel+0x60c>)
 8002dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f7fe fe81 	bl	8001aca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dc8:	e036      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a28      	ldr	r2, [pc, #160]	; (8002e70 <HAL_ADC_ConfigChannel+0x624>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d131      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x5ec>
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d12c      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1e      	ldr	r2, [pc, #120]	; (8002e5c <HAL_ADC_ConfigChannel+0x610>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d127      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a17      	ldr	r2, [pc, #92]	; (8002e4c <HAL_ADC_ConfigChannel+0x600>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_ADC_ConfigChannel+0x5b0>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a16      	ldr	r2, [pc, #88]	; (8002e50 <HAL_ADC_ConfigChannel+0x604>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x5b4>
 8002dfc:	4a15      	ldr	r2, [pc, #84]	; (8002e54 <HAL_ADC_ConfigChannel+0x608>)
 8002dfe:	e000      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x5b6>
 8002e00:	4a15      	ldr	r2, [pc, #84]	; (8002e58 <HAL_ADC_ConfigChannel+0x60c>)
 8002e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f7fe fe5d 	bl	8001aca <LL_ADC_SetCommonPathInternalCh>
 8002e10:	e012      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002e24:	e008      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2a:	f043 0220 	orr.w	r2, r3, #32
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3764      	adds	r7, #100	; 0x64
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd90      	pop	{r4, r7, pc}
 8002e4c:	40022000 	.word	0x40022000
 8002e50:	40022100 	.word	0x40022100
 8002e54:	40022300 	.word	0x40022300
 8002e58:	58026300 	.word	0x58026300
 8002e5c:	58026000 	.word	0x58026000
 8002e60:	cb840000 	.word	0xcb840000
 8002e64:	24000000 	.word	0x24000000
 8002e68:	053e2d63 	.word	0x053e2d63
 8002e6c:	c7520000 	.word	0xc7520000
 8002e70:	cfb80000 	.word	0xcfb80000

08002e74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe ffd1 	bl	8001e28 <LL_ADC_IsEnabled>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d167      	bne.n	8002f5c <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	4b35      	ldr	r3, [pc, #212]	; (8002f68 <ADC_Enable+0xf4>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00d      	beq.n	8002eb6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	f043 0210 	orr.w	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eaa:	f043 0201 	orr.w	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e053      	b.n	8002f5e <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe ff8c 	bl	8001dd8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ec0:	f7fe fda2 	bl	8001a08 <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a28      	ldr	r2, [pc, #160]	; (8002f6c <ADC_Enable+0xf8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <ADC_Enable+0x66>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <ADC_Enable+0xfc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <ADC_Enable+0x6a>
 8002eda:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <ADC_Enable+0x100>)
 8002edc:	e000      	b.n	8002ee0 <ADC_Enable+0x6c>
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <ADC_Enable+0x104>)
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe ff0f 	bl	8001d04 <LL_ADC_GetMultimode>
 8002ee6:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a20      	ldr	r2, [pc, #128]	; (8002f70 <ADC_Enable+0xfc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d002      	beq.n	8002ef8 <ADC_Enable+0x84>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	e000      	b.n	8002efa <ADC_Enable+0x86>
 8002ef8:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <ADC_Enable+0xf8>)
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d025      	beq.n	8002f4e <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d129      	bne.n	8002f5c <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f08:	e021      	b.n	8002f4e <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe ff8a 	bl	8001e28 <LL_ADC_IsEnabled>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe ff5a 	bl	8001dd8 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f24:	f7fe fd70 	bl	8001a08 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d90d      	bls.n	8002f4e <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	f043 0210 	orr.w	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	f043 0201 	orr.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e007      	b.n	8002f5e <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d1d6      	bne.n	8002f0a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	8000003f 	.word	0x8000003f
 8002f6c:	40022000 	.word	0x40022000
 8002f70:	40022100 	.word	0x40022100
 8002f74:	40022300 	.word	0x40022300
 8002f78:	58026300 	.word	0x58026300

08002f7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe ff60 	bl	8001e4e <LL_ADC_IsDisableOngoing>
 8002f8e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe ff47 	bl	8001e28 <LL_ADC_IsEnabled>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d040      	beq.n	8003022 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d13d      	bne.n	8003022 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030d 	and.w	r3, r3, #13
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d10c      	bne.n	8002fce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe ff21 	bl	8001e00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fc6:	f7fe fd1f 	bl	8001a08 <HAL_GetTick>
 8002fca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fcc:	e022      	b.n	8003014 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	f043 0210 	orr.w	r2, r3, #16
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	f043 0201 	orr.w	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e01c      	b.n	8003024 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fea:	f7fe fd0d 	bl	8001a08 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d90d      	bls.n	8003014 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f043 0210 	orr.w	r2, r3, #16
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e007      	b.n	8003024 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e3      	bne.n	8002fea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003042:	2b00      	cmp	r3, #0
 8003044:	d14b      	bne.n	80030de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d021      	beq.n	80030a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fd9f 	bl	8001ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d032      	beq.n	80030d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d12b      	bne.n	80030d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d11f      	bne.n	80030d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54
 80030a2:	e018      	b.n	80030d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d111      	bne.n	80030d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f043 0201 	orr.w	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f7fd ffe4 	bl	80010a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030dc:	e00e      	b.n	80030fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7ff fba4 	bl	8002838 <HAL_ADC_ErrorCallback>
}
 80030f0:	e004      	b.n	80030fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
}
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7fd ffae 	bl	8001074 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003132:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff fb76 	bl	8002838 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a70      	ldr	r2, [pc, #448]	; (8003324 <ADC_ConfigureBoostMode+0x1d0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d004      	beq.n	8003170 <ADC_ConfigureBoostMode+0x1c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6f      	ldr	r2, [pc, #444]	; (8003328 <ADC_ConfigureBoostMode+0x1d4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d109      	bne.n	8003184 <ADC_ConfigureBoostMode+0x30>
 8003170:	4b6e      	ldr	r3, [pc, #440]	; (800332c <ADC_ConfigureBoostMode+0x1d8>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf14      	ite	ne
 800317c:	2301      	movne	r3, #1
 800317e:	2300      	moveq	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e008      	b.n	8003196 <ADC_ConfigureBoostMode+0x42>
 8003184:	4b6a      	ldr	r3, [pc, #424]	; (8003330 <ADC_ConfigureBoostMode+0x1dc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf14      	ite	ne
 8003190:	2301      	movne	r3, #1
 8003192:	2300      	moveq	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d01a      	beq.n	80031d0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800319a:	f005 fa65 	bl	8008668 <HAL_RCC_GetHCLKFreq>
 800319e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031a8:	d006      	beq.n	80031b8 <ADC_ConfigureBoostMode+0x64>
 80031aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031ae:	d00b      	beq.n	80031c8 <ADC_ConfigureBoostMode+0x74>
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b4:	d000      	beq.n	80031b8 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80031b6:	e05d      	b.n	8003274 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	60fb      	str	r3, [r7, #12]
        break;
 80031c6:	e055      	b.n	8003274 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	60fb      	str	r3, [r7, #12]
        break;
 80031ce:	e051      	b.n	8003274 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80031d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80031d4:	f006 f982 	bl	80094dc <HAL_RCCEx_GetPeriphCLKFreq>
 80031d8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031e2:	d02a      	beq.n	800323a <ADC_ConfigureBoostMode+0xe6>
 80031e4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031e8:	d813      	bhi.n	8003212 <ADC_ConfigureBoostMode+0xbe>
 80031ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031ee:	d024      	beq.n	800323a <ADC_ConfigureBoostMode+0xe6>
 80031f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031f4:	d806      	bhi.n	8003204 <ADC_ConfigureBoostMode+0xb0>
 80031f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031fa:	d01e      	beq.n	800323a <ADC_ConfigureBoostMode+0xe6>
 80031fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003200:	d01b      	beq.n	800323a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8003202:	e037      	b.n	8003274 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003208:	d017      	beq.n	800323a <ADC_ConfigureBoostMode+0xe6>
 800320a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800320e:	d014      	beq.n	800323a <ADC_ConfigureBoostMode+0xe6>
        break;
 8003210:	e030      	b.n	8003274 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003212:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003216:	d021      	beq.n	800325c <ADC_ConfigureBoostMode+0x108>
 8003218:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800321c:	d806      	bhi.n	800322c <ADC_ConfigureBoostMode+0xd8>
 800321e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003222:	d013      	beq.n	800324c <ADC_ConfigureBoostMode+0xf8>
 8003224:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003228:	d014      	beq.n	8003254 <ADC_ConfigureBoostMode+0x100>
        break;
 800322a:	e023      	b.n	8003274 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800322c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003230:	d018      	beq.n	8003264 <ADC_ConfigureBoostMode+0x110>
 8003232:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003236:	d019      	beq.n	800326c <ADC_ConfigureBoostMode+0x118>
        break;
 8003238:	e01c      	b.n	8003274 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	0c9b      	lsrs	r3, r3, #18
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	60fb      	str	r3, [r7, #12]
        break;
 800324a:	e013      	b.n	8003274 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	60fb      	str	r3, [r7, #12]
      break;
 8003252:	e00f      	b.n	8003274 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	60fb      	str	r3, [r7, #12]
        break;
 800325a:	e00b      	b.n	8003274 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	099b      	lsrs	r3, r3, #6
 8003260:	60fb      	str	r3, [r7, #12]
        break;
 8003262:	e007      	b.n	8003274 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	09db      	lsrs	r3, r3, #7
 8003268:	60fb      	str	r3, [r7, #12]
        break;
 800326a:	e003      	b.n	8003274 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	60fb      	str	r3, [r7, #12]
        break;
 8003272:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003274:	f7fe fbf6 	bl	8001a64 <HAL_GetREVID>
 8003278:	4602      	mov	r2, r0
 800327a:	f241 0303 	movw	r3, #4099	; 0x1003
 800327e:	429a      	cmp	r2, r3
 8003280:	d815      	bhi.n	80032ae <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a2b      	ldr	r2, [pc, #172]	; (8003334 <ADC_ConfigureBoostMode+0x1e0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d908      	bls.n	800329c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003298:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800329a:	e03e      	b.n	800331a <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	e035      	b.n	800331a <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a20      	ldr	r2, [pc, #128]	; (8003338 <ADC_ConfigureBoostMode+0x1e4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d808      	bhi.n	80032ce <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032ca:	609a      	str	r2, [r3, #8]
}
 80032cc:	e025      	b.n	800331a <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a1a      	ldr	r2, [pc, #104]	; (800333c <ADC_ConfigureBoostMode+0x1e8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d80a      	bhi.n	80032ec <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e8:	609a      	str	r2, [r3, #8]
}
 80032ea:	e016      	b.n	800331a <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a14      	ldr	r2, [pc, #80]	; (8003340 <ADC_ConfigureBoostMode+0x1ec>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d80a      	bhi.n	800330a <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003306:	609a      	str	r2, [r3, #8]
}
 8003308:	e007      	b.n	800331a <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003318:	609a      	str	r2, [r3, #8]
}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40022000 	.word	0x40022000
 8003328:	40022100 	.word	0x40022100
 800332c:	40022300 	.word	0x40022300
 8003330:	58026300 	.word	0x58026300
 8003334:	01312d00 	.word	0x01312d00
 8003338:	005f5e10 	.word	0x005f5e10
 800333c:	00bebc20 	.word	0x00bebc20
 8003340:	017d7840 	.word	0x017d7840

08003344 <LL_ADC_StartCalibration>:
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <LL_ADC_StartCalibration+0x38>)
 8003356:	4013      	ands	r3, r2
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003364:	430a      	orrs	r2, r1
 8003366:	4313      	orrs	r3, r2
 8003368:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	609a      	str	r2, [r3, #8]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	3ffeffc0 	.word	0x3ffeffc0

08003380 <LL_ADC_IsCalibrationOnGoing>:
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003394:	d101      	bne.n	800339a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_ADCEx_Calibration_Start+0x1e>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e04c      	b.n	8003460 <HAL_ADCEx_Calibration_Start+0xb8>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f7ff fdd4 	bl	8002f7c <ADC_Disable>
 80033d4:	4603      	mov	r3, r0
 80033d6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d135      	bne.n	800344a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033e2:	4b21      	ldr	r3, [pc, #132]	; (8003468 <HAL_ADCEx_Calibration_Start+0xc0>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	f043 0202 	orr.w	r2, r3, #2
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff ffa4 	bl	8003344 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033fc:	e014      	b.n	8003428 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	3301      	adds	r3, #1
 8003402:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4a19      	ldr	r2, [pc, #100]	; (800346c <HAL_ADCEx_Calibration_Start+0xc4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d90d      	bls.n	8003428 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003410:	f023 0312 	bic.w	r3, r3, #18
 8003414:	f043 0210 	orr.w	r2, r3, #16
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e01b      	b.n	8003460 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ffa7 	bl	8003380 <LL_ADC_IsCalibrationOnGoing>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e2      	bne.n	80033fe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f023 0303 	bic.w	r3, r3, #3
 8003440:	f043 0201 	orr.w	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	655a      	str	r2, [r3, #84]	; 0x54
 8003448:	e005      	b.n	8003456 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344e:	f043 0210 	orr.w	r2, r3, #16
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800345e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	ffffeefd 	.word	0xffffeefd
 800346c:	25c3f7ff 	.word	0x25c3f7ff

08003470 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <__NVIC_SetPriorityGrouping+0x40>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f0:	4013      	ands	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003502:	4a04      	ldr	r2, [pc, #16]	; (8003514 <__NVIC_SetPriorityGrouping+0x40>)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	60d3      	str	r3, [r2, #12]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000ed00 	.word	0xe000ed00
 8003518:	05fa0000 	.word	0x05fa0000

0800351c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <__NVIC_GetPriorityGrouping+0x18>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	f003 0307 	and.w	r3, r3, #7
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003546:	2b00      	cmp	r3, #0
 8003548:	db0b      	blt.n	8003562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	f003 021f 	and.w	r2, r3, #31
 8003550:	4907      	ldr	r1, [pc, #28]	; (8003570 <__NVIC_EnableIRQ+0x38>)
 8003552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	2001      	movs	r0, #1
 800355a:	fa00 f202 	lsl.w	r2, r0, r2
 800355e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000e100 	.word	0xe000e100

08003574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	6039      	str	r1, [r7, #0]
 800357e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003584:	2b00      	cmp	r3, #0
 8003586:	db0a      	blt.n	800359e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	b2da      	uxtb	r2, r3
 800358c:	490c      	ldr	r1, [pc, #48]	; (80035c0 <__NVIC_SetPriority+0x4c>)
 800358e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003592:	0112      	lsls	r2, r2, #4
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	440b      	add	r3, r1
 8003598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800359c:	e00a      	b.n	80035b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	4908      	ldr	r1, [pc, #32]	; (80035c4 <__NVIC_SetPriority+0x50>)
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	3b04      	subs	r3, #4
 80035ac:	0112      	lsls	r2, r2, #4
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	440b      	add	r3, r1
 80035b2:	761a      	strb	r2, [r3, #24]
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000e100 	.word	0xe000e100
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b089      	sub	sp, #36	; 0x24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f1c3 0307 	rsb	r3, r3, #7
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	bf28      	it	cs
 80035e6:	2304      	movcs	r3, #4
 80035e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3304      	adds	r3, #4
 80035ee:	2b06      	cmp	r3, #6
 80035f0:	d902      	bls.n	80035f8 <NVIC_EncodePriority+0x30>
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3b03      	subs	r3, #3
 80035f6:	e000      	b.n	80035fa <NVIC_EncodePriority+0x32>
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43da      	mvns	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	401a      	ands	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003610:	f04f 31ff 	mov.w	r1, #4294967295
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	fa01 f303 	lsl.w	r3, r1, r3
 800361a:	43d9      	mvns	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003620:	4313      	orrs	r3, r2
         );
}
 8003622:	4618      	mov	r0, r3
 8003624:	3724      	adds	r7, #36	; 0x24
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3b01      	subs	r3, #1
 800363c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003640:	d301      	bcc.n	8003646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003642:	2301      	movs	r3, #1
 8003644:	e00f      	b.n	8003666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003646:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <SysTick_Config+0x40>)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3b01      	subs	r3, #1
 800364c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800364e:	210f      	movs	r1, #15
 8003650:	f04f 30ff 	mov.w	r0, #4294967295
 8003654:	f7ff ff8e 	bl	8003574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <SysTick_Config+0x40>)
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800365e:	4b04      	ldr	r3, [pc, #16]	; (8003670 <SysTick_Config+0x40>)
 8003660:	2207      	movs	r2, #7
 8003662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	e000e010 	.word	0xe000e010

08003674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ff29 	bl	80034d4 <__NVIC_SetPriorityGrouping>
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af00      	add	r7, sp, #0
 8003690:	4603      	mov	r3, r0
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003698:	f7ff ff40 	bl	800351c <__NVIC_GetPriorityGrouping>
 800369c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	6978      	ldr	r0, [r7, #20]
 80036a4:	f7ff ff90 	bl	80035c8 <NVIC_EncodePriority>
 80036a8:	4602      	mov	r2, r0
 80036aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff5f 	bl	8003574 <__NVIC_SetPriority>
}
 80036b6:	bf00      	nop
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ff33 	bl	8003538 <__NVIC_EnableIRQ>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ffa4 	bl	8003630 <SysTick_Config>
 80036e8:	4603      	mov	r3, r0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80036fc:	f7fe f984 	bl	8001a08 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e316      	b.n	8003d3a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a66      	ldr	r2, [pc, #408]	; (80038ac <HAL_DMA_Init+0x1b8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d04a      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a65      	ldr	r2, [pc, #404]	; (80038b0 <HAL_DMA_Init+0x1bc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d045      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a63      	ldr	r2, [pc, #396]	; (80038b4 <HAL_DMA_Init+0x1c0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d040      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a62      	ldr	r2, [pc, #392]	; (80038b8 <HAL_DMA_Init+0x1c4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d03b      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a60      	ldr	r2, [pc, #384]	; (80038bc <HAL_DMA_Init+0x1c8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d036      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a5f      	ldr	r2, [pc, #380]	; (80038c0 <HAL_DMA_Init+0x1cc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d031      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a5d      	ldr	r2, [pc, #372]	; (80038c4 <HAL_DMA_Init+0x1d0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d02c      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a5c      	ldr	r2, [pc, #368]	; (80038c8 <HAL_DMA_Init+0x1d4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d027      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a5a      	ldr	r2, [pc, #360]	; (80038cc <HAL_DMA_Init+0x1d8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d022      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a59      	ldr	r2, [pc, #356]	; (80038d0 <HAL_DMA_Init+0x1dc>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d01d      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a57      	ldr	r2, [pc, #348]	; (80038d4 <HAL_DMA_Init+0x1e0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d018      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a56      	ldr	r2, [pc, #344]	; (80038d8 <HAL_DMA_Init+0x1e4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d013      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a54      	ldr	r2, [pc, #336]	; (80038dc <HAL_DMA_Init+0x1e8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00e      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a53      	ldr	r2, [pc, #332]	; (80038e0 <HAL_DMA_Init+0x1ec>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d009      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a51      	ldr	r2, [pc, #324]	; (80038e4 <HAL_DMA_Init+0x1f0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_DMA_Init+0xb8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a50      	ldr	r2, [pc, #320]	; (80038e8 <HAL_DMA_Init+0x1f4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_DMA_Init+0xbc>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <HAL_DMA_Init+0xbe>
 80037b0:	2300      	movs	r3, #0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 813b 	beq.w	8003a2e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a37      	ldr	r2, [pc, #220]	; (80038ac <HAL_DMA_Init+0x1b8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d04a      	beq.n	8003868 <HAL_DMA_Init+0x174>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a36      	ldr	r2, [pc, #216]	; (80038b0 <HAL_DMA_Init+0x1bc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d045      	beq.n	8003868 <HAL_DMA_Init+0x174>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a34      	ldr	r2, [pc, #208]	; (80038b4 <HAL_DMA_Init+0x1c0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d040      	beq.n	8003868 <HAL_DMA_Init+0x174>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a33      	ldr	r2, [pc, #204]	; (80038b8 <HAL_DMA_Init+0x1c4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d03b      	beq.n	8003868 <HAL_DMA_Init+0x174>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a31      	ldr	r2, [pc, #196]	; (80038bc <HAL_DMA_Init+0x1c8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d036      	beq.n	8003868 <HAL_DMA_Init+0x174>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a30      	ldr	r2, [pc, #192]	; (80038c0 <HAL_DMA_Init+0x1cc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d031      	beq.n	8003868 <HAL_DMA_Init+0x174>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2e      	ldr	r2, [pc, #184]	; (80038c4 <HAL_DMA_Init+0x1d0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d02c      	beq.n	8003868 <HAL_DMA_Init+0x174>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2d      	ldr	r2, [pc, #180]	; (80038c8 <HAL_DMA_Init+0x1d4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d027      	beq.n	8003868 <HAL_DMA_Init+0x174>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2b      	ldr	r2, [pc, #172]	; (80038cc <HAL_DMA_Init+0x1d8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d022      	beq.n	8003868 <HAL_DMA_Init+0x174>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a2a      	ldr	r2, [pc, #168]	; (80038d0 <HAL_DMA_Init+0x1dc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d01d      	beq.n	8003868 <HAL_DMA_Init+0x174>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a28      	ldr	r2, [pc, #160]	; (80038d4 <HAL_DMA_Init+0x1e0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d018      	beq.n	8003868 <HAL_DMA_Init+0x174>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a27      	ldr	r2, [pc, #156]	; (80038d8 <HAL_DMA_Init+0x1e4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d013      	beq.n	8003868 <HAL_DMA_Init+0x174>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a25      	ldr	r2, [pc, #148]	; (80038dc <HAL_DMA_Init+0x1e8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00e      	beq.n	8003868 <HAL_DMA_Init+0x174>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a24      	ldr	r2, [pc, #144]	; (80038e0 <HAL_DMA_Init+0x1ec>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d009      	beq.n	8003868 <HAL_DMA_Init+0x174>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a22      	ldr	r2, [pc, #136]	; (80038e4 <HAL_DMA_Init+0x1f0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d004      	beq.n	8003868 <HAL_DMA_Init+0x174>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a21      	ldr	r2, [pc, #132]	; (80038e8 <HAL_DMA_Init+0x1f4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d108      	bne.n	800387a <HAL_DMA_Init+0x186>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e007      	b.n	800388a <HAL_DMA_Init+0x196>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800388a:	e02f      	b.n	80038ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800388c:	f7fe f8bc 	bl	8001a08 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b05      	cmp	r3, #5
 8003898:	d928      	bls.n	80038ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2203      	movs	r2, #3
 80038a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e246      	b.n	8003d3a <HAL_DMA_Init+0x646>
 80038ac:	40020010 	.word	0x40020010
 80038b0:	40020028 	.word	0x40020028
 80038b4:	40020040 	.word	0x40020040
 80038b8:	40020058 	.word	0x40020058
 80038bc:	40020070 	.word	0x40020070
 80038c0:	40020088 	.word	0x40020088
 80038c4:	400200a0 	.word	0x400200a0
 80038c8:	400200b8 	.word	0x400200b8
 80038cc:	40020410 	.word	0x40020410
 80038d0:	40020428 	.word	0x40020428
 80038d4:	40020440 	.word	0x40020440
 80038d8:	40020458 	.word	0x40020458
 80038dc:	40020470 	.word	0x40020470
 80038e0:	40020488 	.word	0x40020488
 80038e4:	400204a0 	.word	0x400204a0
 80038e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1c8      	bne.n	800388c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4b83      	ldr	r3, [pc, #524]	; (8003b14 <HAL_DMA_Init+0x420>)
 8003906:	4013      	ands	r3, r2
 8003908:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003912:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800391e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800392a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	2b04      	cmp	r3, #4
 800393e:	d107      	bne.n	8003950 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	4313      	orrs	r3, r2
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003950:	4b71      	ldr	r3, [pc, #452]	; (8003b18 <HAL_DMA_Init+0x424>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b71      	ldr	r3, [pc, #452]	; (8003b1c <HAL_DMA_Init+0x428>)
 8003956:	4013      	ands	r3, r2
 8003958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800395c:	d328      	bcc.n	80039b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b28      	cmp	r3, #40	; 0x28
 8003964:	d903      	bls.n	800396e <HAL_DMA_Init+0x27a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b2e      	cmp	r3, #46	; 0x2e
 800396c:	d917      	bls.n	800399e <HAL_DMA_Init+0x2aa>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b3e      	cmp	r3, #62	; 0x3e
 8003974:	d903      	bls.n	800397e <HAL_DMA_Init+0x28a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b42      	cmp	r3, #66	; 0x42
 800397c:	d90f      	bls.n	800399e <HAL_DMA_Init+0x2aa>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b46      	cmp	r3, #70	; 0x46
 8003984:	d903      	bls.n	800398e <HAL_DMA_Init+0x29a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b48      	cmp	r3, #72	; 0x48
 800398c:	d907      	bls.n	800399e <HAL_DMA_Init+0x2aa>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b4e      	cmp	r3, #78	; 0x4e
 8003994:	d905      	bls.n	80039a2 <HAL_DMA_Init+0x2ae>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b52      	cmp	r3, #82	; 0x52
 800399c:	d801      	bhi.n	80039a2 <HAL_DMA_Init+0x2ae>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_DMA_Init+0x2b0>
 80039a2:	2300      	movs	r3, #0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f023 0307 	bic.w	r3, r3, #7
 80039c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d117      	bne.n	8003a0a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00e      	beq.n	8003a0a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f001 fdcf 	bl	8005590 <DMA_CheckFifoParam>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2240      	movs	r2, #64	; 0x40
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e197      	b.n	8003d3a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f001 fd0a 	bl	800542c <DMA_CalcBaseAndBitshift>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	223f      	movs	r2, #63	; 0x3f
 8003a26:	409a      	lsls	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	e0cd      	b.n	8003bca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a3b      	ldr	r2, [pc, #236]	; (8003b20 <HAL_DMA_Init+0x42c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d022      	beq.n	8003a7e <HAL_DMA_Init+0x38a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a39      	ldr	r2, [pc, #228]	; (8003b24 <HAL_DMA_Init+0x430>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01d      	beq.n	8003a7e <HAL_DMA_Init+0x38a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a38      	ldr	r2, [pc, #224]	; (8003b28 <HAL_DMA_Init+0x434>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d018      	beq.n	8003a7e <HAL_DMA_Init+0x38a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a36      	ldr	r2, [pc, #216]	; (8003b2c <HAL_DMA_Init+0x438>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d013      	beq.n	8003a7e <HAL_DMA_Init+0x38a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a35      	ldr	r2, [pc, #212]	; (8003b30 <HAL_DMA_Init+0x43c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00e      	beq.n	8003a7e <HAL_DMA_Init+0x38a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a33      	ldr	r2, [pc, #204]	; (8003b34 <HAL_DMA_Init+0x440>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d009      	beq.n	8003a7e <HAL_DMA_Init+0x38a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a32      	ldr	r2, [pc, #200]	; (8003b38 <HAL_DMA_Init+0x444>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d004      	beq.n	8003a7e <HAL_DMA_Init+0x38a>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a30      	ldr	r2, [pc, #192]	; (8003b3c <HAL_DMA_Init+0x448>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <HAL_DMA_Init+0x38e>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_DMA_Init+0x390>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8097 	beq.w	8003bb8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a24      	ldr	r2, [pc, #144]	; (8003b20 <HAL_DMA_Init+0x42c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d021      	beq.n	8003ad8 <HAL_DMA_Init+0x3e4>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a22      	ldr	r2, [pc, #136]	; (8003b24 <HAL_DMA_Init+0x430>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01c      	beq.n	8003ad8 <HAL_DMA_Init+0x3e4>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <HAL_DMA_Init+0x434>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d017      	beq.n	8003ad8 <HAL_DMA_Init+0x3e4>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1f      	ldr	r2, [pc, #124]	; (8003b2c <HAL_DMA_Init+0x438>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d012      	beq.n	8003ad8 <HAL_DMA_Init+0x3e4>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1e      	ldr	r2, [pc, #120]	; (8003b30 <HAL_DMA_Init+0x43c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00d      	beq.n	8003ad8 <HAL_DMA_Init+0x3e4>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1c      	ldr	r2, [pc, #112]	; (8003b34 <HAL_DMA_Init+0x440>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d008      	beq.n	8003ad8 <HAL_DMA_Init+0x3e4>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <HAL_DMA_Init+0x444>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <HAL_DMA_Init+0x3e4>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a19      	ldr	r2, [pc, #100]	; (8003b3c <HAL_DMA_Init+0x448>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_DMA_Init+0x44c>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	d020      	beq.n	8003b44 <HAL_DMA_Init+0x450>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b80      	cmp	r3, #128	; 0x80
 8003b08:	d102      	bne.n	8003b10 <HAL_DMA_Init+0x41c>
 8003b0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b0e:	e01a      	b.n	8003b46 <HAL_DMA_Init+0x452>
 8003b10:	2300      	movs	r3, #0
 8003b12:	e018      	b.n	8003b46 <HAL_DMA_Init+0x452>
 8003b14:	fe10803f 	.word	0xfe10803f
 8003b18:	5c001000 	.word	0x5c001000
 8003b1c:	ffff0000 	.word	0xffff0000
 8003b20:	58025408 	.word	0x58025408
 8003b24:	5802541c 	.word	0x5802541c
 8003b28:	58025430 	.word	0x58025430
 8003b2c:	58025444 	.word	0x58025444
 8003b30:	58025458 	.word	0x58025458
 8003b34:	5802546c 	.word	0x5802546c
 8003b38:	58025480 	.word	0x58025480
 8003b3c:	58025494 	.word	0x58025494
 8003b40:	fffe000f 	.word	0xfffe000f
 8003b44:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68d2      	ldr	r2, [r2, #12]
 8003b4a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b74:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4b6e      	ldr	r3, [pc, #440]	; (8003d44 <HAL_DMA_Init+0x650>)
 8003b8c:	4413      	add	r3, r2
 8003b8e:	4a6e      	ldr	r2, [pc, #440]	; (8003d48 <HAL_DMA_Init+0x654>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	009a      	lsls	r2, r3, #2
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f001 fc45 	bl	800542c <DMA_CalcBaseAndBitshift>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2201      	movs	r2, #1
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	e008      	b.n	8003bca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2240      	movs	r2, #64	; 0x40
 8003bbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0b7      	b.n	8003d3a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a5f      	ldr	r2, [pc, #380]	; (8003d4c <HAL_DMA_Init+0x658>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d072      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a5d      	ldr	r2, [pc, #372]	; (8003d50 <HAL_DMA_Init+0x65c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d06d      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a5c      	ldr	r2, [pc, #368]	; (8003d54 <HAL_DMA_Init+0x660>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d068      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a5a      	ldr	r2, [pc, #360]	; (8003d58 <HAL_DMA_Init+0x664>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d063      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a59      	ldr	r2, [pc, #356]	; (8003d5c <HAL_DMA_Init+0x668>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d05e      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a57      	ldr	r2, [pc, #348]	; (8003d60 <HAL_DMA_Init+0x66c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d059      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a56      	ldr	r2, [pc, #344]	; (8003d64 <HAL_DMA_Init+0x670>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d054      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a54      	ldr	r2, [pc, #336]	; (8003d68 <HAL_DMA_Init+0x674>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d04f      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a53      	ldr	r2, [pc, #332]	; (8003d6c <HAL_DMA_Init+0x678>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d04a      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a51      	ldr	r2, [pc, #324]	; (8003d70 <HAL_DMA_Init+0x67c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d045      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a50      	ldr	r2, [pc, #320]	; (8003d74 <HAL_DMA_Init+0x680>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d040      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a4e      	ldr	r2, [pc, #312]	; (8003d78 <HAL_DMA_Init+0x684>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d03b      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a4d      	ldr	r2, [pc, #308]	; (8003d7c <HAL_DMA_Init+0x688>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d036      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a4b      	ldr	r2, [pc, #300]	; (8003d80 <HAL_DMA_Init+0x68c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d031      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a4a      	ldr	r2, [pc, #296]	; (8003d84 <HAL_DMA_Init+0x690>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d02c      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a48      	ldr	r2, [pc, #288]	; (8003d88 <HAL_DMA_Init+0x694>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d027      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a47      	ldr	r2, [pc, #284]	; (8003d8c <HAL_DMA_Init+0x698>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d022      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a45      	ldr	r2, [pc, #276]	; (8003d90 <HAL_DMA_Init+0x69c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01d      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a44      	ldr	r2, [pc, #272]	; (8003d94 <HAL_DMA_Init+0x6a0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d018      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a42      	ldr	r2, [pc, #264]	; (8003d98 <HAL_DMA_Init+0x6a4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a41      	ldr	r2, [pc, #260]	; (8003d9c <HAL_DMA_Init+0x6a8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00e      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a3f      	ldr	r2, [pc, #252]	; (8003da0 <HAL_DMA_Init+0x6ac>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a3e      	ldr	r2, [pc, #248]	; (8003da4 <HAL_DMA_Init+0x6b0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_DMA_Init+0x5c6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a3c      	ldr	r2, [pc, #240]	; (8003da8 <HAL_DMA_Init+0x6b4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d101      	bne.n	8003cbe <HAL_DMA_Init+0x5ca>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_DMA_Init+0x5cc>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d032      	beq.n	8003d2a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f001 fcdf 	bl	8005688 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b80      	cmp	r3, #128	; 0x80
 8003cd0:	d102      	bne.n	8003cd8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003cec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d010      	beq.n	8003d18 <HAL_DMA_Init+0x624>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d80c      	bhi.n	8003d18 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f001 fd5c 	bl	80057bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	e008      	b.n	8003d2a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	a7fdabf8 	.word	0xa7fdabf8
 8003d48:	cccccccd 	.word	0xcccccccd
 8003d4c:	40020010 	.word	0x40020010
 8003d50:	40020028 	.word	0x40020028
 8003d54:	40020040 	.word	0x40020040
 8003d58:	40020058 	.word	0x40020058
 8003d5c:	40020070 	.word	0x40020070
 8003d60:	40020088 	.word	0x40020088
 8003d64:	400200a0 	.word	0x400200a0
 8003d68:	400200b8 	.word	0x400200b8
 8003d6c:	40020410 	.word	0x40020410
 8003d70:	40020428 	.word	0x40020428
 8003d74:	40020440 	.word	0x40020440
 8003d78:	40020458 	.word	0x40020458
 8003d7c:	40020470 	.word	0x40020470
 8003d80:	40020488 	.word	0x40020488
 8003d84:	400204a0 	.word	0x400204a0
 8003d88:	400204b8 	.word	0x400204b8
 8003d8c:	58025408 	.word	0x58025408
 8003d90:	5802541c 	.word	0x5802541c
 8003d94:	58025430 	.word	0x58025430
 8003d98:	58025444 	.word	0x58025444
 8003d9c:	58025458 	.word	0x58025458
 8003da0:	5802546c 	.word	0x5802546c
 8003da4:	58025480 	.word	0x58025480
 8003da8:	58025494 	.word	0x58025494

08003dac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e226      	b.n	8004216 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_DMA_Start_IT+0x2a>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e21f      	b.n	8004216 <HAL_DMA_Start_IT+0x46a>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	f040 820a 	bne.w	8004200 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a68      	ldr	r2, [pc, #416]	; (8003fa0 <HAL_DMA_Start_IT+0x1f4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d04a      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a66      	ldr	r2, [pc, #408]	; (8003fa4 <HAL_DMA_Start_IT+0x1f8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d045      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a65      	ldr	r2, [pc, #404]	; (8003fa8 <HAL_DMA_Start_IT+0x1fc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d040      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a63      	ldr	r2, [pc, #396]	; (8003fac <HAL_DMA_Start_IT+0x200>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d03b      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a62      	ldr	r2, [pc, #392]	; (8003fb0 <HAL_DMA_Start_IT+0x204>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d036      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a60      	ldr	r2, [pc, #384]	; (8003fb4 <HAL_DMA_Start_IT+0x208>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d031      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a5f      	ldr	r2, [pc, #380]	; (8003fb8 <HAL_DMA_Start_IT+0x20c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d02c      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a5d      	ldr	r2, [pc, #372]	; (8003fbc <HAL_DMA_Start_IT+0x210>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d027      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a5c      	ldr	r2, [pc, #368]	; (8003fc0 <HAL_DMA_Start_IT+0x214>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d022      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a5a      	ldr	r2, [pc, #360]	; (8003fc4 <HAL_DMA_Start_IT+0x218>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d01d      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a59      	ldr	r2, [pc, #356]	; (8003fc8 <HAL_DMA_Start_IT+0x21c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d018      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a57      	ldr	r2, [pc, #348]	; (8003fcc <HAL_DMA_Start_IT+0x220>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a56      	ldr	r2, [pc, #344]	; (8003fd0 <HAL_DMA_Start_IT+0x224>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00e      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a54      	ldr	r2, [pc, #336]	; (8003fd4 <HAL_DMA_Start_IT+0x228>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d009      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a53      	ldr	r2, [pc, #332]	; (8003fd8 <HAL_DMA_Start_IT+0x22c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <HAL_DMA_Start_IT+0xee>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a51      	ldr	r2, [pc, #324]	; (8003fdc <HAL_DMA_Start_IT+0x230>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d108      	bne.n	8003eac <HAL_DMA_Start_IT+0x100>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e007      	b.n	8003ebc <HAL_DMA_Start_IT+0x110>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f001 f906 	bl	80050d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a34      	ldr	r2, [pc, #208]	; (8003fa0 <HAL_DMA_Start_IT+0x1f4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d04a      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a33      	ldr	r2, [pc, #204]	; (8003fa4 <HAL_DMA_Start_IT+0x1f8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d045      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a31      	ldr	r2, [pc, #196]	; (8003fa8 <HAL_DMA_Start_IT+0x1fc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d040      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a30      	ldr	r2, [pc, #192]	; (8003fac <HAL_DMA_Start_IT+0x200>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d03b      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2e      	ldr	r2, [pc, #184]	; (8003fb0 <HAL_DMA_Start_IT+0x204>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d036      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2d      	ldr	r2, [pc, #180]	; (8003fb4 <HAL_DMA_Start_IT+0x208>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d031      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2b      	ldr	r2, [pc, #172]	; (8003fb8 <HAL_DMA_Start_IT+0x20c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02c      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <HAL_DMA_Start_IT+0x210>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d027      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a28      	ldr	r2, [pc, #160]	; (8003fc0 <HAL_DMA_Start_IT+0x214>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d022      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a27      	ldr	r2, [pc, #156]	; (8003fc4 <HAL_DMA_Start_IT+0x218>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d01d      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <HAL_DMA_Start_IT+0x21c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d018      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a24      	ldr	r2, [pc, #144]	; (8003fcc <HAL_DMA_Start_IT+0x220>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d013      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a22      	ldr	r2, [pc, #136]	; (8003fd0 <HAL_DMA_Start_IT+0x224>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00e      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <HAL_DMA_Start_IT+0x228>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d009      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1f      	ldr	r2, [pc, #124]	; (8003fd8 <HAL_DMA_Start_IT+0x22c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <HAL_DMA_Start_IT+0x1bc>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1e      	ldr	r2, [pc, #120]	; (8003fdc <HAL_DMA_Start_IT+0x230>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <HAL_DMA_Start_IT+0x1c0>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_DMA_Start_IT+0x1c2>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d036      	beq.n	8003fe0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f023 021e 	bic.w	r2, r3, #30
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0216 	orr.w	r2, r2, #22
 8003f84:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d03e      	beq.n	800400c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0208 	orr.w	r2, r2, #8
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e035      	b.n	800400c <HAL_DMA_Start_IT+0x260>
 8003fa0:	40020010 	.word	0x40020010
 8003fa4:	40020028 	.word	0x40020028
 8003fa8:	40020040 	.word	0x40020040
 8003fac:	40020058 	.word	0x40020058
 8003fb0:	40020070 	.word	0x40020070
 8003fb4:	40020088 	.word	0x40020088
 8003fb8:	400200a0 	.word	0x400200a0
 8003fbc:	400200b8 	.word	0x400200b8
 8003fc0:	40020410 	.word	0x40020410
 8003fc4:	40020428 	.word	0x40020428
 8003fc8:	40020440 	.word	0x40020440
 8003fcc:	40020458 	.word	0x40020458
 8003fd0:	40020470 	.word	0x40020470
 8003fd4:	40020488 	.word	0x40020488
 8003fd8:	400204a0 	.word	0x400204a0
 8003fdc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 020e 	bic.w	r2, r3, #14
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 020a 	orr.w	r2, r2, #10
 8003ff2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0204 	orr.w	r2, r2, #4
 800400a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a83      	ldr	r2, [pc, #524]	; (8004220 <HAL_DMA_Start_IT+0x474>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d072      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a82      	ldr	r2, [pc, #520]	; (8004224 <HAL_DMA_Start_IT+0x478>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d06d      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a80      	ldr	r2, [pc, #512]	; (8004228 <HAL_DMA_Start_IT+0x47c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d068      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a7f      	ldr	r2, [pc, #508]	; (800422c <HAL_DMA_Start_IT+0x480>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d063      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a7d      	ldr	r2, [pc, #500]	; (8004230 <HAL_DMA_Start_IT+0x484>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d05e      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a7c      	ldr	r2, [pc, #496]	; (8004234 <HAL_DMA_Start_IT+0x488>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d059      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a7a      	ldr	r2, [pc, #488]	; (8004238 <HAL_DMA_Start_IT+0x48c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d054      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a79      	ldr	r2, [pc, #484]	; (800423c <HAL_DMA_Start_IT+0x490>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d04f      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a77      	ldr	r2, [pc, #476]	; (8004240 <HAL_DMA_Start_IT+0x494>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d04a      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a76      	ldr	r2, [pc, #472]	; (8004244 <HAL_DMA_Start_IT+0x498>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d045      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a74      	ldr	r2, [pc, #464]	; (8004248 <HAL_DMA_Start_IT+0x49c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d040      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a73      	ldr	r2, [pc, #460]	; (800424c <HAL_DMA_Start_IT+0x4a0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d03b      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a71      	ldr	r2, [pc, #452]	; (8004250 <HAL_DMA_Start_IT+0x4a4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d036      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a70      	ldr	r2, [pc, #448]	; (8004254 <HAL_DMA_Start_IT+0x4a8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d031      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a6e      	ldr	r2, [pc, #440]	; (8004258 <HAL_DMA_Start_IT+0x4ac>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d02c      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a6d      	ldr	r2, [pc, #436]	; (800425c <HAL_DMA_Start_IT+0x4b0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d027      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a6b      	ldr	r2, [pc, #428]	; (8004260 <HAL_DMA_Start_IT+0x4b4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d022      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a6a      	ldr	r2, [pc, #424]	; (8004264 <HAL_DMA_Start_IT+0x4b8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d01d      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a68      	ldr	r2, [pc, #416]	; (8004268 <HAL_DMA_Start_IT+0x4bc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d018      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a67      	ldr	r2, [pc, #412]	; (800426c <HAL_DMA_Start_IT+0x4c0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a65      	ldr	r2, [pc, #404]	; (8004270 <HAL_DMA_Start_IT+0x4c4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00e      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a64      	ldr	r2, [pc, #400]	; (8004274 <HAL_DMA_Start_IT+0x4c8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d009      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a62      	ldr	r2, [pc, #392]	; (8004278 <HAL_DMA_Start_IT+0x4cc>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_DMA_Start_IT+0x350>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a61      	ldr	r2, [pc, #388]	; (800427c <HAL_DMA_Start_IT+0x4d0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d101      	bne.n	8004100 <HAL_DMA_Start_IT+0x354>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <HAL_DMA_Start_IT+0x356>
 8004100:	2300      	movs	r3, #0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01a      	beq.n	800413c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004122:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a37      	ldr	r2, [pc, #220]	; (8004220 <HAL_DMA_Start_IT+0x474>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d04a      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a36      	ldr	r2, [pc, #216]	; (8004224 <HAL_DMA_Start_IT+0x478>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d045      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a34      	ldr	r2, [pc, #208]	; (8004228 <HAL_DMA_Start_IT+0x47c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d040      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a33      	ldr	r2, [pc, #204]	; (800422c <HAL_DMA_Start_IT+0x480>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d03b      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a31      	ldr	r2, [pc, #196]	; (8004230 <HAL_DMA_Start_IT+0x484>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d036      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a30      	ldr	r2, [pc, #192]	; (8004234 <HAL_DMA_Start_IT+0x488>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d031      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2e      	ldr	r2, [pc, #184]	; (8004238 <HAL_DMA_Start_IT+0x48c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d02c      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a2d      	ldr	r2, [pc, #180]	; (800423c <HAL_DMA_Start_IT+0x490>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d027      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a2b      	ldr	r2, [pc, #172]	; (8004240 <HAL_DMA_Start_IT+0x494>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d022      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a2a      	ldr	r2, [pc, #168]	; (8004244 <HAL_DMA_Start_IT+0x498>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d01d      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a28      	ldr	r2, [pc, #160]	; (8004248 <HAL_DMA_Start_IT+0x49c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d018      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a27      	ldr	r2, [pc, #156]	; (800424c <HAL_DMA_Start_IT+0x4a0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a25      	ldr	r2, [pc, #148]	; (8004250 <HAL_DMA_Start_IT+0x4a4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00e      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a24      	ldr	r2, [pc, #144]	; (8004254 <HAL_DMA_Start_IT+0x4a8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d009      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a22      	ldr	r2, [pc, #136]	; (8004258 <HAL_DMA_Start_IT+0x4ac>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <HAL_DMA_Start_IT+0x430>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a21      	ldr	r2, [pc, #132]	; (800425c <HAL_DMA_Start_IT+0x4b0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d108      	bne.n	80041ee <HAL_DMA_Start_IT+0x442>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e012      	b.n	8004214 <HAL_DMA_Start_IT+0x468>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0201 	orr.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e009      	b.n	8004214 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800420e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004214:	7dfb      	ldrb	r3, [r7, #23]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40020010 	.word	0x40020010
 8004224:	40020028 	.word	0x40020028
 8004228:	40020040 	.word	0x40020040
 800422c:	40020058 	.word	0x40020058
 8004230:	40020070 	.word	0x40020070
 8004234:	40020088 	.word	0x40020088
 8004238:	400200a0 	.word	0x400200a0
 800423c:	400200b8 	.word	0x400200b8
 8004240:	40020410 	.word	0x40020410
 8004244:	40020428 	.word	0x40020428
 8004248:	40020440 	.word	0x40020440
 800424c:	40020458 	.word	0x40020458
 8004250:	40020470 	.word	0x40020470
 8004254:	40020488 	.word	0x40020488
 8004258:	400204a0 	.word	0x400204a0
 800425c:	400204b8 	.word	0x400204b8
 8004260:	58025408 	.word	0x58025408
 8004264:	5802541c 	.word	0x5802541c
 8004268:	58025430 	.word	0x58025430
 800426c:	58025444 	.word	0x58025444
 8004270:	58025458 	.word	0x58025458
 8004274:	5802546c 	.word	0x5802546c
 8004278:	58025480 	.word	0x58025480
 800427c:	58025494 	.word	0x58025494

08004280 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	; 0x28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800428c:	4b67      	ldr	r3, [pc, #412]	; (800442c <HAL_DMA_IRQHandler+0x1ac>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a67      	ldr	r2, [pc, #412]	; (8004430 <HAL_DMA_IRQHandler+0x1b0>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	0a9b      	lsrs	r3, r3, #10
 8004298:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a5f      	ldr	r2, [pc, #380]	; (8004434 <HAL_DMA_IRQHandler+0x1b4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d04a      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a5d      	ldr	r2, [pc, #372]	; (8004438 <HAL_DMA_IRQHandler+0x1b8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d045      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a5c      	ldr	r2, [pc, #368]	; (800443c <HAL_DMA_IRQHandler+0x1bc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d040      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a5a      	ldr	r2, [pc, #360]	; (8004440 <HAL_DMA_IRQHandler+0x1c0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d03b      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a59      	ldr	r2, [pc, #356]	; (8004444 <HAL_DMA_IRQHandler+0x1c4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d036      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a57      	ldr	r2, [pc, #348]	; (8004448 <HAL_DMA_IRQHandler+0x1c8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d031      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a56      	ldr	r2, [pc, #344]	; (800444c <HAL_DMA_IRQHandler+0x1cc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d02c      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a54      	ldr	r2, [pc, #336]	; (8004450 <HAL_DMA_IRQHandler+0x1d0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d027      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a53      	ldr	r2, [pc, #332]	; (8004454 <HAL_DMA_IRQHandler+0x1d4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d022      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a51      	ldr	r2, [pc, #324]	; (8004458 <HAL_DMA_IRQHandler+0x1d8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d01d      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a50      	ldr	r2, [pc, #320]	; (800445c <HAL_DMA_IRQHandler+0x1dc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d018      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a4e      	ldr	r2, [pc, #312]	; (8004460 <HAL_DMA_IRQHandler+0x1e0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a4d      	ldr	r2, [pc, #308]	; (8004464 <HAL_DMA_IRQHandler+0x1e4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00e      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a4b      	ldr	r2, [pc, #300]	; (8004468 <HAL_DMA_IRQHandler+0x1e8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d009      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a4a      	ldr	r2, [pc, #296]	; (800446c <HAL_DMA_IRQHandler+0x1ec>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d004      	beq.n	8004352 <HAL_DMA_IRQHandler+0xd2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a48      	ldr	r2, [pc, #288]	; (8004470 <HAL_DMA_IRQHandler+0x1f0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d101      	bne.n	8004356 <HAL_DMA_IRQHandler+0xd6>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_DMA_IRQHandler+0xd8>
 8004356:	2300      	movs	r3, #0
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 842b 	beq.w	8004bb4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	2208      	movs	r2, #8
 8004368:	409a      	lsls	r2, r3
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 80a2 	beq.w	80044b8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a2e      	ldr	r2, [pc, #184]	; (8004434 <HAL_DMA_IRQHandler+0x1b4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d04a      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2d      	ldr	r2, [pc, #180]	; (8004438 <HAL_DMA_IRQHandler+0x1b8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d045      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a2b      	ldr	r2, [pc, #172]	; (800443c <HAL_DMA_IRQHandler+0x1bc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d040      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2a      	ldr	r2, [pc, #168]	; (8004440 <HAL_DMA_IRQHandler+0x1c0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d03b      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a28      	ldr	r2, [pc, #160]	; (8004444 <HAL_DMA_IRQHandler+0x1c4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d036      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a27      	ldr	r2, [pc, #156]	; (8004448 <HAL_DMA_IRQHandler+0x1c8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d031      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a25      	ldr	r2, [pc, #148]	; (800444c <HAL_DMA_IRQHandler+0x1cc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d02c      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a24      	ldr	r2, [pc, #144]	; (8004450 <HAL_DMA_IRQHandler+0x1d0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d027      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a22      	ldr	r2, [pc, #136]	; (8004454 <HAL_DMA_IRQHandler+0x1d4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d022      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a21      	ldr	r2, [pc, #132]	; (8004458 <HAL_DMA_IRQHandler+0x1d8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d01d      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1f      	ldr	r2, [pc, #124]	; (800445c <HAL_DMA_IRQHandler+0x1dc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d018      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <HAL_DMA_IRQHandler+0x1e0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d013      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <HAL_DMA_IRQHandler+0x1e4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00e      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1b      	ldr	r2, [pc, #108]	; (8004468 <HAL_DMA_IRQHandler+0x1e8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a19      	ldr	r2, [pc, #100]	; (800446c <HAL_DMA_IRQHandler+0x1ec>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_DMA_IRQHandler+0x194>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a18      	ldr	r2, [pc, #96]	; (8004470 <HAL_DMA_IRQHandler+0x1f0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d12f      	bne.n	8004474 <HAL_DMA_IRQHandler+0x1f4>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	bf14      	ite	ne
 8004422:	2301      	movne	r3, #1
 8004424:	2300      	moveq	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	e02e      	b.n	8004488 <HAL_DMA_IRQHandler+0x208>
 800442a:	bf00      	nop
 800442c:	24000000 	.word	0x24000000
 8004430:	1b4e81b5 	.word	0x1b4e81b5
 8004434:	40020010 	.word	0x40020010
 8004438:	40020028 	.word	0x40020028
 800443c:	40020040 	.word	0x40020040
 8004440:	40020058 	.word	0x40020058
 8004444:	40020070 	.word	0x40020070
 8004448:	40020088 	.word	0x40020088
 800444c:	400200a0 	.word	0x400200a0
 8004450:	400200b8 	.word	0x400200b8
 8004454:	40020410 	.word	0x40020410
 8004458:	40020428 	.word	0x40020428
 800445c:	40020440 	.word	0x40020440
 8004460:	40020458 	.word	0x40020458
 8004464:	40020470 	.word	0x40020470
 8004468:	40020488 	.word	0x40020488
 800446c:	400204a0 	.word	0x400204a0
 8004470:	400204b8 	.word	0x400204b8
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	bf14      	ite	ne
 8004482:	2301      	movne	r3, #1
 8004484:	2300      	moveq	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d015      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0204 	bic.w	r2, r2, #4
 800449a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	2208      	movs	r2, #8
 80044a6:	409a      	lsls	r2, r3
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	f043 0201 	orr.w	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	fa22 f303 	lsr.w	r3, r2, r3
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d06e      	beq.n	80045ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a69      	ldr	r2, [pc, #420]	; (8004678 <HAL_DMA_IRQHandler+0x3f8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d04a      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a67      	ldr	r2, [pc, #412]	; (800467c <HAL_DMA_IRQHandler+0x3fc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d045      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a66      	ldr	r2, [pc, #408]	; (8004680 <HAL_DMA_IRQHandler+0x400>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d040      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a64      	ldr	r2, [pc, #400]	; (8004684 <HAL_DMA_IRQHandler+0x404>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d03b      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a63      	ldr	r2, [pc, #396]	; (8004688 <HAL_DMA_IRQHandler+0x408>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d036      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a61      	ldr	r2, [pc, #388]	; (800468c <HAL_DMA_IRQHandler+0x40c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d031      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a60      	ldr	r2, [pc, #384]	; (8004690 <HAL_DMA_IRQHandler+0x410>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d02c      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a5e      	ldr	r2, [pc, #376]	; (8004694 <HAL_DMA_IRQHandler+0x414>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d027      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a5d      	ldr	r2, [pc, #372]	; (8004698 <HAL_DMA_IRQHandler+0x418>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d022      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a5b      	ldr	r2, [pc, #364]	; (800469c <HAL_DMA_IRQHandler+0x41c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d01d      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a5a      	ldr	r2, [pc, #360]	; (80046a0 <HAL_DMA_IRQHandler+0x420>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d018      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_DMA_IRQHandler+0x424>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d013      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a57      	ldr	r2, [pc, #348]	; (80046a8 <HAL_DMA_IRQHandler+0x428>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00e      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a55      	ldr	r2, [pc, #340]	; (80046ac <HAL_DMA_IRQHandler+0x42c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d009      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a54      	ldr	r2, [pc, #336]	; (80046b0 <HAL_DMA_IRQHandler+0x430>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d004      	beq.n	800456e <HAL_DMA_IRQHandler+0x2ee>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a52      	ldr	r2, [pc, #328]	; (80046b4 <HAL_DMA_IRQHandler+0x434>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d10a      	bne.n	8004584 <HAL_DMA_IRQHandler+0x304>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004578:	2b00      	cmp	r3, #0
 800457a:	bf14      	ite	ne
 800457c:	2301      	movne	r3, #1
 800457e:	2300      	moveq	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	e003      	b.n	800458c <HAL_DMA_IRQHandler+0x30c>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2300      	movs	r3, #0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00d      	beq.n	80045ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	2201      	movs	r2, #1
 800459a:	409a      	lsls	r2, r3
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a4:	f043 0202 	orr.w	r2, r3, #2
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	2204      	movs	r2, #4
 80045b6:	409a      	lsls	r2, r3
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 808f 	beq.w	80046e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a2c      	ldr	r2, [pc, #176]	; (8004678 <HAL_DMA_IRQHandler+0x3f8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d04a      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a2a      	ldr	r2, [pc, #168]	; (800467c <HAL_DMA_IRQHandler+0x3fc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d045      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a29      	ldr	r2, [pc, #164]	; (8004680 <HAL_DMA_IRQHandler+0x400>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d040      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a27      	ldr	r2, [pc, #156]	; (8004684 <HAL_DMA_IRQHandler+0x404>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d03b      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a26      	ldr	r2, [pc, #152]	; (8004688 <HAL_DMA_IRQHandler+0x408>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d036      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a24      	ldr	r2, [pc, #144]	; (800468c <HAL_DMA_IRQHandler+0x40c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d031      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a23      	ldr	r2, [pc, #140]	; (8004690 <HAL_DMA_IRQHandler+0x410>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d02c      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a21      	ldr	r2, [pc, #132]	; (8004694 <HAL_DMA_IRQHandler+0x414>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d027      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a20      	ldr	r2, [pc, #128]	; (8004698 <HAL_DMA_IRQHandler+0x418>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d022      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1e      	ldr	r2, [pc, #120]	; (800469c <HAL_DMA_IRQHandler+0x41c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01d      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_DMA_IRQHandler+0x420>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d018      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1b      	ldr	r2, [pc, #108]	; (80046a4 <HAL_DMA_IRQHandler+0x424>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1a      	ldr	r2, [pc, #104]	; (80046a8 <HAL_DMA_IRQHandler+0x428>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a18      	ldr	r2, [pc, #96]	; (80046ac <HAL_DMA_IRQHandler+0x42c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d009      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a17      	ldr	r2, [pc, #92]	; (80046b0 <HAL_DMA_IRQHandler+0x430>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_DMA_IRQHandler+0x3e2>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <HAL_DMA_IRQHandler+0x434>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d12a      	bne.n	80046b8 <HAL_DMA_IRQHandler+0x438>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf14      	ite	ne
 8004670:	2301      	movne	r3, #1
 8004672:	2300      	moveq	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e023      	b.n	80046c0 <HAL_DMA_IRQHandler+0x440>
 8004678:	40020010 	.word	0x40020010
 800467c:	40020028 	.word	0x40020028
 8004680:	40020040 	.word	0x40020040
 8004684:	40020058 	.word	0x40020058
 8004688:	40020070 	.word	0x40020070
 800468c:	40020088 	.word	0x40020088
 8004690:	400200a0 	.word	0x400200a0
 8004694:	400200b8 	.word	0x400200b8
 8004698:	40020410 	.word	0x40020410
 800469c:	40020428 	.word	0x40020428
 80046a0:	40020440 	.word	0x40020440
 80046a4:	40020458 	.word	0x40020458
 80046a8:	40020470 	.word	0x40020470
 80046ac:	40020488 	.word	0x40020488
 80046b0:	400204a0 	.word	0x400204a0
 80046b4:	400204b8 	.word	0x400204b8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2300      	movs	r3, #0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00d      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	2204      	movs	r2, #4
 80046ce:	409a      	lsls	r2, r3
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	f043 0204 	orr.w	r2, r3, #4
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	2210      	movs	r2, #16
 80046ea:	409a      	lsls	r2, r3
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 80a6 	beq.w	8004842 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a85      	ldr	r2, [pc, #532]	; (8004910 <HAL_DMA_IRQHandler+0x690>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d04a      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a83      	ldr	r2, [pc, #524]	; (8004914 <HAL_DMA_IRQHandler+0x694>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d045      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a82      	ldr	r2, [pc, #520]	; (8004918 <HAL_DMA_IRQHandler+0x698>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d040      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a80      	ldr	r2, [pc, #512]	; (800491c <HAL_DMA_IRQHandler+0x69c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d03b      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7f      	ldr	r2, [pc, #508]	; (8004920 <HAL_DMA_IRQHandler+0x6a0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d036      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a7d      	ldr	r2, [pc, #500]	; (8004924 <HAL_DMA_IRQHandler+0x6a4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d031      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7c      	ldr	r2, [pc, #496]	; (8004928 <HAL_DMA_IRQHandler+0x6a8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d02c      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a7a      	ldr	r2, [pc, #488]	; (800492c <HAL_DMA_IRQHandler+0x6ac>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d027      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a79      	ldr	r2, [pc, #484]	; (8004930 <HAL_DMA_IRQHandler+0x6b0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d022      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a77      	ldr	r2, [pc, #476]	; (8004934 <HAL_DMA_IRQHandler+0x6b4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d01d      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a76      	ldr	r2, [pc, #472]	; (8004938 <HAL_DMA_IRQHandler+0x6b8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d018      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a74      	ldr	r2, [pc, #464]	; (800493c <HAL_DMA_IRQHandler+0x6bc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a73      	ldr	r2, [pc, #460]	; (8004940 <HAL_DMA_IRQHandler+0x6c0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00e      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a71      	ldr	r2, [pc, #452]	; (8004944 <HAL_DMA_IRQHandler+0x6c4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d009      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a70      	ldr	r2, [pc, #448]	; (8004948 <HAL_DMA_IRQHandler+0x6c8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d004      	beq.n	8004796 <HAL_DMA_IRQHandler+0x516>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6e      	ldr	r2, [pc, #440]	; (800494c <HAL_DMA_IRQHandler+0x6cc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10a      	bne.n	80047ac <HAL_DMA_IRQHandler+0x52c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e009      	b.n	80047c0 <HAL_DMA_IRQHandler+0x540>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bf14      	ite	ne
 80047ba:	2301      	movne	r3, #1
 80047bc:	2300      	moveq	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d03e      	beq.n	8004842 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	2210      	movs	r2, #16
 80047ce:	409a      	lsls	r2, r3
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d018      	beq.n	8004814 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d108      	bne.n	8004802 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d024      	beq.n	8004842 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4798      	blx	r3
 8004800:	e01f      	b.n	8004842 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01b      	beq.n	8004842 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	4798      	blx	r3
 8004812:	e016      	b.n	8004842 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d107      	bne.n	8004832 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0208 	bic.w	r2, r2, #8
 8004830:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2220      	movs	r2, #32
 800484c:	409a      	lsls	r2, r3
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 8110 	beq.w	8004a78 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a2c      	ldr	r2, [pc, #176]	; (8004910 <HAL_DMA_IRQHandler+0x690>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d04a      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a2b      	ldr	r2, [pc, #172]	; (8004914 <HAL_DMA_IRQHandler+0x694>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d045      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a29      	ldr	r2, [pc, #164]	; (8004918 <HAL_DMA_IRQHandler+0x698>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d040      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a28      	ldr	r2, [pc, #160]	; (800491c <HAL_DMA_IRQHandler+0x69c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d03b      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a26      	ldr	r2, [pc, #152]	; (8004920 <HAL_DMA_IRQHandler+0x6a0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d036      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a25      	ldr	r2, [pc, #148]	; (8004924 <HAL_DMA_IRQHandler+0x6a4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d031      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a23      	ldr	r2, [pc, #140]	; (8004928 <HAL_DMA_IRQHandler+0x6a8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d02c      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a22      	ldr	r2, [pc, #136]	; (800492c <HAL_DMA_IRQHandler+0x6ac>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d027      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a20      	ldr	r2, [pc, #128]	; (8004930 <HAL_DMA_IRQHandler+0x6b0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d022      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <HAL_DMA_IRQHandler+0x6b4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d01d      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <HAL_DMA_IRQHandler+0x6b8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d018      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1c      	ldr	r2, [pc, #112]	; (800493c <HAL_DMA_IRQHandler+0x6bc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1a      	ldr	r2, [pc, #104]	; (8004940 <HAL_DMA_IRQHandler+0x6c0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a19      	ldr	r2, [pc, #100]	; (8004944 <HAL_DMA_IRQHandler+0x6c4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d009      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a17      	ldr	r2, [pc, #92]	; (8004948 <HAL_DMA_IRQHandler+0x6c8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x678>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a16      	ldr	r2, [pc, #88]	; (800494c <HAL_DMA_IRQHandler+0x6cc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d12b      	bne.n	8004950 <HAL_DMA_IRQHandler+0x6d0>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b00      	cmp	r3, #0
 8004904:	bf14      	ite	ne
 8004906:	2301      	movne	r3, #1
 8004908:	2300      	moveq	r3, #0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	e02a      	b.n	8004964 <HAL_DMA_IRQHandler+0x6e4>
 800490e:	bf00      	nop
 8004910:	40020010 	.word	0x40020010
 8004914:	40020028 	.word	0x40020028
 8004918:	40020040 	.word	0x40020040
 800491c:	40020058 	.word	0x40020058
 8004920:	40020070 	.word	0x40020070
 8004924:	40020088 	.word	0x40020088
 8004928:	400200a0 	.word	0x400200a0
 800492c:	400200b8 	.word	0x400200b8
 8004930:	40020410 	.word	0x40020410
 8004934:	40020428 	.word	0x40020428
 8004938:	40020440 	.word	0x40020440
 800493c:	40020458 	.word	0x40020458
 8004940:	40020470 	.word	0x40020470
 8004944:	40020488 	.word	0x40020488
 8004948:	400204a0 	.word	0x400204a0
 800494c:	400204b8 	.word	0x400204b8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf14      	ite	ne
 800495e:	2301      	movne	r3, #1
 8004960:	2300      	moveq	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8087 	beq.w	8004a78 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	2220      	movs	r2, #32
 8004974:	409a      	lsls	r2, r3
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b04      	cmp	r3, #4
 8004984:	d139      	bne.n	80049fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0216 	bic.w	r2, r2, #22
 8004994:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d103      	bne.n	80049b6 <HAL_DMA_IRQHandler+0x736>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0208 	bic.w	r2, r2, #8
 80049c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	223f      	movs	r2, #63	; 0x3f
 80049d0:	409a      	lsls	r2, r3
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 834a 	beq.w	8005084 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	4798      	blx	r3
          }
          return;
 80049f8:	e344      	b.n	8005084 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d018      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d02c      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
 8004a26:	e027      	b.n	8004a78 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d023      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	4798      	blx	r3
 8004a38:	e01e      	b.n	8004a78 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10f      	bne.n	8004a68 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0210 	bic.w	r2, r2, #16
 8004a56:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8306 	beq.w	800508e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 8088 	beq.w	8004ba0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2204      	movs	r2, #4
 8004a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a7a      	ldr	r2, [pc, #488]	; (8004c88 <HAL_DMA_IRQHandler+0xa08>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d04a      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a79      	ldr	r2, [pc, #484]	; (8004c8c <HAL_DMA_IRQHandler+0xa0c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d045      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a77      	ldr	r2, [pc, #476]	; (8004c90 <HAL_DMA_IRQHandler+0xa10>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d040      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a76      	ldr	r2, [pc, #472]	; (8004c94 <HAL_DMA_IRQHandler+0xa14>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d03b      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a74      	ldr	r2, [pc, #464]	; (8004c98 <HAL_DMA_IRQHandler+0xa18>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d036      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a73      	ldr	r2, [pc, #460]	; (8004c9c <HAL_DMA_IRQHandler+0xa1c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d031      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a71      	ldr	r2, [pc, #452]	; (8004ca0 <HAL_DMA_IRQHandler+0xa20>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d02c      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a70      	ldr	r2, [pc, #448]	; (8004ca4 <HAL_DMA_IRQHandler+0xa24>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d027      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a6e      	ldr	r2, [pc, #440]	; (8004ca8 <HAL_DMA_IRQHandler+0xa28>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d022      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a6d      	ldr	r2, [pc, #436]	; (8004cac <HAL_DMA_IRQHandler+0xa2c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d01d      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a6b      	ldr	r2, [pc, #428]	; (8004cb0 <HAL_DMA_IRQHandler+0xa30>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d018      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a6a      	ldr	r2, [pc, #424]	; (8004cb4 <HAL_DMA_IRQHandler+0xa34>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d013      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a68      	ldr	r2, [pc, #416]	; (8004cb8 <HAL_DMA_IRQHandler+0xa38>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00e      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a67      	ldr	r2, [pc, #412]	; (8004cbc <HAL_DMA_IRQHandler+0xa3c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d009      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a65      	ldr	r2, [pc, #404]	; (8004cc0 <HAL_DMA_IRQHandler+0xa40>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x8b8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a64      	ldr	r2, [pc, #400]	; (8004cc4 <HAL_DMA_IRQHandler+0xa44>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d108      	bne.n	8004b4a <HAL_DMA_IRQHandler+0x8ca>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0201 	bic.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e007      	b.n	8004b5a <HAL_DMA_IRQHandler+0x8da>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0201 	bic.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d307      	bcc.n	8004b76 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f2      	bne.n	8004b5a <HAL_DMA_IRQHandler+0x8da>
 8004b74:	e000      	b.n	8004b78 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004b76:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d004      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2203      	movs	r2, #3
 8004b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004b96:	e003      	b.n	8004ba0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8272 	beq.w	800508e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	4798      	blx	r3
 8004bb2:	e26c      	b.n	800508e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a43      	ldr	r2, [pc, #268]	; (8004cc8 <HAL_DMA_IRQHandler+0xa48>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d022      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x984>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a42      	ldr	r2, [pc, #264]	; (8004ccc <HAL_DMA_IRQHandler+0xa4c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d01d      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x984>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a40      	ldr	r2, [pc, #256]	; (8004cd0 <HAL_DMA_IRQHandler+0xa50>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d018      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x984>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a3f      	ldr	r2, [pc, #252]	; (8004cd4 <HAL_DMA_IRQHandler+0xa54>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x984>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a3d      	ldr	r2, [pc, #244]	; (8004cd8 <HAL_DMA_IRQHandler+0xa58>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00e      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x984>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a3c      	ldr	r2, [pc, #240]	; (8004cdc <HAL_DMA_IRQHandler+0xa5c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d009      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x984>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a3a      	ldr	r2, [pc, #232]	; (8004ce0 <HAL_DMA_IRQHandler+0xa60>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x984>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a39      	ldr	r2, [pc, #228]	; (8004ce4 <HAL_DMA_IRQHandler+0xa64>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d101      	bne.n	8004c08 <HAL_DMA_IRQHandler+0x988>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_DMA_IRQHandler+0x98a>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 823f 	beq.w	800508e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2204      	movs	r2, #4
 8004c22:	409a      	lsls	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 80cd 	beq.w	8004dc8 <HAL_DMA_IRQHandler+0xb48>
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80c7 	beq.w	8004dc8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3e:	f003 031f 	and.w	r3, r3, #31
 8004c42:	2204      	movs	r2, #4
 8004c44:	409a      	lsls	r2, r3
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d049      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8210 	beq.w	8005088 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c70:	e20a      	b.n	8005088 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 8206 	beq.w	8005088 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c84:	e200      	b.n	8005088 <HAL_DMA_IRQHandler+0xe08>
 8004c86:	bf00      	nop
 8004c88:	40020010 	.word	0x40020010
 8004c8c:	40020028 	.word	0x40020028
 8004c90:	40020040 	.word	0x40020040
 8004c94:	40020058 	.word	0x40020058
 8004c98:	40020070 	.word	0x40020070
 8004c9c:	40020088 	.word	0x40020088
 8004ca0:	400200a0 	.word	0x400200a0
 8004ca4:	400200b8 	.word	0x400200b8
 8004ca8:	40020410 	.word	0x40020410
 8004cac:	40020428 	.word	0x40020428
 8004cb0:	40020440 	.word	0x40020440
 8004cb4:	40020458 	.word	0x40020458
 8004cb8:	40020470 	.word	0x40020470
 8004cbc:	40020488 	.word	0x40020488
 8004cc0:	400204a0 	.word	0x400204a0
 8004cc4:	400204b8 	.word	0x400204b8
 8004cc8:	58025408 	.word	0x58025408
 8004ccc:	5802541c 	.word	0x5802541c
 8004cd0:	58025430 	.word	0x58025430
 8004cd4:	58025444 	.word	0x58025444
 8004cd8:	58025458 	.word	0x58025458
 8004cdc:	5802546c 	.word	0x5802546c
 8004ce0:	58025480 	.word	0x58025480
 8004ce4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d160      	bne.n	8004db4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a8c      	ldr	r2, [pc, #560]	; (8004f28 <HAL_DMA_IRQHandler+0xca8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d04a      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a8a      	ldr	r2, [pc, #552]	; (8004f2c <HAL_DMA_IRQHandler+0xcac>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d045      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a89      	ldr	r2, [pc, #548]	; (8004f30 <HAL_DMA_IRQHandler+0xcb0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d040      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a87      	ldr	r2, [pc, #540]	; (8004f34 <HAL_DMA_IRQHandler+0xcb4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d03b      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a86      	ldr	r2, [pc, #536]	; (8004f38 <HAL_DMA_IRQHandler+0xcb8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d036      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a84      	ldr	r2, [pc, #528]	; (8004f3c <HAL_DMA_IRQHandler+0xcbc>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d031      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a83      	ldr	r2, [pc, #524]	; (8004f40 <HAL_DMA_IRQHandler+0xcc0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d02c      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a81      	ldr	r2, [pc, #516]	; (8004f44 <HAL_DMA_IRQHandler+0xcc4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d027      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a80      	ldr	r2, [pc, #512]	; (8004f48 <HAL_DMA_IRQHandler+0xcc8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d022      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a7e      	ldr	r2, [pc, #504]	; (8004f4c <HAL_DMA_IRQHandler+0xccc>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d01d      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a7d      	ldr	r2, [pc, #500]	; (8004f50 <HAL_DMA_IRQHandler+0xcd0>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d018      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a7b      	ldr	r2, [pc, #492]	; (8004f54 <HAL_DMA_IRQHandler+0xcd4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d013      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a7a      	ldr	r2, [pc, #488]	; (8004f58 <HAL_DMA_IRQHandler+0xcd8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00e      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a78      	ldr	r2, [pc, #480]	; (8004f5c <HAL_DMA_IRQHandler+0xcdc>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d009      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a77      	ldr	r2, [pc, #476]	; (8004f60 <HAL_DMA_IRQHandler+0xce0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d004      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xb12>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a75      	ldr	r2, [pc, #468]	; (8004f64 <HAL_DMA_IRQHandler+0xce4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d108      	bne.n	8004da4 <HAL_DMA_IRQHandler+0xb24>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0208 	bic.w	r2, r2, #8
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e007      	b.n	8004db4 <HAL_DMA_IRQHandler+0xb34>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0204 	bic.w	r2, r2, #4
 8004db2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8165 	beq.w	8005088 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dc6:	e15f      	b.n	8005088 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80c5 	beq.w	8004f68 <HAL_DMA_IRQHandler+0xce8>
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80bf 	beq.w	8004f68 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	2202      	movs	r2, #2
 8004df4:	409a      	lsls	r2, r3
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d018      	beq.n	8004e36 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 813a 	beq.w	800508c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e20:	e134      	b.n	800508c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 8130 	beq.w	800508c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e34:	e12a      	b.n	800508c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d168      	bne.n	8004f12 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a38      	ldr	r2, [pc, #224]	; (8004f28 <HAL_DMA_IRQHandler+0xca8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d04a      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a37      	ldr	r2, [pc, #220]	; (8004f2c <HAL_DMA_IRQHandler+0xcac>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d045      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a35      	ldr	r2, [pc, #212]	; (8004f30 <HAL_DMA_IRQHandler+0xcb0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d040      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a34      	ldr	r2, [pc, #208]	; (8004f34 <HAL_DMA_IRQHandler+0xcb4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d03b      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a32      	ldr	r2, [pc, #200]	; (8004f38 <HAL_DMA_IRQHandler+0xcb8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d036      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a31      	ldr	r2, [pc, #196]	; (8004f3c <HAL_DMA_IRQHandler+0xcbc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d031      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a2f      	ldr	r2, [pc, #188]	; (8004f40 <HAL_DMA_IRQHandler+0xcc0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d02c      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a2e      	ldr	r2, [pc, #184]	; (8004f44 <HAL_DMA_IRQHandler+0xcc4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d027      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2c      	ldr	r2, [pc, #176]	; (8004f48 <HAL_DMA_IRQHandler+0xcc8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d022      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2b      	ldr	r2, [pc, #172]	; (8004f4c <HAL_DMA_IRQHandler+0xccc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d01d      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a29      	ldr	r2, [pc, #164]	; (8004f50 <HAL_DMA_IRQHandler+0xcd0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d018      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a28      	ldr	r2, [pc, #160]	; (8004f54 <HAL_DMA_IRQHandler+0xcd4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d013      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a26      	ldr	r2, [pc, #152]	; (8004f58 <HAL_DMA_IRQHandler+0xcd8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00e      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <HAL_DMA_IRQHandler+0xcdc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d009      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a23      	ldr	r2, [pc, #140]	; (8004f60 <HAL_DMA_IRQHandler+0xce0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xc60>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a22      	ldr	r2, [pc, #136]	; (8004f64 <HAL_DMA_IRQHandler+0xce4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d108      	bne.n	8004ef2 <HAL_DMA_IRQHandler+0xc72>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0214 	bic.w	r2, r2, #20
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e007      	b.n	8004f02 <HAL_DMA_IRQHandler+0xc82>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 020a 	bic.w	r2, r2, #10
 8004f00:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80b8 	beq.w	800508c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f24:	e0b2      	b.n	800508c <HAL_DMA_IRQHandler+0xe0c>
 8004f26:	bf00      	nop
 8004f28:	40020010 	.word	0x40020010
 8004f2c:	40020028 	.word	0x40020028
 8004f30:	40020040 	.word	0x40020040
 8004f34:	40020058 	.word	0x40020058
 8004f38:	40020070 	.word	0x40020070
 8004f3c:	40020088 	.word	0x40020088
 8004f40:	400200a0 	.word	0x400200a0
 8004f44:	400200b8 	.word	0x400200b8
 8004f48:	40020410 	.word	0x40020410
 8004f4c:	40020428 	.word	0x40020428
 8004f50:	40020440 	.word	0x40020440
 8004f54:	40020458 	.word	0x40020458
 8004f58:	40020470 	.word	0x40020470
 8004f5c:	40020488 	.word	0x40020488
 8004f60:	400204a0 	.word	0x400204a0
 8004f64:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6c:	f003 031f 	and.w	r3, r3, #31
 8004f70:	2208      	movs	r2, #8
 8004f72:	409a      	lsls	r2, r3
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8088 	beq.w	800508e <HAL_DMA_IRQHandler+0xe0e>
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8082 	beq.w	800508e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a41      	ldr	r2, [pc, #260]	; (8005094 <HAL_DMA_IRQHandler+0xe14>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d04a      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a3f      	ldr	r2, [pc, #252]	; (8005098 <HAL_DMA_IRQHandler+0xe18>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d045      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a3e      	ldr	r2, [pc, #248]	; (800509c <HAL_DMA_IRQHandler+0xe1c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d040      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a3c      	ldr	r2, [pc, #240]	; (80050a0 <HAL_DMA_IRQHandler+0xe20>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d03b      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a3b      	ldr	r2, [pc, #236]	; (80050a4 <HAL_DMA_IRQHandler+0xe24>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d036      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a39      	ldr	r2, [pc, #228]	; (80050a8 <HAL_DMA_IRQHandler+0xe28>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d031      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a38      	ldr	r2, [pc, #224]	; (80050ac <HAL_DMA_IRQHandler+0xe2c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d02c      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a36      	ldr	r2, [pc, #216]	; (80050b0 <HAL_DMA_IRQHandler+0xe30>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d027      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a35      	ldr	r2, [pc, #212]	; (80050b4 <HAL_DMA_IRQHandler+0xe34>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d022      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a33      	ldr	r2, [pc, #204]	; (80050b8 <HAL_DMA_IRQHandler+0xe38>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01d      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a32      	ldr	r2, [pc, #200]	; (80050bc <HAL_DMA_IRQHandler+0xe3c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d018      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a30      	ldr	r2, [pc, #192]	; (80050c0 <HAL_DMA_IRQHandler+0xe40>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a2f      	ldr	r2, [pc, #188]	; (80050c4 <HAL_DMA_IRQHandler+0xe44>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00e      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a2d      	ldr	r2, [pc, #180]	; (80050c8 <HAL_DMA_IRQHandler+0xe48>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a2c      	ldr	r2, [pc, #176]	; (80050cc <HAL_DMA_IRQHandler+0xe4c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_DMA_IRQHandler+0xdaa>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <HAL_DMA_IRQHandler+0xe50>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d108      	bne.n	800503c <HAL_DMA_IRQHandler+0xdbc>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 021c 	bic.w	r2, r2, #28
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e007      	b.n	800504c <HAL_DMA_IRQHandler+0xdcc>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 020e 	bic.w	r2, r2, #14
 800504a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005050:	f003 031f 	and.w	r3, r3, #31
 8005054:	2201      	movs	r2, #1
 8005056:	409a      	lsls	r2, r3
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	4798      	blx	r3
 8005082:	e004      	b.n	800508e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005084:	bf00      	nop
 8005086:	e002      	b.n	800508e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005088:	bf00      	nop
 800508a:	e000      	b.n	800508e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800508c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800508e:	3728      	adds	r7, #40	; 0x28
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40020010 	.word	0x40020010
 8005098:	40020028 	.word	0x40020028
 800509c:	40020040 	.word	0x40020040
 80050a0:	40020058 	.word	0x40020058
 80050a4:	40020070 	.word	0x40020070
 80050a8:	40020088 	.word	0x40020088
 80050ac:	400200a0 	.word	0x400200a0
 80050b0:	400200b8 	.word	0x400200b8
 80050b4:	40020410 	.word	0x40020410
 80050b8:	40020428 	.word	0x40020428
 80050bc:	40020440 	.word	0x40020440
 80050c0:	40020458 	.word	0x40020458
 80050c4:	40020470 	.word	0x40020470
 80050c8:	40020488 	.word	0x40020488
 80050cc:	400204a0 	.word	0x400204a0
 80050d0:	400204b8 	.word	0x400204b8

080050d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a84      	ldr	r2, [pc, #528]	; (8005304 <DMA_SetConfig+0x230>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d072      	beq.n	80051de <DMA_SetConfig+0x10a>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a82      	ldr	r2, [pc, #520]	; (8005308 <DMA_SetConfig+0x234>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d06d      	beq.n	80051de <DMA_SetConfig+0x10a>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a81      	ldr	r2, [pc, #516]	; (800530c <DMA_SetConfig+0x238>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d068      	beq.n	80051de <DMA_SetConfig+0x10a>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a7f      	ldr	r2, [pc, #508]	; (8005310 <DMA_SetConfig+0x23c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d063      	beq.n	80051de <DMA_SetConfig+0x10a>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a7e      	ldr	r2, [pc, #504]	; (8005314 <DMA_SetConfig+0x240>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d05e      	beq.n	80051de <DMA_SetConfig+0x10a>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a7c      	ldr	r2, [pc, #496]	; (8005318 <DMA_SetConfig+0x244>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d059      	beq.n	80051de <DMA_SetConfig+0x10a>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a7b      	ldr	r2, [pc, #492]	; (800531c <DMA_SetConfig+0x248>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d054      	beq.n	80051de <DMA_SetConfig+0x10a>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a79      	ldr	r2, [pc, #484]	; (8005320 <DMA_SetConfig+0x24c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d04f      	beq.n	80051de <DMA_SetConfig+0x10a>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a78      	ldr	r2, [pc, #480]	; (8005324 <DMA_SetConfig+0x250>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d04a      	beq.n	80051de <DMA_SetConfig+0x10a>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a76      	ldr	r2, [pc, #472]	; (8005328 <DMA_SetConfig+0x254>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d045      	beq.n	80051de <DMA_SetConfig+0x10a>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a75      	ldr	r2, [pc, #468]	; (800532c <DMA_SetConfig+0x258>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d040      	beq.n	80051de <DMA_SetConfig+0x10a>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a73      	ldr	r2, [pc, #460]	; (8005330 <DMA_SetConfig+0x25c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d03b      	beq.n	80051de <DMA_SetConfig+0x10a>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a72      	ldr	r2, [pc, #456]	; (8005334 <DMA_SetConfig+0x260>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d036      	beq.n	80051de <DMA_SetConfig+0x10a>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a70      	ldr	r2, [pc, #448]	; (8005338 <DMA_SetConfig+0x264>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d031      	beq.n	80051de <DMA_SetConfig+0x10a>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a6f      	ldr	r2, [pc, #444]	; (800533c <DMA_SetConfig+0x268>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d02c      	beq.n	80051de <DMA_SetConfig+0x10a>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a6d      	ldr	r2, [pc, #436]	; (8005340 <DMA_SetConfig+0x26c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d027      	beq.n	80051de <DMA_SetConfig+0x10a>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a6c      	ldr	r2, [pc, #432]	; (8005344 <DMA_SetConfig+0x270>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d022      	beq.n	80051de <DMA_SetConfig+0x10a>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a6a      	ldr	r2, [pc, #424]	; (8005348 <DMA_SetConfig+0x274>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01d      	beq.n	80051de <DMA_SetConfig+0x10a>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a69      	ldr	r2, [pc, #420]	; (800534c <DMA_SetConfig+0x278>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d018      	beq.n	80051de <DMA_SetConfig+0x10a>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a67      	ldr	r2, [pc, #412]	; (8005350 <DMA_SetConfig+0x27c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <DMA_SetConfig+0x10a>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a66      	ldr	r2, [pc, #408]	; (8005354 <DMA_SetConfig+0x280>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <DMA_SetConfig+0x10a>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a64      	ldr	r2, [pc, #400]	; (8005358 <DMA_SetConfig+0x284>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <DMA_SetConfig+0x10a>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a63      	ldr	r2, [pc, #396]	; (800535c <DMA_SetConfig+0x288>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <DMA_SetConfig+0x10a>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a61      	ldr	r2, [pc, #388]	; (8005360 <DMA_SetConfig+0x28c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d101      	bne.n	80051e2 <DMA_SetConfig+0x10e>
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <DMA_SetConfig+0x110>
 80051e2:	2300      	movs	r3, #0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00d      	beq.n	8005204 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d004      	beq.n	8005204 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005202:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a3e      	ldr	r2, [pc, #248]	; (8005304 <DMA_SetConfig+0x230>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d04a      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a3d      	ldr	r2, [pc, #244]	; (8005308 <DMA_SetConfig+0x234>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d045      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a3b      	ldr	r2, [pc, #236]	; (800530c <DMA_SetConfig+0x238>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d040      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a3a      	ldr	r2, [pc, #232]	; (8005310 <DMA_SetConfig+0x23c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d03b      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a38      	ldr	r2, [pc, #224]	; (8005314 <DMA_SetConfig+0x240>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d036      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a37      	ldr	r2, [pc, #220]	; (8005318 <DMA_SetConfig+0x244>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d031      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a35      	ldr	r2, [pc, #212]	; (800531c <DMA_SetConfig+0x248>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d02c      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a34      	ldr	r2, [pc, #208]	; (8005320 <DMA_SetConfig+0x24c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d027      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a32      	ldr	r2, [pc, #200]	; (8005324 <DMA_SetConfig+0x250>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d022      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a31      	ldr	r2, [pc, #196]	; (8005328 <DMA_SetConfig+0x254>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d01d      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a2f      	ldr	r2, [pc, #188]	; (800532c <DMA_SetConfig+0x258>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d018      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a2e      	ldr	r2, [pc, #184]	; (8005330 <DMA_SetConfig+0x25c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d013      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2c      	ldr	r2, [pc, #176]	; (8005334 <DMA_SetConfig+0x260>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00e      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a2b      	ldr	r2, [pc, #172]	; (8005338 <DMA_SetConfig+0x264>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d009      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a29      	ldr	r2, [pc, #164]	; (800533c <DMA_SetConfig+0x268>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d004      	beq.n	80052a4 <DMA_SetConfig+0x1d0>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a28      	ldr	r2, [pc, #160]	; (8005340 <DMA_SetConfig+0x26c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d101      	bne.n	80052a8 <DMA_SetConfig+0x1d4>
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <DMA_SetConfig+0x1d6>
 80052a8:	2300      	movs	r3, #0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d05a      	beq.n	8005364 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	223f      	movs	r2, #63	; 0x3f
 80052b8:	409a      	lsls	r2, r3
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052cc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	d108      	bne.n	80052f0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80052ee:	e087      	b.n	8005400 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	60da      	str	r2, [r3, #12]
}
 8005300:	e07e      	b.n	8005400 <DMA_SetConfig+0x32c>
 8005302:	bf00      	nop
 8005304:	40020010 	.word	0x40020010
 8005308:	40020028 	.word	0x40020028
 800530c:	40020040 	.word	0x40020040
 8005310:	40020058 	.word	0x40020058
 8005314:	40020070 	.word	0x40020070
 8005318:	40020088 	.word	0x40020088
 800531c:	400200a0 	.word	0x400200a0
 8005320:	400200b8 	.word	0x400200b8
 8005324:	40020410 	.word	0x40020410
 8005328:	40020428 	.word	0x40020428
 800532c:	40020440 	.word	0x40020440
 8005330:	40020458 	.word	0x40020458
 8005334:	40020470 	.word	0x40020470
 8005338:	40020488 	.word	0x40020488
 800533c:	400204a0 	.word	0x400204a0
 8005340:	400204b8 	.word	0x400204b8
 8005344:	58025408 	.word	0x58025408
 8005348:	5802541c 	.word	0x5802541c
 800534c:	58025430 	.word	0x58025430
 8005350:	58025444 	.word	0x58025444
 8005354:	58025458 	.word	0x58025458
 8005358:	5802546c 	.word	0x5802546c
 800535c:	58025480 	.word	0x58025480
 8005360:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a28      	ldr	r2, [pc, #160]	; (800540c <DMA_SetConfig+0x338>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d022      	beq.n	80053b4 <DMA_SetConfig+0x2e0>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a27      	ldr	r2, [pc, #156]	; (8005410 <DMA_SetConfig+0x33c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d01d      	beq.n	80053b4 <DMA_SetConfig+0x2e0>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a25      	ldr	r2, [pc, #148]	; (8005414 <DMA_SetConfig+0x340>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d018      	beq.n	80053b4 <DMA_SetConfig+0x2e0>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a24      	ldr	r2, [pc, #144]	; (8005418 <DMA_SetConfig+0x344>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d013      	beq.n	80053b4 <DMA_SetConfig+0x2e0>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a22      	ldr	r2, [pc, #136]	; (800541c <DMA_SetConfig+0x348>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00e      	beq.n	80053b4 <DMA_SetConfig+0x2e0>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a21      	ldr	r2, [pc, #132]	; (8005420 <DMA_SetConfig+0x34c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d009      	beq.n	80053b4 <DMA_SetConfig+0x2e0>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1f      	ldr	r2, [pc, #124]	; (8005424 <DMA_SetConfig+0x350>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d004      	beq.n	80053b4 <DMA_SetConfig+0x2e0>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1e      	ldr	r2, [pc, #120]	; (8005428 <DMA_SetConfig+0x354>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d101      	bne.n	80053b8 <DMA_SetConfig+0x2e4>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <DMA_SetConfig+0x2e6>
 80053b8:	2300      	movs	r3, #0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d020      	beq.n	8005400 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	2201      	movs	r2, #1
 80053c8:	409a      	lsls	r2, r3
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b40      	cmp	r3, #64	; 0x40
 80053dc:	d108      	bne.n	80053f0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	60da      	str	r2, [r3, #12]
}
 80053ee:	e007      	b.n	8005400 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	60da      	str	r2, [r3, #12]
}
 8005400:	bf00      	nop
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	58025408 	.word	0x58025408
 8005410:	5802541c 	.word	0x5802541c
 8005414:	58025430 	.word	0x58025430
 8005418:	58025444 	.word	0x58025444
 800541c:	58025458 	.word	0x58025458
 8005420:	5802546c 	.word	0x5802546c
 8005424:	58025480 	.word	0x58025480
 8005428:	58025494 	.word	0x58025494

0800542c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a42      	ldr	r2, [pc, #264]	; (8005544 <DMA_CalcBaseAndBitshift+0x118>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d04a      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a41      	ldr	r2, [pc, #260]	; (8005548 <DMA_CalcBaseAndBitshift+0x11c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d045      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a3f      	ldr	r2, [pc, #252]	; (800554c <DMA_CalcBaseAndBitshift+0x120>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d040      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a3e      	ldr	r2, [pc, #248]	; (8005550 <DMA_CalcBaseAndBitshift+0x124>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d03b      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a3c      	ldr	r2, [pc, #240]	; (8005554 <DMA_CalcBaseAndBitshift+0x128>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d036      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a3b      	ldr	r2, [pc, #236]	; (8005558 <DMA_CalcBaseAndBitshift+0x12c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d031      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a39      	ldr	r2, [pc, #228]	; (800555c <DMA_CalcBaseAndBitshift+0x130>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d02c      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a38      	ldr	r2, [pc, #224]	; (8005560 <DMA_CalcBaseAndBitshift+0x134>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d027      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a36      	ldr	r2, [pc, #216]	; (8005564 <DMA_CalcBaseAndBitshift+0x138>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d022      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a35      	ldr	r2, [pc, #212]	; (8005568 <DMA_CalcBaseAndBitshift+0x13c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d01d      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a33      	ldr	r2, [pc, #204]	; (800556c <DMA_CalcBaseAndBitshift+0x140>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d018      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a32      	ldr	r2, [pc, #200]	; (8005570 <DMA_CalcBaseAndBitshift+0x144>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d013      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a30      	ldr	r2, [pc, #192]	; (8005574 <DMA_CalcBaseAndBitshift+0x148>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00e      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a2f      	ldr	r2, [pc, #188]	; (8005578 <DMA_CalcBaseAndBitshift+0x14c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d009      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2d      	ldr	r2, [pc, #180]	; (800557c <DMA_CalcBaseAndBitshift+0x150>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <DMA_CalcBaseAndBitshift+0xa8>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a2c      	ldr	r2, [pc, #176]	; (8005580 <DMA_CalcBaseAndBitshift+0x154>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d101      	bne.n	80054d8 <DMA_CalcBaseAndBitshift+0xac>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <DMA_CalcBaseAndBitshift+0xae>
 80054d8:	2300      	movs	r3, #0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d024      	beq.n	8005528 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	3b10      	subs	r3, #16
 80054e6:	4a27      	ldr	r2, [pc, #156]	; (8005584 <DMA_CalcBaseAndBitshift+0x158>)
 80054e8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	4a24      	ldr	r2, [pc, #144]	; (8005588 <DMA_CalcBaseAndBitshift+0x15c>)
 80054f8:	5cd3      	ldrb	r3, [r2, r3]
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d908      	bls.n	8005518 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	4b1f      	ldr	r3, [pc, #124]	; (800558c <DMA_CalcBaseAndBitshift+0x160>)
 800550e:	4013      	ands	r3, r2
 8005510:	1d1a      	adds	r2, r3, #4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	659a      	str	r2, [r3, #88]	; 0x58
 8005516:	e00d      	b.n	8005534 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	4b1b      	ldr	r3, [pc, #108]	; (800558c <DMA_CalcBaseAndBitshift+0x160>)
 8005520:	4013      	ands	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6593      	str	r3, [r2, #88]	; 0x58
 8005526:	e005      	b.n	8005534 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	40020010 	.word	0x40020010
 8005548:	40020028 	.word	0x40020028
 800554c:	40020040 	.word	0x40020040
 8005550:	40020058 	.word	0x40020058
 8005554:	40020070 	.word	0x40020070
 8005558:	40020088 	.word	0x40020088
 800555c:	400200a0 	.word	0x400200a0
 8005560:	400200b8 	.word	0x400200b8
 8005564:	40020410 	.word	0x40020410
 8005568:	40020428 	.word	0x40020428
 800556c:	40020440 	.word	0x40020440
 8005570:	40020458 	.word	0x40020458
 8005574:	40020470 	.word	0x40020470
 8005578:	40020488 	.word	0x40020488
 800557c:	400204a0 	.word	0x400204a0
 8005580:	400204b8 	.word	0x400204b8
 8005584:	aaaaaaab 	.word	0xaaaaaaab
 8005588:	0801453c 	.word	0x0801453c
 800558c:	fffffc00 	.word	0xfffffc00

08005590 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d120      	bne.n	80055e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d858      	bhi.n	800565e <DMA_CheckFifoParam+0xce>
 80055ac:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <DMA_CheckFifoParam+0x24>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	080055c5 	.word	0x080055c5
 80055b8:	080055d7 	.word	0x080055d7
 80055bc:	080055c5 	.word	0x080055c5
 80055c0:	0800565f 	.word	0x0800565f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d048      	beq.n	8005662 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055d4:	e045      	b.n	8005662 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055de:	d142      	bne.n	8005666 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055e4:	e03f      	b.n	8005666 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ee:	d123      	bne.n	8005638 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d838      	bhi.n	800566a <DMA_CheckFifoParam+0xda>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <DMA_CheckFifoParam+0x70>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005611 	.word	0x08005611
 8005604:	08005617 	.word	0x08005617
 8005608:	08005611 	.word	0x08005611
 800560c:	08005629 	.word	0x08005629
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]
        break;
 8005614:	e030      	b.n	8005678 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d025      	beq.n	800566e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005626:	e022      	b.n	800566e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005630:	d11f      	bne.n	8005672 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005636:	e01c      	b.n	8005672 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563c:	2b02      	cmp	r3, #2
 800563e:	d902      	bls.n	8005646 <DMA_CheckFifoParam+0xb6>
 8005640:	2b03      	cmp	r3, #3
 8005642:	d003      	beq.n	800564c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005644:	e018      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]
        break;
 800564a:	e015      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00e      	beq.n	8005676 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
    break;
 800565c:	e00b      	b.n	8005676 <DMA_CheckFifoParam+0xe6>
        break;
 800565e:	bf00      	nop
 8005660:	e00a      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
        break;
 8005662:	bf00      	nop
 8005664:	e008      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
        break;
 8005666:	bf00      	nop
 8005668:	e006      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
        break;
 800566a:	bf00      	nop
 800566c:	e004      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
        break;
 800566e:	bf00      	nop
 8005670:	e002      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
        break;
 8005672:	bf00      	nop
 8005674:	e000      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
    break;
 8005676:	bf00      	nop
    }
  }

  return status;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop

08005688 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a38      	ldr	r2, [pc, #224]	; (800577c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d022      	beq.n	80056e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a36      	ldr	r2, [pc, #216]	; (8005780 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01d      	beq.n	80056e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a35      	ldr	r2, [pc, #212]	; (8005784 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d018      	beq.n	80056e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a33      	ldr	r2, [pc, #204]	; (8005788 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a32      	ldr	r2, [pc, #200]	; (800578c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00e      	beq.n	80056e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a30      	ldr	r2, [pc, #192]	; (8005790 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d009      	beq.n	80056e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a2f      	ldr	r2, [pc, #188]	; (8005794 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d004      	beq.n	80056e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a2d      	ldr	r2, [pc, #180]	; (8005798 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d101      	bne.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01a      	beq.n	8005726 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	3b08      	subs	r3, #8
 80056f8:	4a28      	ldr	r2, [pc, #160]	; (800579c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	091b      	lsrs	r3, r3, #4
 8005700:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4b26      	ldr	r3, [pc, #152]	; (80057a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	461a      	mov	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a24      	ldr	r2, [pc, #144]	; (80057a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005714:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	2201      	movs	r2, #1
 800571e:	409a      	lsls	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005724:	e024      	b.n	8005770 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	3b10      	subs	r3, #16
 800572e:	4a1e      	ldr	r2, [pc, #120]	; (80057a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	091b      	lsrs	r3, r3, #4
 8005736:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4a1c      	ldr	r2, [pc, #112]	; (80057ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d806      	bhi.n	800574e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d902      	bls.n	800574e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3308      	adds	r3, #8
 800574c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4b18      	ldr	r3, [pc, #96]	; (80057b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	461a      	mov	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a16      	ldr	r2, [pc, #88]	; (80057b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005760:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2201      	movs	r2, #1
 800576a:	409a      	lsls	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	58025408 	.word	0x58025408
 8005780:	5802541c 	.word	0x5802541c
 8005784:	58025430 	.word	0x58025430
 8005788:	58025444 	.word	0x58025444
 800578c:	58025458 	.word	0x58025458
 8005790:	5802546c 	.word	0x5802546c
 8005794:	58025480 	.word	0x58025480
 8005798:	58025494 	.word	0x58025494
 800579c:	cccccccd 	.word	0xcccccccd
 80057a0:	16009600 	.word	0x16009600
 80057a4:	58025880 	.word	0x58025880
 80057a8:	aaaaaaab 	.word	0xaaaaaaab
 80057ac:	400204b8 	.word	0x400204b8
 80057b0:	4002040f 	.word	0x4002040f
 80057b4:	10008200 	.word	0x10008200
 80057b8:	40020880 	.word	0x40020880

080057bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d04a      	beq.n	8005868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d847      	bhi.n	8005868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a25      	ldr	r2, [pc, #148]	; (8005874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d022      	beq.n	8005828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a24      	ldr	r2, [pc, #144]	; (8005878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d01d      	beq.n	8005828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a22      	ldr	r2, [pc, #136]	; (800587c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d018      	beq.n	8005828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a21      	ldr	r2, [pc, #132]	; (8005880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d013      	beq.n	8005828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00e      	beq.n	8005828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1e      	ldr	r2, [pc, #120]	; (8005888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d009      	beq.n	8005828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1c      	ldr	r2, [pc, #112]	; (800588c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d004      	beq.n	8005828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d101      	bne.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4b17      	ldr	r3, [pc, #92]	; (8005894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	461a      	mov	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a15      	ldr	r2, [pc, #84]	; (8005898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005844:	671a      	str	r2, [r3, #112]	; 0x70
 8005846:	e009      	b.n	800585c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4b14      	ldr	r3, [pc, #80]	; (800589c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	461a      	mov	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a11      	ldr	r2, [pc, #68]	; (80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800585a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3b01      	subs	r3, #1
 8005860:	2201      	movs	r2, #1
 8005862:	409a      	lsls	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	58025408 	.word	0x58025408
 8005878:	5802541c 	.word	0x5802541c
 800587c:	58025430 	.word	0x58025430
 8005880:	58025444 	.word	0x58025444
 8005884:	58025458 	.word	0x58025458
 8005888:	5802546c 	.word	0x5802546c
 800588c:	58025480 	.word	0x58025480
 8005890:	58025494 	.word	0x58025494
 8005894:	1600963f 	.word	0x1600963f
 8005898:	58025940 	.word	0x58025940
 800589c:	1000823f 	.word	0x1000823f
 80058a0:	40020940 	.word	0x40020940

080058a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e0c6      	b.n	8005a44 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d102      	bne.n	80058c4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fb fce2 	bl	8001288 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2223      	movs	r2, #35	; 0x23
 80058c8:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ca:	4b60      	ldr	r3, [pc, #384]	; (8005a4c <HAL_ETH_Init+0x1a8>)
 80058cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058d0:	4a5e      	ldr	r2, [pc, #376]	; (8005a4c <HAL_ETH_Init+0x1a8>)
 80058d2:	f043 0302 	orr.w	r3, r3, #2
 80058d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80058da:	4b5c      	ldr	r3, [pc, #368]	; (8005a4c <HAL_ETH_Init+0x1a8>)
 80058dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	60bb      	str	r3, [r7, #8]
 80058e6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	7a1b      	ldrb	r3, [r3, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d103      	bne.n	80058f8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80058f0:	2000      	movs	r0, #0
 80058f2:	f7fc f8c3 	bl	8001a7c <HAL_SYSCFG_ETHInterfaceSelect>
 80058f6:	e003      	b.n	8005900 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80058f8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80058fc:	f7fc f8be 	bl	8001a7c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005918:	f7fc f876 	bl	8001a08 <HAL_GetTick>
 800591c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800591e:	e00f      	b.n	8005940 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005920:	f7fc f872 	bl	8001a08 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800592e:	d907      	bls.n	8005940 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2204      	movs	r2, #4
 8005934:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	22e0      	movs	r2, #224	; 0xe0
 800593a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e081      	b.n	8005a44 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e6      	bne.n	8005920 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fac0 	bl	8005ed8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005958:	f002 fe86 	bl	8008668 <HAL_RCC_GetHCLKFreq>
 800595c:	4602      	mov	r2, r0
 800595e:	4b3c      	ldr	r3, [pc, #240]	; (8005a50 <HAL_ETH_Init+0x1ac>)
 8005960:	fba3 2302 	umull	r2, r3, r3, r2
 8005964:	0c9a      	lsrs	r2, r3, #18
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3a01      	subs	r2, #1
 800596c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fa13 	bl	8005d9c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800598c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005990:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	22e0      	movs	r2, #224	; 0xe0
 80059a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e04a      	b.n	8005a44 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	f241 1308 	movw	r3, #4360	; 0x1108
 80059b6:	4413      	add	r3, r2
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4b26      	ldr	r3, [pc, #152]	; (8005a54 <HAL_ETH_Init+0x1b0>)
 80059bc:	4013      	ands	r3, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6952      	ldr	r2, [r2, #20]
 80059c2:	0052      	lsls	r2, r2, #1
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	6809      	ldr	r1, [r1, #0]
 80059c8:	431a      	orrs	r2, r3
 80059ca:	f241 1308 	movw	r3, #4360	; 0x1108
 80059ce:	440b      	add	r3, r1
 80059d0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fad8 	bl	8005f88 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fb1c 	bl	8006016 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	3305      	adds	r3, #5
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	021a      	lsls	r2, r3, #8
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	3304      	adds	r3, #4
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	4619      	mov	r1, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	3303      	adds	r3, #3
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	061a      	lsls	r2, r3, #24
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	3302      	adds	r3, #2
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	041b      	lsls	r3, r3, #16
 8005a10:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	3301      	adds	r3, #1
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005a1c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005a2a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005a2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2210      	movs	r2, #16
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2210      	movs	r2, #16
 8005a40:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	58024400 	.word	0x58024400
 8005a50:	431bde83 	.word	0x431bde83
 8005a54:	ffff8001 	.word	0xffff8001

08005a58 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005a6a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	791b      	ldrb	r3, [r3, #4]
 8005a70:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005a72:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	7b1b      	ldrb	r3, [r3, #12]
 8005a78:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005a7a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	7b5b      	ldrb	r3, [r3, #13]
 8005a80:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a82:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	7b9b      	ldrb	r3, [r3, #14]
 8005a88:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	7bdb      	ldrb	r3, [r3, #15]
 8005a90:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a92:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	7c12      	ldrb	r2, [r2, #16]
 8005a98:	2a00      	cmp	r2, #0
 8005a9a:	d102      	bne.n	8005aa2 <ETH_SetMACConfig+0x4a>
 8005a9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005aa0:	e000      	b.n	8005aa4 <ETH_SetMACConfig+0x4c>
 8005aa2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005aa4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	7c52      	ldrb	r2, [r2, #17]
 8005aaa:	2a00      	cmp	r2, #0
 8005aac:	d102      	bne.n	8005ab4 <ETH_SetMACConfig+0x5c>
 8005aae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ab2:	e000      	b.n	8005ab6 <ETH_SetMACConfig+0x5e>
 8005ab4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005ab6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	7c9b      	ldrb	r3, [r3, #18]
 8005abc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005abe:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005ac4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005aca:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	7f1b      	ldrb	r3, [r3, #28]
 8005ad0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005ad2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	7f5b      	ldrb	r3, [r3, #29]
 8005ad8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005ada:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	7f92      	ldrb	r2, [r2, #30]
 8005ae0:	2a00      	cmp	r2, #0
 8005ae2:	d102      	bne.n	8005aea <ETH_SetMACConfig+0x92>
 8005ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ae8:	e000      	b.n	8005aec <ETH_SetMACConfig+0x94>
 8005aea:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005aec:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	7fdb      	ldrb	r3, [r3, #31]
 8005af2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005af4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005afc:	2a00      	cmp	r2, #0
 8005afe:	d102      	bne.n	8005b06 <ETH_SetMACConfig+0xae>
 8005b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b04:	e000      	b.n	8005b08 <ETH_SetMACConfig+0xb0>
 8005b06:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005b08:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005b0e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b16:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005b18:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	4b56      	ldr	r3, [pc, #344]	; (8005c84 <ETH_SetMACConfig+0x22c>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6812      	ldr	r2, [r2, #0]
 8005b30:	68f9      	ldr	r1, [r7, #12]
 8005b32:	430b      	orrs	r3, r1
 8005b34:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b42:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005b44:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b4c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005b4e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b56:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005b58:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005b60:	2a00      	cmp	r2, #0
 8005b62:	d102      	bne.n	8005b6a <ETH_SetMACConfig+0x112>
 8005b64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b68:	e000      	b.n	8005b6c <ETH_SetMACConfig+0x114>
 8005b6a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005b6c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	4b42      	ldr	r3, [pc, #264]	; (8005c88 <ETH_SetMACConfig+0x230>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	68f9      	ldr	r1, [r7, #12]
 8005b86:	430b      	orrs	r3, r1
 8005b88:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b90:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	4b3a      	ldr	r3, [pc, #232]	; (8005c8c <ETH_SetMACConfig+0x234>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6812      	ldr	r2, [r2, #0]
 8005ba8:	68f9      	ldr	r1, [r7, #12]
 8005baa:	430b      	orrs	r3, r1
 8005bac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005bb4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005bba:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005bc2:	2a00      	cmp	r2, #0
 8005bc4:	d101      	bne.n	8005bca <ETH_SetMACConfig+0x172>
 8005bc6:	2280      	movs	r2, #128	; 0x80
 8005bc8:	e000      	b.n	8005bcc <ETH_SetMACConfig+0x174>
 8005bca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005bcc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bde:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005be2:	4013      	ands	r3, r2
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	68f9      	ldr	r1, [r7, #12]
 8005bea:	430b      	orrs	r3, r1
 8005bec:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005bf4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005bfc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0a:	f023 0103 	bic.w	r1, r3, #3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005c22:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005c3e:	2a00      	cmp	r2, #0
 8005c40:	d101      	bne.n	8005c46 <ETH_SetMACConfig+0x1ee>
 8005c42:	2240      	movs	r2, #64	; 0x40
 8005c44:	e000      	b.n	8005c48 <ETH_SetMACConfig+0x1f0>
 8005c46:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005c48:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005c50:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005c52:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005c5a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005c68:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	00048083 	.word	0x00048083
 8005c88:	c0f88000 	.word	0xc0f88000
 8005c8c:	fffffef0 	.word	0xfffffef0

08005c90 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	4b38      	ldr	r3, [pc, #224]	; (8005d88 <ETH_SetDMAConfig+0xf8>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	6812      	ldr	r2, [r2, #0]
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	6809      	ldr	r1, [r1, #0]
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005cb6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	791b      	ldrb	r3, [r3, #4]
 8005cbc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005cc2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	7b1b      	ldrb	r3, [r3, #12]
 8005cc8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	f241 0304 	movw	r3, #4100	; 0x1004
 8005cd6:	4413      	add	r3, r2
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b2c      	ldr	r3, [pc, #176]	; (8005d8c <ETH_SetDMAConfig+0xfc>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6811      	ldr	r1, [r2, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	f241 0304 	movw	r3, #4100	; 0x1004
 8005cea:	440b      	add	r3, r1
 8005cec:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	7b5b      	ldrb	r3, [r3, #13]
 8005cf2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4b22      	ldr	r3, [pc, #136]	; (8005d90 <ETH_SetDMAConfig+0x100>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6811      	ldr	r1, [r2, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	431a      	orrs	r2, r3
 8005d12:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005d16:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	7d1b      	ldrb	r3, [r3, #20]
 8005d20:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d22:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	7f5b      	ldrb	r3, [r3, #29]
 8005d28:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	f241 1304 	movw	r3, #4356	; 0x1104
 8005d36:	4413      	add	r3, r2
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	4b16      	ldr	r3, [pc, #88]	; (8005d94 <ETH_SetDMAConfig+0x104>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6811      	ldr	r1, [r2, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	431a      	orrs	r2, r3
 8005d46:	f241 1304 	movw	r3, #4356	; 0x1104
 8005d4a:	440b      	add	r3, r1
 8005d4c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	7f1b      	ldrb	r3, [r3, #28]
 8005d52:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	f241 1308 	movw	r3, #4360	; 0x1108
 8005d64:	4413      	add	r3, r2
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <ETH_SetDMAConfig+0x108>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6811      	ldr	r1, [r2, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	f241 1308 	movw	r3, #4360	; 0x1108
 8005d78:	440b      	add	r3, r1
 8005d7a:	601a      	str	r2, [r3, #0]
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	ffff87fd 	.word	0xffff87fd
 8005d8c:	ffff2ffe 	.word	0xffff2ffe
 8005d90:	fffec000 	.word	0xfffec000
 8005d94:	ffc0efef 	.word	0xffc0efef
 8005d98:	7fc0ffff 	.word	0x7fc0ffff

08005d9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b0a4      	sub	sp, #144	; 0x90
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005da4:	2301      	movs	r3, #1
 8005da6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005daa:	2300      	movs	r3, #0
 8005dac:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ddc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005de8:	2300      	movs	r3, #0
 8005dea:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005df4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005df8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005e00:	2300      	movs	r3, #0
 8005e02:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005e16:	2300      	movs	r3, #0
 8005e18:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005e22:	2300      	movs	r3, #0
 8005e24:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005e34:	2320      	movs	r3, #32
 8005e36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005e40:	2300      	movs	r3, #0
 8005e42:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005e46:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005e4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e50:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005e76:	2300      	movs	r3, #0
 8005e78:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff fde6 	bl	8005a58 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005e90:	2301      	movs	r3, #1
 8005e92:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005ea6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005eaa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005eac:	2300      	movs	r3, #0
 8005eae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005eb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005eb4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005ebc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005ec0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005ec2:	f107 0308 	add.w	r3, r7, #8
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff fee1 	bl	8005c90 <ETH_SetDMAConfig>
}
 8005ece:	bf00      	nop
 8005ed0:	3790      	adds	r7, #144	; 0x90
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005ef2:	f002 fbb9 	bl	8008668 <HAL_RCC_GetHCLKFreq>
 8005ef6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4a1e      	ldr	r2, [pc, #120]	; (8005f74 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d908      	bls.n	8005f12 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4a1d      	ldr	r2, [pc, #116]	; (8005f78 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d804      	bhi.n	8005f12 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	e027      	b.n	8005f62 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	4a18      	ldr	r2, [pc, #96]	; (8005f78 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d908      	bls.n	8005f2c <ETH_MAC_MDIO_ClkConfig+0x54>
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	4a17      	ldr	r2, [pc, #92]	; (8005f7c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d804      	bhi.n	8005f2c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e01a      	b.n	8005f62 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4a13      	ldr	r2, [pc, #76]	; (8005f7c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d903      	bls.n	8005f3c <ETH_MAC_MDIO_ClkConfig+0x64>
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d911      	bls.n	8005f60 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4a10      	ldr	r2, [pc, #64]	; (8005f80 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d908      	bls.n	8005f56 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4a0f      	ldr	r2, [pc, #60]	; (8005f84 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d804      	bhi.n	8005f56 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e005      	b.n	8005f62 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	e000      	b.n	8005f62 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005f60:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	01312cff 	.word	0x01312cff
 8005f78:	02160ebf 	.word	0x02160ebf
 8005f7c:	039386ff 	.word	0x039386ff
 8005f80:	05f5e0ff 	.word	0x05f5e0ff
 8005f84:	08f0d17f 	.word	0x08f0d17f

08005f88 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e01d      	b.n	8005fd2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68d9      	ldr	r1, [r3, #12]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	4413      	add	r3, r2
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	440b      	add	r3, r1
 8005fa6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	3206      	adds	r2, #6
 8005fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d9de      	bls.n	8005f96 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	f241 132c 	movw	r3, #4396	; 0x112c
 8005fe6:	4413      	add	r3, r2
 8005fe8:	2203      	movs	r2, #3
 8005fea:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68d9      	ldr	r1, [r3, #12]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	f241 1314 	movw	r3, #4372	; 0x1114
 8005ff8:	4413      	add	r3, r2
 8005ffa:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006008:	601a      	str	r2, [r3, #0]
}
 800600a:	bf00      	nop
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e024      	b.n	800606e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6919      	ldr	r1, [r3, #16]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4613      	mov	r3, r2
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	4413      	add	r3, r2
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	440b      	add	r3, r1
 8006034:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2200      	movs	r2, #0
 8006040:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2200      	movs	r2, #0
 8006046:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2200      	movs	r2, #0
 800604c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2200      	movs	r2, #0
 8006052:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2200      	movs	r2, #0
 8006058:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	330a      	adds	r3, #10
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3301      	adds	r3, #1
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b03      	cmp	r3, #3
 8006072:	d9d7      	bls.n	8006024 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	f241 1330 	movw	r3, #4400	; 0x1130
 800609a:	4413      	add	r3, r2
 800609c:	2203      	movs	r2, #3
 800609e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6919      	ldr	r1, [r3, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	f241 131c 	movw	r3, #4380	; 0x111c
 80060ac:	4413      	add	r3, r2
 80060ae:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	f241 1328 	movw	r3, #4392	; 0x1128
 80060c0:	4413      	add	r3, r2
 80060c2:	6019      	str	r1, [r3, #0]
}
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b098      	sub	sp, #96	; 0x60
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80060d8:	4a84      	ldr	r2, [pc, #528]	; (80062ec <HAL_FDCAN_Init+0x21c>)
 80060da:	f107 030c 	add.w	r3, r7, #12
 80060de:	4611      	mov	r1, r2
 80060e0:	224c      	movs	r2, #76	; 0x4c
 80060e2:	4618      	mov	r0, r3
 80060e4:	f00e f9a2 	bl	801442c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e1ca      	b.n	8006488 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a7e      	ldr	r2, [pc, #504]	; (80062f0 <HAL_FDCAN_Init+0x220>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d106      	bne.n	800610a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006104:	461a      	mov	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7fb f980 	bl	8001424 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0210 	bic.w	r2, r2, #16
 8006132:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006134:	f7fb fc68 	bl	8001a08 <HAL_GetTick>
 8006138:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800613a:	e014      	b.n	8006166 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800613c:	f7fb fc64 	bl	8001a08 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b0a      	cmp	r3, #10
 8006148:	d90d      	bls.n	8006166 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006150:	f043 0201 	orr.w	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2203      	movs	r2, #3
 800615e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e190      	b.n	8006488 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b08      	cmp	r3, #8
 8006172:	d0e3      	beq.n	800613c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006184:	f7fb fc40 	bl	8001a08 <HAL_GetTick>
 8006188:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800618a:	e014      	b.n	80061b6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800618c:	f7fb fc3c 	bl	8001a08 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b0a      	cmp	r3, #10
 8006198:	d90d      	bls.n	80061b6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061a0:	f043 0201 	orr.w	r2, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2203      	movs	r2, #3
 80061ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e168      	b.n	8006488 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0e3      	beq.n	800618c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0202 	orr.w	r2, r2, #2
 80061d2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	7c1b      	ldrb	r3, [r3, #16]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d108      	bne.n	80061ee <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ea:	619a      	str	r2, [r3, #24]
 80061ec:	e007      	b.n	80061fe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699a      	ldr	r2, [r3, #24]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	7c5b      	ldrb	r3, [r3, #17]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d108      	bne.n	8006218 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699a      	ldr	r2, [r3, #24]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006214:	619a      	str	r2, [r3, #24]
 8006216:	e007      	b.n	8006228 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006226:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	7c9b      	ldrb	r3, [r3, #18]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d108      	bne.n	8006242 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800623e:	619a      	str	r2, [r3, #24]
 8006240:	e007      	b.n	8006252 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699a      	ldr	r2, [r3, #24]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006250:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699a      	ldr	r2, [r3, #24]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006276:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0210 	bic.w	r2, r2, #16
 8006286:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d108      	bne.n	80062a2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0204 	orr.w	r2, r2, #4
 800629e:	619a      	str	r2, [r3, #24]
 80062a0:	e030      	b.n	8006304 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d02c      	beq.n	8006304 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d020      	beq.n	80062f4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	699a      	ldr	r2, [r3, #24]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062c0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0210 	orr.w	r2, r2, #16
 80062d0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d114      	bne.n	8006304 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	699a      	ldr	r2, [r3, #24]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0220 	orr.w	r2, r2, #32
 80062e8:	619a      	str	r2, [r3, #24]
 80062ea:	e00b      	b.n	8006304 <HAL_FDCAN_Init+0x234>
 80062ec:	0801447c 	.word	0x0801447c
 80062f0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0220 	orr.w	r2, r2, #32
 8006302:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	3b01      	subs	r3, #1
 800630a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	3b01      	subs	r3, #1
 8006312:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006314:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800631c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	3b01      	subs	r3, #1
 8006326:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800632c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800632e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006338:	d115      	bne.n	8006366 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	3b01      	subs	r3, #1
 8006346:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006348:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	3b01      	subs	r3, #1
 8006350:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006352:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	3b01      	subs	r3, #1
 800635c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006362:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006364:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638c:	4413      	add	r3, r2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d012      	beq.n	80063b8 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800639a:	f023 0107 	bic.w	r1, r3, #7
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80063a8:	4413      	add	r3, r2
 80063aa:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d012      	beq.n	80063e6 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80063c8:	f023 0107 	bic.w	r1, r3, #7
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80063d6:	4413      	add	r3, r2
 80063d8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d013      	beq.n	8006416 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80063f6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006404:	4413      	add	r3, r2
 8006406:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800640a:	011a      	lsls	r2, r3, #4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641a:	2b00      	cmp	r3, #0
 800641c:	d013      	beq.n	8006446 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006426:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006434:	4413      	add	r3, r2
 8006436:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800643a:	021a      	lsls	r2, r3, #8
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a11      	ldr	r2, [pc, #68]	; (8006490 <HAL_FDCAN_Init+0x3c0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d107      	bne.n	8006460 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f022 0203 	bic.w	r2, r2, #3
 800645e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fcfb 	bl	8006e74 <FDCAN_CalcultateRamBlockAddresses>
 800647e:	4603      	mov	r3, r0
 8006480:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006484:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006488:	4618      	mov	r0, r3
 800648a:	3760      	adds	r7, #96	; 0x60
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	4000a000 	.word	0x4000a000

08006494 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d111      	bne.n	80064cc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0201 	bic.w	r2, r2, #1
 80064be:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	e008      	b.n	80064de <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064d2:	f043 0204 	orr.w	r2, r3, #4
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
  }
}
 80064de:	4618      	mov	r0, r3
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
	...

080064ec <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b08b      	sub	sp, #44	; 0x2c
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006504:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006506:	7efb      	ldrb	r3, [r7, #27]
 8006508:	2b02      	cmp	r3, #2
 800650a:	f040 811d 	bne.w	8006748 <HAL_FDCAN_GetRxMessage+0x25c>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	d136      	bne.n	8006582 <HAL_FDCAN_GetRxMessage+0x96>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800651c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d109      	bne.n	8006538 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800652a:	f043 0220 	orr.w	r2, r3, #32
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e110      	b.n	800675a <HAL_FDCAN_GetRxMessage+0x26e>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006544:	2b00      	cmp	r3, #0
 8006546:	d109      	bne.n	800655c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800654e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e0fe      	b.n	800675a <HAL_FDCAN_GetRxMessage+0x26e>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006564:	0a1b      	lsrs	r3, r3, #8
 8006566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800656a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006574:	69f9      	ldr	r1, [r7, #28]
 8006576:	fb01 f303 	mul.w	r3, r1, r3
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
 8006580:	e052      	b.n	8006628 <HAL_FDCAN_GetRxMessage+0x13c>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b41      	cmp	r3, #65	; 0x41
 8006586:	d136      	bne.n	80065f6 <HAL_FDCAN_GetRxMessage+0x10a>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006590:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d109      	bne.n	80065ac <HAL_FDCAN_GetRxMessage+0xc0>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800659e:	f043 0220 	orr.w	r2, r3, #32
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e0d6      	b.n	800675a <HAL_FDCAN_GetRxMessage+0x26e>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80065b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <HAL_FDCAN_GetRxMessage+0xe4>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e0c4      	b.n	800675a <HAL_FDCAN_GetRxMessage+0x26e>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80065d8:	0a1b      	lsrs	r3, r3, #8
 80065da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065de:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e8:	69f9      	ldr	r1, [r7, #28]
 80065ea:	fb01 f303 	mul.w	r3, r1, r3
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
 80065f4:	e018      	b.n	8006628 <HAL_FDCAN_GetRxMessage+0x13c>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d309      	bcc.n	8006614 <HAL_FDCAN_GetRxMessage+0x128>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006606:	f043 0220 	orr.w	r2, r3, #32
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e0a2      	b.n	800675a <HAL_FDCAN_GetRxMessage+0x26e>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	fb01 f303 	mul.w	r3, r1, r3
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d107      	bne.n	800664c <HAL_FDCAN_GetRxMessage+0x160>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	0c9b      	lsrs	r3, r3, #18
 8006642:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	e005      	b.n	8006658 <HAL_FDCAN_GetRxMessage+0x16c>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	3304      	adds	r3, #4
 8006674:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	b29a      	uxth	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	0e1b      	lsrs	r3, r3, #24
 80066aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	0fda      	lsrs	r2, r3, #31
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	3304      	adds	r3, #4
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80066c6:	2300      	movs	r3, #0
 80066c8:	623b      	str	r3, [r7, #32]
 80066ca:	e00a      	b.n	80066e2 <HAL_FDCAN_GetRxMessage+0x1f6>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	441a      	add	r2, r3
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	440b      	add	r3, r1
 80066d8:	7812      	ldrb	r2, [r2, #0]
 80066da:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	3301      	adds	r3, #1
 80066e0:	623b      	str	r3, [r7, #32]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	0c1b      	lsrs	r3, r3, #16
 80066e8:	4a1f      	ldr	r2, [pc, #124]	; (8006768 <HAL_FDCAN_GetRxMessage+0x27c>)
 80066ea:	5cd3      	ldrb	r3, [r2, r3]
 80066ec:	461a      	mov	r2, r3
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d3eb      	bcc.n	80066cc <HAL_FDCAN_GetRxMessage+0x1e0>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d105      	bne.n	8006706 <HAL_FDCAN_GetRxMessage+0x21a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8006704:	e01e      	b.n	8006744 <HAL_FDCAN_GetRxMessage+0x258>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b41      	cmp	r3, #65	; 0x41
 800670a:	d105      	bne.n	8006718 <HAL_FDCAN_GetRxMessage+0x22c>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8006716:	e015      	b.n	8006744 <HAL_FDCAN_GetRxMessage+0x258>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b1f      	cmp	r3, #31
 800671c:	d808      	bhi.n	8006730 <HAL_FDCAN_GetRxMessage+0x244>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2101      	movs	r1, #1
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	fa01 f202 	lsl.w	r2, r1, r2
 800672a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800672e:	e009      	b.n	8006744 <HAL_FDCAN_GetRxMessage+0x258>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f003 021f 	and.w	r2, r3, #31
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2101      	movs	r1, #1
 800673c:	fa01 f202 	lsl.w	r2, r1, r2
 8006740:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	e008      	b.n	800675a <HAL_FDCAN_GetRxMessage+0x26e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800674e:	f043 0208 	orr.w	r2, r3, #8
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
  }
}
 800675a:	4618      	mov	r0, r3
 800675c:	372c      	adds	r7, #44	; 0x2c
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	08014544 	.word	0x08014544

0800676c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800677e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d002      	beq.n	800678c <HAL_FDCAN_ActivateNotification+0x20>
 8006786:	7dfb      	ldrb	r3, [r7, #23]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d155      	bne.n	8006838 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	4013      	ands	r3, r2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d108      	bne.n	80067ac <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0201 	orr.w	r2, r2, #1
 80067a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80067aa:	e014      	b.n	80067d6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	4013      	ands	r3, r2
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d108      	bne.n	80067ce <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0202 	orr.w	r2, r2, #2
 80067ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80067cc:	e003      	b.n	80067d6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2203      	movs	r2, #3
 80067d4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d009      	beq.n	80067f4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d009      	beq.n	8006812 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	430a      	orrs	r2, r1
 800680e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <HAL_FDCAN_ActivateNotification+0xec>)
 800681c:	4013      	ands	r3, r2
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	430b      	orrs	r3, r1
 8006824:	6553      	str	r3, [r2, #84]	; 0x54
 8006826:	4b0d      	ldr	r3, [pc, #52]	; (800685c <HAL_FDCAN_ActivateNotification+0xf0>)
 8006828:	695a      	ldr	r2, [r3, #20]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	0f9b      	lsrs	r3, r3, #30
 800682e:	490b      	ldr	r1, [pc, #44]	; (800685c <HAL_FDCAN_ActivateNotification+0xf0>)
 8006830:	4313      	orrs	r3, r2
 8006832:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	e008      	b.n	800684a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800683e:	f043 0202 	orr.w	r2, r3, #2
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	371c      	adds	r7, #28
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	3fcfffff 	.word	0x3fcfffff
 800685c:	4000a800 	.word	0x4000a800

08006860 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b092      	sub	sp, #72	; 0x48
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006868:	4b90      	ldr	r3, [pc, #576]	; (8006aac <HAL_FDCAN_IRQHandler+0x24c>)
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	079b      	lsls	r3, r3, #30
 800686e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006870:	4b8e      	ldr	r3, [pc, #568]	; (8006aac <HAL_FDCAN_IRQHandler+0x24c>)
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	079b      	lsls	r3, r3, #30
 8006876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006878:	4013      	ands	r3, r2
 800687a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006882:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006886:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006890:	4013      	ands	r3, r2
 8006892:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068a8:	4013      	ands	r3, r2
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068c0:	4013      	ands	r3, r2
 80068c2:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ca:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80068ce:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068d8:	4013      	ands	r3, r2
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e2:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80068e6:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f0:	4013      	ands	r3, r2
 80068f2:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d011      	beq.n	8006926 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00a      	beq.n	8006926 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006918:	651a      	str	r2, [r3, #80]	; 0x50
 800691a:	4b64      	ldr	r3, [pc, #400]	; (8006aac <HAL_FDCAN_IRQHandler+0x24c>)
 800691c:	2200      	movs	r2, #0
 800691e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fa5a 	bl	8006dda <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01e      	beq.n	8006972 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800693e:	2b00      	cmp	r3, #0
 8006940:	d017      	beq.n	8006972 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006956:	4013      	ands	r3, r2
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006962:	651a      	str	r2, [r3, #80]	; 0x50
 8006964:	4b51      	ldr	r3, [pc, #324]	; (8006aac <HAL_FDCAN_IRQHandler+0x24c>)
 8006966:	2200      	movs	r2, #0
 8006968:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800696a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fa0b 	bl	8006d88 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8006972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00d      	beq.n	8006994 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800697e:	4b4c      	ldr	r3, [pc, #304]	; (8006ab0 <HAL_FDCAN_IRQHandler+0x250>)
 8006980:	400b      	ands	r3, r1
 8006982:	6513      	str	r3, [r2, #80]	; 0x50
 8006984:	4a49      	ldr	r2, [pc, #292]	; (8006aac <HAL_FDCAN_IRQHandler+0x24c>)
 8006986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006988:	0f9b      	lsrs	r3, r3, #30
 800698a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800698c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f9c4 	bl	8006d1c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00d      	beq.n	80069b6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069a0:	4b43      	ldr	r3, [pc, #268]	; (8006ab0 <HAL_FDCAN_IRQHandler+0x250>)
 80069a2:	400b      	ands	r3, r1
 80069a4:	6513      	str	r3, [r2, #80]	; 0x50
 80069a6:	4a41      	ldr	r2, [pc, #260]	; (8006aac <HAL_FDCAN_IRQHandler+0x24c>)
 80069a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069aa:	0f9b      	lsrs	r3, r3, #30
 80069ac:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80069ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f9be 	bl	8006d32 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80069b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00d      	beq.n	80069d8 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069c2:	4b3b      	ldr	r3, [pc, #236]	; (8006ab0 <HAL_FDCAN_IRQHandler+0x250>)
 80069c4:	400b      	ands	r3, r1
 80069c6:	6513      	str	r3, [r2, #80]	; 0x50
 80069c8:	4a38      	ldr	r2, [pc, #224]	; (8006aac <HAL_FDCAN_IRQHandler+0x24c>)
 80069ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069cc:	0f9b      	lsrs	r3, r3, #30
 80069ce:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80069d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fa fa7c 	bl	8000ed0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00d      	beq.n	80069fa <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069e4:	4b32      	ldr	r3, [pc, #200]	; (8006ab0 <HAL_FDCAN_IRQHandler+0x250>)
 80069e6:	400b      	ands	r3, r1
 80069e8:	6513      	str	r3, [r2, #80]	; 0x50
 80069ea:	4a30      	ldr	r2, [pc, #192]	; (8006aac <HAL_FDCAN_IRQHandler+0x24c>)
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	0f9b      	lsrs	r3, r3, #30
 80069f0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80069f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f9a7 	bl	8006d48 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d011      	beq.n	8006a2c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a1e:	651a      	str	r2, [r3, #80]	; 0x50
 8006a20:	4b22      	ldr	r3, [pc, #136]	; (8006aac <HAL_FDCAN_IRQHandler+0x24c>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f999 	bl	8006d5e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d01e      	beq.n	8006a78 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d017      	beq.n	8006a78 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006a50:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a68:	651a      	str	r2, [r3, #80]	; 0x50
 8006a6a:	4b10      	ldr	r3, [pc, #64]	; (8006aac <HAL_FDCAN_IRQHandler+0x24c>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f97d 	bl	8006d72 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d016      	beq.n	8006ab4 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00f      	beq.n	8006ab4 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006a9c:	651a      	str	r2, [r3, #80]	; 0x50
 8006a9e:	4b03      	ldr	r3, [pc, #12]	; (8006aac <HAL_FDCAN_IRQHandler+0x24c>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f97a 	bl	8006d9e <HAL_FDCAN_RxBufferNewMessageCallback>
 8006aaa:	e003      	b.n	8006ab4 <HAL_FDCAN_IRQHandler+0x254>
 8006aac:	4000a800 	.word	0x4000a800
 8006ab0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d011      	beq.n	8006ae6 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ad8:	651a      	str	r2, [r3, #80]	; 0x50
 8006ada:	4b8d      	ldr	r3, [pc, #564]	; (8006d10 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f966 	bl	8006db2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d011      	beq.n	8006b18 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006b0a:	651a      	str	r2, [r3, #80]	; 0x50
 8006b0c:	4b80      	ldr	r3, [pc, #512]	; (8006d10 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f957 	bl	8006dc6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d016      	beq.n	8006b54 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00f      	beq.n	8006b54 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b3c:	651a      	str	r2, [r3, #80]	; 0x50
 8006b3e:	4b74      	ldr	r3, [pc, #464]	; (8006d10 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00d      	beq.n	8006b76 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b60:	4b6c      	ldr	r3, [pc, #432]	; (8006d14 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006b62:	400b      	ands	r3, r1
 8006b64:	6513      	str	r3, [r2, #80]	; 0x50
 8006b66:	4a6a      	ldr	r2, [pc, #424]	; (8006d10 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	0f9b      	lsrs	r3, r3, #30
 8006b6c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006b6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f946 	bl	8006e02 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d011      	beq.n	8006ba0 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b82:	4b64      	ldr	r3, [pc, #400]	; (8006d14 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006b84:	400b      	ands	r3, r1
 8006b86:	6513      	str	r3, [r2, #80]	; 0x50
 8006b88:	4a61      	ldr	r2, [pc, #388]	; (8006d10 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8c:	0f9b      	lsrs	r3, r3, #30
 8006b8e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a5c      	ldr	r2, [pc, #368]	; (8006d18 <HAL_FDCAN_IRQHandler+0x4b8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	f040 80a6 	bne.w	8006cf8 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 809e 	beq.w	8006cf8 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bde:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	6a3a      	ldr	r2, [r7, #32]
 8006be8:	4013      	ands	r3, r2
 8006bea:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006bf6:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	4013      	ands	r3, r2
 8006c02:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8006c0e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006c26:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4013      	ands	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d007      	beq.n	8006c4a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c40:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f8e7 	bl	8006e18 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	6a3a      	ldr	r2, [r7, #32]
 8006c56:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006c58:	6a39      	ldr	r1, [r7, #32]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f8e7 	bl	8006e2e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d01b      	beq.n	8006ca6 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d014      	beq.n	8006ca6 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c82:	0c1b      	lsrs	r3, r3, #16
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c92:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2240      	movs	r2, #64	; 0x40
 8006c9a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	6939      	ldr	r1, [r7, #16]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f8cf 	bl	8006e44 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d007      	beq.n	8006cbc <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006cb4:	69f9      	ldr	r1, [r7, #28]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f8d0 	bl	8006e5c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f873 	bl	8006dee <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006d08:	bf00      	nop
 8006d0a:	3748      	adds	r7, #72	; 0x48
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	4000a800 	.word	0x4000a800
 8006d14:	3fcfffff 	.word	0x3fcfffff
 8006d18:	4000a000 	.word	0x4000a000

08006d1c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
	...

08006e74 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e80:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006e8a:	4ba7      	ldr	r3, [pc, #668]	; (8007128 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	0091      	lsls	r1, r2, #2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6812      	ldr	r2, [r2, #0]
 8006e96:	430b      	orrs	r3, r1
 8006e98:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ea4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	041a      	lsls	r2, r3, #16
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006eca:	4b97      	ldr	r3, [pc, #604]	; (8007128 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	0091      	lsls	r1, r2, #2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	6812      	ldr	r2, [r2, #0]
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eec:	041a      	lsls	r2, r3, #16
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	4413      	add	r3, r2
 8006f02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006f0c:	4b86      	ldr	r3, [pc, #536]	; (8007128 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f0e:	4013      	ands	r3, r2
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	0091      	lsls	r1, r2, #2
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6812      	ldr	r2, [r2, #0]
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f26:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	041a      	lsls	r2, r3, #16
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	4413      	add	r3, r2
 8006f4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006f54:	4b74      	ldr	r3, [pc, #464]	; (8007128 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f56:	4013      	ands	r3, r2
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	0091      	lsls	r1, r2, #2
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6812      	ldr	r2, [r2, #0]
 8006f60:	430b      	orrs	r3, r1
 8006f62:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f6e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f76:	041a      	lsls	r2, r3, #16
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006f8a:	fb02 f303 	mul.w	r3, r2, r3
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	4413      	add	r3, r2
 8006f92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006f9c:	4b62      	ldr	r3, [pc, #392]	; (8007128 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	0091      	lsls	r1, r2, #2
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006fb6:	fb02 f303 	mul.w	r3, r2, r3
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006fc8:	4b57      	ldr	r3, [pc, #348]	; (8007128 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fca:	4013      	ands	r3, r2
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	0091      	lsls	r1, r2, #2
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fe2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fea:	041a      	lsls	r2, r3, #16
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	4413      	add	r3, r2
 8007000:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800700a:	4b47      	ldr	r3, [pc, #284]	; (8007128 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800700c:	4013      	ands	r3, r2
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	0091      	lsls	r1, r2, #2
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6812      	ldr	r2, [r2, #0]
 8007016:	430b      	orrs	r3, r1
 8007018:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007024:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800702c:	041a      	lsls	r2, r3, #16
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007040:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007048:	061a      	lsls	r2, r3, #24
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007058:	4b34      	ldr	r3, [pc, #208]	; (800712c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800705a:	4413      	add	r3, r2
 800705c:	009a      	lsls	r2, r3, #2
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	441a      	add	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	441a      	add	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800708e:	fb01 f303 	mul.w	r3, r1, r3
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	441a      	add	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80070a6:	fb01 f303 	mul.w	r3, r1, r3
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	441a      	add	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80070be:	fb01 f303 	mul.w	r3, r1, r3
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	441a      	add	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	441a      	add	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80070ee:	fb01 f303 	mul.w	r3, r1, r3
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	441a      	add	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800710a:	fb01 f303 	mul.w	r3, r1, r3
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	441a      	add	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711e:	4a04      	ldr	r2, [pc, #16]	; (8007130 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d915      	bls.n	8007150 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007124:	e006      	b.n	8007134 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007126:	bf00      	nop
 8007128:	ffff0003 	.word	0xffff0003
 800712c:	10002b00 	.word	0x10002b00
 8007130:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800713a:	f043 0220 	orr.w	r2, r3, #32
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2203      	movs	r2, #3
 8007148:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e010      	b.n	8007172 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007154:	60fb      	str	r3, [r7, #12]
 8007156:	e005      	b.n	8007164 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3304      	adds	r3, #4
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	429a      	cmp	r2, r3
 800716e:	d3f3      	bcc.n	8007158 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop

08007180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007180:	b480      	push	{r7}
 8007182:	b089      	sub	sp, #36	; 0x24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800718a:	2300      	movs	r3, #0
 800718c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800718e:	4b89      	ldr	r3, [pc, #548]	; (80073b4 <HAL_GPIO_Init+0x234>)
 8007190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007192:	e194      	b.n	80074be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	2101      	movs	r1, #1
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	fa01 f303 	lsl.w	r3, r1, r3
 80071a0:	4013      	ands	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 8186 	beq.w	80074b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d00b      	beq.n	80071cc <HAL_GPIO_Init+0x4c>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d007      	beq.n	80071cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80071c0:	2b11      	cmp	r3, #17
 80071c2:	d003      	beq.n	80071cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2b12      	cmp	r3, #18
 80071ca:	d130      	bne.n	800722e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	2203      	movs	r2, #3
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	43db      	mvns	r3, r3
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	4013      	ands	r3, r2
 80071e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	fa02 f303 	lsl.w	r3, r2, r3
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007202:	2201      	movs	r2, #1
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	fa02 f303 	lsl.w	r3, r2, r3
 800720a:	43db      	mvns	r3, r3
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	4013      	ands	r3, r2
 8007210:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	091b      	lsrs	r3, r3, #4
 8007218:	f003 0201 	and.w	r2, r3, #1
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	fa02 f303 	lsl.w	r3, r2, r3
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	4313      	orrs	r3, r2
 8007226:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	2203      	movs	r2, #3
 800723a:	fa02 f303 	lsl.w	r3, r2, r3
 800723e:	43db      	mvns	r3, r3
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	4013      	ands	r3, r2
 8007244:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	fa02 f303 	lsl.w	r3, r2, r3
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	4313      	orrs	r3, r2
 8007256:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d003      	beq.n	800726e <HAL_GPIO_Init+0xee>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b12      	cmp	r3, #18
 800726c:	d123      	bne.n	80072b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	08da      	lsrs	r2, r3, #3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3208      	adds	r2, #8
 8007276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	f003 0307 	and.w	r3, r3, #7
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	220f      	movs	r2, #15
 8007286:	fa02 f303 	lsl.w	r3, r2, r3
 800728a:	43db      	mvns	r3, r3
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	4013      	ands	r3, r2
 8007290:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	691a      	ldr	r2, [r3, #16]
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	fa02 f303 	lsl.w	r3, r2, r3
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	08da      	lsrs	r2, r3, #3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3208      	adds	r2, #8
 80072b0:	69b9      	ldr	r1, [r7, #24]
 80072b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	2203      	movs	r2, #3
 80072c2:	fa02 f303 	lsl.w	r3, r2, r3
 80072c6:	43db      	mvns	r3, r3
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	4013      	ands	r3, r2
 80072cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f003 0203 	and.w	r2, r3, #3
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	fa02 f303 	lsl.w	r3, r2, r3
 80072de:	69ba      	ldr	r2, [r7, #24]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 80e0 	beq.w	80074b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072f8:	4b2f      	ldr	r3, [pc, #188]	; (80073b8 <HAL_GPIO_Init+0x238>)
 80072fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072fe:	4a2e      	ldr	r2, [pc, #184]	; (80073b8 <HAL_GPIO_Init+0x238>)
 8007300:	f043 0302 	orr.w	r3, r3, #2
 8007304:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007308:	4b2b      	ldr	r3, [pc, #172]	; (80073b8 <HAL_GPIO_Init+0x238>)
 800730a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007316:	4a29      	ldr	r2, [pc, #164]	; (80073bc <HAL_GPIO_Init+0x23c>)
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	089b      	lsrs	r3, r3, #2
 800731c:	3302      	adds	r3, #2
 800731e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	220f      	movs	r2, #15
 800732e:	fa02 f303 	lsl.w	r3, r2, r3
 8007332:	43db      	mvns	r3, r3
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	4013      	ands	r3, r2
 8007338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a20      	ldr	r2, [pc, #128]	; (80073c0 <HAL_GPIO_Init+0x240>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d052      	beq.n	80073e8 <HAL_GPIO_Init+0x268>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a1f      	ldr	r2, [pc, #124]	; (80073c4 <HAL_GPIO_Init+0x244>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d031      	beq.n	80073ae <HAL_GPIO_Init+0x22e>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a1e      	ldr	r2, [pc, #120]	; (80073c8 <HAL_GPIO_Init+0x248>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d02b      	beq.n	80073aa <HAL_GPIO_Init+0x22a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a1d      	ldr	r2, [pc, #116]	; (80073cc <HAL_GPIO_Init+0x24c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d025      	beq.n	80073a6 <HAL_GPIO_Init+0x226>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a1c      	ldr	r2, [pc, #112]	; (80073d0 <HAL_GPIO_Init+0x250>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d01f      	beq.n	80073a2 <HAL_GPIO_Init+0x222>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a1b      	ldr	r2, [pc, #108]	; (80073d4 <HAL_GPIO_Init+0x254>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d019      	beq.n	800739e <HAL_GPIO_Init+0x21e>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a1a      	ldr	r2, [pc, #104]	; (80073d8 <HAL_GPIO_Init+0x258>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <HAL_GPIO_Init+0x21a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a19      	ldr	r2, [pc, #100]	; (80073dc <HAL_GPIO_Init+0x25c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00d      	beq.n	8007396 <HAL_GPIO_Init+0x216>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a18      	ldr	r2, [pc, #96]	; (80073e0 <HAL_GPIO_Init+0x260>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d007      	beq.n	8007392 <HAL_GPIO_Init+0x212>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a17      	ldr	r2, [pc, #92]	; (80073e4 <HAL_GPIO_Init+0x264>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d101      	bne.n	800738e <HAL_GPIO_Init+0x20e>
 800738a:	2309      	movs	r3, #9
 800738c:	e02d      	b.n	80073ea <HAL_GPIO_Init+0x26a>
 800738e:	230a      	movs	r3, #10
 8007390:	e02b      	b.n	80073ea <HAL_GPIO_Init+0x26a>
 8007392:	2308      	movs	r3, #8
 8007394:	e029      	b.n	80073ea <HAL_GPIO_Init+0x26a>
 8007396:	2307      	movs	r3, #7
 8007398:	e027      	b.n	80073ea <HAL_GPIO_Init+0x26a>
 800739a:	2306      	movs	r3, #6
 800739c:	e025      	b.n	80073ea <HAL_GPIO_Init+0x26a>
 800739e:	2305      	movs	r3, #5
 80073a0:	e023      	b.n	80073ea <HAL_GPIO_Init+0x26a>
 80073a2:	2304      	movs	r3, #4
 80073a4:	e021      	b.n	80073ea <HAL_GPIO_Init+0x26a>
 80073a6:	2303      	movs	r3, #3
 80073a8:	e01f      	b.n	80073ea <HAL_GPIO_Init+0x26a>
 80073aa:	2302      	movs	r3, #2
 80073ac:	e01d      	b.n	80073ea <HAL_GPIO_Init+0x26a>
 80073ae:	2301      	movs	r3, #1
 80073b0:	e01b      	b.n	80073ea <HAL_GPIO_Init+0x26a>
 80073b2:	bf00      	nop
 80073b4:	58000080 	.word	0x58000080
 80073b8:	58024400 	.word	0x58024400
 80073bc:	58000400 	.word	0x58000400
 80073c0:	58020000 	.word	0x58020000
 80073c4:	58020400 	.word	0x58020400
 80073c8:	58020800 	.word	0x58020800
 80073cc:	58020c00 	.word	0x58020c00
 80073d0:	58021000 	.word	0x58021000
 80073d4:	58021400 	.word	0x58021400
 80073d8:	58021800 	.word	0x58021800
 80073dc:	58021c00 	.word	0x58021c00
 80073e0:	58022000 	.word	0x58022000
 80073e4:	58022400 	.word	0x58022400
 80073e8:	2300      	movs	r3, #0
 80073ea:	69fa      	ldr	r2, [r7, #28]
 80073ec:	f002 0203 	and.w	r2, r2, #3
 80073f0:	0092      	lsls	r2, r2, #2
 80073f2:	4093      	lsls	r3, r2
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80073fa:	4938      	ldr	r1, [pc, #224]	; (80074dc <HAL_GPIO_Init+0x35c>)
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	089b      	lsrs	r3, r3, #2
 8007400:	3302      	adds	r3, #2
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	43db      	mvns	r3, r3
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	4013      	ands	r3, r2
 8007416:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	4313      	orrs	r3, r2
 800742a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	43db      	mvns	r3, r3
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	4013      	ands	r3, r2
 8007440:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800745c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	43db      	mvns	r3, r3
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	4013      	ands	r3, r2
 800746c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	4313      	orrs	r3, r2
 8007480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800748a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	43db      	mvns	r3, r3
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	4013      	ands	r3, r2
 800749a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80074b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	3301      	adds	r3, #1
 80074bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	fa22 f303 	lsr.w	r3, r2, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f47f ae63 	bne.w	8007194 <HAL_GPIO_Init+0x14>
  }
}
 80074ce:	bf00      	nop
 80074d0:	3724      	adds	r7, #36	; 0x24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	58000400 	.word	0x58000400

080074e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691a      	ldr	r2, [r3, #16]
 80074f0:	887b      	ldrh	r3, [r7, #2]
 80074f2:	4013      	ands	r3, r2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80074f8:	2301      	movs	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
 80074fc:	e001      	b.n	8007502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007502:	7bfb      	ldrb	r3, [r7, #15]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	807b      	strh	r3, [r7, #2]
 800751c:	4613      	mov	r3, r2
 800751e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007520:	787b      	ldrb	r3, [r7, #1]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007526:	887a      	ldrh	r2, [r7, #2]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800752c:	e003      	b.n	8007536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800752e:	887b      	ldrh	r3, [r7, #2]
 8007530:	041a      	lsls	r2, r3, #16
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	619a      	str	r2, [r3, #24]
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007542:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007544:	b08f      	sub	sp, #60	; 0x3c
 8007546:	af0a      	add	r7, sp, #40	; 0x28
 8007548:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e116      	b.n	8007782 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fa f88a 	bl	8001688 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2203      	movs	r2, #3
 8007578:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4618      	mov	r0, r3
 8007594:	f008 f844 	bl	800f620 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	603b      	str	r3, [r7, #0]
 800759e:	687e      	ldr	r6, [r7, #4]
 80075a0:	466d      	mov	r5, sp
 80075a2:	f106 0410 	add.w	r4, r6, #16
 80075a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80075b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80075b6:	1d33      	adds	r3, r6, #4
 80075b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075ba:	6838      	ldr	r0, [r7, #0]
 80075bc:	f007 ffce 	bl	800f55c <USB_CoreInit>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2202      	movs	r2, #2
 80075ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e0d7      	b.n	8007782 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2100      	movs	r1, #0
 80075d8:	4618      	mov	r0, r3
 80075da:	f008 f832 	bl	800f642 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]
 80075e2:	e04a      	b.n	800767a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80075e4:	7bfa      	ldrb	r2, [r7, #15]
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	4613      	mov	r3, r2
 80075ea:	00db      	lsls	r3, r3, #3
 80075ec:	1a9b      	subs	r3, r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	333d      	adds	r3, #61	; 0x3d
 80075f4:	2201      	movs	r2, #1
 80075f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80075f8:	7bfa      	ldrb	r2, [r7, #15]
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	4613      	mov	r3, r2
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	1a9b      	subs	r3, r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	333c      	adds	r3, #60	; 0x3c
 8007608:	7bfa      	ldrb	r2, [r7, #15]
 800760a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800760c:	7bfa      	ldrb	r2, [r7, #15]
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	b298      	uxth	r0, r3
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	4613      	mov	r3, r2
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	3342      	adds	r3, #66	; 0x42
 8007620:	4602      	mov	r2, r0
 8007622:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007624:	7bfa      	ldrb	r2, [r7, #15]
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	4613      	mov	r3, r2
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	1a9b      	subs	r3, r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	440b      	add	r3, r1
 8007632:	333f      	adds	r3, #63	; 0x3f
 8007634:	2200      	movs	r2, #0
 8007636:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007638:	7bfa      	ldrb	r2, [r7, #15]
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	4613      	mov	r3, r2
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	1a9b      	subs	r3, r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	3344      	adds	r3, #68	; 0x44
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800764c:	7bfa      	ldrb	r2, [r7, #15]
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	4613      	mov	r3, r2
 8007652:	00db      	lsls	r3, r3, #3
 8007654:	1a9b      	subs	r3, r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	440b      	add	r3, r1
 800765a:	3348      	adds	r3, #72	; 0x48
 800765c:	2200      	movs	r2, #0
 800765e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007660:	7bfa      	ldrb	r2, [r7, #15]
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	4613      	mov	r3, r2
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	440b      	add	r3, r1
 800766e:	3350      	adds	r3, #80	; 0x50
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	3301      	adds	r3, #1
 8007678:	73fb      	strb	r3, [r7, #15]
 800767a:	7bfa      	ldrb	r2, [r7, #15]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	429a      	cmp	r2, r3
 8007682:	d3af      	bcc.n	80075e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007684:	2300      	movs	r3, #0
 8007686:	73fb      	strb	r3, [r7, #15]
 8007688:	e044      	b.n	8007714 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800768a:	7bfa      	ldrb	r2, [r7, #15]
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	4613      	mov	r3, r2
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	1a9b      	subs	r3, r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	440b      	add	r3, r1
 8007698:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800769c:	2200      	movs	r2, #0
 800769e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80076a0:	7bfa      	ldrb	r2, [r7, #15]
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	4613      	mov	r3, r2
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	1a9b      	subs	r3, r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	440b      	add	r3, r1
 80076ae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80076b2:	7bfa      	ldrb	r2, [r7, #15]
 80076b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80076b6:	7bfa      	ldrb	r2, [r7, #15]
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	4613      	mov	r3, r2
 80076bc:	00db      	lsls	r3, r3, #3
 80076be:	1a9b      	subs	r3, r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	440b      	add	r3, r1
 80076c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80076c8:	2200      	movs	r2, #0
 80076ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80076cc:	7bfa      	ldrb	r2, [r7, #15]
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	4613      	mov	r3, r2
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	1a9b      	subs	r3, r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	440b      	add	r3, r1
 80076da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80076e2:	7bfa      	ldrb	r2, [r7, #15]
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	4613      	mov	r3, r2
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	440b      	add	r3, r1
 80076f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80076f8:	7bfa      	ldrb	r2, [r7, #15]
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	4613      	mov	r3, r2
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	1a9b      	subs	r3, r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	440b      	add	r3, r1
 8007706:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	3301      	adds	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
 8007714:	7bfa      	ldrb	r2, [r7, #15]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	429a      	cmp	r2, r3
 800771c:	d3b5      	bcc.n	800768a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	687e      	ldr	r6, [r7, #4]
 8007726:	466d      	mov	r5, sp
 8007728:	f106 0410 	add.w	r4, r6, #16
 800772c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800772e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007734:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007738:	e885 0003 	stmia.w	r5, {r0, r1}
 800773c:	1d33      	adds	r3, r6, #4
 800773e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007740:	6838      	ldr	r0, [r7, #0]
 8007742:	f007 ffa9 	bl	800f698 <USB_DevInit>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d005      	beq.n	8007758 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e014      	b.n	8007782 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	2b01      	cmp	r3, #1
 800776e:	d102      	bne.n	8007776 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f80b 	bl	800778c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f008 f94b 	bl	800fa16 <USB_DevDisconnect>

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800778c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077ba:	4b05      	ldr	r3, [pc, #20]	; (80077d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	10000003 	.word	0x10000003

080077d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80077dc:	4b19      	ldr	r3, [pc, #100]	; (8007844 <HAL_PWREx_ConfigSupply+0x70>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	d00a      	beq.n	80077fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80077e8:	4b16      	ldr	r3, [pc, #88]	; (8007844 <HAL_PWREx_ConfigSupply+0x70>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d001      	beq.n	80077fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e01f      	b.n	800783a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	e01d      	b.n	800783a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80077fe:	4b11      	ldr	r3, [pc, #68]	; (8007844 <HAL_PWREx_ConfigSupply+0x70>)
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f023 0207 	bic.w	r2, r3, #7
 8007806:	490f      	ldr	r1, [pc, #60]	; (8007844 <HAL_PWREx_ConfigSupply+0x70>)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4313      	orrs	r3, r2
 800780c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800780e:	f7fa f8fb 	bl	8001a08 <HAL_GetTick>
 8007812:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007814:	e009      	b.n	800782a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007816:	f7fa f8f7 	bl	8001a08 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007824:	d901      	bls.n	800782a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e007      	b.n	800783a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800782a:	4b06      	ldr	r3, [pc, #24]	; (8007844 <HAL_PWREx_ConfigSupply+0x70>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007836:	d1ee      	bne.n	8007816 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	58024800 	.word	0x58024800

08007848 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800784c:	4b05      	ldr	r3, [pc, #20]	; (8007864 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	4a04      	ldr	r2, [pc, #16]	; (8007864 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007856:	60d3      	str	r3, [r2, #12]
}
 8007858:	bf00      	nop
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	58024800 	.word	0x58024800

08007868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08c      	sub	sp, #48	; 0x30
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e3c4      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 8087 	beq.w	8007996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007888:	4ba2      	ldr	r3, [pc, #648]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007890:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007892:	4ba0      	ldr	r3, [pc, #640]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789a:	2b10      	cmp	r3, #16
 800789c:	d007      	beq.n	80078ae <HAL_RCC_OscConfig+0x46>
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	2b18      	cmp	r3, #24
 80078a2:	d110      	bne.n	80078c6 <HAL_RCC_OscConfig+0x5e>
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d10b      	bne.n	80078c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078ae:	4b99      	ldr	r3, [pc, #612]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d06c      	beq.n	8007994 <HAL_RCC_OscConfig+0x12c>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d168      	bne.n	8007994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e39e      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ce:	d106      	bne.n	80078de <HAL_RCC_OscConfig+0x76>
 80078d0:	4b90      	ldr	r3, [pc, #576]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a8f      	ldr	r2, [pc, #572]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 80078d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	e02e      	b.n	800793c <HAL_RCC_OscConfig+0xd4>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10c      	bne.n	8007900 <HAL_RCC_OscConfig+0x98>
 80078e6:	4b8b      	ldr	r3, [pc, #556]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a8a      	ldr	r2, [pc, #552]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 80078ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	4b88      	ldr	r3, [pc, #544]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a87      	ldr	r2, [pc, #540]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 80078f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	e01d      	b.n	800793c <HAL_RCC_OscConfig+0xd4>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007908:	d10c      	bne.n	8007924 <HAL_RCC_OscConfig+0xbc>
 800790a:	4b82      	ldr	r3, [pc, #520]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a81      	ldr	r2, [pc, #516]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	4b7f      	ldr	r3, [pc, #508]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a7e      	ldr	r2, [pc, #504]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 800791c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	e00b      	b.n	800793c <HAL_RCC_OscConfig+0xd4>
 8007924:	4b7b      	ldr	r3, [pc, #492]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a7a      	ldr	r2, [pc, #488]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 800792a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	4b78      	ldr	r3, [pc, #480]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a77      	ldr	r2, [pc, #476]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800793a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d013      	beq.n	800796c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007944:	f7fa f860 	bl	8001a08 <HAL_GetTick>
 8007948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800794a:	e008      	b.n	800795e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800794c:	f7fa f85c 	bl	8001a08 <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b64      	cmp	r3, #100	; 0x64
 8007958:	d901      	bls.n	800795e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e352      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800795e:	4b6d      	ldr	r3, [pc, #436]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0f0      	beq.n	800794c <HAL_RCC_OscConfig+0xe4>
 800796a:	e014      	b.n	8007996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800796c:	f7fa f84c 	bl	8001a08 <HAL_GetTick>
 8007970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007972:	e008      	b.n	8007986 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007974:	f7fa f848 	bl	8001a08 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b64      	cmp	r3, #100	; 0x64
 8007980:	d901      	bls.n	8007986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e33e      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007986:	4b63      	ldr	r3, [pc, #396]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1f0      	bne.n	8007974 <HAL_RCC_OscConfig+0x10c>
 8007992:	e000      	b.n	8007996 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 8092 	beq.w	8007ac8 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079a4:	4b5b      	ldr	r3, [pc, #364]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079ae:	4b59      	ldr	r3, [pc, #356]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <HAL_RCC_OscConfig+0x162>
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	2b18      	cmp	r3, #24
 80079be:	d12d      	bne.n	8007a1c <HAL_RCC_OscConfig+0x1b4>
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d128      	bne.n	8007a1c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079ca:	4b52      	ldr	r3, [pc, #328]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0304 	and.w	r3, r3, #4
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d005      	beq.n	80079e2 <HAL_RCC_OscConfig+0x17a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e310      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079e2:	f7fa f83f 	bl	8001a64 <HAL_GetREVID>
 80079e6:	4602      	mov	r2, r0
 80079e8:	f241 0303 	movw	r3, #4099	; 0x1003
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d80a      	bhi.n	8007a06 <HAL_RCC_OscConfig+0x19e>
 80079f0:	4b48      	ldr	r3, [pc, #288]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	031b      	lsls	r3, r3, #12
 80079fe:	4945      	ldr	r1, [pc, #276]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a04:	e060      	b.n	8007ac8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a06:	4b43      	ldr	r3, [pc, #268]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	061b      	lsls	r3, r3, #24
 8007a14:	493f      	ldr	r1, [pc, #252]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a1a:	e055      	b.n	8007ac8 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d038      	beq.n	8007a96 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a24:	4b3b      	ldr	r3, [pc, #236]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f023 0219 	bic.w	r2, r3, #25
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	4938      	ldr	r1, [pc, #224]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a36:	f7f9 ffe7 	bl	8001a08 <HAL_GetTick>
 8007a3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a3c:	e008      	b.n	8007a50 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a3e:	f7f9 ffe3 	bl	8001a08 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d901      	bls.n	8007a50 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e2d9      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a50:	4b30      	ldr	r3, [pc, #192]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d0f0      	beq.n	8007a3e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a5c:	f7fa f802 	bl	8001a64 <HAL_GetREVID>
 8007a60:	4602      	mov	r2, r0
 8007a62:	f241 0303 	movw	r3, #4099	; 0x1003
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d80a      	bhi.n	8007a80 <HAL_RCC_OscConfig+0x218>
 8007a6a:	4b2a      	ldr	r3, [pc, #168]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	031b      	lsls	r3, r3, #12
 8007a78:	4926      	ldr	r1, [pc, #152]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	604b      	str	r3, [r1, #4]
 8007a7e:	e023      	b.n	8007ac8 <HAL_RCC_OscConfig+0x260>
 8007a80:	4b24      	ldr	r3, [pc, #144]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	061b      	lsls	r3, r3, #24
 8007a8e:	4921      	ldr	r1, [pc, #132]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	604b      	str	r3, [r1, #4]
 8007a94:	e018      	b.n	8007ac8 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a96:	4b1f      	ldr	r3, [pc, #124]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a1e      	ldr	r2, [pc, #120]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa2:	f7f9 ffb1 	bl	8001a08 <HAL_GetTick>
 8007aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007aa8:	e008      	b.n	8007abc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007aaa:	f7f9 ffad 	bl	8001a08 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d901      	bls.n	8007abc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e2a3      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007abc:	4b15      	ldr	r3, [pc, #84]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1f0      	bne.n	8007aaa <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0310 	and.w	r3, r3, #16
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 8091 	beq.w	8007bf8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ad6:	4b0f      	ldr	r3, [pc, #60]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ade:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ae0:	4b0c      	ldr	r3, [pc, #48]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d007      	beq.n	8007afc <HAL_RCC_OscConfig+0x294>
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	2b18      	cmp	r3, #24
 8007af0:	d12f      	bne.n	8007b52 <HAL_RCC_OscConfig+0x2ea>
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f003 0303 	and.w	r3, r3, #3
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d12a      	bne.n	8007b52 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007afc:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <HAL_RCC_OscConfig+0x2ac>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d007      	beq.n	8007b18 <HAL_RCC_OscConfig+0x2b0>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	2b80      	cmp	r3, #128	; 0x80
 8007b0e:	d003      	beq.n	8007b18 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e277      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
 8007b14:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b18:	f7f9 ffa4 	bl	8001a64 <HAL_GetREVID>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	f241 0303 	movw	r3, #4099	; 0x1003
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d80a      	bhi.n	8007b3c <HAL_RCC_OscConfig+0x2d4>
 8007b26:	4ba2      	ldr	r3, [pc, #648]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	069b      	lsls	r3, r3, #26
 8007b34:	499e      	ldr	r1, [pc, #632]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b3a:	e05d      	b.n	8007bf8 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b3c:	4b9c      	ldr	r3, [pc, #624]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	061b      	lsls	r3, r3, #24
 8007b4a:	4999      	ldr	r1, [pc, #612]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b50:	e052      	b.n	8007bf8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d035      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007b5a:	4b95      	ldr	r3, [pc, #596]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a94      	ldr	r2, [pc, #592]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b66:	f7f9 ff4f 	bl	8001a08 <HAL_GetTick>
 8007b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b6c:	e008      	b.n	8007b80 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007b6e:	f7f9 ff4b 	bl	8001a08 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e241      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b80:	4b8b      	ldr	r3, [pc, #556]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0f0      	beq.n	8007b6e <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b8c:	f7f9 ff6a 	bl	8001a64 <HAL_GetREVID>
 8007b90:	4602      	mov	r2, r0
 8007b92:	f241 0303 	movw	r3, #4099	; 0x1003
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d80a      	bhi.n	8007bb0 <HAL_RCC_OscConfig+0x348>
 8007b9a:	4b85      	ldr	r3, [pc, #532]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	069b      	lsls	r3, r3, #26
 8007ba8:	4981      	ldr	r1, [pc, #516]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	604b      	str	r3, [r1, #4]
 8007bae:	e023      	b.n	8007bf8 <HAL_RCC_OscConfig+0x390>
 8007bb0:	4b7f      	ldr	r3, [pc, #508]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	061b      	lsls	r3, r3, #24
 8007bbe:	497c      	ldr	r1, [pc, #496]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60cb      	str	r3, [r1, #12]
 8007bc4:	e018      	b.n	8007bf8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007bc6:	4b7a      	ldr	r3, [pc, #488]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a79      	ldr	r2, [pc, #484]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd2:	f7f9 ff19 	bl	8001a08 <HAL_GetTick>
 8007bd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bd8:	e008      	b.n	8007bec <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007bda:	f7f9 ff15 	bl	8001a08 <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d901      	bls.n	8007bec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e20b      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bec:	4b70      	ldr	r3, [pc, #448]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1f0      	bne.n	8007bda <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d036      	beq.n	8007c72 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d019      	beq.n	8007c40 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c0c:	4b68      	ldr	r3, [pc, #416]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c10:	4a67      	ldr	r2, [pc, #412]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007c12:	f043 0301 	orr.w	r3, r3, #1
 8007c16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c18:	f7f9 fef6 	bl	8001a08 <HAL_GetTick>
 8007c1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c1e:	e008      	b.n	8007c32 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c20:	f7f9 fef2 	bl	8001a08 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d901      	bls.n	8007c32 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e1e8      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c32:	4b5f      	ldr	r3, [pc, #380]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0f0      	beq.n	8007c20 <HAL_RCC_OscConfig+0x3b8>
 8007c3e:	e018      	b.n	8007c72 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c40:	4b5b      	ldr	r3, [pc, #364]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c44:	4a5a      	ldr	r2, [pc, #360]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007c46:	f023 0301 	bic.w	r3, r3, #1
 8007c4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c4c:	f7f9 fedc 	bl	8001a08 <HAL_GetTick>
 8007c50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c52:	e008      	b.n	8007c66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c54:	f7f9 fed8 	bl	8001a08 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d901      	bls.n	8007c66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e1ce      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c66:	4b52      	ldr	r3, [pc, #328]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1f0      	bne.n	8007c54 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d036      	beq.n	8007cec <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d019      	beq.n	8007cba <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c86:	4b4a      	ldr	r3, [pc, #296]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a49      	ldr	r2, [pc, #292]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c92:	f7f9 feb9 	bl	8001a08 <HAL_GetTick>
 8007c96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c98:	e008      	b.n	8007cac <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007c9a:	f7f9 feb5 	bl	8001a08 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d901      	bls.n	8007cac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e1ab      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007cac:	4b40      	ldr	r3, [pc, #256]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0f0      	beq.n	8007c9a <HAL_RCC_OscConfig+0x432>
 8007cb8:	e018      	b.n	8007cec <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007cba:	4b3d      	ldr	r3, [pc, #244]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a3c      	ldr	r2, [pc, #240]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cc4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007cc6:	f7f9 fe9f 	bl	8001a08 <HAL_GetTick>
 8007cca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ccc:	e008      	b.n	8007ce0 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007cce:	f7f9 fe9b 	bl	8001a08 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d901      	bls.n	8007ce0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e191      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ce0:	4b33      	ldr	r3, [pc, #204]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1f0      	bne.n	8007cce <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 8086 	beq.w	8007e06 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007cfa:	4b2e      	ldr	r3, [pc, #184]	; (8007db4 <HAL_RCC_OscConfig+0x54c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a2d      	ldr	r2, [pc, #180]	; (8007db4 <HAL_RCC_OscConfig+0x54c>)
 8007d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d06:	f7f9 fe7f 	bl	8001a08 <HAL_GetTick>
 8007d0a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d0c:	e008      	b.n	8007d20 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007d0e:	f7f9 fe7b 	bl	8001a08 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	2b64      	cmp	r3, #100	; 0x64
 8007d1a:	d901      	bls.n	8007d20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e171      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d20:	4b24      	ldr	r3, [pc, #144]	; (8007db4 <HAL_RCC_OscConfig+0x54c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0f0      	beq.n	8007d0e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d106      	bne.n	8007d42 <HAL_RCC_OscConfig+0x4da>
 8007d34:	4b1e      	ldr	r3, [pc, #120]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d38:	4a1d      	ldr	r2, [pc, #116]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d3a:	f043 0301 	orr.w	r3, r3, #1
 8007d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d40:	e02d      	b.n	8007d9e <HAL_RCC_OscConfig+0x536>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10c      	bne.n	8007d64 <HAL_RCC_OscConfig+0x4fc>
 8007d4a:	4b19      	ldr	r3, [pc, #100]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4e:	4a18      	ldr	r2, [pc, #96]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d50:	f023 0301 	bic.w	r3, r3, #1
 8007d54:	6713      	str	r3, [r2, #112]	; 0x70
 8007d56:	4b16      	ldr	r3, [pc, #88]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5a:	4a15      	ldr	r2, [pc, #84]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d5c:	f023 0304 	bic.w	r3, r3, #4
 8007d60:	6713      	str	r3, [r2, #112]	; 0x70
 8007d62:	e01c      	b.n	8007d9e <HAL_RCC_OscConfig+0x536>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	2b05      	cmp	r3, #5
 8007d6a:	d10c      	bne.n	8007d86 <HAL_RCC_OscConfig+0x51e>
 8007d6c:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d70:	4a0f      	ldr	r2, [pc, #60]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d72:	f043 0304 	orr.w	r3, r3, #4
 8007d76:	6713      	str	r3, [r2, #112]	; 0x70
 8007d78:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7c:	4a0c      	ldr	r2, [pc, #48]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d7e:	f043 0301 	orr.w	r3, r3, #1
 8007d82:	6713      	str	r3, [r2, #112]	; 0x70
 8007d84:	e00b      	b.n	8007d9e <HAL_RCC_OscConfig+0x536>
 8007d86:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8a:	4a09      	ldr	r2, [pc, #36]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d8c:	f023 0301 	bic.w	r3, r3, #1
 8007d90:	6713      	str	r3, [r2, #112]	; 0x70
 8007d92:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d96:	4a06      	ldr	r2, [pc, #24]	; (8007db0 <HAL_RCC_OscConfig+0x548>)
 8007d98:	f023 0304 	bic.w	r3, r3, #4
 8007d9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d01a      	beq.n	8007ddc <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da6:	f7f9 fe2f 	bl	8001a08 <HAL_GetTick>
 8007daa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dac:	e00f      	b.n	8007dce <HAL_RCC_OscConfig+0x566>
 8007dae:	bf00      	nop
 8007db0:	58024400 	.word	0x58024400
 8007db4:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007db8:	f7f9 fe26 	bl	8001a08 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e11a      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dce:	4b8f      	ldr	r3, [pc, #572]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0ee      	beq.n	8007db8 <HAL_RCC_OscConfig+0x550>
 8007dda:	e014      	b.n	8007e06 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ddc:	f7f9 fe14 	bl	8001a08 <HAL_GetTick>
 8007de0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007de2:	e00a      	b.n	8007dfa <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007de4:	f7f9 fe10 	bl	8001a08 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e104      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dfa:	4b84      	ldr	r3, [pc, #528]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1ee      	bne.n	8007de4 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 80f9 	beq.w	8008002 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007e10:	4b7e      	ldr	r3, [pc, #504]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e18:	2b18      	cmp	r3, #24
 8007e1a:	f000 80b4 	beq.w	8007f86 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	f040 8095 	bne.w	8007f52 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e28:	4b78      	ldr	r3, [pc, #480]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a77      	ldr	r2, [pc, #476]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e34:	f7f9 fde8 	bl	8001a08 <HAL_GetTick>
 8007e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e3a:	e008      	b.n	8007e4e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e3c:	f7f9 fde4 	bl	8001a08 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e0da      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e4e:	4b6f      	ldr	r3, [pc, #444]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1f0      	bne.n	8007e3c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e5a:	4b6c      	ldr	r3, [pc, #432]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e5e:	4b6c      	ldr	r3, [pc, #432]	; (8008010 <HAL_RCC_OscConfig+0x7a8>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e6a:	0112      	lsls	r2, r2, #4
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	4967      	ldr	r1, [pc, #412]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	628b      	str	r3, [r1, #40]	; 0x28
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e82:	3b01      	subs	r3, #1
 8007e84:	025b      	lsls	r3, r3, #9
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	041b      	lsls	r3, r3, #16
 8007e92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	061b      	lsls	r3, r3, #24
 8007ea0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ea4:	4959      	ldr	r1, [pc, #356]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007eaa:	4b58      	ldr	r3, [pc, #352]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	4a57      	ldr	r2, [pc, #348]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007eb0:	f023 0301 	bic.w	r3, r3, #1
 8007eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007eb6:	4b55      	ldr	r3, [pc, #340]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eba:	4b56      	ldr	r3, [pc, #344]	; (8008014 <HAL_RCC_OscConfig+0x7ac>)
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ec2:	00d2      	lsls	r2, r2, #3
 8007ec4:	4951      	ldr	r1, [pc, #324]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007eca:	4b50      	ldr	r3, [pc, #320]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ece:	f023 020c 	bic.w	r2, r3, #12
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed6:	494d      	ldr	r1, [pc, #308]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007edc:	4b4b      	ldr	r3, [pc, #300]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee0:	f023 0202 	bic.w	r2, r3, #2
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee8:	4948      	ldr	r1, [pc, #288]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007eee:	4b47      	ldr	r3, [pc, #284]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	4a46      	ldr	r2, [pc, #280]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007efa:	4b44      	ldr	r3, [pc, #272]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	4a43      	ldr	r2, [pc, #268]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007f06:	4b41      	ldr	r3, [pc, #260]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0a:	4a40      	ldr	r2, [pc, #256]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007f12:	4b3e      	ldr	r3, [pc, #248]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f16:	4a3d      	ldr	r2, [pc, #244]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007f18:	f043 0301 	orr.w	r3, r3, #1
 8007f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f1e:	4b3b      	ldr	r3, [pc, #236]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a3a      	ldr	r2, [pc, #232]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2a:	f7f9 fd6d 	bl	8001a08 <HAL_GetTick>
 8007f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f30:	e008      	b.n	8007f44 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f32:	f7f9 fd69 	bl	8001a08 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d901      	bls.n	8007f44 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e05f      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f44:	4b31      	ldr	r3, [pc, #196]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d0f0      	beq.n	8007f32 <HAL_RCC_OscConfig+0x6ca>
 8007f50:	e057      	b.n	8008002 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f52:	4b2e      	ldr	r3, [pc, #184]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a2d      	ldr	r2, [pc, #180]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007f58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f5e:	f7f9 fd53 	bl	8001a08 <HAL_GetTick>
 8007f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f64:	e008      	b.n	8007f78 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f66:	f7f9 fd4f 	bl	8001a08 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d901      	bls.n	8007f78 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e045      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f78:	4b24      	ldr	r3, [pc, #144]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1f0      	bne.n	8007f66 <HAL_RCC_OscConfig+0x6fe>
 8007f84:	e03d      	b.n	8008002 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007f86:	4b21      	ldr	r3, [pc, #132]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f8c:	4b1f      	ldr	r3, [pc, #124]	; (800800c <HAL_RCC_OscConfig+0x7a4>)
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d031      	beq.n	8007ffe <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f003 0203 	and.w	r2, r3, #3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d12a      	bne.n	8007ffe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	091b      	lsrs	r3, r3, #4
 8007fac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d122      	bne.n	8007ffe <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d11a      	bne.n	8007ffe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	0a5b      	lsrs	r3, r3, #9
 8007fcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d111      	bne.n	8007ffe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	0c1b      	lsrs	r3, r3, #16
 8007fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d108      	bne.n	8007ffe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	0e1b      	lsrs	r3, r3, #24
 8007ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d001      	beq.n	8008002 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e000      	b.n	8008004 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3730      	adds	r7, #48	; 0x30
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	58024400 	.word	0x58024400
 8008010:	fffffc0c 	.word	0xfffffc0c
 8008014:	ffff0007 	.word	0xffff0007

08008018 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e19c      	b.n	8008366 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800802c:	4b8a      	ldr	r3, [pc, #552]	; (8008258 <HAL_RCC_ClockConfig+0x240>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 030f 	and.w	r3, r3, #15
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d910      	bls.n	800805c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800803a:	4b87      	ldr	r3, [pc, #540]	; (8008258 <HAL_RCC_ClockConfig+0x240>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f023 020f 	bic.w	r2, r3, #15
 8008042:	4985      	ldr	r1, [pc, #532]	; (8008258 <HAL_RCC_ClockConfig+0x240>)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	4313      	orrs	r3, r2
 8008048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800804a:	4b83      	ldr	r3, [pc, #524]	; (8008258 <HAL_RCC_ClockConfig+0x240>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 030f 	and.w	r3, r3, #15
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	429a      	cmp	r2, r3
 8008056:	d001      	beq.n	800805c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e184      	b.n	8008366 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0304 	and.w	r3, r3, #4
 8008064:	2b00      	cmp	r3, #0
 8008066:	d010      	beq.n	800808a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	4b7b      	ldr	r3, [pc, #492]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008074:	429a      	cmp	r2, r3
 8008076:	d908      	bls.n	800808a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008078:	4b78      	ldr	r3, [pc, #480]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	4975      	ldr	r1, [pc, #468]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 8008086:	4313      	orrs	r3, r2
 8008088:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0308 	and.w	r3, r3, #8
 8008092:	2b00      	cmp	r3, #0
 8008094:	d010      	beq.n	80080b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	695a      	ldr	r2, [r3, #20]
 800809a:	4b70      	ldr	r3, [pc, #448]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d908      	bls.n	80080b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80080a6:	4b6d      	ldr	r3, [pc, #436]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	496a      	ldr	r1, [pc, #424]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d010      	beq.n	80080e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699a      	ldr	r2, [r3, #24]
 80080c8:	4b64      	ldr	r3, [pc, #400]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d908      	bls.n	80080e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80080d4:	4b61      	ldr	r3, [pc, #388]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	495e      	ldr	r1, [pc, #376]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0320 	and.w	r3, r3, #32
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d010      	beq.n	8008114 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	69da      	ldr	r2, [r3, #28]
 80080f6:	4b59      	ldr	r3, [pc, #356]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080fe:	429a      	cmp	r2, r3
 8008100:	d908      	bls.n	8008114 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008102:	4b56      	ldr	r3, [pc, #344]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	4953      	ldr	r1, [pc, #332]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 8008110:	4313      	orrs	r3, r2
 8008112:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d010      	beq.n	8008142 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68da      	ldr	r2, [r3, #12]
 8008124:	4b4d      	ldr	r3, [pc, #308]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	f003 030f 	and.w	r3, r3, #15
 800812c:	429a      	cmp	r2, r3
 800812e:	d908      	bls.n	8008142 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008130:	4b4a      	ldr	r3, [pc, #296]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	f023 020f 	bic.w	r2, r3, #15
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	4947      	ldr	r1, [pc, #284]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 800813e:	4313      	orrs	r3, r2
 8008140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d055      	beq.n	80081fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800814e:	4b43      	ldr	r3, [pc, #268]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	4940      	ldr	r1, [pc, #256]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 800815c:	4313      	orrs	r3, r2
 800815e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	2b02      	cmp	r3, #2
 8008166:	d107      	bne.n	8008178 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008168:	4b3c      	ldr	r3, [pc, #240]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d121      	bne.n	80081b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e0f6      	b.n	8008366 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	2b03      	cmp	r3, #3
 800817e:	d107      	bne.n	8008190 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008180:	4b36      	ldr	r3, [pc, #216]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d115      	bne.n	80081b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e0ea      	b.n	8008366 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d107      	bne.n	80081a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008198:	4b30      	ldr	r3, [pc, #192]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d109      	bne.n	80081b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e0de      	b.n	8008366 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081a8:	4b2c      	ldr	r3, [pc, #176]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0304 	and.w	r3, r3, #4
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e0d6      	b.n	8008366 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80081b8:	4b28      	ldr	r3, [pc, #160]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	f023 0207 	bic.w	r2, r3, #7
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	4925      	ldr	r1, [pc, #148]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ca:	f7f9 fc1d 	bl	8001a08 <HAL_GetTick>
 80081ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081d0:	e00a      	b.n	80081e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081d2:	f7f9 fc19 	bl	8001a08 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d901      	bls.n	80081e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e0be      	b.n	8008366 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081e8:	4b1c      	ldr	r3, [pc, #112]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d1eb      	bne.n	80081d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d010      	beq.n	8008228 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	4b14      	ldr	r3, [pc, #80]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	429a      	cmp	r2, r3
 8008214:	d208      	bcs.n	8008228 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008216:	4b11      	ldr	r3, [pc, #68]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	f023 020f 	bic.w	r2, r3, #15
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	490e      	ldr	r1, [pc, #56]	; (800825c <HAL_RCC_ClockConfig+0x244>)
 8008224:	4313      	orrs	r3, r2
 8008226:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008228:	4b0b      	ldr	r3, [pc, #44]	; (8008258 <HAL_RCC_ClockConfig+0x240>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 030f 	and.w	r3, r3, #15
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	429a      	cmp	r2, r3
 8008234:	d214      	bcs.n	8008260 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008236:	4b08      	ldr	r3, [pc, #32]	; (8008258 <HAL_RCC_ClockConfig+0x240>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f023 020f 	bic.w	r2, r3, #15
 800823e:	4906      	ldr	r1, [pc, #24]	; (8008258 <HAL_RCC_ClockConfig+0x240>)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	4313      	orrs	r3, r2
 8008244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008246:	4b04      	ldr	r3, [pc, #16]	; (8008258 <HAL_RCC_ClockConfig+0x240>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 030f 	and.w	r3, r3, #15
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d005      	beq.n	8008260 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e086      	b.n	8008366 <HAL_RCC_ClockConfig+0x34e>
 8008258:	52002000 	.word	0x52002000
 800825c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d010      	beq.n	800828e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691a      	ldr	r2, [r3, #16]
 8008270:	4b3f      	ldr	r3, [pc, #252]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008278:	429a      	cmp	r2, r3
 800827a:	d208      	bcs.n	800828e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800827c:	4b3c      	ldr	r3, [pc, #240]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	4939      	ldr	r1, [pc, #228]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 800828a:	4313      	orrs	r3, r2
 800828c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0308 	and.w	r3, r3, #8
 8008296:	2b00      	cmp	r3, #0
 8008298:	d010      	beq.n	80082bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695a      	ldr	r2, [r3, #20]
 800829e:	4b34      	ldr	r3, [pc, #208]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d208      	bcs.n	80082bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082aa:	4b31      	ldr	r3, [pc, #196]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	492e      	ldr	r1, [pc, #184]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0310 	and.w	r3, r3, #16
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d010      	beq.n	80082ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699a      	ldr	r2, [r3, #24]
 80082cc:	4b28      	ldr	r3, [pc, #160]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d208      	bcs.n	80082ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80082d8:	4b25      	ldr	r3, [pc, #148]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	4922      	ldr	r1, [pc, #136]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d010      	beq.n	8008318 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	69da      	ldr	r2, [r3, #28]
 80082fa:	4b1d      	ldr	r3, [pc, #116]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008302:	429a      	cmp	r2, r3
 8008304:	d208      	bcs.n	8008318 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008306:	4b1a      	ldr	r3, [pc, #104]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	4917      	ldr	r1, [pc, #92]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 8008314:	4313      	orrs	r3, r2
 8008316:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008318:	f000 f834 	bl	8008384 <HAL_RCC_GetSysClockFreq>
 800831c:	4601      	mov	r1, r0
 800831e:	4b14      	ldr	r3, [pc, #80]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	0a1b      	lsrs	r3, r3, #8
 8008324:	f003 030f 	and.w	r3, r3, #15
 8008328:	4a12      	ldr	r2, [pc, #72]	; (8008374 <HAL_RCC_ClockConfig+0x35c>)
 800832a:	5cd3      	ldrb	r3, [r2, r3]
 800832c:	f003 031f 	and.w	r3, r3, #31
 8008330:	fa21 f303 	lsr.w	r3, r1, r3
 8008334:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008336:	4b0e      	ldr	r3, [pc, #56]	; (8008370 <HAL_RCC_ClockConfig+0x358>)
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	4a0d      	ldr	r2, [pc, #52]	; (8008374 <HAL_RCC_ClockConfig+0x35c>)
 8008340:	5cd3      	ldrb	r3, [r2, r3]
 8008342:	f003 031f 	and.w	r3, r3, #31
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	fa22 f303 	lsr.w	r3, r2, r3
 800834c:	4a0a      	ldr	r2, [pc, #40]	; (8008378 <HAL_RCC_ClockConfig+0x360>)
 800834e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008350:	4a0a      	ldr	r2, [pc, #40]	; (800837c <HAL_RCC_ClockConfig+0x364>)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008356:	4b0a      	ldr	r3, [pc, #40]	; (8008380 <HAL_RCC_ClockConfig+0x368>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f7f9 fb0a 	bl	8001974 <HAL_InitTick>
 8008360:	4603      	mov	r3, r0
 8008362:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	58024400 	.word	0x58024400
 8008374:	0801452c 	.word	0x0801452c
 8008378:	24000004 	.word	0x24000004
 800837c:	24000000 	.word	0x24000000
 8008380:	24000008 	.word	0x24000008

08008384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008384:	b480      	push	{r7}
 8008386:	b089      	sub	sp, #36	; 0x24
 8008388:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800838a:	4baf      	ldr	r3, [pc, #700]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008392:	2b18      	cmp	r3, #24
 8008394:	f200 814e 	bhi.w	8008634 <HAL_RCC_GetSysClockFreq+0x2b0>
 8008398:	a201      	add	r2, pc, #4	; (adr r2, 80083a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800839a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839e:	bf00      	nop
 80083a0:	08008405 	.word	0x08008405
 80083a4:	08008635 	.word	0x08008635
 80083a8:	08008635 	.word	0x08008635
 80083ac:	08008635 	.word	0x08008635
 80083b0:	08008635 	.word	0x08008635
 80083b4:	08008635 	.word	0x08008635
 80083b8:	08008635 	.word	0x08008635
 80083bc:	08008635 	.word	0x08008635
 80083c0:	0800842b 	.word	0x0800842b
 80083c4:	08008635 	.word	0x08008635
 80083c8:	08008635 	.word	0x08008635
 80083cc:	08008635 	.word	0x08008635
 80083d0:	08008635 	.word	0x08008635
 80083d4:	08008635 	.word	0x08008635
 80083d8:	08008635 	.word	0x08008635
 80083dc:	08008635 	.word	0x08008635
 80083e0:	08008431 	.word	0x08008431
 80083e4:	08008635 	.word	0x08008635
 80083e8:	08008635 	.word	0x08008635
 80083ec:	08008635 	.word	0x08008635
 80083f0:	08008635 	.word	0x08008635
 80083f4:	08008635 	.word	0x08008635
 80083f8:	08008635 	.word	0x08008635
 80083fc:	08008635 	.word	0x08008635
 8008400:	08008437 	.word	0x08008437
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008404:	4b90      	ldr	r3, [pc, #576]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0320 	and.w	r3, r3, #32
 800840c:	2b00      	cmp	r3, #0
 800840e:	d009      	beq.n	8008424 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008410:	4b8d      	ldr	r3, [pc, #564]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	08db      	lsrs	r3, r3, #3
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	4a8c      	ldr	r2, [pc, #560]	; (800864c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800841c:	fa22 f303 	lsr.w	r3, r2, r3
 8008420:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008422:	e10a      	b.n	800863a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008424:	4b89      	ldr	r3, [pc, #548]	; (800864c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008426:	61bb      	str	r3, [r7, #24]
    break;
 8008428:	e107      	b.n	800863a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800842a:	4b89      	ldr	r3, [pc, #548]	; (8008650 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800842c:	61bb      	str	r3, [r7, #24]
    break;
 800842e:	e104      	b.n	800863a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008430:	4b88      	ldr	r3, [pc, #544]	; (8008654 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8008432:	61bb      	str	r3, [r7, #24]
    break;
 8008434:	e101      	b.n	800863a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008436:	4b84      	ldr	r3, [pc, #528]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843a:	f003 0303 	and.w	r3, r3, #3
 800843e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008440:	4b81      	ldr	r3, [pc, #516]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008444:	091b      	lsrs	r3, r3, #4
 8008446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800844a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800844c:	4b7e      	ldr	r3, [pc, #504]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008456:	4b7c      	ldr	r3, [pc, #496]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845a:	08db      	lsrs	r3, r3, #3
 800845c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	fb02 f303 	mul.w	r3, r2, r3
 8008466:	ee07 3a90 	vmov	s15, r3
 800846a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 80da 	beq.w	800862e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d05a      	beq.n	8008536 <HAL_RCC_GetSysClockFreq+0x1b2>
 8008480:	2b01      	cmp	r3, #1
 8008482:	d302      	bcc.n	800848a <HAL_RCC_GetSysClockFreq+0x106>
 8008484:	2b02      	cmp	r3, #2
 8008486:	d078      	beq.n	800857a <HAL_RCC_GetSysClockFreq+0x1f6>
 8008488:	e099      	b.n	80085be <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800848a:	4b6f      	ldr	r3, [pc, #444]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b00      	cmp	r3, #0
 8008494:	d02d      	beq.n	80084f2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008496:	4b6c      	ldr	r3, [pc, #432]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	08db      	lsrs	r3, r3, #3
 800849c:	f003 0303 	and.w	r3, r3, #3
 80084a0:	4a6a      	ldr	r2, [pc, #424]	; (800864c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80084a2:	fa22 f303 	lsr.w	r3, r2, r3
 80084a6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	ee07 3a90 	vmov	s15, r3
 80084ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	ee07 3a90 	vmov	s15, r3
 80084b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084c0:	4b61      	ldr	r3, [pc, #388]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80084c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c8:	ee07 3a90 	vmov	s15, r3
 80084cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80084d4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8008658 <HAL_RCC_GetSysClockFreq+0x2d4>
 80084d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80084f0:	e087      	b.n	8008602 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	ee07 3a90 	vmov	s15, r3
 80084f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fc:	eddf 6a57 	vldr	s13, [pc, #348]	; 800865c <HAL_RCC_GetSysClockFreq+0x2d8>
 8008500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008504:	4b50      	ldr	r3, [pc, #320]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800850c:	ee07 3a90 	vmov	s15, r3
 8008510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008514:	ed97 6a02 	vldr	s12, [r7, #8]
 8008518:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008658 <HAL_RCC_GetSysClockFreq+0x2d4>
 800851c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008530:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008534:	e065      	b.n	8008602 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	ee07 3a90 	vmov	s15, r3
 800853c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008540:	eddf 6a47 	vldr	s13, [pc, #284]	; 8008660 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008548:	4b3f      	ldr	r3, [pc, #252]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800854a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008558:	ed97 6a02 	vldr	s12, [r7, #8]
 800855c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008658 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800856c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008574:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008578:	e043      	b.n	8008602 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	ee07 3a90 	vmov	s15, r3
 8008580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008584:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008664 <HAL_RCC_GetSysClockFreq+0x2e0>
 8008588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858c:	4b2e      	ldr	r3, [pc, #184]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800858e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008594:	ee07 3a90 	vmov	s15, r3
 8008598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859c:	ed97 6a02 	vldr	s12, [r7, #8]
 80085a0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008658 <HAL_RCC_GetSysClockFreq+0x2d4>
 80085a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085bc:	e021      	b.n	8008602 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	ee07 3a90 	vmov	s15, r3
 80085c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008660 <HAL_RCC_GetSysClockFreq+0x2dc>
 80085cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d0:	4b1d      	ldr	r3, [pc, #116]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80085d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80085e4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008658 <HAL_RCC_GetSysClockFreq+0x2d4>
 80085e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008600:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008602:	4b11      	ldr	r3, [pc, #68]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	0a5b      	lsrs	r3, r3, #9
 8008608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800860c:	3301      	adds	r3, #1
 800860e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800861a:	edd7 6a07 	vldr	s13, [r7, #28]
 800861e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008626:	ee17 3a90 	vmov	r3, s15
 800862a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800862c:	e005      	b.n	800863a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	61bb      	str	r3, [r7, #24]
    break;
 8008632:	e002      	b.n	800863a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8008634:	4b06      	ldr	r3, [pc, #24]	; (8008650 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008636:	61bb      	str	r3, [r7, #24]
    break;
 8008638:	bf00      	nop
  }

  return sysclockfreq;
 800863a:	69bb      	ldr	r3, [r7, #24]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3724      	adds	r7, #36	; 0x24
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	58024400 	.word	0x58024400
 800864c:	03d09000 	.word	0x03d09000
 8008650:	003d0900 	.word	0x003d0900
 8008654:	007a1200 	.word	0x007a1200
 8008658:	46000000 	.word	0x46000000
 800865c:	4c742400 	.word	0x4c742400
 8008660:	4a742400 	.word	0x4a742400
 8008664:	4af42400 	.word	0x4af42400

08008668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800866e:	f7ff fe89 	bl	8008384 <HAL_RCC_GetSysClockFreq>
 8008672:	4601      	mov	r1, r0
 8008674:	4b10      	ldr	r3, [pc, #64]	; (80086b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	0a1b      	lsrs	r3, r3, #8
 800867a:	f003 030f 	and.w	r3, r3, #15
 800867e:	4a0f      	ldr	r2, [pc, #60]	; (80086bc <HAL_RCC_GetHCLKFreq+0x54>)
 8008680:	5cd3      	ldrb	r3, [r2, r3]
 8008682:	f003 031f 	and.w	r3, r3, #31
 8008686:	fa21 f303 	lsr.w	r3, r1, r3
 800868a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800868c:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	f003 030f 	and.w	r3, r3, #15
 8008694:	4a09      	ldr	r2, [pc, #36]	; (80086bc <HAL_RCC_GetHCLKFreq+0x54>)
 8008696:	5cd3      	ldrb	r3, [r2, r3]
 8008698:	f003 031f 	and.w	r3, r3, #31
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	fa22 f303 	lsr.w	r3, r2, r3
 80086a2:	4a07      	ldr	r2, [pc, #28]	; (80086c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80086a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086a6:	4a07      	ldr	r2, [pc, #28]	; (80086c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80086ac:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80086ae:	681b      	ldr	r3, [r3, #0]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	58024400 	.word	0x58024400
 80086bc:	0801452c 	.word	0x0801452c
 80086c0:	24000004 	.word	0x24000004
 80086c4:	24000000 	.word	0x24000000

080086c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80086cc:	f7ff ffcc 	bl	8008668 <HAL_RCC_GetHCLKFreq>
 80086d0:	4601      	mov	r1, r0
 80086d2:	4b06      	ldr	r3, [pc, #24]	; (80086ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	091b      	lsrs	r3, r3, #4
 80086d8:	f003 0307 	and.w	r3, r3, #7
 80086dc:	4a04      	ldr	r2, [pc, #16]	; (80086f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80086de:	5cd3      	ldrb	r3, [r2, r3]
 80086e0:	f003 031f 	and.w	r3, r3, #31
 80086e4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	58024400 	.word	0x58024400
 80086f0:	0801452c 	.word	0x0801452c

080086f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80086f8:	f7ff ffb6 	bl	8008668 <HAL_RCC_GetHCLKFreq>
 80086fc:	4601      	mov	r1, r0
 80086fe:	4b06      	ldr	r3, [pc, #24]	; (8008718 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	0a1b      	lsrs	r3, r3, #8
 8008704:	f003 0307 	and.w	r3, r3, #7
 8008708:	4a04      	ldr	r2, [pc, #16]	; (800871c <HAL_RCC_GetPCLK2Freq+0x28>)
 800870a:	5cd3      	ldrb	r3, [r2, r3]
 800870c:	f003 031f 	and.w	r3, r3, #31
 8008710:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008714:	4618      	mov	r0, r3
 8008716:	bd80      	pop	{r7, pc}
 8008718:	58024400 	.word	0x58024400
 800871c:	0801452c 	.word	0x0801452c

08008720 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008728:	2300      	movs	r3, #0
 800872a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800872c:	2300      	movs	r3, #0
 800872e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d03d      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008744:	d013      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800874a:	d802      	bhi.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800874c:	2b00      	cmp	r3, #0
 800874e:	d007      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008750:	e01f      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008756:	d013      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800875c:	d01c      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800875e:	e018      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008760:	4baf      	ldr	r3, [pc, #700]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	4aae      	ldr	r2, [pc, #696]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800876a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800876c:	e015      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3304      	adds	r3, #4
 8008772:	2102      	movs	r1, #2
 8008774:	4618      	mov	r0, r3
 8008776:	f001 fd23 	bl	800a1c0 <RCCEx_PLL2_Config>
 800877a:	4603      	mov	r3, r0
 800877c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800877e:	e00c      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3324      	adds	r3, #36	; 0x24
 8008784:	2102      	movs	r1, #2
 8008786:	4618      	mov	r0, r3
 8008788:	f001 fdcc 	bl	800a324 <RCCEx_PLL3_Config>
 800878c:	4603      	mov	r3, r0
 800878e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008790:	e003      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	75fb      	strb	r3, [r7, #23]
      break;
 8008796:	e000      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8008798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d109      	bne.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80087a0:	4b9f      	ldr	r3, [pc, #636]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ac:	499c      	ldr	r1, [pc, #624]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	650b      	str	r3, [r1, #80]	; 0x50
 80087b2:	e001      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
 80087b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d03d      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d826      	bhi.n	800881a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80087cc:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	080087e9 	.word	0x080087e9
 80087d8:	080087f7 	.word	0x080087f7
 80087dc:	08008809 	.word	0x08008809
 80087e0:	08008821 	.word	0x08008821
 80087e4:	08008821 	.word	0x08008821
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e8:	4b8d      	ldr	r3, [pc, #564]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	4a8c      	ldr	r2, [pc, #560]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087f4:	e015      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	3304      	adds	r3, #4
 80087fa:	2100      	movs	r1, #0
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 fcdf 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008802:	4603      	mov	r3, r0
 8008804:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008806:	e00c      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3324      	adds	r3, #36	; 0x24
 800880c:	2100      	movs	r1, #0
 800880e:	4618      	mov	r0, r3
 8008810:	f001 fd88 	bl	800a324 <RCCEx_PLL3_Config>
 8008814:	4603      	mov	r3, r0
 8008816:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008818:	e003      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	75fb      	strb	r3, [r7, #23]
      break;
 800881e:	e000      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8008820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d109      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008828:	4b7d      	ldr	r3, [pc, #500]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800882a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800882c:	f023 0207 	bic.w	r2, r3, #7
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008834:	497a      	ldr	r1, [pc, #488]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008836:	4313      	orrs	r3, r2
 8008838:	650b      	str	r3, [r1, #80]	; 0x50
 800883a:	e001      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800883c:	7dfb      	ldrb	r3, [r7, #23]
 800883e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008848:	2b00      	cmp	r3, #0
 800884a:	d03e      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008850:	2b80      	cmp	r3, #128	; 0x80
 8008852:	d01c      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008854:	2b80      	cmp	r3, #128	; 0x80
 8008856:	d804      	bhi.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008858:	2b00      	cmp	r3, #0
 800885a:	d008      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800885c:	2b40      	cmp	r3, #64	; 0x40
 800885e:	d00d      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008860:	e01e      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008862:	2bc0      	cmp	r3, #192	; 0xc0
 8008864:	d01f      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800886a:	d01e      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800886c:	e018      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800886e:	4b6c      	ldr	r3, [pc, #432]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008872:	4a6b      	ldr	r2, [pc, #428]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008878:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800887a:	e017      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3304      	adds	r3, #4
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f001 fc9c 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800888c:	e00e      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3324      	adds	r3, #36	; 0x24
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f001 fd45 	bl	800a324 <RCCEx_PLL3_Config>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800889e:	e005      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	75fb      	strb	r3, [r7, #23]
      break;
 80088a4:	e002      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80088a6:	bf00      	nop
 80088a8:	e000      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80088aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d109      	bne.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80088b2:	4b5b      	ldr	r3, [pc, #364]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088be:	4958      	ldr	r1, [pc, #352]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	650b      	str	r3, [r1, #80]	; 0x50
 80088c4:	e001      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d044      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088e0:	d01f      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80088e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088e6:	d805      	bhi.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00a      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80088ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088f0:	d00e      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80088f2:	e01f      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80088f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088f8:	d01f      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80088fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088fe:	d01e      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008900:	e018      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008902:	4b47      	ldr	r3, [pc, #284]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	4a46      	ldr	r2, [pc, #280]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800890c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800890e:	e017      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3304      	adds	r3, #4
 8008914:	2100      	movs	r1, #0
 8008916:	4618      	mov	r0, r3
 8008918:	f001 fc52 	bl	800a1c0 <RCCEx_PLL2_Config>
 800891c:	4603      	mov	r3, r0
 800891e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008920:	e00e      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3324      	adds	r3, #36	; 0x24
 8008926:	2100      	movs	r1, #0
 8008928:	4618      	mov	r0, r3
 800892a:	f001 fcfb 	bl	800a324 <RCCEx_PLL3_Config>
 800892e:	4603      	mov	r3, r0
 8008930:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008932:	e005      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	75fb      	strb	r3, [r7, #23]
      break;
 8008938:	e002      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800893a:	bf00      	nop
 800893c:	e000      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800893e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10a      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008946:	4b36      	ldr	r3, [pc, #216]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800894a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008954:	4932      	ldr	r1, [pc, #200]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008956:	4313      	orrs	r3, r2
 8008958:	658b      	str	r3, [r1, #88]	; 0x58
 800895a:	e001      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800895c:	7dfb      	ldrb	r3, [r7, #23]
 800895e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008968:	2b00      	cmp	r3, #0
 800896a:	d044      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008976:	d01f      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800897c:	d805      	bhi.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8008982:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008986:	d00e      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008988:	e01f      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800898a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800898e:	d01f      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008994:	d01e      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008996:	e018      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008998:	4b21      	ldr	r3, [pc, #132]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	4a20      	ldr	r2, [pc, #128]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800899e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089a4:	e017      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3304      	adds	r3, #4
 80089aa:	2100      	movs	r1, #0
 80089ac:	4618      	mov	r0, r3
 80089ae:	f001 fc07 	bl	800a1c0 <RCCEx_PLL2_Config>
 80089b2:	4603      	mov	r3, r0
 80089b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80089b6:	e00e      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3324      	adds	r3, #36	; 0x24
 80089bc:	2100      	movs	r1, #0
 80089be:	4618      	mov	r0, r3
 80089c0:	f001 fcb0 	bl	800a324 <RCCEx_PLL3_Config>
 80089c4:	4603      	mov	r3, r0
 80089c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089c8:	e005      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	75fb      	strb	r3, [r7, #23]
      break;
 80089ce:	e002      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80089d0:	bf00      	nop
 80089d2:	e000      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80089d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10a      	bne.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80089dc:	4b10      	ldr	r3, [pc, #64]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80089de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80089ea:	490d      	ldr	r1, [pc, #52]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	658b      	str	r3, [r1, #88]	; 0x58
 80089f0:	e001      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d035      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a06:	2b10      	cmp	r3, #16
 8008a08:	d00c      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8008a0a:	2b10      	cmp	r3, #16
 8008a0c:	d802      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d01b      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8008a12:	e017      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	d00c      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008a18:	2b30      	cmp	r3, #48	; 0x30
 8008a1a:	d018      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8008a1c:	e012      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008a1e:	bf00      	nop
 8008a20:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a24:	4baf      	ldr	r3, [pc, #700]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	4aae      	ldr	r2, [pc, #696]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a30:	e00e      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	3304      	adds	r3, #4
 8008a36:	2102      	movs	r1, #2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f001 fbc1 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a42:	e005      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	75fb      	strb	r3, [r7, #23]
      break;
 8008a48:	e002      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008a4a:	bf00      	nop
 8008a4c:	e000      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a50:	7dfb      	ldrb	r3, [r7, #23]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d109      	bne.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a56:	4ba3      	ldr	r3, [pc, #652]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a62:	49a0      	ldr	r1, [pc, #640]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a64:	4313      	orrs	r3, r2
 8008a66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a68:	e001      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
 8008a6c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d042      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a82:	d01f      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a88:	d805      	bhi.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8008a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a92:	d00e      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008a94:	e01f      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008a96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a9a:	d01f      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008aa0:	d01e      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008aa2:	e018      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aa4:	4b8f      	ldr	r3, [pc, #572]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa8:	4a8e      	ldr	r2, [pc, #568]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ab0:	e017      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f001 fb81 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ac2:	e00e      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3324      	adds	r3, #36	; 0x24
 8008ac8:	2100      	movs	r1, #0
 8008aca:	4618      	mov	r0, r3
 8008acc:	f001 fc2a 	bl	800a324 <RCCEx_PLL3_Config>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ad4:	e005      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8008ada:	e002      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008adc:	bf00      	nop
 8008ade:	e000      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d109      	bne.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ae8:	4b7e      	ldr	r3, [pc, #504]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af4:	497b      	ldr	r1, [pc, #492]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	650b      	str	r3, [r1, #80]	; 0x50
 8008afa:	e001      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008afc:	7dfb      	ldrb	r3, [r7, #23]
 8008afe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d042      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b14:	d01b      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008b16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b1a:	d805      	bhi.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d022      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b24:	d00a      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008b26:	e01b      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008b28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b2c:	d01d      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8008b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b32:	d01c      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008b34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b38:	d01b      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008b3a:	e011      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	2101      	movs	r1, #1
 8008b42:	4618      	mov	r0, r3
 8008b44:	f001 fb3c 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b4c:	e012      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	3324      	adds	r3, #36	; 0x24
 8008b52:	2101      	movs	r1, #1
 8008b54:	4618      	mov	r0, r3
 8008b56:	f001 fbe5 	bl	800a324 <RCCEx_PLL3_Config>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b5e:	e009      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	75fb      	strb	r3, [r7, #23]
      break;
 8008b64:	e006      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008b66:	bf00      	nop
 8008b68:	e004      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008b6a:	bf00      	nop
 8008b6c:	e002      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008b6e:	bf00      	nop
 8008b70:	e000      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d109      	bne.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008b7a:	4b5a      	ldr	r3, [pc, #360]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b7e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b86:	4957      	ldr	r1, [pc, #348]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	650b      	str	r3, [r1, #80]	; 0x50
 8008b8c:	e001      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d044      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba8:	d01b      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bae:	d805      	bhi.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d022      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008bb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bb8:	d00a      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008bba:	e01b      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8008bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc0:	d01d      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bc6:	d01c      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8008bc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bcc:	d01b      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008bce:	e011      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f001 faf2 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008be0:	e012      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3324      	adds	r3, #36	; 0x24
 8008be6:	2101      	movs	r1, #1
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 fb9b 	bl	800a324 <RCCEx_PLL3_Config>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008bf2:	e009      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf8:	e006      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008bfa:	bf00      	nop
 8008bfc:	e004      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008bfe:	bf00      	nop
 8008c00:	e002      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008c02:	bf00      	nop
 8008c04:	e000      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10a      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008c0e:	4b35      	ldr	r3, [pc, #212]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c1c:	4931      	ldr	r1, [pc, #196]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	658b      	str	r3, [r1, #88]	; 0x58
 8008c22:	e001      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d02d      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c3c:	d005      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c42:	d009      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d013      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008c48:	e00f      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c4a:	4b26      	ldr	r3, [pc, #152]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4e:	4a25      	ldr	r2, [pc, #148]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c56:	e00c      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f001 faae 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008c64:	4603      	mov	r3, r0
 8008c66:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c68:	e003      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c6e:	e000      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8008c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d109      	bne.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c78:	4b1a      	ldr	r3, [pc, #104]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c84:	4917      	ldr	r1, [pc, #92]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	650b      	str	r3, [r1, #80]	; 0x50
 8008c8a:	e001      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
 8008c8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d035      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d81b      	bhi.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008ca4:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008caa:	bf00      	nop
 8008cac:	08008ce9 	.word	0x08008ce9
 8008cb0:	08008cbd 	.word	0x08008cbd
 8008cb4:	08008ccb 	.word	0x08008ccb
 8008cb8:	08008ce9 	.word	0x08008ce9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cbc:	4b09      	ldr	r3, [pc, #36]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	4a08      	ldr	r2, [pc, #32]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008cc8:	e00f      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3304      	adds	r3, #4
 8008cce:	2102      	movs	r1, #2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f001 fa75 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008cda:	e006      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	75fb      	strb	r3, [r7, #23]
      break;
 8008ce0:	e003      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8008ce2:	bf00      	nop
 8008ce4:	58024400 	.word	0x58024400
      break;
 8008ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d109      	bne.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008cf0:	4bba      	ldr	r3, [pc, #744]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf4:	f023 0203 	bic.w	r2, r3, #3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cfc:	49b7      	ldr	r1, [pc, #732]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d02:	e001      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
 8008d06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 8086 	beq.w	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d16:	4bb2      	ldr	r3, [pc, #712]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4ab1      	ldr	r2, [pc, #708]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d22:	f7f8 fe71 	bl	8001a08 <HAL_GetTick>
 8008d26:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d28:	e009      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d2a:	f7f8 fe6d 	bl	8001a08 <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	2b64      	cmp	r3, #100	; 0x64
 8008d36:	d902      	bls.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	75fb      	strb	r3, [r7, #23]
        break;
 8008d3c:	e005      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d3e:	4ba8      	ldr	r3, [pc, #672]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0ef      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d166      	bne.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d50:	4ba2      	ldr	r3, [pc, #648]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d5a:	4053      	eors	r3, r2
 8008d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d013      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d64:	4b9d      	ldr	r3, [pc, #628]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d6c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d6e:	4b9b      	ldr	r3, [pc, #620]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d72:	4a9a      	ldr	r2, [pc, #616]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d78:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d7a:	4b98      	ldr	r3, [pc, #608]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7e:	4a97      	ldr	r2, [pc, #604]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d84:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008d86:	4a95      	ldr	r2, [pc, #596]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d96:	d115      	bne.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d98:	f7f8 fe36 	bl	8001a08 <HAL_GetTick>
 8008d9c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d9e:	e00b      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008da0:	f7f8 fe32 	bl	8001a08 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d902      	bls.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	75fb      	strb	r3, [r7, #23]
            break;
 8008db6:	e005      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008db8:	4b88      	ldr	r3, [pc, #544]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dbc:	f003 0302 	and.w	r3, r3, #2
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d0ed      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d126      	bne.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dd8:	d10d      	bne.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008dda:	4b80      	ldr	r3, [pc, #512]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008de8:	0919      	lsrs	r1, r3, #4
 8008dea:	4b7e      	ldr	r3, [pc, #504]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008dec:	400b      	ands	r3, r1
 8008dee:	497b      	ldr	r1, [pc, #492]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	610b      	str	r3, [r1, #16]
 8008df4:	e005      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008df6:	4b79      	ldr	r3, [pc, #484]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	4a78      	ldr	r2, [pc, #480]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008dfc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e00:	6113      	str	r3, [r2, #16]
 8008e02:	4b76      	ldr	r3, [pc, #472]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e10:	4972      	ldr	r1, [pc, #456]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	670b      	str	r3, [r1, #112]	; 0x70
 8008e16:	e004      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	75bb      	strb	r3, [r7, #22]
 8008e1c:	e001      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d07d      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e32:	2b28      	cmp	r3, #40	; 0x28
 8008e34:	d866      	bhi.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008e36:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008f0b 	.word	0x08008f0b
 8008e40:	08008f05 	.word	0x08008f05
 8008e44:	08008f05 	.word	0x08008f05
 8008e48:	08008f05 	.word	0x08008f05
 8008e4c:	08008f05 	.word	0x08008f05
 8008e50:	08008f05 	.word	0x08008f05
 8008e54:	08008f05 	.word	0x08008f05
 8008e58:	08008f05 	.word	0x08008f05
 8008e5c:	08008ee1 	.word	0x08008ee1
 8008e60:	08008f05 	.word	0x08008f05
 8008e64:	08008f05 	.word	0x08008f05
 8008e68:	08008f05 	.word	0x08008f05
 8008e6c:	08008f05 	.word	0x08008f05
 8008e70:	08008f05 	.word	0x08008f05
 8008e74:	08008f05 	.word	0x08008f05
 8008e78:	08008f05 	.word	0x08008f05
 8008e7c:	08008ef3 	.word	0x08008ef3
 8008e80:	08008f05 	.word	0x08008f05
 8008e84:	08008f05 	.word	0x08008f05
 8008e88:	08008f05 	.word	0x08008f05
 8008e8c:	08008f05 	.word	0x08008f05
 8008e90:	08008f05 	.word	0x08008f05
 8008e94:	08008f05 	.word	0x08008f05
 8008e98:	08008f05 	.word	0x08008f05
 8008e9c:	08008f0b 	.word	0x08008f0b
 8008ea0:	08008f05 	.word	0x08008f05
 8008ea4:	08008f05 	.word	0x08008f05
 8008ea8:	08008f05 	.word	0x08008f05
 8008eac:	08008f05 	.word	0x08008f05
 8008eb0:	08008f05 	.word	0x08008f05
 8008eb4:	08008f05 	.word	0x08008f05
 8008eb8:	08008f05 	.word	0x08008f05
 8008ebc:	08008f0b 	.word	0x08008f0b
 8008ec0:	08008f05 	.word	0x08008f05
 8008ec4:	08008f05 	.word	0x08008f05
 8008ec8:	08008f05 	.word	0x08008f05
 8008ecc:	08008f05 	.word	0x08008f05
 8008ed0:	08008f05 	.word	0x08008f05
 8008ed4:	08008f05 	.word	0x08008f05
 8008ed8:	08008f05 	.word	0x08008f05
 8008edc:	08008f0b 	.word	0x08008f0b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f001 f96a 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008eec:	4603      	mov	r3, r0
 8008eee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ef0:	e00c      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	3324      	adds	r3, #36	; 0x24
 8008ef6:	2101      	movs	r1, #1
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f001 fa13 	bl	800a324 <RCCEx_PLL3_Config>
 8008efe:	4603      	mov	r3, r0
 8008f00:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008f02:	e003      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	75fb      	strb	r3, [r7, #23]
      break;
 8008f08:	e000      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8008f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f0c:	7dfb      	ldrb	r3, [r7, #23]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d109      	bne.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f12:	4b32      	ldr	r3, [pc, #200]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f16:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f1e:	492f      	ldr	r1, [pc, #188]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	654b      	str	r3, [r1, #84]	; 0x54
 8008f24:	e001      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
 8008f28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d037      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f3a:	2b05      	cmp	r3, #5
 8008f3c:	d820      	bhi.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008f3e:	a201      	add	r2, pc, #4	; (adr r2, 8008f44 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f44:	08008f87 	.word	0x08008f87
 8008f48:	08008f5d 	.word	0x08008f5d
 8008f4c:	08008f6f 	.word	0x08008f6f
 8008f50:	08008f87 	.word	0x08008f87
 8008f54:	08008f87 	.word	0x08008f87
 8008f58:	08008f87 	.word	0x08008f87
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3304      	adds	r3, #4
 8008f60:	2101      	movs	r1, #1
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 f92c 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f6c:	e00c      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3324      	adds	r3, #36	; 0x24
 8008f72:	2101      	movs	r1, #1
 8008f74:	4618      	mov	r0, r3
 8008f76:	f001 f9d5 	bl	800a324 <RCCEx_PLL3_Config>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f7e:	e003      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	75fb      	strb	r3, [r7, #23]
      break;
 8008f84:	e000      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8008f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d109      	bne.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008f8e:	4b13      	ldr	r3, [pc, #76]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f92:	f023 0207 	bic.w	r2, r3, #7
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f9a:	4910      	ldr	r1, [pc, #64]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	654b      	str	r3, [r1, #84]	; 0x54
 8008fa0:	e001      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
 8008fa4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 0304 	and.w	r3, r3, #4
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d040      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb8:	2b05      	cmp	r3, #5
 8008fba:	d827      	bhi.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008fbc:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8008fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc2:	bf00      	nop
 8008fc4:	08009013 	.word	0x08009013
 8008fc8:	08008fe9 	.word	0x08008fe9
 8008fcc:	08008ffb 	.word	0x08008ffb
 8008fd0:	08009013 	.word	0x08009013
 8008fd4:	08009013 	.word	0x08009013
 8008fd8:	08009013 	.word	0x08009013
 8008fdc:	58024400 	.word	0x58024400
 8008fe0:	58024800 	.word	0x58024800
 8008fe4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	3304      	adds	r3, #4
 8008fec:	2101      	movs	r1, #1
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 f8e6 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008ff8:	e00c      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	3324      	adds	r3, #36	; 0x24
 8008ffe:	2101      	movs	r1, #1
 8009000:	4618      	mov	r0, r3
 8009002:	f001 f98f 	bl	800a324 <RCCEx_PLL3_Config>
 8009006:	4603      	mov	r3, r0
 8009008:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800900a:	e003      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	75fb      	strb	r3, [r7, #23]
      break;
 8009010:	e000      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009014:	7dfb      	ldrb	r3, [r7, #23]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10a      	bne.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800901a:	4bb2      	ldr	r3, [pc, #712]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800901c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800901e:	f023 0207 	bic.w	r2, r3, #7
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009028:	49ae      	ldr	r1, [pc, #696]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800902a:	4313      	orrs	r3, r2
 800902c:	658b      	str	r3, [r1, #88]	; 0x58
 800902e:	e001      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009030:	7dfb      	ldrb	r3, [r7, #23]
 8009032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0320 	and.w	r3, r3, #32
 800903c:	2b00      	cmp	r3, #0
 800903e:	d044      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800904a:	d01b      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800904c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009050:	d805      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009052:	2b00      	cmp	r3, #0
 8009054:	d022      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800905a:	d00a      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800905c:	e01b      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800905e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009062:	d01d      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009068:	d01c      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800906a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800906e:	d01b      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8009070:	e011      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	3304      	adds	r3, #4
 8009076:	2100      	movs	r1, #0
 8009078:	4618      	mov	r0, r3
 800907a:	f001 f8a1 	bl	800a1c0 <RCCEx_PLL2_Config>
 800907e:	4603      	mov	r3, r0
 8009080:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009082:	e012      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3324      	adds	r3, #36	; 0x24
 8009088:	2102      	movs	r1, #2
 800908a:	4618      	mov	r0, r3
 800908c:	f001 f94a 	bl	800a324 <RCCEx_PLL3_Config>
 8009090:	4603      	mov	r3, r0
 8009092:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009094:	e009      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	75fb      	strb	r3, [r7, #23]
      break;
 800909a:	e006      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800909c:	bf00      	nop
 800909e:	e004      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80090a0:	bf00      	nop
 80090a2:	e002      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80090a4:	bf00      	nop
 80090a6:	e000      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80090a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090aa:	7dfb      	ldrb	r3, [r7, #23]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10a      	bne.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090b0:	4b8c      	ldr	r3, [pc, #560]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80090b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090be:	4989      	ldr	r1, [pc, #548]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80090c0:	4313      	orrs	r3, r2
 80090c2:	654b      	str	r3, [r1, #84]	; 0x54
 80090c4:	e001      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d044      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090e0:	d01b      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80090e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090e6:	d805      	bhi.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d022      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80090ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090f0:	d00a      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80090f2:	e01b      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80090f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090f8:	d01d      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80090fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80090fe:	d01c      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8009100:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009104:	d01b      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8009106:	e011      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3304      	adds	r3, #4
 800910c:	2100      	movs	r1, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f001 f856 	bl	800a1c0 <RCCEx_PLL2_Config>
 8009114:	4603      	mov	r3, r0
 8009116:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009118:	e012      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3324      	adds	r3, #36	; 0x24
 800911e:	2102      	movs	r1, #2
 8009120:	4618      	mov	r0, r3
 8009122:	f001 f8ff 	bl	800a324 <RCCEx_PLL3_Config>
 8009126:	4603      	mov	r3, r0
 8009128:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800912a:	e009      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	75fb      	strb	r3, [r7, #23]
      break;
 8009130:	e006      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009132:	bf00      	nop
 8009134:	e004      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009136:	bf00      	nop
 8009138:	e002      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800913a:	bf00      	nop
 800913c:	e000      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800913e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009140:	7dfb      	ldrb	r3, [r7, #23]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10a      	bne.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009146:	4b67      	ldr	r3, [pc, #412]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800914a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009154:	4963      	ldr	r1, [pc, #396]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009156:	4313      	orrs	r3, r2
 8009158:	658b      	str	r3, [r1, #88]	; 0x58
 800915a:	e001      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800915c:	7dfb      	ldrb	r3, [r7, #23]
 800915e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009168:	2b00      	cmp	r3, #0
 800916a:	d044      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009176:	d01b      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8009178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800917c:	d805      	bhi.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800917e:	2b00      	cmp	r3, #0
 8009180:	d022      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009186:	d00a      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009188:	e01b      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800918a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800918e:	d01d      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009190:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009194:	d01c      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8009196:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800919a:	d01b      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800919c:	e011      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3304      	adds	r3, #4
 80091a2:	2100      	movs	r1, #0
 80091a4:	4618      	mov	r0, r3
 80091a6:	f001 f80b 	bl	800a1c0 <RCCEx_PLL2_Config>
 80091aa:	4603      	mov	r3, r0
 80091ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80091ae:	e012      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	3324      	adds	r3, #36	; 0x24
 80091b4:	2102      	movs	r1, #2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f001 f8b4 	bl	800a324 <RCCEx_PLL3_Config>
 80091bc:	4603      	mov	r3, r0
 80091be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80091c0:	e009      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	75fb      	strb	r3, [r7, #23]
      break;
 80091c6:	e006      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80091c8:	bf00      	nop
 80091ca:	e004      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80091cc:	bf00      	nop
 80091ce:	e002      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80091d0:	bf00      	nop
 80091d2:	e000      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80091d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10a      	bne.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80091dc:	4b41      	ldr	r3, [pc, #260]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80091de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091ea:	493e      	ldr	r1, [pc, #248]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	658b      	str	r3, [r1, #88]	; 0x58
 80091f0:	e001      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0308 	and.w	r3, r3, #8
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d01a      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800920c:	d10a      	bne.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	3324      	adds	r3, #36	; 0x24
 8009212:	2102      	movs	r1, #2
 8009214:	4618      	mov	r0, r3
 8009216:	f001 f885 	bl	800a324 <RCCEx_PLL3_Config>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009224:	4b2f      	ldr	r3, [pc, #188]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009228:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009232:	492c      	ldr	r1, [pc, #176]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009234:	4313      	orrs	r3, r2
 8009236:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0310 	and.w	r3, r3, #16
 8009240:	2b00      	cmp	r3, #0
 8009242:	d01a      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800924a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800924e:	d10a      	bne.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	3324      	adds	r3, #36	; 0x24
 8009254:	2102      	movs	r1, #2
 8009256:	4618      	mov	r0, r3
 8009258:	f001 f864 	bl	800a324 <RCCEx_PLL3_Config>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009266:	4b1f      	ldr	r3, [pc, #124]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800926a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009274:	491b      	ldr	r1, [pc, #108]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009276:	4313      	orrs	r3, r2
 8009278:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d032      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800928c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009290:	d00d      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8009292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009296:	d016      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8009298:	2b00      	cmp	r3, #0
 800929a:	d111      	bne.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3304      	adds	r3, #4
 80092a0:	2100      	movs	r1, #0
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 ff8c 	bl	800a1c0 <RCCEx_PLL2_Config>
 80092a8:	4603      	mov	r3, r0
 80092aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80092ac:	e00c      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	3324      	adds	r3, #36	; 0x24
 80092b2:	2102      	movs	r1, #2
 80092b4:	4618      	mov	r0, r3
 80092b6:	f001 f835 	bl	800a324 <RCCEx_PLL3_Config>
 80092ba:	4603      	mov	r3, r0
 80092bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80092be:	e003      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	75fb      	strb	r3, [r7, #23]
      break;
 80092c4:	e000      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80092c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10c      	bne.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092ce:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80092d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092dc:	4901      	ldr	r1, [pc, #4]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80092de:	4313      	orrs	r3, r2
 80092e0:	658b      	str	r3, [r1, #88]	; 0x58
 80092e2:	e003      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80092e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e8:	7dfb      	ldrb	r3, [r7, #23]
 80092ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d02f      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009302:	d00c      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009304:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009308:	d015      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800930a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800930e:	d10f      	bne.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009310:	4b71      	ldr	r3, [pc, #452]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	4a70      	ldr	r2, [pc, #448]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800931a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800931c:	e00c      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	3324      	adds	r3, #36	; 0x24
 8009322:	2101      	movs	r1, #1
 8009324:	4618      	mov	r0, r3
 8009326:	f000 fffd 	bl	800a324 <RCCEx_PLL3_Config>
 800932a:	4603      	mov	r3, r0
 800932c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800932e:	e003      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	75fb      	strb	r3, [r7, #23]
      break;
 8009334:	e000      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009338:	7dfb      	ldrb	r3, [r7, #23]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10a      	bne.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800933e:	4b66      	ldr	r3, [pc, #408]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800934c:	4962      	ldr	r1, [pc, #392]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800934e:	4313      	orrs	r3, r2
 8009350:	654b      	str	r3, [r1, #84]	; 0x54
 8009352:	e001      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009354:	7dfb      	ldrb	r3, [r7, #23]
 8009356:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d029      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800936c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009370:	d007      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009372:	e00f      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009374:	4b58      	ldr	r3, [pc, #352]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009378:	4a57      	ldr	r2, [pc, #348]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800937a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800937e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009380:	e00b      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	3304      	adds	r3, #4
 8009386:	2102      	movs	r1, #2
 8009388:	4618      	mov	r0, r3
 800938a:	f000 ff19 	bl	800a1c0 <RCCEx_PLL2_Config>
 800938e:	4603      	mov	r3, r0
 8009390:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009392:	e002      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	75fb      	strb	r3, [r7, #23]
      break;
 8009398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800939a:	7dfb      	ldrb	r3, [r7, #23]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d109      	bne.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80093a0:	4b4d      	ldr	r3, [pc, #308]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80093a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ac:	494a      	ldr	r1, [pc, #296]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80093ae:	4313      	orrs	r3, r2
 80093b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80093b2:	e001      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b4:	7dfb      	ldrb	r3, [r7, #23]
 80093b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00a      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3324      	adds	r3, #36	; 0x24
 80093c8:	2102      	movs	r1, #2
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 ffaa 	bl	800a324 <RCCEx_PLL3_Config>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d02f      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ee:	d00c      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80093f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093f4:	d802      	bhi.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d011      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80093fa:	e00d      	b.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80093fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009400:	d00f      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8009402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009406:	d00e      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8009408:	e006      	b.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800940a:	4b33      	ldr	r3, [pc, #204]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	4a32      	ldr	r2, [pc, #200]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009414:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009416:	e007      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	75fb      	strb	r3, [r7, #23]
      break;
 800941c:	e004      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800941e:	bf00      	nop
 8009420:	e002      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009422:	bf00      	nop
 8009424:	e000      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009428:	7dfb      	ldrb	r3, [r7, #23]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d109      	bne.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800942e:	4b2a      	ldr	r3, [pc, #168]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009432:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800943a:	4927      	ldr	r1, [pc, #156]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800943c:	4313      	orrs	r3, r2
 800943e:	654b      	str	r3, [r1, #84]	; 0x54
 8009440:	e001      	b.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d008      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009452:	4b21      	ldr	r3, [pc, #132]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009456:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945e:	491e      	ldr	r1, [pc, #120]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009460:	4313      	orrs	r3, r2
 8009462:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d008      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009470:	4b19      	ldr	r3, [pc, #100]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009474:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800947c:	4916      	ldr	r1, [pc, #88]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800947e:	4313      	orrs	r3, r2
 8009480:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00d      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800948e:	4b12      	ldr	r3, [pc, #72]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	4a11      	ldr	r2, [pc, #68]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009494:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009498:	6113      	str	r3, [r2, #16]
 800949a:	4b0f      	ldr	r3, [pc, #60]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800949c:	691a      	ldr	r2, [r3, #16]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80094a4:	490c      	ldr	r1, [pc, #48]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	da08      	bge.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80094b2:	4b09      	ldr	r3, [pc, #36]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80094b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094be:	4906      	ldr	r1, [pc, #24]	; (80094d8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80094c4:	7dbb      	ldrb	r3, [r7, #22]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d101      	bne.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	e000      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3718      	adds	r7, #24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	58024400 	.word	0x58024400

080094dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b090      	sub	sp, #64	; 0x40
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ea:	d150      	bne.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80094ec:	4ba1      	ldr	r3, [pc, #644]	; (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80094ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094f0:	f003 0307 	and.w	r3, r3, #7
 80094f4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	2b04      	cmp	r3, #4
 80094fa:	d844      	bhi.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80094fc:	a201      	add	r2, pc, #4	; (adr r2, 8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80094fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009502:	bf00      	nop
 8009504:	08009519 	.word	0x08009519
 8009508:	08009529 	.word	0x08009529
 800950c:	08009539 	.word	0x08009539
 8009510:	08009581 	.word	0x08009581
 8009514:	08009549 	.word	0x08009549
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800951c:	4618      	mov	r0, r3
 800951e:	f000 fd03 	bl	8009f28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009526:	e241      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009528:	f107 0318 	add.w	r3, r7, #24
 800952c:	4618      	mov	r0, r3
 800952e:	f000 fa63 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009536:	e239      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009538:	f107 030c 	add.w	r3, r7, #12
 800953c:	4618      	mov	r0, r3
 800953e:	f000 fba7 	bl	8009c90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009546:	e231      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009548:	4b8a      	ldr	r3, [pc, #552]	; (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800954a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800954c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009550:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009558:	4b87      	ldr	r3, [pc, #540]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800955a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800955c:	e226      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800955e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009564:	d102      	bne.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8009566:	4b85      	ldr	r3, [pc, #532]	; (800977c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009568:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800956a:	e21f      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800956c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800956e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009572:	d102      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8009574:	4b82      	ldr	r3, [pc, #520]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009576:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009578:	e218      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800957a:	2300      	movs	r3, #0
 800957c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800957e:	e215      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009580:	4b80      	ldr	r3, [pc, #512]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009582:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009584:	e212      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800958a:	bf00      	nop
 800958c:	e20e      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009594:	d14f      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009596:	4b77      	ldr	r3, [pc, #476]	; (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800959a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800959e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80095a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a2:	2b80      	cmp	r3, #128	; 0x80
 80095a4:	d01c      	beq.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80095a6:	2b80      	cmp	r3, #128	; 0x80
 80095a8:	d804      	bhi.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d008      	beq.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80095ae:	2b40      	cmp	r3, #64	; 0x40
 80095b0:	d00e      	beq.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80095b2:	e03c      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80095b4:	2bc0      	cmp	r3, #192	; 0xc0
 80095b6:	d037      	beq.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80095b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095bc:	d018      	beq.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80095be:	e036      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 fcaf 	bl	8009f28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ce:	e1ed      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095d0:	f107 0318 	add.w	r3, r7, #24
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 fa0f 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095de:	e1e5      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095e0:	f107 030c 	add.w	r3, r7, #12
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fb53 	bl	8009c90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ee:	e1dd      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80095f0:	4b60      	ldr	r3, [pc, #384]	; (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80095f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095f8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80095fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d102      	bne.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009600:	4b5d      	ldr	r3, [pc, #372]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009602:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009604:	e1d2      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009608:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800960c:	d102      	bne.n	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800960e:	4b5b      	ldr	r3, [pc, #364]	; (800977c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009612:	e1cb      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800961a:	d102      	bne.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800961c:	4b58      	ldr	r3, [pc, #352]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800961e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009620:	e1c4      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009626:	e1c1      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009628:	4b56      	ldr	r3, [pc, #344]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800962c:	e1be      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009632:	bf00      	nop
 8009634:	e1ba      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800963c:	d153      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800963e:	4b4d      	ldr	r3, [pc, #308]	; (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009642:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009646:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800964e:	d01f      	beq.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8009650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009654:	d805      	bhi.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00a      	beq.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800965a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800965e:	d00f      	beq.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8009660:	e03d      	b.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8009662:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009666:	d037      	beq.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009668:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800966c:	d018      	beq.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800966e:	e036      	b.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009674:	4618      	mov	r0, r3
 8009676:	f000 fc57 	bl	8009f28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800967e:	e195      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009680:	f107 0318 	add.w	r3, r7, #24
 8009684:	4618      	mov	r0, r3
 8009686:	f000 f9b7 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800968e:	e18d      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009690:	f107 030c 	add.w	r3, r7, #12
 8009694:	4618      	mov	r0, r3
 8009696:	f000 fafb 	bl	8009c90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800969e:	e185      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80096a0:	4b34      	ldr	r3, [pc, #208]	; (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80096a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096a8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80096aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d102      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80096b0:	4b31      	ldr	r3, [pc, #196]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80096b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80096b4:	e17a      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80096b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096bc:	d102      	bne.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80096be:	4b2f      	ldr	r3, [pc, #188]	; (800977c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80096c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096c2:	e173      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80096c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ca:	d102      	bne.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80096cc:	4b2c      	ldr	r3, [pc, #176]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096d0:	e16c      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096d6:	e169      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80096d8:	4b2a      	ldr	r3, [pc, #168]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80096da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096dc:	e166      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096e2:	bf00      	nop
 80096e4:	e162      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096ec:	d15d      	bne.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80096ee:	4b21      	ldr	r3, [pc, #132]	; (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80096f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80096f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80096f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096fe:	d01f      	beq.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009704:	d805      	bhi.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800970a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800970e:	d00f      	beq.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8009710:	e047      	b.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8009712:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009716:	d041      	beq.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8009718:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800971c:	d018      	beq.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800971e:	e040      	b.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009724:	4618      	mov	r0, r3
 8009726:	f000 fbff 	bl	8009f28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800972e:	e13d      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009730:	f107 0318 	add.w	r3, r7, #24
 8009734:	4618      	mov	r0, r3
 8009736:	f000 f95f 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800973e:	e135      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009740:	f107 030c 	add.w	r3, r7, #12
 8009744:	4618      	mov	r0, r3
 8009746:	f000 faa3 	bl	8009c90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800974e:	e12d      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009750:	4b08      	ldr	r3, [pc, #32]	; (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009754:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009758:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800975a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800975c:	2b00      	cmp	r3, #0
 800975e:	d102      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009760:	4b05      	ldr	r3, [pc, #20]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009762:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009764:	e122      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800976c:	d10c      	bne.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800976e:	4b03      	ldr	r3, [pc, #12]	; (800977c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009772:	e11b      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009774:	58024400 	.word	0x58024400
 8009778:	03d09000 	.word	0x03d09000
 800977c:	003d0900 	.word	0x003d0900
 8009780:	007a1200 	.word	0x007a1200
 8009784:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800978e:	d102      	bne.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8009790:	4b89      	ldr	r3, [pc, #548]	; (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009794:	e10a      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800979a:	e107      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800979c:	4b87      	ldr	r3, [pc, #540]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097a0:	e104      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097a6:	bf00      	nop
 80097a8:	e100      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097b0:	d153      	bne.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80097b2:	4b83      	ldr	r3, [pc, #524]	; (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80097b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80097ba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097c2:	d01f      	beq.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80097c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097c8:	d805      	bhi.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00a      	beq.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80097ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d2:	d00f      	beq.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80097d4:	e03d      	b.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80097d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097da:	d037      	beq.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80097dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097e0:	d018      	beq.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80097e2:	e036      	b.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 fb9d 	bl	8009f28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097f2:	e0db      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097f4:	f107 0318 	add.w	r3, r7, #24
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 f8fd 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009802:	e0d3      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009804:	f107 030c 	add.w	r3, r7, #12
 8009808:	4618      	mov	r0, r3
 800980a:	f000 fa41 	bl	8009c90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009812:	e0cb      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009814:	4b6a      	ldr	r3, [pc, #424]	; (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009818:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800981c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800981e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009820:	2b00      	cmp	r3, #0
 8009822:	d102      	bne.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009824:	4b67      	ldr	r3, [pc, #412]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009826:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009828:	e0c0      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800982a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800982c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009830:	d102      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8009832:	4b65      	ldr	r3, [pc, #404]	; (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009834:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009836:	e0b9      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800983e:	d102      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8009840:	4b5d      	ldr	r3, [pc, #372]	; (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009844:	e0b2      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800984a:	e0af      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800984c:	4b5b      	ldr	r3, [pc, #364]	; (80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800984e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009850:	e0ac      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009852:	2300      	movs	r3, #0
 8009854:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009856:	bf00      	nop
 8009858:	e0a8      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009860:	d13d      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009862:	4b57      	ldr	r3, [pc, #348]	; (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009866:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800986a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009872:	d00c      	beq.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009878:	d011      	beq.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800987a:	2b00      	cmp	r3, #0
 800987c:	d12b      	bne.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800987e:	f107 0318 	add.w	r3, r7, #24
 8009882:	4618      	mov	r0, r3
 8009884:	f000 f8b8 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800988c:	e08e      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800988e:	f107 030c 	add.w	r3, r7, #12
 8009892:	4618      	mov	r0, r3
 8009894:	f000 f9fc 	bl	8009c90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800989c:	e086      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800989e:	4b48      	ldr	r3, [pc, #288]	; (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80098a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80098a6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80098a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d102      	bne.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80098ae:	4b45      	ldr	r3, [pc, #276]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80098b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80098b2:	e07b      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80098b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098ba:	d102      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80098bc:	4b42      	ldr	r3, [pc, #264]	; (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80098be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098c0:	e074      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80098c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098c8:	d102      	bne.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80098ca:	4b3b      	ldr	r3, [pc, #236]	; (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80098cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098ce:	e06d      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80098d0:	2300      	movs	r3, #0
 80098d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098d4:	e06a      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098da:	bf00      	nop
 80098dc:	e066      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e4:	d11f      	bne.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80098e6:	4b36      	ldr	r3, [pc, #216]	; (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80098e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098ee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80098f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80098f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098fa:	d008      	beq.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80098fc:	e00f      	b.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009902:	4618      	mov	r0, r3
 8009904:	f000 fb10 	bl	8009f28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800990c:	e04e      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800990e:	f107 0318 	add.w	r3, r7, #24
 8009912:	4618      	mov	r0, r3
 8009914:	f000 f870 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800991c:	e046      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009922:	bf00      	nop
 8009924:	e042      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800992c:	d13c      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800992e:	4b24      	ldr	r3, [pc, #144]	; (80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009932:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009936:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800993e:	d01e      	beq.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8009940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009944:	d805      	bhi.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00d      	beq.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800994a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800994e:	d00e      	beq.n	800996e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8009950:	e026      	b.n	80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8009952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009956:	d01d      	beq.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8009958:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800995c:	d01d      	beq.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800995e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009962:	d014      	beq.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009964:	e01c      	b.n	80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009966:	f000 f831 	bl	80099cc <HAL_RCCEx_GetD3PCLK1Freq>
 800996a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800996c:	e01e      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800996e:	f107 0318 	add.w	r3, r7, #24
 8009972:	4618      	mov	r0, r3
 8009974:	f000 f840 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800997c:	e016      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800997e:	f107 030c 	add.w	r3, r7, #12
 8009982:	4618      	mov	r0, r3
 8009984:	f000 f984 	bl	8009c90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800998c:	e00e      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800998e:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009992:	e00b      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8009994:	4b0c      	ldr	r3, [pc, #48]	; (80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009998:	e008      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800999a:	4b07      	ldr	r3, [pc, #28]	; (80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800999c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800999e:	e005      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099a4:	bf00      	nop
 80099a6:	e001      	b.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80099ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3740      	adds	r7, #64	; 0x40
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	007a1200 	.word	0x007a1200
 80099bc:	00bb8000 	.word	0x00bb8000
 80099c0:	58024400 	.word	0x58024400
 80099c4:	03d09000 	.word	0x03d09000
 80099c8:	003d0900 	.word	0x003d0900

080099cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80099d0:	f7fe fe4a 	bl	8008668 <HAL_RCC_GetHCLKFreq>
 80099d4:	4601      	mov	r1, r0
 80099d6:	4b06      	ldr	r3, [pc, #24]	; (80099f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	091b      	lsrs	r3, r3, #4
 80099dc:	f003 0307 	and.w	r3, r3, #7
 80099e0:	4a04      	ldr	r2, [pc, #16]	; (80099f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80099e2:	5cd3      	ldrb	r3, [r2, r3]
 80099e4:	f003 031f 	and.w	r3, r3, #31
 80099e8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	58024400 	.word	0x58024400
 80099f4:	0801452c 	.word	0x0801452c

080099f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b089      	sub	sp, #36	; 0x24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a00:	4b9d      	ldr	r3, [pc, #628]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a04:	f003 0303 	and.w	r3, r3, #3
 8009a08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009a0a:	4b9b      	ldr	r3, [pc, #620]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0e:	0b1b      	lsrs	r3, r3, #12
 8009a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009a16:	4b98      	ldr	r3, [pc, #608]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1a:	091b      	lsrs	r3, r3, #4
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009a22:	4b95      	ldr	r3, [pc, #596]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a26:	08db      	lsrs	r3, r3, #3
 8009a28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	fb02 f303 	mul.w	r3, r2, r3
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 810a 	beq.w	8009c5a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d05a      	beq.n	8009b02 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d302      	bcc.n	8009a56 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d078      	beq.n	8009b46 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009a54:	e099      	b.n	8009b8a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a56:	4b88      	ldr	r3, [pc, #544]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 0320 	and.w	r3, r3, #32
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d02d      	beq.n	8009abe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a62:	4b85      	ldr	r3, [pc, #532]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	08db      	lsrs	r3, r3, #3
 8009a68:	f003 0303 	and.w	r3, r3, #3
 8009a6c:	4a83      	ldr	r2, [pc, #524]	; (8009c7c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8009a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a72:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	ee07 3a90 	vmov	s15, r3
 8009a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a8c:	4b7a      	ldr	r3, [pc, #488]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a94:	ee07 3a90 	vmov	s15, r3
 8009a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aa0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009c80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009aa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009abc:	e087      	b.n	8009bce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	ee07 3a90 	vmov	s15, r3
 8009ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8009acc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ad0:	4b69      	ldr	r3, [pc, #420]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad8:	ee07 3a90 	vmov	s15, r3
 8009adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ae0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ae4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009c80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009ae8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009af0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009af4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009afc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b00:	e065      	b.n	8009bce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	ee07 3a90 	vmov	s15, r3
 8009b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009b10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b14:	4b58      	ldr	r3, [pc, #352]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b1c:	ee07 3a90 	vmov	s15, r3
 8009b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b24:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b28:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009c80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009b2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b44:	e043      	b.n	8009bce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	ee07 3a90 	vmov	s15, r3
 8009b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b50:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009c8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b58:	4b47      	ldr	r3, [pc, #284]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b60:	ee07 3a90 	vmov	s15, r3
 8009b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b68:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b6c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009c80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009b70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b88:	e021      	b.n	8009bce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	ee07 3a90 	vmov	s15, r3
 8009b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b94:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b9c:	4b36      	ldr	r3, [pc, #216]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba4:	ee07 3a90 	vmov	s15, r3
 8009ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bac:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bb0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009c80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009bb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bcc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009bce:	4b2a      	ldr	r3, [pc, #168]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd2:	0a5b      	lsrs	r3, r3, #9
 8009bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bd8:	ee07 3a90 	vmov	s15, r3
 8009bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009be4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bf4:	ee17 2a90 	vmov	r2, s15
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009bfc:	4b1e      	ldr	r3, [pc, #120]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c00:	0c1b      	lsrs	r3, r3, #16
 8009c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c22:	ee17 2a90 	vmov	r2, s15
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009c2a:	4b13      	ldr	r3, [pc, #76]	; (8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2e:	0e1b      	lsrs	r3, r3, #24
 8009c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c34:	ee07 3a90 	vmov	s15, r3
 8009c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c44:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c50:	ee17 2a90 	vmov	r2, s15
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c58:	e008      	b.n	8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	609a      	str	r2, [r3, #8]
}
 8009c6c:	bf00      	nop
 8009c6e:	3724      	adds	r7, #36	; 0x24
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	58024400 	.word	0x58024400
 8009c7c:	03d09000 	.word	0x03d09000
 8009c80:	46000000 	.word	0x46000000
 8009c84:	4c742400 	.word	0x4c742400
 8009c88:	4a742400 	.word	0x4a742400
 8009c8c:	4af42400 	.word	0x4af42400

08009c90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b089      	sub	sp, #36	; 0x24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c98:	4b9d      	ldr	r3, [pc, #628]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9c:	f003 0303 	and.w	r3, r3, #3
 8009ca0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009ca2:	4b9b      	ldr	r3, [pc, #620]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca6:	0d1b      	lsrs	r3, r3, #20
 8009ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009cae:	4b98      	ldr	r3, [pc, #608]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb2:	0a1b      	lsrs	r3, r3, #8
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009cba:	4b95      	ldr	r3, [pc, #596]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cbe:	08db      	lsrs	r3, r3, #3
 8009cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	fb02 f303 	mul.w	r3, r2, r3
 8009cca:	ee07 3a90 	vmov	s15, r3
 8009cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 810a 	beq.w	8009ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d05a      	beq.n	8009d9a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d302      	bcc.n	8009cee <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d078      	beq.n	8009dde <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8009cec:	e099      	b.n	8009e22 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cee:	4b88      	ldr	r3, [pc, #544]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0320 	and.w	r3, r3, #32
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d02d      	beq.n	8009d56 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cfa:	4b85      	ldr	r3, [pc, #532]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	08db      	lsrs	r3, r3, #3
 8009d00:	f003 0303 	and.w	r3, r3, #3
 8009d04:	4a83      	ldr	r2, [pc, #524]	; (8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009d06:	fa22 f303 	lsr.w	r3, r2, r3
 8009d0a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	ee07 3a90 	vmov	s15, r3
 8009d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	ee07 3a90 	vmov	s15, r3
 8009d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d24:	4b7a      	ldr	r3, [pc, #488]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d2c:	ee07 3a90 	vmov	s15, r3
 8009d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d34:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009f18 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d50:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d54:	e087      	b.n	8009e66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	ee07 3a90 	vmov	s15, r3
 8009d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d68:	4b69      	ldr	r3, [pc, #420]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d70:	ee07 3a90 	vmov	s15, r3
 8009d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d78:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009f18 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d98:	e065      	b.n	8009e66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	ee07 3a90 	vmov	s15, r3
 8009da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009da4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009da8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dac:	4b58      	ldr	r3, [pc, #352]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009db4:	ee07 3a90 	vmov	s15, r3
 8009db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dc0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009f18 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009dc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ddc:	e043      	b.n	8009e66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	ee07 3a90 	vmov	s15, r3
 8009de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009f24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8009dec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009df0:	4b47      	ldr	r3, [pc, #284]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df8:	ee07 3a90 	vmov	s15, r3
 8009dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e00:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e04:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009f18 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009e08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e20:	e021      	b.n	8009e66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	ee07 3a90 	vmov	s15, r3
 8009e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e2c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009e30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e34:	4b36      	ldr	r3, [pc, #216]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e3c:	ee07 3a90 	vmov	s15, r3
 8009e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e44:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e48:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009f18 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e64:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009e66:	4b2a      	ldr	r3, [pc, #168]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6a:	0a5b      	lsrs	r3, r3, #9
 8009e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e70:	ee07 3a90 	vmov	s15, r3
 8009e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e8c:	ee17 2a90 	vmov	r2, s15
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009e94:	4b1e      	ldr	r3, [pc, #120]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e98:	0c1b      	lsrs	r3, r3, #16
 8009e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e9e:	ee07 3a90 	vmov	s15, r3
 8009ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eba:	ee17 2a90 	vmov	r2, s15
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009ec2:	4b13      	ldr	r3, [pc, #76]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec6:	0e1b      	lsrs	r3, r3, #24
 8009ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ecc:	ee07 3a90 	vmov	s15, r3
 8009ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ee8:	ee17 2a90 	vmov	r2, s15
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009ef0:	e008      	b.n	8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	609a      	str	r2, [r3, #8]
}
 8009f04:	bf00      	nop
 8009f06:	3724      	adds	r7, #36	; 0x24
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	58024400 	.word	0x58024400
 8009f14:	03d09000 	.word	0x03d09000
 8009f18:	46000000 	.word	0x46000000
 8009f1c:	4c742400 	.word	0x4c742400
 8009f20:	4a742400 	.word	0x4a742400
 8009f24:	4af42400 	.word	0x4af42400

08009f28 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b089      	sub	sp, #36	; 0x24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f30:	4b9d      	ldr	r3, [pc, #628]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f34:	f003 0303 	and.w	r3, r3, #3
 8009f38:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009f3a:	4b9b      	ldr	r3, [pc, #620]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3e:	091b      	lsrs	r3, r3, #4
 8009f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f44:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009f46:	4b98      	ldr	r3, [pc, #608]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4a:	f003 0301 	and.w	r3, r3, #1
 8009f4e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009f50:	4b95      	ldr	r3, [pc, #596]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f54:	08db      	lsrs	r3, r3, #3
 8009f56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	fb02 f303 	mul.w	r3, r2, r3
 8009f60:	ee07 3a90 	vmov	s15, r3
 8009f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f68:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 810a 	beq.w	800a188 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d05a      	beq.n	800a030 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d302      	bcc.n	8009f84 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d078      	beq.n	800a074 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8009f82:	e099      	b.n	800a0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f84:	4b88      	ldr	r3, [pc, #544]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 0320 	and.w	r3, r3, #32
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d02d      	beq.n	8009fec <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f90:	4b85      	ldr	r3, [pc, #532]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	08db      	lsrs	r3, r3, #3
 8009f96:	f003 0303 	and.w	r3, r3, #3
 8009f9a:	4a84      	ldr	r2, [pc, #528]	; (800a1ac <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8009f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	ee07 3a90 	vmov	s15, r3
 8009fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	ee07 3a90 	vmov	s15, r3
 8009fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fba:	4b7b      	ldr	r3, [pc, #492]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc2:	ee07 3a90 	vmov	s15, r3
 8009fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009fea:	e087      	b.n	800a0fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	ee07 3a90 	vmov	s15, r3
 8009ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a1b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8009ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ffe:	4b6a      	ldr	r3, [pc, #424]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a00e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a012:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a01e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a02e:	e065      	b.n	800a0fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	ee07 3a90 	vmov	s15, r3
 800a036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a1b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800a03e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a042:	4b59      	ldr	r3, [pc, #356]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04a:	ee07 3a90 	vmov	s15, r3
 800a04e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a052:	ed97 6a03 	vldr	s12, [r7, #12]
 800a056:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a05a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a05e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a06e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a072:	e043      	b.n	800a0fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a1bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a086:	4b48      	ldr	r3, [pc, #288]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08e:	ee07 3a90 	vmov	s15, r3
 800a092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a096:	ed97 6a03 	vldr	s12, [r7, #12]
 800a09a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0b6:	e021      	b.n	800a0fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a1b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800a0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ca:	4b37      	ldr	r3, [pc, #220]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0fa:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a0fc:	4b2a      	ldr	r3, [pc, #168]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a100:	0a5b      	lsrs	r3, r3, #9
 800a102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a106:	ee07 3a90 	vmov	s15, r3
 800a10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a10e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a112:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a116:	edd7 6a07 	vldr	s13, [r7, #28]
 800a11a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a11e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a122:	ee17 2a90 	vmov	r2, s15
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a12a:	4b1f      	ldr	r3, [pc, #124]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12e:	0c1b      	lsrs	r3, r3, #16
 800a130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a134:	ee07 3a90 	vmov	s15, r3
 800a138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a140:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a144:	edd7 6a07 	vldr	s13, [r7, #28]
 800a148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a14c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a150:	ee17 2a90 	vmov	r2, s15
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a158:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15c:	0e1b      	lsrs	r3, r3, #24
 800a15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a162:	ee07 3a90 	vmov	s15, r3
 800a166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a16e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a172:	edd7 6a07 	vldr	s13, [r7, #28]
 800a176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a17a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a17e:	ee17 2a90 	vmov	r2, s15
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a186:	e008      	b.n	800a19a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	609a      	str	r2, [r3, #8]
}
 800a19a:	bf00      	nop
 800a19c:	3724      	adds	r7, #36	; 0x24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	58024400 	.word	0x58024400
 800a1ac:	03d09000 	.word	0x03d09000
 800a1b0:	46000000 	.word	0x46000000
 800a1b4:	4c742400 	.word	0x4c742400
 800a1b8:	4a742400 	.word	0x4a742400
 800a1bc:	4af42400 	.word	0x4af42400

0800a1c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1ce:	4b53      	ldr	r3, [pc, #332]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d2:	f003 0303 	and.w	r3, r3, #3
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d101      	bne.n	800a1de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e099      	b.n	800a312 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a1de:	4b4f      	ldr	r3, [pc, #316]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a4e      	ldr	r2, [pc, #312]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a1e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a1e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1ea:	f7f7 fc0d 	bl	8001a08 <HAL_GetTick>
 800a1ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1f0:	e008      	b.n	800a204 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a1f2:	f7f7 fc09 	bl	8001a08 <HAL_GetTick>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d901      	bls.n	800a204 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a200:	2303      	movs	r3, #3
 800a202:	e086      	b.n	800a312 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a204:	4b45      	ldr	r3, [pc, #276]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1f0      	bne.n	800a1f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a210:	4b42      	ldr	r3, [pc, #264]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a214:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	031b      	lsls	r3, r3, #12
 800a21e:	493f      	ldr	r1, [pc, #252]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a220:	4313      	orrs	r3, r2
 800a222:	628b      	str	r3, [r1, #40]	; 0x28
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	3b01      	subs	r3, #1
 800a22a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	3b01      	subs	r3, #1
 800a234:	025b      	lsls	r3, r3, #9
 800a236:	b29b      	uxth	r3, r3
 800a238:	431a      	orrs	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	3b01      	subs	r3, #1
 800a240:	041b      	lsls	r3, r3, #16
 800a242:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a246:	431a      	orrs	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	061b      	lsls	r3, r3, #24
 800a250:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a254:	4931      	ldr	r1, [pc, #196]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a256:	4313      	orrs	r3, r2
 800a258:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a25a:	4b30      	ldr	r3, [pc, #192]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	492d      	ldr	r1, [pc, #180]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a268:	4313      	orrs	r3, r2
 800a26a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a26c:	4b2b      	ldr	r3, [pc, #172]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a270:	f023 0220 	bic.w	r2, r3, #32
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	4928      	ldr	r1, [pc, #160]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a27a:	4313      	orrs	r3, r2
 800a27c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a27e:	4b27      	ldr	r3, [pc, #156]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a282:	4a26      	ldr	r2, [pc, #152]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a284:	f023 0310 	bic.w	r3, r3, #16
 800a288:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a28a:	4b24      	ldr	r3, [pc, #144]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a28c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a28e:	4b24      	ldr	r3, [pc, #144]	; (800a320 <RCCEx_PLL2_Config+0x160>)
 800a290:	4013      	ands	r3, r2
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	69d2      	ldr	r2, [r2, #28]
 800a296:	00d2      	lsls	r2, r2, #3
 800a298:	4920      	ldr	r1, [pc, #128]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a29e:	4b1f      	ldr	r3, [pc, #124]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a2:	4a1e      	ldr	r2, [pc, #120]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2a4:	f043 0310 	orr.w	r3, r3, #16
 800a2a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d106      	bne.n	800a2be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a2b0:	4b1a      	ldr	r3, [pc, #104]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b4:	4a19      	ldr	r2, [pc, #100]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2bc:	e00f      	b.n	800a2de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d106      	bne.n	800a2d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a2c4:	4b15      	ldr	r3, [pc, #84]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c8:	4a14      	ldr	r2, [pc, #80]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2d0:	e005      	b.n	800a2de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a2d2:	4b12      	ldr	r3, [pc, #72]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d6:	4a11      	ldr	r2, [pc, #68]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a2de:	4b0f      	ldr	r3, [pc, #60]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a0e      	ldr	r2, [pc, #56]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2ea:	f7f7 fb8d 	bl	8001a08 <HAL_GetTick>
 800a2ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2f0:	e008      	b.n	800a304 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a2f2:	f7f7 fb89 	bl	8001a08 <HAL_GetTick>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d901      	bls.n	800a304 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a300:	2303      	movs	r3, #3
 800a302:	e006      	b.n	800a312 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a304:	4b05      	ldr	r3, [pc, #20]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d0f0      	beq.n	800a2f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a310:	7bfb      	ldrb	r3, [r7, #15]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	58024400 	.word	0x58024400
 800a320:	ffff0007 	.word	0xffff0007

0800a324 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a332:	4b53      	ldr	r3, [pc, #332]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a336:	f003 0303 	and.w	r3, r3, #3
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d101      	bne.n	800a342 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e099      	b.n	800a476 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a342:	4b4f      	ldr	r3, [pc, #316]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a4e      	ldr	r2, [pc, #312]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a34c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a34e:	f7f7 fb5b 	bl	8001a08 <HAL_GetTick>
 800a352:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a354:	e008      	b.n	800a368 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a356:	f7f7 fb57 	bl	8001a08 <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	2b02      	cmp	r3, #2
 800a362:	d901      	bls.n	800a368 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e086      	b.n	800a476 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a368:	4b45      	ldr	r3, [pc, #276]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1f0      	bne.n	800a356 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a374:	4b42      	ldr	r3, [pc, #264]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a378:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	051b      	lsls	r3, r3, #20
 800a382:	493f      	ldr	r1, [pc, #252]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a384:	4313      	orrs	r3, r2
 800a386:	628b      	str	r3, [r1, #40]	; 0x28
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	3b01      	subs	r3, #1
 800a398:	025b      	lsls	r3, r3, #9
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	431a      	orrs	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	041b      	lsls	r3, r3, #16
 800a3a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	061b      	lsls	r3, r3, #24
 800a3b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3b8:	4931      	ldr	r1, [pc, #196]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a3be:	4b30      	ldr	r3, [pc, #192]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	492d      	ldr	r1, [pc, #180]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a3d0:	4b2b      	ldr	r3, [pc, #172]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	4928      	ldr	r1, [pc, #160]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a3e2:	4b27      	ldr	r3, [pc, #156]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e6:	4a26      	ldr	r2, [pc, #152]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a3ee:	4b24      	ldr	r3, [pc, #144]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3f2:	4b24      	ldr	r3, [pc, #144]	; (800a484 <RCCEx_PLL3_Config+0x160>)
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	69d2      	ldr	r2, [r2, #28]
 800a3fa:	00d2      	lsls	r2, r2, #3
 800a3fc:	4920      	ldr	r1, [pc, #128]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3fe:	4313      	orrs	r3, r2
 800a400:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a402:	4b1f      	ldr	r3, [pc, #124]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a406:	4a1e      	ldr	r2, [pc, #120]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a40c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d106      	bne.n	800a422 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a414:	4b1a      	ldr	r3, [pc, #104]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	4a19      	ldr	r2, [pc, #100]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a41a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a41e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a420:	e00f      	b.n	800a442 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d106      	bne.n	800a436 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a428:	4b15      	ldr	r3, [pc, #84]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42c:	4a14      	ldr	r2, [pc, #80]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a42e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a432:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a434:	e005      	b.n	800a442 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a436:	4b12      	ldr	r3, [pc, #72]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43a:	4a11      	ldr	r2, [pc, #68]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a43c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a440:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a442:	4b0f      	ldr	r3, [pc, #60]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a0e      	ldr	r2, [pc, #56]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a44c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a44e:	f7f7 fadb 	bl	8001a08 <HAL_GetTick>
 800a452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a454:	e008      	b.n	800a468 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a456:	f7f7 fad7 	bl	8001a08 <HAL_GetTick>
 800a45a:	4602      	mov	r2, r0
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	2b02      	cmp	r3, #2
 800a462:	d901      	bls.n	800a468 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a464:	2303      	movs	r3, #3
 800a466:	e006      	b.n	800a476 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a468:	4b05      	ldr	r3, [pc, #20]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d0f0      	beq.n	800a456 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a474:	7bfb      	ldrb	r3, [r7, #15]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	58024400 	.word	0x58024400
 800a484:	ffff0007 	.word	0xffff0007

0800a488 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	; 0x28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	e07c      	b.n	800a594 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10c      	bne.n	800a4c0 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d102      	bne.n	800a4ba <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7f6 fffc 	bl	80014b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2203      	movs	r2, #3
 800a4c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f867 	bl	800a59c <HAL_SD_InitCard>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e05d      	b.n	800a594 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a4d8:	f107 0308 	add.w	r3, r7, #8
 800a4dc:	4619      	mov	r1, r3
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fdb8 	bl	800b054 <HAL_SD_GetCardStatus>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e052      	b.n	800a594 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a4ee:	7e3b      	ldrb	r3, [r7, #24]
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a4f4:	7e7b      	ldrb	r3, [r7, #25]
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d10a      	bne.n	800a518 <HAL_SD_Init+0x90>
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	2b00      	cmp	r3, #0
 800a506:	d102      	bne.n	800a50e <HAL_SD_Init+0x86>
 800a508:	6a3b      	ldr	r3, [r7, #32]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d004      	beq.n	800a518 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a514:	65da      	str	r2, [r3, #92]	; 0x5c
 800a516:	e00b      	b.n	800a530 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d104      	bne.n	800a52a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a526:	65da      	str	r2, [r3, #92]	; 0x5c
 800a528:	e002      	b.n	800a530 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 fe6e 	bl	800b218 <HAL_SD_ConfigWideBusOperation>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d001      	beq.n	800a546 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e026      	b.n	800a594 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a546:	f7f7 fa5f 	bl	8001a08 <HAL_GetTick>
 800a54a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a54c:	e011      	b.n	800a572 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800a54e:	f7f7 fa5b 	bl	8001a08 <HAL_GetTick>
 800a552:	4602      	mov	r2, r0
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55c:	d109      	bne.n	800a572 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a564:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800a56e:	2303      	movs	r3, #3
 800a570:	e010      	b.n	800a594 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fefa 	bl	800b36c <HAL_SD_GetCardState>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	d1e7      	bne.n	800a54e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3728      	adds	r7, #40	; 0x28
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a59c:	b5b0      	push	{r4, r5, r7, lr}
 800a59e:	b08e      	sub	sp, #56	; 0x38
 800a5a0:	af04      	add	r7, sp, #16
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a5b4:	23fa      	movs	r3, #250	; 0xfa
 800a5b6:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d107      	bne.n	800a5d0 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f042 0210 	orr.w	r2, r2, #16
 800a5ce:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681d      	ldr	r5, [r3, #0]
 800a5d4:	466c      	mov	r4, sp
 800a5d6:	f107 0314 	add.w	r3, r7, #20
 800a5da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a5de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a5e2:	f107 0308 	add.w	r3, r7, #8
 800a5e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f004 f9db 	bl	800e9a4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f004 fa1e 	bl	800ea34 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 800a5f8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a5fc:	f7fe ff6e 	bl	80094dc <HAL_RCCEx_GetPeriphCLKFreq>
 800a600:	4602      	mov	r2, r0
 800a602:	4b2d      	ldr	r3, [pc, #180]	; (800a6b8 <HAL_SD_InitCard+0x11c>)
 800a604:	fba3 2302 	umull	r2, r3, r3, r2
 800a608:	095b      	lsrs	r3, r3, #5
 800a60a:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d008      	beq.n	800a624 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800a612:	4a2a      	ldr	r2, [pc, #168]	; (800a6bc <HAL_SD_InitCard+0x120>)
 800a614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a616:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61a:	3301      	adds	r3, #1
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7f7 f9ff 	bl	8001a20 <HAL_Delay>
 800a622:	e002      	b.n	800a62a <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 800a624:	2002      	movs	r0, #2
 800a626:	f7f7 f9fb 	bl	8001a20 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 ff7c 	bl	800b528 <SD_PowerON>
 800a630:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00b      	beq.n	800a650 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a644:	6a3b      	ldr	r3, [r7, #32]
 800a646:	431a      	orrs	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e02e      	b.n	800a6ae <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 feab 	bl	800b3ac <SD_InitCard>
 800a656:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a658:	6a3b      	ldr	r3, [r7, #32]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00b      	beq.n	800a676 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	431a      	orrs	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e01b      	b.n	800a6ae <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a67e:	4618      	mov	r0, r3
 800a680:	f004 fa6e 	bl	800eb60 <SDMMC_CmdBlockLength>
 800a684:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00f      	beq.n	800a6ac <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a0b      	ldr	r2, [pc, #44]	; (800a6c0 <HAL_SD_InitCard+0x124>)
 800a692:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	431a      	orrs	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e000      	b.n	800a6ae <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3728      	adds	r7, #40	; 0x28
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bdb0      	pop	{r4, r5, r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	10624dd3 	.word	0x10624dd3
 800a6bc:	00012110 	.word	0x00012110
 800a6c0:	1fe00fff 	.word	0x1fe00fff

0800a6c4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b092      	sub	sp, #72	; 0x48
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
 800a6d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a6d2:	f7f7 f999 	bl	8001a08 <HAL_GetTick>
 800a6d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d107      	bne.n	800a6f6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e167      	b.n	800a9c6 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	f040 815a 	bne.w	800a9b8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2200      	movs	r2, #0
 800a708:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a70a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	441a      	add	r2, r3
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a714:	429a      	cmp	r2, r3
 800a716:	d907      	bls.n	800a728 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	e14e      	b.n	800a9c6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2203      	movs	r2, #3
 800a72c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2200      	movs	r2, #0
 800a736:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d002      	beq.n	800a746 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a742:	025b      	lsls	r3, r3, #9
 800a744:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a746:	f04f 33ff 	mov.w	r3, #4294967295
 800a74a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	025b      	lsls	r3, r3, #9
 800a750:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a752:	2390      	movs	r3, #144	; 0x90
 800a754:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a756:	2302      	movs	r3, #2
 800a758:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a75e:	2300      	movs	r3, #0
 800a760:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f107 0214 	add.w	r2, r7, #20
 800a76a:	4611      	mov	r1, r2
 800a76c:	4618      	mov	r0, r3
 800a76e:	f004 f9cb 	bl	800eb08 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68da      	ldr	r2, [r3, #12]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a780:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d90a      	bls.n	800a79e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2202      	movs	r2, #2
 800a78c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a794:	4618      	mov	r0, r3
 800a796:	f004 fa29 	bl	800ebec <SDMMC_CmdReadMultiBlock>
 800a79a:	6478      	str	r0, [r7, #68]	; 0x44
 800a79c:	e009      	b.n	800a7b2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f004 f9fb 	bl	800eba6 <SDMMC_CmdReadSingleBlock>
 800a7b0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d012      	beq.n	800a7de <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a84      	ldr	r2, [pc, #528]	; (800a9d0 <HAL_SD_ReadBlocks+0x30c>)
 800a7be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c6:	431a      	orrs	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e0f3      	b.n	800a9c6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a7e2:	e058      	b.n	800a896 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d033      	beq.n	800a85a <HAL_SD_ReadBlocks+0x196>
 800a7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f4:	2b1f      	cmp	r3, #31
 800a7f6:	d930      	bls.n	800a85a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	643b      	str	r3, [r7, #64]	; 0x40
 800a7fc:	e027      	b.n	800a84e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4618      	mov	r0, r3
 800a804:	f004 f8f8 	bl	800e9f8 <SDMMC_ReadFIFO>
 800a808:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a810:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a814:	3301      	adds	r3, #1
 800a816:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81a:	0a1b      	lsrs	r3, r3, #8
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a820:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a824:	3301      	adds	r3, #1
 800a826:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82a:	0c1b      	lsrs	r3, r3, #16
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a830:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a834:	3301      	adds	r3, #1
 800a836:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83a:	0e1b      	lsrs	r3, r3, #24
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a840:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a844:	3301      	adds	r3, #1
 800a846:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800a848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a84a:	3301      	adds	r3, #1
 800a84c:	643b      	str	r3, [r7, #64]	; 0x40
 800a84e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a850:	2b07      	cmp	r3, #7
 800a852:	d9d4      	bls.n	800a7fe <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a856:	3b20      	subs	r3, #32
 800a858:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a85a:	f7f7 f8d5 	bl	8001a08 <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a866:	429a      	cmp	r2, r3
 800a868:	d902      	bls.n	800a870 <HAL_SD_ReadBlocks+0x1ac>
 800a86a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d112      	bne.n	800a896 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a56      	ldr	r2, [pc, #344]	; (800a9d0 <HAL_SD_ReadBlocks+0x30c>)
 800a876:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a892:	2303      	movs	r3, #3
 800a894:	e097      	b.n	800a9c6 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a89c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d09f      	beq.n	800a7e4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68da      	ldr	r2, [r3, #12]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8b2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d022      	beq.n	800a908 <HAL_SD_ReadBlocks+0x244>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d91f      	bls.n	800a908 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	d01b      	beq.n	800a908 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f004 f9f3 	bl	800ecc0 <SDMMC_CmdStopTransfer>
 800a8da:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a8dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d012      	beq.n	800a908 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a3a      	ldr	r2, [pc, #232]	; (800a9d0 <HAL_SD_ReadBlocks+0x30c>)
 800a8e8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f0:	431a      	orrs	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	e05e      	b.n	800a9c6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90e:	f003 0308 	and.w	r3, r3, #8
 800a912:	2b00      	cmp	r3, #0
 800a914:	d012      	beq.n	800a93c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a2d      	ldr	r2, [pc, #180]	; (800a9d0 <HAL_SD_ReadBlocks+0x30c>)
 800a91c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a922:	f043 0208 	orr.w	r2, r3, #8
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2200      	movs	r2, #0
 800a936:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	e044      	b.n	800a9c6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a942:	f003 0302 	and.w	r3, r3, #2
 800a946:	2b00      	cmp	r3, #0
 800a948:	d012      	beq.n	800a970 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a20      	ldr	r2, [pc, #128]	; (800a9d0 <HAL_SD_ReadBlocks+0x30c>)
 800a950:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a956:	f043 0202 	orr.w	r2, r3, #2
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e02a      	b.n	800a9c6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a976:	f003 0320 	and.w	r3, r3, #32
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d012      	beq.n	800a9a4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a13      	ldr	r2, [pc, #76]	; (800a9d0 <HAL_SD_ReadBlocks+0x30c>)
 800a984:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98a:	f043 0220 	orr.w	r2, r3, #32
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2201      	movs	r2, #1
 800a996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e010      	b.n	800a9c6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a0a      	ldr	r2, [pc, #40]	; (800a9d4 <HAL_SD_ReadBlocks+0x310>)
 800a9aa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	e006      	b.n	800a9c6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
  }
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3748      	adds	r7, #72	; 0x48
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	1fe00fff 	.word	0x1fe00fff
 800a9d4:	18000f3a 	.word	0x18000f3a

0800a9d8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b092      	sub	sp, #72	; 0x48
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
 800a9e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a9e6:	f7f7 f80f 	bl	8001a08 <HAL_GetTick>
 800a9ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d107      	bne.n	800aa0a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e16b      	b.n	800ace2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	f040 815e 	bne.w	800acd4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aa1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	441a      	add	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d907      	bls.n	800aa3c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa30:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e152      	b.n	800ace2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2203      	movs	r2, #3
 800aa40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d002      	beq.n	800aa5a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800aa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa56:	025b      	lsls	r3, r3, #9
 800aa58:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa5a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa5e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	025b      	lsls	r3, r3, #9
 800aa64:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800aa66:	2390      	movs	r3, #144	; 0x90
 800aa68:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800aa72:	2300      	movs	r3, #0
 800aa74:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f107 0218 	add.w	r2, r7, #24
 800aa7e:	4611      	mov	r1, r2
 800aa80:	4618      	mov	r0, r3
 800aa82:	f004 f841 	bl	800eb08 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68da      	ldr	r2, [r3, #12]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa94:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d90a      	bls.n	800aab2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2220      	movs	r2, #32
 800aaa0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f004 f8e5 	bl	800ec78 <SDMMC_CmdWriteMultiBlock>
 800aaae:	6478      	str	r0, [r7, #68]	; 0x44
 800aab0:	e009      	b.n	800aac6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2210      	movs	r2, #16
 800aab6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aabe:	4618      	mov	r0, r3
 800aac0:	f004 f8b7 	bl	800ec32 <SDMMC_CmdWriteSingleBlock>
 800aac4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800aac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d012      	beq.n	800aaf2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a86      	ldr	r2, [pc, #536]	; (800acec <HAL_SD_WriteBlocks+0x314>)
 800aad2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aada:	431a      	orrs	r2, r3
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e0f7      	b.n	800ace2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800aaf6:	e05c      	b.n	800abb2 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d037      	beq.n	800ab76 <HAL_SD_WriteBlocks+0x19e>
 800ab06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab08:	2b1f      	cmp	r3, #31
 800ab0a:	d934      	bls.n	800ab76 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	643b      	str	r3, [r7, #64]	; 0x40
 800ab10:	e02b      	b.n	800ab6a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800ab12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ab18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800ab1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	021a      	lsls	r2, r3, #8
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ab2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800ab30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	041a      	lsls	r2, r3, #16
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ab3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3e:	3301      	adds	r3, #1
 800ab40:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800ab42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	061a      	lsls	r2, r3, #24
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ab4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab50:	3301      	adds	r3, #1
 800ab52:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f107 0214 	add.w	r2, r7, #20
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f003 ff57 	bl	800ea12 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800ab64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab66:	3301      	adds	r3, #1
 800ab68:	643b      	str	r3, [r7, #64]	; 0x40
 800ab6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab6c:	2b07      	cmp	r3, #7
 800ab6e:	d9d0      	bls.n	800ab12 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800ab70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab72:	3b20      	subs	r3, #32
 800ab74:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ab76:	f7f6 ff47 	bl	8001a08 <HAL_GetTick>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d902      	bls.n	800ab8c <HAL_SD_WriteBlocks+0x1b4>
 800ab86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d112      	bne.n	800abb2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a56      	ldr	r2, [pc, #344]	; (800acec <HAL_SD_WriteBlocks+0x314>)
 800ab92:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab9a:	431a      	orrs	r2, r3
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2200      	movs	r2, #0
 800abac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800abae:	2303      	movs	r3, #3
 800abb0:	e097      	b.n	800ace2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d09b      	beq.n	800aaf8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68da      	ldr	r2, [r3, #12]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abce:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d022      	beq.n	800ac24 <HAL_SD_WriteBlocks+0x24c>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d91f      	bls.n	800ac24 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe8:	2b03      	cmp	r3, #3
 800abea:	d01b      	beq.n	800ac24 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f004 f865 	bl	800ecc0 <SDMMC_CmdStopTransfer>
 800abf6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800abf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d012      	beq.n	800ac24 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a3a      	ldr	r2, [pc, #232]	; (800acec <HAL_SD_WriteBlocks+0x314>)
 800ac04:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac0c:	431a      	orrs	r2, r3
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800ac20:	2301      	movs	r3, #1
 800ac22:	e05e      	b.n	800ace2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac2a:	f003 0308 	and.w	r3, r3, #8
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d012      	beq.n	800ac58 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a2d      	ldr	r2, [pc, #180]	; (800acec <HAL_SD_WriteBlocks+0x314>)
 800ac38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	f043 0208 	orr.w	r2, r3, #8
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e044      	b.n	800ace2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5e:	f003 0302 	and.w	r3, r3, #2
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d012      	beq.n	800ac8c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a20      	ldr	r2, [pc, #128]	; (800acec <HAL_SD_WriteBlocks+0x314>)
 800ac6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac72:	f043 0202 	orr.w	r2, r3, #2
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e02a      	b.n	800ace2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac92:	f003 0310 	and.w	r3, r3, #16
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d012      	beq.n	800acc0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a13      	ldr	r2, [pc, #76]	; (800acec <HAL_SD_WriteBlocks+0x314>)
 800aca0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca6:	f043 0210 	orr.w	r2, r3, #16
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e010      	b.n	800ace2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a0a      	ldr	r2, [pc, #40]	; (800acf0 <HAL_SD_WriteBlocks+0x318>)
 800acc6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	e006      	b.n	800ace2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
  }
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3748      	adds	r7, #72	; 0x48
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	1fe00fff 	.word	0x1fe00fff
 800acf0:	18000f3a 	.word	0x18000f3a

0800acf4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	4603      	mov	r3, r0
 800acfc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800acfe:	bf00      	nop
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
	...

0800ad0c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad1a:	0f9b      	lsrs	r3, r3, #30
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad26:	0e9b      	lsrs	r3, r3, #26
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	f003 030f 	and.w	r3, r3, #15
 800ad2e:	b2da      	uxtb	r2, r3
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad38:	0e1b      	lsrs	r3, r3, #24
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	f003 0303 	and.w	r3, r3, #3
 800ad40:	b2da      	uxtb	r2, r3
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad4a:	0c1b      	lsrs	r3, r3, #16
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad56:	0a1b      	lsrs	r3, r3, #8
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad6c:	0d1b      	lsrs	r3, r3, #20
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad78:	0c1b      	lsrs	r3, r3, #16
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	f003 030f 	and.w	r3, r3, #15
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad8a:	0bdb      	lsrs	r3, r3, #15
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	f003 0301 	and.w	r3, r3, #1
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad9c:	0b9b      	lsrs	r3, r3, #14
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	f003 0301 	and.w	r3, r3, #1
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adae:	0b5b      	lsrs	r3, r3, #13
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adc0:	0b1b      	lsrs	r3, r3, #12
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	2200      	movs	r2, #0
 800add2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add8:	2b00      	cmp	r3, #0
 800adda:	d163      	bne.n	800aea4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ade0:	009a      	lsls	r2, r3, #2
 800ade2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ade6:	4013      	ands	r3, r2
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800adec:	0f92      	lsrs	r2, r2, #30
 800adee:	431a      	orrs	r2, r3
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adf8:	0edb      	lsrs	r3, r3, #27
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	f003 0307 	and.w	r3, r3, #7
 800ae00:	b2da      	uxtb	r2, r3
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae0a:	0e1b      	lsrs	r3, r3, #24
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	f003 0307 	and.w	r3, r3, #7
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae1c:	0d5b      	lsrs	r3, r3, #21
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	f003 0307 	and.w	r3, r3, #7
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae2e:	0c9b      	lsrs	r3, r3, #18
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	f003 0307 	and.w	r3, r3, #7
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae40:	0bdb      	lsrs	r3, r3, #15
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	f003 0307 	and.w	r3, r3, #7
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	1c5a      	adds	r2, r3, #1
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	7e1b      	ldrb	r3, [r3, #24]
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	f003 0307 	and.w	r3, r3, #7
 800ae62:	3302      	adds	r3, #2
 800ae64:	2201      	movs	r2, #1
 800ae66:	fa02 f303 	lsl.w	r3, r2, r3
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ae6e:	fb02 f203 	mul.w	r2, r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	7a1b      	ldrb	r3, [r3, #8]
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	f003 030f 	and.w	r3, r3, #15
 800ae80:	2201      	movs	r2, #1
 800ae82:	409a      	lsls	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ae90:	0a52      	lsrs	r2, r2, #9
 800ae92:	fb02 f203 	mul.w	r2, r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aea0:	659a      	str	r2, [r3, #88]	; 0x58
 800aea2:	e031      	b.n	800af08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d11d      	bne.n	800aee8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aeb0:	041b      	lsls	r3, r3, #16
 800aeb2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aeba:	0c1b      	lsrs	r3, r3, #16
 800aebc:	431a      	orrs	r2, r3
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	3301      	adds	r3, #1
 800aec8:	029a      	lsls	r2, r3, #10
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aedc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	659a      	str	r2, [r3, #88]	; 0x58
 800aee6:	e00f      	b.n	800af08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a58      	ldr	r2, [pc, #352]	; (800b050 <HAL_SD_GetCardCSD+0x344>)
 800aeee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	e09d      	b.n	800b044 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af0c:	0b9b      	lsrs	r3, r3, #14
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	f003 0301 	and.w	r3, r3, #1
 800af14:	b2da      	uxtb	r2, r3
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af1e:	09db      	lsrs	r3, r3, #7
 800af20:	b2db      	uxtb	r3, r3
 800af22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af26:	b2da      	uxtb	r2, r3
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af30:	b2db      	uxtb	r3, r3
 800af32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af36:	b2da      	uxtb	r2, r3
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af40:	0fdb      	lsrs	r3, r3, #31
 800af42:	b2da      	uxtb	r2, r3
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af4c:	0f5b      	lsrs	r3, r3, #29
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	f003 0303 	and.w	r3, r3, #3
 800af54:	b2da      	uxtb	r2, r3
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af5e:	0e9b      	lsrs	r3, r3, #26
 800af60:	b2db      	uxtb	r3, r3
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	b2da      	uxtb	r2, r3
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af70:	0d9b      	lsrs	r3, r3, #22
 800af72:	b2db      	uxtb	r3, r3
 800af74:	f003 030f 	and.w	r3, r3, #15
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af82:	0d5b      	lsrs	r3, r3, #21
 800af84:	b2db      	uxtb	r3, r3
 800af86:	f003 0301 	and.w	r3, r3, #1
 800af8a:	b2da      	uxtb	r2, r3
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af9e:	0c1b      	lsrs	r3, r3, #16
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afb2:	0bdb      	lsrs	r3, r3, #15
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	f003 0301 	and.w	r3, r3, #1
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afc6:	0b9b      	lsrs	r3, r3, #14
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	f003 0301 	and.w	r3, r3, #1
 800afce:	b2da      	uxtb	r2, r3
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afda:	0b5b      	lsrs	r3, r3, #13
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	f003 0301 	and.w	r3, r3, #1
 800afe2:	b2da      	uxtb	r2, r3
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afee:	0b1b      	lsrs	r3, r3, #12
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	f003 0301 	and.w	r3, r3, #1
 800aff6:	b2da      	uxtb	r2, r3
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b002:	0a9b      	lsrs	r3, r3, #10
 800b004:	b2db      	uxtb	r3, r3
 800b006:	f003 0303 	and.w	r3, r3, #3
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b016:	0a1b      	lsrs	r3, r3, #8
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	f003 0303 	and.w	r3, r3, #3
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b02a:	085b      	lsrs	r3, r3, #1
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b032:	b2da      	uxtb	r2, r3
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	1fe00fff 	.word	0x1fe00fff

0800b054 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b094      	sub	sp, #80	; 0x50
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800b064:	f107 0308 	add.w	r3, r7, #8
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fb64 	bl	800b738 <SD_SendSDStatus>
 800b070:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b074:	2b00      	cmp	r3, #0
 800b076:	d011      	beq.n	800b09c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a4f      	ldr	r2, [pc, #316]	; (800b1bc <HAL_SD_GetCardStatus+0x168>)
 800b07e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b086:	431a      	orrs	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b09a:	e070      	b.n	800b17e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	099b      	lsrs	r3, r3, #6
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	f003 0303 	and.w	r3, r3, #3
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	095b      	lsrs	r3, r3, #5
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	0a1b      	lsrs	r3, r3, #8
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	0e1b      	lsrs	r3, r3, #24
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	061a      	lsls	r2, r3, #24
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	021b      	lsls	r3, r3, #8
 800b0de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b0e2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	0a1b      	lsrs	r3, r3, #8
 800b0e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b0ec:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	0e1b      	lsrs	r3, r3, #24
 800b0f2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	b2da      	uxtb	r2, r3
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	0a1b      	lsrs	r3, r3, #8
 800b104:	b2da      	uxtb	r2, r3
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	0d1b      	lsrs	r3, r3, #20
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	f003 030f 	and.w	r3, r3, #15
 800b114:	b2da      	uxtb	r2, r3
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	0c1b      	lsrs	r3, r3, #16
 800b11e:	b29b      	uxth	r3, r3
 800b120:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b124:	b29a      	uxth	r2, r3
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	b29b      	uxth	r3, r3
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	4313      	orrs	r3, r2
 800b130:	b29a      	uxth	r2, r3
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	0a9b      	lsrs	r3, r3, #10
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b140:	b2da      	uxtb	r2, r3
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	0a1b      	lsrs	r3, r3, #8
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	f003 0303 	and.w	r3, r3, #3
 800b150:	b2da      	uxtb	r2, r3
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	091b      	lsrs	r3, r3, #4
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	f003 030f 	and.w	r3, r3, #15
 800b160:	b2da      	uxtb	r2, r3
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	f003 030f 	and.w	r3, r3, #15
 800b16e:	b2da      	uxtb	r2, r3
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	0e1b      	lsrs	r3, r3, #24
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b186:	4618      	mov	r0, r3
 800b188:	f003 fcea 	bl	800eb60 <SDMMC_CmdBlockLength>
 800b18c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b18e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00d      	beq.n	800b1b0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a08      	ldr	r2, [pc, #32]	; (800b1bc <HAL_SD_GetCardStatus+0x168>)
 800b19a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800b1b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3750      	adds	r7, #80	; 0x50
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	1fe00fff 	.word	0x1fe00fff

0800b1c0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b218:	b5b0      	push	{r4, r5, r7, lr}
 800b21a:	b08e      	sub	sp, #56	; 0x38
 800b21c:	af04      	add	r7, sp, #16
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b222:	2300      	movs	r3, #0
 800b224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2203      	movs	r2, #3
 800b22c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b234:	2b03      	cmp	r3, #3
 800b236:	d02e      	beq.n	800b296 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b23e:	d106      	bne.n	800b24e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b244:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	639a      	str	r2, [r3, #56]	; 0x38
 800b24c:	e029      	b.n	800b2a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b254:	d10a      	bne.n	800b26c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fb66 	bl	800b928 <SD_WideBus_Enable>
 800b25c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	431a      	orrs	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	639a      	str	r2, [r3, #56]	; 0x38
 800b26a:	e01a      	b.n	800b2a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10a      	bne.n	800b288 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fba3 	bl	800b9be <SD_WideBus_Disable>
 800b278:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b27e:	6a3b      	ldr	r3, [r7, #32]
 800b280:	431a      	orrs	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	639a      	str	r2, [r3, #56]	; 0x38
 800b286:	e00c      	b.n	800b2a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	639a      	str	r2, [r3, #56]	; 0x38
 800b294:	e005      	b.n	800b2a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d007      	beq.n	800b2ba <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a2e      	ldr	r2, [pc, #184]	; (800b368 <HAL_SD_ConfigWideBusOperation+0x150>)
 800b2b0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2b8:	e034      	b.n	800b324 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	695b      	ldr	r3, [r3, #20]
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	d903      	bls.n	800b2e0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	695b      	ldr	r3, [r3, #20]
 800b2dc:	61bb      	str	r3, [r7, #24]
 800b2de:	e012      	b.n	800b306 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2e8:	d103      	bne.n	800b2f2 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	695b      	ldr	r3, [r3, #20]
 800b2ee:	61bb      	str	r3, [r7, #24]
 800b2f0:	e009      	b.n	800b306 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2fa:	d102      	bne.n	800b302 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	61bb      	str	r3, [r7, #24]
 800b300:	e001      	b.n	800b306 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800b302:	2304      	movs	r3, #4
 800b304:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681d      	ldr	r5, [r3, #0]
 800b30a:	466c      	mov	r4, sp
 800b30c:	f107 0314 	add.w	r3, r7, #20
 800b310:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b314:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b318:	f107 0308 	add.w	r3, r7, #8
 800b31c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b31e:	4628      	mov	r0, r5
 800b320:	f003 fb40 	bl	800e9a4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b32c:	4618      	mov	r0, r3
 800b32e:	f003 fc17 	bl	800eb60 <SDMMC_CmdBlockLength>
 800b332:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00c      	beq.n	800b354 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a0a      	ldr	r2, [pc, #40]	; (800b368 <HAL_SD_ConfigWideBusOperation+0x150>)
 800b340:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b346:	6a3b      	ldr	r3, [r7, #32]
 800b348:	431a      	orrs	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800b35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b360:	4618      	mov	r0, r3
 800b362:	3728      	adds	r7, #40	; 0x28
 800b364:	46bd      	mov	sp, r7
 800b366:	bdb0      	pop	{r4, r5, r7, pc}
 800b368:	1fe00fff 	.word	0x1fe00fff

0800b36c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b378:	f107 030c 	add.w	r3, r7, #12
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 faaa 	bl	800b8d8 <SD_SendStatus>
 800b384:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d005      	beq.n	800b398 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	431a      	orrs	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	0a5b      	lsrs	r3, r3, #9
 800b39c:	f003 030f 	and.w	r3, r3, #15
 800b3a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b3a2:	693b      	ldr	r3, [r7, #16]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3718      	adds	r7, #24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b3ac:	b590      	push	{r4, r7, lr}
 800b3ae:	b091      	sub	sp, #68	; 0x44
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f003 fb4a 	bl	800ea56 <SDMMC_GetPowerState>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d102      	bne.n	800b3ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b3c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b3cc:	e0a8      	b.n	800b520 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3d2:	2b03      	cmp	r3, #3
 800b3d4:	d02e      	beq.n	800b434 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f003 fd96 	bl	800ef0c <SDMMC_CmdSendCID>
 800b3e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d001      	beq.n	800b3ec <SD_InitCard+0x40>
    {
      return errorstate;
 800b3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ea:	e099      	b.n	800b520 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f003 fb75 	bl	800eae2 <SDMMC_GetResponse>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2104      	movs	r1, #4
 800b404:	4618      	mov	r0, r3
 800b406:	f003 fb6c 	bl	800eae2 <SDMMC_GetResponse>
 800b40a:	4602      	mov	r2, r0
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2108      	movs	r1, #8
 800b416:	4618      	mov	r0, r3
 800b418:	f003 fb63 	bl	800eae2 <SDMMC_GetResponse>
 800b41c:	4602      	mov	r2, r0
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	210c      	movs	r1, #12
 800b428:	4618      	mov	r0, r3
 800b42a:	f003 fb5a 	bl	800eae2 <SDMMC_GetResponse>
 800b42e:	4602      	mov	r2, r0
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b438:	2b03      	cmp	r3, #3
 800b43a:	d00d      	beq.n	800b458 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f107 020e 	add.w	r2, r7, #14
 800b444:	4611      	mov	r1, r2
 800b446:	4618      	mov	r0, r3
 800b448:	f003 fd9f 	bl	800ef8a <SDMMC_CmdSetRelAdd>
 800b44c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b450:	2b00      	cmp	r3, #0
 800b452:	d001      	beq.n	800b458 <SD_InitCard+0xac>
    {
      return errorstate;
 800b454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b456:	e063      	b.n	800b520 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d036      	beq.n	800b4ce <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b460:	89fb      	ldrh	r3, [r7, #14]
 800b462:	461a      	mov	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b470:	041b      	lsls	r3, r3, #16
 800b472:	4619      	mov	r1, r3
 800b474:	4610      	mov	r0, r2
 800b476:	f003 fd68 	bl	800ef4a <SDMMC_CmdSendCSD>
 800b47a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <SD_InitCard+0xda>
    {
      return errorstate;
 800b482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b484:	e04c      	b.n	800b520 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2100      	movs	r1, #0
 800b48c:	4618      	mov	r0, r3
 800b48e:	f003 fb28 	bl	800eae2 <SDMMC_GetResponse>
 800b492:	4602      	mov	r2, r0
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2104      	movs	r1, #4
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f003 fb1f 	bl	800eae2 <SDMMC_GetResponse>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2108      	movs	r1, #8
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f003 fb16 	bl	800eae2 <SDMMC_GetResponse>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	210c      	movs	r1, #12
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f003 fb0d 	bl	800eae2 <SDMMC_GetResponse>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2104      	movs	r1, #4
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f003 fb04 	bl	800eae2 <SDMMC_GetResponse>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	0d1a      	lsrs	r2, r3, #20
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b4e2:	f107 0310 	add.w	r3, r7, #16
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff fc0f 	bl	800ad0c <HAL_SD_GetCardCSD>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d002      	beq.n	800b4fa <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b4f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b4f8:	e012      	b.n	800b520 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6819      	ldr	r1, [r3, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b502:	041b      	lsls	r3, r3, #16
 800b504:	f04f 0400 	mov.w	r4, #0
 800b508:	461a      	mov	r2, r3
 800b50a:	4623      	mov	r3, r4
 800b50c:	4608      	mov	r0, r1
 800b50e:	f003 fc13 	bl	800ed38 <SDMMC_CmdSelDesel>
 800b512:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <SD_InitCard+0x172>
  {
    return errorstate;
 800b51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b51c:	e000      	b.n	800b520 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3744      	adds	r7, #68	; 0x44
 800b524:	46bd      	mov	sp, r7
 800b526:	bd90      	pop	{r4, r7, pc}

0800b528 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b088      	sub	sp, #32
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b530:	2300      	movs	r3, #0
 800b532:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800b534:	2300      	movs	r3, #0
 800b536:	61fb      	str	r3, [r7, #28]
 800b538:	2300      	movs	r3, #0
 800b53a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800b53c:	f7f6 fa64 	bl	8001a08 <HAL_GetTick>
 800b540:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4618      	mov	r0, r3
 800b548:	f003 fc1a 	bl	800ed80 <SDMMC_CmdGoIdleState>
 800b54c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <SD_PowerON+0x30>
  {
    return errorstate;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	e0e9      	b.n	800b72c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4618      	mov	r0, r3
 800b55e:	f003 fc2d 	bl	800edbc <SDMMC_CmdOperCond>
 800b562:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00d      	beq.n	800b586 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4618      	mov	r0, r3
 800b576:	f003 fc03 	bl	800ed80 <SDMMC_CmdGoIdleState>
 800b57a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d004      	beq.n	800b58c <SD_PowerON+0x64>
    {
      return errorstate;
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	e0d2      	b.n	800b72c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2201      	movs	r2, #1
 800b58a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b590:	2b01      	cmp	r3, #1
 800b592:	d137      	bne.n	800b604 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2100      	movs	r1, #0
 800b59a:	4618      	mov	r0, r3
 800b59c:	f003 fc2e 	bl	800edfc <SDMMC_CmdAppCommand>
 800b5a0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d02d      	beq.n	800b604 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b5a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b5ac:	e0be      	b.n	800b72c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f003 fc21 	bl	800edfc <SDMMC_CmdAppCommand>
 800b5ba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d001      	beq.n	800b5c6 <SD_PowerON+0x9e>
    {
      return errorstate;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	e0b2      	b.n	800b72c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	495a      	ldr	r1, [pc, #360]	; (800b734 <SD_PowerON+0x20c>)
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f003 fc38 	bl	800ee42 <SDMMC_CmdAppOperCommand>
 800b5d2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d002      	beq.n	800b5e0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b5da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b5de:	e0a5      	b.n	800b72c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f003 fa7b 	bl	800eae2 <SDMMC_GetResponse>
 800b5ec:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	0fdb      	lsrs	r3, r3, #31
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d101      	bne.n	800b5fa <SD_PowerON+0xd2>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e000      	b.n	800b5fc <SD_PowerON+0xd4>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	61bb      	str	r3, [r7, #24]

    count++;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	3301      	adds	r3, #1
 800b602:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d802      	bhi.n	800b614 <SD_PowerON+0xec>
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d0cc      	beq.n	800b5ae <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d902      	bls.n	800b624 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b61e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b622:	e083      	b.n	800b72c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d07d      	beq.n	800b72a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	699b      	ldr	r3, [r3, #24]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d176      	bne.n	800b72a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b642:	2b00      	cmp	r3, #0
 800b644:	d071      	beq.n	800b72a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b64c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f042 0208 	orr.w	r2, r2, #8
 800b65c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4618      	mov	r0, r3
 800b664:	f003 fcf8 	bl	800f058 <SDMMC_CmdVoltageSwitch>
 800b668:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00c      	beq.n	800b68a <SD_PowerON+0x162>
        {
          return errorstate;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	e05b      	b.n	800b72c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b674:	f7f6 f9c8 	bl	8001a08 <HAL_GetTick>
 800b678:	4602      	mov	r2, r0
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b682:	d102      	bne.n	800b68a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800b684:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b688:	e050      	b.n	800b72c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b694:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b698:	d1ec      	bne.n	800b674 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b6a2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6b2:	d002      	beq.n	800b6ba <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800b6b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b6b8:	e038      	b.n	800b72c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800b6ba:	2001      	movs	r0, #1
 800b6bc:	f7ff fb1a 	bl	800acf4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f042 0204 	orr.w	r2, r2, #4
 800b6ce:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b6d0:	e00a      	b.n	800b6e8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b6d2:	f7f6 f999 	bl	8001a08 <HAL_GetTick>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e0:	d102      	bne.n	800b6e8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800b6e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6e6:	e021      	b.n	800b72c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6f6:	d1ec      	bne.n	800b6d2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b700:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b70c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b710:	d102      	bne.n	800b718 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b712:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b716:	e009      	b.n	800b72c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2213      	movs	r2, #19
 800b71e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f04f 32ff 	mov.w	r2, #4294967295
 800b728:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3720      	adds	r7, #32
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	c1100000 	.word	0xc1100000

0800b738 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08c      	sub	sp, #48	; 0x30
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b742:	f7f6 f961 	bl	8001a08 <HAL_GetTick>
 800b746:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2100      	movs	r1, #0
 800b752:	4618      	mov	r0, r3
 800b754:	f003 f9c5 	bl	800eae2 <SDMMC_GetResponse>
 800b758:	4603      	mov	r3, r0
 800b75a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b75e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b762:	d102      	bne.n	800b76a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b764:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b768:	e0b0      	b.n	800b8cc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2140      	movs	r1, #64	; 0x40
 800b770:	4618      	mov	r0, r3
 800b772:	f003 f9f5 	bl	800eb60 <SDMMC_CmdBlockLength>
 800b776:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d005      	beq.n	800b78a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	e0a0      	b.n	800b8cc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b792:	041b      	lsls	r3, r3, #16
 800b794:	4619      	mov	r1, r3
 800b796:	4610      	mov	r0, r2
 800b798:	f003 fb30 	bl	800edfc <SDMMC_CmdAppCommand>
 800b79c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b79e:	6a3b      	ldr	r3, [r7, #32]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d005      	beq.n	800b7b0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b7ac:	6a3b      	ldr	r3, [r7, #32]
 800b7ae:	e08d      	b.n	800b8cc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7b4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b7b6:	2340      	movs	r3, #64	; 0x40
 800b7b8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b7ba:	2360      	movs	r3, #96	; 0x60
 800b7bc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b7be:	2302      	movs	r3, #2
 800b7c0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f107 0208 	add.w	r2, r7, #8
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f003 f997 	bl	800eb08 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f003 fc18 	bl	800f014 <SDMMC_CmdStatusRegister>
 800b7e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7e6:	6a3b      	ldr	r3, [r7, #32]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d02b      	beq.n	800b844 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b7f4:	6a3b      	ldr	r3, [r7, #32]
 800b7f6:	e069      	b.n	800b8cc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b802:	2b00      	cmp	r3, #0
 800b804:	d013      	beq.n	800b82e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800b806:	2300      	movs	r3, #0
 800b808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b80a:	e00d      	b.n	800b828 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4618      	mov	r0, r3
 800b812:	f003 f8f1 	bl	800e9f8 <SDMMC_ReadFIFO>
 800b816:	4602      	mov	r2, r0
 800b818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81a:	601a      	str	r2, [r3, #0]
        pData++;
 800b81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81e:	3304      	adds	r3, #4
 800b820:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800b822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b824:	3301      	adds	r3, #1
 800b826:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82a:	2b07      	cmp	r3, #7
 800b82c:	d9ee      	bls.n	800b80c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b82e:	f7f6 f8eb 	bl	8001a08 <HAL_GetTick>
 800b832:	4602      	mov	r2, r0
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83c:	d102      	bne.n	800b844 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b83e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b842:	e043      	b.n	800b8cc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d0d2      	beq.n	800b7f8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b858:	f003 0308 	and.w	r3, r3, #8
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d001      	beq.n	800b864 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b860:	2308      	movs	r3, #8
 800b862:	e033      	b.n	800b8cc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b86a:	f003 0302 	and.w	r3, r3, #2
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d001      	beq.n	800b876 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b872:	2302      	movs	r3, #2
 800b874:	e02a      	b.n	800b8cc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b87c:	f003 0320 	and.w	r3, r3, #32
 800b880:	2b00      	cmp	r3, #0
 800b882:	d017      	beq.n	800b8b4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b884:	2320      	movs	r3, #32
 800b886:	e021      	b.n	800b8cc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f003 f8b3 	bl	800e9f8 <SDMMC_ReadFIFO>
 800b892:	4602      	mov	r2, r0
 800b894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b896:	601a      	str	r2, [r3, #0]
    pData++;
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	3304      	adds	r3, #4
 800b89c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b89e:	f7f6 f8b3 	bl	8001a08 <HAL_GetTick>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ac:	d102      	bne.n	800b8b4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b8ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8b2:	e00b      	b.n	800b8cc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1e2      	bne.n	800b888 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a03      	ldr	r2, [pc, #12]	; (800b8d4 <SD_SendSDStatus+0x19c>)
 800b8c8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3730      	adds	r7, #48	; 0x30
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	18000f3a 	.word	0x18000f3a

0800b8d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d102      	bne.n	800b8ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b8e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b8ec:	e018      	b.n	800b920 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8f6:	041b      	lsls	r3, r3, #16
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	f003 fb67 	bl	800efce <SDMMC_CmdSendStatus>
 800b900:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <SD_SendStatus+0x34>
  {
    return errorstate;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	e009      	b.n	800b920 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2100      	movs	r1, #0
 800b912:	4618      	mov	r0, r3
 800b914:	f003 f8e5 	bl	800eae2 <SDMMC_GetResponse>
 800b918:	4602      	mov	r2, r0
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b930:	2300      	movs	r3, #0
 800b932:	60fb      	str	r3, [r7, #12]
 800b934:	2300      	movs	r3, #0
 800b936:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2100      	movs	r1, #0
 800b93e:	4618      	mov	r0, r3
 800b940:	f003 f8cf 	bl	800eae2 <SDMMC_GetResponse>
 800b944:	4603      	mov	r3, r0
 800b946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b94a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b94e:	d102      	bne.n	800b956 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b954:	e02f      	b.n	800b9b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b956:	f107 030c 	add.w	r3, r7, #12
 800b95a:	4619      	mov	r1, r3
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f879 	bl	800ba54 <SD_FindSCR>
 800b962:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	e023      	b.n	800b9b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d01c      	beq.n	800b9b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b980:	041b      	lsls	r3, r3, #16
 800b982:	4619      	mov	r1, r3
 800b984:	4610      	mov	r0, r2
 800b986:	f003 fa39 	bl	800edfc <SDMMC_CmdAppCommand>
 800b98a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	e00f      	b.n	800b9b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2102      	movs	r1, #2
 800b99c:	4618      	mov	r0, r3
 800b99e:	f003 fa70 	bl	800ee82 <SDMMC_CmdBusWidth>
 800b9a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d001      	beq.n	800b9ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	e003      	b.n	800b9b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	e001      	b.n	800b9b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b9b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b086      	sub	sp, #24
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	60fb      	str	r3, [r7, #12]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f003 f884 	bl	800eae2 <SDMMC_GetResponse>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9e4:	d102      	bne.n	800b9ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b9e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b9ea:	e02f      	b.n	800ba4c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b9ec:	f107 030c 	add.w	r3, r7, #12
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f82e 	bl	800ba54 <SD_FindSCR>
 800b9f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	e023      	b.n	800ba4c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d01c      	beq.n	800ba48 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba16:	041b      	lsls	r3, r3, #16
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	f003 f9ee 	bl	800edfc <SDMMC_CmdAppCommand>
 800ba20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d001      	beq.n	800ba2c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	e00f      	b.n	800ba4c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2100      	movs	r1, #0
 800ba32:	4618      	mov	r0, r3
 800ba34:	f003 fa25 	bl	800ee82 <SDMMC_CmdBusWidth>
 800ba38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d001      	beq.n	800ba44 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	e003      	b.n	800ba4c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ba44:	2300      	movs	r3, #0
 800ba46:	e001      	b.n	800ba4c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ba48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b08e      	sub	sp, #56	; 0x38
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ba5e:	f7f5 ffd3 	bl	8001a08 <HAL_GetTick>
 800ba62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ba64:	2300      	movs	r3, #0
 800ba66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ba68:	2300      	movs	r3, #0
 800ba6a:	60bb      	str	r3, [r7, #8]
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2108      	movs	r1, #8
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f003 f870 	bl	800eb60 <SDMMC_CmdBlockLength>
 800ba80:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d001      	beq.n	800ba8c <SD_FindSCR+0x38>
  {
    return errorstate;
 800ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8a:	e0ad      	b.n	800bbe8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba94:	041b      	lsls	r3, r3, #16
 800ba96:	4619      	mov	r1, r3
 800ba98:	4610      	mov	r0, r2
 800ba9a:	f003 f9af 	bl	800edfc <SDMMC_CmdAppCommand>
 800ba9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800baa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <SD_FindSCR+0x56>
  {
    return errorstate;
 800baa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa8:	e09e      	b.n	800bbe8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800baaa:	f04f 33ff 	mov.w	r3, #4294967295
 800baae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bab0:	2308      	movs	r3, #8
 800bab2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bab4:	2330      	movs	r3, #48	; 0x30
 800bab6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bab8:	2302      	movs	r3, #2
 800baba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800babc:	2300      	movs	r3, #0
 800babe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bac0:	2301      	movs	r3, #1
 800bac2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f107 0210 	add.w	r2, r7, #16
 800bacc:	4611      	mov	r1, r2
 800bace:	4618      	mov	r0, r3
 800bad0:	f003 f81a 	bl	800eb08 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4618      	mov	r0, r3
 800bada:	f003 f9f5 	bl	800eec8 <SDMMC_CmdSendSCR>
 800bade:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d027      	beq.n	800bb36 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800bae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae8:	e07e      	b.n	800bbe8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d113      	bne.n	800bb20 <SD_FindSCR+0xcc>
 800baf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d110      	bne.n	800bb20 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f002 ff78 	bl	800e9f8 <SDMMC_ReadFIFO>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4618      	mov	r0, r3
 800bb12:	f002 ff71 	bl	800e9f8 <SDMMC_ReadFIFO>
 800bb16:	4603      	mov	r3, r0
 800bb18:	60fb      	str	r3, [r7, #12]
      index++;
 800bb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bb20:	f7f5 ff72 	bl	8001a08 <HAL_GetTick>
 800bb24:	4602      	mov	r2, r0
 800bb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb28:	1ad3      	subs	r3, r2, r3
 800bb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2e:	d102      	bne.n	800bb36 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bb30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb34:	e058      	b.n	800bbe8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb3c:	f240 532a 	movw	r3, #1322	; 0x52a
 800bb40:	4013      	ands	r3, r2
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d0d1      	beq.n	800baea <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb4c:	f003 0308 	and.w	r3, r3, #8
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d005      	beq.n	800bb60 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2208      	movs	r2, #8
 800bb5a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bb5c:	2308      	movs	r3, #8
 800bb5e:	e043      	b.n	800bbe8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb66:	f003 0302 	and.w	r3, r3, #2
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d005      	beq.n	800bb7a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2202      	movs	r2, #2
 800bb74:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb76:	2302      	movs	r3, #2
 800bb78:	e036      	b.n	800bbe8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb80:	f003 0320 	and.w	r3, r3, #32
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d005      	beq.n	800bb94 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2220      	movs	r2, #32
 800bb8e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bb90:	2320      	movs	r3, #32
 800bb92:	e029      	b.n	800bbe8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a15      	ldr	r2, [pc, #84]	; (800bbf0 <SD_FindSCR+0x19c>)
 800bb9a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	061a      	lsls	r2, r3, #24
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	021b      	lsls	r3, r3, #8
 800bba4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bba8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	0a1b      	lsrs	r3, r3, #8
 800bbae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bbb2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	0e1b      	lsrs	r3, r3, #24
 800bbb8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbc:	601a      	str	r2, [r3, #0]
    scr++;
 800bbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	061a      	lsls	r2, r3, #24
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	021b      	lsls	r3, r3, #8
 800bbcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbd0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	0a1b      	lsrs	r3, r3, #8
 800bbd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bbda:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	0e1b      	lsrs	r3, r3, #24
 800bbe0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3738      	adds	r7, #56	; 0x38
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	18000f3a 	.word	0x18000f3a

0800bbf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d101      	bne.n	800bc06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc02:	2301      	movs	r3, #1
 800bc04:	e01d      	b.n	800bc42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d106      	bne.n	800bc20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7f5 fcc8 	bl	80015b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2202      	movs	r2, #2
 800bc24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	4619      	mov	r1, r3
 800bc32:	4610      	mov	r0, r2
 800bc34:	f000 f9a6 	bl	800bf84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
	...

0800bc4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68da      	ldr	r2, [r3, #12]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f042 0201 	orr.w	r2, r2, #1
 800bc62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	689a      	ldr	r2, [r3, #8]
 800bc6a:	4b0c      	ldr	r3, [pc, #48]	; (800bc9c <HAL_TIM_Base_Start_IT+0x50>)
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2b06      	cmp	r3, #6
 800bc74:	d00b      	beq.n	800bc8e <HAL_TIM_Base_Start_IT+0x42>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc7c:	d007      	beq.n	800bc8e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f042 0201 	orr.w	r2, r2, #1
 800bc8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3714      	adds	r7, #20
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr
 800bc9c:	00010007 	.word	0x00010007

0800bca0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68da      	ldr	r2, [r3, #12]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f022 0201 	bic.w	r2, r2, #1
 800bcb6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	6a1a      	ldr	r2, [r3, #32]
 800bcbe:	f241 1311 	movw	r3, #4369	; 0x1111
 800bcc2:	4013      	ands	r3, r2
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10f      	bne.n	800bce8 <HAL_TIM_Base_Stop_IT+0x48>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	6a1a      	ldr	r2, [r3, #32]
 800bcce:	f240 4344 	movw	r3, #1092	; 0x444
 800bcd2:	4013      	ands	r3, r2
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d107      	bne.n	800bce8 <HAL_TIM_Base_Stop_IT+0x48>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f022 0201 	bic.w	r2, r2, #1
 800bce6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	370c      	adds	r7, #12
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr

0800bcf6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b082      	sub	sp, #8
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	f003 0302 	and.w	r3, r3, #2
 800bd08:	2b02      	cmp	r3, #2
 800bd0a:	d122      	bne.n	800bd52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	f003 0302 	and.w	r3, r3, #2
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d11b      	bne.n	800bd52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f06f 0202 	mvn.w	r2, #2
 800bd22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	f003 0303 	and.w	r3, r3, #3
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d003      	beq.n	800bd40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 f905 	bl	800bf48 <HAL_TIM_IC_CaptureCallback>
 800bd3e:	e005      	b.n	800bd4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f8f7 	bl	800bf34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f908 	bl	800bf5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	f003 0304 	and.w	r3, r3, #4
 800bd5c:	2b04      	cmp	r3, #4
 800bd5e:	d122      	bne.n	800bda6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	f003 0304 	and.w	r3, r3, #4
 800bd6a:	2b04      	cmp	r3, #4
 800bd6c:	d11b      	bne.n	800bda6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f06f 0204 	mvn.w	r2, #4
 800bd76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2202      	movs	r2, #2
 800bd7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	699b      	ldr	r3, [r3, #24]
 800bd84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d003      	beq.n	800bd94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 f8db 	bl	800bf48 <HAL_TIM_IC_CaptureCallback>
 800bd92:	e005      	b.n	800bda0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 f8cd 	bl	800bf34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f8de 	bl	800bf5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	f003 0308 	and.w	r3, r3, #8
 800bdb0:	2b08      	cmp	r3, #8
 800bdb2:	d122      	bne.n	800bdfa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	f003 0308 	and.w	r3, r3, #8
 800bdbe:	2b08      	cmp	r3, #8
 800bdc0:	d11b      	bne.n	800bdfa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f06f 0208 	mvn.w	r2, #8
 800bdca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2204      	movs	r2, #4
 800bdd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	69db      	ldr	r3, [r3, #28]
 800bdd8:	f003 0303 	and.w	r3, r3, #3
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d003      	beq.n	800bde8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 f8b1 	bl	800bf48 <HAL_TIM_IC_CaptureCallback>
 800bde6:	e005      	b.n	800bdf4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f8a3 	bl	800bf34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 f8b4 	bl	800bf5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	f003 0310 	and.w	r3, r3, #16
 800be04:	2b10      	cmp	r3, #16
 800be06:	d122      	bne.n	800be4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	f003 0310 	and.w	r3, r3, #16
 800be12:	2b10      	cmp	r3, #16
 800be14:	d11b      	bne.n	800be4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f06f 0210 	mvn.w	r2, #16
 800be1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2208      	movs	r2, #8
 800be24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	69db      	ldr	r3, [r3, #28]
 800be2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be30:	2b00      	cmp	r3, #0
 800be32:	d003      	beq.n	800be3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 f887 	bl	800bf48 <HAL_TIM_IC_CaptureCallback>
 800be3a:	e005      	b.n	800be48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 f879 	bl	800bf34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 f88a 	bl	800bf5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	691b      	ldr	r3, [r3, #16]
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d10e      	bne.n	800be7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	f003 0301 	and.w	r3, r3, #1
 800be66:	2b01      	cmp	r3, #1
 800be68:	d107      	bne.n	800be7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f06f 0201 	mvn.w	r2, #1
 800be72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f7f5 f8cd 	bl	8001014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be84:	2b80      	cmp	r3, #128	; 0x80
 800be86:	d10e      	bne.n	800bea6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be92:	2b80      	cmp	r3, #128	; 0x80
 800be94:	d107      	bne.n	800bea6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800be9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 f913 	bl	800c0cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beb4:	d10e      	bne.n	800bed4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bec0:	2b80      	cmp	r3, #128	; 0x80
 800bec2:	d107      	bne.n	800bed4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800becc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f906 	bl	800c0e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bede:	2b40      	cmp	r3, #64	; 0x40
 800bee0:	d10e      	bne.n	800bf00 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beec:	2b40      	cmp	r3, #64	; 0x40
 800beee:	d107      	bne.n	800bf00 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 f838 	bl	800bf70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	f003 0320 	and.w	r3, r3, #32
 800bf0a:	2b20      	cmp	r3, #32
 800bf0c:	d10e      	bne.n	800bf2c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	f003 0320 	and.w	r3, r3, #32
 800bf18:	2b20      	cmp	r3, #32
 800bf1a:	d107      	bne.n	800bf2c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f06f 0220 	mvn.w	r2, #32
 800bf24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f8c6 	bl	800c0b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf2c:	bf00      	nop
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf3c:	bf00      	nop
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf78:	bf00      	nop
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4a40      	ldr	r2, [pc, #256]	; (800c098 <TIM_Base_SetConfig+0x114>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d013      	beq.n	800bfc4 <TIM_Base_SetConfig+0x40>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfa2:	d00f      	beq.n	800bfc4 <TIM_Base_SetConfig+0x40>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	4a3d      	ldr	r2, [pc, #244]	; (800c09c <TIM_Base_SetConfig+0x118>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d00b      	beq.n	800bfc4 <TIM_Base_SetConfig+0x40>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4a3c      	ldr	r2, [pc, #240]	; (800c0a0 <TIM_Base_SetConfig+0x11c>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d007      	beq.n	800bfc4 <TIM_Base_SetConfig+0x40>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	4a3b      	ldr	r2, [pc, #236]	; (800c0a4 <TIM_Base_SetConfig+0x120>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d003      	beq.n	800bfc4 <TIM_Base_SetConfig+0x40>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	4a3a      	ldr	r2, [pc, #232]	; (800c0a8 <TIM_Base_SetConfig+0x124>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d108      	bne.n	800bfd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a2f      	ldr	r2, [pc, #188]	; (800c098 <TIM_Base_SetConfig+0x114>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d01f      	beq.n	800c01e <TIM_Base_SetConfig+0x9a>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfe4:	d01b      	beq.n	800c01e <TIM_Base_SetConfig+0x9a>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a2c      	ldr	r2, [pc, #176]	; (800c09c <TIM_Base_SetConfig+0x118>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d017      	beq.n	800c01e <TIM_Base_SetConfig+0x9a>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a2b      	ldr	r2, [pc, #172]	; (800c0a0 <TIM_Base_SetConfig+0x11c>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d013      	beq.n	800c01e <TIM_Base_SetConfig+0x9a>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a2a      	ldr	r2, [pc, #168]	; (800c0a4 <TIM_Base_SetConfig+0x120>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d00f      	beq.n	800c01e <TIM_Base_SetConfig+0x9a>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a29      	ldr	r2, [pc, #164]	; (800c0a8 <TIM_Base_SetConfig+0x124>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d00b      	beq.n	800c01e <TIM_Base_SetConfig+0x9a>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a28      	ldr	r2, [pc, #160]	; (800c0ac <TIM_Base_SetConfig+0x128>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d007      	beq.n	800c01e <TIM_Base_SetConfig+0x9a>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a27      	ldr	r2, [pc, #156]	; (800c0b0 <TIM_Base_SetConfig+0x12c>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d003      	beq.n	800c01e <TIM_Base_SetConfig+0x9a>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a26      	ldr	r2, [pc, #152]	; (800c0b4 <TIM_Base_SetConfig+0x130>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d108      	bne.n	800c030 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	4313      	orrs	r3, r2
 800c02e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	689a      	ldr	r2, [r3, #8]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4a10      	ldr	r2, [pc, #64]	; (800c098 <TIM_Base_SetConfig+0x114>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d00f      	beq.n	800c07c <TIM_Base_SetConfig+0xf8>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a12      	ldr	r2, [pc, #72]	; (800c0a8 <TIM_Base_SetConfig+0x124>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d00b      	beq.n	800c07c <TIM_Base_SetConfig+0xf8>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4a11      	ldr	r2, [pc, #68]	; (800c0ac <TIM_Base_SetConfig+0x128>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d007      	beq.n	800c07c <TIM_Base_SetConfig+0xf8>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a10      	ldr	r2, [pc, #64]	; (800c0b0 <TIM_Base_SetConfig+0x12c>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d003      	beq.n	800c07c <TIM_Base_SetConfig+0xf8>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a0f      	ldr	r2, [pc, #60]	; (800c0b4 <TIM_Base_SetConfig+0x130>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d103      	bne.n	800c084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	691a      	ldr	r2, [r3, #16]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	615a      	str	r2, [r3, #20]
}
 800c08a:	bf00      	nop
 800c08c:	3714      	adds	r7, #20
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	40010000 	.word	0x40010000
 800c09c:	40000400 	.word	0x40000400
 800c0a0:	40000800 	.word	0x40000800
 800c0a4:	40000c00 	.word	0x40000c00
 800c0a8:	40010400 	.word	0x40010400
 800c0ac:	40014000 	.word	0x40014000
 800c0b0:	40014400 	.word	0x40014400
 800c0b4:	40014800 	.word	0x40014800

0800c0b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0d4:	bf00      	nop
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d101      	bne.n	800c106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c102:	2301      	movs	r3, #1
 800c104:	e042      	b.n	800c18c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d106      	bne.n	800c11e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f7f5 fa6b 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2224      	movs	r2, #36	; 0x24
 800c122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f022 0201 	bic.w	r2, r2, #1
 800c134:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 f82e 	bl	800c198 <UART_SetConfig>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d101      	bne.n	800c146 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e022      	b.n	800c18c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d002      	beq.n	800c154 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f002 f9a0 	bl	800e494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	685a      	ldr	r2, [r3, #4]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	689a      	ldr	r2, [r3, #8]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f042 0201 	orr.w	r2, r2, #1
 800c182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f002 fa27 	bl	800e5d8 <UART_CheckIdleState>
 800c18a:	4603      	mov	r3, r0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	0000      	movs	r0, r0
	...

0800c198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c198:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c19c:	b090      	sub	sp, #64	; 0x40
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	689a      	ldr	r2, [r3, #8]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	431a      	orrs	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	695b      	ldr	r3, [r3, #20]
 800c1be:	431a      	orrs	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	4bc1      	ldr	r3, [pc, #772]	; (800c4e0 <UART_SetConfig+0x348>)
 800c1da:	4013      	ands	r3, r2
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	6812      	ldr	r2, [r2, #0]
 800c1e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c1e2:	430b      	orrs	r3, r1
 800c1e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	68da      	ldr	r2, [r3, #12]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	430a      	orrs	r2, r1
 800c1fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	699b      	ldr	r3, [r3, #24]
 800c200:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4ab7      	ldr	r2, [pc, #732]	; (800c4e4 <UART_SetConfig+0x34c>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d004      	beq.n	800c216 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a1b      	ldr	r3, [r3, #32]
 800c210:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c212:	4313      	orrs	r3, r2
 800c214:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	4bb2      	ldr	r3, [pc, #712]	; (800c4e8 <UART_SetConfig+0x350>)
 800c21e:	4013      	ands	r3, r2
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	6812      	ldr	r2, [r2, #0]
 800c224:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c226:	430b      	orrs	r3, r1
 800c228:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c230:	f023 010f 	bic.w	r1, r3, #15
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	430a      	orrs	r2, r1
 800c23e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4aa9      	ldr	r2, [pc, #676]	; (800c4ec <UART_SetConfig+0x354>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d177      	bne.n	800c33a <UART_SetConfig+0x1a2>
 800c24a:	4ba9      	ldr	r3, [pc, #676]	; (800c4f0 <UART_SetConfig+0x358>)
 800c24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c24e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c252:	2b28      	cmp	r3, #40	; 0x28
 800c254:	d86c      	bhi.n	800c330 <UART_SetConfig+0x198>
 800c256:	a201      	add	r2, pc, #4	; (adr r2, 800c25c <UART_SetConfig+0xc4>)
 800c258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c25c:	0800c301 	.word	0x0800c301
 800c260:	0800c331 	.word	0x0800c331
 800c264:	0800c331 	.word	0x0800c331
 800c268:	0800c331 	.word	0x0800c331
 800c26c:	0800c331 	.word	0x0800c331
 800c270:	0800c331 	.word	0x0800c331
 800c274:	0800c331 	.word	0x0800c331
 800c278:	0800c331 	.word	0x0800c331
 800c27c:	0800c309 	.word	0x0800c309
 800c280:	0800c331 	.word	0x0800c331
 800c284:	0800c331 	.word	0x0800c331
 800c288:	0800c331 	.word	0x0800c331
 800c28c:	0800c331 	.word	0x0800c331
 800c290:	0800c331 	.word	0x0800c331
 800c294:	0800c331 	.word	0x0800c331
 800c298:	0800c331 	.word	0x0800c331
 800c29c:	0800c311 	.word	0x0800c311
 800c2a0:	0800c331 	.word	0x0800c331
 800c2a4:	0800c331 	.word	0x0800c331
 800c2a8:	0800c331 	.word	0x0800c331
 800c2ac:	0800c331 	.word	0x0800c331
 800c2b0:	0800c331 	.word	0x0800c331
 800c2b4:	0800c331 	.word	0x0800c331
 800c2b8:	0800c331 	.word	0x0800c331
 800c2bc:	0800c319 	.word	0x0800c319
 800c2c0:	0800c331 	.word	0x0800c331
 800c2c4:	0800c331 	.word	0x0800c331
 800c2c8:	0800c331 	.word	0x0800c331
 800c2cc:	0800c331 	.word	0x0800c331
 800c2d0:	0800c331 	.word	0x0800c331
 800c2d4:	0800c331 	.word	0x0800c331
 800c2d8:	0800c331 	.word	0x0800c331
 800c2dc:	0800c321 	.word	0x0800c321
 800c2e0:	0800c331 	.word	0x0800c331
 800c2e4:	0800c331 	.word	0x0800c331
 800c2e8:	0800c331 	.word	0x0800c331
 800c2ec:	0800c331 	.word	0x0800c331
 800c2f0:	0800c331 	.word	0x0800c331
 800c2f4:	0800c331 	.word	0x0800c331
 800c2f8:	0800c331 	.word	0x0800c331
 800c2fc:	0800c329 	.word	0x0800c329
 800c300:	2301      	movs	r3, #1
 800c302:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c306:	e233      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c308:	2304      	movs	r3, #4
 800c30a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c30e:	e22f      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c310:	2308      	movs	r3, #8
 800c312:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c316:	e22b      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c318:	2310      	movs	r3, #16
 800c31a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c31e:	e227      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c320:	2320      	movs	r3, #32
 800c322:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c326:	e223      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c328:	2340      	movs	r3, #64	; 0x40
 800c32a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c32e:	e21f      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c330:	2380      	movs	r3, #128	; 0x80
 800c332:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c336:	bf00      	nop
 800c338:	e21a      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a6d      	ldr	r2, [pc, #436]	; (800c4f4 <UART_SetConfig+0x35c>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d132      	bne.n	800c3aa <UART_SetConfig+0x212>
 800c344:	4b6a      	ldr	r3, [pc, #424]	; (800c4f0 <UART_SetConfig+0x358>)
 800c346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c348:	f003 0307 	and.w	r3, r3, #7
 800c34c:	2b05      	cmp	r3, #5
 800c34e:	d827      	bhi.n	800c3a0 <UART_SetConfig+0x208>
 800c350:	a201      	add	r2, pc, #4	; (adr r2, 800c358 <UART_SetConfig+0x1c0>)
 800c352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c356:	bf00      	nop
 800c358:	0800c371 	.word	0x0800c371
 800c35c:	0800c379 	.word	0x0800c379
 800c360:	0800c381 	.word	0x0800c381
 800c364:	0800c389 	.word	0x0800c389
 800c368:	0800c391 	.word	0x0800c391
 800c36c:	0800c399 	.word	0x0800c399
 800c370:	2300      	movs	r3, #0
 800c372:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c376:	e1fb      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c378:	2304      	movs	r3, #4
 800c37a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c37e:	e1f7      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c380:	2308      	movs	r3, #8
 800c382:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c386:	e1f3      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c388:	2310      	movs	r3, #16
 800c38a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c38e:	e1ef      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c390:	2320      	movs	r3, #32
 800c392:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c396:	e1eb      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c398:	2340      	movs	r3, #64	; 0x40
 800c39a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c39e:	e1e7      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c3a0:	2380      	movs	r3, #128	; 0x80
 800c3a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3a6:	bf00      	nop
 800c3a8:	e1e2      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a52      	ldr	r2, [pc, #328]	; (800c4f8 <UART_SetConfig+0x360>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d132      	bne.n	800c41a <UART_SetConfig+0x282>
 800c3b4:	4b4e      	ldr	r3, [pc, #312]	; (800c4f0 <UART_SetConfig+0x358>)
 800c3b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3b8:	f003 0307 	and.w	r3, r3, #7
 800c3bc:	2b05      	cmp	r3, #5
 800c3be:	d827      	bhi.n	800c410 <UART_SetConfig+0x278>
 800c3c0:	a201      	add	r2, pc, #4	; (adr r2, 800c3c8 <UART_SetConfig+0x230>)
 800c3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c6:	bf00      	nop
 800c3c8:	0800c3e1 	.word	0x0800c3e1
 800c3cc:	0800c3e9 	.word	0x0800c3e9
 800c3d0:	0800c3f1 	.word	0x0800c3f1
 800c3d4:	0800c3f9 	.word	0x0800c3f9
 800c3d8:	0800c401 	.word	0x0800c401
 800c3dc:	0800c409 	.word	0x0800c409
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3e6:	e1c3      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c3e8:	2304      	movs	r3, #4
 800c3ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3ee:	e1bf      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c3f0:	2308      	movs	r3, #8
 800c3f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3f6:	e1bb      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c3f8:	2310      	movs	r3, #16
 800c3fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3fe:	e1b7      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c400:	2320      	movs	r3, #32
 800c402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c406:	e1b3      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c408:	2340      	movs	r3, #64	; 0x40
 800c40a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c40e:	e1af      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c410:	2380      	movs	r3, #128	; 0x80
 800c412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c416:	bf00      	nop
 800c418:	e1aa      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a37      	ldr	r2, [pc, #220]	; (800c4fc <UART_SetConfig+0x364>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d132      	bne.n	800c48a <UART_SetConfig+0x2f2>
 800c424:	4b32      	ldr	r3, [pc, #200]	; (800c4f0 <UART_SetConfig+0x358>)
 800c426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c428:	f003 0307 	and.w	r3, r3, #7
 800c42c:	2b05      	cmp	r3, #5
 800c42e:	d827      	bhi.n	800c480 <UART_SetConfig+0x2e8>
 800c430:	a201      	add	r2, pc, #4	; (adr r2, 800c438 <UART_SetConfig+0x2a0>)
 800c432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c436:	bf00      	nop
 800c438:	0800c451 	.word	0x0800c451
 800c43c:	0800c459 	.word	0x0800c459
 800c440:	0800c461 	.word	0x0800c461
 800c444:	0800c469 	.word	0x0800c469
 800c448:	0800c471 	.word	0x0800c471
 800c44c:	0800c479 	.word	0x0800c479
 800c450:	2300      	movs	r3, #0
 800c452:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c456:	e18b      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c458:	2304      	movs	r3, #4
 800c45a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c45e:	e187      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c460:	2308      	movs	r3, #8
 800c462:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c466:	e183      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c468:	2310      	movs	r3, #16
 800c46a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c46e:	e17f      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c470:	2320      	movs	r3, #32
 800c472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c476:	e17b      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c478:	2340      	movs	r3, #64	; 0x40
 800c47a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c47e:	e177      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c480:	2380      	movs	r3, #128	; 0x80
 800c482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c486:	bf00      	nop
 800c488:	e172      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a1c      	ldr	r2, [pc, #112]	; (800c500 <UART_SetConfig+0x368>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d144      	bne.n	800c51e <UART_SetConfig+0x386>
 800c494:	4b16      	ldr	r3, [pc, #88]	; (800c4f0 <UART_SetConfig+0x358>)
 800c496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c498:	f003 0307 	and.w	r3, r3, #7
 800c49c:	2b05      	cmp	r3, #5
 800c49e:	d839      	bhi.n	800c514 <UART_SetConfig+0x37c>
 800c4a0:	a201      	add	r2, pc, #4	; (adr r2, 800c4a8 <UART_SetConfig+0x310>)
 800c4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a6:	bf00      	nop
 800c4a8:	0800c4c1 	.word	0x0800c4c1
 800c4ac:	0800c4c9 	.word	0x0800c4c9
 800c4b0:	0800c4d1 	.word	0x0800c4d1
 800c4b4:	0800c4d9 	.word	0x0800c4d9
 800c4b8:	0800c505 	.word	0x0800c505
 800c4bc:	0800c50d 	.word	0x0800c50d
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4c6:	e153      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c4c8:	2304      	movs	r3, #4
 800c4ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4ce:	e14f      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c4d0:	2308      	movs	r3, #8
 800c4d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4d6:	e14b      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c4d8:	2310      	movs	r3, #16
 800c4da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4de:	e147      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c4e0:	cfff69f3 	.word	0xcfff69f3
 800c4e4:	58000c00 	.word	0x58000c00
 800c4e8:	11fff4ff 	.word	0x11fff4ff
 800c4ec:	40011000 	.word	0x40011000
 800c4f0:	58024400 	.word	0x58024400
 800c4f4:	40004400 	.word	0x40004400
 800c4f8:	40004800 	.word	0x40004800
 800c4fc:	40004c00 	.word	0x40004c00
 800c500:	40005000 	.word	0x40005000
 800c504:	2320      	movs	r3, #32
 800c506:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c50a:	e131      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c50c:	2340      	movs	r3, #64	; 0x40
 800c50e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c512:	e12d      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c514:	2380      	movs	r3, #128	; 0x80
 800c516:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c51a:	bf00      	nop
 800c51c:	e128      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4ac3      	ldr	r2, [pc, #780]	; (800c830 <UART_SetConfig+0x698>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d178      	bne.n	800c61a <UART_SetConfig+0x482>
 800c528:	4bc2      	ldr	r3, [pc, #776]	; (800c834 <UART_SetConfig+0x69c>)
 800c52a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c52c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c530:	2b28      	cmp	r3, #40	; 0x28
 800c532:	d86d      	bhi.n	800c610 <UART_SetConfig+0x478>
 800c534:	a201      	add	r2, pc, #4	; (adr r2, 800c53c <UART_SetConfig+0x3a4>)
 800c536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c53a:	bf00      	nop
 800c53c:	0800c5e1 	.word	0x0800c5e1
 800c540:	0800c611 	.word	0x0800c611
 800c544:	0800c611 	.word	0x0800c611
 800c548:	0800c611 	.word	0x0800c611
 800c54c:	0800c611 	.word	0x0800c611
 800c550:	0800c611 	.word	0x0800c611
 800c554:	0800c611 	.word	0x0800c611
 800c558:	0800c611 	.word	0x0800c611
 800c55c:	0800c5e9 	.word	0x0800c5e9
 800c560:	0800c611 	.word	0x0800c611
 800c564:	0800c611 	.word	0x0800c611
 800c568:	0800c611 	.word	0x0800c611
 800c56c:	0800c611 	.word	0x0800c611
 800c570:	0800c611 	.word	0x0800c611
 800c574:	0800c611 	.word	0x0800c611
 800c578:	0800c611 	.word	0x0800c611
 800c57c:	0800c5f1 	.word	0x0800c5f1
 800c580:	0800c611 	.word	0x0800c611
 800c584:	0800c611 	.word	0x0800c611
 800c588:	0800c611 	.word	0x0800c611
 800c58c:	0800c611 	.word	0x0800c611
 800c590:	0800c611 	.word	0x0800c611
 800c594:	0800c611 	.word	0x0800c611
 800c598:	0800c611 	.word	0x0800c611
 800c59c:	0800c5f9 	.word	0x0800c5f9
 800c5a0:	0800c611 	.word	0x0800c611
 800c5a4:	0800c611 	.word	0x0800c611
 800c5a8:	0800c611 	.word	0x0800c611
 800c5ac:	0800c611 	.word	0x0800c611
 800c5b0:	0800c611 	.word	0x0800c611
 800c5b4:	0800c611 	.word	0x0800c611
 800c5b8:	0800c611 	.word	0x0800c611
 800c5bc:	0800c601 	.word	0x0800c601
 800c5c0:	0800c611 	.word	0x0800c611
 800c5c4:	0800c611 	.word	0x0800c611
 800c5c8:	0800c611 	.word	0x0800c611
 800c5cc:	0800c611 	.word	0x0800c611
 800c5d0:	0800c611 	.word	0x0800c611
 800c5d4:	0800c611 	.word	0x0800c611
 800c5d8:	0800c611 	.word	0x0800c611
 800c5dc:	0800c609 	.word	0x0800c609
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c5e6:	e0c3      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c5e8:	2304      	movs	r3, #4
 800c5ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c5ee:	e0bf      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c5f0:	2308      	movs	r3, #8
 800c5f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c5f6:	e0bb      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c5f8:	2310      	movs	r3, #16
 800c5fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c5fe:	e0b7      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c600:	2320      	movs	r3, #32
 800c602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c606:	e0b3      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c608:	2340      	movs	r3, #64	; 0x40
 800c60a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c60e:	e0af      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c610:	2380      	movs	r3, #128	; 0x80
 800c612:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c616:	bf00      	nop
 800c618:	e0aa      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a86      	ldr	r2, [pc, #536]	; (800c838 <UART_SetConfig+0x6a0>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d132      	bne.n	800c68a <UART_SetConfig+0x4f2>
 800c624:	4b83      	ldr	r3, [pc, #524]	; (800c834 <UART_SetConfig+0x69c>)
 800c626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c628:	f003 0307 	and.w	r3, r3, #7
 800c62c:	2b05      	cmp	r3, #5
 800c62e:	d827      	bhi.n	800c680 <UART_SetConfig+0x4e8>
 800c630:	a201      	add	r2, pc, #4	; (adr r2, 800c638 <UART_SetConfig+0x4a0>)
 800c632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c636:	bf00      	nop
 800c638:	0800c651 	.word	0x0800c651
 800c63c:	0800c659 	.word	0x0800c659
 800c640:	0800c661 	.word	0x0800c661
 800c644:	0800c669 	.word	0x0800c669
 800c648:	0800c671 	.word	0x0800c671
 800c64c:	0800c679 	.word	0x0800c679
 800c650:	2300      	movs	r3, #0
 800c652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c656:	e08b      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c658:	2304      	movs	r3, #4
 800c65a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c65e:	e087      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c660:	2308      	movs	r3, #8
 800c662:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c666:	e083      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c668:	2310      	movs	r3, #16
 800c66a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c66e:	e07f      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c670:	2320      	movs	r3, #32
 800c672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c676:	e07b      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c678:	2340      	movs	r3, #64	; 0x40
 800c67a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c67e:	e077      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c680:	2380      	movs	r3, #128	; 0x80
 800c682:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c686:	bf00      	nop
 800c688:	e072      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a6b      	ldr	r2, [pc, #428]	; (800c83c <UART_SetConfig+0x6a4>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d132      	bne.n	800c6fa <UART_SetConfig+0x562>
 800c694:	4b67      	ldr	r3, [pc, #412]	; (800c834 <UART_SetConfig+0x69c>)
 800c696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c698:	f003 0307 	and.w	r3, r3, #7
 800c69c:	2b05      	cmp	r3, #5
 800c69e:	d827      	bhi.n	800c6f0 <UART_SetConfig+0x558>
 800c6a0:	a201      	add	r2, pc, #4	; (adr r2, 800c6a8 <UART_SetConfig+0x510>)
 800c6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a6:	bf00      	nop
 800c6a8:	0800c6c1 	.word	0x0800c6c1
 800c6ac:	0800c6c9 	.word	0x0800c6c9
 800c6b0:	0800c6d1 	.word	0x0800c6d1
 800c6b4:	0800c6d9 	.word	0x0800c6d9
 800c6b8:	0800c6e1 	.word	0x0800c6e1
 800c6bc:	0800c6e9 	.word	0x0800c6e9
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c6c6:	e053      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c6c8:	2304      	movs	r3, #4
 800c6ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c6ce:	e04f      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c6d0:	2308      	movs	r3, #8
 800c6d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c6d6:	e04b      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c6d8:	2310      	movs	r3, #16
 800c6da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c6de:	e047      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c6e0:	2320      	movs	r3, #32
 800c6e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c6e6:	e043      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c6e8:	2340      	movs	r3, #64	; 0x40
 800c6ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c6ee:	e03f      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c6f0:	2380      	movs	r3, #128	; 0x80
 800c6f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c6f6:	bf00      	nop
 800c6f8:	e03a      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a50      	ldr	r2, [pc, #320]	; (800c840 <UART_SetConfig+0x6a8>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d132      	bne.n	800c76a <UART_SetConfig+0x5d2>
 800c704:	4b4b      	ldr	r3, [pc, #300]	; (800c834 <UART_SetConfig+0x69c>)
 800c706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c708:	f003 0307 	and.w	r3, r3, #7
 800c70c:	2b05      	cmp	r3, #5
 800c70e:	d827      	bhi.n	800c760 <UART_SetConfig+0x5c8>
 800c710:	a201      	add	r2, pc, #4	; (adr r2, 800c718 <UART_SetConfig+0x580>)
 800c712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c716:	bf00      	nop
 800c718:	0800c731 	.word	0x0800c731
 800c71c:	0800c739 	.word	0x0800c739
 800c720:	0800c741 	.word	0x0800c741
 800c724:	0800c749 	.word	0x0800c749
 800c728:	0800c751 	.word	0x0800c751
 800c72c:	0800c759 	.word	0x0800c759
 800c730:	2302      	movs	r3, #2
 800c732:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c736:	e01b      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c738:	2304      	movs	r3, #4
 800c73a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c73e:	e017      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c740:	2308      	movs	r3, #8
 800c742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c746:	e013      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c748:	2310      	movs	r3, #16
 800c74a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c74e:	e00f      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c750:	2320      	movs	r3, #32
 800c752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c756:	e00b      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c758:	2340      	movs	r3, #64	; 0x40
 800c75a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c75e:	e007      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c760:	2380      	movs	r3, #128	; 0x80
 800c762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c766:	bf00      	nop
 800c768:	e002      	b.n	800c770 <UART_SetConfig+0x5d8>
 800c76a:	2380      	movs	r3, #128	; 0x80
 800c76c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a32      	ldr	r2, [pc, #200]	; (800c840 <UART_SetConfig+0x6a8>)
 800c776:	4293      	cmp	r3, r2
 800c778:	f040 86f7 	bne.w	800d56a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c77c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c780:	2b08      	cmp	r3, #8
 800c782:	f000 80c0 	beq.w	800c906 <UART_SetConfig+0x76e>
 800c786:	2b08      	cmp	r3, #8
 800c788:	dc04      	bgt.n	800c794 <UART_SetConfig+0x5fc>
 800c78a:	2b02      	cmp	r3, #2
 800c78c:	d00c      	beq.n	800c7a8 <UART_SetConfig+0x610>
 800c78e:	2b04      	cmp	r3, #4
 800c790:	d065      	beq.n	800c85e <UART_SetConfig+0x6c6>
 800c792:	e27a      	b.n	800cc8a <UART_SetConfig+0xaf2>
 800c794:	2b20      	cmp	r3, #32
 800c796:	f000 81b0 	beq.w	800cafa <UART_SetConfig+0x962>
 800c79a:	2b40      	cmp	r3, #64	; 0x40
 800c79c:	f000 821e 	beq.w	800cbdc <UART_SetConfig+0xa44>
 800c7a0:	2b10      	cmp	r3, #16
 800c7a2:	f000 8104 	beq.w	800c9ae <UART_SetConfig+0x816>
 800c7a6:	e270      	b.n	800cc8a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c7a8:	f7fd f910 	bl	80099cc <HAL_RCCEx_GetD3PCLK1Freq>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d04e      	beq.n	800c854 <UART_SetConfig+0x6bc>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d048      	beq.n	800c850 <UART_SetConfig+0x6b8>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d042      	beq.n	800c84c <UART_SetConfig+0x6b4>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ca:	2b03      	cmp	r3, #3
 800c7cc:	d03c      	beq.n	800c848 <UART_SetConfig+0x6b0>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d2:	2b04      	cmp	r3, #4
 800c7d4:	d036      	beq.n	800c844 <UART_SetConfig+0x6ac>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7da:	2b05      	cmp	r3, #5
 800c7dc:	d026      	beq.n	800c82c <UART_SetConfig+0x694>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e2:	2b06      	cmp	r3, #6
 800c7e4:	d020      	beq.n	800c828 <UART_SetConfig+0x690>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ea:	2b07      	cmp	r3, #7
 800c7ec:	d01a      	beq.n	800c824 <UART_SetConfig+0x68c>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f2:	2b08      	cmp	r3, #8
 800c7f4:	d014      	beq.n	800c820 <UART_SetConfig+0x688>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fa:	2b09      	cmp	r3, #9
 800c7fc:	d00e      	beq.n	800c81c <UART_SetConfig+0x684>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c802:	2b0a      	cmp	r3, #10
 800c804:	d008      	beq.n	800c818 <UART_SetConfig+0x680>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80a:	2b0b      	cmp	r3, #11
 800c80c:	d102      	bne.n	800c814 <UART_SetConfig+0x67c>
 800c80e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c812:	e020      	b.n	800c856 <UART_SetConfig+0x6be>
 800c814:	2301      	movs	r3, #1
 800c816:	e01e      	b.n	800c856 <UART_SetConfig+0x6be>
 800c818:	2380      	movs	r3, #128	; 0x80
 800c81a:	e01c      	b.n	800c856 <UART_SetConfig+0x6be>
 800c81c:	2340      	movs	r3, #64	; 0x40
 800c81e:	e01a      	b.n	800c856 <UART_SetConfig+0x6be>
 800c820:	2320      	movs	r3, #32
 800c822:	e018      	b.n	800c856 <UART_SetConfig+0x6be>
 800c824:	2310      	movs	r3, #16
 800c826:	e016      	b.n	800c856 <UART_SetConfig+0x6be>
 800c828:	230c      	movs	r3, #12
 800c82a:	e014      	b.n	800c856 <UART_SetConfig+0x6be>
 800c82c:	230a      	movs	r3, #10
 800c82e:	e012      	b.n	800c856 <UART_SetConfig+0x6be>
 800c830:	40011400 	.word	0x40011400
 800c834:	58024400 	.word	0x58024400
 800c838:	40007800 	.word	0x40007800
 800c83c:	40007c00 	.word	0x40007c00
 800c840:	58000c00 	.word	0x58000c00
 800c844:	2308      	movs	r3, #8
 800c846:	e006      	b.n	800c856 <UART_SetConfig+0x6be>
 800c848:	2306      	movs	r3, #6
 800c84a:	e004      	b.n	800c856 <UART_SetConfig+0x6be>
 800c84c:	2304      	movs	r3, #4
 800c84e:	e002      	b.n	800c856 <UART_SetConfig+0x6be>
 800c850:	2302      	movs	r3, #2
 800c852:	e000      	b.n	800c856 <UART_SetConfig+0x6be>
 800c854:	2301      	movs	r3, #1
 800c856:	fbb2 f3f3 	udiv	r3, r2, r3
 800c85a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c85c:	e219      	b.n	800cc92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c85e:	f107 0318 	add.w	r3, r7, #24
 800c862:	4618      	mov	r0, r3
 800c864:	f7fd f8c8 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c868:	69fa      	ldr	r2, [r7, #28]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d044      	beq.n	800c8fc <UART_SetConfig+0x764>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c876:	2b01      	cmp	r3, #1
 800c878:	d03e      	beq.n	800c8f8 <UART_SetConfig+0x760>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d038      	beq.n	800c8f4 <UART_SetConfig+0x75c>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c886:	2b03      	cmp	r3, #3
 800c888:	d032      	beq.n	800c8f0 <UART_SetConfig+0x758>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88e:	2b04      	cmp	r3, #4
 800c890:	d02c      	beq.n	800c8ec <UART_SetConfig+0x754>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c896:	2b05      	cmp	r3, #5
 800c898:	d026      	beq.n	800c8e8 <UART_SetConfig+0x750>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89e:	2b06      	cmp	r3, #6
 800c8a0:	d020      	beq.n	800c8e4 <UART_SetConfig+0x74c>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a6:	2b07      	cmp	r3, #7
 800c8a8:	d01a      	beq.n	800c8e0 <UART_SetConfig+0x748>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ae:	2b08      	cmp	r3, #8
 800c8b0:	d014      	beq.n	800c8dc <UART_SetConfig+0x744>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b6:	2b09      	cmp	r3, #9
 800c8b8:	d00e      	beq.n	800c8d8 <UART_SetConfig+0x740>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8be:	2b0a      	cmp	r3, #10
 800c8c0:	d008      	beq.n	800c8d4 <UART_SetConfig+0x73c>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c6:	2b0b      	cmp	r3, #11
 800c8c8:	d102      	bne.n	800c8d0 <UART_SetConfig+0x738>
 800c8ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c8ce:	e016      	b.n	800c8fe <UART_SetConfig+0x766>
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e014      	b.n	800c8fe <UART_SetConfig+0x766>
 800c8d4:	2380      	movs	r3, #128	; 0x80
 800c8d6:	e012      	b.n	800c8fe <UART_SetConfig+0x766>
 800c8d8:	2340      	movs	r3, #64	; 0x40
 800c8da:	e010      	b.n	800c8fe <UART_SetConfig+0x766>
 800c8dc:	2320      	movs	r3, #32
 800c8de:	e00e      	b.n	800c8fe <UART_SetConfig+0x766>
 800c8e0:	2310      	movs	r3, #16
 800c8e2:	e00c      	b.n	800c8fe <UART_SetConfig+0x766>
 800c8e4:	230c      	movs	r3, #12
 800c8e6:	e00a      	b.n	800c8fe <UART_SetConfig+0x766>
 800c8e8:	230a      	movs	r3, #10
 800c8ea:	e008      	b.n	800c8fe <UART_SetConfig+0x766>
 800c8ec:	2308      	movs	r3, #8
 800c8ee:	e006      	b.n	800c8fe <UART_SetConfig+0x766>
 800c8f0:	2306      	movs	r3, #6
 800c8f2:	e004      	b.n	800c8fe <UART_SetConfig+0x766>
 800c8f4:	2304      	movs	r3, #4
 800c8f6:	e002      	b.n	800c8fe <UART_SetConfig+0x766>
 800c8f8:	2302      	movs	r3, #2
 800c8fa:	e000      	b.n	800c8fe <UART_SetConfig+0x766>
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c902:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c904:	e1c5      	b.n	800cc92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c906:	f107 030c 	add.w	r3, r7, #12
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fd f9c0 	bl	8009c90 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c910:	693a      	ldr	r2, [r7, #16]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c916:	2b00      	cmp	r3, #0
 800c918:	d044      	beq.n	800c9a4 <UART_SetConfig+0x80c>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d03e      	beq.n	800c9a0 <UART_SetConfig+0x808>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c926:	2b02      	cmp	r3, #2
 800c928:	d038      	beq.n	800c99c <UART_SetConfig+0x804>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92e:	2b03      	cmp	r3, #3
 800c930:	d032      	beq.n	800c998 <UART_SetConfig+0x800>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c936:	2b04      	cmp	r3, #4
 800c938:	d02c      	beq.n	800c994 <UART_SetConfig+0x7fc>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93e:	2b05      	cmp	r3, #5
 800c940:	d026      	beq.n	800c990 <UART_SetConfig+0x7f8>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c946:	2b06      	cmp	r3, #6
 800c948:	d020      	beq.n	800c98c <UART_SetConfig+0x7f4>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94e:	2b07      	cmp	r3, #7
 800c950:	d01a      	beq.n	800c988 <UART_SetConfig+0x7f0>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c956:	2b08      	cmp	r3, #8
 800c958:	d014      	beq.n	800c984 <UART_SetConfig+0x7ec>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95e:	2b09      	cmp	r3, #9
 800c960:	d00e      	beq.n	800c980 <UART_SetConfig+0x7e8>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c966:	2b0a      	cmp	r3, #10
 800c968:	d008      	beq.n	800c97c <UART_SetConfig+0x7e4>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96e:	2b0b      	cmp	r3, #11
 800c970:	d102      	bne.n	800c978 <UART_SetConfig+0x7e0>
 800c972:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c976:	e016      	b.n	800c9a6 <UART_SetConfig+0x80e>
 800c978:	2301      	movs	r3, #1
 800c97a:	e014      	b.n	800c9a6 <UART_SetConfig+0x80e>
 800c97c:	2380      	movs	r3, #128	; 0x80
 800c97e:	e012      	b.n	800c9a6 <UART_SetConfig+0x80e>
 800c980:	2340      	movs	r3, #64	; 0x40
 800c982:	e010      	b.n	800c9a6 <UART_SetConfig+0x80e>
 800c984:	2320      	movs	r3, #32
 800c986:	e00e      	b.n	800c9a6 <UART_SetConfig+0x80e>
 800c988:	2310      	movs	r3, #16
 800c98a:	e00c      	b.n	800c9a6 <UART_SetConfig+0x80e>
 800c98c:	230c      	movs	r3, #12
 800c98e:	e00a      	b.n	800c9a6 <UART_SetConfig+0x80e>
 800c990:	230a      	movs	r3, #10
 800c992:	e008      	b.n	800c9a6 <UART_SetConfig+0x80e>
 800c994:	2308      	movs	r3, #8
 800c996:	e006      	b.n	800c9a6 <UART_SetConfig+0x80e>
 800c998:	2306      	movs	r3, #6
 800c99a:	e004      	b.n	800c9a6 <UART_SetConfig+0x80e>
 800c99c:	2304      	movs	r3, #4
 800c99e:	e002      	b.n	800c9a6 <UART_SetConfig+0x80e>
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	e000      	b.n	800c9a6 <UART_SetConfig+0x80e>
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c9ac:	e171      	b.n	800cc92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9ae:	4b7a      	ldr	r3, [pc, #488]	; (800cb98 <UART_SetConfig+0xa00>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f003 0320 	and.w	r3, r3, #32
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d054      	beq.n	800ca64 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c9ba:	4b77      	ldr	r3, [pc, #476]	; (800cb98 <UART_SetConfig+0xa00>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	08db      	lsrs	r3, r3, #3
 800c9c0:	f003 0303 	and.w	r3, r3, #3
 800c9c4:	4a75      	ldr	r2, [pc, #468]	; (800cb9c <UART_SetConfig+0xa04>)
 800c9c6:	40da      	lsrs	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d044      	beq.n	800ca5a <UART_SetConfig+0x8c2>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d03e      	beq.n	800ca56 <UART_SetConfig+0x8be>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d038      	beq.n	800ca52 <UART_SetConfig+0x8ba>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e4:	2b03      	cmp	r3, #3
 800c9e6:	d032      	beq.n	800ca4e <UART_SetConfig+0x8b6>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ec:	2b04      	cmp	r3, #4
 800c9ee:	d02c      	beq.n	800ca4a <UART_SetConfig+0x8b2>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f4:	2b05      	cmp	r3, #5
 800c9f6:	d026      	beq.n	800ca46 <UART_SetConfig+0x8ae>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9fc:	2b06      	cmp	r3, #6
 800c9fe:	d020      	beq.n	800ca42 <UART_SetConfig+0x8aa>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca04:	2b07      	cmp	r3, #7
 800ca06:	d01a      	beq.n	800ca3e <UART_SetConfig+0x8a6>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0c:	2b08      	cmp	r3, #8
 800ca0e:	d014      	beq.n	800ca3a <UART_SetConfig+0x8a2>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca14:	2b09      	cmp	r3, #9
 800ca16:	d00e      	beq.n	800ca36 <UART_SetConfig+0x89e>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca1c:	2b0a      	cmp	r3, #10
 800ca1e:	d008      	beq.n	800ca32 <UART_SetConfig+0x89a>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca24:	2b0b      	cmp	r3, #11
 800ca26:	d102      	bne.n	800ca2e <UART_SetConfig+0x896>
 800ca28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca2c:	e016      	b.n	800ca5c <UART_SetConfig+0x8c4>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e014      	b.n	800ca5c <UART_SetConfig+0x8c4>
 800ca32:	2380      	movs	r3, #128	; 0x80
 800ca34:	e012      	b.n	800ca5c <UART_SetConfig+0x8c4>
 800ca36:	2340      	movs	r3, #64	; 0x40
 800ca38:	e010      	b.n	800ca5c <UART_SetConfig+0x8c4>
 800ca3a:	2320      	movs	r3, #32
 800ca3c:	e00e      	b.n	800ca5c <UART_SetConfig+0x8c4>
 800ca3e:	2310      	movs	r3, #16
 800ca40:	e00c      	b.n	800ca5c <UART_SetConfig+0x8c4>
 800ca42:	230c      	movs	r3, #12
 800ca44:	e00a      	b.n	800ca5c <UART_SetConfig+0x8c4>
 800ca46:	230a      	movs	r3, #10
 800ca48:	e008      	b.n	800ca5c <UART_SetConfig+0x8c4>
 800ca4a:	2308      	movs	r3, #8
 800ca4c:	e006      	b.n	800ca5c <UART_SetConfig+0x8c4>
 800ca4e:	2306      	movs	r3, #6
 800ca50:	e004      	b.n	800ca5c <UART_SetConfig+0x8c4>
 800ca52:	2304      	movs	r3, #4
 800ca54:	e002      	b.n	800ca5c <UART_SetConfig+0x8c4>
 800ca56:	2302      	movs	r3, #2
 800ca58:	e000      	b.n	800ca5c <UART_SetConfig+0x8c4>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800ca62:	e116      	b.n	800cc92 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d043      	beq.n	800caf4 <UART_SetConfig+0x95c>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d03d      	beq.n	800caf0 <UART_SetConfig+0x958>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca78:	2b02      	cmp	r3, #2
 800ca7a:	d037      	beq.n	800caec <UART_SetConfig+0x954>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca80:	2b03      	cmp	r3, #3
 800ca82:	d031      	beq.n	800cae8 <UART_SetConfig+0x950>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca88:	2b04      	cmp	r3, #4
 800ca8a:	d02b      	beq.n	800cae4 <UART_SetConfig+0x94c>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca90:	2b05      	cmp	r3, #5
 800ca92:	d025      	beq.n	800cae0 <UART_SetConfig+0x948>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca98:	2b06      	cmp	r3, #6
 800ca9a:	d01f      	beq.n	800cadc <UART_SetConfig+0x944>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa0:	2b07      	cmp	r3, #7
 800caa2:	d019      	beq.n	800cad8 <UART_SetConfig+0x940>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa8:	2b08      	cmp	r3, #8
 800caaa:	d013      	beq.n	800cad4 <UART_SetConfig+0x93c>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab0:	2b09      	cmp	r3, #9
 800cab2:	d00d      	beq.n	800cad0 <UART_SetConfig+0x938>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab8:	2b0a      	cmp	r3, #10
 800caba:	d007      	beq.n	800cacc <UART_SetConfig+0x934>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac0:	2b0b      	cmp	r3, #11
 800cac2:	d101      	bne.n	800cac8 <UART_SetConfig+0x930>
 800cac4:	4b36      	ldr	r3, [pc, #216]	; (800cba0 <UART_SetConfig+0xa08>)
 800cac6:	e016      	b.n	800caf6 <UART_SetConfig+0x95e>
 800cac8:	4b34      	ldr	r3, [pc, #208]	; (800cb9c <UART_SetConfig+0xa04>)
 800caca:	e014      	b.n	800caf6 <UART_SetConfig+0x95e>
 800cacc:	4b35      	ldr	r3, [pc, #212]	; (800cba4 <UART_SetConfig+0xa0c>)
 800cace:	e012      	b.n	800caf6 <UART_SetConfig+0x95e>
 800cad0:	4b35      	ldr	r3, [pc, #212]	; (800cba8 <UART_SetConfig+0xa10>)
 800cad2:	e010      	b.n	800caf6 <UART_SetConfig+0x95e>
 800cad4:	4b35      	ldr	r3, [pc, #212]	; (800cbac <UART_SetConfig+0xa14>)
 800cad6:	e00e      	b.n	800caf6 <UART_SetConfig+0x95e>
 800cad8:	4b35      	ldr	r3, [pc, #212]	; (800cbb0 <UART_SetConfig+0xa18>)
 800cada:	e00c      	b.n	800caf6 <UART_SetConfig+0x95e>
 800cadc:	4b35      	ldr	r3, [pc, #212]	; (800cbb4 <UART_SetConfig+0xa1c>)
 800cade:	e00a      	b.n	800caf6 <UART_SetConfig+0x95e>
 800cae0:	4b35      	ldr	r3, [pc, #212]	; (800cbb8 <UART_SetConfig+0xa20>)
 800cae2:	e008      	b.n	800caf6 <UART_SetConfig+0x95e>
 800cae4:	4b35      	ldr	r3, [pc, #212]	; (800cbbc <UART_SetConfig+0xa24>)
 800cae6:	e006      	b.n	800caf6 <UART_SetConfig+0x95e>
 800cae8:	4b35      	ldr	r3, [pc, #212]	; (800cbc0 <UART_SetConfig+0xa28>)
 800caea:	e004      	b.n	800caf6 <UART_SetConfig+0x95e>
 800caec:	4b35      	ldr	r3, [pc, #212]	; (800cbc4 <UART_SetConfig+0xa2c>)
 800caee:	e002      	b.n	800caf6 <UART_SetConfig+0x95e>
 800caf0:	4b35      	ldr	r3, [pc, #212]	; (800cbc8 <UART_SetConfig+0xa30>)
 800caf2:	e000      	b.n	800caf6 <UART_SetConfig+0x95e>
 800caf4:	4b29      	ldr	r3, [pc, #164]	; (800cb9c <UART_SetConfig+0xa04>)
 800caf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800caf8:	e0cb      	b.n	800cc92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d046      	beq.n	800cb90 <UART_SetConfig+0x9f8>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d040      	beq.n	800cb8c <UART_SetConfig+0x9f4>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d03a      	beq.n	800cb88 <UART_SetConfig+0x9f0>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb16:	2b03      	cmp	r3, #3
 800cb18:	d034      	beq.n	800cb84 <UART_SetConfig+0x9ec>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb1e:	2b04      	cmp	r3, #4
 800cb20:	d02e      	beq.n	800cb80 <UART_SetConfig+0x9e8>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb26:	2b05      	cmp	r3, #5
 800cb28:	d028      	beq.n	800cb7c <UART_SetConfig+0x9e4>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb2e:	2b06      	cmp	r3, #6
 800cb30:	d022      	beq.n	800cb78 <UART_SetConfig+0x9e0>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb36:	2b07      	cmp	r3, #7
 800cb38:	d01c      	beq.n	800cb74 <UART_SetConfig+0x9dc>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3e:	2b08      	cmp	r3, #8
 800cb40:	d016      	beq.n	800cb70 <UART_SetConfig+0x9d8>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb46:	2b09      	cmp	r3, #9
 800cb48:	d00f      	beq.n	800cb6a <UART_SetConfig+0x9d2>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4e:	2b0a      	cmp	r3, #10
 800cb50:	d008      	beq.n	800cb64 <UART_SetConfig+0x9cc>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb56:	2b0b      	cmp	r3, #11
 800cb58:	d102      	bne.n	800cb60 <UART_SetConfig+0x9c8>
 800cb5a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800cb5e:	e018      	b.n	800cb92 <UART_SetConfig+0x9fa>
 800cb60:	4b13      	ldr	r3, [pc, #76]	; (800cbb0 <UART_SetConfig+0xa18>)
 800cb62:	e016      	b.n	800cb92 <UART_SetConfig+0x9fa>
 800cb64:	f647 2312 	movw	r3, #31250	; 0x7a12
 800cb68:	e013      	b.n	800cb92 <UART_SetConfig+0x9fa>
 800cb6a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800cb6e:	e010      	b.n	800cb92 <UART_SetConfig+0x9fa>
 800cb70:	4b16      	ldr	r3, [pc, #88]	; (800cbcc <UART_SetConfig+0xa34>)
 800cb72:	e00e      	b.n	800cb92 <UART_SetConfig+0x9fa>
 800cb74:	4b0a      	ldr	r3, [pc, #40]	; (800cba0 <UART_SetConfig+0xa08>)
 800cb76:	e00c      	b.n	800cb92 <UART_SetConfig+0x9fa>
 800cb78:	4b15      	ldr	r3, [pc, #84]	; (800cbd0 <UART_SetConfig+0xa38>)
 800cb7a:	e00a      	b.n	800cb92 <UART_SetConfig+0x9fa>
 800cb7c:	4b15      	ldr	r3, [pc, #84]	; (800cbd4 <UART_SetConfig+0xa3c>)
 800cb7e:	e008      	b.n	800cb92 <UART_SetConfig+0x9fa>
 800cb80:	4b08      	ldr	r3, [pc, #32]	; (800cba4 <UART_SetConfig+0xa0c>)
 800cb82:	e006      	b.n	800cb92 <UART_SetConfig+0x9fa>
 800cb84:	4b14      	ldr	r3, [pc, #80]	; (800cbd8 <UART_SetConfig+0xa40>)
 800cb86:	e004      	b.n	800cb92 <UART_SetConfig+0x9fa>
 800cb88:	4b07      	ldr	r3, [pc, #28]	; (800cba8 <UART_SetConfig+0xa10>)
 800cb8a:	e002      	b.n	800cb92 <UART_SetConfig+0x9fa>
 800cb8c:	4b07      	ldr	r3, [pc, #28]	; (800cbac <UART_SetConfig+0xa14>)
 800cb8e:	e000      	b.n	800cb92 <UART_SetConfig+0x9fa>
 800cb90:	4b07      	ldr	r3, [pc, #28]	; (800cbb0 <UART_SetConfig+0xa18>)
 800cb92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb94:	e07d      	b.n	800cc92 <UART_SetConfig+0xafa>
 800cb96:	bf00      	nop
 800cb98:	58024400 	.word	0x58024400
 800cb9c:	03d09000 	.word	0x03d09000
 800cba0:	0003d090 	.word	0x0003d090
 800cba4:	0007a120 	.word	0x0007a120
 800cba8:	000f4240 	.word	0x000f4240
 800cbac:	001e8480 	.word	0x001e8480
 800cbb0:	003d0900 	.word	0x003d0900
 800cbb4:	00516155 	.word	0x00516155
 800cbb8:	0061a800 	.word	0x0061a800
 800cbbc:	007a1200 	.word	0x007a1200
 800cbc0:	00a2c2aa 	.word	0x00a2c2aa
 800cbc4:	00f42400 	.word	0x00f42400
 800cbc8:	01e84800 	.word	0x01e84800
 800cbcc:	0001e848 	.word	0x0001e848
 800cbd0:	00051615 	.word	0x00051615
 800cbd4:	00061a80 	.word	0x00061a80
 800cbd8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d04e      	beq.n	800cc82 <UART_SetConfig+0xaea>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d047      	beq.n	800cc7c <UART_SetConfig+0xae4>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	d040      	beq.n	800cc76 <UART_SetConfig+0xade>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf8:	2b03      	cmp	r3, #3
 800cbfa:	d039      	beq.n	800cc70 <UART_SetConfig+0xad8>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc00:	2b04      	cmp	r3, #4
 800cc02:	d032      	beq.n	800cc6a <UART_SetConfig+0xad2>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc08:	2b05      	cmp	r3, #5
 800cc0a:	d02b      	beq.n	800cc64 <UART_SetConfig+0xacc>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc10:	2b06      	cmp	r3, #6
 800cc12:	d024      	beq.n	800cc5e <UART_SetConfig+0xac6>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc18:	2b07      	cmp	r3, #7
 800cc1a:	d01d      	beq.n	800cc58 <UART_SetConfig+0xac0>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc20:	2b08      	cmp	r3, #8
 800cc22:	d016      	beq.n	800cc52 <UART_SetConfig+0xaba>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc28:	2b09      	cmp	r3, #9
 800cc2a:	d00f      	beq.n	800cc4c <UART_SetConfig+0xab4>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc30:	2b0a      	cmp	r3, #10
 800cc32:	d008      	beq.n	800cc46 <UART_SetConfig+0xaae>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc38:	2b0b      	cmp	r3, #11
 800cc3a:	d101      	bne.n	800cc40 <UART_SetConfig+0xaa8>
 800cc3c:	2380      	movs	r3, #128	; 0x80
 800cc3e:	e022      	b.n	800cc86 <UART_SetConfig+0xaee>
 800cc40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc44:	e01f      	b.n	800cc86 <UART_SetConfig+0xaee>
 800cc46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc4a:	e01c      	b.n	800cc86 <UART_SetConfig+0xaee>
 800cc4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc50:	e019      	b.n	800cc86 <UART_SetConfig+0xaee>
 800cc52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc56:	e016      	b.n	800cc86 <UART_SetConfig+0xaee>
 800cc58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc5c:	e013      	b.n	800cc86 <UART_SetConfig+0xaee>
 800cc5e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800cc62:	e010      	b.n	800cc86 <UART_SetConfig+0xaee>
 800cc64:	f640 43cc 	movw	r3, #3276	; 0xccc
 800cc68:	e00d      	b.n	800cc86 <UART_SetConfig+0xaee>
 800cc6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc6e:	e00a      	b.n	800cc86 <UART_SetConfig+0xaee>
 800cc70:	f241 5355 	movw	r3, #5461	; 0x1555
 800cc74:	e007      	b.n	800cc86 <UART_SetConfig+0xaee>
 800cc76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cc7a:	e004      	b.n	800cc86 <UART_SetConfig+0xaee>
 800cc7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cc80:	e001      	b.n	800cc86 <UART_SetConfig+0xaee>
 800cc82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc88:	e003      	b.n	800cc92 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800cc90:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800cc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	f001 83e8 	beq.w	800e46a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	685a      	ldr	r2, [r3, #4]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	005b      	lsls	r3, r3, #1
 800cca2:	4413      	add	r3, r2
 800cca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d305      	bcc.n	800ccb6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ccb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d904      	bls.n	800ccc0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccbc:	f001 bbd5 	b.w	800e46a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800ccc0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ccc4:	2b08      	cmp	r3, #8
 800ccc6:	f000 8154 	beq.w	800cf72 <UART_SetConfig+0xdda>
 800ccca:	2b08      	cmp	r3, #8
 800cccc:	dc06      	bgt.n	800ccdc <UART_SetConfig+0xb44>
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d00f      	beq.n	800ccf2 <UART_SetConfig+0xb5a>
 800ccd2:	2b04      	cmp	r3, #4
 800ccd4:	f000 80ac 	beq.w	800ce30 <UART_SetConfig+0xc98>
 800ccd8:	f000 bc30 	b.w	800d53c <UART_SetConfig+0x13a4>
 800ccdc:	2b20      	cmp	r3, #32
 800ccde:	f000 832d 	beq.w	800d33c <UART_SetConfig+0x11a4>
 800cce2:	2b40      	cmp	r3, #64	; 0x40
 800cce4:	f000 83a5 	beq.w	800d432 <UART_SetConfig+0x129a>
 800cce8:	2b10      	cmp	r3, #16
 800ccea:	f000 81e3 	beq.w	800d0b4 <UART_SetConfig+0xf1c>
 800ccee:	f000 bc25 	b.w	800d53c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ccf2:	f7fc fe6b 	bl	80099cc <HAL_RCCEx_GetD3PCLK1Freq>
 800ccf6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f04f 0100 	mov.w	r1, #0
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d067      	beq.n	800cdd8 <UART_SetConfig+0xc40>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d05e      	beq.n	800cdce <UART_SetConfig+0xc36>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d055      	beq.n	800cdc4 <UART_SetConfig+0xc2c>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1c:	2b03      	cmp	r3, #3
 800cd1e:	d04c      	beq.n	800cdba <UART_SetConfig+0xc22>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd24:	2b04      	cmp	r3, #4
 800cd26:	d043      	beq.n	800cdb0 <UART_SetConfig+0xc18>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2c:	2b05      	cmp	r3, #5
 800cd2e:	d03a      	beq.n	800cda6 <UART_SetConfig+0xc0e>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd34:	2b06      	cmp	r3, #6
 800cd36:	d031      	beq.n	800cd9c <UART_SetConfig+0xc04>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd3c:	2b07      	cmp	r3, #7
 800cd3e:	d028      	beq.n	800cd92 <UART_SetConfig+0xbfa>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd44:	2b08      	cmp	r3, #8
 800cd46:	d01f      	beq.n	800cd88 <UART_SetConfig+0xbf0>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4c:	2b09      	cmp	r3, #9
 800cd4e:	d016      	beq.n	800cd7e <UART_SetConfig+0xbe6>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd54:	2b0a      	cmp	r3, #10
 800cd56:	d00d      	beq.n	800cd74 <UART_SetConfig+0xbdc>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5c:	2b0b      	cmp	r3, #11
 800cd5e:	d104      	bne.n	800cd6a <UART_SetConfig+0xbd2>
 800cd60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd64:	f04f 0400 	mov.w	r4, #0
 800cd68:	e03a      	b.n	800cde0 <UART_SetConfig+0xc48>
 800cd6a:	f04f 0301 	mov.w	r3, #1
 800cd6e:	f04f 0400 	mov.w	r4, #0
 800cd72:	e035      	b.n	800cde0 <UART_SetConfig+0xc48>
 800cd74:	f04f 0380 	mov.w	r3, #128	; 0x80
 800cd78:	f04f 0400 	mov.w	r4, #0
 800cd7c:	e030      	b.n	800cde0 <UART_SetConfig+0xc48>
 800cd7e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800cd82:	f04f 0400 	mov.w	r4, #0
 800cd86:	e02b      	b.n	800cde0 <UART_SetConfig+0xc48>
 800cd88:	f04f 0320 	mov.w	r3, #32
 800cd8c:	f04f 0400 	mov.w	r4, #0
 800cd90:	e026      	b.n	800cde0 <UART_SetConfig+0xc48>
 800cd92:	f04f 0310 	mov.w	r3, #16
 800cd96:	f04f 0400 	mov.w	r4, #0
 800cd9a:	e021      	b.n	800cde0 <UART_SetConfig+0xc48>
 800cd9c:	f04f 030c 	mov.w	r3, #12
 800cda0:	f04f 0400 	mov.w	r4, #0
 800cda4:	e01c      	b.n	800cde0 <UART_SetConfig+0xc48>
 800cda6:	f04f 030a 	mov.w	r3, #10
 800cdaa:	f04f 0400 	mov.w	r4, #0
 800cdae:	e017      	b.n	800cde0 <UART_SetConfig+0xc48>
 800cdb0:	f04f 0308 	mov.w	r3, #8
 800cdb4:	f04f 0400 	mov.w	r4, #0
 800cdb8:	e012      	b.n	800cde0 <UART_SetConfig+0xc48>
 800cdba:	f04f 0306 	mov.w	r3, #6
 800cdbe:	f04f 0400 	mov.w	r4, #0
 800cdc2:	e00d      	b.n	800cde0 <UART_SetConfig+0xc48>
 800cdc4:	f04f 0304 	mov.w	r3, #4
 800cdc8:	f04f 0400 	mov.w	r4, #0
 800cdcc:	e008      	b.n	800cde0 <UART_SetConfig+0xc48>
 800cdce:	f04f 0302 	mov.w	r3, #2
 800cdd2:	f04f 0400 	mov.w	r4, #0
 800cdd6:	e003      	b.n	800cde0 <UART_SetConfig+0xc48>
 800cdd8:	f04f 0301 	mov.w	r3, #1
 800cddc:	f04f 0400 	mov.w	r4, #0
 800cde0:	461a      	mov	r2, r3
 800cde2:	4623      	mov	r3, r4
 800cde4:	f7f3 fa78 	bl	80002d8 <__aeabi_uldivmod>
 800cde8:	4603      	mov	r3, r0
 800cdea:	460c      	mov	r4, r1
 800cdec:	4619      	mov	r1, r3
 800cdee:	4622      	mov	r2, r4
 800cdf0:	f04f 0300 	mov.w	r3, #0
 800cdf4:	f04f 0400 	mov.w	r4, #0
 800cdf8:	0214      	lsls	r4, r2, #8
 800cdfa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cdfe:	020b      	lsls	r3, r1, #8
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	6852      	ldr	r2, [r2, #4]
 800ce04:	0852      	lsrs	r2, r2, #1
 800ce06:	4611      	mov	r1, r2
 800ce08:	f04f 0200 	mov.w	r2, #0
 800ce0c:	eb13 0b01 	adds.w	fp, r3, r1
 800ce10:	eb44 0c02 	adc.w	ip, r4, r2
 800ce14:	4658      	mov	r0, fp
 800ce16:	4661      	mov	r1, ip
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	f04f 0400 	mov.w	r4, #0
 800ce20:	461a      	mov	r2, r3
 800ce22:	4623      	mov	r3, r4
 800ce24:	f7f3 fa58 	bl	80002d8 <__aeabi_uldivmod>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ce2e:	e389      	b.n	800d544 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce30:	f107 0318 	add.w	r3, r7, #24
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7fc fddf 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f04f 0100 	mov.w	r1, #0
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d067      	beq.n	800cf1a <UART_SetConfig+0xd82>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d05e      	beq.n	800cf10 <UART_SetConfig+0xd78>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d055      	beq.n	800cf06 <UART_SetConfig+0xd6e>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5e:	2b03      	cmp	r3, #3
 800ce60:	d04c      	beq.n	800cefc <UART_SetConfig+0xd64>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce66:	2b04      	cmp	r3, #4
 800ce68:	d043      	beq.n	800cef2 <UART_SetConfig+0xd5a>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6e:	2b05      	cmp	r3, #5
 800ce70:	d03a      	beq.n	800cee8 <UART_SetConfig+0xd50>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce76:	2b06      	cmp	r3, #6
 800ce78:	d031      	beq.n	800cede <UART_SetConfig+0xd46>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce7e:	2b07      	cmp	r3, #7
 800ce80:	d028      	beq.n	800ced4 <UART_SetConfig+0xd3c>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce86:	2b08      	cmp	r3, #8
 800ce88:	d01f      	beq.n	800ceca <UART_SetConfig+0xd32>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8e:	2b09      	cmp	r3, #9
 800ce90:	d016      	beq.n	800cec0 <UART_SetConfig+0xd28>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce96:	2b0a      	cmp	r3, #10
 800ce98:	d00d      	beq.n	800ceb6 <UART_SetConfig+0xd1e>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce9e:	2b0b      	cmp	r3, #11
 800cea0:	d104      	bne.n	800ceac <UART_SetConfig+0xd14>
 800cea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cea6:	f04f 0400 	mov.w	r4, #0
 800ceaa:	e03a      	b.n	800cf22 <UART_SetConfig+0xd8a>
 800ceac:	f04f 0301 	mov.w	r3, #1
 800ceb0:	f04f 0400 	mov.w	r4, #0
 800ceb4:	e035      	b.n	800cf22 <UART_SetConfig+0xd8a>
 800ceb6:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ceba:	f04f 0400 	mov.w	r4, #0
 800cebe:	e030      	b.n	800cf22 <UART_SetConfig+0xd8a>
 800cec0:	f04f 0340 	mov.w	r3, #64	; 0x40
 800cec4:	f04f 0400 	mov.w	r4, #0
 800cec8:	e02b      	b.n	800cf22 <UART_SetConfig+0xd8a>
 800ceca:	f04f 0320 	mov.w	r3, #32
 800cece:	f04f 0400 	mov.w	r4, #0
 800ced2:	e026      	b.n	800cf22 <UART_SetConfig+0xd8a>
 800ced4:	f04f 0310 	mov.w	r3, #16
 800ced8:	f04f 0400 	mov.w	r4, #0
 800cedc:	e021      	b.n	800cf22 <UART_SetConfig+0xd8a>
 800cede:	f04f 030c 	mov.w	r3, #12
 800cee2:	f04f 0400 	mov.w	r4, #0
 800cee6:	e01c      	b.n	800cf22 <UART_SetConfig+0xd8a>
 800cee8:	f04f 030a 	mov.w	r3, #10
 800ceec:	f04f 0400 	mov.w	r4, #0
 800cef0:	e017      	b.n	800cf22 <UART_SetConfig+0xd8a>
 800cef2:	f04f 0308 	mov.w	r3, #8
 800cef6:	f04f 0400 	mov.w	r4, #0
 800cefa:	e012      	b.n	800cf22 <UART_SetConfig+0xd8a>
 800cefc:	f04f 0306 	mov.w	r3, #6
 800cf00:	f04f 0400 	mov.w	r4, #0
 800cf04:	e00d      	b.n	800cf22 <UART_SetConfig+0xd8a>
 800cf06:	f04f 0304 	mov.w	r3, #4
 800cf0a:	f04f 0400 	mov.w	r4, #0
 800cf0e:	e008      	b.n	800cf22 <UART_SetConfig+0xd8a>
 800cf10:	f04f 0302 	mov.w	r3, #2
 800cf14:	f04f 0400 	mov.w	r4, #0
 800cf18:	e003      	b.n	800cf22 <UART_SetConfig+0xd8a>
 800cf1a:	f04f 0301 	mov.w	r3, #1
 800cf1e:	f04f 0400 	mov.w	r4, #0
 800cf22:	461a      	mov	r2, r3
 800cf24:	4623      	mov	r3, r4
 800cf26:	f7f3 f9d7 	bl	80002d8 <__aeabi_uldivmod>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	460c      	mov	r4, r1
 800cf2e:	4619      	mov	r1, r3
 800cf30:	4622      	mov	r2, r4
 800cf32:	f04f 0300 	mov.w	r3, #0
 800cf36:	f04f 0400 	mov.w	r4, #0
 800cf3a:	0214      	lsls	r4, r2, #8
 800cf3c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cf40:	020b      	lsls	r3, r1, #8
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	6852      	ldr	r2, [r2, #4]
 800cf46:	0852      	lsrs	r2, r2, #1
 800cf48:	4611      	mov	r1, r2
 800cf4a:	f04f 0200 	mov.w	r2, #0
 800cf4e:	eb13 0b01 	adds.w	fp, r3, r1
 800cf52:	eb44 0c02 	adc.w	ip, r4, r2
 800cf56:	4658      	mov	r0, fp
 800cf58:	4661      	mov	r1, ip
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	f04f 0400 	mov.w	r4, #0
 800cf62:	461a      	mov	r2, r3
 800cf64:	4623      	mov	r3, r4
 800cf66:	f7f3 f9b7 	bl	80002d8 <__aeabi_uldivmod>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	460c      	mov	r4, r1
 800cf6e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf70:	e2e8      	b.n	800d544 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf72:	f107 030c 	add.w	r3, r7, #12
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7fc fe8a 	bl	8009c90 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f04f 0100 	mov.w	r1, #0
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d067      	beq.n	800d05c <UART_SetConfig+0xec4>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d05e      	beq.n	800d052 <UART_SetConfig+0xeba>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	d055      	beq.n	800d048 <UART_SetConfig+0xeb0>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa0:	2b03      	cmp	r3, #3
 800cfa2:	d04c      	beq.n	800d03e <UART_SetConfig+0xea6>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa8:	2b04      	cmp	r3, #4
 800cfaa:	d043      	beq.n	800d034 <UART_SetConfig+0xe9c>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb0:	2b05      	cmp	r3, #5
 800cfb2:	d03a      	beq.n	800d02a <UART_SetConfig+0xe92>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb8:	2b06      	cmp	r3, #6
 800cfba:	d031      	beq.n	800d020 <UART_SetConfig+0xe88>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc0:	2b07      	cmp	r3, #7
 800cfc2:	d028      	beq.n	800d016 <UART_SetConfig+0xe7e>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc8:	2b08      	cmp	r3, #8
 800cfca:	d01f      	beq.n	800d00c <UART_SetConfig+0xe74>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd0:	2b09      	cmp	r3, #9
 800cfd2:	d016      	beq.n	800d002 <UART_SetConfig+0xe6a>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd8:	2b0a      	cmp	r3, #10
 800cfda:	d00d      	beq.n	800cff8 <UART_SetConfig+0xe60>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe0:	2b0b      	cmp	r3, #11
 800cfe2:	d104      	bne.n	800cfee <UART_SetConfig+0xe56>
 800cfe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfe8:	f04f 0400 	mov.w	r4, #0
 800cfec:	e03a      	b.n	800d064 <UART_SetConfig+0xecc>
 800cfee:	f04f 0301 	mov.w	r3, #1
 800cff2:	f04f 0400 	mov.w	r4, #0
 800cff6:	e035      	b.n	800d064 <UART_SetConfig+0xecc>
 800cff8:	f04f 0380 	mov.w	r3, #128	; 0x80
 800cffc:	f04f 0400 	mov.w	r4, #0
 800d000:	e030      	b.n	800d064 <UART_SetConfig+0xecc>
 800d002:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d006:	f04f 0400 	mov.w	r4, #0
 800d00a:	e02b      	b.n	800d064 <UART_SetConfig+0xecc>
 800d00c:	f04f 0320 	mov.w	r3, #32
 800d010:	f04f 0400 	mov.w	r4, #0
 800d014:	e026      	b.n	800d064 <UART_SetConfig+0xecc>
 800d016:	f04f 0310 	mov.w	r3, #16
 800d01a:	f04f 0400 	mov.w	r4, #0
 800d01e:	e021      	b.n	800d064 <UART_SetConfig+0xecc>
 800d020:	f04f 030c 	mov.w	r3, #12
 800d024:	f04f 0400 	mov.w	r4, #0
 800d028:	e01c      	b.n	800d064 <UART_SetConfig+0xecc>
 800d02a:	f04f 030a 	mov.w	r3, #10
 800d02e:	f04f 0400 	mov.w	r4, #0
 800d032:	e017      	b.n	800d064 <UART_SetConfig+0xecc>
 800d034:	f04f 0308 	mov.w	r3, #8
 800d038:	f04f 0400 	mov.w	r4, #0
 800d03c:	e012      	b.n	800d064 <UART_SetConfig+0xecc>
 800d03e:	f04f 0306 	mov.w	r3, #6
 800d042:	f04f 0400 	mov.w	r4, #0
 800d046:	e00d      	b.n	800d064 <UART_SetConfig+0xecc>
 800d048:	f04f 0304 	mov.w	r3, #4
 800d04c:	f04f 0400 	mov.w	r4, #0
 800d050:	e008      	b.n	800d064 <UART_SetConfig+0xecc>
 800d052:	f04f 0302 	mov.w	r3, #2
 800d056:	f04f 0400 	mov.w	r4, #0
 800d05a:	e003      	b.n	800d064 <UART_SetConfig+0xecc>
 800d05c:	f04f 0301 	mov.w	r3, #1
 800d060:	f04f 0400 	mov.w	r4, #0
 800d064:	461a      	mov	r2, r3
 800d066:	4623      	mov	r3, r4
 800d068:	f7f3 f936 	bl	80002d8 <__aeabi_uldivmod>
 800d06c:	4603      	mov	r3, r0
 800d06e:	460c      	mov	r4, r1
 800d070:	4619      	mov	r1, r3
 800d072:	4622      	mov	r2, r4
 800d074:	f04f 0300 	mov.w	r3, #0
 800d078:	f04f 0400 	mov.w	r4, #0
 800d07c:	0214      	lsls	r4, r2, #8
 800d07e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d082:	020b      	lsls	r3, r1, #8
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	6852      	ldr	r2, [r2, #4]
 800d088:	0852      	lsrs	r2, r2, #1
 800d08a:	4611      	mov	r1, r2
 800d08c:	f04f 0200 	mov.w	r2, #0
 800d090:	eb13 0b01 	adds.w	fp, r3, r1
 800d094:	eb44 0c02 	adc.w	ip, r4, r2
 800d098:	4658      	mov	r0, fp
 800d09a:	4661      	mov	r1, ip
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	f04f 0400 	mov.w	r4, #0
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	4623      	mov	r3, r4
 800d0a8:	f7f3 f916 	bl	80002d8 <__aeabi_uldivmod>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d0b2:	e247      	b.n	800d544 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0b4:	4b96      	ldr	r3, [pc, #600]	; (800d310 <UART_SetConfig+0x1178>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f003 0320 	and.w	r3, r3, #32
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f000 80a3 	beq.w	800d208 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0c2:	4b93      	ldr	r3, [pc, #588]	; (800d310 <UART_SetConfig+0x1178>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	08db      	lsrs	r3, r3, #3
 800d0c8:	f003 0303 	and.w	r3, r3, #3
 800d0cc:	4a91      	ldr	r2, [pc, #580]	; (800d314 <UART_SetConfig+0x117c>)
 800d0ce:	fa22 f303 	lsr.w	r3, r2, r3
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f04f 0100 	mov.w	r1, #0
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d067      	beq.n	800d1b0 <UART_SetConfig+0x1018>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d05e      	beq.n	800d1a6 <UART_SetConfig+0x100e>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ec:	2b02      	cmp	r3, #2
 800d0ee:	d055      	beq.n	800d19c <UART_SetConfig+0x1004>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f4:	2b03      	cmp	r3, #3
 800d0f6:	d04c      	beq.n	800d192 <UART_SetConfig+0xffa>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fc:	2b04      	cmp	r3, #4
 800d0fe:	d043      	beq.n	800d188 <UART_SetConfig+0xff0>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d104:	2b05      	cmp	r3, #5
 800d106:	d03a      	beq.n	800d17e <UART_SetConfig+0xfe6>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10c:	2b06      	cmp	r3, #6
 800d10e:	d031      	beq.n	800d174 <UART_SetConfig+0xfdc>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d114:	2b07      	cmp	r3, #7
 800d116:	d028      	beq.n	800d16a <UART_SetConfig+0xfd2>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d11c:	2b08      	cmp	r3, #8
 800d11e:	d01f      	beq.n	800d160 <UART_SetConfig+0xfc8>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d124:	2b09      	cmp	r3, #9
 800d126:	d016      	beq.n	800d156 <UART_SetConfig+0xfbe>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12c:	2b0a      	cmp	r3, #10
 800d12e:	d00d      	beq.n	800d14c <UART_SetConfig+0xfb4>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d134:	2b0b      	cmp	r3, #11
 800d136:	d104      	bne.n	800d142 <UART_SetConfig+0xfaa>
 800d138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d13c:	f04f 0400 	mov.w	r4, #0
 800d140:	e03a      	b.n	800d1b8 <UART_SetConfig+0x1020>
 800d142:	f04f 0301 	mov.w	r3, #1
 800d146:	f04f 0400 	mov.w	r4, #0
 800d14a:	e035      	b.n	800d1b8 <UART_SetConfig+0x1020>
 800d14c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d150:	f04f 0400 	mov.w	r4, #0
 800d154:	e030      	b.n	800d1b8 <UART_SetConfig+0x1020>
 800d156:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d15a:	f04f 0400 	mov.w	r4, #0
 800d15e:	e02b      	b.n	800d1b8 <UART_SetConfig+0x1020>
 800d160:	f04f 0320 	mov.w	r3, #32
 800d164:	f04f 0400 	mov.w	r4, #0
 800d168:	e026      	b.n	800d1b8 <UART_SetConfig+0x1020>
 800d16a:	f04f 0310 	mov.w	r3, #16
 800d16e:	f04f 0400 	mov.w	r4, #0
 800d172:	e021      	b.n	800d1b8 <UART_SetConfig+0x1020>
 800d174:	f04f 030c 	mov.w	r3, #12
 800d178:	f04f 0400 	mov.w	r4, #0
 800d17c:	e01c      	b.n	800d1b8 <UART_SetConfig+0x1020>
 800d17e:	f04f 030a 	mov.w	r3, #10
 800d182:	f04f 0400 	mov.w	r4, #0
 800d186:	e017      	b.n	800d1b8 <UART_SetConfig+0x1020>
 800d188:	f04f 0308 	mov.w	r3, #8
 800d18c:	f04f 0400 	mov.w	r4, #0
 800d190:	e012      	b.n	800d1b8 <UART_SetConfig+0x1020>
 800d192:	f04f 0306 	mov.w	r3, #6
 800d196:	f04f 0400 	mov.w	r4, #0
 800d19a:	e00d      	b.n	800d1b8 <UART_SetConfig+0x1020>
 800d19c:	f04f 0304 	mov.w	r3, #4
 800d1a0:	f04f 0400 	mov.w	r4, #0
 800d1a4:	e008      	b.n	800d1b8 <UART_SetConfig+0x1020>
 800d1a6:	f04f 0302 	mov.w	r3, #2
 800d1aa:	f04f 0400 	mov.w	r4, #0
 800d1ae:	e003      	b.n	800d1b8 <UART_SetConfig+0x1020>
 800d1b0:	f04f 0301 	mov.w	r3, #1
 800d1b4:	f04f 0400 	mov.w	r4, #0
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	4623      	mov	r3, r4
 800d1bc:	f7f3 f88c 	bl	80002d8 <__aeabi_uldivmod>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	460c      	mov	r4, r1
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	4622      	mov	r2, r4
 800d1c8:	f04f 0300 	mov.w	r3, #0
 800d1cc:	f04f 0400 	mov.w	r4, #0
 800d1d0:	0214      	lsls	r4, r2, #8
 800d1d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d1d6:	020b      	lsls	r3, r1, #8
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	6852      	ldr	r2, [r2, #4]
 800d1dc:	0852      	lsrs	r2, r2, #1
 800d1de:	4611      	mov	r1, r2
 800d1e0:	f04f 0200 	mov.w	r2, #0
 800d1e4:	eb13 0b01 	adds.w	fp, r3, r1
 800d1e8:	eb44 0c02 	adc.w	ip, r4, r2
 800d1ec:	4658      	mov	r0, fp
 800d1ee:	4661      	mov	r1, ip
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	f04f 0400 	mov.w	r4, #0
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	4623      	mov	r3, r4
 800d1fc:	f7f3 f86c 	bl	80002d8 <__aeabi_uldivmod>
 800d200:	4603      	mov	r3, r0
 800d202:	460c      	mov	r4, r1
 800d204:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800d206:	e19d      	b.n	800d544 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d05b      	beq.n	800d2c8 <UART_SetConfig+0x1130>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d214:	2b01      	cmp	r3, #1
 800d216:	d053      	beq.n	800d2c0 <UART_SetConfig+0x1128>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d04b      	beq.n	800d2b8 <UART_SetConfig+0x1120>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d224:	2b03      	cmp	r3, #3
 800d226:	d043      	beq.n	800d2b0 <UART_SetConfig+0x1118>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22c:	2b04      	cmp	r3, #4
 800d22e:	d03b      	beq.n	800d2a8 <UART_SetConfig+0x1110>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d234:	2b05      	cmp	r3, #5
 800d236:	d033      	beq.n	800d2a0 <UART_SetConfig+0x1108>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23c:	2b06      	cmp	r3, #6
 800d23e:	d02b      	beq.n	800d298 <UART_SetConfig+0x1100>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d244:	2b07      	cmp	r3, #7
 800d246:	d023      	beq.n	800d290 <UART_SetConfig+0x10f8>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24c:	2b08      	cmp	r3, #8
 800d24e:	d01b      	beq.n	800d288 <UART_SetConfig+0x10f0>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d254:	2b09      	cmp	r3, #9
 800d256:	d013      	beq.n	800d280 <UART_SetConfig+0x10e8>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25c:	2b0a      	cmp	r3, #10
 800d25e:	d00b      	beq.n	800d278 <UART_SetConfig+0x10e0>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d264:	2b0b      	cmp	r3, #11
 800d266:	d103      	bne.n	800d270 <UART_SetConfig+0x10d8>
 800d268:	4b2a      	ldr	r3, [pc, #168]	; (800d314 <UART_SetConfig+0x117c>)
 800d26a:	f04f 0400 	mov.w	r4, #0
 800d26e:	e02e      	b.n	800d2ce <UART_SetConfig+0x1136>
 800d270:	4b29      	ldr	r3, [pc, #164]	; (800d318 <UART_SetConfig+0x1180>)
 800d272:	f04f 0403 	mov.w	r4, #3
 800d276:	e02a      	b.n	800d2ce <UART_SetConfig+0x1136>
 800d278:	4b28      	ldr	r3, [pc, #160]	; (800d31c <UART_SetConfig+0x1184>)
 800d27a:	f04f 0400 	mov.w	r4, #0
 800d27e:	e026      	b.n	800d2ce <UART_SetConfig+0x1136>
 800d280:	4b27      	ldr	r3, [pc, #156]	; (800d320 <UART_SetConfig+0x1188>)
 800d282:	f04f 0400 	mov.w	r4, #0
 800d286:	e022      	b.n	800d2ce <UART_SetConfig+0x1136>
 800d288:	4b26      	ldr	r3, [pc, #152]	; (800d324 <UART_SetConfig+0x118c>)
 800d28a:	f04f 0400 	mov.w	r4, #0
 800d28e:	e01e      	b.n	800d2ce <UART_SetConfig+0x1136>
 800d290:	4b25      	ldr	r3, [pc, #148]	; (800d328 <UART_SetConfig+0x1190>)
 800d292:	f04f 0400 	mov.w	r4, #0
 800d296:	e01a      	b.n	800d2ce <UART_SetConfig+0x1136>
 800d298:	a419      	add	r4, pc, #100	; (adr r4, 800d300 <UART_SetConfig+0x1168>)
 800d29a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d29e:	e016      	b.n	800d2ce <UART_SetConfig+0x1136>
 800d2a0:	4b22      	ldr	r3, [pc, #136]	; (800d32c <UART_SetConfig+0x1194>)
 800d2a2:	f04f 0400 	mov.w	r4, #0
 800d2a6:	e012      	b.n	800d2ce <UART_SetConfig+0x1136>
 800d2a8:	4b21      	ldr	r3, [pc, #132]	; (800d330 <UART_SetConfig+0x1198>)
 800d2aa:	f04f 0400 	mov.w	r4, #0
 800d2ae:	e00e      	b.n	800d2ce <UART_SetConfig+0x1136>
 800d2b0:	a415      	add	r4, pc, #84	; (adr r4, 800d308 <UART_SetConfig+0x1170>)
 800d2b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d2b6:	e00a      	b.n	800d2ce <UART_SetConfig+0x1136>
 800d2b8:	4b1e      	ldr	r3, [pc, #120]	; (800d334 <UART_SetConfig+0x119c>)
 800d2ba:	f04f 0400 	mov.w	r4, #0
 800d2be:	e006      	b.n	800d2ce <UART_SetConfig+0x1136>
 800d2c0:	4b1d      	ldr	r3, [pc, #116]	; (800d338 <UART_SetConfig+0x11a0>)
 800d2c2:	f04f 0401 	mov.w	r4, #1
 800d2c6:	e002      	b.n	800d2ce <UART_SetConfig+0x1136>
 800d2c8:	4b13      	ldr	r3, [pc, #76]	; (800d318 <UART_SetConfig+0x1180>)
 800d2ca:	f04f 0403 	mov.w	r4, #3
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	6852      	ldr	r2, [r2, #4]
 800d2d2:	0852      	lsrs	r2, r2, #1
 800d2d4:	4611      	mov	r1, r2
 800d2d6:	f04f 0200 	mov.w	r2, #0
 800d2da:	eb13 0b01 	adds.w	fp, r3, r1
 800d2de:	eb44 0c02 	adc.w	ip, r4, r2
 800d2e2:	4658      	mov	r0, fp
 800d2e4:	4661      	mov	r1, ip
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	f04f 0400 	mov.w	r4, #0
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	4623      	mov	r3, r4
 800d2f2:	f7f2 fff1 	bl	80002d8 <__aeabi_uldivmod>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d2fc:	e122      	b.n	800d544 <UART_SetConfig+0x13ac>
 800d2fe:	bf00      	nop
 800d300:	51615500 	.word	0x51615500
 800d304:	00000000 	.word	0x00000000
 800d308:	a2c2aa00 	.word	0xa2c2aa00
 800d30c:	00000000 	.word	0x00000000
 800d310:	58024400 	.word	0x58024400
 800d314:	03d09000 	.word	0x03d09000
 800d318:	d0900000 	.word	0xd0900000
 800d31c:	07a12000 	.word	0x07a12000
 800d320:	0f424000 	.word	0x0f424000
 800d324:	1e848000 	.word	0x1e848000
 800d328:	3d090000 	.word	0x3d090000
 800d32c:	61a80000 	.word	0x61a80000
 800d330:	7a120000 	.word	0x7a120000
 800d334:	f4240000 	.word	0xf4240000
 800d338:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d340:	2b00      	cmp	r3, #0
 800d342:	d05b      	beq.n	800d3fc <UART_SetConfig+0x1264>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d053      	beq.n	800d3f4 <UART_SetConfig+0x125c>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d350:	2b02      	cmp	r3, #2
 800d352:	d04b      	beq.n	800d3ec <UART_SetConfig+0x1254>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d358:	2b03      	cmp	r3, #3
 800d35a:	d043      	beq.n	800d3e4 <UART_SetConfig+0x124c>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d360:	2b04      	cmp	r3, #4
 800d362:	d03b      	beq.n	800d3dc <UART_SetConfig+0x1244>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d368:	2b05      	cmp	r3, #5
 800d36a:	d033      	beq.n	800d3d4 <UART_SetConfig+0x123c>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d370:	2b06      	cmp	r3, #6
 800d372:	d02b      	beq.n	800d3cc <UART_SetConfig+0x1234>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d378:	2b07      	cmp	r3, #7
 800d37a:	d023      	beq.n	800d3c4 <UART_SetConfig+0x122c>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d380:	2b08      	cmp	r3, #8
 800d382:	d01b      	beq.n	800d3bc <UART_SetConfig+0x1224>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d388:	2b09      	cmp	r3, #9
 800d38a:	d013      	beq.n	800d3b4 <UART_SetConfig+0x121c>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d390:	2b0a      	cmp	r3, #10
 800d392:	d00b      	beq.n	800d3ac <UART_SetConfig+0x1214>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d398:	2b0b      	cmp	r3, #11
 800d39a:	d103      	bne.n	800d3a4 <UART_SetConfig+0x120c>
 800d39c:	4bc0      	ldr	r3, [pc, #768]	; (800d6a0 <UART_SetConfig+0x1508>)
 800d39e:	f04f 0400 	mov.w	r4, #0
 800d3a2:	e02e      	b.n	800d402 <UART_SetConfig+0x126a>
 800d3a4:	4bbf      	ldr	r3, [pc, #764]	; (800d6a4 <UART_SetConfig+0x150c>)
 800d3a6:	f04f 0400 	mov.w	r4, #0
 800d3aa:	e02a      	b.n	800d402 <UART_SetConfig+0x126a>
 800d3ac:	4bbe      	ldr	r3, [pc, #760]	; (800d6a8 <UART_SetConfig+0x1510>)
 800d3ae:	f04f 0400 	mov.w	r4, #0
 800d3b2:	e026      	b.n	800d402 <UART_SetConfig+0x126a>
 800d3b4:	4bbd      	ldr	r3, [pc, #756]	; (800d6ac <UART_SetConfig+0x1514>)
 800d3b6:	f04f 0400 	mov.w	r4, #0
 800d3ba:	e022      	b.n	800d402 <UART_SetConfig+0x126a>
 800d3bc:	4bbc      	ldr	r3, [pc, #752]	; (800d6b0 <UART_SetConfig+0x1518>)
 800d3be:	f04f 0400 	mov.w	r4, #0
 800d3c2:	e01e      	b.n	800d402 <UART_SetConfig+0x126a>
 800d3c4:	4bbb      	ldr	r3, [pc, #748]	; (800d6b4 <UART_SetConfig+0x151c>)
 800d3c6:	f04f 0400 	mov.w	r4, #0
 800d3ca:	e01a      	b.n	800d402 <UART_SetConfig+0x126a>
 800d3cc:	a4b0      	add	r4, pc, #704	; (adr r4, 800d690 <UART_SetConfig+0x14f8>)
 800d3ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d3d2:	e016      	b.n	800d402 <UART_SetConfig+0x126a>
 800d3d4:	4bb8      	ldr	r3, [pc, #736]	; (800d6b8 <UART_SetConfig+0x1520>)
 800d3d6:	f04f 0400 	mov.w	r4, #0
 800d3da:	e012      	b.n	800d402 <UART_SetConfig+0x126a>
 800d3dc:	4bb7      	ldr	r3, [pc, #732]	; (800d6bc <UART_SetConfig+0x1524>)
 800d3de:	f04f 0400 	mov.w	r4, #0
 800d3e2:	e00e      	b.n	800d402 <UART_SetConfig+0x126a>
 800d3e4:	a4ac      	add	r4, pc, #688	; (adr r4, 800d698 <UART_SetConfig+0x1500>)
 800d3e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d3ea:	e00a      	b.n	800d402 <UART_SetConfig+0x126a>
 800d3ec:	4bb4      	ldr	r3, [pc, #720]	; (800d6c0 <UART_SetConfig+0x1528>)
 800d3ee:	f04f 0400 	mov.w	r4, #0
 800d3f2:	e006      	b.n	800d402 <UART_SetConfig+0x126a>
 800d3f4:	4bb3      	ldr	r3, [pc, #716]	; (800d6c4 <UART_SetConfig+0x152c>)
 800d3f6:	f04f 0400 	mov.w	r4, #0
 800d3fa:	e002      	b.n	800d402 <UART_SetConfig+0x126a>
 800d3fc:	4ba9      	ldr	r3, [pc, #676]	; (800d6a4 <UART_SetConfig+0x150c>)
 800d3fe:	f04f 0400 	mov.w	r4, #0
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	6852      	ldr	r2, [r2, #4]
 800d406:	0852      	lsrs	r2, r2, #1
 800d408:	4611      	mov	r1, r2
 800d40a:	f04f 0200 	mov.w	r2, #0
 800d40e:	eb13 0b01 	adds.w	fp, r3, r1
 800d412:	eb44 0c02 	adc.w	ip, r4, r2
 800d416:	4658      	mov	r0, fp
 800d418:	4661      	mov	r1, ip
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	f04f 0400 	mov.w	r4, #0
 800d422:	461a      	mov	r2, r3
 800d424:	4623      	mov	r3, r4
 800d426:	f7f2 ff57 	bl	80002d8 <__aeabi_uldivmod>
 800d42a:	4603      	mov	r3, r0
 800d42c:	460c      	mov	r4, r1
 800d42e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d430:	e088      	b.n	800d544 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d436:	2b00      	cmp	r3, #0
 800d438:	d064      	beq.n	800d504 <UART_SetConfig+0x136c>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d05b      	beq.n	800d4fa <UART_SetConfig+0x1362>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d446:	2b02      	cmp	r3, #2
 800d448:	d052      	beq.n	800d4f0 <UART_SetConfig+0x1358>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d44e:	2b03      	cmp	r3, #3
 800d450:	d04a      	beq.n	800d4e8 <UART_SetConfig+0x1350>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d456:	2b04      	cmp	r3, #4
 800d458:	d041      	beq.n	800d4de <UART_SetConfig+0x1346>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45e:	2b05      	cmp	r3, #5
 800d460:	d039      	beq.n	800d4d6 <UART_SetConfig+0x133e>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d466:	2b06      	cmp	r3, #6
 800d468:	d031      	beq.n	800d4ce <UART_SetConfig+0x1336>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46e:	2b07      	cmp	r3, #7
 800d470:	d028      	beq.n	800d4c4 <UART_SetConfig+0x132c>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d476:	2b08      	cmp	r3, #8
 800d478:	d01f      	beq.n	800d4ba <UART_SetConfig+0x1322>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47e:	2b09      	cmp	r3, #9
 800d480:	d016      	beq.n	800d4b0 <UART_SetConfig+0x1318>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d486:	2b0a      	cmp	r3, #10
 800d488:	d00d      	beq.n	800d4a6 <UART_SetConfig+0x130e>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48e:	2b0b      	cmp	r3, #11
 800d490:	d104      	bne.n	800d49c <UART_SetConfig+0x1304>
 800d492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d496:	f04f 0400 	mov.w	r4, #0
 800d49a:	e037      	b.n	800d50c <UART_SetConfig+0x1374>
 800d49c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d4a0:	f04f 0400 	mov.w	r4, #0
 800d4a4:	e032      	b.n	800d50c <UART_SetConfig+0x1374>
 800d4a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d4aa:	f04f 0400 	mov.w	r4, #0
 800d4ae:	e02d      	b.n	800d50c <UART_SetConfig+0x1374>
 800d4b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d4b4:	f04f 0400 	mov.w	r4, #0
 800d4b8:	e028      	b.n	800d50c <UART_SetConfig+0x1374>
 800d4ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d4be:	f04f 0400 	mov.w	r4, #0
 800d4c2:	e023      	b.n	800d50c <UART_SetConfig+0x1374>
 800d4c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d4c8:	f04f 0400 	mov.w	r4, #0
 800d4cc:	e01e      	b.n	800d50c <UART_SetConfig+0x1374>
 800d4ce:	4b7e      	ldr	r3, [pc, #504]	; (800d6c8 <UART_SetConfig+0x1530>)
 800d4d0:	f04f 0400 	mov.w	r4, #0
 800d4d4:	e01a      	b.n	800d50c <UART_SetConfig+0x1374>
 800d4d6:	4b7d      	ldr	r3, [pc, #500]	; (800d6cc <UART_SetConfig+0x1534>)
 800d4d8:	f04f 0400 	mov.w	r4, #0
 800d4dc:	e016      	b.n	800d50c <UART_SetConfig+0x1374>
 800d4de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d4e2:	f04f 0400 	mov.w	r4, #0
 800d4e6:	e011      	b.n	800d50c <UART_SetConfig+0x1374>
 800d4e8:	4b79      	ldr	r3, [pc, #484]	; (800d6d0 <UART_SetConfig+0x1538>)
 800d4ea:	f04f 0400 	mov.w	r4, #0
 800d4ee:	e00d      	b.n	800d50c <UART_SetConfig+0x1374>
 800d4f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d4f4:	f04f 0400 	mov.w	r4, #0
 800d4f8:	e008      	b.n	800d50c <UART_SetConfig+0x1374>
 800d4fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d4fe:	f04f 0400 	mov.w	r4, #0
 800d502:	e003      	b.n	800d50c <UART_SetConfig+0x1374>
 800d504:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d508:	f04f 0400 	mov.w	r4, #0
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	6852      	ldr	r2, [r2, #4]
 800d510:	0852      	lsrs	r2, r2, #1
 800d512:	4611      	mov	r1, r2
 800d514:	f04f 0200 	mov.w	r2, #0
 800d518:	eb13 0b01 	adds.w	fp, r3, r1
 800d51c:	eb44 0c02 	adc.w	ip, r4, r2
 800d520:	4658      	mov	r0, fp
 800d522:	4661      	mov	r1, ip
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	f04f 0400 	mov.w	r4, #0
 800d52c:	461a      	mov	r2, r3
 800d52e:	4623      	mov	r3, r4
 800d530:	f7f2 fed2 	bl	80002d8 <__aeabi_uldivmod>
 800d534:	4603      	mov	r3, r0
 800d536:	460c      	mov	r4, r1
 800d538:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d53a:	e003      	b.n	800d544 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800d53c:	2301      	movs	r3, #1
 800d53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800d542:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d54a:	d309      	bcc.n	800d560 <UART_SetConfig+0x13c8>
 800d54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d54e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d552:	d205      	bcs.n	800d560 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d55a:	60da      	str	r2, [r3, #12]
 800d55c:	f000 bf85 	b.w	800e46a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800d560:	2301      	movs	r3, #1
 800d562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d566:	f000 bf80 	b.w	800e46a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	69db      	ldr	r3, [r3, #28]
 800d56e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d572:	f040 83da 	bne.w	800dd2a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800d576:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d57a:	2b40      	cmp	r3, #64	; 0x40
 800d57c:	f200 83b3 	bhi.w	800dce6 <UART_SetConfig+0x1b4e>
 800d580:	a201      	add	r2, pc, #4	; (adr r2, 800d588 <UART_SetConfig+0x13f0>)
 800d582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d586:	bf00      	nop
 800d588:	0800d6d5 	.word	0x0800d6d5
 800d58c:	0800d78d 	.word	0x0800d78d
 800d590:	0800dce7 	.word	0x0800dce7
 800d594:	0800dce7 	.word	0x0800dce7
 800d598:	0800d845 	.word	0x0800d845
 800d59c:	0800dce7 	.word	0x0800dce7
 800d5a0:	0800dce7 	.word	0x0800dce7
 800d5a4:	0800dce7 	.word	0x0800dce7
 800d5a8:	0800d901 	.word	0x0800d901
 800d5ac:	0800dce7 	.word	0x0800dce7
 800d5b0:	0800dce7 	.word	0x0800dce7
 800d5b4:	0800dce7 	.word	0x0800dce7
 800d5b8:	0800dce7 	.word	0x0800dce7
 800d5bc:	0800dce7 	.word	0x0800dce7
 800d5c0:	0800dce7 	.word	0x0800dce7
 800d5c4:	0800dce7 	.word	0x0800dce7
 800d5c8:	0800d9bd 	.word	0x0800d9bd
 800d5cc:	0800dce7 	.word	0x0800dce7
 800d5d0:	0800dce7 	.word	0x0800dce7
 800d5d4:	0800dce7 	.word	0x0800dce7
 800d5d8:	0800dce7 	.word	0x0800dce7
 800d5dc:	0800dce7 	.word	0x0800dce7
 800d5e0:	0800dce7 	.word	0x0800dce7
 800d5e4:	0800dce7 	.word	0x0800dce7
 800d5e8:	0800dce7 	.word	0x0800dce7
 800d5ec:	0800dce7 	.word	0x0800dce7
 800d5f0:	0800dce7 	.word	0x0800dce7
 800d5f4:	0800dce7 	.word	0x0800dce7
 800d5f8:	0800dce7 	.word	0x0800dce7
 800d5fc:	0800dce7 	.word	0x0800dce7
 800d600:	0800dce7 	.word	0x0800dce7
 800d604:	0800dce7 	.word	0x0800dce7
 800d608:	0800db2f 	.word	0x0800db2f
 800d60c:	0800dce7 	.word	0x0800dce7
 800d610:	0800dce7 	.word	0x0800dce7
 800d614:	0800dce7 	.word	0x0800dce7
 800d618:	0800dce7 	.word	0x0800dce7
 800d61c:	0800dce7 	.word	0x0800dce7
 800d620:	0800dce7 	.word	0x0800dce7
 800d624:	0800dce7 	.word	0x0800dce7
 800d628:	0800dce7 	.word	0x0800dce7
 800d62c:	0800dce7 	.word	0x0800dce7
 800d630:	0800dce7 	.word	0x0800dce7
 800d634:	0800dce7 	.word	0x0800dce7
 800d638:	0800dce7 	.word	0x0800dce7
 800d63c:	0800dce7 	.word	0x0800dce7
 800d640:	0800dce7 	.word	0x0800dce7
 800d644:	0800dce7 	.word	0x0800dce7
 800d648:	0800dce7 	.word	0x0800dce7
 800d64c:	0800dce7 	.word	0x0800dce7
 800d650:	0800dce7 	.word	0x0800dce7
 800d654:	0800dce7 	.word	0x0800dce7
 800d658:	0800dce7 	.word	0x0800dce7
 800d65c:	0800dce7 	.word	0x0800dce7
 800d660:	0800dce7 	.word	0x0800dce7
 800d664:	0800dce7 	.word	0x0800dce7
 800d668:	0800dce7 	.word	0x0800dce7
 800d66c:	0800dce7 	.word	0x0800dce7
 800d670:	0800dce7 	.word	0x0800dce7
 800d674:	0800dce7 	.word	0x0800dce7
 800d678:	0800dce7 	.word	0x0800dce7
 800d67c:	0800dce7 	.word	0x0800dce7
 800d680:	0800dce7 	.word	0x0800dce7
 800d684:	0800dce7 	.word	0x0800dce7
 800d688:	0800dc25 	.word	0x0800dc25
 800d68c:	f3af 8000 	nop.w
 800d690:	05161500 	.word	0x05161500
 800d694:	00000000 	.word	0x00000000
 800d698:	0a2c2a00 	.word	0x0a2c2a00
 800d69c:	00000000 	.word	0x00000000
 800d6a0:	003d0900 	.word	0x003d0900
 800d6a4:	3d090000 	.word	0x3d090000
 800d6a8:	007a1200 	.word	0x007a1200
 800d6ac:	00f42400 	.word	0x00f42400
 800d6b0:	01e84800 	.word	0x01e84800
 800d6b4:	03d09000 	.word	0x03d09000
 800d6b8:	061a8000 	.word	0x061a8000
 800d6bc:	07a12000 	.word	0x07a12000
 800d6c0:	0f424000 	.word	0x0f424000
 800d6c4:	1e848000 	.word	0x1e848000
 800d6c8:	000aaa00 	.word	0x000aaa00
 800d6cc:	000ccc00 	.word	0x000ccc00
 800d6d0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6d4:	f7fa fff8 	bl	80086c8 <HAL_RCC_GetPCLK1Freq>
 800d6d8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d044      	beq.n	800d76c <UART_SetConfig+0x15d4>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d03e      	beq.n	800d768 <UART_SetConfig+0x15d0>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ee:	2b02      	cmp	r3, #2
 800d6f0:	d038      	beq.n	800d764 <UART_SetConfig+0x15cc>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f6:	2b03      	cmp	r3, #3
 800d6f8:	d032      	beq.n	800d760 <UART_SetConfig+0x15c8>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fe:	2b04      	cmp	r3, #4
 800d700:	d02c      	beq.n	800d75c <UART_SetConfig+0x15c4>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d706:	2b05      	cmp	r3, #5
 800d708:	d026      	beq.n	800d758 <UART_SetConfig+0x15c0>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70e:	2b06      	cmp	r3, #6
 800d710:	d020      	beq.n	800d754 <UART_SetConfig+0x15bc>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d716:	2b07      	cmp	r3, #7
 800d718:	d01a      	beq.n	800d750 <UART_SetConfig+0x15b8>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d71e:	2b08      	cmp	r3, #8
 800d720:	d014      	beq.n	800d74c <UART_SetConfig+0x15b4>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d726:	2b09      	cmp	r3, #9
 800d728:	d00e      	beq.n	800d748 <UART_SetConfig+0x15b0>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72e:	2b0a      	cmp	r3, #10
 800d730:	d008      	beq.n	800d744 <UART_SetConfig+0x15ac>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d736:	2b0b      	cmp	r3, #11
 800d738:	d102      	bne.n	800d740 <UART_SetConfig+0x15a8>
 800d73a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d73e:	e016      	b.n	800d76e <UART_SetConfig+0x15d6>
 800d740:	2301      	movs	r3, #1
 800d742:	e014      	b.n	800d76e <UART_SetConfig+0x15d6>
 800d744:	2380      	movs	r3, #128	; 0x80
 800d746:	e012      	b.n	800d76e <UART_SetConfig+0x15d6>
 800d748:	2340      	movs	r3, #64	; 0x40
 800d74a:	e010      	b.n	800d76e <UART_SetConfig+0x15d6>
 800d74c:	2320      	movs	r3, #32
 800d74e:	e00e      	b.n	800d76e <UART_SetConfig+0x15d6>
 800d750:	2310      	movs	r3, #16
 800d752:	e00c      	b.n	800d76e <UART_SetConfig+0x15d6>
 800d754:	230c      	movs	r3, #12
 800d756:	e00a      	b.n	800d76e <UART_SetConfig+0x15d6>
 800d758:	230a      	movs	r3, #10
 800d75a:	e008      	b.n	800d76e <UART_SetConfig+0x15d6>
 800d75c:	2308      	movs	r3, #8
 800d75e:	e006      	b.n	800d76e <UART_SetConfig+0x15d6>
 800d760:	2306      	movs	r3, #6
 800d762:	e004      	b.n	800d76e <UART_SetConfig+0x15d6>
 800d764:	2304      	movs	r3, #4
 800d766:	e002      	b.n	800d76e <UART_SetConfig+0x15d6>
 800d768:	2302      	movs	r3, #2
 800d76a:	e000      	b.n	800d76e <UART_SetConfig+0x15d6>
 800d76c:	2301      	movs	r3, #1
 800d76e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d770:	fbb2 f3f3 	udiv	r3, r2, r3
 800d774:	005a      	lsls	r2, r3, #1
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	085b      	lsrs	r3, r3, #1
 800d77c:	441a      	add	r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	fbb2 f3f3 	udiv	r3, r2, r3
 800d786:	b29b      	uxth	r3, r3
 800d788:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d78a:	e2b0      	b.n	800dcee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d78c:	f7fa ffb2 	bl	80086f4 <HAL_RCC_GetPCLK2Freq>
 800d790:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d796:	2b00      	cmp	r3, #0
 800d798:	d044      	beq.n	800d824 <UART_SetConfig+0x168c>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	d03e      	beq.n	800d820 <UART_SetConfig+0x1688>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a6:	2b02      	cmp	r3, #2
 800d7a8:	d038      	beq.n	800d81c <UART_SetConfig+0x1684>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ae:	2b03      	cmp	r3, #3
 800d7b0:	d032      	beq.n	800d818 <UART_SetConfig+0x1680>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b6:	2b04      	cmp	r3, #4
 800d7b8:	d02c      	beq.n	800d814 <UART_SetConfig+0x167c>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7be:	2b05      	cmp	r3, #5
 800d7c0:	d026      	beq.n	800d810 <UART_SetConfig+0x1678>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c6:	2b06      	cmp	r3, #6
 800d7c8:	d020      	beq.n	800d80c <UART_SetConfig+0x1674>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ce:	2b07      	cmp	r3, #7
 800d7d0:	d01a      	beq.n	800d808 <UART_SetConfig+0x1670>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d6:	2b08      	cmp	r3, #8
 800d7d8:	d014      	beq.n	800d804 <UART_SetConfig+0x166c>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7de:	2b09      	cmp	r3, #9
 800d7e0:	d00e      	beq.n	800d800 <UART_SetConfig+0x1668>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e6:	2b0a      	cmp	r3, #10
 800d7e8:	d008      	beq.n	800d7fc <UART_SetConfig+0x1664>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ee:	2b0b      	cmp	r3, #11
 800d7f0:	d102      	bne.n	800d7f8 <UART_SetConfig+0x1660>
 800d7f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d7f6:	e016      	b.n	800d826 <UART_SetConfig+0x168e>
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	e014      	b.n	800d826 <UART_SetConfig+0x168e>
 800d7fc:	2380      	movs	r3, #128	; 0x80
 800d7fe:	e012      	b.n	800d826 <UART_SetConfig+0x168e>
 800d800:	2340      	movs	r3, #64	; 0x40
 800d802:	e010      	b.n	800d826 <UART_SetConfig+0x168e>
 800d804:	2320      	movs	r3, #32
 800d806:	e00e      	b.n	800d826 <UART_SetConfig+0x168e>
 800d808:	2310      	movs	r3, #16
 800d80a:	e00c      	b.n	800d826 <UART_SetConfig+0x168e>
 800d80c:	230c      	movs	r3, #12
 800d80e:	e00a      	b.n	800d826 <UART_SetConfig+0x168e>
 800d810:	230a      	movs	r3, #10
 800d812:	e008      	b.n	800d826 <UART_SetConfig+0x168e>
 800d814:	2308      	movs	r3, #8
 800d816:	e006      	b.n	800d826 <UART_SetConfig+0x168e>
 800d818:	2306      	movs	r3, #6
 800d81a:	e004      	b.n	800d826 <UART_SetConfig+0x168e>
 800d81c:	2304      	movs	r3, #4
 800d81e:	e002      	b.n	800d826 <UART_SetConfig+0x168e>
 800d820:	2302      	movs	r3, #2
 800d822:	e000      	b.n	800d826 <UART_SetConfig+0x168e>
 800d824:	2301      	movs	r3, #1
 800d826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d828:	fbb2 f3f3 	udiv	r3, r2, r3
 800d82c:	005a      	lsls	r2, r3, #1
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	085b      	lsrs	r3, r3, #1
 800d834:	441a      	add	r2, r3
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d83e:	b29b      	uxth	r3, r3
 800d840:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d842:	e254      	b.n	800dcee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d844:	f107 0318 	add.w	r3, r7, #24
 800d848:	4618      	mov	r0, r3
 800d84a:	f7fc f8d5 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d84e:	69fa      	ldr	r2, [r7, #28]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d854:	2b00      	cmp	r3, #0
 800d856:	d044      	beq.n	800d8e2 <UART_SetConfig+0x174a>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d03e      	beq.n	800d8de <UART_SetConfig+0x1746>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d864:	2b02      	cmp	r3, #2
 800d866:	d038      	beq.n	800d8da <UART_SetConfig+0x1742>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86c:	2b03      	cmp	r3, #3
 800d86e:	d032      	beq.n	800d8d6 <UART_SetConfig+0x173e>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d874:	2b04      	cmp	r3, #4
 800d876:	d02c      	beq.n	800d8d2 <UART_SetConfig+0x173a>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87c:	2b05      	cmp	r3, #5
 800d87e:	d026      	beq.n	800d8ce <UART_SetConfig+0x1736>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d884:	2b06      	cmp	r3, #6
 800d886:	d020      	beq.n	800d8ca <UART_SetConfig+0x1732>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d88c:	2b07      	cmp	r3, #7
 800d88e:	d01a      	beq.n	800d8c6 <UART_SetConfig+0x172e>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d894:	2b08      	cmp	r3, #8
 800d896:	d014      	beq.n	800d8c2 <UART_SetConfig+0x172a>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89c:	2b09      	cmp	r3, #9
 800d89e:	d00e      	beq.n	800d8be <UART_SetConfig+0x1726>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a4:	2b0a      	cmp	r3, #10
 800d8a6:	d008      	beq.n	800d8ba <UART_SetConfig+0x1722>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ac:	2b0b      	cmp	r3, #11
 800d8ae:	d102      	bne.n	800d8b6 <UART_SetConfig+0x171e>
 800d8b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8b4:	e016      	b.n	800d8e4 <UART_SetConfig+0x174c>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e014      	b.n	800d8e4 <UART_SetConfig+0x174c>
 800d8ba:	2380      	movs	r3, #128	; 0x80
 800d8bc:	e012      	b.n	800d8e4 <UART_SetConfig+0x174c>
 800d8be:	2340      	movs	r3, #64	; 0x40
 800d8c0:	e010      	b.n	800d8e4 <UART_SetConfig+0x174c>
 800d8c2:	2320      	movs	r3, #32
 800d8c4:	e00e      	b.n	800d8e4 <UART_SetConfig+0x174c>
 800d8c6:	2310      	movs	r3, #16
 800d8c8:	e00c      	b.n	800d8e4 <UART_SetConfig+0x174c>
 800d8ca:	230c      	movs	r3, #12
 800d8cc:	e00a      	b.n	800d8e4 <UART_SetConfig+0x174c>
 800d8ce:	230a      	movs	r3, #10
 800d8d0:	e008      	b.n	800d8e4 <UART_SetConfig+0x174c>
 800d8d2:	2308      	movs	r3, #8
 800d8d4:	e006      	b.n	800d8e4 <UART_SetConfig+0x174c>
 800d8d6:	2306      	movs	r3, #6
 800d8d8:	e004      	b.n	800d8e4 <UART_SetConfig+0x174c>
 800d8da:	2304      	movs	r3, #4
 800d8dc:	e002      	b.n	800d8e4 <UART_SetConfig+0x174c>
 800d8de:	2302      	movs	r3, #2
 800d8e0:	e000      	b.n	800d8e4 <UART_SetConfig+0x174c>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8e8:	005a      	lsls	r2, r3, #1
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	085b      	lsrs	r3, r3, #1
 800d8f0:	441a      	add	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d8fe:	e1f6      	b.n	800dcee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d900:	f107 030c 	add.w	r3, r7, #12
 800d904:	4618      	mov	r0, r3
 800d906:	f7fc f9c3 	bl	8009c90 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d90a:	693a      	ldr	r2, [r7, #16]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d910:	2b00      	cmp	r3, #0
 800d912:	d044      	beq.n	800d99e <UART_SetConfig+0x1806>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d03e      	beq.n	800d99a <UART_SetConfig+0x1802>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d920:	2b02      	cmp	r3, #2
 800d922:	d038      	beq.n	800d996 <UART_SetConfig+0x17fe>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d928:	2b03      	cmp	r3, #3
 800d92a:	d032      	beq.n	800d992 <UART_SetConfig+0x17fa>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d930:	2b04      	cmp	r3, #4
 800d932:	d02c      	beq.n	800d98e <UART_SetConfig+0x17f6>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d938:	2b05      	cmp	r3, #5
 800d93a:	d026      	beq.n	800d98a <UART_SetConfig+0x17f2>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d940:	2b06      	cmp	r3, #6
 800d942:	d020      	beq.n	800d986 <UART_SetConfig+0x17ee>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d948:	2b07      	cmp	r3, #7
 800d94a:	d01a      	beq.n	800d982 <UART_SetConfig+0x17ea>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d950:	2b08      	cmp	r3, #8
 800d952:	d014      	beq.n	800d97e <UART_SetConfig+0x17e6>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d958:	2b09      	cmp	r3, #9
 800d95a:	d00e      	beq.n	800d97a <UART_SetConfig+0x17e2>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d960:	2b0a      	cmp	r3, #10
 800d962:	d008      	beq.n	800d976 <UART_SetConfig+0x17de>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d968:	2b0b      	cmp	r3, #11
 800d96a:	d102      	bne.n	800d972 <UART_SetConfig+0x17da>
 800d96c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d970:	e016      	b.n	800d9a0 <UART_SetConfig+0x1808>
 800d972:	2301      	movs	r3, #1
 800d974:	e014      	b.n	800d9a0 <UART_SetConfig+0x1808>
 800d976:	2380      	movs	r3, #128	; 0x80
 800d978:	e012      	b.n	800d9a0 <UART_SetConfig+0x1808>
 800d97a:	2340      	movs	r3, #64	; 0x40
 800d97c:	e010      	b.n	800d9a0 <UART_SetConfig+0x1808>
 800d97e:	2320      	movs	r3, #32
 800d980:	e00e      	b.n	800d9a0 <UART_SetConfig+0x1808>
 800d982:	2310      	movs	r3, #16
 800d984:	e00c      	b.n	800d9a0 <UART_SetConfig+0x1808>
 800d986:	230c      	movs	r3, #12
 800d988:	e00a      	b.n	800d9a0 <UART_SetConfig+0x1808>
 800d98a:	230a      	movs	r3, #10
 800d98c:	e008      	b.n	800d9a0 <UART_SetConfig+0x1808>
 800d98e:	2308      	movs	r3, #8
 800d990:	e006      	b.n	800d9a0 <UART_SetConfig+0x1808>
 800d992:	2306      	movs	r3, #6
 800d994:	e004      	b.n	800d9a0 <UART_SetConfig+0x1808>
 800d996:	2304      	movs	r3, #4
 800d998:	e002      	b.n	800d9a0 <UART_SetConfig+0x1808>
 800d99a:	2302      	movs	r3, #2
 800d99c:	e000      	b.n	800d9a0 <UART_SetConfig+0x1808>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9a4:	005a      	lsls	r2, r3, #1
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	085b      	lsrs	r3, r3, #1
 800d9ac:	441a      	add	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d9ba:	e198      	b.n	800dcee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9bc:	4b87      	ldr	r3, [pc, #540]	; (800dbdc <UART_SetConfig+0x1a44>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f003 0320 	and.w	r3, r3, #32
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d05e      	beq.n	800da86 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9c8:	4b84      	ldr	r3, [pc, #528]	; (800dbdc <UART_SetConfig+0x1a44>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	08db      	lsrs	r3, r3, #3
 800d9ce:	f003 0303 	and.w	r3, r3, #3
 800d9d2:	4a83      	ldr	r2, [pc, #524]	; (800dbe0 <UART_SetConfig+0x1a48>)
 800d9d4:	40da      	lsrs	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d044      	beq.n	800da68 <UART_SetConfig+0x18d0>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d03e      	beq.n	800da64 <UART_SetConfig+0x18cc>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	d038      	beq.n	800da60 <UART_SetConfig+0x18c8>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f2:	2b03      	cmp	r3, #3
 800d9f4:	d032      	beq.n	800da5c <UART_SetConfig+0x18c4>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9fa:	2b04      	cmp	r3, #4
 800d9fc:	d02c      	beq.n	800da58 <UART_SetConfig+0x18c0>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da02:	2b05      	cmp	r3, #5
 800da04:	d026      	beq.n	800da54 <UART_SetConfig+0x18bc>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0a:	2b06      	cmp	r3, #6
 800da0c:	d020      	beq.n	800da50 <UART_SetConfig+0x18b8>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da12:	2b07      	cmp	r3, #7
 800da14:	d01a      	beq.n	800da4c <UART_SetConfig+0x18b4>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1a:	2b08      	cmp	r3, #8
 800da1c:	d014      	beq.n	800da48 <UART_SetConfig+0x18b0>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da22:	2b09      	cmp	r3, #9
 800da24:	d00e      	beq.n	800da44 <UART_SetConfig+0x18ac>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2a:	2b0a      	cmp	r3, #10
 800da2c:	d008      	beq.n	800da40 <UART_SetConfig+0x18a8>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da32:	2b0b      	cmp	r3, #11
 800da34:	d102      	bne.n	800da3c <UART_SetConfig+0x18a4>
 800da36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da3a:	e016      	b.n	800da6a <UART_SetConfig+0x18d2>
 800da3c:	2301      	movs	r3, #1
 800da3e:	e014      	b.n	800da6a <UART_SetConfig+0x18d2>
 800da40:	2380      	movs	r3, #128	; 0x80
 800da42:	e012      	b.n	800da6a <UART_SetConfig+0x18d2>
 800da44:	2340      	movs	r3, #64	; 0x40
 800da46:	e010      	b.n	800da6a <UART_SetConfig+0x18d2>
 800da48:	2320      	movs	r3, #32
 800da4a:	e00e      	b.n	800da6a <UART_SetConfig+0x18d2>
 800da4c:	2310      	movs	r3, #16
 800da4e:	e00c      	b.n	800da6a <UART_SetConfig+0x18d2>
 800da50:	230c      	movs	r3, #12
 800da52:	e00a      	b.n	800da6a <UART_SetConfig+0x18d2>
 800da54:	230a      	movs	r3, #10
 800da56:	e008      	b.n	800da6a <UART_SetConfig+0x18d2>
 800da58:	2308      	movs	r3, #8
 800da5a:	e006      	b.n	800da6a <UART_SetConfig+0x18d2>
 800da5c:	2306      	movs	r3, #6
 800da5e:	e004      	b.n	800da6a <UART_SetConfig+0x18d2>
 800da60:	2304      	movs	r3, #4
 800da62:	e002      	b.n	800da6a <UART_SetConfig+0x18d2>
 800da64:	2302      	movs	r3, #2
 800da66:	e000      	b.n	800da6a <UART_SetConfig+0x18d2>
 800da68:	2301      	movs	r3, #1
 800da6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da6e:	005a      	lsls	r2, r3, #1
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	085b      	lsrs	r3, r3, #1
 800da76:	441a      	add	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da80:	b29b      	uxth	r3, r3
 800da82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800da84:	e133      	b.n	800dcee <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d043      	beq.n	800db16 <UART_SetConfig+0x197e>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da92:	2b01      	cmp	r3, #1
 800da94:	d03d      	beq.n	800db12 <UART_SetConfig+0x197a>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d037      	beq.n	800db0e <UART_SetConfig+0x1976>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa2:	2b03      	cmp	r3, #3
 800daa4:	d031      	beq.n	800db0a <UART_SetConfig+0x1972>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daaa:	2b04      	cmp	r3, #4
 800daac:	d02b      	beq.n	800db06 <UART_SetConfig+0x196e>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab2:	2b05      	cmp	r3, #5
 800dab4:	d025      	beq.n	800db02 <UART_SetConfig+0x196a>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daba:	2b06      	cmp	r3, #6
 800dabc:	d01f      	beq.n	800dafe <UART_SetConfig+0x1966>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac2:	2b07      	cmp	r3, #7
 800dac4:	d019      	beq.n	800dafa <UART_SetConfig+0x1962>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daca:	2b08      	cmp	r3, #8
 800dacc:	d013      	beq.n	800daf6 <UART_SetConfig+0x195e>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad2:	2b09      	cmp	r3, #9
 800dad4:	d00d      	beq.n	800daf2 <UART_SetConfig+0x195a>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dada:	2b0a      	cmp	r3, #10
 800dadc:	d007      	beq.n	800daee <UART_SetConfig+0x1956>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae2:	2b0b      	cmp	r3, #11
 800dae4:	d101      	bne.n	800daea <UART_SetConfig+0x1952>
 800dae6:	4b3f      	ldr	r3, [pc, #252]	; (800dbe4 <UART_SetConfig+0x1a4c>)
 800dae8:	e016      	b.n	800db18 <UART_SetConfig+0x1980>
 800daea:	4b3f      	ldr	r3, [pc, #252]	; (800dbe8 <UART_SetConfig+0x1a50>)
 800daec:	e014      	b.n	800db18 <UART_SetConfig+0x1980>
 800daee:	4b3f      	ldr	r3, [pc, #252]	; (800dbec <UART_SetConfig+0x1a54>)
 800daf0:	e012      	b.n	800db18 <UART_SetConfig+0x1980>
 800daf2:	4b3f      	ldr	r3, [pc, #252]	; (800dbf0 <UART_SetConfig+0x1a58>)
 800daf4:	e010      	b.n	800db18 <UART_SetConfig+0x1980>
 800daf6:	4b3f      	ldr	r3, [pc, #252]	; (800dbf4 <UART_SetConfig+0x1a5c>)
 800daf8:	e00e      	b.n	800db18 <UART_SetConfig+0x1980>
 800dafa:	4b3f      	ldr	r3, [pc, #252]	; (800dbf8 <UART_SetConfig+0x1a60>)
 800dafc:	e00c      	b.n	800db18 <UART_SetConfig+0x1980>
 800dafe:	4b3f      	ldr	r3, [pc, #252]	; (800dbfc <UART_SetConfig+0x1a64>)
 800db00:	e00a      	b.n	800db18 <UART_SetConfig+0x1980>
 800db02:	4b3f      	ldr	r3, [pc, #252]	; (800dc00 <UART_SetConfig+0x1a68>)
 800db04:	e008      	b.n	800db18 <UART_SetConfig+0x1980>
 800db06:	4b3f      	ldr	r3, [pc, #252]	; (800dc04 <UART_SetConfig+0x1a6c>)
 800db08:	e006      	b.n	800db18 <UART_SetConfig+0x1980>
 800db0a:	4b3f      	ldr	r3, [pc, #252]	; (800dc08 <UART_SetConfig+0x1a70>)
 800db0c:	e004      	b.n	800db18 <UART_SetConfig+0x1980>
 800db0e:	4b3f      	ldr	r3, [pc, #252]	; (800dc0c <UART_SetConfig+0x1a74>)
 800db10:	e002      	b.n	800db18 <UART_SetConfig+0x1980>
 800db12:	4b33      	ldr	r3, [pc, #204]	; (800dbe0 <UART_SetConfig+0x1a48>)
 800db14:	e000      	b.n	800db18 <UART_SetConfig+0x1980>
 800db16:	4b34      	ldr	r3, [pc, #208]	; (800dbe8 <UART_SetConfig+0x1a50>)
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	6852      	ldr	r2, [r2, #4]
 800db1c:	0852      	lsrs	r2, r2, #1
 800db1e:	441a      	add	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	fbb2 f3f3 	udiv	r3, r2, r3
 800db28:	b29b      	uxth	r3, r3
 800db2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800db2c:	e0df      	b.n	800dcee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db32:	2b00      	cmp	r3, #0
 800db34:	d045      	beq.n	800dbc2 <UART_SetConfig+0x1a2a>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d03f      	beq.n	800dbbe <UART_SetConfig+0x1a26>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db42:	2b02      	cmp	r3, #2
 800db44:	d039      	beq.n	800dbba <UART_SetConfig+0x1a22>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db4a:	2b03      	cmp	r3, #3
 800db4c:	d033      	beq.n	800dbb6 <UART_SetConfig+0x1a1e>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db52:	2b04      	cmp	r3, #4
 800db54:	d02d      	beq.n	800dbb2 <UART_SetConfig+0x1a1a>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5a:	2b05      	cmp	r3, #5
 800db5c:	d027      	beq.n	800dbae <UART_SetConfig+0x1a16>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db62:	2b06      	cmp	r3, #6
 800db64:	d021      	beq.n	800dbaa <UART_SetConfig+0x1a12>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db6a:	2b07      	cmp	r3, #7
 800db6c:	d01b      	beq.n	800dba6 <UART_SetConfig+0x1a0e>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db72:	2b08      	cmp	r3, #8
 800db74:	d015      	beq.n	800dba2 <UART_SetConfig+0x1a0a>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db7a:	2b09      	cmp	r3, #9
 800db7c:	d00f      	beq.n	800db9e <UART_SetConfig+0x1a06>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db82:	2b0a      	cmp	r3, #10
 800db84:	d008      	beq.n	800db98 <UART_SetConfig+0x1a00>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db8a:	2b0b      	cmp	r3, #11
 800db8c:	d102      	bne.n	800db94 <UART_SetConfig+0x19fc>
 800db8e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800db92:	e017      	b.n	800dbc4 <UART_SetConfig+0x1a2c>
 800db94:	4b18      	ldr	r3, [pc, #96]	; (800dbf8 <UART_SetConfig+0x1a60>)
 800db96:	e015      	b.n	800dbc4 <UART_SetConfig+0x1a2c>
 800db98:	f24f 4324 	movw	r3, #62500	; 0xf424
 800db9c:	e012      	b.n	800dbc4 <UART_SetConfig+0x1a2c>
 800db9e:	4b1c      	ldr	r3, [pc, #112]	; (800dc10 <UART_SetConfig+0x1a78>)
 800dba0:	e010      	b.n	800dbc4 <UART_SetConfig+0x1a2c>
 800dba2:	4b1c      	ldr	r3, [pc, #112]	; (800dc14 <UART_SetConfig+0x1a7c>)
 800dba4:	e00e      	b.n	800dbc4 <UART_SetConfig+0x1a2c>
 800dba6:	4b0f      	ldr	r3, [pc, #60]	; (800dbe4 <UART_SetConfig+0x1a4c>)
 800dba8:	e00c      	b.n	800dbc4 <UART_SetConfig+0x1a2c>
 800dbaa:	4b1b      	ldr	r3, [pc, #108]	; (800dc18 <UART_SetConfig+0x1a80>)
 800dbac:	e00a      	b.n	800dbc4 <UART_SetConfig+0x1a2c>
 800dbae:	4b1b      	ldr	r3, [pc, #108]	; (800dc1c <UART_SetConfig+0x1a84>)
 800dbb0:	e008      	b.n	800dbc4 <UART_SetConfig+0x1a2c>
 800dbb2:	4b0e      	ldr	r3, [pc, #56]	; (800dbec <UART_SetConfig+0x1a54>)
 800dbb4:	e006      	b.n	800dbc4 <UART_SetConfig+0x1a2c>
 800dbb6:	4b1a      	ldr	r3, [pc, #104]	; (800dc20 <UART_SetConfig+0x1a88>)
 800dbb8:	e004      	b.n	800dbc4 <UART_SetConfig+0x1a2c>
 800dbba:	4b0d      	ldr	r3, [pc, #52]	; (800dbf0 <UART_SetConfig+0x1a58>)
 800dbbc:	e002      	b.n	800dbc4 <UART_SetConfig+0x1a2c>
 800dbbe:	4b0d      	ldr	r3, [pc, #52]	; (800dbf4 <UART_SetConfig+0x1a5c>)
 800dbc0:	e000      	b.n	800dbc4 <UART_SetConfig+0x1a2c>
 800dbc2:	4b0d      	ldr	r3, [pc, #52]	; (800dbf8 <UART_SetConfig+0x1a60>)
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	6852      	ldr	r2, [r2, #4]
 800dbc8:	0852      	lsrs	r2, r2, #1
 800dbca:	441a      	add	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dbd8:	e089      	b.n	800dcee <UART_SetConfig+0x1b56>
 800dbda:	bf00      	nop
 800dbdc:	58024400 	.word	0x58024400
 800dbe0:	03d09000 	.word	0x03d09000
 800dbe4:	0007a120 	.word	0x0007a120
 800dbe8:	07a12000 	.word	0x07a12000
 800dbec:	000f4240 	.word	0x000f4240
 800dbf0:	001e8480 	.word	0x001e8480
 800dbf4:	003d0900 	.word	0x003d0900
 800dbf8:	007a1200 	.word	0x007a1200
 800dbfc:	00a2c2aa 	.word	0x00a2c2aa
 800dc00:	00c35000 	.word	0x00c35000
 800dc04:	00f42400 	.word	0x00f42400
 800dc08:	01458554 	.word	0x01458554
 800dc0c:	01e84800 	.word	0x01e84800
 800dc10:	0001e848 	.word	0x0001e848
 800dc14:	0003d090 	.word	0x0003d090
 800dc18:	000a2c2a 	.word	0x000a2c2a
 800dc1c:	000c3500 	.word	0x000c3500
 800dc20:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d04f      	beq.n	800dccc <UART_SetConfig+0x1b34>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d048      	beq.n	800dcc6 <UART_SetConfig+0x1b2e>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc38:	2b02      	cmp	r3, #2
 800dc3a:	d041      	beq.n	800dcc0 <UART_SetConfig+0x1b28>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc40:	2b03      	cmp	r3, #3
 800dc42:	d03a      	beq.n	800dcba <UART_SetConfig+0x1b22>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc48:	2b04      	cmp	r3, #4
 800dc4a:	d033      	beq.n	800dcb4 <UART_SetConfig+0x1b1c>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc50:	2b05      	cmp	r3, #5
 800dc52:	d02c      	beq.n	800dcae <UART_SetConfig+0x1b16>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc58:	2b06      	cmp	r3, #6
 800dc5a:	d025      	beq.n	800dca8 <UART_SetConfig+0x1b10>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc60:	2b07      	cmp	r3, #7
 800dc62:	d01e      	beq.n	800dca2 <UART_SetConfig+0x1b0a>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc68:	2b08      	cmp	r3, #8
 800dc6a:	d017      	beq.n	800dc9c <UART_SetConfig+0x1b04>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc70:	2b09      	cmp	r3, #9
 800dc72:	d010      	beq.n	800dc96 <UART_SetConfig+0x1afe>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc78:	2b0a      	cmp	r3, #10
 800dc7a:	d009      	beq.n	800dc90 <UART_SetConfig+0x1af8>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc80:	2b0b      	cmp	r3, #11
 800dc82:	d102      	bne.n	800dc8a <UART_SetConfig+0x1af2>
 800dc84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc88:	e022      	b.n	800dcd0 <UART_SetConfig+0x1b38>
 800dc8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dc8e:	e01f      	b.n	800dcd0 <UART_SetConfig+0x1b38>
 800dc90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc94:	e01c      	b.n	800dcd0 <UART_SetConfig+0x1b38>
 800dc96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc9a:	e019      	b.n	800dcd0 <UART_SetConfig+0x1b38>
 800dc9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dca0:	e016      	b.n	800dcd0 <UART_SetConfig+0x1b38>
 800dca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dca6:	e013      	b.n	800dcd0 <UART_SetConfig+0x1b38>
 800dca8:	f241 5354 	movw	r3, #5460	; 0x1554
 800dcac:	e010      	b.n	800dcd0 <UART_SetConfig+0x1b38>
 800dcae:	f641 1398 	movw	r3, #6552	; 0x1998
 800dcb2:	e00d      	b.n	800dcd0 <UART_SetConfig+0x1b38>
 800dcb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dcb8:	e00a      	b.n	800dcd0 <UART_SetConfig+0x1b38>
 800dcba:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800dcbe:	e007      	b.n	800dcd0 <UART_SetConfig+0x1b38>
 800dcc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dcc4:	e004      	b.n	800dcd0 <UART_SetConfig+0x1b38>
 800dcc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dcca:	e001      	b.n	800dcd0 <UART_SetConfig+0x1b38>
 800dccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	6852      	ldr	r2, [r2, #4]
 800dcd4:	0852      	lsrs	r2, r2, #1
 800dcd6:	441a      	add	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dce4:	e003      	b.n	800dcee <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800dce6:	2301      	movs	r3, #1
 800dce8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800dcec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf0:	2b0f      	cmp	r3, #15
 800dcf2:	d916      	bls.n	800dd22 <UART_SetConfig+0x1b8a>
 800dcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcfa:	d212      	bcs.n	800dd22 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dcfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	f023 030f 	bic.w	r3, r3, #15
 800dd04:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dd06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd08:	085b      	lsrs	r3, r3, #1
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	f003 0307 	and.w	r3, r3, #7
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd14:	4313      	orrs	r3, r2
 800dd16:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd1e:	60da      	str	r2, [r3, #12]
 800dd20:	e3a3      	b.n	800e46a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd28:	e39f      	b.n	800e46a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800dd2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dd2e:	2b40      	cmp	r3, #64	; 0x40
 800dd30:	f200 8388 	bhi.w	800e444 <UART_SetConfig+0x22ac>
 800dd34:	a201      	add	r2, pc, #4	; (adr r2, 800dd3c <UART_SetConfig+0x1ba4>)
 800dd36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd3a:	bf00      	nop
 800dd3c:	0800de41 	.word	0x0800de41
 800dd40:	0800def7 	.word	0x0800def7
 800dd44:	0800e445 	.word	0x0800e445
 800dd48:	0800e445 	.word	0x0800e445
 800dd4c:	0800dfad 	.word	0x0800dfad
 800dd50:	0800e445 	.word	0x0800e445
 800dd54:	0800e445 	.word	0x0800e445
 800dd58:	0800e445 	.word	0x0800e445
 800dd5c:	0800e067 	.word	0x0800e067
 800dd60:	0800e445 	.word	0x0800e445
 800dd64:	0800e445 	.word	0x0800e445
 800dd68:	0800e445 	.word	0x0800e445
 800dd6c:	0800e445 	.word	0x0800e445
 800dd70:	0800e445 	.word	0x0800e445
 800dd74:	0800e445 	.word	0x0800e445
 800dd78:	0800e445 	.word	0x0800e445
 800dd7c:	0800e121 	.word	0x0800e121
 800dd80:	0800e445 	.word	0x0800e445
 800dd84:	0800e445 	.word	0x0800e445
 800dd88:	0800e445 	.word	0x0800e445
 800dd8c:	0800e445 	.word	0x0800e445
 800dd90:	0800e445 	.word	0x0800e445
 800dd94:	0800e445 	.word	0x0800e445
 800dd98:	0800e445 	.word	0x0800e445
 800dd9c:	0800e445 	.word	0x0800e445
 800dda0:	0800e445 	.word	0x0800e445
 800dda4:	0800e445 	.word	0x0800e445
 800dda8:	0800e445 	.word	0x0800e445
 800ddac:	0800e445 	.word	0x0800e445
 800ddb0:	0800e445 	.word	0x0800e445
 800ddb4:	0800e445 	.word	0x0800e445
 800ddb8:	0800e445 	.word	0x0800e445
 800ddbc:	0800e291 	.word	0x0800e291
 800ddc0:	0800e445 	.word	0x0800e445
 800ddc4:	0800e445 	.word	0x0800e445
 800ddc8:	0800e445 	.word	0x0800e445
 800ddcc:	0800e445 	.word	0x0800e445
 800ddd0:	0800e445 	.word	0x0800e445
 800ddd4:	0800e445 	.word	0x0800e445
 800ddd8:	0800e445 	.word	0x0800e445
 800dddc:	0800e445 	.word	0x0800e445
 800dde0:	0800e445 	.word	0x0800e445
 800dde4:	0800e445 	.word	0x0800e445
 800dde8:	0800e445 	.word	0x0800e445
 800ddec:	0800e445 	.word	0x0800e445
 800ddf0:	0800e445 	.word	0x0800e445
 800ddf4:	0800e445 	.word	0x0800e445
 800ddf8:	0800e445 	.word	0x0800e445
 800ddfc:	0800e445 	.word	0x0800e445
 800de00:	0800e445 	.word	0x0800e445
 800de04:	0800e445 	.word	0x0800e445
 800de08:	0800e445 	.word	0x0800e445
 800de0c:	0800e445 	.word	0x0800e445
 800de10:	0800e445 	.word	0x0800e445
 800de14:	0800e445 	.word	0x0800e445
 800de18:	0800e445 	.word	0x0800e445
 800de1c:	0800e445 	.word	0x0800e445
 800de20:	0800e445 	.word	0x0800e445
 800de24:	0800e445 	.word	0x0800e445
 800de28:	0800e445 	.word	0x0800e445
 800de2c:	0800e445 	.word	0x0800e445
 800de30:	0800e445 	.word	0x0800e445
 800de34:	0800e445 	.word	0x0800e445
 800de38:	0800e445 	.word	0x0800e445
 800de3c:	0800e385 	.word	0x0800e385
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de40:	f7fa fc42 	bl	80086c8 <HAL_RCC_GetPCLK1Freq>
 800de44:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d044      	beq.n	800ded8 <UART_SetConfig+0x1d40>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de52:	2b01      	cmp	r3, #1
 800de54:	d03e      	beq.n	800ded4 <UART_SetConfig+0x1d3c>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de5a:	2b02      	cmp	r3, #2
 800de5c:	d038      	beq.n	800ded0 <UART_SetConfig+0x1d38>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de62:	2b03      	cmp	r3, #3
 800de64:	d032      	beq.n	800decc <UART_SetConfig+0x1d34>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6a:	2b04      	cmp	r3, #4
 800de6c:	d02c      	beq.n	800dec8 <UART_SetConfig+0x1d30>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de72:	2b05      	cmp	r3, #5
 800de74:	d026      	beq.n	800dec4 <UART_SetConfig+0x1d2c>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7a:	2b06      	cmp	r3, #6
 800de7c:	d020      	beq.n	800dec0 <UART_SetConfig+0x1d28>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de82:	2b07      	cmp	r3, #7
 800de84:	d01a      	beq.n	800debc <UART_SetConfig+0x1d24>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de8a:	2b08      	cmp	r3, #8
 800de8c:	d014      	beq.n	800deb8 <UART_SetConfig+0x1d20>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de92:	2b09      	cmp	r3, #9
 800de94:	d00e      	beq.n	800deb4 <UART_SetConfig+0x1d1c>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9a:	2b0a      	cmp	r3, #10
 800de9c:	d008      	beq.n	800deb0 <UART_SetConfig+0x1d18>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea2:	2b0b      	cmp	r3, #11
 800dea4:	d102      	bne.n	800deac <UART_SetConfig+0x1d14>
 800dea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800deaa:	e016      	b.n	800deda <UART_SetConfig+0x1d42>
 800deac:	2301      	movs	r3, #1
 800deae:	e014      	b.n	800deda <UART_SetConfig+0x1d42>
 800deb0:	2380      	movs	r3, #128	; 0x80
 800deb2:	e012      	b.n	800deda <UART_SetConfig+0x1d42>
 800deb4:	2340      	movs	r3, #64	; 0x40
 800deb6:	e010      	b.n	800deda <UART_SetConfig+0x1d42>
 800deb8:	2320      	movs	r3, #32
 800deba:	e00e      	b.n	800deda <UART_SetConfig+0x1d42>
 800debc:	2310      	movs	r3, #16
 800debe:	e00c      	b.n	800deda <UART_SetConfig+0x1d42>
 800dec0:	230c      	movs	r3, #12
 800dec2:	e00a      	b.n	800deda <UART_SetConfig+0x1d42>
 800dec4:	230a      	movs	r3, #10
 800dec6:	e008      	b.n	800deda <UART_SetConfig+0x1d42>
 800dec8:	2308      	movs	r3, #8
 800deca:	e006      	b.n	800deda <UART_SetConfig+0x1d42>
 800decc:	2306      	movs	r3, #6
 800dece:	e004      	b.n	800deda <UART_SetConfig+0x1d42>
 800ded0:	2304      	movs	r3, #4
 800ded2:	e002      	b.n	800deda <UART_SetConfig+0x1d42>
 800ded4:	2302      	movs	r3, #2
 800ded6:	e000      	b.n	800deda <UART_SetConfig+0x1d42>
 800ded8:	2301      	movs	r3, #1
 800deda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dedc:	fbb2 f2f3 	udiv	r2, r2, r3
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	085b      	lsrs	r3, r3, #1
 800dee6:	441a      	add	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	fbb2 f3f3 	udiv	r3, r2, r3
 800def0:	b29b      	uxth	r3, r3
 800def2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800def4:	e2aa      	b.n	800e44c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800def6:	f7fa fbfd 	bl	80086f4 <HAL_RCC_GetPCLK2Freq>
 800defa:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df00:	2b00      	cmp	r3, #0
 800df02:	d044      	beq.n	800df8e <UART_SetConfig+0x1df6>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d03e      	beq.n	800df8a <UART_SetConfig+0x1df2>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df10:	2b02      	cmp	r3, #2
 800df12:	d038      	beq.n	800df86 <UART_SetConfig+0x1dee>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df18:	2b03      	cmp	r3, #3
 800df1a:	d032      	beq.n	800df82 <UART_SetConfig+0x1dea>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df20:	2b04      	cmp	r3, #4
 800df22:	d02c      	beq.n	800df7e <UART_SetConfig+0x1de6>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df28:	2b05      	cmp	r3, #5
 800df2a:	d026      	beq.n	800df7a <UART_SetConfig+0x1de2>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df30:	2b06      	cmp	r3, #6
 800df32:	d020      	beq.n	800df76 <UART_SetConfig+0x1dde>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df38:	2b07      	cmp	r3, #7
 800df3a:	d01a      	beq.n	800df72 <UART_SetConfig+0x1dda>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df40:	2b08      	cmp	r3, #8
 800df42:	d014      	beq.n	800df6e <UART_SetConfig+0x1dd6>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df48:	2b09      	cmp	r3, #9
 800df4a:	d00e      	beq.n	800df6a <UART_SetConfig+0x1dd2>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df50:	2b0a      	cmp	r3, #10
 800df52:	d008      	beq.n	800df66 <UART_SetConfig+0x1dce>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df58:	2b0b      	cmp	r3, #11
 800df5a:	d102      	bne.n	800df62 <UART_SetConfig+0x1dca>
 800df5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df60:	e016      	b.n	800df90 <UART_SetConfig+0x1df8>
 800df62:	2301      	movs	r3, #1
 800df64:	e014      	b.n	800df90 <UART_SetConfig+0x1df8>
 800df66:	2380      	movs	r3, #128	; 0x80
 800df68:	e012      	b.n	800df90 <UART_SetConfig+0x1df8>
 800df6a:	2340      	movs	r3, #64	; 0x40
 800df6c:	e010      	b.n	800df90 <UART_SetConfig+0x1df8>
 800df6e:	2320      	movs	r3, #32
 800df70:	e00e      	b.n	800df90 <UART_SetConfig+0x1df8>
 800df72:	2310      	movs	r3, #16
 800df74:	e00c      	b.n	800df90 <UART_SetConfig+0x1df8>
 800df76:	230c      	movs	r3, #12
 800df78:	e00a      	b.n	800df90 <UART_SetConfig+0x1df8>
 800df7a:	230a      	movs	r3, #10
 800df7c:	e008      	b.n	800df90 <UART_SetConfig+0x1df8>
 800df7e:	2308      	movs	r3, #8
 800df80:	e006      	b.n	800df90 <UART_SetConfig+0x1df8>
 800df82:	2306      	movs	r3, #6
 800df84:	e004      	b.n	800df90 <UART_SetConfig+0x1df8>
 800df86:	2304      	movs	r3, #4
 800df88:	e002      	b.n	800df90 <UART_SetConfig+0x1df8>
 800df8a:	2302      	movs	r3, #2
 800df8c:	e000      	b.n	800df90 <UART_SetConfig+0x1df8>
 800df8e:	2301      	movs	r3, #1
 800df90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df92:	fbb2 f2f3 	udiv	r2, r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	085b      	lsrs	r3, r3, #1
 800df9c:	441a      	add	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dfaa:	e24f      	b.n	800e44c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfac:	f107 0318 	add.w	r3, r7, #24
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7fb fd21 	bl	80099f8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfb6:	69fa      	ldr	r2, [r7, #28]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d044      	beq.n	800e04a <UART_SetConfig+0x1eb2>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d03e      	beq.n	800e046 <UART_SetConfig+0x1eae>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfcc:	2b02      	cmp	r3, #2
 800dfce:	d038      	beq.n	800e042 <UART_SetConfig+0x1eaa>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd4:	2b03      	cmp	r3, #3
 800dfd6:	d032      	beq.n	800e03e <UART_SetConfig+0x1ea6>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfdc:	2b04      	cmp	r3, #4
 800dfde:	d02c      	beq.n	800e03a <UART_SetConfig+0x1ea2>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe4:	2b05      	cmp	r3, #5
 800dfe6:	d026      	beq.n	800e036 <UART_SetConfig+0x1e9e>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfec:	2b06      	cmp	r3, #6
 800dfee:	d020      	beq.n	800e032 <UART_SetConfig+0x1e9a>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff4:	2b07      	cmp	r3, #7
 800dff6:	d01a      	beq.n	800e02e <UART_SetConfig+0x1e96>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffc:	2b08      	cmp	r3, #8
 800dffe:	d014      	beq.n	800e02a <UART_SetConfig+0x1e92>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e004:	2b09      	cmp	r3, #9
 800e006:	d00e      	beq.n	800e026 <UART_SetConfig+0x1e8e>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e00c:	2b0a      	cmp	r3, #10
 800e00e:	d008      	beq.n	800e022 <UART_SetConfig+0x1e8a>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e014:	2b0b      	cmp	r3, #11
 800e016:	d102      	bne.n	800e01e <UART_SetConfig+0x1e86>
 800e018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e01c:	e016      	b.n	800e04c <UART_SetConfig+0x1eb4>
 800e01e:	2301      	movs	r3, #1
 800e020:	e014      	b.n	800e04c <UART_SetConfig+0x1eb4>
 800e022:	2380      	movs	r3, #128	; 0x80
 800e024:	e012      	b.n	800e04c <UART_SetConfig+0x1eb4>
 800e026:	2340      	movs	r3, #64	; 0x40
 800e028:	e010      	b.n	800e04c <UART_SetConfig+0x1eb4>
 800e02a:	2320      	movs	r3, #32
 800e02c:	e00e      	b.n	800e04c <UART_SetConfig+0x1eb4>
 800e02e:	2310      	movs	r3, #16
 800e030:	e00c      	b.n	800e04c <UART_SetConfig+0x1eb4>
 800e032:	230c      	movs	r3, #12
 800e034:	e00a      	b.n	800e04c <UART_SetConfig+0x1eb4>
 800e036:	230a      	movs	r3, #10
 800e038:	e008      	b.n	800e04c <UART_SetConfig+0x1eb4>
 800e03a:	2308      	movs	r3, #8
 800e03c:	e006      	b.n	800e04c <UART_SetConfig+0x1eb4>
 800e03e:	2306      	movs	r3, #6
 800e040:	e004      	b.n	800e04c <UART_SetConfig+0x1eb4>
 800e042:	2304      	movs	r3, #4
 800e044:	e002      	b.n	800e04c <UART_SetConfig+0x1eb4>
 800e046:	2302      	movs	r3, #2
 800e048:	e000      	b.n	800e04c <UART_SetConfig+0x1eb4>
 800e04a:	2301      	movs	r3, #1
 800e04c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	085b      	lsrs	r3, r3, #1
 800e056:	441a      	add	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e060:	b29b      	uxth	r3, r3
 800e062:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e064:	e1f2      	b.n	800e44c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e066:	f107 030c 	add.w	r3, r7, #12
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fb fe10 	bl	8009c90 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e070:	693a      	ldr	r2, [r7, #16]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e076:	2b00      	cmp	r3, #0
 800e078:	d044      	beq.n	800e104 <UART_SetConfig+0x1f6c>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d03e      	beq.n	800e100 <UART_SetConfig+0x1f68>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e086:	2b02      	cmp	r3, #2
 800e088:	d038      	beq.n	800e0fc <UART_SetConfig+0x1f64>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08e:	2b03      	cmp	r3, #3
 800e090:	d032      	beq.n	800e0f8 <UART_SetConfig+0x1f60>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e096:	2b04      	cmp	r3, #4
 800e098:	d02c      	beq.n	800e0f4 <UART_SetConfig+0x1f5c>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e09e:	2b05      	cmp	r3, #5
 800e0a0:	d026      	beq.n	800e0f0 <UART_SetConfig+0x1f58>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a6:	2b06      	cmp	r3, #6
 800e0a8:	d020      	beq.n	800e0ec <UART_SetConfig+0x1f54>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ae:	2b07      	cmp	r3, #7
 800e0b0:	d01a      	beq.n	800e0e8 <UART_SetConfig+0x1f50>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b6:	2b08      	cmp	r3, #8
 800e0b8:	d014      	beq.n	800e0e4 <UART_SetConfig+0x1f4c>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0be:	2b09      	cmp	r3, #9
 800e0c0:	d00e      	beq.n	800e0e0 <UART_SetConfig+0x1f48>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c6:	2b0a      	cmp	r3, #10
 800e0c8:	d008      	beq.n	800e0dc <UART_SetConfig+0x1f44>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ce:	2b0b      	cmp	r3, #11
 800e0d0:	d102      	bne.n	800e0d8 <UART_SetConfig+0x1f40>
 800e0d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0d6:	e016      	b.n	800e106 <UART_SetConfig+0x1f6e>
 800e0d8:	2301      	movs	r3, #1
 800e0da:	e014      	b.n	800e106 <UART_SetConfig+0x1f6e>
 800e0dc:	2380      	movs	r3, #128	; 0x80
 800e0de:	e012      	b.n	800e106 <UART_SetConfig+0x1f6e>
 800e0e0:	2340      	movs	r3, #64	; 0x40
 800e0e2:	e010      	b.n	800e106 <UART_SetConfig+0x1f6e>
 800e0e4:	2320      	movs	r3, #32
 800e0e6:	e00e      	b.n	800e106 <UART_SetConfig+0x1f6e>
 800e0e8:	2310      	movs	r3, #16
 800e0ea:	e00c      	b.n	800e106 <UART_SetConfig+0x1f6e>
 800e0ec:	230c      	movs	r3, #12
 800e0ee:	e00a      	b.n	800e106 <UART_SetConfig+0x1f6e>
 800e0f0:	230a      	movs	r3, #10
 800e0f2:	e008      	b.n	800e106 <UART_SetConfig+0x1f6e>
 800e0f4:	2308      	movs	r3, #8
 800e0f6:	e006      	b.n	800e106 <UART_SetConfig+0x1f6e>
 800e0f8:	2306      	movs	r3, #6
 800e0fa:	e004      	b.n	800e106 <UART_SetConfig+0x1f6e>
 800e0fc:	2304      	movs	r3, #4
 800e0fe:	e002      	b.n	800e106 <UART_SetConfig+0x1f6e>
 800e100:	2302      	movs	r3, #2
 800e102:	e000      	b.n	800e106 <UART_SetConfig+0x1f6e>
 800e104:	2301      	movs	r3, #1
 800e106:	fbb2 f2f3 	udiv	r2, r2, r3
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	085b      	lsrs	r3, r3, #1
 800e110:	441a      	add	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	fbb2 f3f3 	udiv	r3, r2, r3
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e11e:	e195      	b.n	800e44c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e120:	4b87      	ldr	r3, [pc, #540]	; (800e340 <UART_SetConfig+0x21a8>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f003 0320 	and.w	r3, r3, #32
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d05d      	beq.n	800e1e8 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e12c:	4b84      	ldr	r3, [pc, #528]	; (800e340 <UART_SetConfig+0x21a8>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	08db      	lsrs	r3, r3, #3
 800e132:	f003 0303 	and.w	r3, r3, #3
 800e136:	4a83      	ldr	r2, [pc, #524]	; (800e344 <UART_SetConfig+0x21ac>)
 800e138:	40da      	lsrs	r2, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d044      	beq.n	800e1cc <UART_SetConfig+0x2034>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e146:	2b01      	cmp	r3, #1
 800e148:	d03e      	beq.n	800e1c8 <UART_SetConfig+0x2030>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14e:	2b02      	cmp	r3, #2
 800e150:	d038      	beq.n	800e1c4 <UART_SetConfig+0x202c>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e156:	2b03      	cmp	r3, #3
 800e158:	d032      	beq.n	800e1c0 <UART_SetConfig+0x2028>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e15e:	2b04      	cmp	r3, #4
 800e160:	d02c      	beq.n	800e1bc <UART_SetConfig+0x2024>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e166:	2b05      	cmp	r3, #5
 800e168:	d026      	beq.n	800e1b8 <UART_SetConfig+0x2020>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e16e:	2b06      	cmp	r3, #6
 800e170:	d020      	beq.n	800e1b4 <UART_SetConfig+0x201c>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e176:	2b07      	cmp	r3, #7
 800e178:	d01a      	beq.n	800e1b0 <UART_SetConfig+0x2018>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17e:	2b08      	cmp	r3, #8
 800e180:	d014      	beq.n	800e1ac <UART_SetConfig+0x2014>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e186:	2b09      	cmp	r3, #9
 800e188:	d00e      	beq.n	800e1a8 <UART_SetConfig+0x2010>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18e:	2b0a      	cmp	r3, #10
 800e190:	d008      	beq.n	800e1a4 <UART_SetConfig+0x200c>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e196:	2b0b      	cmp	r3, #11
 800e198:	d102      	bne.n	800e1a0 <UART_SetConfig+0x2008>
 800e19a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e19e:	e016      	b.n	800e1ce <UART_SetConfig+0x2036>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e014      	b.n	800e1ce <UART_SetConfig+0x2036>
 800e1a4:	2380      	movs	r3, #128	; 0x80
 800e1a6:	e012      	b.n	800e1ce <UART_SetConfig+0x2036>
 800e1a8:	2340      	movs	r3, #64	; 0x40
 800e1aa:	e010      	b.n	800e1ce <UART_SetConfig+0x2036>
 800e1ac:	2320      	movs	r3, #32
 800e1ae:	e00e      	b.n	800e1ce <UART_SetConfig+0x2036>
 800e1b0:	2310      	movs	r3, #16
 800e1b2:	e00c      	b.n	800e1ce <UART_SetConfig+0x2036>
 800e1b4:	230c      	movs	r3, #12
 800e1b6:	e00a      	b.n	800e1ce <UART_SetConfig+0x2036>
 800e1b8:	230a      	movs	r3, #10
 800e1ba:	e008      	b.n	800e1ce <UART_SetConfig+0x2036>
 800e1bc:	2308      	movs	r3, #8
 800e1be:	e006      	b.n	800e1ce <UART_SetConfig+0x2036>
 800e1c0:	2306      	movs	r3, #6
 800e1c2:	e004      	b.n	800e1ce <UART_SetConfig+0x2036>
 800e1c4:	2304      	movs	r3, #4
 800e1c6:	e002      	b.n	800e1ce <UART_SetConfig+0x2036>
 800e1c8:	2302      	movs	r3, #2
 800e1ca:	e000      	b.n	800e1ce <UART_SetConfig+0x2036>
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	fbb2 f2f3 	udiv	r2, r2, r3
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	085b      	lsrs	r3, r3, #1
 800e1d8:	441a      	add	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800e1e6:	e131      	b.n	800e44c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d043      	beq.n	800e278 <UART_SetConfig+0x20e0>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d03d      	beq.n	800e274 <UART_SetConfig+0x20dc>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d037      	beq.n	800e270 <UART_SetConfig+0x20d8>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e204:	2b03      	cmp	r3, #3
 800e206:	d031      	beq.n	800e26c <UART_SetConfig+0x20d4>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e20c:	2b04      	cmp	r3, #4
 800e20e:	d02b      	beq.n	800e268 <UART_SetConfig+0x20d0>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e214:	2b05      	cmp	r3, #5
 800e216:	d025      	beq.n	800e264 <UART_SetConfig+0x20cc>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e21c:	2b06      	cmp	r3, #6
 800e21e:	d01f      	beq.n	800e260 <UART_SetConfig+0x20c8>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e224:	2b07      	cmp	r3, #7
 800e226:	d019      	beq.n	800e25c <UART_SetConfig+0x20c4>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e22c:	2b08      	cmp	r3, #8
 800e22e:	d013      	beq.n	800e258 <UART_SetConfig+0x20c0>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e234:	2b09      	cmp	r3, #9
 800e236:	d00d      	beq.n	800e254 <UART_SetConfig+0x20bc>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e23c:	2b0a      	cmp	r3, #10
 800e23e:	d007      	beq.n	800e250 <UART_SetConfig+0x20b8>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e244:	2b0b      	cmp	r3, #11
 800e246:	d101      	bne.n	800e24c <UART_SetConfig+0x20b4>
 800e248:	4b3f      	ldr	r3, [pc, #252]	; (800e348 <UART_SetConfig+0x21b0>)
 800e24a:	e016      	b.n	800e27a <UART_SetConfig+0x20e2>
 800e24c:	4b3d      	ldr	r3, [pc, #244]	; (800e344 <UART_SetConfig+0x21ac>)
 800e24e:	e014      	b.n	800e27a <UART_SetConfig+0x20e2>
 800e250:	4b3e      	ldr	r3, [pc, #248]	; (800e34c <UART_SetConfig+0x21b4>)
 800e252:	e012      	b.n	800e27a <UART_SetConfig+0x20e2>
 800e254:	4b3e      	ldr	r3, [pc, #248]	; (800e350 <UART_SetConfig+0x21b8>)
 800e256:	e010      	b.n	800e27a <UART_SetConfig+0x20e2>
 800e258:	4b3e      	ldr	r3, [pc, #248]	; (800e354 <UART_SetConfig+0x21bc>)
 800e25a:	e00e      	b.n	800e27a <UART_SetConfig+0x20e2>
 800e25c:	4b3e      	ldr	r3, [pc, #248]	; (800e358 <UART_SetConfig+0x21c0>)
 800e25e:	e00c      	b.n	800e27a <UART_SetConfig+0x20e2>
 800e260:	4b3e      	ldr	r3, [pc, #248]	; (800e35c <UART_SetConfig+0x21c4>)
 800e262:	e00a      	b.n	800e27a <UART_SetConfig+0x20e2>
 800e264:	4b3e      	ldr	r3, [pc, #248]	; (800e360 <UART_SetConfig+0x21c8>)
 800e266:	e008      	b.n	800e27a <UART_SetConfig+0x20e2>
 800e268:	4b3e      	ldr	r3, [pc, #248]	; (800e364 <UART_SetConfig+0x21cc>)
 800e26a:	e006      	b.n	800e27a <UART_SetConfig+0x20e2>
 800e26c:	4b3e      	ldr	r3, [pc, #248]	; (800e368 <UART_SetConfig+0x21d0>)
 800e26e:	e004      	b.n	800e27a <UART_SetConfig+0x20e2>
 800e270:	4b3e      	ldr	r3, [pc, #248]	; (800e36c <UART_SetConfig+0x21d4>)
 800e272:	e002      	b.n	800e27a <UART_SetConfig+0x20e2>
 800e274:	4b3e      	ldr	r3, [pc, #248]	; (800e370 <UART_SetConfig+0x21d8>)
 800e276:	e000      	b.n	800e27a <UART_SetConfig+0x20e2>
 800e278:	4b32      	ldr	r3, [pc, #200]	; (800e344 <UART_SetConfig+0x21ac>)
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	6852      	ldr	r2, [r2, #4]
 800e27e:	0852      	lsrs	r2, r2, #1
 800e280:	441a      	add	r2, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	fbb2 f3f3 	udiv	r3, r2, r3
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e28e:	e0dd      	b.n	800e44c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e294:	2b00      	cmp	r3, #0
 800e296:	d046      	beq.n	800e326 <UART_SetConfig+0x218e>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d040      	beq.n	800e322 <UART_SetConfig+0x218a>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a4:	2b02      	cmp	r3, #2
 800e2a6:	d03a      	beq.n	800e31e <UART_SetConfig+0x2186>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ac:	2b03      	cmp	r3, #3
 800e2ae:	d034      	beq.n	800e31a <UART_SetConfig+0x2182>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b4:	2b04      	cmp	r3, #4
 800e2b6:	d02e      	beq.n	800e316 <UART_SetConfig+0x217e>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2bc:	2b05      	cmp	r3, #5
 800e2be:	d028      	beq.n	800e312 <UART_SetConfig+0x217a>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c4:	2b06      	cmp	r3, #6
 800e2c6:	d022      	beq.n	800e30e <UART_SetConfig+0x2176>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2cc:	2b07      	cmp	r3, #7
 800e2ce:	d01c      	beq.n	800e30a <UART_SetConfig+0x2172>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d4:	2b08      	cmp	r3, #8
 800e2d6:	d016      	beq.n	800e306 <UART_SetConfig+0x216e>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2dc:	2b09      	cmp	r3, #9
 800e2de:	d00f      	beq.n	800e300 <UART_SetConfig+0x2168>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e4:	2b0a      	cmp	r3, #10
 800e2e6:	d008      	beq.n	800e2fa <UART_SetConfig+0x2162>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ec:	2b0b      	cmp	r3, #11
 800e2ee:	d102      	bne.n	800e2f6 <UART_SetConfig+0x215e>
 800e2f0:	f643 5309 	movw	r3, #15625	; 0x3d09
 800e2f4:	e018      	b.n	800e328 <UART_SetConfig+0x2190>
 800e2f6:	4b18      	ldr	r3, [pc, #96]	; (800e358 <UART_SetConfig+0x21c0>)
 800e2f8:	e016      	b.n	800e328 <UART_SetConfig+0x2190>
 800e2fa:	f647 2312 	movw	r3, #31250	; 0x7a12
 800e2fe:	e013      	b.n	800e328 <UART_SetConfig+0x2190>
 800e300:	f24f 4324 	movw	r3, #62500	; 0xf424
 800e304:	e010      	b.n	800e328 <UART_SetConfig+0x2190>
 800e306:	4b1b      	ldr	r3, [pc, #108]	; (800e374 <UART_SetConfig+0x21dc>)
 800e308:	e00e      	b.n	800e328 <UART_SetConfig+0x2190>
 800e30a:	4b0f      	ldr	r3, [pc, #60]	; (800e348 <UART_SetConfig+0x21b0>)
 800e30c:	e00c      	b.n	800e328 <UART_SetConfig+0x2190>
 800e30e:	4b1a      	ldr	r3, [pc, #104]	; (800e378 <UART_SetConfig+0x21e0>)
 800e310:	e00a      	b.n	800e328 <UART_SetConfig+0x2190>
 800e312:	4b1a      	ldr	r3, [pc, #104]	; (800e37c <UART_SetConfig+0x21e4>)
 800e314:	e008      	b.n	800e328 <UART_SetConfig+0x2190>
 800e316:	4b0d      	ldr	r3, [pc, #52]	; (800e34c <UART_SetConfig+0x21b4>)
 800e318:	e006      	b.n	800e328 <UART_SetConfig+0x2190>
 800e31a:	4b19      	ldr	r3, [pc, #100]	; (800e380 <UART_SetConfig+0x21e8>)
 800e31c:	e004      	b.n	800e328 <UART_SetConfig+0x2190>
 800e31e:	4b0c      	ldr	r3, [pc, #48]	; (800e350 <UART_SetConfig+0x21b8>)
 800e320:	e002      	b.n	800e328 <UART_SetConfig+0x2190>
 800e322:	4b0c      	ldr	r3, [pc, #48]	; (800e354 <UART_SetConfig+0x21bc>)
 800e324:	e000      	b.n	800e328 <UART_SetConfig+0x2190>
 800e326:	4b0c      	ldr	r3, [pc, #48]	; (800e358 <UART_SetConfig+0x21c0>)
 800e328:	687a      	ldr	r2, [r7, #4]
 800e32a:	6852      	ldr	r2, [r2, #4]
 800e32c:	0852      	lsrs	r2, r2, #1
 800e32e:	441a      	add	r2, r3
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	fbb2 f3f3 	udiv	r3, r2, r3
 800e338:	b29b      	uxth	r3, r3
 800e33a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e33c:	e086      	b.n	800e44c <UART_SetConfig+0x22b4>
 800e33e:	bf00      	nop
 800e340:	58024400 	.word	0x58024400
 800e344:	03d09000 	.word	0x03d09000
 800e348:	0003d090 	.word	0x0003d090
 800e34c:	0007a120 	.word	0x0007a120
 800e350:	000f4240 	.word	0x000f4240
 800e354:	001e8480 	.word	0x001e8480
 800e358:	003d0900 	.word	0x003d0900
 800e35c:	00516155 	.word	0x00516155
 800e360:	0061a800 	.word	0x0061a800
 800e364:	007a1200 	.word	0x007a1200
 800e368:	00a2c2aa 	.word	0x00a2c2aa
 800e36c:	00f42400 	.word	0x00f42400
 800e370:	01e84800 	.word	0x01e84800
 800e374:	0001e848 	.word	0x0001e848
 800e378:	00051615 	.word	0x00051615
 800e37c:	00061a80 	.word	0x00061a80
 800e380:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d04e      	beq.n	800e42a <UART_SetConfig+0x2292>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e390:	2b01      	cmp	r3, #1
 800e392:	d047      	beq.n	800e424 <UART_SetConfig+0x228c>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e398:	2b02      	cmp	r3, #2
 800e39a:	d040      	beq.n	800e41e <UART_SetConfig+0x2286>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a0:	2b03      	cmp	r3, #3
 800e3a2:	d039      	beq.n	800e418 <UART_SetConfig+0x2280>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a8:	2b04      	cmp	r3, #4
 800e3aa:	d032      	beq.n	800e412 <UART_SetConfig+0x227a>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b0:	2b05      	cmp	r3, #5
 800e3b2:	d02b      	beq.n	800e40c <UART_SetConfig+0x2274>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b8:	2b06      	cmp	r3, #6
 800e3ba:	d024      	beq.n	800e406 <UART_SetConfig+0x226e>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c0:	2b07      	cmp	r3, #7
 800e3c2:	d01d      	beq.n	800e400 <UART_SetConfig+0x2268>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c8:	2b08      	cmp	r3, #8
 800e3ca:	d016      	beq.n	800e3fa <UART_SetConfig+0x2262>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d0:	2b09      	cmp	r3, #9
 800e3d2:	d00f      	beq.n	800e3f4 <UART_SetConfig+0x225c>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d8:	2b0a      	cmp	r3, #10
 800e3da:	d008      	beq.n	800e3ee <UART_SetConfig+0x2256>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e0:	2b0b      	cmp	r3, #11
 800e3e2:	d101      	bne.n	800e3e8 <UART_SetConfig+0x2250>
 800e3e4:	2380      	movs	r3, #128	; 0x80
 800e3e6:	e022      	b.n	800e42e <UART_SetConfig+0x2296>
 800e3e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3ec:	e01f      	b.n	800e42e <UART_SetConfig+0x2296>
 800e3ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3f2:	e01c      	b.n	800e42e <UART_SetConfig+0x2296>
 800e3f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3f8:	e019      	b.n	800e42e <UART_SetConfig+0x2296>
 800e3fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3fe:	e016      	b.n	800e42e <UART_SetConfig+0x2296>
 800e400:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e404:	e013      	b.n	800e42e <UART_SetConfig+0x2296>
 800e406:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800e40a:	e010      	b.n	800e42e <UART_SetConfig+0x2296>
 800e40c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800e410:	e00d      	b.n	800e42e <UART_SetConfig+0x2296>
 800e412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e416:	e00a      	b.n	800e42e <UART_SetConfig+0x2296>
 800e418:	f241 5355 	movw	r3, #5461	; 0x1555
 800e41c:	e007      	b.n	800e42e <UART_SetConfig+0x2296>
 800e41e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e422:	e004      	b.n	800e42e <UART_SetConfig+0x2296>
 800e424:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e428:	e001      	b.n	800e42e <UART_SetConfig+0x2296>
 800e42a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	6852      	ldr	r2, [r2, #4]
 800e432:	0852      	lsrs	r2, r2, #1
 800e434:	441a      	add	r2, r3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e43e:	b29b      	uxth	r3, r3
 800e440:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e442:	e003      	b.n	800e44c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800e444:	2301      	movs	r3, #1
 800e446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800e44a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e44e:	2b0f      	cmp	r3, #15
 800e450:	d908      	bls.n	800e464 <UART_SetConfig+0x22cc>
 800e452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e458:	d204      	bcs.n	800e464 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e460:	60da      	str	r2, [r3, #12]
 800e462:	e002      	b.n	800e46a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800e464:	2301      	movs	r3, #1
 800e466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2201      	movs	r2, #1
 800e46e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2201      	movs	r2, #1
 800e476:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2200      	movs	r2, #0
 800e47e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800e486:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3740      	adds	r7, #64	; 0x40
 800e48e:	46bd      	mov	sp, r7
 800e490:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800e494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a0:	f003 0301 	and.w	r3, r3, #1
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00a      	beq.n	800e4be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	430a      	orrs	r2, r1
 800e4bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4c2:	f003 0302 	and.w	r3, r3, #2
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d00a      	beq.n	800e4e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	430a      	orrs	r2, r1
 800e4de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4e4:	f003 0304 	and.w	r3, r3, #4
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d00a      	beq.n	800e502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	430a      	orrs	r2, r1
 800e500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e506:	f003 0308 	and.w	r3, r3, #8
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00a      	beq.n	800e524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	430a      	orrs	r2, r1
 800e522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e528:	f003 0310 	and.w	r3, r3, #16
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00a      	beq.n	800e546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	430a      	orrs	r2, r1
 800e544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e54a:	f003 0320 	and.w	r3, r3, #32
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d00a      	beq.n	800e568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	430a      	orrs	r2, r1
 800e566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e56c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e570:	2b00      	cmp	r3, #0
 800e572:	d01a      	beq.n	800e5aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	430a      	orrs	r2, r1
 800e588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e58e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e592:	d10a      	bne.n	800e5aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	430a      	orrs	r2, r1
 800e5a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00a      	beq.n	800e5cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	430a      	orrs	r2, r1
 800e5ca:	605a      	str	r2, [r3, #4]
  }
}
 800e5cc:	bf00      	nop
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b086      	sub	sp, #24
 800e5dc:	af02      	add	r7, sp, #8
 800e5de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800e5e8:	f7f3 fa0e 	bl	8001a08 <HAL_GetTick>
 800e5ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f003 0308 	and.w	r3, r3, #8
 800e5f8:	2b08      	cmp	r3, #8
 800e5fa:	d10e      	bne.n	800e61a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e5fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e600:	9300      	str	r3, [sp, #0]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2200      	movs	r2, #0
 800e606:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 f82c 	bl	800e668 <UART_WaitOnFlagUntilTimeout>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d001      	beq.n	800e61a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e616:	2303      	movs	r3, #3
 800e618:	e022      	b.n	800e660 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f003 0304 	and.w	r3, r3, #4
 800e624:	2b04      	cmp	r3, #4
 800e626:	d10e      	bne.n	800e646 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e62c:	9300      	str	r3, [sp, #0]
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2200      	movs	r2, #0
 800e632:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 f816 	bl	800e668 <UART_WaitOnFlagUntilTimeout>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d001      	beq.n	800e646 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e642:	2303      	movs	r3, #3
 800e644:	e00c      	b.n	800e660 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2220      	movs	r2, #32
 800e64a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2220      	movs	r2, #32
 800e652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2200      	movs	r2, #0
 800e65a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e65e:	2300      	movs	r3, #0
}
 800e660:	4618      	mov	r0, r3
 800e662:	3710      	adds	r7, #16
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}

0800e668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b084      	sub	sp, #16
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	603b      	str	r3, [r7, #0]
 800e674:	4613      	mov	r3, r2
 800e676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e678:	e062      	b.n	800e740 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e680:	d05e      	beq.n	800e740 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e682:	f7f3 f9c1 	bl	8001a08 <HAL_GetTick>
 800e686:	4602      	mov	r2, r0
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	1ad3      	subs	r3, r2, r3
 800e68c:	69ba      	ldr	r2, [r7, #24]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d302      	bcc.n	800e698 <UART_WaitOnFlagUntilTimeout+0x30>
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d11d      	bne.n	800e6d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	681a      	ldr	r2, [r3, #0]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e6a6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	689a      	ldr	r2, [r3, #8]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f022 0201 	bic.w	r2, r2, #1
 800e6b6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2220      	movs	r2, #32
 800e6bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2220      	movs	r2, #32
 800e6c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800e6d0:	2303      	movs	r3, #3
 800e6d2:	e045      	b.n	800e760 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f003 0304 	and.w	r3, r3, #4
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d02e      	beq.n	800e740 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	69db      	ldr	r3, [r3, #28]
 800e6e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e6ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e6f0:	d126      	bne.n	800e740 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e6fa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e70a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	689a      	ldr	r2, [r3, #8]
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f022 0201 	bic.w	r2, r2, #1
 800e71a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2220      	movs	r2, #32
 800e720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2220      	movs	r2, #32
 800e728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2220      	movs	r2, #32
 800e730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2200      	movs	r2, #0
 800e738:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800e73c:	2303      	movs	r3, #3
 800e73e:	e00f      	b.n	800e760 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	69da      	ldr	r2, [r3, #28]
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	4013      	ands	r3, r2
 800e74a:	68ba      	ldr	r2, [r7, #8]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	bf0c      	ite	eq
 800e750:	2301      	moveq	r3, #1
 800e752:	2300      	movne	r3, #0
 800e754:	b2db      	uxtb	r3, r3
 800e756:	461a      	mov	r2, r3
 800e758:	79fb      	ldrb	r3, [r7, #7]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d08d      	beq.n	800e67a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e75e:	2300      	movs	r3, #0
}
 800e760:	4618      	mov	r0, r3
 800e762:	3710      	adds	r7, #16
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e768:	b480      	push	{r7}
 800e76a:	b085      	sub	sp, #20
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e776:	2b01      	cmp	r3, #1
 800e778:	d101      	bne.n	800e77e <HAL_UARTEx_DisableFifoMode+0x16>
 800e77a:	2302      	movs	r3, #2
 800e77c:	e027      	b.n	800e7ce <HAL_UARTEx_DisableFifoMode+0x66>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2201      	movs	r2, #1
 800e782:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2224      	movs	r2, #36	; 0x24
 800e78a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f022 0201 	bic.w	r2, r2, #1
 800e7a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e7ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2220      	movs	r2, #32
 800e7c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e7cc:	2300      	movs	r3, #0
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3714      	adds	r7, #20
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr

0800e7da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7da:	b580      	push	{r7, lr}
 800e7dc:	b084      	sub	sp, #16
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
 800e7e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d101      	bne.n	800e7f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e7ee:	2302      	movs	r3, #2
 800e7f0:	e02d      	b.n	800e84e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2224      	movs	r2, #36	; 0x24
 800e7fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f022 0201 	bic.w	r2, r2, #1
 800e818:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	689b      	ldr	r3, [r3, #8]
 800e820:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	683a      	ldr	r2, [r7, #0]
 800e82a:	430a      	orrs	r2, r1
 800e82c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 f850 	bl	800e8d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2220      	movs	r2, #32
 800e840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2200      	movs	r2, #0
 800e848:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b084      	sub	sp, #16
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
 800e85e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e866:	2b01      	cmp	r3, #1
 800e868:	d101      	bne.n	800e86e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e86a:	2302      	movs	r3, #2
 800e86c:	e02d      	b.n	800e8ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2201      	movs	r2, #1
 800e872:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2224      	movs	r2, #36	; 0x24
 800e87a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f022 0201 	bic.w	r2, r2, #1
 800e894:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	683a      	ldr	r2, [r7, #0]
 800e8a6:	430a      	orrs	r2, r1
 800e8a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 f812 	bl	800e8d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2220      	movs	r2, #32
 800e8bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e8c8:	2300      	movs	r3, #0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
	...

0800e8d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b089      	sub	sp, #36	; 0x24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800e8dc:	4a2f      	ldr	r2, [pc, #188]	; (800e99c <UARTEx_SetNbDataToProcess+0xc8>)
 800e8de:	f107 0314 	add.w	r3, r7, #20
 800e8e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8e6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800e8ea:	4a2d      	ldr	r2, [pc, #180]	; (800e9a0 <UARTEx_SetNbDataToProcess+0xcc>)
 800e8ec:	f107 030c 	add.w	r3, r7, #12
 800e8f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8f4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d108      	bne.n	800e912 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2201      	movs	r2, #1
 800e904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2201      	movs	r2, #1
 800e90c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e910:	e03d      	b.n	800e98e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e912:	2308      	movs	r3, #8
 800e914:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e916:	2308      	movs	r3, #8
 800e918:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	0e5b      	lsrs	r3, r3, #25
 800e922:	b2db      	uxtb	r3, r3
 800e924:	f003 0307 	and.w	r3, r3, #7
 800e928:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	0f5b      	lsrs	r3, r3, #29
 800e932:	b2db      	uxtb	r3, r3
 800e934:	f003 0307 	and.w	r3, r3, #7
 800e938:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800e93a:	7fbb      	ldrb	r3, [r7, #30]
 800e93c:	7f3a      	ldrb	r2, [r7, #28]
 800e93e:	f107 0120 	add.w	r1, r7, #32
 800e942:	440a      	add	r2, r1
 800e944:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e948:	fb02 f303 	mul.w	r3, r2, r3
 800e94c:	7f3a      	ldrb	r2, [r7, #28]
 800e94e:	f107 0120 	add.w	r1, r7, #32
 800e952:	440a      	add	r2, r1
 800e954:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e958:	fb93 f3f2 	sdiv	r3, r3, r2
 800e95c:	b29a      	uxth	r2, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800e964:	7ffb      	ldrb	r3, [r7, #31]
 800e966:	7f7a      	ldrb	r2, [r7, #29]
 800e968:	f107 0120 	add.w	r1, r7, #32
 800e96c:	440a      	add	r2, r1
 800e96e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e972:	fb02 f303 	mul.w	r3, r2, r3
 800e976:	7f7a      	ldrb	r2, [r7, #29]
 800e978:	f107 0120 	add.w	r1, r7, #32
 800e97c:	440a      	add	r2, r1
 800e97e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e982:	fb93 f3f2 	sdiv	r3, r3, r2
 800e986:	b29a      	uxth	r2, r3
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e98e:	bf00      	nop
 800e990:	3724      	adds	r7, #36	; 0x24
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr
 800e99a:	bf00      	nop
 800e99c:	080144c8 	.word	0x080144c8
 800e9a0:	080144d0 	.word	0x080144d0

0800e9a4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e9a4:	b084      	sub	sp, #16
 800e9a6:	b480      	push	{r7}
 800e9a8:	b085      	sub	sp, #20
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
 800e9ae:	f107 001c 	add.w	r0, r7, #28
 800e9b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e9ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800e9bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e9be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800e9c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800e9c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800e9ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e9cc:	68fa      	ldr	r2, [r7, #12]
 800e9ce:	4313      	orrs	r3, r2
 800e9d0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	685a      	ldr	r2, [r3, #4]
 800e9d6:	4b07      	ldr	r3, [pc, #28]	; (800e9f4 <SDMMC_Init+0x50>)
 800e9d8:	4013      	ands	r3, r2
 800e9da:	68fa      	ldr	r2, [r7, #12]
 800e9dc:	431a      	orrs	r2, r3
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e9e2:	2300      	movs	r3, #0
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3714      	adds	r7, #20
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ee:	b004      	add	sp, #16
 800e9f0:	4770      	bx	lr
 800e9f2:	bf00      	nop
 800e9f4:	ffc02c00 	.word	0xffc02c00

0800e9f8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	370c      	adds	r7, #12
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ea12:	b480      	push	{r7}
 800ea14:	b083      	sub	sp, #12
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
 800ea1a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea26:	2300      	movs	r3, #0
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	370c      	adds	r7, #12
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr

0800ea34 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f043 0203 	orr.w	r2, r3, #3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ea48:	2300      	movs	r3, #0
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	370c      	adds	r7, #12
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr

0800ea56 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ea56:	b480      	push	{r7}
 800ea58:	b083      	sub	sp, #12
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f003 0303 	and.w	r3, r3, #3
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	370c      	adds	r7, #12
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr
	...

0800ea74 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ea92:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ea98:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ea9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eaa0:	68fa      	ldr	r2, [r7, #12]
 800eaa2:	4313      	orrs	r3, r2
 800eaa4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	68da      	ldr	r2, [r3, #12]
 800eaaa:	4b06      	ldr	r3, [pc, #24]	; (800eac4 <SDMMC_SendCommand+0x50>)
 800eaac:	4013      	ands	r3, r2
 800eaae:	68fa      	ldr	r2, [r7, #12]
 800eab0:	431a      	orrs	r2, r3
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800eab6:	2300      	movs	r3, #0
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3714      	adds	r7, #20
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr
 800eac4:	fffee0c0 	.word	0xfffee0c0

0800eac8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	691b      	ldr	r3, [r3, #16]
 800ead4:	b2db      	uxtb	r3, r3
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	370c      	adds	r7, #12
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr

0800eae2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800eae2:	b480      	push	{r7}
 800eae4:	b085      	sub	sp, #20
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
 800eaea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	3314      	adds	r3, #20
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	4413      	add	r3, r2
 800eaf6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3714      	adds	r7, #20
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr

0800eb08 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b085      	sub	sp, #20
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eb12:	2300      	movs	r3, #0
 800eb14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	685a      	ldr	r2, [r3, #4]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eb2e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800eb34:	431a      	orrs	r2, r3
                       Data->DPSM);
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800eb3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	4313      	orrs	r3, r2
 800eb40:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	431a      	orrs	r2, r3
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800eb52:	2300      	movs	r3, #0

}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3714      	adds	r7, #20
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b088      	sub	sp, #32
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800eb6e:	2310      	movs	r3, #16
 800eb70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb82:	f107 0308 	add.w	r3, r7, #8
 800eb86:	4619      	mov	r1, r3
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f7ff ff73 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800eb8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb92:	2110      	movs	r1, #16
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f000 faab 	bl	800f0f0 <SDMMC_GetCmdResp1>
 800eb9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb9c:	69fb      	ldr	r3, [r7, #28]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3720      	adds	r7, #32
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b088      	sub	sp, #32
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
 800ebae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ebb4:	2311      	movs	r3, #17
 800ebb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ebb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ebbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ebc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ebc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ebc8:	f107 0308 	add.w	r3, r7, #8
 800ebcc:	4619      	mov	r1, r3
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7ff ff50 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ebd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebd8:	2111      	movs	r1, #17
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 fa88 	bl	800f0f0 <SDMMC_GetCmdResp1>
 800ebe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebe2:	69fb      	ldr	r3, [r7, #28]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3720      	adds	r7, #32
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b088      	sub	sp, #32
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ebfa:	2312      	movs	r3, #18
 800ebfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ebfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec04:	2300      	movs	r3, #0
 800ec06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec0e:	f107 0308 	add.w	r3, r7, #8
 800ec12:	4619      	mov	r1, r3
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f7ff ff2d 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ec1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec1e:	2112      	movs	r1, #18
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f000 fa65 	bl	800f0f0 <SDMMC_GetCmdResp1>
 800ec26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec28:	69fb      	ldr	r3, [r7, #28]
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3720      	adds	r7, #32
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b088      	sub	sp, #32
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
 800ec3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ec40:	2318      	movs	r3, #24
 800ec42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec54:	f107 0308 	add.w	r3, r7, #8
 800ec58:	4619      	mov	r1, r3
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f7ff ff0a 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ec60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec64:	2118      	movs	r1, #24
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 fa42 	bl	800f0f0 <SDMMC_GetCmdResp1>
 800ec6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec6e:	69fb      	ldr	r3, [r7, #28]
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3720      	adds	r7, #32
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b088      	sub	sp, #32
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ec86:	2319      	movs	r3, #25
 800ec88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec90:	2300      	movs	r3, #0
 800ec92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec9a:	f107 0308 	add.w	r3, r7, #8
 800ec9e:	4619      	mov	r1, r3
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f7ff fee7 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800eca6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecaa:	2119      	movs	r1, #25
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f000 fa1f 	bl	800f0f0 <SDMMC_GetCmdResp1>
 800ecb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecb4:	69fb      	ldr	r3, [r7, #28]
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3720      	adds	r7, #32
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
	...

0800ecc0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b088      	sub	sp, #32
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800eccc:	230c      	movs	r3, #12
 800ecce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ecd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ecda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecde:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ecf8:	f107 0308 	add.w	r3, r7, #8
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f7ff feb8 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ed04:	4a0b      	ldr	r2, [pc, #44]	; (800ed34 <SDMMC_CmdStopTransfer+0x74>)
 800ed06:	210c      	movs	r1, #12
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f000 f9f1 	bl	800f0f0 <SDMMC_GetCmdResp1>
 800ed0e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed22:	d101      	bne.n	800ed28 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ed24:	2300      	movs	r3, #0
 800ed26:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ed28:	69fb      	ldr	r3, [r7, #28]
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3720      	adds	r7, #32
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	05f5e100 	.word	0x05f5e100

0800ed38 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b08a      	sub	sp, #40	; 0x28
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	60f8      	str	r0, [r7, #12]
 800ed40:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ed48:	2307      	movs	r3, #7
 800ed4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed50:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed52:	2300      	movs	r3, #0
 800ed54:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed5a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed5c:	f107 0310 	add.w	r3, r7, #16
 800ed60:	4619      	mov	r1, r3
 800ed62:	68f8      	ldr	r0, [r7, #12]
 800ed64:	f7ff fe86 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ed68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed6c:	2107      	movs	r1, #7
 800ed6e:	68f8      	ldr	r0, [r7, #12]
 800ed70:	f000 f9be 	bl	800f0f0 <SDMMC_GetCmdResp1>
 800ed74:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ed76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3728      	adds	r7, #40	; 0x28
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b088      	sub	sp, #32
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ed90:	2300      	movs	r3, #0
 800ed92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed94:	2300      	movs	r3, #0
 800ed96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed9e:	f107 0308 	add.w	r3, r7, #8
 800eda2:	4619      	mov	r1, r3
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f7ff fe65 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f000 f976 	bl	800f09c <SDMMC_GetCmdError>
 800edb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edb2:	69fb      	ldr	r3, [r7, #28]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3720      	adds	r7, #32
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b088      	sub	sp, #32
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800edc4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800edc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800edca:	2308      	movs	r3, #8
 800edcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800edce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800edd4:	2300      	movs	r3, #0
 800edd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800edd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eddc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edde:	f107 0308 	add.w	r3, r7, #8
 800ede2:	4619      	mov	r1, r3
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f7ff fe45 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 fb6a 	bl	800f4c4 <SDMMC_GetCmdResp7>
 800edf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edf2:	69fb      	ldr	r3, [r7, #28]
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3720      	adds	r7, #32
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b088      	sub	sp, #32
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ee0a:	2337      	movs	r3, #55	; 0x37
 800ee0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee14:	2300      	movs	r3, #0
 800ee16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee1e:	f107 0308 	add.w	r3, r7, #8
 800ee22:	4619      	mov	r1, r3
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7ff fe25 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ee2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee2e:	2137      	movs	r1, #55	; 0x37
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f000 f95d 	bl	800f0f0 <SDMMC_GetCmdResp1>
 800ee36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee38:	69fb      	ldr	r3, [r7, #28]
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3720      	adds	r7, #32
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b088      	sub	sp, #32
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ee50:	2329      	movs	r3, #41	; 0x29
 800ee52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee64:	f107 0308 	add.w	r3, r7, #8
 800ee68:	4619      	mov	r1, r3
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f7ff fe02 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f000 fa75 	bl	800f360 <SDMMC_GetCmdResp3>
 800ee76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee78:	69fb      	ldr	r3, [r7, #28]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3720      	adds	r7, #32
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ee82:	b580      	push	{r7, lr}
 800ee84:	b088      	sub	sp, #32
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
 800ee8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ee90:	2306      	movs	r3, #6
 800ee92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eea4:	f107 0308 	add.w	r3, r7, #8
 800eea8:	4619      	mov	r1, r3
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f7ff fde2 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800eeb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eeb4:	2106      	movs	r1, #6
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 f91a 	bl	800f0f0 <SDMMC_GetCmdResp1>
 800eebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eebe:	69fb      	ldr	r3, [r7, #28]
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3720      	adds	r7, #32
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b088      	sub	sp, #32
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800eed0:	2300      	movs	r3, #0
 800eed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800eed4:	2333      	movs	r3, #51	; 0x33
 800eed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eedc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eede:	2300      	movs	r3, #0
 800eee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eee6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eee8:	f107 0308 	add.w	r3, r7, #8
 800eeec:	4619      	mov	r1, r3
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f7ff fdc0 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800eef4:	f241 3288 	movw	r2, #5000	; 0x1388
 800eef8:	2133      	movs	r1, #51	; 0x33
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 f8f8 	bl	800f0f0 <SDMMC_GetCmdResp1>
 800ef00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef02:	69fb      	ldr	r3, [r7, #28]
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3720      	adds	r7, #32
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b088      	sub	sp, #32
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ef14:	2300      	movs	r3, #0
 800ef16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ef18:	2302      	movs	r3, #2
 800ef1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ef1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ef20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef22:	2300      	movs	r3, #0
 800ef24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef2c:	f107 0308 	add.w	r3, r7, #8
 800ef30:	4619      	mov	r1, r3
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f7ff fd9e 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f000 f9c9 	bl	800f2d0 <SDMMC_GetCmdResp2>
 800ef3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef40:	69fb      	ldr	r3, [r7, #28]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3720      	adds	r7, #32
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef4a:	b580      	push	{r7, lr}
 800ef4c:	b088      	sub	sp, #32
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	6078      	str	r0, [r7, #4]
 800ef52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ef58:	2309      	movs	r3, #9
 800ef5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ef5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ef60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef62:	2300      	movs	r3, #0
 800ef64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef6c:	f107 0308 	add.w	r3, r7, #8
 800ef70:	4619      	mov	r1, r3
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7ff fd7e 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f000 f9a9 	bl	800f2d0 <SDMMC_GetCmdResp2>
 800ef7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef80:	69fb      	ldr	r3, [r7, #28]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3720      	adds	r7, #32
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b088      	sub	sp, #32
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
 800ef92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ef94:	2300      	movs	r3, #0
 800ef96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ef98:	2303      	movs	r3, #3
 800ef9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800efa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efa2:	2300      	movs	r3, #0
 800efa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efac:	f107 0308 	add.w	r3, r7, #8
 800efb0:	4619      	mov	r1, r3
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f7ff fd5e 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800efb8:	683a      	ldr	r2, [r7, #0]
 800efba:	2103      	movs	r1, #3
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 fa0b 	bl	800f3d8 <SDMMC_GetCmdResp6>
 800efc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efc4:	69fb      	ldr	r3, [r7, #28]
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3720      	adds	r7, #32
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	b088      	sub	sp, #32
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
 800efd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800efdc:	230d      	movs	r3, #13
 800efde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800efe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efe6:	2300      	movs	r3, #0
 800efe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eff0:	f107 0308 	add.w	r3, r7, #8
 800eff4:	4619      	mov	r1, r3
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f7ff fd3c 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800effc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f000:	210d      	movs	r1, #13
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f000 f874 	bl	800f0f0 <SDMMC_GetCmdResp1>
 800f008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f00a:	69fb      	ldr	r3, [r7, #28]
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3720      	adds	r7, #32
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b088      	sub	sp, #32
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f01c:	2300      	movs	r3, #0
 800f01e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800f020:	230d      	movs	r3, #13
 800f022:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f024:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f02a:	2300      	movs	r3, #0
 800f02c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f02e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f032:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f034:	f107 0308 	add.w	r3, r7, #8
 800f038:	4619      	mov	r1, r3
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7ff fd1a 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800f040:	f241 3288 	movw	r2, #5000	; 0x1388
 800f044:	210d      	movs	r1, #13
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 f852 	bl	800f0f0 <SDMMC_GetCmdResp1>
 800f04c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f04e:	69fb      	ldr	r3, [r7, #28]
}
 800f050:	4618      	mov	r0, r3
 800f052:	3720      	adds	r7, #32
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}

0800f058 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b088      	sub	sp, #32
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800f060:	2300      	movs	r3, #0
 800f062:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800f064:	230b      	movs	r3, #11
 800f066:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f06c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f06e:	2300      	movs	r3, #0
 800f070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f076:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f078:	f107 0308 	add.w	r3, r7, #8
 800f07c:	4619      	mov	r1, r3
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f7ff fcf8 	bl	800ea74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800f084:	f241 3288 	movw	r2, #5000	; 0x1388
 800f088:	210b      	movs	r1, #11
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 f830 	bl	800f0f0 <SDMMC_GetCmdResp1>
 800f090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f092:	69fb      	ldr	r3, [r7, #28]
}
 800f094:	4618      	mov	r0, r3
 800f096:	3720      	adds	r7, #32
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f09c:	b490      	push	{r4, r7}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f0a4:	4b0f      	ldr	r3, [pc, #60]	; (800f0e4 <SDMMC_GetCmdError+0x48>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	4a0f      	ldr	r2, [pc, #60]	; (800f0e8 <SDMMC_GetCmdError+0x4c>)
 800f0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800f0ae:	0a5b      	lsrs	r3, r3, #9
 800f0b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0b4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800f0b8:	4623      	mov	r3, r4
 800f0ba:	1e5c      	subs	r4, r3, #1
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d102      	bne.n	800f0c6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f0c4:	e009      	b.n	800f0da <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d0f2      	beq.n	800f0b8 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	4a05      	ldr	r2, [pc, #20]	; (800f0ec <SDMMC_GetCmdError+0x50>)
 800f0d6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800f0d8:	2300      	movs	r3, #0
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3708      	adds	r7, #8
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bc90      	pop	{r4, r7}
 800f0e2:	4770      	bx	lr
 800f0e4:	24000000 	.word	0x24000000
 800f0e8:	10624dd3 	.word	0x10624dd3
 800f0ec:	002000c5 	.word	0x002000c5

0800f0f0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f0f0:	b590      	push	{r4, r7, lr}
 800f0f2:	b087      	sub	sp, #28
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	607a      	str	r2, [r7, #4]
 800f0fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f0fe:	4b6f      	ldr	r3, [pc, #444]	; (800f2bc <SDMMC_GetCmdResp1+0x1cc>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4a6f      	ldr	r2, [pc, #444]	; (800f2c0 <SDMMC_GetCmdResp1+0x1d0>)
 800f104:	fba2 2303 	umull	r2, r3, r2, r3
 800f108:	0a5b      	lsrs	r3, r3, #9
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800f110:	4623      	mov	r3, r4
 800f112:	1e5c      	subs	r4, r3, #1
 800f114:	2b00      	cmp	r3, #0
 800f116:	d102      	bne.n	800f11e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f11c:	e0c9      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f122:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800f124:	697a      	ldr	r2, [r7, #20]
 800f126:	4b67      	ldr	r3, [pc, #412]	; (800f2c4 <SDMMC_GetCmdResp1+0x1d4>)
 800f128:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d0f0      	beq.n	800f110 <SDMMC_GetCmdResp1+0x20>
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1eb      	bne.n	800f110 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f13c:	f003 0304 	and.w	r3, r3, #4
 800f140:	2b00      	cmp	r3, #0
 800f142:	d004      	beq.n	800f14e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2204      	movs	r2, #4
 800f148:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f14a:	2304      	movs	r3, #4
 800f14c:	e0b1      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f152:	f003 0301 	and.w	r3, r3, #1
 800f156:	2b00      	cmp	r3, #0
 800f158:	d004      	beq.n	800f164 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2201      	movs	r2, #1
 800f15e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f160:	2301      	movs	r3, #1
 800f162:	e0a6      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	4a58      	ldr	r2, [pc, #352]	; (800f2c8 <SDMMC_GetCmdResp1+0x1d8>)
 800f168:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f7ff fcac 	bl	800eac8 <SDMMC_GetCommandResponse>
 800f170:	4603      	mov	r3, r0
 800f172:	461a      	mov	r2, r3
 800f174:	7afb      	ldrb	r3, [r7, #11]
 800f176:	4293      	cmp	r3, r2
 800f178:	d001      	beq.n	800f17e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f17a:	2301      	movs	r3, #1
 800f17c:	e099      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f17e:	2100      	movs	r1, #0
 800f180:	68f8      	ldr	r0, [r7, #12]
 800f182:	f7ff fcae 	bl	800eae2 <SDMMC_GetResponse>
 800f186:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f188:	693a      	ldr	r2, [r7, #16]
 800f18a:	4b50      	ldr	r3, [pc, #320]	; (800f2cc <SDMMC_GetCmdResp1+0x1dc>)
 800f18c:	4013      	ands	r3, r2
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d101      	bne.n	800f196 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800f192:	2300      	movs	r3, #0
 800f194:	e08d      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	da02      	bge.n	800f1a2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f19c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f1a0:	e087      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d001      	beq.n	800f1b0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f1ac:	2340      	movs	r3, #64	; 0x40
 800f1ae:	e080      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d001      	beq.n	800f1be <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f1ba:	2380      	movs	r3, #128	; 0x80
 800f1bc:	e079      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d002      	beq.n	800f1ce <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f1c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1cc:	e071      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f1d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1dc:	e069      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d002      	beq.n	800f1ee <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f1e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1ec:	e061      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d002      	beq.n	800f1fe <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f1f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f1fc:	e059      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f20c:	e051      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f214:	2b00      	cmp	r3, #0
 800f216:	d002      	beq.n	800f21e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f21c:	e049      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f224:	2b00      	cmp	r3, #0
 800f226:	d002      	beq.n	800f22e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f228:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f22c:	e041      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f234:	2b00      	cmp	r3, #0
 800f236:	d002      	beq.n	800f23e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800f238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f23c:	e039      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f244:	2b00      	cmp	r3, #0
 800f246:	d002      	beq.n	800f24e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f24c:	e031      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f254:	2b00      	cmp	r3, #0
 800f256:	d002      	beq.n	800f25e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f258:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f25c:	e029      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f264:	2b00      	cmp	r3, #0
 800f266:	d002      	beq.n	800f26e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f268:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f26c:	e021      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f274:	2b00      	cmp	r3, #0
 800f276:	d002      	beq.n	800f27e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f278:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f27c:	e019      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f284:	2b00      	cmp	r3, #0
 800f286:	d002      	beq.n	800f28e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f288:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f28c:	e011      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f294:	2b00      	cmp	r3, #0
 800f296:	d002      	beq.n	800f29e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f298:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f29c:	e009      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	f003 0308 	and.w	r3, r3, #8
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d002      	beq.n	800f2ae <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f2a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f2ac:	e001      	b.n	800f2b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f2ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	371c      	adds	r7, #28
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd90      	pop	{r4, r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	24000000 	.word	0x24000000
 800f2c0:	10624dd3 	.word	0x10624dd3
 800f2c4:	00200045 	.word	0x00200045
 800f2c8:	002000c5 	.word	0x002000c5
 800f2cc:	fdffe008 	.word	0xfdffe008

0800f2d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f2d0:	b490      	push	{r4, r7}
 800f2d2:	b084      	sub	sp, #16
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f2d8:	4b1e      	ldr	r3, [pc, #120]	; (800f354 <SDMMC_GetCmdResp2+0x84>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a1e      	ldr	r2, [pc, #120]	; (800f358 <SDMMC_GetCmdResp2+0x88>)
 800f2de:	fba2 2303 	umull	r2, r3, r2, r3
 800f2e2:	0a5b      	lsrs	r3, r3, #9
 800f2e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2e8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800f2ec:	4623      	mov	r3, r4
 800f2ee:	1e5c      	subs	r4, r3, #1
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d102      	bne.n	800f2fa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f2f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f2f8:	e026      	b.n	800f348 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f306:	2b00      	cmp	r3, #0
 800f308:	d0f0      	beq.n	800f2ec <SDMMC_GetCmdResp2+0x1c>
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f310:	2b00      	cmp	r3, #0
 800f312:	d1eb      	bne.n	800f2ec <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f318:	f003 0304 	and.w	r3, r3, #4
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d004      	beq.n	800f32a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2204      	movs	r2, #4
 800f324:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f326:	2304      	movs	r3, #4
 800f328:	e00e      	b.n	800f348 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f32e:	f003 0301 	and.w	r3, r3, #1
 800f332:	2b00      	cmp	r3, #0
 800f334:	d004      	beq.n	800f340 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2201      	movs	r2, #1
 800f33a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f33c:	2301      	movs	r3, #1
 800f33e:	e003      	b.n	800f348 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	4a06      	ldr	r2, [pc, #24]	; (800f35c <SDMMC_GetCmdResp2+0x8c>)
 800f344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f346:	2300      	movs	r3, #0
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3710      	adds	r7, #16
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bc90      	pop	{r4, r7}
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop
 800f354:	24000000 	.word	0x24000000
 800f358:	10624dd3 	.word	0x10624dd3
 800f35c:	002000c5 	.word	0x002000c5

0800f360 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f360:	b490      	push	{r4, r7}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f368:	4b18      	ldr	r3, [pc, #96]	; (800f3cc <SDMMC_GetCmdResp3+0x6c>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	4a18      	ldr	r2, [pc, #96]	; (800f3d0 <SDMMC_GetCmdResp3+0x70>)
 800f36e:	fba2 2303 	umull	r2, r3, r2, r3
 800f372:	0a5b      	lsrs	r3, r3, #9
 800f374:	f241 3288 	movw	r2, #5000	; 0x1388
 800f378:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800f37c:	4623      	mov	r3, r4
 800f37e:	1e5c      	subs	r4, r3, #1
 800f380:	2b00      	cmp	r3, #0
 800f382:	d102      	bne.n	800f38a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f384:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f388:	e01b      	b.n	800f3c2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f38e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f396:	2b00      	cmp	r3, #0
 800f398:	d0f0      	beq.n	800f37c <SDMMC_GetCmdResp3+0x1c>
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d1eb      	bne.n	800f37c <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3a8:	f003 0304 	and.w	r3, r3, #4
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d004      	beq.n	800f3ba <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2204      	movs	r2, #4
 800f3b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3b6:	2304      	movs	r3, #4
 800f3b8:	e003      	b.n	800f3c2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	4a05      	ldr	r2, [pc, #20]	; (800f3d4 <SDMMC_GetCmdResp3+0x74>)
 800f3be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f3c0:	2300      	movs	r3, #0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bc90      	pop	{r4, r7}
 800f3ca:	4770      	bx	lr
 800f3cc:	24000000 	.word	0x24000000
 800f3d0:	10624dd3 	.word	0x10624dd3
 800f3d4:	002000c5 	.word	0x002000c5

0800f3d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f3d8:	b590      	push	{r4, r7, lr}
 800f3da:	b087      	sub	sp, #28
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	607a      	str	r2, [r7, #4]
 800f3e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f3e6:	4b34      	ldr	r3, [pc, #208]	; (800f4b8 <SDMMC_GetCmdResp6+0xe0>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	4a34      	ldr	r2, [pc, #208]	; (800f4bc <SDMMC_GetCmdResp6+0xe4>)
 800f3ec:	fba2 2303 	umull	r2, r3, r2, r3
 800f3f0:	0a5b      	lsrs	r3, r3, #9
 800f3f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3f6:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800f3fa:	4623      	mov	r3, r4
 800f3fc:	1e5c      	subs	r4, r3, #1
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d102      	bne.n	800f408 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f402:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f406:	e052      	b.n	800f4ae <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f40c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f414:	2b00      	cmp	r3, #0
 800f416:	d0f0      	beq.n	800f3fa <SDMMC_GetCmdResp6+0x22>
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d1eb      	bne.n	800f3fa <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f426:	f003 0304 	and.w	r3, r3, #4
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d004      	beq.n	800f438 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2204      	movs	r2, #4
 800f432:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f434:	2304      	movs	r3, #4
 800f436:	e03a      	b.n	800f4ae <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f43c:	f003 0301 	and.w	r3, r3, #1
 800f440:	2b00      	cmp	r3, #0
 800f442:	d004      	beq.n	800f44e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2201      	movs	r2, #1
 800f448:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f44a:	2301      	movs	r3, #1
 800f44c:	e02f      	b.n	800f4ae <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f44e:	68f8      	ldr	r0, [r7, #12]
 800f450:	f7ff fb3a 	bl	800eac8 <SDMMC_GetCommandResponse>
 800f454:	4603      	mov	r3, r0
 800f456:	461a      	mov	r2, r3
 800f458:	7afb      	ldrb	r3, [r7, #11]
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d001      	beq.n	800f462 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f45e:	2301      	movs	r3, #1
 800f460:	e025      	b.n	800f4ae <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	4a16      	ldr	r2, [pc, #88]	; (800f4c0 <SDMMC_GetCmdResp6+0xe8>)
 800f466:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f468:	2100      	movs	r1, #0
 800f46a:	68f8      	ldr	r0, [r7, #12]
 800f46c:	f7ff fb39 	bl	800eae2 <SDMMC_GetResponse>
 800f470:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d106      	bne.n	800f48a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	0c1b      	lsrs	r3, r3, #16
 800f480:	b29a      	uxth	r2, r3
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f486:	2300      	movs	r3, #0
 800f488:	e011      	b.n	800f4ae <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f490:	2b00      	cmp	r3, #0
 800f492:	d002      	beq.n	800f49a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f498:	e009      	b.n	800f4ae <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d002      	beq.n	800f4aa <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f4a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f4a8:	e001      	b.n	800f4ae <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f4aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	371c      	adds	r7, #28
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd90      	pop	{r4, r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	24000000 	.word	0x24000000
 800f4bc:	10624dd3 	.word	0x10624dd3
 800f4c0:	002000c5 	.word	0x002000c5

0800f4c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f4c4:	b490      	push	{r4, r7}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f4cc:	4b21      	ldr	r3, [pc, #132]	; (800f554 <SDMMC_GetCmdResp7+0x90>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4a21      	ldr	r2, [pc, #132]	; (800f558 <SDMMC_GetCmdResp7+0x94>)
 800f4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f4d6:	0a5b      	lsrs	r3, r3, #9
 800f4d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4dc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800f4e0:	4623      	mov	r3, r4
 800f4e2:	1e5c      	subs	r4, r3, #1
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d102      	bne.n	800f4ee <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f4e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4ec:	e02c      	b.n	800f548 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4f2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d0f0      	beq.n	800f4e0 <SDMMC_GetCmdResp7+0x1c>
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1eb      	bne.n	800f4e0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f50c:	f003 0304 	and.w	r3, r3, #4
 800f510:	2b00      	cmp	r3, #0
 800f512:	d004      	beq.n	800f51e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2204      	movs	r2, #4
 800f518:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f51a:	2304      	movs	r3, #4
 800f51c:	e014      	b.n	800f548 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f522:	f003 0301 	and.w	r3, r3, #1
 800f526:	2b00      	cmp	r3, #0
 800f528:	d004      	beq.n	800f534 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2201      	movs	r2, #1
 800f52e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f530:	2301      	movs	r3, #1
 800f532:	e009      	b.n	800f548 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d002      	beq.n	800f546 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2240      	movs	r2, #64	; 0x40
 800f544:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f546:	2300      	movs	r3, #0

}
 800f548:	4618      	mov	r0, r3
 800f54a:	3710      	adds	r7, #16
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bc90      	pop	{r4, r7}
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	24000000 	.word	0x24000000
 800f558:	10624dd3 	.word	0x10624dd3

0800f55c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f55c:	b084      	sub	sp, #16
 800f55e:	b580      	push	{r7, lr}
 800f560:	b084      	sub	sp, #16
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
 800f566:	f107 001c 	add.w	r0, r7, #28
 800f56a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f570:	2b01      	cmp	r3, #1
 800f572:	d120      	bne.n	800f5b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f578:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	68da      	ldr	r2, [r3, #12]
 800f584:	4b25      	ldr	r3, [pc, #148]	; (800f61c <USB_CoreInit+0xc0>)
 800f586:	4013      	ands	r3, r2
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d105      	bne.n	800f5aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	68db      	ldr	r3, [r3, #12]
 800f5a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f000 fa4c 	bl	800fa48 <USB_CoreReset>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	73fb      	strb	r3, [r7, #15]
 800f5b4:	e01a      	b.n	800f5ec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 fa40 	bl	800fa48 <USB_CoreReset>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d106      	bne.n	800f5e0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	639a      	str	r2, [r3, #56]	; 0x38
 800f5de:	e005      	b.n	800f5ec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d10b      	bne.n	800f60a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	f043 0206 	orr.w	r2, r3, #6
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	689b      	ldr	r3, [r3, #8]
 800f602:	f043 0220 	orr.w	r2, r3, #32
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3710      	adds	r7, #16
 800f610:	46bd      	mov	sp, r7
 800f612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f616:	b004      	add	sp, #16
 800f618:	4770      	bx	lr
 800f61a:	bf00      	nop
 800f61c:	ffbdffbf 	.word	0xffbdffbf

0800f620 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f620:	b480      	push	{r7}
 800f622:	b083      	sub	sp, #12
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	f023 0201 	bic.w	r2, r3, #1
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	370c      	adds	r7, #12
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr

0800f642 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b082      	sub	sp, #8
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
 800f64a:	460b      	mov	r3, r1
 800f64c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f65a:	78fb      	ldrb	r3, [r7, #3]
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d106      	bne.n	800f66e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	60da      	str	r2, [r3, #12]
 800f66c:	e00b      	b.n	800f686 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f66e:	78fb      	ldrb	r3, [r7, #3]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d106      	bne.n	800f682 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	68db      	ldr	r3, [r3, #12]
 800f678:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	60da      	str	r2, [r3, #12]
 800f680:	e001      	b.n	800f686 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f682:	2301      	movs	r3, #1
 800f684:	e003      	b.n	800f68e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f686:	2032      	movs	r0, #50	; 0x32
 800f688:	f7f2 f9ca 	bl	8001a20 <HAL_Delay>

  return HAL_OK;
 800f68c:	2300      	movs	r3, #0
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3708      	adds	r7, #8
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
	...

0800f698 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f698:	b084      	sub	sp, #16
 800f69a:	b580      	push	{r7, lr}
 800f69c:	b086      	sub	sp, #24
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
 800f6a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f6a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	613b      	str	r3, [r7, #16]
 800f6b6:	e009      	b.n	800f6cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	3340      	adds	r3, #64	; 0x40
 800f6be:	009b      	lsls	r3, r3, #2
 800f6c0:	4413      	add	r3, r2
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	613b      	str	r3, [r7, #16]
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	2b0e      	cmp	r3, #14
 800f6d0:	d9f2      	bls.n	800f6b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d11c      	bne.n	800f712 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f6e6:	f043 0302 	orr.w	r3, r3, #2
 800f6ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	601a      	str	r2, [r3, #0]
 800f710:	e005      	b.n	800f71e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f716:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f724:	461a      	mov	r2, r3
 800f726:	2300      	movs	r3, #0
 800f728:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f730:	4619      	mov	r1, r3
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f738:	461a      	mov	r2, r3
 800f73a:	680b      	ldr	r3, [r1, #0]
 800f73c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f740:	2b01      	cmp	r3, #1
 800f742:	d10c      	bne.n	800f75e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f746:	2b00      	cmp	r3, #0
 800f748:	d104      	bne.n	800f754 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f74a:	2100      	movs	r1, #0
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f000 f949 	bl	800f9e4 <USB_SetDevSpeed>
 800f752:	e008      	b.n	800f766 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f754:	2101      	movs	r1, #1
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 f944 	bl	800f9e4 <USB_SetDevSpeed>
 800f75c:	e003      	b.n	800f766 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f75e:	2103      	movs	r1, #3
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 f93f 	bl	800f9e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f766:	2110      	movs	r1, #16
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f000 f8f3 	bl	800f954 <USB_FlushTxFifo>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d001      	beq.n	800f778 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f774:	2301      	movs	r3, #1
 800f776:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 f911 	bl	800f9a0 <USB_FlushRxFifo>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d001      	beq.n	800f788 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f784:	2301      	movs	r3, #1
 800f786:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f78e:	461a      	mov	r2, r3
 800f790:	2300      	movs	r3, #0
 800f792:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f79a:	461a      	mov	r2, r3
 800f79c:	2300      	movs	r3, #0
 800f79e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	613b      	str	r3, [r7, #16]
 800f7b0:	e043      	b.n	800f83a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	015a      	lsls	r2, r3, #5
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	4413      	add	r3, r2
 800f7ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f7c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7c8:	d118      	bne.n	800f7fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d10a      	bne.n	800f7e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	015a      	lsls	r2, r3, #5
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7dc:	461a      	mov	r2, r3
 800f7de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f7e2:	6013      	str	r3, [r2, #0]
 800f7e4:	e013      	b.n	800f80e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	015a      	lsls	r2, r3, #5
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f7f8:	6013      	str	r3, [r2, #0]
 800f7fa:	e008      	b.n	800f80e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	015a      	lsls	r2, r3, #5
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	4413      	add	r3, r2
 800f804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f808:	461a      	mov	r2, r3
 800f80a:	2300      	movs	r3, #0
 800f80c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	015a      	lsls	r2, r3, #5
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	4413      	add	r3, r2
 800f816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f81a:	461a      	mov	r2, r3
 800f81c:	2300      	movs	r3, #0
 800f81e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	015a      	lsls	r2, r3, #5
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	4413      	add	r3, r2
 800f828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f82c:	461a      	mov	r2, r3
 800f82e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f832:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	3301      	adds	r3, #1
 800f838:	613b      	str	r3, [r7, #16]
 800f83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83c:	693a      	ldr	r2, [r7, #16]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d3b7      	bcc.n	800f7b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f842:	2300      	movs	r3, #0
 800f844:	613b      	str	r3, [r7, #16]
 800f846:	e043      	b.n	800f8d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	015a      	lsls	r2, r3, #5
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	4413      	add	r3, r2
 800f850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f85a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f85e:	d118      	bne.n	800f892 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d10a      	bne.n	800f87c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	015a      	lsls	r2, r3, #5
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	4413      	add	r3, r2
 800f86e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f872:	461a      	mov	r2, r3
 800f874:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f878:	6013      	str	r3, [r2, #0]
 800f87a:	e013      	b.n	800f8a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	015a      	lsls	r2, r3, #5
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	4413      	add	r3, r2
 800f884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f888:	461a      	mov	r2, r3
 800f88a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f88e:	6013      	str	r3, [r2, #0]
 800f890:	e008      	b.n	800f8a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	015a      	lsls	r2, r3, #5
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	4413      	add	r3, r2
 800f89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f89e:	461a      	mov	r2, r3
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	015a      	lsls	r2, r3, #5
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	4413      	add	r3, r2
 800f8ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	015a      	lsls	r2, r3, #5
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	4413      	add	r3, r2
 800f8be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f8c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	613b      	str	r3, [r7, #16]
 800f8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d2:	693a      	ldr	r2, [r7, #16]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d3b7      	bcc.n	800f848 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8de:	691b      	ldr	r3, [r3, #16]
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f8e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f8f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d105      	bne.n	800f90c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	699b      	ldr	r3, [r3, #24]
 800f904:	f043 0210 	orr.w	r2, r3, #16
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	699a      	ldr	r2, [r3, #24]
 800f910:	4b0e      	ldr	r3, [pc, #56]	; (800f94c <USB_DevInit+0x2b4>)
 800f912:	4313      	orrs	r3, r2
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d005      	beq.n	800f92a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	699b      	ldr	r3, [r3, #24]
 800f922:	f043 0208 	orr.w	r2, r3, #8
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f92a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	d105      	bne.n	800f93c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	699a      	ldr	r2, [r3, #24]
 800f934:	4b06      	ldr	r3, [pc, #24]	; (800f950 <USB_DevInit+0x2b8>)
 800f936:	4313      	orrs	r3, r2
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3718      	adds	r7, #24
 800f942:	46bd      	mov	sp, r7
 800f944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f948:	b004      	add	sp, #16
 800f94a:	4770      	bx	lr
 800f94c:	803c3800 	.word	0x803c3800
 800f950:	40000004 	.word	0x40000004

0800f954 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f954:	b480      	push	{r7}
 800f956:	b085      	sub	sp, #20
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
 800f95c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f95e:	2300      	movs	r3, #0
 800f960:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	019b      	lsls	r3, r3, #6
 800f966:	f043 0220 	orr.w	r2, r3, #32
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	3301      	adds	r3, #1
 800f972:	60fb      	str	r3, [r7, #12]
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	4a09      	ldr	r2, [pc, #36]	; (800f99c <USB_FlushTxFifo+0x48>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d901      	bls.n	800f980 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f97c:	2303      	movs	r3, #3
 800f97e:	e006      	b.n	800f98e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	691b      	ldr	r3, [r3, #16]
 800f984:	f003 0320 	and.w	r3, r3, #32
 800f988:	2b20      	cmp	r3, #32
 800f98a:	d0f0      	beq.n	800f96e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3714      	adds	r7, #20
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr
 800f99a:	bf00      	nop
 800f99c:	00030d40 	.word	0x00030d40

0800f9a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b085      	sub	sp, #20
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2210      	movs	r2, #16
 800f9b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	60fb      	str	r3, [r7, #12]
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	4a09      	ldr	r2, [pc, #36]	; (800f9e0 <USB_FlushRxFifo+0x40>)
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d901      	bls.n	800f9c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f9c0:	2303      	movs	r3, #3
 800f9c2:	e006      	b.n	800f9d2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	691b      	ldr	r3, [r3, #16]
 800f9c8:	f003 0310 	and.w	r3, r3, #16
 800f9cc:	2b10      	cmp	r3, #16
 800f9ce:	d0f0      	beq.n	800f9b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f9d0:	2300      	movs	r3, #0
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3714      	adds	r7, #20
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop
 800f9e0:	00030d40 	.word	0x00030d40

0800f9e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b085      	sub	sp, #20
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9fa:	681a      	ldr	r2, [r3, #0]
 800f9fc:	78fb      	ldrb	r3, [r7, #3]
 800f9fe:	68f9      	ldr	r1, [r7, #12]
 800fa00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa04:	4313      	orrs	r3, r2
 800fa06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fa08:	2300      	movs	r3, #0
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3714      	adds	r7, #20
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa14:	4770      	bx	lr

0800fa16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b084      	sub	sp, #16
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	68fa      	ldr	r2, [r7, #12]
 800fa2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa30:	f043 0302 	orr.w	r3, r3, #2
 800fa34:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800fa36:	2003      	movs	r0, #3
 800fa38:	f7f1 fff2 	bl	8001a20 <HAL_Delay>

  return HAL_OK;
 800fa3c:	2300      	movs	r3, #0
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3710      	adds	r7, #16
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
	...

0800fa48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b085      	sub	sp, #20
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fa50:	2300      	movs	r3, #0
 800fa52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	3301      	adds	r3, #1
 800fa58:	60fb      	str	r3, [r7, #12]
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	4a13      	ldr	r2, [pc, #76]	; (800faac <USB_CoreReset+0x64>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d901      	bls.n	800fa66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fa62:	2303      	movs	r3, #3
 800fa64:	e01b      	b.n	800fa9e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	691b      	ldr	r3, [r3, #16]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	daf2      	bge.n	800fa54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	691b      	ldr	r3, [r3, #16]
 800fa76:	f043 0201 	orr.w	r2, r3, #1
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	3301      	adds	r3, #1
 800fa82:	60fb      	str	r3, [r7, #12]
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	4a09      	ldr	r2, [pc, #36]	; (800faac <USB_CoreReset+0x64>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d901      	bls.n	800fa90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fa8c:	2303      	movs	r3, #3
 800fa8e:	e006      	b.n	800fa9e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	691b      	ldr	r3, [r3, #16]
 800fa94:	f003 0301 	and.w	r3, r3, #1
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d0f0      	beq.n	800fa7e <USB_CoreReset+0x36>

  return HAL_OK;
 800fa9c:	2300      	movs	r3, #0
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3714      	adds	r7, #20
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop
 800faac:	00030d40 	.word	0x00030d40

0800fab0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fab4:	4904      	ldr	r1, [pc, #16]	; (800fac8 <MX_FATFS_Init+0x18>)
 800fab6:	4805      	ldr	r0, [pc, #20]	; (800facc <MX_FATFS_Init+0x1c>)
 800fab8:	f004 fbbe 	bl	8014238 <FATFS_LinkDriver>
 800fabc:	4603      	mov	r3, r0
 800fabe:	461a      	mov	r2, r3
 800fac0:	4b03      	ldr	r3, [pc, #12]	; (800fad0 <MX_FATFS_Init+0x20>)
 800fac2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800fac4:	bf00      	nop
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	240229ac 	.word	0x240229ac
 800facc:	08014554 	.word	0x08014554
 800fad0:	240229a8 	.word	0x240229a8

0800fad4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fad4:	b480      	push	{r7}
 800fad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fad8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800fada:	4618      	mov	r0, r3
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800faea:	2300      	movs	r3, #0
 800faec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800faee:	f000 f86b 	bl	800fbc8 <BSP_SD_IsDetected>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d001      	beq.n	800fafc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800faf8:	2302      	movs	r3, #2
 800fafa:	e005      	b.n	800fb08 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fafc:	4804      	ldr	r0, [pc, #16]	; (800fb10 <BSP_SD_Init+0x2c>)
 800fafe:	f7fa fcc3 	bl	800a488 <HAL_SD_Init>
 800fb02:	4603      	mov	r3, r0
 800fb04:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800fb06:	79fb      	ldrb	r3, [r7, #7]
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	24000a20 	.word	0x24000a20

0800fb14 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b088      	sub	sp, #32
 800fb18:	af02      	add	r7, sp, #8
 800fb1a:	60f8      	str	r0, [r7, #12]
 800fb1c:	60b9      	str	r1, [r7, #8]
 800fb1e:	607a      	str	r2, [r7, #4]
 800fb20:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800fb22:	2300      	movs	r3, #0
 800fb24:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	9300      	str	r3, [sp, #0]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	68ba      	ldr	r2, [r7, #8]
 800fb2e:	68f9      	ldr	r1, [r7, #12]
 800fb30:	4806      	ldr	r0, [pc, #24]	; (800fb4c <BSP_SD_ReadBlocks+0x38>)
 800fb32:	f7fa fdc7 	bl	800a6c4 <HAL_SD_ReadBlocks>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d001      	beq.n	800fb40 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800fb40:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3718      	adds	r7, #24
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	24000a20 	.word	0x24000a20

0800fb50 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b088      	sub	sp, #32
 800fb54:	af02      	add	r7, sp, #8
 800fb56:	60f8      	str	r0, [r7, #12]
 800fb58:	60b9      	str	r1, [r7, #8]
 800fb5a:	607a      	str	r2, [r7, #4]
 800fb5c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	68ba      	ldr	r2, [r7, #8]
 800fb6a:	68f9      	ldr	r1, [r7, #12]
 800fb6c:	4806      	ldr	r0, [pc, #24]	; (800fb88 <BSP_SD_WriteBlocks+0x38>)
 800fb6e:	f7fa ff33 	bl	800a9d8 <HAL_SD_WriteBlocks>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d001      	beq.n	800fb7c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800fb7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3718      	adds	r7, #24
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	24000a20 	.word	0x24000a20

0800fb8c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fb90:	4805      	ldr	r0, [pc, #20]	; (800fba8 <BSP_SD_GetCardState+0x1c>)
 800fb92:	f7fb fbeb 	bl	800b36c <HAL_SD_GetCardState>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b04      	cmp	r3, #4
 800fb9a:	bf14      	ite	ne
 800fb9c:	2301      	movne	r3, #1
 800fb9e:	2300      	moveq	r3, #0
 800fba0:	b2db      	uxtb	r3, r3
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	24000a20 	.word	0x24000a20

0800fbac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fbb4:	6879      	ldr	r1, [r7, #4]
 800fbb6:	4803      	ldr	r0, [pc, #12]	; (800fbc4 <BSP_SD_GetCardInfo+0x18>)
 800fbb8:	f7fb fb02 	bl	800b1c0 <HAL_SD_GetCardInfo>
}
 800fbbc:	bf00      	nop
 800fbbe:	3708      	adds	r7, #8
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	24000a20 	.word	0x24000a20

0800fbc8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b082      	sub	sp, #8
 800fbcc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800fbd2:	f000 f80b 	bl	800fbec <BSP_PlatformIsDetected>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d101      	bne.n	800fbe0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fbe0:	79fb      	ldrb	r3, [r7, #7]
 800fbe2:	b2db      	uxtb	r3, r3
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3708      	adds	r7, #8
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fbf6:	2180      	movs	r1, #128	; 0x80
 800fbf8:	4806      	ldr	r0, [pc, #24]	; (800fc14 <BSP_PlatformIsDetected+0x28>)
 800fbfa:	f7f7 fc71 	bl	80074e0 <HAL_GPIO_ReadPin>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d001      	beq.n	800fc08 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800fc04:	2300      	movs	r3, #0
 800fc06:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800fc08:	79fb      	ldrb	r3, [r7, #7]
}  
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3708      	adds	r7, #8
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}
 800fc12:	bf00      	nop
 800fc14:	58020800 	.word	0x58020800

0800fc18 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	4603      	mov	r3, r0
 800fc20:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fc22:	4b0b      	ldr	r3, [pc, #44]	; (800fc50 <SD_CheckStatus+0x38>)
 800fc24:	2201      	movs	r2, #1
 800fc26:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fc28:	f7ff ffb0 	bl	800fb8c <BSP_SD_GetCardState>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d107      	bne.n	800fc42 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fc32:	4b07      	ldr	r3, [pc, #28]	; (800fc50 <SD_CheckStatus+0x38>)
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	f023 0301 	bic.w	r3, r3, #1
 800fc3c:	b2da      	uxtb	r2, r3
 800fc3e:	4b04      	ldr	r3, [pc, #16]	; (800fc50 <SD_CheckStatus+0x38>)
 800fc40:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fc42:	4b03      	ldr	r3, [pc, #12]	; (800fc50 <SD_CheckStatus+0x38>)
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	b2db      	uxtb	r3, r3
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3708      	adds	r7, #8
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	2400000d 	.word	0x2400000d

0800fc54 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800fc5e:	4b0b      	ldr	r3, [pc, #44]	; (800fc8c <SD_initialize+0x38>)
 800fc60:	2201      	movs	r2, #1
 800fc62:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fc64:	f7ff ff3e 	bl	800fae4 <BSP_SD_Init>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d107      	bne.n	800fc7e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800fc6e:	79fb      	ldrb	r3, [r7, #7]
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7ff ffd1 	bl	800fc18 <SD_CheckStatus>
 800fc76:	4603      	mov	r3, r0
 800fc78:	461a      	mov	r2, r3
 800fc7a:	4b04      	ldr	r3, [pc, #16]	; (800fc8c <SD_initialize+0x38>)
 800fc7c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fc7e:	4b03      	ldr	r3, [pc, #12]	; (800fc8c <SD_initialize+0x38>)
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	b2db      	uxtb	r3, r3
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}
 800fc8c:	2400000d 	.word	0x2400000d

0800fc90 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	4603      	mov	r3, r0
 800fc98:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fc9a:	79fb      	ldrb	r3, [r7, #7]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7ff ffbb 	bl	800fc18 <SD_CheckStatus>
 800fca2:	4603      	mov	r3, r0
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3708      	adds	r7, #8
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b086      	sub	sp, #24
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60b9      	str	r1, [r7, #8]
 800fcb4:	607a      	str	r2, [r7, #4]
 800fcb6:	603b      	str	r3, [r7, #0]
 800fcb8:	4603      	mov	r3, r0
 800fcba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800fcc0:	f04f 33ff 	mov.w	r3, #4294967295
 800fcc4:	683a      	ldr	r2, [r7, #0]
 800fcc6:	6879      	ldr	r1, [r7, #4]
 800fcc8:	68b8      	ldr	r0, [r7, #8]
 800fcca:	f7ff ff23 	bl	800fb14 <BSP_SD_ReadBlocks>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d107      	bne.n	800fce4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800fcd4:	bf00      	nop
 800fcd6:	f7ff ff59 	bl	800fb8c <BSP_SD_GetCardState>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d1fa      	bne.n	800fcd6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800fce0:	2300      	movs	r3, #0
 800fce2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800fce4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3718      	adds	r7, #24
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fcee:	b580      	push	{r7, lr}
 800fcf0:	b086      	sub	sp, #24
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	60b9      	str	r1, [r7, #8]
 800fcf6:	607a      	str	r2, [r7, #4]
 800fcf8:	603b      	str	r3, [r7, #0]
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fcfe:	2301      	movs	r3, #1
 800fd00:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800fd02:	f04f 33ff 	mov.w	r3, #4294967295
 800fd06:	683a      	ldr	r2, [r7, #0]
 800fd08:	6879      	ldr	r1, [r7, #4]
 800fd0a:	68b8      	ldr	r0, [r7, #8]
 800fd0c:	f7ff ff20 	bl	800fb50 <BSP_SD_WriteBlocks>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d107      	bne.n	800fd26 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800fd16:	bf00      	nop
 800fd18:	f7ff ff38 	bl	800fb8c <BSP_SD_GetCardState>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d1fa      	bne.n	800fd18 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800fd22:	2300      	movs	r3, #0
 800fd24:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800fd26:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3718      	adds	r7, #24
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b08c      	sub	sp, #48	; 0x30
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	4603      	mov	r3, r0
 800fd38:	603a      	str	r2, [r7, #0]
 800fd3a:	71fb      	strb	r3, [r7, #7]
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fd40:	2301      	movs	r3, #1
 800fd42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fd46:	4b25      	ldr	r3, [pc, #148]	; (800fddc <SD_ioctl+0xac>)
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	f003 0301 	and.w	r3, r3, #1
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d001      	beq.n	800fd58 <SD_ioctl+0x28>
 800fd54:	2303      	movs	r3, #3
 800fd56:	e03c      	b.n	800fdd2 <SD_ioctl+0xa2>

  switch (cmd)
 800fd58:	79bb      	ldrb	r3, [r7, #6]
 800fd5a:	2b03      	cmp	r3, #3
 800fd5c:	d834      	bhi.n	800fdc8 <SD_ioctl+0x98>
 800fd5e:	a201      	add	r2, pc, #4	; (adr r2, 800fd64 <SD_ioctl+0x34>)
 800fd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd64:	0800fd75 	.word	0x0800fd75
 800fd68:	0800fd7d 	.word	0x0800fd7d
 800fd6c:	0800fd95 	.word	0x0800fd95
 800fd70:	0800fdaf 	.word	0x0800fdaf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fd74:	2300      	movs	r3, #0
 800fd76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fd7a:	e028      	b.n	800fdce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd7c:	f107 0308 	add.w	r3, r7, #8
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7ff ff13 	bl	800fbac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fd86:	6a3a      	ldr	r2, [r7, #32]
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fd92:	e01c      	b.n	800fdce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd94:	f107 0308 	add.w	r3, r7, #8
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7ff ff07 	bl	800fbac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda0:	b29a      	uxth	r2, r3
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fda6:	2300      	movs	r3, #0
 800fda8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fdac:	e00f      	b.n	800fdce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fdae:	f107 0308 	add.w	r3, r7, #8
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7ff fefa 	bl	800fbac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdba:	0a5a      	lsrs	r2, r3, #9
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fdc6:	e002      	b.n	800fdce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fdc8:	2304      	movs	r3, #4
 800fdca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800fdce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3730      	adds	r7, #48	; 0x30
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
 800fdda:	bf00      	nop
 800fddc:	2400000d 	.word	0x2400000d

0800fde0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b084      	sub	sp, #16
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	4603      	mov	r3, r0
 800fde8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fdea:	79fb      	ldrb	r3, [r7, #7]
 800fdec:	4a08      	ldr	r2, [pc, #32]	; (800fe10 <disk_status+0x30>)
 800fdee:	009b      	lsls	r3, r3, #2
 800fdf0:	4413      	add	r3, r2
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	79fa      	ldrb	r2, [r7, #7]
 800fdf8:	4905      	ldr	r1, [pc, #20]	; (800fe10 <disk_status+0x30>)
 800fdfa:	440a      	add	r2, r1
 800fdfc:	7a12      	ldrb	r2, [r2, #8]
 800fdfe:	4610      	mov	r0, r2
 800fe00:	4798      	blx	r3
 800fe02:	4603      	mov	r3, r0
 800fe04:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fe06:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3710      	adds	r7, #16
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	24000578 	.word	0x24000578

0800fe14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fe22:	79fb      	ldrb	r3, [r7, #7]
 800fe24:	4a0d      	ldr	r2, [pc, #52]	; (800fe5c <disk_initialize+0x48>)
 800fe26:	5cd3      	ldrb	r3, [r2, r3]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d111      	bne.n	800fe50 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800fe2c:	79fb      	ldrb	r3, [r7, #7]
 800fe2e:	4a0b      	ldr	r2, [pc, #44]	; (800fe5c <disk_initialize+0x48>)
 800fe30:	2101      	movs	r1, #1
 800fe32:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fe34:	79fb      	ldrb	r3, [r7, #7]
 800fe36:	4a09      	ldr	r2, [pc, #36]	; (800fe5c <disk_initialize+0x48>)
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	4413      	add	r3, r2
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	79fa      	ldrb	r2, [r7, #7]
 800fe42:	4906      	ldr	r1, [pc, #24]	; (800fe5c <disk_initialize+0x48>)
 800fe44:	440a      	add	r2, r1
 800fe46:	7a12      	ldrb	r2, [r2, #8]
 800fe48:	4610      	mov	r0, r2
 800fe4a:	4798      	blx	r3
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fe50:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	24000578 	.word	0x24000578

0800fe60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fe60:	b590      	push	{r4, r7, lr}
 800fe62:	b087      	sub	sp, #28
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	60b9      	str	r1, [r7, #8]
 800fe68:	607a      	str	r2, [r7, #4]
 800fe6a:	603b      	str	r3, [r7, #0]
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fe70:	7bfb      	ldrb	r3, [r7, #15]
 800fe72:	4a0a      	ldr	r2, [pc, #40]	; (800fe9c <disk_read+0x3c>)
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	4413      	add	r3, r2
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	689c      	ldr	r4, [r3, #8]
 800fe7c:	7bfb      	ldrb	r3, [r7, #15]
 800fe7e:	4a07      	ldr	r2, [pc, #28]	; (800fe9c <disk_read+0x3c>)
 800fe80:	4413      	add	r3, r2
 800fe82:	7a18      	ldrb	r0, [r3, #8]
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	687a      	ldr	r2, [r7, #4]
 800fe88:	68b9      	ldr	r1, [r7, #8]
 800fe8a:	47a0      	blx	r4
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	75fb      	strb	r3, [r7, #23]
  return res;
 800fe90:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	371c      	adds	r7, #28
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd90      	pop	{r4, r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	24000578 	.word	0x24000578

0800fea0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fea0:	b590      	push	{r4, r7, lr}
 800fea2:	b087      	sub	sp, #28
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60b9      	str	r1, [r7, #8]
 800fea8:	607a      	str	r2, [r7, #4]
 800feaa:	603b      	str	r3, [r7, #0]
 800feac:	4603      	mov	r3, r0
 800feae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800feb0:	7bfb      	ldrb	r3, [r7, #15]
 800feb2:	4a0a      	ldr	r2, [pc, #40]	; (800fedc <disk_write+0x3c>)
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	4413      	add	r3, r2
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	68dc      	ldr	r4, [r3, #12]
 800febc:	7bfb      	ldrb	r3, [r7, #15]
 800febe:	4a07      	ldr	r2, [pc, #28]	; (800fedc <disk_write+0x3c>)
 800fec0:	4413      	add	r3, r2
 800fec2:	7a18      	ldrb	r0, [r3, #8]
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	687a      	ldr	r2, [r7, #4]
 800fec8:	68b9      	ldr	r1, [r7, #8]
 800feca:	47a0      	blx	r4
 800fecc:	4603      	mov	r3, r0
 800fece:	75fb      	strb	r3, [r7, #23]
  return res;
 800fed0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	371c      	adds	r7, #28
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd90      	pop	{r4, r7, pc}
 800feda:	bf00      	nop
 800fedc:	24000578 	.word	0x24000578

0800fee0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b084      	sub	sp, #16
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	4603      	mov	r3, r0
 800fee8:	603a      	str	r2, [r7, #0]
 800feea:	71fb      	strb	r3, [r7, #7]
 800feec:	460b      	mov	r3, r1
 800feee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fef0:	79fb      	ldrb	r3, [r7, #7]
 800fef2:	4a09      	ldr	r2, [pc, #36]	; (800ff18 <disk_ioctl+0x38>)
 800fef4:	009b      	lsls	r3, r3, #2
 800fef6:	4413      	add	r3, r2
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	691b      	ldr	r3, [r3, #16]
 800fefc:	79fa      	ldrb	r2, [r7, #7]
 800fefe:	4906      	ldr	r1, [pc, #24]	; (800ff18 <disk_ioctl+0x38>)
 800ff00:	440a      	add	r2, r1
 800ff02:	7a10      	ldrb	r0, [r2, #8]
 800ff04:	79b9      	ldrb	r1, [r7, #6]
 800ff06:	683a      	ldr	r2, [r7, #0]
 800ff08:	4798      	blx	r3
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	73fb      	strb	r3, [r7, #15]
  return res;
 800ff0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	3710      	adds	r7, #16
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	24000578 	.word	0x24000578

0800ff1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b085      	sub	sp, #20
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	3301      	adds	r3, #1
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ff2c:	89fb      	ldrh	r3, [r7, #14]
 800ff2e:	021b      	lsls	r3, r3, #8
 800ff30:	b21a      	sxth	r2, r3
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	b21b      	sxth	r3, r3
 800ff38:	4313      	orrs	r3, r2
 800ff3a:	b21b      	sxth	r3, r3
 800ff3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ff3e:	89fb      	ldrh	r3, [r7, #14]
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3714      	adds	r7, #20
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	3303      	adds	r3, #3
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	021b      	lsls	r3, r3, #8
 800ff60:	687a      	ldr	r2, [r7, #4]
 800ff62:	3202      	adds	r2, #2
 800ff64:	7812      	ldrb	r2, [r2, #0]
 800ff66:	4313      	orrs	r3, r2
 800ff68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	021b      	lsls	r3, r3, #8
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	3201      	adds	r2, #1
 800ff72:	7812      	ldrb	r2, [r2, #0]
 800ff74:	4313      	orrs	r3, r2
 800ff76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	021b      	lsls	r3, r3, #8
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	7812      	ldrb	r2, [r2, #0]
 800ff80:	4313      	orrs	r3, r2
 800ff82:	60fb      	str	r3, [r7, #12]
	return rv;
 800ff84:	68fb      	ldr	r3, [r7, #12]
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3714      	adds	r7, #20
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr

0800ff92 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800ff92:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800ff96:	b085      	sub	sp, #20
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	3307      	adds	r3, #7
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	b2db      	uxtb	r3, r3
 800ffa4:	f04f 0400 	mov.w	r4, #0
 800ffa8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 800ffac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ffb0:	f04f 0b00 	mov.w	fp, #0
 800ffb4:	f04f 0c00 	mov.w	ip, #0
 800ffb8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800ffbc:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800ffc0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	3206      	adds	r2, #6
 800ffc8:	7812      	ldrb	r2, [r2, #0]
 800ffca:	b2d1      	uxtb	r1, r2
 800ffcc:	f04f 0200 	mov.w	r2, #0
 800ffd0:	ea4b 0301 	orr.w	r3, fp, r1
 800ffd4:	ea4c 0402 	orr.w	r4, ip, r2
 800ffd8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 800ffdc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ffe0:	f04f 0b00 	mov.w	fp, #0
 800ffe4:	f04f 0c00 	mov.w	ip, #0
 800ffe8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800ffec:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800fff0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	3205      	adds	r2, #5
 800fff8:	7812      	ldrb	r2, [r2, #0]
 800fffa:	b2d1      	uxtb	r1, r2
 800fffc:	f04f 0200 	mov.w	r2, #0
 8010000:	ea4b 0301 	orr.w	r3, fp, r1
 8010004:	ea4c 0402 	orr.w	r4, ip, r2
 8010008:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 801000c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010010:	f04f 0b00 	mov.w	fp, #0
 8010014:	f04f 0c00 	mov.w	ip, #0
 8010018:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 801001c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8010020:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	3204      	adds	r2, #4
 8010028:	7812      	ldrb	r2, [r2, #0]
 801002a:	b2d1      	uxtb	r1, r2
 801002c:	f04f 0200 	mov.w	r2, #0
 8010030:	ea4b 0301 	orr.w	r3, fp, r1
 8010034:	ea4c 0402 	orr.w	r4, ip, r2
 8010038:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 801003c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010040:	f04f 0b00 	mov.w	fp, #0
 8010044:	f04f 0c00 	mov.w	ip, #0
 8010048:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 801004c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8010050:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	3203      	adds	r2, #3
 8010058:	7812      	ldrb	r2, [r2, #0]
 801005a:	b2d1      	uxtb	r1, r2
 801005c:	f04f 0200 	mov.w	r2, #0
 8010060:	ea4b 0301 	orr.w	r3, fp, r1
 8010064:	ea4c 0402 	orr.w	r4, ip, r2
 8010068:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 801006c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010070:	f04f 0b00 	mov.w	fp, #0
 8010074:	f04f 0c00 	mov.w	ip, #0
 8010078:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 801007c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8010080:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	3202      	adds	r2, #2
 8010088:	7812      	ldrb	r2, [r2, #0]
 801008a:	b2d1      	uxtb	r1, r2
 801008c:	f04f 0200 	mov.w	r2, #0
 8010090:	ea4b 0301 	orr.w	r3, fp, r1
 8010094:	ea4c 0402 	orr.w	r4, ip, r2
 8010098:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 801009c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80100a0:	f04f 0b00 	mov.w	fp, #0
 80100a4:	f04f 0c00 	mov.w	ip, #0
 80100a8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80100ac:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80100b0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	3201      	adds	r2, #1
 80100b8:	7812      	ldrb	r2, [r2, #0]
 80100ba:	b2d1      	uxtb	r1, r2
 80100bc:	f04f 0200 	mov.w	r2, #0
 80100c0:	ea4b 0301 	orr.w	r3, fp, r1
 80100c4:	ea4c 0402 	orr.w	r4, ip, r2
 80100c8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 80100cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80100d0:	f04f 0b00 	mov.w	fp, #0
 80100d4:	f04f 0c00 	mov.w	ip, #0
 80100d8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80100dc:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80100e0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80100e4:	687a      	ldr	r2, [r7, #4]
 80100e6:	7812      	ldrb	r2, [r2, #0]
 80100e8:	b2d1      	uxtb	r1, r2
 80100ea:	f04f 0200 	mov.w	r2, #0
 80100ee:	ea4b 0301 	orr.w	r3, fp, r1
 80100f2:	ea4c 0402 	orr.w	r4, ip, r2
 80100f6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 80100fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	4621      	mov	r1, r4
 8010102:	3714      	adds	r7, #20
 8010104:	46bd      	mov	sp, r7
 8010106:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 801010a:	4770      	bx	lr

0801010c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801010c:	b480      	push	{r7}
 801010e:	b083      	sub	sp, #12
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	460b      	mov	r3, r1
 8010116:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	1c5a      	adds	r2, r3, #1
 801011c:	607a      	str	r2, [r7, #4]
 801011e:	887a      	ldrh	r2, [r7, #2]
 8010120:	b2d2      	uxtb	r2, r2
 8010122:	701a      	strb	r2, [r3, #0]
 8010124:	887b      	ldrh	r3, [r7, #2]
 8010126:	0a1b      	lsrs	r3, r3, #8
 8010128:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	1c5a      	adds	r2, r3, #1
 801012e:	607a      	str	r2, [r7, #4]
 8010130:	887a      	ldrh	r2, [r7, #2]
 8010132:	b2d2      	uxtb	r2, r2
 8010134:	701a      	strb	r2, [r3, #0]
}
 8010136:	bf00      	nop
 8010138:	370c      	adds	r7, #12
 801013a:	46bd      	mov	sp, r7
 801013c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010140:	4770      	bx	lr

08010142 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010142:	b480      	push	{r7}
 8010144:	b083      	sub	sp, #12
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
 801014a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	1c5a      	adds	r2, r3, #1
 8010150:	607a      	str	r2, [r7, #4]
 8010152:	683a      	ldr	r2, [r7, #0]
 8010154:	b2d2      	uxtb	r2, r2
 8010156:	701a      	strb	r2, [r3, #0]
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	0a1b      	lsrs	r3, r3, #8
 801015c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	1c5a      	adds	r2, r3, #1
 8010162:	607a      	str	r2, [r7, #4]
 8010164:	683a      	ldr	r2, [r7, #0]
 8010166:	b2d2      	uxtb	r2, r2
 8010168:	701a      	strb	r2, [r3, #0]
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	0a1b      	lsrs	r3, r3, #8
 801016e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	1c5a      	adds	r2, r3, #1
 8010174:	607a      	str	r2, [r7, #4]
 8010176:	683a      	ldr	r2, [r7, #0]
 8010178:	b2d2      	uxtb	r2, r2
 801017a:	701a      	strb	r2, [r3, #0]
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	0a1b      	lsrs	r3, r3, #8
 8010180:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	1c5a      	adds	r2, r3, #1
 8010186:	607a      	str	r2, [r7, #4]
 8010188:	683a      	ldr	r2, [r7, #0]
 801018a:	b2d2      	uxtb	r2, r2
 801018c:	701a      	strb	r2, [r3, #0]
}
 801018e:	bf00      	nop
 8010190:	370c      	adds	r7, #12
 8010192:	46bd      	mov	sp, r7
 8010194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010198:	4770      	bx	lr

0801019a <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 801019a:	b490      	push	{r4, r7}
 801019c:	b084      	sub	sp, #16
 801019e:	af00      	add	r7, sp, #0
 80101a0:	60f8      	str	r0, [r7, #12]
 80101a2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	1c5a      	adds	r2, r3, #1
 80101aa:	60fa      	str	r2, [r7, #12]
 80101ac:	783a      	ldrb	r2, [r7, #0]
 80101ae:	701a      	strb	r2, [r3, #0]
 80101b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80101b4:	f04f 0300 	mov.w	r3, #0
 80101b8:	f04f 0400 	mov.w	r4, #0
 80101bc:	0a0b      	lsrs	r3, r1, #8
 80101be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80101c2:	0a14      	lsrs	r4, r2, #8
 80101c4:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	1c5a      	adds	r2, r3, #1
 80101cc:	60fa      	str	r2, [r7, #12]
 80101ce:	783a      	ldrb	r2, [r7, #0]
 80101d0:	701a      	strb	r2, [r3, #0]
 80101d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80101d6:	f04f 0300 	mov.w	r3, #0
 80101da:	f04f 0400 	mov.w	r4, #0
 80101de:	0a0b      	lsrs	r3, r1, #8
 80101e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80101e4:	0a14      	lsrs	r4, r2, #8
 80101e6:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	1c5a      	adds	r2, r3, #1
 80101ee:	60fa      	str	r2, [r7, #12]
 80101f0:	783a      	ldrb	r2, [r7, #0]
 80101f2:	701a      	strb	r2, [r3, #0]
 80101f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80101f8:	f04f 0300 	mov.w	r3, #0
 80101fc:	f04f 0400 	mov.w	r4, #0
 8010200:	0a0b      	lsrs	r3, r1, #8
 8010202:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010206:	0a14      	lsrs	r4, r2, #8
 8010208:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	1c5a      	adds	r2, r3, #1
 8010210:	60fa      	str	r2, [r7, #12]
 8010212:	783a      	ldrb	r2, [r7, #0]
 8010214:	701a      	strb	r2, [r3, #0]
 8010216:	e9d7 1200 	ldrd	r1, r2, [r7]
 801021a:	f04f 0300 	mov.w	r3, #0
 801021e:	f04f 0400 	mov.w	r4, #0
 8010222:	0a0b      	lsrs	r3, r1, #8
 8010224:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010228:	0a14      	lsrs	r4, r2, #8
 801022a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	1c5a      	adds	r2, r3, #1
 8010232:	60fa      	str	r2, [r7, #12]
 8010234:	783a      	ldrb	r2, [r7, #0]
 8010236:	701a      	strb	r2, [r3, #0]
 8010238:	e9d7 1200 	ldrd	r1, r2, [r7]
 801023c:	f04f 0300 	mov.w	r3, #0
 8010240:	f04f 0400 	mov.w	r4, #0
 8010244:	0a0b      	lsrs	r3, r1, #8
 8010246:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801024a:	0a14      	lsrs	r4, r2, #8
 801024c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	1c5a      	adds	r2, r3, #1
 8010254:	60fa      	str	r2, [r7, #12]
 8010256:	783a      	ldrb	r2, [r7, #0]
 8010258:	701a      	strb	r2, [r3, #0]
 801025a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801025e:	f04f 0300 	mov.w	r3, #0
 8010262:	f04f 0400 	mov.w	r4, #0
 8010266:	0a0b      	lsrs	r3, r1, #8
 8010268:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801026c:	0a14      	lsrs	r4, r2, #8
 801026e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	1c5a      	adds	r2, r3, #1
 8010276:	60fa      	str	r2, [r7, #12]
 8010278:	783a      	ldrb	r2, [r7, #0]
 801027a:	701a      	strb	r2, [r3, #0]
 801027c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010280:	f04f 0300 	mov.w	r3, #0
 8010284:	f04f 0400 	mov.w	r4, #0
 8010288:	0a0b      	lsrs	r3, r1, #8
 801028a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801028e:	0a14      	lsrs	r4, r2, #8
 8010290:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	1c5a      	adds	r2, r3, #1
 8010298:	60fa      	str	r2, [r7, #12]
 801029a:	783a      	ldrb	r2, [r7, #0]
 801029c:	701a      	strb	r2, [r3, #0]
}
 801029e:	bf00      	nop
 80102a0:	3710      	adds	r7, #16
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bc90      	pop	{r4, r7}
 80102a6:	4770      	bx	lr

080102a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80102a8:	b480      	push	{r7}
 80102aa:	b087      	sub	sp, #28
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d00d      	beq.n	80102de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80102c2:	693a      	ldr	r2, [r7, #16]
 80102c4:	1c53      	adds	r3, r2, #1
 80102c6:	613b      	str	r3, [r7, #16]
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	1c59      	adds	r1, r3, #1
 80102cc:	6179      	str	r1, [r7, #20]
 80102ce:	7812      	ldrb	r2, [r2, #0]
 80102d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	3b01      	subs	r3, #1
 80102d6:	607b      	str	r3, [r7, #4]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d1f1      	bne.n	80102c2 <mem_cpy+0x1a>
	}
}
 80102de:	bf00      	nop
 80102e0:	371c      	adds	r7, #28
 80102e2:	46bd      	mov	sp, r7
 80102e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e8:	4770      	bx	lr

080102ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80102ea:	b480      	push	{r7}
 80102ec:	b087      	sub	sp, #28
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	60f8      	str	r0, [r7, #12]
 80102f2:	60b9      	str	r1, [r7, #8]
 80102f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	1c5a      	adds	r2, r3, #1
 80102fe:	617a      	str	r2, [r7, #20]
 8010300:	68ba      	ldr	r2, [r7, #8]
 8010302:	b2d2      	uxtb	r2, r2
 8010304:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	3b01      	subs	r3, #1
 801030a:	607b      	str	r3, [r7, #4]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d1f3      	bne.n	80102fa <mem_set+0x10>
}
 8010312:	bf00      	nop
 8010314:	371c      	adds	r7, #28
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr

0801031e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801031e:	b480      	push	{r7}
 8010320:	b089      	sub	sp, #36	; 0x24
 8010322:	af00      	add	r7, sp, #0
 8010324:	60f8      	str	r0, [r7, #12]
 8010326:	60b9      	str	r1, [r7, #8]
 8010328:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	61fb      	str	r3, [r7, #28]
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010332:	2300      	movs	r3, #0
 8010334:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010336:	69fb      	ldr	r3, [r7, #28]
 8010338:	1c5a      	adds	r2, r3, #1
 801033a:	61fa      	str	r2, [r7, #28]
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	4619      	mov	r1, r3
 8010340:	69bb      	ldr	r3, [r7, #24]
 8010342:	1c5a      	adds	r2, r3, #1
 8010344:	61ba      	str	r2, [r7, #24]
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	1acb      	subs	r3, r1, r3
 801034a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	3b01      	subs	r3, #1
 8010350:	607b      	str	r3, [r7, #4]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d002      	beq.n	801035e <mem_cmp+0x40>
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d0eb      	beq.n	8010336 <mem_cmp+0x18>

	return r;
 801035e:	697b      	ldr	r3, [r7, #20]
}
 8010360:	4618      	mov	r0, r3
 8010362:	3724      	adds	r7, #36	; 0x24
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010376:	e002      	b.n	801037e <chk_chr+0x12>
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	3301      	adds	r3, #1
 801037c:	607b      	str	r3, [r7, #4]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d005      	beq.n	8010392 <chk_chr+0x26>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	461a      	mov	r2, r3
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	4293      	cmp	r3, r2
 8010390:	d1f2      	bne.n	8010378 <chk_chr+0xc>
	return *str;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	781b      	ldrb	r3, [r3, #0]
}
 8010396:	4618      	mov	r0, r3
 8010398:	370c      	adds	r7, #12
 801039a:	46bd      	mov	sp, r7
 801039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a0:	4770      	bx	lr
	...

080103a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80103ae:	2300      	movs	r3, #0
 80103b0:	60bb      	str	r3, [r7, #8]
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	60fb      	str	r3, [r7, #12]
 80103b6:	e029      	b.n	801040c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80103b8:	4a27      	ldr	r2, [pc, #156]	; (8010458 <chk_lock+0xb4>)
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	011b      	lsls	r3, r3, #4
 80103be:	4413      	add	r3, r2
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d01d      	beq.n	8010402 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80103c6:	4a24      	ldr	r2, [pc, #144]	; (8010458 <chk_lock+0xb4>)
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	011b      	lsls	r3, r3, #4
 80103cc:	4413      	add	r3, r2
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d116      	bne.n	8010406 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80103d8:	4a1f      	ldr	r2, [pc, #124]	; (8010458 <chk_lock+0xb4>)
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	011b      	lsls	r3, r3, #4
 80103de:	4413      	add	r3, r2
 80103e0:	3304      	adds	r3, #4
 80103e2:	681a      	ldr	r2, [r3, #0]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d10c      	bne.n	8010406 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80103ec:	4a1a      	ldr	r2, [pc, #104]	; (8010458 <chk_lock+0xb4>)
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	011b      	lsls	r3, r3, #4
 80103f2:	4413      	add	r3, r2
 80103f4:	3308      	adds	r3, #8
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d102      	bne.n	8010406 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010400:	e007      	b.n	8010412 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010402:	2301      	movs	r3, #1
 8010404:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	3301      	adds	r3, #1
 801040a:	60fb      	str	r3, [r7, #12]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2b01      	cmp	r3, #1
 8010410:	d9d2      	bls.n	80103b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	2b02      	cmp	r3, #2
 8010416:	d109      	bne.n	801042c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d102      	bne.n	8010424 <chk_lock+0x80>
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	2b02      	cmp	r3, #2
 8010422:	d101      	bne.n	8010428 <chk_lock+0x84>
 8010424:	2300      	movs	r3, #0
 8010426:	e010      	b.n	801044a <chk_lock+0xa6>
 8010428:	2312      	movs	r3, #18
 801042a:	e00e      	b.n	801044a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d108      	bne.n	8010444 <chk_lock+0xa0>
 8010432:	4a09      	ldr	r2, [pc, #36]	; (8010458 <chk_lock+0xb4>)
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	011b      	lsls	r3, r3, #4
 8010438:	4413      	add	r3, r2
 801043a:	330c      	adds	r3, #12
 801043c:	881b      	ldrh	r3, [r3, #0]
 801043e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010442:	d101      	bne.n	8010448 <chk_lock+0xa4>
 8010444:	2310      	movs	r3, #16
 8010446:	e000      	b.n	801044a <chk_lock+0xa6>
 8010448:	2300      	movs	r3, #0
}
 801044a:	4618      	mov	r0, r3
 801044c:	3714      	adds	r7, #20
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr
 8010456:	bf00      	nop
 8010458:	240000f8 	.word	0x240000f8

0801045c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801045c:	b480      	push	{r7}
 801045e:	b083      	sub	sp, #12
 8010460:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010462:	2300      	movs	r3, #0
 8010464:	607b      	str	r3, [r7, #4]
 8010466:	e002      	b.n	801046e <enq_lock+0x12>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	3301      	adds	r3, #1
 801046c:	607b      	str	r3, [r7, #4]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2b01      	cmp	r3, #1
 8010472:	d806      	bhi.n	8010482 <enq_lock+0x26>
 8010474:	4a09      	ldr	r2, [pc, #36]	; (801049c <enq_lock+0x40>)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	011b      	lsls	r3, r3, #4
 801047a:	4413      	add	r3, r2
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d1f2      	bne.n	8010468 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2b02      	cmp	r3, #2
 8010486:	bf14      	ite	ne
 8010488:	2301      	movne	r3, #1
 801048a:	2300      	moveq	r3, #0
 801048c:	b2db      	uxtb	r3, r3
}
 801048e:	4618      	mov	r0, r3
 8010490:	370c      	adds	r7, #12
 8010492:	46bd      	mov	sp, r7
 8010494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010498:	4770      	bx	lr
 801049a:	bf00      	nop
 801049c:	240000f8 	.word	0x240000f8

080104a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b085      	sub	sp, #20
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80104aa:	2300      	movs	r3, #0
 80104ac:	60fb      	str	r3, [r7, #12]
 80104ae:	e01f      	b.n	80104f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80104b0:	4a41      	ldr	r2, [pc, #260]	; (80105b8 <inc_lock+0x118>)
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	011b      	lsls	r3, r3, #4
 80104b6:	4413      	add	r3, r2
 80104b8:	681a      	ldr	r2, [r3, #0]
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d113      	bne.n	80104ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80104c2:	4a3d      	ldr	r2, [pc, #244]	; (80105b8 <inc_lock+0x118>)
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	011b      	lsls	r3, r3, #4
 80104c8:	4413      	add	r3, r2
 80104ca:	3304      	adds	r3, #4
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d109      	bne.n	80104ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80104d6:	4a38      	ldr	r2, [pc, #224]	; (80105b8 <inc_lock+0x118>)
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	011b      	lsls	r3, r3, #4
 80104dc:	4413      	add	r3, r2
 80104de:	3308      	adds	r3, #8
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d006      	beq.n	80104f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	3301      	adds	r3, #1
 80104ee:	60fb      	str	r3, [r7, #12]
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	2b01      	cmp	r3, #1
 80104f4:	d9dc      	bls.n	80104b0 <inc_lock+0x10>
 80104f6:	e000      	b.n	80104fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80104f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2b02      	cmp	r3, #2
 80104fe:	d132      	bne.n	8010566 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010500:	2300      	movs	r3, #0
 8010502:	60fb      	str	r3, [r7, #12]
 8010504:	e002      	b.n	801050c <inc_lock+0x6c>
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	3301      	adds	r3, #1
 801050a:	60fb      	str	r3, [r7, #12]
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2b01      	cmp	r3, #1
 8010510:	d806      	bhi.n	8010520 <inc_lock+0x80>
 8010512:	4a29      	ldr	r2, [pc, #164]	; (80105b8 <inc_lock+0x118>)
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	011b      	lsls	r3, r3, #4
 8010518:	4413      	add	r3, r2
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d1f2      	bne.n	8010506 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2b02      	cmp	r3, #2
 8010524:	d101      	bne.n	801052a <inc_lock+0x8a>
 8010526:	2300      	movs	r3, #0
 8010528:	e040      	b.n	80105ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	4922      	ldr	r1, [pc, #136]	; (80105b8 <inc_lock+0x118>)
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	011b      	lsls	r3, r3, #4
 8010534:	440b      	add	r3, r1
 8010536:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	689a      	ldr	r2, [r3, #8]
 801053c:	491e      	ldr	r1, [pc, #120]	; (80105b8 <inc_lock+0x118>)
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	011b      	lsls	r3, r3, #4
 8010542:	440b      	add	r3, r1
 8010544:	3304      	adds	r3, #4
 8010546:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801054c:	491a      	ldr	r1, [pc, #104]	; (80105b8 <inc_lock+0x118>)
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	011b      	lsls	r3, r3, #4
 8010552:	440b      	add	r3, r1
 8010554:	3308      	adds	r3, #8
 8010556:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010558:	4a17      	ldr	r2, [pc, #92]	; (80105b8 <inc_lock+0x118>)
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	011b      	lsls	r3, r3, #4
 801055e:	4413      	add	r3, r2
 8010560:	330c      	adds	r3, #12
 8010562:	2200      	movs	r2, #0
 8010564:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d009      	beq.n	8010580 <inc_lock+0xe0>
 801056c:	4a12      	ldr	r2, [pc, #72]	; (80105b8 <inc_lock+0x118>)
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	011b      	lsls	r3, r3, #4
 8010572:	4413      	add	r3, r2
 8010574:	330c      	adds	r3, #12
 8010576:	881b      	ldrh	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d001      	beq.n	8010580 <inc_lock+0xe0>
 801057c:	2300      	movs	r3, #0
 801057e:	e015      	b.n	80105ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d108      	bne.n	8010598 <inc_lock+0xf8>
 8010586:	4a0c      	ldr	r2, [pc, #48]	; (80105b8 <inc_lock+0x118>)
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	011b      	lsls	r3, r3, #4
 801058c:	4413      	add	r3, r2
 801058e:	330c      	adds	r3, #12
 8010590:	881b      	ldrh	r3, [r3, #0]
 8010592:	3301      	adds	r3, #1
 8010594:	b29a      	uxth	r2, r3
 8010596:	e001      	b.n	801059c <inc_lock+0xfc>
 8010598:	f44f 7280 	mov.w	r2, #256	; 0x100
 801059c:	4906      	ldr	r1, [pc, #24]	; (80105b8 <inc_lock+0x118>)
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	011b      	lsls	r3, r3, #4
 80105a2:	440b      	add	r3, r1
 80105a4:	330c      	adds	r3, #12
 80105a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	3301      	adds	r3, #1
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3714      	adds	r7, #20
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr
 80105b8:	240000f8 	.word	0x240000f8

080105bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	3b01      	subs	r3, #1
 80105c8:	607b      	str	r3, [r7, #4]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d825      	bhi.n	801061c <dec_lock+0x60>
		n = Files[i].ctr;
 80105d0:	4a17      	ldr	r2, [pc, #92]	; (8010630 <dec_lock+0x74>)
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	011b      	lsls	r3, r3, #4
 80105d6:	4413      	add	r3, r2
 80105d8:	330c      	adds	r3, #12
 80105da:	881b      	ldrh	r3, [r3, #0]
 80105dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80105de:	89fb      	ldrh	r3, [r7, #14]
 80105e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105e4:	d101      	bne.n	80105ea <dec_lock+0x2e>
 80105e6:	2300      	movs	r3, #0
 80105e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80105ea:	89fb      	ldrh	r3, [r7, #14]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d002      	beq.n	80105f6 <dec_lock+0x3a>
 80105f0:	89fb      	ldrh	r3, [r7, #14]
 80105f2:	3b01      	subs	r3, #1
 80105f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80105f6:	4a0e      	ldr	r2, [pc, #56]	; (8010630 <dec_lock+0x74>)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	011b      	lsls	r3, r3, #4
 80105fc:	4413      	add	r3, r2
 80105fe:	330c      	adds	r3, #12
 8010600:	89fa      	ldrh	r2, [r7, #14]
 8010602:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010604:	89fb      	ldrh	r3, [r7, #14]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d105      	bne.n	8010616 <dec_lock+0x5a>
 801060a:	4a09      	ldr	r2, [pc, #36]	; (8010630 <dec_lock+0x74>)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	011b      	lsls	r3, r3, #4
 8010610:	4413      	add	r3, r2
 8010612:	2200      	movs	r2, #0
 8010614:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010616:	2300      	movs	r3, #0
 8010618:	737b      	strb	r3, [r7, #13]
 801061a:	e001      	b.n	8010620 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801061c:	2302      	movs	r3, #2
 801061e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010620:	7b7b      	ldrb	r3, [r7, #13]
}
 8010622:	4618      	mov	r0, r3
 8010624:	3714      	adds	r7, #20
 8010626:	46bd      	mov	sp, r7
 8010628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062c:	4770      	bx	lr
 801062e:	bf00      	nop
 8010630:	240000f8 	.word	0x240000f8

08010634 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010634:	b480      	push	{r7}
 8010636:	b085      	sub	sp, #20
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801063c:	2300      	movs	r3, #0
 801063e:	60fb      	str	r3, [r7, #12]
 8010640:	e010      	b.n	8010664 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010642:	4a0d      	ldr	r2, [pc, #52]	; (8010678 <clear_lock+0x44>)
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	011b      	lsls	r3, r3, #4
 8010648:	4413      	add	r3, r2
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	687a      	ldr	r2, [r7, #4]
 801064e:	429a      	cmp	r2, r3
 8010650:	d105      	bne.n	801065e <clear_lock+0x2a>
 8010652:	4a09      	ldr	r2, [pc, #36]	; (8010678 <clear_lock+0x44>)
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	011b      	lsls	r3, r3, #4
 8010658:	4413      	add	r3, r2
 801065a:	2200      	movs	r2, #0
 801065c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	3301      	adds	r3, #1
 8010662:	60fb      	str	r3, [r7, #12]
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2b01      	cmp	r3, #1
 8010668:	d9eb      	bls.n	8010642 <clear_lock+0xe>
	}
}
 801066a:	bf00      	nop
 801066c:	3714      	adds	r7, #20
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr
 8010676:	bf00      	nop
 8010678:	240000f8 	.word	0x240000f8

0801067c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b086      	sub	sp, #24
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010684:	2300      	movs	r3, #0
 8010686:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	78db      	ldrb	r3, [r3, #3]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d034      	beq.n	80106fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010694:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	7858      	ldrb	r0, [r3, #1]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80106a0:	2301      	movs	r3, #1
 80106a2:	697a      	ldr	r2, [r7, #20]
 80106a4:	f7ff fbfc 	bl	800fea0 <disk_write>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d002      	beq.n	80106b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80106ae:	2301      	movs	r3, #1
 80106b0:	73fb      	strb	r3, [r7, #15]
 80106b2:	e022      	b.n	80106fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2200      	movs	r2, #0
 80106b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106be:	697a      	ldr	r2, [r7, #20]
 80106c0:	1ad2      	subs	r2, r2, r3
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d217      	bcs.n	80106fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	789b      	ldrb	r3, [r3, #2]
 80106ce:	613b      	str	r3, [r7, #16]
 80106d0:	e010      	b.n	80106f4 <sync_window+0x78>
					wsect += fs->fsize;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d6:	697a      	ldr	r2, [r7, #20]
 80106d8:	4413      	add	r3, r2
 80106da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	7858      	ldrb	r0, [r3, #1]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80106e6:	2301      	movs	r3, #1
 80106e8:	697a      	ldr	r2, [r7, #20]
 80106ea:	f7ff fbd9 	bl	800fea0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	3b01      	subs	r3, #1
 80106f2:	613b      	str	r3, [r7, #16]
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	d8eb      	bhi.n	80106d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80106fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3718      	adds	r7, #24
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b084      	sub	sp, #16
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801070e:	2300      	movs	r3, #0
 8010710:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010716:	683a      	ldr	r2, [r7, #0]
 8010718:	429a      	cmp	r2, r3
 801071a:	d01b      	beq.n	8010754 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f7ff ffad 	bl	801067c <sync_window>
 8010722:	4603      	mov	r3, r0
 8010724:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010726:	7bfb      	ldrb	r3, [r7, #15]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d113      	bne.n	8010754 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	7858      	ldrb	r0, [r3, #1]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010736:	2301      	movs	r3, #1
 8010738:	683a      	ldr	r2, [r7, #0]
 801073a:	f7ff fb91 	bl	800fe60 <disk_read>
 801073e:	4603      	mov	r3, r0
 8010740:	2b00      	cmp	r3, #0
 8010742:	d004      	beq.n	801074e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010744:	f04f 33ff 	mov.w	r3, #4294967295
 8010748:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801074a:	2301      	movs	r3, #1
 801074c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	683a      	ldr	r2, [r7, #0]
 8010752:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8010754:	7bfb      	ldrb	r3, [r7, #15]
}
 8010756:	4618      	mov	r0, r3
 8010758:	3710      	adds	r7, #16
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
	...

08010760 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f7ff ff87 	bl	801067c <sync_window>
 801076e:	4603      	mov	r3, r0
 8010770:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010772:	7bfb      	ldrb	r3, [r7, #15]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d159      	bne.n	801082c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	2b03      	cmp	r3, #3
 801077e:	d149      	bne.n	8010814 <sync_fs+0xb4>
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	791b      	ldrb	r3, [r3, #4]
 8010784:	2b01      	cmp	r3, #1
 8010786:	d145      	bne.n	8010814 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	899b      	ldrh	r3, [r3, #12]
 8010792:	461a      	mov	r2, r3
 8010794:	2100      	movs	r1, #0
 8010796:	f7ff fda8 	bl	80102ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	333c      	adds	r3, #60	; 0x3c
 801079e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80107a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7ff fcb0 	bl	801010c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	333c      	adds	r3, #60	; 0x3c
 80107b0:	4921      	ldr	r1, [pc, #132]	; (8010838 <sync_fs+0xd8>)
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7ff fcc5 	bl	8010142 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	333c      	adds	r3, #60	; 0x3c
 80107bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80107c0:	491e      	ldr	r1, [pc, #120]	; (801083c <sync_fs+0xdc>)
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7ff fcbd 	bl	8010142 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	333c      	adds	r3, #60	; 0x3c
 80107cc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	69db      	ldr	r3, [r3, #28]
 80107d4:	4619      	mov	r1, r3
 80107d6:	4610      	mov	r0, r2
 80107d8:	f7ff fcb3 	bl	8010142 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	333c      	adds	r3, #60	; 0x3c
 80107e0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	699b      	ldr	r3, [r3, #24]
 80107e8:	4619      	mov	r1, r3
 80107ea:	4610      	mov	r0, r2
 80107ec:	f7ff fca9 	bl	8010142 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107f4:	1c5a      	adds	r2, r3, #1
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	7858      	ldrb	r0, [r3, #1]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010808:	2301      	movs	r3, #1
 801080a:	f7ff fb49 	bl	800fea0 <disk_write>
			fs->fsi_flag = 0;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	785b      	ldrb	r3, [r3, #1]
 8010818:	2200      	movs	r2, #0
 801081a:	2100      	movs	r1, #0
 801081c:	4618      	mov	r0, r3
 801081e:	f7ff fb5f 	bl	800fee0 <disk_ioctl>
 8010822:	4603      	mov	r3, r0
 8010824:	2b00      	cmp	r3, #0
 8010826:	d001      	beq.n	801082c <sync_fs+0xcc>
 8010828:	2301      	movs	r3, #1
 801082a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801082c:	7bfb      	ldrb	r3, [r7, #15]
}
 801082e:	4618      	mov	r0, r3
 8010830:	3710      	adds	r7, #16
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
 8010836:	bf00      	nop
 8010838:	41615252 	.word	0x41615252
 801083c:	61417272 	.word	0x61417272

08010840 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010840:	b480      	push	{r7}
 8010842:	b083      	sub	sp, #12
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	3b02      	subs	r3, #2
 801084e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6a1b      	ldr	r3, [r3, #32]
 8010854:	3b02      	subs	r3, #2
 8010856:	683a      	ldr	r2, [r7, #0]
 8010858:	429a      	cmp	r2, r3
 801085a:	d301      	bcc.n	8010860 <clust2sect+0x20>
 801085c:	2300      	movs	r3, #0
 801085e:	e008      	b.n	8010872 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	895b      	ldrh	r3, [r3, #10]
 8010864:	461a      	mov	r2, r3
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	fb03 f202 	mul.w	r2, r3, r2
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010870:	4413      	add	r3, r2
}
 8010872:	4618      	mov	r0, r3
 8010874:	370c      	adds	r7, #12
 8010876:	46bd      	mov	sp, r7
 8010878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087c:	4770      	bx	lr
	...

08010880 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010880:	b590      	push	{r4, r7, lr}
 8010882:	b089      	sub	sp, #36	; 0x24
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	2b01      	cmp	r3, #1
 8010894:	d904      	bls.n	80108a0 <get_fat+0x20>
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	6a1b      	ldr	r3, [r3, #32]
 801089a:	683a      	ldr	r2, [r7, #0]
 801089c:	429a      	cmp	r2, r3
 801089e:	d302      	bcc.n	80108a6 <get_fat+0x26>
		val = 1;	/* Internal error */
 80108a0:	2301      	movs	r3, #1
 80108a2:	61fb      	str	r3, [r7, #28]
 80108a4:	e13a      	b.n	8010b1c <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80108a6:	f04f 33ff 	mov.w	r3, #4294967295
 80108aa:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 80108ac:	69bb      	ldr	r3, [r7, #24]
 80108ae:	781b      	ldrb	r3, [r3, #0]
 80108b0:	3b01      	subs	r3, #1
 80108b2:	2b03      	cmp	r3, #3
 80108b4:	f200 8126 	bhi.w	8010b04 <get_fat+0x284>
 80108b8:	a201      	add	r2, pc, #4	; (adr r2, 80108c0 <get_fat+0x40>)
 80108ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108be:	bf00      	nop
 80108c0:	080108d1 	.word	0x080108d1
 80108c4:	0801097f 	.word	0x0801097f
 80108c8:	080109cb 	.word	0x080109cb
 80108cc:	08010a1b 	.word	0x08010a1b
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	60fb      	str	r3, [r7, #12]
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	085b      	lsrs	r3, r3, #1
 80108d8:	68fa      	ldr	r2, [r7, #12]
 80108da:	4413      	add	r3, r2
 80108dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80108de:	69bb      	ldr	r3, [r7, #24]
 80108e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108e2:	69bb      	ldr	r3, [r7, #24]
 80108e4:	899b      	ldrh	r3, [r3, #12]
 80108e6:	4619      	mov	r1, r3
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80108ee:	4413      	add	r3, r2
 80108f0:	4619      	mov	r1, r3
 80108f2:	69b8      	ldr	r0, [r7, #24]
 80108f4:	f7ff ff06 	bl	8010704 <move_window>
 80108f8:	4603      	mov	r3, r0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	f040 8105 	bne.w	8010b0a <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	1c5a      	adds	r2, r3, #1
 8010904:	60fa      	str	r2, [r7, #12]
 8010906:	69ba      	ldr	r2, [r7, #24]
 8010908:	8992      	ldrh	r2, [r2, #12]
 801090a:	fbb3 f1f2 	udiv	r1, r3, r2
 801090e:	fb02 f201 	mul.w	r2, r2, r1
 8010912:	1a9b      	subs	r3, r3, r2
 8010914:	69ba      	ldr	r2, [r7, #24]
 8010916:	4413      	add	r3, r2
 8010918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801091c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801091e:	69bb      	ldr	r3, [r7, #24]
 8010920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010922:	69bb      	ldr	r3, [r7, #24]
 8010924:	899b      	ldrh	r3, [r3, #12]
 8010926:	4619      	mov	r1, r3
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	fbb3 f3f1 	udiv	r3, r3, r1
 801092e:	4413      	add	r3, r2
 8010930:	4619      	mov	r1, r3
 8010932:	69b8      	ldr	r0, [r7, #24]
 8010934:	f7ff fee6 	bl	8010704 <move_window>
 8010938:	4603      	mov	r3, r0
 801093a:	2b00      	cmp	r3, #0
 801093c:	f040 80e7 	bne.w	8010b0e <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010940:	69bb      	ldr	r3, [r7, #24]
 8010942:	899b      	ldrh	r3, [r3, #12]
 8010944:	461a      	mov	r2, r3
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	fbb3 f1f2 	udiv	r1, r3, r2
 801094c:	fb02 f201 	mul.w	r2, r2, r1
 8010950:	1a9b      	subs	r3, r3, r2
 8010952:	69ba      	ldr	r2, [r7, #24]
 8010954:	4413      	add	r3, r2
 8010956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801095a:	021b      	lsls	r3, r3, #8
 801095c:	461a      	mov	r2, r3
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	4313      	orrs	r3, r2
 8010962:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	f003 0301 	and.w	r3, r3, #1
 801096a:	2b00      	cmp	r3, #0
 801096c:	d002      	beq.n	8010974 <get_fat+0xf4>
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	091b      	lsrs	r3, r3, #4
 8010972:	e002      	b.n	801097a <get_fat+0xfa>
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801097a:	61fb      	str	r3, [r7, #28]
			break;
 801097c:	e0ce      	b.n	8010b1c <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801097e:	69bb      	ldr	r3, [r7, #24]
 8010980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010982:	69bb      	ldr	r3, [r7, #24]
 8010984:	899b      	ldrh	r3, [r3, #12]
 8010986:	085b      	lsrs	r3, r3, #1
 8010988:	b29b      	uxth	r3, r3
 801098a:	4619      	mov	r1, r3
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010992:	4413      	add	r3, r2
 8010994:	4619      	mov	r1, r3
 8010996:	69b8      	ldr	r0, [r7, #24]
 8010998:	f7ff feb4 	bl	8010704 <move_window>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	f040 80b7 	bne.w	8010b12 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	005b      	lsls	r3, r3, #1
 80109ae:	69ba      	ldr	r2, [r7, #24]
 80109b0:	8992      	ldrh	r2, [r2, #12]
 80109b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80109b6:	fb02 f200 	mul.w	r2, r2, r0
 80109ba:	1a9b      	subs	r3, r3, r2
 80109bc:	440b      	add	r3, r1
 80109be:	4618      	mov	r0, r3
 80109c0:	f7ff faac 	bl	800ff1c <ld_word>
 80109c4:	4603      	mov	r3, r0
 80109c6:	61fb      	str	r3, [r7, #28]
			break;
 80109c8:	e0a8      	b.n	8010b1c <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80109ca:	69bb      	ldr	r3, [r7, #24]
 80109cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109ce:	69bb      	ldr	r3, [r7, #24]
 80109d0:	899b      	ldrh	r3, [r3, #12]
 80109d2:	089b      	lsrs	r3, r3, #2
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	4619      	mov	r1, r3
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	fbb3 f3f1 	udiv	r3, r3, r1
 80109de:	4413      	add	r3, r2
 80109e0:	4619      	mov	r1, r3
 80109e2:	69b8      	ldr	r0, [r7, #24]
 80109e4:	f7ff fe8e 	bl	8010704 <move_window>
 80109e8:	4603      	mov	r3, r0
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	f040 8093 	bne.w	8010b16 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80109f0:	69bb      	ldr	r3, [r7, #24]
 80109f2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	009b      	lsls	r3, r3, #2
 80109fa:	69ba      	ldr	r2, [r7, #24]
 80109fc:	8992      	ldrh	r2, [r2, #12]
 80109fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a02:	fb02 f200 	mul.w	r2, r2, r0
 8010a06:	1a9b      	subs	r3, r3, r2
 8010a08:	440b      	add	r3, r1
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7ff fa9e 	bl	800ff4c <ld_dword>
 8010a10:	4603      	mov	r3, r0
 8010a12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010a16:	61fb      	str	r3, [r7, #28]
			break;
 8010a18:	e080      	b.n	8010b1c <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010a20:	4323      	orrs	r3, r4
 8010a22:	d06f      	beq.n	8010b04 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	689b      	ldr	r3, [r3, #8]
 8010a28:	683a      	ldr	r2, [r7, #0]
 8010a2a:	1ad3      	subs	r3, r2, r3
 8010a2c:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010a34:	f113 30ff 	adds.w	r0, r3, #4294967295
 8010a38:	f144 31ff 	adc.w	r1, r4, #4294967295
 8010a3c:	69bb      	ldr	r3, [r7, #24]
 8010a3e:	899b      	ldrh	r3, [r3, #12]
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	f04f 0400 	mov.w	r4, #0
 8010a46:	461a      	mov	r2, r3
 8010a48:	4623      	mov	r3, r4
 8010a4a:	f7ef fc45 	bl	80002d8 <__aeabi_uldivmod>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	460c      	mov	r4, r1
 8010a52:	461a      	mov	r2, r3
 8010a54:	69bb      	ldr	r3, [r7, #24]
 8010a56:	895b      	ldrh	r3, [r3, #10]
 8010a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a5c:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	79db      	ldrb	r3, [r3, #7]
 8010a62:	2b02      	cmp	r3, #2
 8010a64:	d10e      	bne.n	8010a84 <get_fat+0x204>
					if (cofs <= clen) {
 8010a66:	697a      	ldr	r2, [r7, #20]
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d80a      	bhi.n	8010a84 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8010a6e:	697a      	ldr	r2, [r7, #20]
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d002      	beq.n	8010a7c <get_fat+0x1fc>
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	3301      	adds	r3, #1
 8010a7a:	e001      	b.n	8010a80 <get_fat+0x200>
 8010a7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010a80:	61fb      	str	r3, [r7, #28]
						break;
 8010a82:	e04b      	b.n	8010b1c <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	79db      	ldrb	r3, [r3, #7]
 8010a88:	2b03      	cmp	r3, #3
 8010a8a:	d108      	bne.n	8010a9e <get_fat+0x21e>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	699b      	ldr	r3, [r3, #24]
 8010a90:	697a      	ldr	r2, [r7, #20]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d203      	bcs.n	8010a9e <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	61fb      	str	r3, [r7, #28]
					break;
 8010a9c:	e03e      	b.n	8010b1c <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	79db      	ldrb	r3, [r3, #7]
 8010aa2:	2b02      	cmp	r3, #2
 8010aa4:	d02e      	beq.n	8010b04 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	69db      	ldr	r3, [r3, #28]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d003      	beq.n	8010ab6 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8010aae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010ab2:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8010ab4:	e032      	b.n	8010b1c <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ab6:	69bb      	ldr	r3, [r7, #24]
 8010ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	899b      	ldrh	r3, [r3, #12]
 8010abe:	089b      	lsrs	r3, r3, #2
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010aca:	4413      	add	r3, r2
 8010acc:	4619      	mov	r1, r3
 8010ace:	69b8      	ldr	r0, [r7, #24]
 8010ad0:	f7ff fe18 	bl	8010704 <move_window>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d11f      	bne.n	8010b1a <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8010ada:	69bb      	ldr	r3, [r7, #24]
 8010adc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	009b      	lsls	r3, r3, #2
 8010ae4:	69ba      	ldr	r2, [r7, #24]
 8010ae6:	8992      	ldrh	r2, [r2, #12]
 8010ae8:	fbb3 f0f2 	udiv	r0, r3, r2
 8010aec:	fb02 f200 	mul.w	r2, r2, r0
 8010af0:	1a9b      	subs	r3, r3, r2
 8010af2:	440b      	add	r3, r1
 8010af4:	4618      	mov	r0, r3
 8010af6:	f7ff fa29 	bl	800ff4c <ld_dword>
 8010afa:	4603      	mov	r3, r0
 8010afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010b00:	61fb      	str	r3, [r7, #28]
					break;
 8010b02:	e00b      	b.n	8010b1c <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010b04:	2301      	movs	r3, #1
 8010b06:	61fb      	str	r3, [r7, #28]
 8010b08:	e008      	b.n	8010b1c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b0a:	bf00      	nop
 8010b0c:	e006      	b.n	8010b1c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b0e:	bf00      	nop
 8010b10:	e004      	b.n	8010b1c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010b12:	bf00      	nop
 8010b14:	e002      	b.n	8010b1c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010b16:	bf00      	nop
 8010b18:	e000      	b.n	8010b1c <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010b1a:	bf00      	nop
		}
	}

	return val;
 8010b1c:	69fb      	ldr	r3, [r7, #28]
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3724      	adds	r7, #36	; 0x24
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd90      	pop	{r4, r7, pc}
 8010b26:	bf00      	nop

08010b28 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010b28:	b590      	push	{r4, r7, lr}
 8010b2a:	b089      	sub	sp, #36	; 0x24
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	60b9      	str	r1, [r7, #8]
 8010b32:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010b34:	2302      	movs	r3, #2
 8010b36:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	f240 8111 	bls.w	8010d62 <put_fat+0x23a>
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	6a1b      	ldr	r3, [r3, #32]
 8010b44:	68ba      	ldr	r2, [r7, #8]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	f080 810b 	bcs.w	8010d62 <put_fat+0x23a>
		switch (fs->fs_type) {
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	3b01      	subs	r3, #1
 8010b52:	2b03      	cmp	r3, #3
 8010b54:	f200 8105 	bhi.w	8010d62 <put_fat+0x23a>
 8010b58:	a201      	add	r2, pc, #4	; (adr r2, 8010b60 <put_fat+0x38>)
 8010b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b5e:	bf00      	nop
 8010b60:	08010b71 	.word	0x08010b71
 8010b64:	08010c75 	.word	0x08010c75
 8010b68:	08010ccb 	.word	0x08010ccb
 8010b6c:	08010ccb 	.word	0x08010ccb
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	61bb      	str	r3, [r7, #24]
 8010b74:	69bb      	ldr	r3, [r7, #24]
 8010b76:	085b      	lsrs	r3, r3, #1
 8010b78:	69ba      	ldr	r2, [r7, #24]
 8010b7a:	4413      	add	r3, r2
 8010b7c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	899b      	ldrh	r3, [r3, #12]
 8010b86:	4619      	mov	r1, r3
 8010b88:	69bb      	ldr	r3, [r7, #24]
 8010b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b8e:	4413      	add	r3, r2
 8010b90:	4619      	mov	r1, r3
 8010b92:	68f8      	ldr	r0, [r7, #12]
 8010b94:	f7ff fdb6 	bl	8010704 <move_window>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010b9c:	7ffb      	ldrb	r3, [r7, #31]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	f040 80d8 	bne.w	8010d54 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010baa:	69bb      	ldr	r3, [r7, #24]
 8010bac:	1c5a      	adds	r2, r3, #1
 8010bae:	61ba      	str	r2, [r7, #24]
 8010bb0:	68fa      	ldr	r2, [r7, #12]
 8010bb2:	8992      	ldrh	r2, [r2, #12]
 8010bb4:	fbb3 f0f2 	udiv	r0, r3, r2
 8010bb8:	fb02 f200 	mul.w	r2, r2, r0
 8010bbc:	1a9b      	subs	r3, r3, r2
 8010bbe:	440b      	add	r3, r1
 8010bc0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	f003 0301 	and.w	r3, r3, #1
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d00d      	beq.n	8010be8 <put_fat+0xc0>
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	b25b      	sxtb	r3, r3
 8010bd2:	f003 030f 	and.w	r3, r3, #15
 8010bd6:	b25a      	sxtb	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	b2db      	uxtb	r3, r3
 8010bdc:	011b      	lsls	r3, r3, #4
 8010bde:	b25b      	sxtb	r3, r3
 8010be0:	4313      	orrs	r3, r2
 8010be2:	b25b      	sxtb	r3, r3
 8010be4:	b2db      	uxtb	r3, r3
 8010be6:	e001      	b.n	8010bec <put_fat+0xc4>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	697a      	ldr	r2, [r7, #20]
 8010bee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	899b      	ldrh	r3, [r3, #12]
 8010bfe:	4619      	mov	r1, r3
 8010c00:	69bb      	ldr	r3, [r7, #24]
 8010c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c06:	4413      	add	r3, r2
 8010c08:	4619      	mov	r1, r3
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	f7ff fd7a 	bl	8010704 <move_window>
 8010c10:	4603      	mov	r3, r0
 8010c12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c14:	7ffb      	ldrb	r3, [r7, #31]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	f040 809e 	bne.w	8010d58 <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	899b      	ldrh	r3, [r3, #12]
 8010c26:	461a      	mov	r2, r3
 8010c28:	69bb      	ldr	r3, [r7, #24]
 8010c2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c2e:	fb02 f200 	mul.w	r2, r2, r0
 8010c32:	1a9b      	subs	r3, r3, r2
 8010c34:	440b      	add	r3, r1
 8010c36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	f003 0301 	and.w	r3, r3, #1
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d003      	beq.n	8010c4a <put_fat+0x122>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	091b      	lsrs	r3, r3, #4
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	e00e      	b.n	8010c68 <put_fat+0x140>
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	781b      	ldrb	r3, [r3, #0]
 8010c4e:	b25b      	sxtb	r3, r3
 8010c50:	f023 030f 	bic.w	r3, r3, #15
 8010c54:	b25a      	sxtb	r2, r3
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	0a1b      	lsrs	r3, r3, #8
 8010c5a:	b25b      	sxtb	r3, r3
 8010c5c:	f003 030f 	and.w	r3, r3, #15
 8010c60:	b25b      	sxtb	r3, r3
 8010c62:	4313      	orrs	r3, r2
 8010c64:	b25b      	sxtb	r3, r3
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	697a      	ldr	r2, [r7, #20]
 8010c6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2201      	movs	r2, #1
 8010c70:	70da      	strb	r2, [r3, #3]
			break;
 8010c72:	e076      	b.n	8010d62 <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	899b      	ldrh	r3, [r3, #12]
 8010c7c:	085b      	lsrs	r3, r3, #1
 8010c7e:	b29b      	uxth	r3, r3
 8010c80:	4619      	mov	r1, r3
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c88:	4413      	add	r3, r2
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f7ff fd39 	bl	8010704 <move_window>
 8010c92:	4603      	mov	r3, r0
 8010c94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c96:	7ffb      	ldrb	r3, [r7, #31]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d15f      	bne.n	8010d5c <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	005b      	lsls	r3, r3, #1
 8010ca6:	68fa      	ldr	r2, [r7, #12]
 8010ca8:	8992      	ldrh	r2, [r2, #12]
 8010caa:	fbb3 f0f2 	udiv	r0, r3, r2
 8010cae:	fb02 f200 	mul.w	r2, r2, r0
 8010cb2:	1a9b      	subs	r3, r3, r2
 8010cb4:	440b      	add	r3, r1
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	b292      	uxth	r2, r2
 8010cba:	4611      	mov	r1, r2
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7ff fa25 	bl	801010c <st_word>
			fs->wflag = 1;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2201      	movs	r2, #1
 8010cc6:	70da      	strb	r2, [r3, #3]
			break;
 8010cc8:	e04b      	b.n	8010d62 <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	899b      	ldrh	r3, [r3, #12]
 8010cd2:	089b      	lsrs	r3, r3, #2
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cde:	4413      	add	r3, r2
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	68f8      	ldr	r0, [r7, #12]
 8010ce4:	f7ff fd0e 	bl	8010704 <move_window>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010cec:	7ffb      	ldrb	r3, [r7, #31]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d136      	bne.n	8010d60 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	2b04      	cmp	r3, #4
 8010cf8:	d017      	beq.n	8010d2a <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	68fa      	ldr	r2, [r7, #12]
 8010d0c:	8992      	ldrh	r2, [r2, #12]
 8010d0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d12:	fb02 f200 	mul.w	r2, r2, r0
 8010d16:	1a9b      	subs	r3, r3, r2
 8010d18:	440b      	add	r3, r1
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7ff f916 	bl	800ff4c <ld_dword>
 8010d20:	4603      	mov	r3, r0
 8010d22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010d26:	4323      	orrs	r3, r4
 8010d28:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	009b      	lsls	r3, r3, #2
 8010d34:	68fa      	ldr	r2, [r7, #12]
 8010d36:	8992      	ldrh	r2, [r2, #12]
 8010d38:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d3c:	fb02 f200 	mul.w	r2, r2, r0
 8010d40:	1a9b      	subs	r3, r3, r2
 8010d42:	440b      	add	r3, r1
 8010d44:	6879      	ldr	r1, [r7, #4]
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7ff f9fb 	bl	8010142 <st_dword>
			fs->wflag = 1;
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	2201      	movs	r2, #1
 8010d50:	70da      	strb	r2, [r3, #3]
			break;
 8010d52:	e006      	b.n	8010d62 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010d54:	bf00      	nop
 8010d56:	e004      	b.n	8010d62 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010d58:	bf00      	nop
 8010d5a:	e002      	b.n	8010d62 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010d5c:	bf00      	nop
 8010d5e:	e000      	b.n	8010d62 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010d60:	bf00      	nop
		}
	}
	return res;
 8010d62:	7ffb      	ldrb	r3, [r7, #31]
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3724      	adds	r7, #36	; 0x24
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd90      	pop	{r4, r7, pc}

08010d6c <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b08a      	sub	sp, #40	; 0x28
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	60f8      	str	r0, [r7, #12]
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	3b02      	subs	r3, #2
 8010d7c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	6a1b      	ldr	r3, [r3, #32]
 8010d82:	3b02      	subs	r3, #2
 8010d84:	68ba      	ldr	r2, [r7, #8]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d301      	bcc.n	8010d8e <find_bitmap+0x22>
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	61fb      	str	r3, [r7, #28]
 8010d92:	69fb      	ldr	r3, [r7, #28]
 8010d94:	61bb      	str	r3, [r7, #24]
 8010d96:	2300      	movs	r3, #0
 8010d98:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	08db      	lsrs	r3, r3, #3
 8010da2:	68f9      	ldr	r1, [r7, #12]
 8010da4:	8989      	ldrh	r1, [r1, #12]
 8010da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010daa:	4413      	add	r3, r2
 8010dac:	4619      	mov	r1, r3
 8010dae:	68f8      	ldr	r0, [r7, #12]
 8010db0:	f7ff fca8 	bl	8010704 <move_window>
 8010db4:	4603      	mov	r3, r0
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d002      	beq.n	8010dc0 <find_bitmap+0x54>
 8010dba:	f04f 33ff 	mov.w	r3, #4294967295
 8010dbe:	e058      	b.n	8010e72 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	08db      	lsrs	r3, r3, #3
 8010dc4:	68fa      	ldr	r2, [r7, #12]
 8010dc6:	8992      	ldrh	r2, [r2, #12]
 8010dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8010dcc:	fb02 f201 	mul.w	r2, r2, r1
 8010dd0:	1a9b      	subs	r3, r3, r2
 8010dd2:	623b      	str	r3, [r7, #32]
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	f003 0307 	and.w	r3, r3, #7
 8010dda:	2201      	movs	r2, #1
 8010ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8010de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8010de4:	68fa      	ldr	r2, [r7, #12]
 8010de6:	6a3b      	ldr	r3, [r7, #32]
 8010de8:	4413      	add	r3, r2
 8010dea:	333c      	adds	r3, #60	; 0x3c
 8010dec:	781a      	ldrb	r2, [r3, #0]
 8010dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010df2:	4013      	ands	r3, r2
 8010df4:	74fb      	strb	r3, [r7, #19]
 8010df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dfa:	005b      	lsls	r3, r3, #1
 8010dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8010e00:	69fb      	ldr	r3, [r7, #28]
 8010e02:	3301      	adds	r3, #1
 8010e04:	61fb      	str	r3, [r7, #28]
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	6a1b      	ldr	r3, [r3, #32]
 8010e0a:	3b02      	subs	r3, #2
 8010e0c:	69fa      	ldr	r2, [r7, #28]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d307      	bcc.n	8010e22 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8010e12:	2300      	movs	r3, #0
 8010e14:	61fb      	str	r3, [r7, #28]
 8010e16:	2300      	movs	r3, #0
 8010e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	899b      	ldrh	r3, [r3, #12]
 8010e20:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8010e22:	7cfb      	ldrb	r3, [r7, #19]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d109      	bne.n	8010e3c <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	617b      	str	r3, [r7, #20]
 8010e2e:	697a      	ldr	r2, [r7, #20]
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d106      	bne.n	8010e44 <find_bitmap+0xd8>
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	3302      	adds	r3, #2
 8010e3a:	e01a      	b.n	8010e72 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	61bb      	str	r3, [r7, #24]
 8010e40:	2300      	movs	r3, #0
 8010e42:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8010e44:	69fa      	ldr	r2, [r7, #28]
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d101      	bne.n	8010e50 <find_bitmap+0xe4>
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	e010      	b.n	8010e72 <find_bitmap+0x106>
			} while (bm);
 8010e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d1c5      	bne.n	8010de4 <find_bitmap+0x78>
			bm = 1;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8010e5e:	6a3b      	ldr	r3, [r7, #32]
 8010e60:	3301      	adds	r3, #1
 8010e62:	623b      	str	r3, [r7, #32]
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	899b      	ldrh	r3, [r3, #12]
 8010e68:	461a      	mov	r2, r3
 8010e6a:	6a3b      	ldr	r3, [r7, #32]
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d3b9      	bcc.n	8010de4 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010e70:	e793      	b.n	8010d9a <find_bitmap+0x2e>
	}
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3728      	adds	r7, #40	; 0x28
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}

08010e7a <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8010e7a:	b580      	push	{r7, lr}
 8010e7c:	b088      	sub	sp, #32
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	60f8      	str	r0, [r7, #12]
 8010e82:	60b9      	str	r1, [r7, #8]
 8010e84:	607a      	str	r2, [r7, #4]
 8010e86:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	3b02      	subs	r3, #2
 8010e8c:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	08db      	lsrs	r3, r3, #3
 8010e96:	68f9      	ldr	r1, [r7, #12]
 8010e98:	8989      	ldrh	r1, [r1, #12]
 8010e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e9e:	4413      	add	r3, r2
 8010ea0:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	08db      	lsrs	r3, r3, #3
 8010ea6:	68fa      	ldr	r2, [r7, #12]
 8010ea8:	8992      	ldrh	r2, [r2, #12]
 8010eaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8010eae:	fb02 f201 	mul.w	r2, r2, r1
 8010eb2:	1a9b      	subs	r3, r3, r2
 8010eb4:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	f003 0307 	and.w	r3, r3, #7
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8010ec2:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	1c5a      	adds	r2, r3, #1
 8010ec8:	617a      	str	r2, [r7, #20]
 8010eca:	4619      	mov	r1, r3
 8010ecc:	68f8      	ldr	r0, [r7, #12]
 8010ece:	f7ff fc19 	bl	8010704 <move_window>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d001      	beq.n	8010edc <change_bitmap+0x62>
 8010ed8:	2301      	movs	r3, #1
 8010eda:	e03f      	b.n	8010f5c <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8010edc:	68fa      	ldr	r2, [r7, #12]
 8010ede:	69bb      	ldr	r3, [r7, #24]
 8010ee0:	4413      	add	r3, r2
 8010ee2:	333c      	adds	r3, #60	; 0x3c
 8010ee4:	781a      	ldrb	r2, [r3, #0]
 8010ee6:	7ffb      	ldrb	r3, [r7, #31]
 8010ee8:	4013      	ands	r3, r2
 8010eea:	b2db      	uxtb	r3, r3
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	bf14      	ite	ne
 8010ef0:	2301      	movne	r3, #1
 8010ef2:	2300      	moveq	r3, #0
 8010ef4:	b2db      	uxtb	r3, r3
 8010ef6:	461a      	mov	r2, r3
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d101      	bne.n	8010f02 <change_bitmap+0x88>
 8010efe:	2302      	movs	r3, #2
 8010f00:	e02c      	b.n	8010f5c <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8010f02:	68fa      	ldr	r2, [r7, #12]
 8010f04:	69bb      	ldr	r3, [r7, #24]
 8010f06:	4413      	add	r3, r2
 8010f08:	333c      	adds	r3, #60	; 0x3c
 8010f0a:	781a      	ldrb	r2, [r3, #0]
 8010f0c:	7ffb      	ldrb	r3, [r7, #31]
 8010f0e:	4053      	eors	r3, r2
 8010f10:	b2d9      	uxtb	r1, r3
 8010f12:	68fa      	ldr	r2, [r7, #12]
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	4413      	add	r3, r2
 8010f18:	333c      	adds	r3, #60	; 0x3c
 8010f1a:	460a      	mov	r2, r1
 8010f1c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	2201      	movs	r2, #1
 8010f22:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	3b01      	subs	r3, #1
 8010f28:	607b      	str	r3, [r7, #4]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d101      	bne.n	8010f34 <change_bitmap+0xba>
 8010f30:	2300      	movs	r3, #0
 8010f32:	e013      	b.n	8010f5c <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8010f34:	7ffb      	ldrb	r3, [r7, #31]
 8010f36:	005b      	lsls	r3, r3, #1
 8010f38:	77fb      	strb	r3, [r7, #31]
 8010f3a:	7ffb      	ldrb	r3, [r7, #31]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d1cd      	bne.n	8010edc <change_bitmap+0x62>
			bm = 1;
 8010f40:	2301      	movs	r3, #1
 8010f42:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8010f44:	69bb      	ldr	r3, [r7, #24]
 8010f46:	3301      	adds	r3, #1
 8010f48:	61bb      	str	r3, [r7, #24]
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	899b      	ldrh	r3, [r3, #12]
 8010f4e:	461a      	mov	r2, r3
 8010f50:	69bb      	ldr	r3, [r7, #24]
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d3c2      	bcc.n	8010edc <change_bitmap+0x62>
		i = 0;
 8010f56:	2300      	movs	r3, #0
 8010f58:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8010f5a:	e7b3      	b.n	8010ec4 <change_bitmap+0x4a>
	}
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	3720      	adds	r7, #32
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}

08010f64 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b086      	sub	sp, #24
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	79db      	ldrb	r3, [r3, #7]
 8010f70:	2b03      	cmp	r3, #3
 8010f72:	d121      	bne.n	8010fb8 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	689b      	ldr	r3, [r3, #8]
 8010f78:	617b      	str	r3, [r7, #20]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	699b      	ldr	r3, [r3, #24]
 8010f7e:	613b      	str	r3, [r7, #16]
 8010f80:	e014      	b.n	8010fac <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6818      	ldr	r0, [r3, #0]
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	3301      	adds	r3, #1
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	6979      	ldr	r1, [r7, #20]
 8010f8e:	f7ff fdcb 	bl	8010b28 <put_fat>
 8010f92:	4603      	mov	r3, r0
 8010f94:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8010f96:	7bfb      	ldrb	r3, [r7, #15]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d001      	beq.n	8010fa0 <fill_first_frag+0x3c>
 8010f9c:	7bfb      	ldrb	r3, [r7, #15]
 8010f9e:	e00c      	b.n	8010fba <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	617b      	str	r3, [r7, #20]
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	3b01      	subs	r3, #1
 8010faa:	613b      	str	r3, [r7, #16]
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d1e7      	bne.n	8010f82 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8010fb8:	2300      	movs	r3, #0
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3718      	adds	r7, #24
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}

08010fc2 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8010fc2:	b580      	push	{r7, lr}
 8010fc4:	b086      	sub	sp, #24
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	60f8      	str	r0, [r7, #12]
 8010fca:	60b9      	str	r1, [r7, #8]
 8010fcc:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8010fce:	e020      	b.n	8011012 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	6818      	ldr	r0, [r3, #0]
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	69db      	ldr	r3, [r3, #28]
 8010fd8:	68ba      	ldr	r2, [r7, #8]
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	1c59      	adds	r1, r3, #1
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	69db      	ldr	r3, [r3, #28]
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d905      	bls.n	8010ff2 <fill_last_frag+0x30>
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	69db      	ldr	r3, [r3, #28]
 8010fea:	68ba      	ldr	r2, [r7, #8]
 8010fec:	1ad3      	subs	r3, r2, r3
 8010fee:	3302      	adds	r3, #2
 8010ff0:	e000      	b.n	8010ff4 <fill_last_frag+0x32>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	461a      	mov	r2, r3
 8010ff6:	f7ff fd97 	bl	8010b28 <put_fat>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8010ffe:	7dfb      	ldrb	r3, [r7, #23]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d001      	beq.n	8011008 <fill_last_frag+0x46>
 8011004:	7dfb      	ldrb	r3, [r7, #23]
 8011006:	e009      	b.n	801101c <fill_last_frag+0x5a>
		obj->n_frag--;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	69db      	ldr	r3, [r3, #28]
 801100c:	1e5a      	subs	r2, r3, #1
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	69db      	ldr	r3, [r3, #28]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d1da      	bne.n	8010fd0 <fill_last_frag+0xe>
	}
	return FR_OK;
 801101a:	2300      	movs	r3, #0
}
 801101c:	4618      	mov	r0, r3
 801101e:	3718      	adds	r7, #24
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b08a      	sub	sp, #40	; 0x28
 8011028:	af00      	add	r7, sp, #0
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011030:	2300      	movs	r3, #0
 8011032:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	627b      	str	r3, [r7, #36]	; 0x24
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	2b01      	cmp	r3, #1
 8011046:	d904      	bls.n	8011052 <remove_chain+0x2e>
 8011048:	69bb      	ldr	r3, [r7, #24]
 801104a:	6a1b      	ldr	r3, [r3, #32]
 801104c:	68ba      	ldr	r2, [r7, #8]
 801104e:	429a      	cmp	r2, r3
 8011050:	d301      	bcc.n	8011056 <remove_chain+0x32>
 8011052:	2302      	movs	r3, #2
 8011054:	e096      	b.n	8011184 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d014      	beq.n	8011086 <remove_chain+0x62>
 801105c:	69bb      	ldr	r3, [r7, #24]
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	2b04      	cmp	r3, #4
 8011062:	d103      	bne.n	801106c <remove_chain+0x48>
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	79db      	ldrb	r3, [r3, #7]
 8011068:	2b02      	cmp	r3, #2
 801106a:	d00c      	beq.n	8011086 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801106c:	f04f 32ff 	mov.w	r2, #4294967295
 8011070:	6879      	ldr	r1, [r7, #4]
 8011072:	69b8      	ldr	r0, [r7, #24]
 8011074:	f7ff fd58 	bl	8010b28 <put_fat>
 8011078:	4603      	mov	r3, r0
 801107a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801107c:	7ffb      	ldrb	r3, [r7, #31]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d001      	beq.n	8011086 <remove_chain+0x62>
 8011082:	7ffb      	ldrb	r3, [r7, #31]
 8011084:	e07e      	b.n	8011184 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011086:	68b9      	ldr	r1, [r7, #8]
 8011088:	68f8      	ldr	r0, [r7, #12]
 801108a:	f7ff fbf9 	bl	8010880 <get_fat>
 801108e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d055      	beq.n	8011142 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	2b01      	cmp	r3, #1
 801109a:	d101      	bne.n	80110a0 <remove_chain+0x7c>
 801109c:	2302      	movs	r3, #2
 801109e:	e071      	b.n	8011184 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110a6:	d101      	bne.n	80110ac <remove_chain+0x88>
 80110a8:	2301      	movs	r3, #1
 80110aa:	e06b      	b.n	8011184 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80110ac:	69bb      	ldr	r3, [r7, #24]
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	2b04      	cmp	r3, #4
 80110b2:	d00b      	beq.n	80110cc <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80110b4:	2200      	movs	r2, #0
 80110b6:	68b9      	ldr	r1, [r7, #8]
 80110b8:	69b8      	ldr	r0, [r7, #24]
 80110ba:	f7ff fd35 	bl	8010b28 <put_fat>
 80110be:	4603      	mov	r3, r0
 80110c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80110c2:	7ffb      	ldrb	r3, [r7, #31]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d001      	beq.n	80110cc <remove_chain+0xa8>
 80110c8:	7ffb      	ldrb	r3, [r7, #31]
 80110ca:	e05b      	b.n	8011184 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80110cc:	69bb      	ldr	r3, [r7, #24]
 80110ce:	69da      	ldr	r2, [r3, #28]
 80110d0:	69bb      	ldr	r3, [r7, #24]
 80110d2:	6a1b      	ldr	r3, [r3, #32]
 80110d4:	3b02      	subs	r3, #2
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d20b      	bcs.n	80110f2 <remove_chain+0xce>
			fs->free_clst++;
 80110da:	69bb      	ldr	r3, [r7, #24]
 80110dc:	69db      	ldr	r3, [r3, #28]
 80110de:	1c5a      	adds	r2, r3, #1
 80110e0:	69bb      	ldr	r3, [r7, #24]
 80110e2:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 80110e4:	69bb      	ldr	r3, [r7, #24]
 80110e6:	791b      	ldrb	r3, [r3, #4]
 80110e8:	f043 0301 	orr.w	r3, r3, #1
 80110ec:	b2da      	uxtb	r2, r3
 80110ee:	69bb      	ldr	r3, [r7, #24]
 80110f0:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80110f2:	6a3b      	ldr	r3, [r7, #32]
 80110f4:	3301      	adds	r3, #1
 80110f6:	697a      	ldr	r2, [r7, #20]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d102      	bne.n	8011102 <remove_chain+0xde>
			ecl = nxt;
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	623b      	str	r3, [r7, #32]
 8011100:	e017      	b.n	8011132 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8011102:	69bb      	ldr	r3, [r7, #24]
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	2b04      	cmp	r3, #4
 8011108:	d10f      	bne.n	801112a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 801110a:	6a3a      	ldr	r2, [r7, #32]
 801110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110e:	1ad3      	subs	r3, r2, r3
 8011110:	1c5a      	adds	r2, r3, #1
 8011112:	2300      	movs	r3, #0
 8011114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011116:	69b8      	ldr	r0, [r7, #24]
 8011118:	f7ff feaf 	bl	8010e7a <change_bitmap>
 801111c:	4603      	mov	r3, r0
 801111e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8011120:	7ffb      	ldrb	r3, [r7, #31]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d001      	beq.n	801112a <remove_chain+0x106>
 8011126:	7ffb      	ldrb	r3, [r7, #31]
 8011128:	e02c      	b.n	8011184 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	623b      	str	r3, [r7, #32]
 801112e:	6a3b      	ldr	r3, [r7, #32]
 8011130:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011136:	69bb      	ldr	r3, [r7, #24]
 8011138:	6a1b      	ldr	r3, [r3, #32]
 801113a:	68ba      	ldr	r2, [r7, #8]
 801113c:	429a      	cmp	r2, r3
 801113e:	d3a2      	bcc.n	8011086 <remove_chain+0x62>
 8011140:	e000      	b.n	8011144 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8011142:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8011144:	69bb      	ldr	r3, [r7, #24]
 8011146:	781b      	ldrb	r3, [r3, #0]
 8011148:	2b04      	cmp	r3, #4
 801114a:	d11a      	bne.n	8011182 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d103      	bne.n	801115a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	2200      	movs	r2, #0
 8011156:	71da      	strb	r2, [r3, #7]
 8011158:	e013      	b.n	8011182 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	79db      	ldrb	r3, [r3, #7]
 801115e:	2b03      	cmp	r3, #3
 8011160:	d10f      	bne.n	8011182 <remove_chain+0x15e>
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	689b      	ldr	r3, [r3, #8]
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	429a      	cmp	r2, r3
 801116a:	d30a      	bcc.n	8011182 <remove_chain+0x15e>
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	689a      	ldr	r2, [r3, #8]
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	699b      	ldr	r3, [r3, #24]
 8011174:	4413      	add	r3, r2
 8011176:	687a      	ldr	r2, [r7, #4]
 8011178:	429a      	cmp	r2, r3
 801117a:	d802      	bhi.n	8011182 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	2202      	movs	r2, #2
 8011180:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8011182:	2300      	movs	r3, #0
}
 8011184:	4618      	mov	r0, r3
 8011186:	3728      	adds	r7, #40	; 0x28
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b088      	sub	sp, #32
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d10d      	bne.n	80111be <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	699b      	ldr	r3, [r3, #24]
 80111a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80111a8:	69bb      	ldr	r3, [r7, #24]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d004      	beq.n	80111b8 <create_chain+0x2c>
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	6a1b      	ldr	r3, [r3, #32]
 80111b2:	69ba      	ldr	r2, [r7, #24]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d31b      	bcc.n	80111f0 <create_chain+0x64>
 80111b8:	2301      	movs	r3, #1
 80111ba:	61bb      	str	r3, [r7, #24]
 80111bc:	e018      	b.n	80111f0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80111be:	6839      	ldr	r1, [r7, #0]
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f7ff fb5d 	bl	8010880 <get_fat>
 80111c6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	2b01      	cmp	r3, #1
 80111cc:	d801      	bhi.n	80111d2 <create_chain+0x46>
 80111ce:	2301      	movs	r3, #1
 80111d0:	e0d9      	b.n	8011386 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d8:	d101      	bne.n	80111de <create_chain+0x52>
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	e0d3      	b.n	8011386 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	6a1b      	ldr	r3, [r3, #32]
 80111e2:	68fa      	ldr	r2, [r7, #12]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d201      	bcs.n	80111ec <create_chain+0x60>
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	e0cc      	b.n	8011386 <create_chain+0x1fa>
		scl = clst;
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	2b04      	cmp	r3, #4
 80111f6:	d164      	bne.n	80112c2 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80111f8:	2201      	movs	r2, #1
 80111fa:	69b9      	ldr	r1, [r7, #24]
 80111fc:	6938      	ldr	r0, [r7, #16]
 80111fe:	f7ff fdb5 	bl	8010d6c <find_bitmap>
 8011202:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8011204:	69fb      	ldr	r3, [r7, #28]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d003      	beq.n	8011212 <create_chain+0x86>
 801120a:	69fb      	ldr	r3, [r7, #28]
 801120c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011210:	d101      	bne.n	8011216 <create_chain+0x8a>
 8011212:	69fb      	ldr	r3, [r7, #28]
 8011214:	e0b7      	b.n	8011386 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8011216:	2301      	movs	r3, #1
 8011218:	2201      	movs	r2, #1
 801121a:	69f9      	ldr	r1, [r7, #28]
 801121c:	6938      	ldr	r0, [r7, #16]
 801121e:	f7ff fe2c 	bl	8010e7a <change_bitmap>
 8011222:	4603      	mov	r3, r0
 8011224:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8011226:	7dfb      	ldrb	r3, [r7, #23]
 8011228:	2b02      	cmp	r3, #2
 801122a:	d101      	bne.n	8011230 <create_chain+0xa4>
 801122c:	2301      	movs	r3, #1
 801122e:	e0aa      	b.n	8011386 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8011230:	7dfb      	ldrb	r3, [r7, #23]
 8011232:	2b01      	cmp	r3, #1
 8011234:	d102      	bne.n	801123c <create_chain+0xb0>
 8011236:	f04f 33ff 	mov.w	r3, #4294967295
 801123a:	e0a4      	b.n	8011386 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d103      	bne.n	801124a <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2202      	movs	r2, #2
 8011246:	71da      	strb	r2, [r3, #7]
 8011248:	e011      	b.n	801126e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	79db      	ldrb	r3, [r3, #7]
 801124e:	2b02      	cmp	r3, #2
 8011250:	d10d      	bne.n	801126e <create_chain+0xe2>
 8011252:	69bb      	ldr	r3, [r7, #24]
 8011254:	3301      	adds	r3, #1
 8011256:	69fa      	ldr	r2, [r7, #28]
 8011258:	429a      	cmp	r2, r3
 801125a:	d008      	beq.n	801126e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	689b      	ldr	r3, [r3, #8]
 8011260:	69ba      	ldr	r2, [r7, #24]
 8011262:	1ad2      	subs	r2, r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2203      	movs	r2, #3
 801126c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	79db      	ldrb	r3, [r3, #7]
 8011272:	2b02      	cmp	r3, #2
 8011274:	d064      	beq.n	8011340 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	3301      	adds	r3, #1
 801127a:	69fa      	ldr	r2, [r7, #28]
 801127c:	429a      	cmp	r2, r3
 801127e:	d10b      	bne.n	8011298 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	69db      	ldr	r3, [r3, #28]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d003      	beq.n	8011290 <create_chain+0x104>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	69db      	ldr	r3, [r3, #28]
 801128c:	3301      	adds	r3, #1
 801128e:	e000      	b.n	8011292 <create_chain+0x106>
 8011290:	2302      	movs	r3, #2
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	61d3      	str	r3, [r2, #28]
 8011296:	e053      	b.n	8011340 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	69db      	ldr	r3, [r3, #28]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d102      	bne.n	80112a6 <create_chain+0x11a>
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2201      	movs	r2, #1
 80112a4:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80112a6:	69fa      	ldr	r2, [r7, #28]
 80112a8:	6839      	ldr	r1, [r7, #0]
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f7ff fe89 	bl	8010fc2 <fill_last_frag>
 80112b0:	4603      	mov	r3, r0
 80112b2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80112b4:	7dfb      	ldrb	r3, [r7, #23]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d142      	bne.n	8011340 <create_chain+0x1b4>
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2201      	movs	r2, #1
 80112be:	61da      	str	r2, [r3, #28]
 80112c0:	e03e      	b.n	8011340 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80112c2:	69bb      	ldr	r3, [r7, #24]
 80112c4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80112c6:	69fb      	ldr	r3, [r7, #28]
 80112c8:	3301      	adds	r3, #1
 80112ca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80112cc:	693b      	ldr	r3, [r7, #16]
 80112ce:	6a1b      	ldr	r3, [r3, #32]
 80112d0:	69fa      	ldr	r2, [r7, #28]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d307      	bcc.n	80112e6 <create_chain+0x15a>
				ncl = 2;
 80112d6:	2302      	movs	r3, #2
 80112d8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80112da:	69fa      	ldr	r2, [r7, #28]
 80112dc:	69bb      	ldr	r3, [r7, #24]
 80112de:	429a      	cmp	r2, r3
 80112e0:	d901      	bls.n	80112e6 <create_chain+0x15a>
 80112e2:	2300      	movs	r3, #0
 80112e4:	e04f      	b.n	8011386 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80112e6:	69f9      	ldr	r1, [r7, #28]
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f7ff fac9 	bl	8010880 <get_fat>
 80112ee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d00e      	beq.n	8011314 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	d003      	beq.n	8011304 <create_chain+0x178>
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011302:	d101      	bne.n	8011308 <create_chain+0x17c>
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	e03e      	b.n	8011386 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8011308:	69fa      	ldr	r2, [r7, #28]
 801130a:	69bb      	ldr	r3, [r7, #24]
 801130c:	429a      	cmp	r2, r3
 801130e:	d1da      	bne.n	80112c6 <create_chain+0x13a>
 8011310:	2300      	movs	r3, #0
 8011312:	e038      	b.n	8011386 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8011314:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011316:	f04f 32ff 	mov.w	r2, #4294967295
 801131a:	69f9      	ldr	r1, [r7, #28]
 801131c:	6938      	ldr	r0, [r7, #16]
 801131e:	f7ff fc03 	bl	8010b28 <put_fat>
 8011322:	4603      	mov	r3, r0
 8011324:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011326:	7dfb      	ldrb	r3, [r7, #23]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d109      	bne.n	8011340 <create_chain+0x1b4>
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d006      	beq.n	8011340 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011332:	69fa      	ldr	r2, [r7, #28]
 8011334:	6839      	ldr	r1, [r7, #0]
 8011336:	6938      	ldr	r0, [r7, #16]
 8011338:	f7ff fbf6 	bl	8010b28 <put_fat>
 801133c:	4603      	mov	r3, r0
 801133e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011340:	7dfb      	ldrb	r3, [r7, #23]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d116      	bne.n	8011374 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	69fa      	ldr	r2, [r7, #28]
 801134a:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	69da      	ldr	r2, [r3, #28]
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	6a1b      	ldr	r3, [r3, #32]
 8011354:	3b02      	subs	r3, #2
 8011356:	429a      	cmp	r2, r3
 8011358:	d804      	bhi.n	8011364 <create_chain+0x1d8>
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	69db      	ldr	r3, [r3, #28]
 801135e:	1e5a      	subs	r2, r3, #1
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	791b      	ldrb	r3, [r3, #4]
 8011368:	f043 0301 	orr.w	r3, r3, #1
 801136c:	b2da      	uxtb	r2, r3
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	711a      	strb	r2, [r3, #4]
 8011372:	e007      	b.n	8011384 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011374:	7dfb      	ldrb	r3, [r7, #23]
 8011376:	2b01      	cmp	r3, #1
 8011378:	d102      	bne.n	8011380 <create_chain+0x1f4>
 801137a:	f04f 33ff 	mov.w	r3, #4294967295
 801137e:	e000      	b.n	8011382 <create_chain+0x1f6>
 8011380:	2301      	movs	r3, #1
 8011382:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011384:	69fb      	ldr	r3, [r7, #28]
}
 8011386:	4618      	mov	r0, r3
 8011388:	3720      	adds	r7, #32
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}

0801138e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801138e:	b590      	push	{r4, r7, lr}
 8011390:	b089      	sub	sp, #36	; 0x24
 8011392:	af00      	add	r7, sp, #0
 8011394:	60f8      	str	r0, [r7, #12]
 8011396:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113a4:	3304      	adds	r3, #4
 80113a6:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	899b      	ldrh	r3, [r3, #12]
 80113ac:	b29b      	uxth	r3, r3
 80113ae:	f04f 0400 	mov.w	r4, #0
 80113b2:	461a      	mov	r2, r3
 80113b4:	4623      	mov	r3, r4
 80113b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80113ba:	f7ee ff8d 	bl	80002d8 <__aeabi_uldivmod>
 80113be:	4603      	mov	r3, r0
 80113c0:	460c      	mov	r4, r1
 80113c2:	4618      	mov	r0, r3
 80113c4:	4621      	mov	r1, r4
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	895b      	ldrh	r3, [r3, #10]
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	f04f 0400 	mov.w	r4, #0
 80113d0:	461a      	mov	r2, r3
 80113d2:	4623      	mov	r3, r4
 80113d4:	f7ee ff80 	bl	80002d8 <__aeabi_uldivmod>
 80113d8:	4603      	mov	r3, r0
 80113da:	460c      	mov	r4, r1
 80113dc:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80113de:	69bb      	ldr	r3, [r7, #24]
 80113e0:	1d1a      	adds	r2, r3, #4
 80113e2:	61ba      	str	r2, [r7, #24]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d101      	bne.n	80113f2 <clmt_clust+0x64>
 80113ee:	2300      	movs	r3, #0
 80113f0:	e010      	b.n	8011414 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 80113f2:	69fa      	ldr	r2, [r7, #28]
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d307      	bcc.n	801140a <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 80113fa:	69fa      	ldr	r2, [r7, #28]
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	1ad3      	subs	r3, r2, r3
 8011400:	61fb      	str	r3, [r7, #28]
 8011402:	69bb      	ldr	r3, [r7, #24]
 8011404:	3304      	adds	r3, #4
 8011406:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011408:	e7e9      	b.n	80113de <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 801140a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801140c:	69bb      	ldr	r3, [r7, #24]
 801140e:	681a      	ldr	r2, [r3, #0]
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	4413      	add	r3, r2
}
 8011414:	4618      	mov	r0, r3
 8011416:	3724      	adds	r7, #36	; 0x24
 8011418:	46bd      	mov	sp, r7
 801141a:	bd90      	pop	{r4, r7, pc}

0801141c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b086      	sub	sp, #24
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	2b04      	cmp	r3, #4
 8011432:	d102      	bne.n	801143a <dir_sdi+0x1e>
 8011434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011438:	e001      	b.n	801143e <dir_sdi+0x22>
 801143a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	429a      	cmp	r2, r3
 8011442:	d904      	bls.n	801144e <dir_sdi+0x32>
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	f003 031f 	and.w	r3, r3, #31
 801144a:	2b00      	cmp	r3, #0
 801144c:	d001      	beq.n	8011452 <dir_sdi+0x36>
		return FR_INT_ERR;
 801144e:	2302      	movs	r3, #2
 8011450:	e074      	b.n	801153c <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	683a      	ldr	r2, [r7, #0]
 8011456:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	689b      	ldr	r3, [r3, #8]
 801145c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d109      	bne.n	8011478 <dir_sdi+0x5c>
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	2b02      	cmp	r3, #2
 801146a:	d905      	bls.n	8011478 <dir_sdi+0x5c>
		clst = fs->dirbase;
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011470:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2200      	movs	r2, #0
 8011476:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d10c      	bne.n	8011498 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	095b      	lsrs	r3, r3, #5
 8011482:	693a      	ldr	r2, [r7, #16]
 8011484:	8912      	ldrh	r2, [r2, #8]
 8011486:	4293      	cmp	r3, r2
 8011488:	d301      	bcc.n	801148e <dir_sdi+0x72>
 801148a:	2302      	movs	r3, #2
 801148c:	e056      	b.n	801153c <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	639a      	str	r2, [r3, #56]	; 0x38
 8011496:	e02d      	b.n	80114f4 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011498:	693b      	ldr	r3, [r7, #16]
 801149a:	895b      	ldrh	r3, [r3, #10]
 801149c:	461a      	mov	r2, r3
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	899b      	ldrh	r3, [r3, #12]
 80114a2:	fb03 f302 	mul.w	r3, r3, r2
 80114a6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80114a8:	e019      	b.n	80114de <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6979      	ldr	r1, [r7, #20]
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7ff f9e6 	bl	8010880 <get_fat>
 80114b4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114bc:	d101      	bne.n	80114c2 <dir_sdi+0xa6>
 80114be:	2301      	movs	r3, #1
 80114c0:	e03c      	b.n	801153c <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	2b01      	cmp	r3, #1
 80114c6:	d904      	bls.n	80114d2 <dir_sdi+0xb6>
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	6a1b      	ldr	r3, [r3, #32]
 80114cc:	697a      	ldr	r2, [r7, #20]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d301      	bcc.n	80114d6 <dir_sdi+0xba>
 80114d2:	2302      	movs	r3, #2
 80114d4:	e032      	b.n	801153c <dir_sdi+0x120>
			ofs -= csz;
 80114d6:	683a      	ldr	r2, [r7, #0]
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	1ad3      	subs	r3, r2, r3
 80114dc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80114de:	683a      	ldr	r2, [r7, #0]
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d2e1      	bcs.n	80114aa <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 80114e6:	6979      	ldr	r1, [r7, #20]
 80114e8:	6938      	ldr	r0, [r7, #16]
 80114ea:	f7ff f9a9 	bl	8010840 <clust2sect>
 80114ee:	4602      	mov	r2, r0
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	697a      	ldr	r2, [r7, #20]
 80114f8:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d101      	bne.n	8011506 <dir_sdi+0xea>
 8011502:	2302      	movs	r3, #2
 8011504:	e01a      	b.n	801153c <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	899b      	ldrh	r3, [r3, #12]
 801150e:	4619      	mov	r1, r3
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	fbb3 f3f1 	udiv	r3, r3, r1
 8011516:	441a      	add	r2, r3
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	899b      	ldrh	r3, [r3, #12]
 8011526:	461a      	mov	r2, r3
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	fbb3 f0f2 	udiv	r0, r3, r2
 801152e:	fb02 f200 	mul.w	r2, r2, r0
 8011532:	1a9b      	subs	r3, r3, r2
 8011534:	18ca      	adds	r2, r1, r3
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 801153a:	2300      	movs	r3, #0
}
 801153c:	4618      	mov	r0, r3
 801153e:	3718      	adds	r7, #24
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b086      	sub	sp, #24
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011558:	3320      	adds	r3, #32
 801155a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011560:	2b00      	cmp	r3, #0
 8011562:	d00b      	beq.n	801157c <dir_next+0x38>
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	2b04      	cmp	r3, #4
 801156a:	d102      	bne.n	8011572 <dir_next+0x2e>
 801156c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011570:	e001      	b.n	8011576 <dir_next+0x32>
 8011572:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	429a      	cmp	r2, r3
 801157a:	d801      	bhi.n	8011580 <dir_next+0x3c>
 801157c:	2304      	movs	r3, #4
 801157e:	e0c3      	b.n	8011708 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	899b      	ldrh	r3, [r3, #12]
 8011584:	461a      	mov	r2, r3
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	fbb3 f1f2 	udiv	r1, r3, r2
 801158c:	fb02 f201 	mul.w	r2, r2, r1
 8011590:	1a9b      	subs	r3, r3, r2
 8011592:	2b00      	cmp	r3, #0
 8011594:	f040 80a5 	bne.w	80116e2 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801159c:	1c5a      	adds	r2, r3, #1
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d10b      	bne.n	80115c2 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	095b      	lsrs	r3, r3, #5
 80115ae:	68fa      	ldr	r2, [r7, #12]
 80115b0:	8912      	ldrh	r2, [r2, #8]
 80115b2:	4293      	cmp	r3, r2
 80115b4:	f0c0 8095 	bcc.w	80116e2 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2200      	movs	r2, #0
 80115bc:	639a      	str	r2, [r3, #56]	; 0x38
 80115be:	2304      	movs	r3, #4
 80115c0:	e0a2      	b.n	8011708 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	899b      	ldrh	r3, [r3, #12]
 80115c6:	461a      	mov	r2, r3
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80115ce:	68fa      	ldr	r2, [r7, #12]
 80115d0:	8952      	ldrh	r2, [r2, #10]
 80115d2:	3a01      	subs	r2, #1
 80115d4:	4013      	ands	r3, r2
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	f040 8083 	bne.w	80116e2 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115e2:	4619      	mov	r1, r3
 80115e4:	4610      	mov	r0, r2
 80115e6:	f7ff f94b 	bl	8010880 <get_fat>
 80115ea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	d801      	bhi.n	80115f6 <dir_next+0xb2>
 80115f2:	2302      	movs	r3, #2
 80115f4:	e088      	b.n	8011708 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115fc:	d101      	bne.n	8011602 <dir_next+0xbe>
 80115fe:	2301      	movs	r3, #1
 8011600:	e082      	b.n	8011708 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	6a1b      	ldr	r3, [r3, #32]
 8011606:	697a      	ldr	r2, [r7, #20]
 8011608:	429a      	cmp	r2, r3
 801160a:	d360      	bcc.n	80116ce <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d104      	bne.n	801161c <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2200      	movs	r2, #0
 8011616:	639a      	str	r2, [r3, #56]	; 0x38
 8011618:	2304      	movs	r3, #4
 801161a:	e075      	b.n	8011708 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801161c:	687a      	ldr	r2, [r7, #4]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011622:	4619      	mov	r1, r3
 8011624:	4610      	mov	r0, r2
 8011626:	f7ff fdb1 	bl	801118c <create_chain>
 801162a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d101      	bne.n	8011636 <dir_next+0xf2>
 8011632:	2307      	movs	r3, #7
 8011634:	e068      	b.n	8011708 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	2b01      	cmp	r3, #1
 801163a:	d101      	bne.n	8011640 <dir_next+0xfc>
 801163c:	2302      	movs	r3, #2
 801163e:	e063      	b.n	8011708 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011646:	d101      	bne.n	801164c <dir_next+0x108>
 8011648:	2301      	movs	r3, #1
 801164a:	e05d      	b.n	8011708 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	79db      	ldrb	r3, [r3, #7]
 8011650:	f043 0304 	orr.w	r3, r3, #4
 8011654:	b2da      	uxtb	r2, r3
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801165a:	68f8      	ldr	r0, [r7, #12]
 801165c:	f7ff f80e 	bl	801067c <sync_window>
 8011660:	4603      	mov	r3, r0
 8011662:	2b00      	cmp	r3, #0
 8011664:	d001      	beq.n	801166a <dir_next+0x126>
 8011666:	2301      	movs	r3, #1
 8011668:	e04e      	b.n	8011708 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	899b      	ldrh	r3, [r3, #12]
 8011674:	461a      	mov	r2, r3
 8011676:	2100      	movs	r1, #0
 8011678:	f7fe fe37 	bl	80102ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801167c:	2300      	movs	r3, #0
 801167e:	613b      	str	r3, [r7, #16]
 8011680:	6979      	ldr	r1, [r7, #20]
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f7ff f8dc 	bl	8010840 <clust2sect>
 8011688:	4602      	mov	r2, r0
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	639a      	str	r2, [r3, #56]	; 0x38
 801168e:	e012      	b.n	80116b6 <dir_next+0x172>
						fs->wflag = 1;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	2201      	movs	r2, #1
 8011694:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011696:	68f8      	ldr	r0, [r7, #12]
 8011698:	f7fe fff0 	bl	801067c <sync_window>
 801169c:	4603      	mov	r3, r0
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d001      	beq.n	80116a6 <dir_next+0x162>
 80116a2:	2301      	movs	r3, #1
 80116a4:	e030      	b.n	8011708 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	3301      	adds	r3, #1
 80116aa:	613b      	str	r3, [r7, #16]
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116b0:	1c5a      	adds	r2, r3, #1
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	639a      	str	r2, [r3, #56]	; 0x38
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	895b      	ldrh	r3, [r3, #10]
 80116ba:	461a      	mov	r2, r3
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	4293      	cmp	r3, r2
 80116c0:	d3e6      	bcc.n	8011690 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	1ad2      	subs	r2, r2, r3
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	697a      	ldr	r2, [r7, #20]
 80116d2:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 80116d4:	6979      	ldr	r1, [r7, #20]
 80116d6:	68f8      	ldr	r0, [r7, #12]
 80116d8:	f7ff f8b2 	bl	8010840 <clust2sect>
 80116dc:	4602      	mov	r2, r0
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	68ba      	ldr	r2, [r7, #8]
 80116e6:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	899b      	ldrh	r3, [r3, #12]
 80116f2:	461a      	mov	r2, r3
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80116fa:	fb02 f200 	mul.w	r2, r2, r0
 80116fe:	1a9b      	subs	r3, r3, r2
 8011700:	18ca      	adds	r2, r1, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8011706:	2300      	movs	r3, #0
}
 8011708:	4618      	mov	r0, r3
 801170a:	3718      	adds	r7, #24
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}

08011710 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b086      	sub	sp, #24
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011720:	2100      	movs	r1, #0
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f7ff fe7a 	bl	801141c <dir_sdi>
 8011728:	4603      	mov	r3, r0
 801172a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801172c:	7dfb      	ldrb	r3, [r7, #23]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d140      	bne.n	80117b4 <dir_alloc+0xa4>
		n = 0;
 8011732:	2300      	movs	r3, #0
 8011734:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801173a:	4619      	mov	r1, r3
 801173c:	68f8      	ldr	r0, [r7, #12]
 801173e:	f7fe ffe1 	bl	8010704 <move_window>
 8011742:	4603      	mov	r3, r0
 8011744:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011746:	7dfb      	ldrb	r3, [r7, #23]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d132      	bne.n	80117b2 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	781b      	ldrb	r3, [r3, #0]
 8011750:	2b04      	cmp	r3, #4
 8011752:	d108      	bne.n	8011766 <dir_alloc+0x56>
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	b25b      	sxtb	r3, r3
 801175c:	43db      	mvns	r3, r3
 801175e:	b2db      	uxtb	r3, r3
 8011760:	09db      	lsrs	r3, r3, #7
 8011762:	b2db      	uxtb	r3, r3
 8011764:	e00f      	b.n	8011786 <dir_alloc+0x76>
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	2be5      	cmp	r3, #229	; 0xe5
 801176e:	d004      	beq.n	801177a <dir_alloc+0x6a>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d101      	bne.n	801177e <dir_alloc+0x6e>
 801177a:	2301      	movs	r3, #1
 801177c:	e000      	b.n	8011780 <dir_alloc+0x70>
 801177e:	2300      	movs	r3, #0
 8011780:	f003 0301 	and.w	r3, r3, #1
 8011784:	b2db      	uxtb	r3, r3
 8011786:	2b00      	cmp	r3, #0
 8011788:	d007      	beq.n	801179a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	3301      	adds	r3, #1
 801178e:	613b      	str	r3, [r7, #16]
 8011790:	693a      	ldr	r2, [r7, #16]
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	429a      	cmp	r2, r3
 8011796:	d102      	bne.n	801179e <dir_alloc+0x8e>
 8011798:	e00c      	b.n	80117b4 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801179a:	2300      	movs	r3, #0
 801179c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801179e:	2101      	movs	r1, #1
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f7ff fecf 	bl	8011544 <dir_next>
 80117a6:	4603      	mov	r3, r0
 80117a8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80117aa:	7dfb      	ldrb	r3, [r7, #23]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d0c2      	beq.n	8011736 <dir_alloc+0x26>
 80117b0:	e000      	b.n	80117b4 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 80117b2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80117b4:	7dfb      	ldrb	r3, [r7, #23]
 80117b6:	2b04      	cmp	r3, #4
 80117b8:	d101      	bne.n	80117be <dir_alloc+0xae>
 80117ba:	2307      	movs	r3, #7
 80117bc:	75fb      	strb	r3, [r7, #23]
	return res;
 80117be:	7dfb      	ldrb	r3, [r7, #23]
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	3718      	adds	r7, #24
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}

080117c8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b084      	sub	sp, #16
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
 80117d0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	331a      	adds	r3, #26
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7fe fba0 	bl	800ff1c <ld_word>
 80117dc:	4603      	mov	r3, r0
 80117de:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	2b03      	cmp	r3, #3
 80117e6:	d109      	bne.n	80117fc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	3314      	adds	r3, #20
 80117ec:	4618      	mov	r0, r3
 80117ee:	f7fe fb95 	bl	800ff1c <ld_word>
 80117f2:	4603      	mov	r3, r0
 80117f4:	041b      	lsls	r3, r3, #16
 80117f6:	68fa      	ldr	r2, [r7, #12]
 80117f8:	4313      	orrs	r3, r2
 80117fa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80117fc:	68fb      	ldr	r3, [r7, #12]
}
 80117fe:	4618      	mov	r0, r3
 8011800:	3710      	adds	r7, #16
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}

08011806 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011806:	b580      	push	{r7, lr}
 8011808:	b084      	sub	sp, #16
 801180a:	af00      	add	r7, sp, #0
 801180c:	60f8      	str	r0, [r7, #12]
 801180e:	60b9      	str	r1, [r7, #8]
 8011810:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	331a      	adds	r3, #26
 8011816:	687a      	ldr	r2, [r7, #4]
 8011818:	b292      	uxth	r2, r2
 801181a:	4611      	mov	r1, r2
 801181c:	4618      	mov	r0, r3
 801181e:	f7fe fc75 	bl	801010c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	781b      	ldrb	r3, [r3, #0]
 8011826:	2b03      	cmp	r3, #3
 8011828:	d109      	bne.n	801183e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	f103 0214 	add.w	r2, r3, #20
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	0c1b      	lsrs	r3, r3, #16
 8011834:	b29b      	uxth	r3, r3
 8011836:	4619      	mov	r1, r3
 8011838:	4610      	mov	r0, r2
 801183a:	f7fe fc67 	bl	801010c <st_word>
	}
}
 801183e:	bf00      	nop
 8011840:	3710      	adds	r7, #16
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
	...

08011848 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011848:	b590      	push	{r4, r7, lr}
 801184a:	b087      	sub	sp, #28
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	331a      	adds	r3, #26
 8011856:	4618      	mov	r0, r3
 8011858:	f7fe fb60 	bl	800ff1c <ld_word>
 801185c:	4603      	mov	r3, r0
 801185e:	2b00      	cmp	r3, #0
 8011860:	d001      	beq.n	8011866 <cmp_lfn+0x1e>
 8011862:	2300      	movs	r3, #0
 8011864:	e059      	b.n	801191a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	781b      	ldrb	r3, [r3, #0]
 801186a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801186e:	1e5a      	subs	r2, r3, #1
 8011870:	4613      	mov	r3, r2
 8011872:	005b      	lsls	r3, r3, #1
 8011874:	4413      	add	r3, r2
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	4413      	add	r3, r2
 801187a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801187c:	2301      	movs	r3, #1
 801187e:	81fb      	strh	r3, [r7, #14]
 8011880:	2300      	movs	r3, #0
 8011882:	613b      	str	r3, [r7, #16]
 8011884:	e033      	b.n	80118ee <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011886:	4a27      	ldr	r2, [pc, #156]	; (8011924 <cmp_lfn+0xdc>)
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	4413      	add	r3, r2
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	461a      	mov	r2, r3
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	4413      	add	r3, r2
 8011894:	4618      	mov	r0, r3
 8011896:	f7fe fb41 	bl	800ff1c <ld_word>
 801189a:	4603      	mov	r3, r0
 801189c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801189e:	89fb      	ldrh	r3, [r7, #14]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d01a      	beq.n	80118da <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	2bfe      	cmp	r3, #254	; 0xfe
 80118a8:	d812      	bhi.n	80118d0 <cmp_lfn+0x88>
 80118aa:	89bb      	ldrh	r3, [r7, #12]
 80118ac:	4618      	mov	r0, r3
 80118ae:	f002 fd0f 	bl	80142d0 <ff_wtoupper>
 80118b2:	4603      	mov	r3, r0
 80118b4:	461c      	mov	r4, r3
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	1c5a      	adds	r2, r3, #1
 80118ba:	617a      	str	r2, [r7, #20]
 80118bc:	005b      	lsls	r3, r3, #1
 80118be:	687a      	ldr	r2, [r7, #4]
 80118c0:	4413      	add	r3, r2
 80118c2:	881b      	ldrh	r3, [r3, #0]
 80118c4:	4618      	mov	r0, r3
 80118c6:	f002 fd03 	bl	80142d0 <ff_wtoupper>
 80118ca:	4603      	mov	r3, r0
 80118cc:	429c      	cmp	r4, r3
 80118ce:	d001      	beq.n	80118d4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80118d0:	2300      	movs	r3, #0
 80118d2:	e022      	b.n	801191a <cmp_lfn+0xd2>
			}
			wc = uc;
 80118d4:	89bb      	ldrh	r3, [r7, #12]
 80118d6:	81fb      	strh	r3, [r7, #14]
 80118d8:	e006      	b.n	80118e8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80118da:	89bb      	ldrh	r3, [r7, #12]
 80118dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118e0:	4293      	cmp	r3, r2
 80118e2:	d001      	beq.n	80118e8 <cmp_lfn+0xa0>
 80118e4:	2300      	movs	r3, #0
 80118e6:	e018      	b.n	801191a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	3301      	adds	r3, #1
 80118ec:	613b      	str	r3, [r7, #16]
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	2b0c      	cmp	r3, #12
 80118f2:	d9c8      	bls.n	8011886 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d00b      	beq.n	8011918 <cmp_lfn+0xd0>
 8011900:	89fb      	ldrh	r3, [r7, #14]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d008      	beq.n	8011918 <cmp_lfn+0xd0>
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	005b      	lsls	r3, r3, #1
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	4413      	add	r3, r2
 801190e:	881b      	ldrh	r3, [r3, #0]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d001      	beq.n	8011918 <cmp_lfn+0xd0>
 8011914:	2300      	movs	r3, #0
 8011916:	e000      	b.n	801191a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011918:	2301      	movs	r3, #1
}
 801191a:	4618      	mov	r0, r3
 801191c:	371c      	adds	r7, #28
 801191e:	46bd      	mov	sp, r7
 8011920:	bd90      	pop	{r4, r7, pc}
 8011922:	bf00      	nop
 8011924:	080145e8 	.word	0x080145e8

08011928 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b086      	sub	sp, #24
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	331a      	adds	r3, #26
 8011936:	4618      	mov	r0, r3
 8011938:	f7fe faf0 	bl	800ff1c <ld_word>
 801193c:	4603      	mov	r3, r0
 801193e:	2b00      	cmp	r3, #0
 8011940:	d001      	beq.n	8011946 <pick_lfn+0x1e>
 8011942:	2300      	movs	r3, #0
 8011944:	e04d      	b.n	80119e2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801194e:	1e5a      	subs	r2, r3, #1
 8011950:	4613      	mov	r3, r2
 8011952:	005b      	lsls	r3, r3, #1
 8011954:	4413      	add	r3, r2
 8011956:	009b      	lsls	r3, r3, #2
 8011958:	4413      	add	r3, r2
 801195a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801195c:	2301      	movs	r3, #1
 801195e:	81fb      	strh	r3, [r7, #14]
 8011960:	2300      	movs	r3, #0
 8011962:	613b      	str	r3, [r7, #16]
 8011964:	e028      	b.n	80119b8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011966:	4a21      	ldr	r2, [pc, #132]	; (80119ec <pick_lfn+0xc4>)
 8011968:	693b      	ldr	r3, [r7, #16]
 801196a:	4413      	add	r3, r2
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	461a      	mov	r2, r3
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	4413      	add	r3, r2
 8011974:	4618      	mov	r0, r3
 8011976:	f7fe fad1 	bl	800ff1c <ld_word>
 801197a:	4603      	mov	r3, r0
 801197c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801197e:	89fb      	ldrh	r3, [r7, #14]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d00f      	beq.n	80119a4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	2bfe      	cmp	r3, #254	; 0xfe
 8011988:	d901      	bls.n	801198e <pick_lfn+0x66>
 801198a:	2300      	movs	r3, #0
 801198c:	e029      	b.n	80119e2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801198e:	89bb      	ldrh	r3, [r7, #12]
 8011990:	81fb      	strh	r3, [r7, #14]
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	1c5a      	adds	r2, r3, #1
 8011996:	617a      	str	r2, [r7, #20]
 8011998:	005b      	lsls	r3, r3, #1
 801199a:	687a      	ldr	r2, [r7, #4]
 801199c:	4413      	add	r3, r2
 801199e:	89fa      	ldrh	r2, [r7, #14]
 80119a0:	801a      	strh	r2, [r3, #0]
 80119a2:	e006      	b.n	80119b2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80119a4:	89bb      	ldrh	r3, [r7, #12]
 80119a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119aa:	4293      	cmp	r3, r2
 80119ac:	d001      	beq.n	80119b2 <pick_lfn+0x8a>
 80119ae:	2300      	movs	r3, #0
 80119b0:	e017      	b.n	80119e2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	3301      	adds	r3, #1
 80119b6:	613b      	str	r3, [r7, #16]
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	2b0c      	cmp	r3, #12
 80119bc:	d9d3      	bls.n	8011966 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d00a      	beq.n	80119e0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	2bfe      	cmp	r3, #254	; 0xfe
 80119ce:	d901      	bls.n	80119d4 <pick_lfn+0xac>
 80119d0:	2300      	movs	r3, #0
 80119d2:	e006      	b.n	80119e2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80119d4:	697b      	ldr	r3, [r7, #20]
 80119d6:	005b      	lsls	r3, r3, #1
 80119d8:	687a      	ldr	r2, [r7, #4]
 80119da:	4413      	add	r3, r2
 80119dc:	2200      	movs	r2, #0
 80119de:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80119e0:	2301      	movs	r3, #1
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3718      	adds	r7, #24
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	080145e8 	.word	0x080145e8

080119f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b088      	sub	sp, #32
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	60f8      	str	r0, [r7, #12]
 80119f8:	60b9      	str	r1, [r7, #8]
 80119fa:	4611      	mov	r1, r2
 80119fc:	461a      	mov	r2, r3
 80119fe:	460b      	mov	r3, r1
 8011a00:	71fb      	strb	r3, [r7, #7]
 8011a02:	4613      	mov	r3, r2
 8011a04:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	330d      	adds	r3, #13
 8011a0a:	79ba      	ldrb	r2, [r7, #6]
 8011a0c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	330b      	adds	r3, #11
 8011a12:	220f      	movs	r2, #15
 8011a14:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	330c      	adds	r3, #12
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	331a      	adds	r3, #26
 8011a22:	2100      	movs	r1, #0
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7fe fb71 	bl	801010c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011a2a:	79fb      	ldrb	r3, [r7, #7]
 8011a2c:	1e5a      	subs	r2, r3, #1
 8011a2e:	4613      	mov	r3, r2
 8011a30:	005b      	lsls	r3, r3, #1
 8011a32:	4413      	add	r3, r2
 8011a34:	009b      	lsls	r3, r3, #2
 8011a36:	4413      	add	r3, r2
 8011a38:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	82fb      	strh	r3, [r7, #22]
 8011a3e:	2300      	movs	r3, #0
 8011a40:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011a42:	8afb      	ldrh	r3, [r7, #22]
 8011a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d007      	beq.n	8011a5c <put_lfn+0x6c>
 8011a4c:	69fb      	ldr	r3, [r7, #28]
 8011a4e:	1c5a      	adds	r2, r3, #1
 8011a50:	61fa      	str	r2, [r7, #28]
 8011a52:	005b      	lsls	r3, r3, #1
 8011a54:	68fa      	ldr	r2, [r7, #12]
 8011a56:	4413      	add	r3, r2
 8011a58:	881b      	ldrh	r3, [r3, #0]
 8011a5a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011a5c:	4a17      	ldr	r2, [pc, #92]	; (8011abc <put_lfn+0xcc>)
 8011a5e:	69bb      	ldr	r3, [r7, #24]
 8011a60:	4413      	add	r3, r2
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	461a      	mov	r2, r3
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	4413      	add	r3, r2
 8011a6a:	8afa      	ldrh	r2, [r7, #22]
 8011a6c:	4611      	mov	r1, r2
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fe fb4c 	bl	801010c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011a74:	8afb      	ldrh	r3, [r7, #22]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d102      	bne.n	8011a80 <put_lfn+0x90>
 8011a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a7e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011a80:	69bb      	ldr	r3, [r7, #24]
 8011a82:	3301      	adds	r3, #1
 8011a84:	61bb      	str	r3, [r7, #24]
 8011a86:	69bb      	ldr	r3, [r7, #24]
 8011a88:	2b0c      	cmp	r3, #12
 8011a8a:	d9da      	bls.n	8011a42 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011a8c:	8afb      	ldrh	r3, [r7, #22]
 8011a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a92:	4293      	cmp	r3, r2
 8011a94:	d006      	beq.n	8011aa4 <put_lfn+0xb4>
 8011a96:	69fb      	ldr	r3, [r7, #28]
 8011a98:	005b      	lsls	r3, r3, #1
 8011a9a:	68fa      	ldr	r2, [r7, #12]
 8011a9c:	4413      	add	r3, r2
 8011a9e:	881b      	ldrh	r3, [r3, #0]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d103      	bne.n	8011aac <put_lfn+0xbc>
 8011aa4:	79fb      	ldrb	r3, [r7, #7]
 8011aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aaa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	79fa      	ldrb	r2, [r7, #7]
 8011ab0:	701a      	strb	r2, [r3, #0]
}
 8011ab2:	bf00      	nop
 8011ab4:	3720      	adds	r7, #32
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	080145e8 	.word	0x080145e8

08011ac0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b08c      	sub	sp, #48	; 0x30
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	60f8      	str	r0, [r7, #12]
 8011ac8:	60b9      	str	r1, [r7, #8]
 8011aca:	607a      	str	r2, [r7, #4]
 8011acc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011ace:	220b      	movs	r2, #11
 8011ad0:	68b9      	ldr	r1, [r7, #8]
 8011ad2:	68f8      	ldr	r0, [r7, #12]
 8011ad4:	f7fe fbe8 	bl	80102a8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	2b05      	cmp	r3, #5
 8011adc:	d929      	bls.n	8011b32 <gen_numname+0x72>
		sr = seq;
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011ae2:	e020      	b.n	8011b26 <gen_numname+0x66>
			wc = *lfn++;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	1c9a      	adds	r2, r3, #2
 8011ae8:	607a      	str	r2, [r7, #4]
 8011aea:	881b      	ldrh	r3, [r3, #0]
 8011aec:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011aee:	2300      	movs	r3, #0
 8011af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8011af2:	e015      	b.n	8011b20 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	005a      	lsls	r2, r3, #1
 8011af8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011afa:	f003 0301 	and.w	r3, r3, #1
 8011afe:	4413      	add	r3, r2
 8011b00:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011b02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b04:	085b      	lsrs	r3, r3, #1
 8011b06:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011b08:	69fb      	ldr	r3, [r7, #28]
 8011b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d003      	beq.n	8011b1a <gen_numname+0x5a>
 8011b12:	69fa      	ldr	r2, [r7, #28]
 8011b14:	4b31      	ldr	r3, [pc, #196]	; (8011bdc <gen_numname+0x11c>)
 8011b16:	4053      	eors	r3, r2
 8011b18:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b1c:	3301      	adds	r3, #1
 8011b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b22:	2b0f      	cmp	r3, #15
 8011b24:	d9e6      	bls.n	8011af4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	881b      	ldrh	r3, [r3, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d1da      	bne.n	8011ae4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011b2e:	69fb      	ldr	r3, [r7, #28]
 8011b30:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011b32:	2307      	movs	r3, #7
 8011b34:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	f003 030f 	and.w	r3, r3, #15
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	3330      	adds	r3, #48	; 0x30
 8011b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8011b46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b4a:	2b39      	cmp	r3, #57	; 0x39
 8011b4c:	d904      	bls.n	8011b58 <gen_numname+0x98>
 8011b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b52:	3307      	adds	r3, #7
 8011b54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5a:	1e5a      	subs	r2, r3, #1
 8011b5c:	62ba      	str	r2, [r7, #40]	; 0x28
 8011b5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b62:	4413      	add	r3, r2
 8011b64:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011b68:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	091b      	lsrs	r3, r3, #4
 8011b70:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d1de      	bne.n	8011b36 <gen_numname+0x76>
	ns[i] = '~';
 8011b78:	f107 0214 	add.w	r2, r7, #20
 8011b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b7e:	4413      	add	r3, r2
 8011b80:	227e      	movs	r2, #126	; 0x7e
 8011b82:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011b84:	2300      	movs	r3, #0
 8011b86:	627b      	str	r3, [r7, #36]	; 0x24
 8011b88:	e002      	b.n	8011b90 <gen_numname+0xd0>
 8011b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8c:	3301      	adds	r3, #1
 8011b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8011b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d205      	bcs.n	8011ba4 <gen_numname+0xe4>
 8011b98:	68fa      	ldr	r2, [r7, #12]
 8011b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b9c:	4413      	add	r3, r2
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	2b20      	cmp	r3, #32
 8011ba2:	d1f2      	bne.n	8011b8a <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba6:	2b07      	cmp	r3, #7
 8011ba8:	d808      	bhi.n	8011bbc <gen_numname+0xfc>
 8011baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bac:	1c5a      	adds	r2, r3, #1
 8011bae:	62ba      	str	r2, [r7, #40]	; 0x28
 8011bb0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bb4:	4413      	add	r3, r2
 8011bb6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011bba:	e000      	b.n	8011bbe <gen_numname+0xfe>
 8011bbc:	2120      	movs	r1, #32
 8011bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc0:	1c5a      	adds	r2, r3, #1
 8011bc2:	627a      	str	r2, [r7, #36]	; 0x24
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	4413      	add	r3, r2
 8011bc8:	460a      	mov	r2, r1
 8011bca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bce:	2b07      	cmp	r3, #7
 8011bd0:	d9e8      	bls.n	8011ba4 <gen_numname+0xe4>
}
 8011bd2:	bf00      	nop
 8011bd4:	3730      	adds	r7, #48	; 0x30
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	00011021 	.word	0x00011021

08011be0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011be0:	b480      	push	{r7}
 8011be2:	b085      	sub	sp, #20
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011be8:	2300      	movs	r3, #0
 8011bea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011bec:	230b      	movs	r3, #11
 8011bee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011bf0:	7bfb      	ldrb	r3, [r7, #15]
 8011bf2:	b2da      	uxtb	r2, r3
 8011bf4:	0852      	lsrs	r2, r2, #1
 8011bf6:	01db      	lsls	r3, r3, #7
 8011bf8:	4313      	orrs	r3, r2
 8011bfa:	b2da      	uxtb	r2, r3
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	1c59      	adds	r1, r3, #1
 8011c00:	6079      	str	r1, [r7, #4]
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	4413      	add	r3, r2
 8011c06:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	3b01      	subs	r3, #1
 8011c0c:	60bb      	str	r3, [r7, #8]
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d1ed      	bne.n	8011bf0 <sum_sfn+0x10>
	return sum;
 8011c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3714      	adds	r7, #20
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c20:	4770      	bx	lr

08011c22 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8011c22:	b480      	push	{r7}
 8011c24:	b087      	sub	sp, #28
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	3301      	adds	r3, #1
 8011c32:	015b      	lsls	r3, r3, #5
 8011c34:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8011c36:	2300      	movs	r3, #0
 8011c38:	827b      	strh	r3, [r7, #18]
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	617b      	str	r3, [r7, #20]
 8011c3e:	e018      	b.n	8011c72 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	2b02      	cmp	r3, #2
 8011c44:	d103      	bne.n	8011c4e <xdir_sum+0x2c>
			i++;
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	3301      	adds	r3, #1
 8011c4a:	617b      	str	r3, [r7, #20]
 8011c4c:	e00e      	b.n	8011c6c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8011c4e:	8a7b      	ldrh	r3, [r7, #18]
 8011c50:	03db      	lsls	r3, r3, #15
 8011c52:	b29a      	uxth	r2, r3
 8011c54:	8a7b      	ldrh	r3, [r7, #18]
 8011c56:	085b      	lsrs	r3, r3, #1
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	4413      	add	r3, r2
 8011c5c:	b29a      	uxth	r2, r3
 8011c5e:	6879      	ldr	r1, [r7, #4]
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	440b      	add	r3, r1
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	4413      	add	r3, r2
 8011c6a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	3301      	adds	r3, #1
 8011c70:	617b      	str	r3, [r7, #20]
 8011c72:	697a      	ldr	r2, [r7, #20]
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d3e2      	bcc.n	8011c40 <xdir_sum+0x1e>
		}
	}
	return sum;
 8011c7a:	8a7b      	ldrh	r3, [r7, #18]
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	371c      	adds	r7, #28
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr

08011c88 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b084      	sub	sp, #16
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8011c90:	2300      	movs	r3, #0
 8011c92:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8011c94:	e01f      	b.n	8011cd6 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8011c96:	89bb      	ldrh	r3, [r7, #12]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f002 fb19 	bl	80142d0 <ff_wtoupper>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8011ca2:	89fb      	ldrh	r3, [r7, #14]
 8011ca4:	03db      	lsls	r3, r3, #15
 8011ca6:	b29a      	uxth	r2, r3
 8011ca8:	89fb      	ldrh	r3, [r7, #14]
 8011caa:	085b      	lsrs	r3, r3, #1
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	4413      	add	r3, r2
 8011cb0:	b29a      	uxth	r2, r3
 8011cb2:	89bb      	ldrh	r3, [r7, #12]
 8011cb4:	b2db      	uxtb	r3, r3
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	4413      	add	r3, r2
 8011cba:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8011cbc:	89fb      	ldrh	r3, [r7, #14]
 8011cbe:	03db      	lsls	r3, r3, #15
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	89fb      	ldrh	r3, [r7, #14]
 8011cc4:	085b      	lsrs	r3, r3, #1
 8011cc6:	b29b      	uxth	r3, r3
 8011cc8:	4413      	add	r3, r2
 8011cca:	b29a      	uxth	r2, r3
 8011ccc:	89bb      	ldrh	r3, [r7, #12]
 8011cce:	0a1b      	lsrs	r3, r3, #8
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	4413      	add	r3, r2
 8011cd4:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	1c9a      	adds	r2, r3, #2
 8011cda:	607a      	str	r2, [r7, #4]
 8011cdc:	881b      	ldrh	r3, [r3, #0]
 8011cde:	81bb      	strh	r3, [r7, #12]
 8011ce0:	89bb      	ldrh	r3, [r7, #12]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d1d7      	bne.n	8011c96 <xname_sum+0xe>
	}
	return sum;
 8011ce6:	89fb      	ldrh	r3, [r7, #14]
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3710      	adds	r7, #16
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}

08011cf0 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8011cf0:	b590      	push	{r4, r7, lr}
 8011cf2:	b087      	sub	sp, #28
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	695b      	ldr	r3, [r3, #20]
 8011cfe:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681a      	ldr	r2, [r3, #0]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d08:	4619      	mov	r1, r3
 8011d0a:	4610      	mov	r0, r2
 8011d0c:	f7fe fcfa 	bl	8010704 <move_window>
 8011d10:	4603      	mov	r3, r0
 8011d12:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011d14:	7bfb      	ldrb	r3, [r7, #15]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d001      	beq.n	8011d1e <load_xdir+0x2e>
 8011d1a:	7bfb      	ldrb	r3, [r7, #15]
 8011d1c:	e09f      	b.n	8011e5e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	2b85      	cmp	r3, #133	; 0x85
 8011d26:	d001      	beq.n	8011d2c <load_xdir+0x3c>
 8011d28:	2302      	movs	r3, #2
 8011d2a:	e098      	b.n	8011e5e <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d30:	2220      	movs	r2, #32
 8011d32:	4619      	mov	r1, r3
 8011d34:	6938      	ldr	r0, [r7, #16]
 8011d36:	f7fe fab7 	bl	80102a8 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	3301      	adds	r3, #1
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	3301      	adds	r3, #1
 8011d42:	015b      	lsls	r3, r3, #5
 8011d44:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	2b5f      	cmp	r3, #95	; 0x5f
 8011d4a:	d903      	bls.n	8011d54 <load_xdir+0x64>
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011d52:	d901      	bls.n	8011d58 <load_xdir+0x68>
 8011d54:	2302      	movs	r3, #2
 8011d56:	e082      	b.n	8011e5e <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8011d58:	2100      	movs	r1, #0
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f7ff fbf2 	bl	8011544 <dir_next>
 8011d60:	4603      	mov	r3, r0
 8011d62:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011d64:	7bfb      	ldrb	r3, [r7, #15]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d001      	beq.n	8011d6e <load_xdir+0x7e>
 8011d6a:	7bfb      	ldrb	r3, [r7, #15]
 8011d6c:	e077      	b.n	8011e5e <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681a      	ldr	r2, [r3, #0]
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d76:	4619      	mov	r1, r3
 8011d78:	4610      	mov	r0, r2
 8011d7a:	f7fe fcc3 	bl	8010704 <move_window>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011d82:	7bfb      	ldrb	r3, [r7, #15]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d001      	beq.n	8011d8c <load_xdir+0x9c>
 8011d88:	7bfb      	ldrb	r3, [r7, #15]
 8011d8a:	e068      	b.n	8011e5e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	2bc0      	cmp	r3, #192	; 0xc0
 8011d94:	d001      	beq.n	8011d9a <load_xdir+0xaa>
 8011d96:	2302      	movs	r3, #2
 8011d98:	e061      	b.n	8011e5e <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8011d9a:	693b      	ldr	r3, [r7, #16]
 8011d9c:	f103 0020 	add.w	r0, r3, #32
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011da4:	2220      	movs	r2, #32
 8011da6:	4619      	mov	r1, r3
 8011da8:	f7fe fa7e 	bl	80102a8 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	3323      	adds	r3, #35	; 0x23
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	332c      	adds	r3, #44	; 0x2c
 8011db4:	4a2c      	ldr	r2, [pc, #176]	; (8011e68 <load_xdir+0x178>)
 8011db6:	fba2 2303 	umull	r2, r3, r2, r3
 8011dba:	08db      	lsrs	r3, r3, #3
 8011dbc:	015b      	lsls	r3, r3, #5
 8011dbe:	68ba      	ldr	r2, [r7, #8]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d201      	bcs.n	8011dc8 <load_xdir+0xd8>
 8011dc4:	2302      	movs	r3, #2
 8011dc6:	e04a      	b.n	8011e5e <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8011dc8:	2340      	movs	r3, #64	; 0x40
 8011dca:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8011dcc:	2100      	movs	r1, #0
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f7ff fbb8 	bl	8011544 <dir_next>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8011dd8:	7bfb      	ldrb	r3, [r7, #15]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d001      	beq.n	8011de2 <load_xdir+0xf2>
 8011dde:	7bfb      	ldrb	r3, [r7, #15]
 8011de0:	e03d      	b.n	8011e5e <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681a      	ldr	r2, [r3, #0]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dea:	4619      	mov	r1, r3
 8011dec:	4610      	mov	r0, r2
 8011dee:	f7fe fc89 	bl	8010704 <move_window>
 8011df2:	4603      	mov	r3, r0
 8011df4:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8011df6:	7bfb      	ldrb	r3, [r7, #15]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d001      	beq.n	8011e00 <load_xdir+0x110>
 8011dfc:	7bfb      	ldrb	r3, [r7, #15]
 8011dfe:	e02e      	b.n	8011e5e <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	2bc1      	cmp	r3, #193	; 0xc1
 8011e08:	d001      	beq.n	8011e0e <load_xdir+0x11e>
 8011e0a:	2302      	movs	r3, #2
 8011e0c:	e027      	b.n	8011e5e <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011e14:	d208      	bcs.n	8011e28 <load_xdir+0x138>
 8011e16:	693a      	ldr	r2, [r7, #16]
 8011e18:	697b      	ldr	r3, [r7, #20]
 8011e1a:	18d0      	adds	r0, r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e20:	2220      	movs	r2, #32
 8011e22:	4619      	mov	r1, r3
 8011e24:	f7fe fa40 	bl	80102a8 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	3320      	adds	r3, #32
 8011e2c:	617b      	str	r3, [r7, #20]
 8011e2e:	697a      	ldr	r2, [r7, #20]
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d3ca      	bcc.n	8011dcc <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011e3c:	d80e      	bhi.n	8011e5c <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8011e3e:	6938      	ldr	r0, [r7, #16]
 8011e40:	f7ff feef 	bl	8011c22 <xdir_sum>
 8011e44:	4603      	mov	r3, r0
 8011e46:	461c      	mov	r4, r3
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	3302      	adds	r3, #2
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7fe f865 	bl	800ff1c <ld_word>
 8011e52:	4603      	mov	r3, r0
 8011e54:	429c      	cmp	r4, r3
 8011e56:	d001      	beq.n	8011e5c <load_xdir+0x16c>
 8011e58:	2302      	movs	r3, #2
 8011e5a:	e000      	b.n	8011e5e <load_xdir+0x16e>
	}
	return FR_OK;
 8011e5c:	2300      	movs	r3, #0
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	371c      	adds	r7, #28
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd90      	pop	{r4, r7, pc}
 8011e66:	bf00      	nop
 8011e68:	88888889 	.word	0x88888889

08011e6c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8011e6c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8011e70:	b084      	sub	sp, #16
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	6078      	str	r0, [r7, #4]
 8011e76:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	681a      	ldr	r2, [r3, #0]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	6a1a      	ldr	r2, [r3, #32]
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e8c:	b2da      	uxtb	r2, r3
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e96:	469b      	mov	fp, r3
 8011e98:	f04f 0c00 	mov.w	ip, #0
 8011e9c:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8011ea0:	f04f 0200 	mov.w	r2, #0
 8011ea4:	ea0b 0301 	and.w	r3, fp, r1
 8011ea8:	ea0c 0402 	and.w	r4, ip, r2
 8011eac:	687a      	ldr	r2, [r7, #4]
 8011eae:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f7ff faab 	bl	801141c <dir_sdi>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011eca:	7bfb      	ldrb	r3, [r7, #15]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d104      	bne.n	8011eda <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f7ff ff0d 	bl	8011cf0 <load_xdir>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8011eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3710      	adds	r7, #16
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08011ee6 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8011ee6:	b590      	push	{r4, r7, lr}
 8011ee8:	b087      	sub	sp, #28
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	695b      	ldr	r3, [r3, #20]
 8011ef4:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	1c9c      	adds	r4, r3, #2
 8011efa:	68f8      	ldr	r0, [r7, #12]
 8011efc:	f7ff fe91 	bl	8011c22 <xdir_sum>
 8011f00:	4603      	mov	r3, r0
 8011f02:	4619      	mov	r1, r3
 8011f04:	4620      	mov	r0, r4
 8011f06:	f7fe f901 	bl	801010c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	3301      	adds	r3, #1
 8011f0e:	781b      	ldrb	r3, [r3, #0]
 8011f10:	3301      	adds	r3, #1
 8011f12:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f18:	4619      	mov	r1, r3
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f7ff fa7e 	bl	801141c <dir_sdi>
 8011f20:	4603      	mov	r3, r0
 8011f22:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8011f24:	e026      	b.n	8011f74 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681a      	ldr	r2, [r3, #0]
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f2e:	4619      	mov	r1, r3
 8011f30:	4610      	mov	r0, r2
 8011f32:	f7fe fbe7 	bl	8010704 <move_window>
 8011f36:	4603      	mov	r3, r0
 8011f38:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011f3a:	7dfb      	ldrb	r3, [r7, #23]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d11d      	bne.n	8011f7c <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f44:	2220      	movs	r2, #32
 8011f46:	68f9      	ldr	r1, [r7, #12]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7fe f9ad 	bl	80102a8 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	2201      	movs	r2, #1
 8011f54:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	3b01      	subs	r3, #1
 8011f5a:	613b      	str	r3, [r7, #16]
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d00e      	beq.n	8011f80 <store_xdir+0x9a>
		dirb += SZDIRE;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	3320      	adds	r3, #32
 8011f66:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8011f68:	2100      	movs	r1, #0
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f7ff faea 	bl	8011544 <dir_next>
 8011f70:	4603      	mov	r3, r0
 8011f72:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8011f74:	7dfb      	ldrb	r3, [r7, #23]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d0d5      	beq.n	8011f26 <store_xdir+0x40>
 8011f7a:	e002      	b.n	8011f82 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8011f7c:	bf00      	nop
 8011f7e:	e000      	b.n	8011f82 <store_xdir+0x9c>
		if (--nent == 0) break;
 8011f80:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8011f82:	7dfb      	ldrb	r3, [r7, #23]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d002      	beq.n	8011f8e <store_xdir+0xa8>
 8011f88:	7dfb      	ldrb	r3, [r7, #23]
 8011f8a:	2b01      	cmp	r3, #1
 8011f8c:	d101      	bne.n	8011f92 <store_xdir+0xac>
 8011f8e:	7dfb      	ldrb	r3, [r7, #23]
 8011f90:	e000      	b.n	8011f94 <store_xdir+0xae>
 8011f92:	2302      	movs	r3, #2
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	371c      	adds	r7, #28
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd90      	pop	{r4, r7, pc}

08011f9c <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8011f9c:	b590      	push	{r4, r7, lr}
 8011f9e:	b085      	sub	sp, #20
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8011fa6:	2240      	movs	r2, #64	; 0x40
 8011fa8:	2100      	movs	r1, #0
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f7fe f99d 	bl	80102ea <mem_set>
	dirb[XDIR_Type] = 0x85;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2285      	movs	r2, #133	; 0x85
 8011fb4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	3320      	adds	r3, #32
 8011fba:	22c0      	movs	r2, #192	; 0xc0
 8011fbc:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	72bb      	strb	r3, [r7, #10]
 8011fc2:	2301      	movs	r3, #1
 8011fc4:	72fb      	strb	r3, [r7, #11]
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	813b      	strh	r3, [r7, #8]
 8011fca:	2340      	movs	r3, #64	; 0x40
 8011fcc:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	1c5a      	adds	r2, r3, #1
 8011fd2:	60fa      	str	r2, [r7, #12]
 8011fd4:	687a      	ldr	r2, [r7, #4]
 8011fd6:	4413      	add	r3, r2
 8011fd8:	22c1      	movs	r2, #193	; 0xc1
 8011fda:	701a      	strb	r2, [r3, #0]
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	1c5a      	adds	r2, r3, #1
 8011fe0:	60fa      	str	r2, [r7, #12]
 8011fe2:	687a      	ldr	r2, [r7, #4]
 8011fe4:	4413      	add	r3, r2
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8011fea:	893b      	ldrh	r3, [r7, #8]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d00b      	beq.n	8012008 <create_xdir+0x6c>
 8011ff0:	7abb      	ldrb	r3, [r7, #10]
 8011ff2:	005b      	lsls	r3, r3, #1
 8011ff4:	683a      	ldr	r2, [r7, #0]
 8011ff6:	4413      	add	r3, r2
 8011ff8:	881b      	ldrh	r3, [r3, #0]
 8011ffa:	813b      	strh	r3, [r7, #8]
 8011ffc:	893b      	ldrh	r3, [r7, #8]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d002      	beq.n	8012008 <create_xdir+0x6c>
 8012002:	7abb      	ldrb	r3, [r7, #10]
 8012004:	3301      	adds	r3, #1
 8012006:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8012008:	687a      	ldr	r2, [r7, #4]
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	4413      	add	r3, r2
 801200e:	893a      	ldrh	r2, [r7, #8]
 8012010:	4611      	mov	r1, r2
 8012012:	4618      	mov	r0, r3
 8012014:	f7fe f87a 	bl	801010c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	3302      	adds	r3, #2
 801201c:	60fb      	str	r3, [r7, #12]
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	f003 031f 	and.w	r3, r3, #31
 8012024:	2b00      	cmp	r3, #0
 8012026:	d1e0      	bne.n	8011fea <create_xdir+0x4e>
		nb++;
 8012028:	7afb      	ldrb	r3, [r7, #11]
 801202a:	3301      	adds	r3, #1
 801202c:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 801202e:	7abb      	ldrb	r3, [r7, #10]
 8012030:	005b      	lsls	r3, r3, #1
 8012032:	683a      	ldr	r2, [r7, #0]
 8012034:	4413      	add	r3, r2
 8012036:	881b      	ldrh	r3, [r3, #0]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1c8      	bne.n	8011fce <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	3323      	adds	r3, #35	; 0x23
 8012040:	7aba      	ldrb	r2, [r7, #10]
 8012042:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	3301      	adds	r3, #1
 8012048:	7afa      	ldrb	r2, [r7, #11]
 801204a:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8012052:	6838      	ldr	r0, [r7, #0]
 8012054:	f7ff fe18 	bl	8011c88 <xname_sum>
 8012058:	4603      	mov	r3, r0
 801205a:	4619      	mov	r1, r3
 801205c:	4620      	mov	r0, r4
 801205e:	f7fe f855 	bl	801010c <st_word>
}
 8012062:	bf00      	nop
 8012064:	3714      	adds	r7, #20
 8012066:	46bd      	mov	sp, r7
 8012068:	bd90      	pop	{r4, r7, pc}

0801206a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801206a:	b580      	push	{r7, lr}
 801206c:	b086      	sub	sp, #24
 801206e:	af00      	add	r7, sp, #0
 8012070:	6078      	str	r0, [r7, #4]
 8012072:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012074:	2304      	movs	r3, #4
 8012076:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801207e:	23ff      	movs	r3, #255	; 0xff
 8012080:	757b      	strb	r3, [r7, #21]
 8012082:	23ff      	movs	r3, #255	; 0xff
 8012084:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8012086:	e09f      	b.n	80121c8 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801208c:	4619      	mov	r1, r3
 801208e:	6938      	ldr	r0, [r7, #16]
 8012090:	f7fe fb38 	bl	8010704 <move_window>
 8012094:	4603      	mov	r3, r0
 8012096:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012098:	7dfb      	ldrb	r3, [r7, #23]
 801209a:	2b00      	cmp	r3, #0
 801209c:	f040 809a 	bne.w	80121d4 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80120a8:	7dbb      	ldrb	r3, [r7, #22]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d102      	bne.n	80120b4 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80120ae:	2304      	movs	r3, #4
 80120b0:	75fb      	strb	r3, [r7, #23]
 80120b2:	e096      	b.n	80121e2 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	2b04      	cmp	r3, #4
 80120ba:	d118      	bne.n	80120ee <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 80120bc:	7dbb      	ldrb	r3, [r7, #22]
 80120be:	2b85      	cmp	r3, #133	; 0x85
 80120c0:	d179      	bne.n	80121b6 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f7ff fe10 	bl	8011cf0 <load_xdir>
 80120d0:	4603      	mov	r3, r0
 80120d2:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80120d4:	7dfb      	ldrb	r3, [r7, #23]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d17e      	bne.n	80121d8 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	695b      	ldr	r3, [r3, #20]
 80120de:	3304      	adds	r3, #4
 80120e0:	781b      	ldrb	r3, [r3, #0]
 80120e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80120e6:	b2da      	uxtb	r2, r3
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	719a      	strb	r2, [r3, #6]
					}
					break;
 80120ec:	e074      	b.n	80121d8 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120f2:	330b      	adds	r3, #11
 80120f4:	781b      	ldrb	r3, [r3, #0]
 80120f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80120fa:	73fb      	strb	r3, [r7, #15]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	7bfa      	ldrb	r2, [r7, #15]
 8012100:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8012102:	7dbb      	ldrb	r3, [r7, #22]
 8012104:	2be5      	cmp	r3, #229	; 0xe5
 8012106:	d00e      	beq.n	8012126 <dir_read+0xbc>
 8012108:	7dbb      	ldrb	r3, [r7, #22]
 801210a:	2b2e      	cmp	r3, #46	; 0x2e
 801210c:	d00b      	beq.n	8012126 <dir_read+0xbc>
 801210e:	7bfb      	ldrb	r3, [r7, #15]
 8012110:	f023 0320 	bic.w	r3, r3, #32
 8012114:	2b08      	cmp	r3, #8
 8012116:	bf0c      	ite	eq
 8012118:	2301      	moveq	r3, #1
 801211a:	2300      	movne	r3, #0
 801211c:	b2db      	uxtb	r3, r3
 801211e:	461a      	mov	r2, r3
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	4293      	cmp	r3, r2
 8012124:	d002      	beq.n	801212c <dir_read+0xc2>
				ord = 0xFF;
 8012126:	23ff      	movs	r3, #255	; 0xff
 8012128:	757b      	strb	r3, [r7, #21]
 801212a:	e044      	b.n	80121b6 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801212c:	7bfb      	ldrb	r3, [r7, #15]
 801212e:	2b0f      	cmp	r3, #15
 8012130:	d12f      	bne.n	8012192 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8012132:	7dbb      	ldrb	r3, [r7, #22]
 8012134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012138:	2b00      	cmp	r3, #0
 801213a:	d00d      	beq.n	8012158 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012140:	7b5b      	ldrb	r3, [r3, #13]
 8012142:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8012144:	7dbb      	ldrb	r3, [r7, #22]
 8012146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801214a:	75bb      	strb	r3, [r7, #22]
 801214c:	7dbb      	ldrb	r3, [r7, #22]
 801214e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012158:	7dba      	ldrb	r2, [r7, #22]
 801215a:	7d7b      	ldrb	r3, [r7, #21]
 801215c:	429a      	cmp	r2, r3
 801215e:	d115      	bne.n	801218c <dir_read+0x122>
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012164:	330d      	adds	r3, #13
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	7d3a      	ldrb	r2, [r7, #20]
 801216a:	429a      	cmp	r2, r3
 801216c:	d10e      	bne.n	801218c <dir_read+0x122>
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	691a      	ldr	r2, [r3, #16]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012176:	4619      	mov	r1, r3
 8012178:	4610      	mov	r0, r2
 801217a:	f7ff fbd5 	bl	8011928 <pick_lfn>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d003      	beq.n	801218c <dir_read+0x122>
 8012184:	7d7b      	ldrb	r3, [r7, #21]
 8012186:	3b01      	subs	r3, #1
 8012188:	b2db      	uxtb	r3, r3
 801218a:	e000      	b.n	801218e <dir_read+0x124>
 801218c:	23ff      	movs	r3, #255	; 0xff
 801218e:	757b      	strb	r3, [r7, #21]
 8012190:	e011      	b.n	80121b6 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8012192:	7d7b      	ldrb	r3, [r7, #21]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d109      	bne.n	80121ac <dir_read+0x142>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801219c:	4618      	mov	r0, r3
 801219e:	f7ff fd1f 	bl	8011be0 <sum_sfn>
 80121a2:	4603      	mov	r3, r0
 80121a4:	461a      	mov	r2, r3
 80121a6:	7d3b      	ldrb	r3, [r7, #20]
 80121a8:	4293      	cmp	r3, r2
 80121aa:	d017      	beq.n	80121dc <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f04f 32ff 	mov.w	r2, #4294967295
 80121b2:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 80121b4:	e012      	b.n	80121dc <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80121b6:	2100      	movs	r1, #0
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f7ff f9c3 	bl	8011544 <dir_next>
 80121be:	4603      	mov	r3, r0
 80121c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80121c2:	7dfb      	ldrb	r3, [r7, #23]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d10b      	bne.n	80121e0 <dir_read+0x176>
	while (dp->sect) {
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	f47f af5b 	bne.w	8012088 <dir_read+0x1e>
 80121d2:	e006      	b.n	80121e2 <dir_read+0x178>
		if (res != FR_OK) break;
 80121d4:	bf00      	nop
 80121d6:	e004      	b.n	80121e2 <dir_read+0x178>
					break;
 80121d8:	bf00      	nop
 80121da:	e002      	b.n	80121e2 <dir_read+0x178>
					break;
 80121dc:	bf00      	nop
 80121de:	e000      	b.n	80121e2 <dir_read+0x178>
		if (res != FR_OK) break;
 80121e0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80121e2:	7dfb      	ldrb	r3, [r7, #23]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d002      	beq.n	80121ee <dir_read+0x184>
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2200      	movs	r2, #0
 80121ec:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 80121ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3718      	adds	r7, #24
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}

080121f8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80121f8:	b590      	push	{r4, r7, lr}
 80121fa:	b089      	sub	sp, #36	; 0x24
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012206:	2100      	movs	r1, #0
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f7ff f907 	bl	801141c <dir_sdi>
 801220e:	4603      	mov	r3, r0
 8012210:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8012212:	7ffb      	ldrb	r3, [r7, #31]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d001      	beq.n	801221c <dir_find+0x24>
 8012218:	7ffb      	ldrb	r3, [r7, #31]
 801221a:	e112      	b.n	8012442 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	2b04      	cmp	r3, #4
 8012222:	d164      	bne.n	80122ee <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	691b      	ldr	r3, [r3, #16]
 8012228:	4618      	mov	r0, r3
 801222a:	f7ff fd2d 	bl	8011c88 <xname_sum>
 801222e:	4603      	mov	r3, r0
 8012230:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8012232:	e04f      	b.n	80122d4 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	695b      	ldr	r3, [r3, #20]
 8012238:	3324      	adds	r3, #36	; 0x24
 801223a:	4618      	mov	r0, r3
 801223c:	f7fd fe6e 	bl	800ff1c <ld_word>
 8012240:	4603      	mov	r3, r0
 8012242:	461a      	mov	r2, r3
 8012244:	893b      	ldrh	r3, [r7, #8]
 8012246:	4293      	cmp	r3, r2
 8012248:	d000      	beq.n	801224c <dir_find+0x54>
 801224a:	e043      	b.n	80122d4 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	695b      	ldr	r3, [r3, #20]
 8012250:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012254:	76fb      	strb	r3, [r7, #27]
 8012256:	2340      	movs	r3, #64	; 0x40
 8012258:	617b      	str	r3, [r7, #20]
 801225a:	2300      	movs	r3, #0
 801225c:	613b      	str	r3, [r7, #16]
 801225e:	e029      	b.n	80122b4 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	f003 031f 	and.w	r3, r3, #31
 8012266:	2b00      	cmp	r3, #0
 8012268:	d102      	bne.n	8012270 <dir_find+0x78>
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	3302      	adds	r3, #2
 801226e:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	695a      	ldr	r2, [r3, #20]
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	4413      	add	r3, r2
 8012278:	4618      	mov	r0, r3
 801227a:	f7fd fe4f 	bl	800ff1c <ld_word>
 801227e:	4603      	mov	r3, r0
 8012280:	4618      	mov	r0, r3
 8012282:	f002 f825 	bl	80142d0 <ff_wtoupper>
 8012286:	4603      	mov	r3, r0
 8012288:	461c      	mov	r4, r3
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	691a      	ldr	r2, [r3, #16]
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	005b      	lsls	r3, r3, #1
 8012292:	4413      	add	r3, r2
 8012294:	881b      	ldrh	r3, [r3, #0]
 8012296:	4618      	mov	r0, r3
 8012298:	f002 f81a 	bl	80142d0 <ff_wtoupper>
 801229c:	4603      	mov	r3, r0
 801229e:	429c      	cmp	r4, r3
 80122a0:	d10c      	bne.n	80122bc <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80122a2:	7efb      	ldrb	r3, [r7, #27]
 80122a4:	3b01      	subs	r3, #1
 80122a6:	76fb      	strb	r3, [r7, #27]
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	3302      	adds	r3, #2
 80122ac:	617b      	str	r3, [r7, #20]
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	3301      	adds	r3, #1
 80122b2:	613b      	str	r3, [r7, #16]
 80122b4:	7efb      	ldrb	r3, [r7, #27]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d1d2      	bne.n	8012260 <dir_find+0x68>
 80122ba:	e000      	b.n	80122be <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80122bc:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80122be:	7efb      	ldrb	r3, [r7, #27]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d107      	bne.n	80122d4 <dir_find+0xdc>
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	691a      	ldr	r2, [r3, #16]
 80122c8:	693b      	ldr	r3, [r7, #16]
 80122ca:	005b      	lsls	r3, r3, #1
 80122cc:	4413      	add	r3, r2
 80122ce:	881b      	ldrh	r3, [r3, #0]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d009      	beq.n	80122e8 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80122d4:	2100      	movs	r1, #0
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f7ff fec7 	bl	801206a <dir_read>
 80122dc:	4603      	mov	r3, r0
 80122de:	77fb      	strb	r3, [r7, #31]
 80122e0:	7ffb      	ldrb	r3, [r7, #31]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d0a6      	beq.n	8012234 <dir_find+0x3c>
 80122e6:	e000      	b.n	80122ea <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80122e8:	bf00      	nop
		}
		return res;
 80122ea:	7ffb      	ldrb	r3, [r7, #31]
 80122ec:	e0a9      	b.n	8012442 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80122ee:	23ff      	movs	r3, #255	; 0xff
 80122f0:	773b      	strb	r3, [r7, #28]
 80122f2:	7f3b      	ldrb	r3, [r7, #28]
 80122f4:	777b      	strb	r3, [r7, #29]
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f04f 32ff 	mov.w	r2, #4294967295
 80122fc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012302:	4619      	mov	r1, r3
 8012304:	68f8      	ldr	r0, [r7, #12]
 8012306:	f7fe f9fd 	bl	8010704 <move_window>
 801230a:	4603      	mov	r3, r0
 801230c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 801230e:	7ffb      	ldrb	r3, [r7, #31]
 8012310:	2b00      	cmp	r3, #0
 8012312:	f040 8090 	bne.w	8012436 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801231e:	7fbb      	ldrb	r3, [r7, #30]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d102      	bne.n	801232a <dir_find+0x132>
 8012324:	2304      	movs	r3, #4
 8012326:	77fb      	strb	r3, [r7, #31]
 8012328:	e08a      	b.n	8012440 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801232e:	330b      	adds	r3, #11
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012336:	72fb      	strb	r3, [r7, #11]
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	7afa      	ldrb	r2, [r7, #11]
 801233c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801233e:	7fbb      	ldrb	r3, [r7, #30]
 8012340:	2be5      	cmp	r3, #229	; 0xe5
 8012342:	d007      	beq.n	8012354 <dir_find+0x15c>
 8012344:	7afb      	ldrb	r3, [r7, #11]
 8012346:	f003 0308 	and.w	r3, r3, #8
 801234a:	2b00      	cmp	r3, #0
 801234c:	d009      	beq.n	8012362 <dir_find+0x16a>
 801234e:	7afb      	ldrb	r3, [r7, #11]
 8012350:	2b0f      	cmp	r3, #15
 8012352:	d006      	beq.n	8012362 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012354:	23ff      	movs	r3, #255	; 0xff
 8012356:	777b      	strb	r3, [r7, #29]
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f04f 32ff 	mov.w	r2, #4294967295
 801235e:	64da      	str	r2, [r3, #76]	; 0x4c
 8012360:	e05e      	b.n	8012420 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012362:	7afb      	ldrb	r3, [r7, #11]
 8012364:	2b0f      	cmp	r3, #15
 8012366:	d136      	bne.n	80123d6 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801236e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012372:	2b00      	cmp	r3, #0
 8012374:	d154      	bne.n	8012420 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012376:	7fbb      	ldrb	r3, [r7, #30]
 8012378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801237c:	2b00      	cmp	r3, #0
 801237e:	d00d      	beq.n	801239c <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012384:	7b5b      	ldrb	r3, [r3, #13]
 8012386:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012388:	7fbb      	ldrb	r3, [r7, #30]
 801238a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801238e:	77bb      	strb	r3, [r7, #30]
 8012390:	7fbb      	ldrb	r3, [r7, #30]
 8012392:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801239c:	7fba      	ldrb	r2, [r7, #30]
 801239e:	7f7b      	ldrb	r3, [r7, #29]
 80123a0:	429a      	cmp	r2, r3
 80123a2:	d115      	bne.n	80123d0 <dir_find+0x1d8>
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123a8:	330d      	adds	r3, #13
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	7f3a      	ldrb	r2, [r7, #28]
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d10e      	bne.n	80123d0 <dir_find+0x1d8>
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	691a      	ldr	r2, [r3, #16]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123ba:	4619      	mov	r1, r3
 80123bc:	4610      	mov	r0, r2
 80123be:	f7ff fa43 	bl	8011848 <cmp_lfn>
 80123c2:	4603      	mov	r3, r0
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d003      	beq.n	80123d0 <dir_find+0x1d8>
 80123c8:	7f7b      	ldrb	r3, [r7, #29]
 80123ca:	3b01      	subs	r3, #1
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	e000      	b.n	80123d2 <dir_find+0x1da>
 80123d0:	23ff      	movs	r3, #255	; 0xff
 80123d2:	777b      	strb	r3, [r7, #29]
 80123d4:	e024      	b.n	8012420 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80123d6:	7f7b      	ldrb	r3, [r7, #29]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d109      	bne.n	80123f0 <dir_find+0x1f8>
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7ff fbfd 	bl	8011be0 <sum_sfn>
 80123e6:	4603      	mov	r3, r0
 80123e8:	461a      	mov	r2, r3
 80123ea:	7f3b      	ldrb	r3, [r7, #28]
 80123ec:	4293      	cmp	r3, r2
 80123ee:	d024      	beq.n	801243a <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80123f6:	f003 0301 	and.w	r3, r3, #1
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d10a      	bne.n	8012414 <dir_find+0x21c>
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	3340      	adds	r3, #64	; 0x40
 8012406:	220b      	movs	r2, #11
 8012408:	4619      	mov	r1, r3
 801240a:	f7fd ff88 	bl	801031e <mem_cmp>
 801240e:	4603      	mov	r3, r0
 8012410:	2b00      	cmp	r3, #0
 8012412:	d014      	beq.n	801243e <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012414:	23ff      	movs	r3, #255	; 0xff
 8012416:	777b      	strb	r3, [r7, #29]
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	f04f 32ff 	mov.w	r2, #4294967295
 801241e:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012420:	2100      	movs	r1, #0
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f7ff f88e 	bl	8011544 <dir_next>
 8012428:	4603      	mov	r3, r0
 801242a:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 801242c:	7ffb      	ldrb	r3, [r7, #31]
 801242e:	2b00      	cmp	r3, #0
 8012430:	f43f af65 	beq.w	80122fe <dir_find+0x106>
 8012434:	e004      	b.n	8012440 <dir_find+0x248>
		if (res != FR_OK) break;
 8012436:	bf00      	nop
 8012438:	e002      	b.n	8012440 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801243a:	bf00      	nop
 801243c:	e000      	b.n	8012440 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801243e:	bf00      	nop

	return res;
 8012440:	7ffb      	ldrb	r3, [r7, #31]
}
 8012442:	4618      	mov	r0, r3
 8012444:	3724      	adds	r7, #36	; 0x24
 8012446:	46bd      	mov	sp, r7
 8012448:	bd90      	pop	{r4, r7, pc}
	...

0801244c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801244c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012450:	b0a0      	sub	sp, #128	; 0x80
 8012452:	af00      	add	r7, sp, #0
 8012454:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8012462:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012466:	2b00      	cmp	r3, #0
 8012468:	d001      	beq.n	801246e <dir_register+0x22>
 801246a:	2306      	movs	r3, #6
 801246c:	e198      	b.n	80127a0 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801246e:	2300      	movs	r3, #0
 8012470:	677b      	str	r3, [r7, #116]	; 0x74
 8012472:	e002      	b.n	801247a <dir_register+0x2e>
 8012474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012476:	3301      	adds	r3, #1
 8012478:	677b      	str	r3, [r7, #116]	; 0x74
 801247a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801247c:	691a      	ldr	r2, [r3, #16]
 801247e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012480:	005b      	lsls	r3, r3, #1
 8012482:	4413      	add	r3, r2
 8012484:	881b      	ldrh	r3, [r3, #0]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d1f4      	bne.n	8012474 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 801248a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801248c:	781b      	ldrb	r3, [r3, #0]
 801248e:	2b04      	cmp	r3, #4
 8012490:	f040 80a9 	bne.w	80125e6 <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8012494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012496:	330e      	adds	r3, #14
 8012498:	4aa7      	ldr	r2, [pc, #668]	; (8012738 <dir_register+0x2ec>)
 801249a:	fba2 2303 	umull	r2, r3, r2, r3
 801249e:	08db      	lsrs	r3, r3, #3
 80124a0:	3302      	adds	r3, #2
 80124a2:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 80124a4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80124a6:	6878      	ldr	r0, [r7, #4]
 80124a8:	f7ff f932 	bl	8011710 <dir_alloc>
 80124ac:	4603      	mov	r3, r0
 80124ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 80124b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d002      	beq.n	80124c0 <dir_register+0x74>
 80124ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80124be:	e16f      	b.n	80127a0 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80124c4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80124c6:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 80124ca:	440b      	add	r3, r1
 80124cc:	015b      	lsls	r3, r3, #5
 80124ce:	1ad2      	subs	r2, r2, r3
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	689b      	ldr	r3, [r3, #8]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d07a      	beq.n	80125d2 <dir_register+0x186>
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	79db      	ldrb	r3, [r3, #7]
 80124e0:	f003 0304 	and.w	r3, r3, #4
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d074      	beq.n	80125d2 <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80124ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124f0:	895b      	ldrh	r3, [r3, #10]
 80124f2:	4618      	mov	r0, r3
 80124f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124f6:	899b      	ldrh	r3, [r3, #12]
 80124f8:	fb03 f300 	mul.w	r3, r3, r0
 80124fc:	469b      	mov	fp, r3
 80124fe:	f04f 0c00 	mov.w	ip, #0
 8012502:	eb1b 0301 	adds.w	r3, fp, r1
 8012506:	eb4c 0402 	adc.w	r4, ip, r2
 801250a:	687a      	ldr	r2, [r7, #4]
 801250c:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	4618      	mov	r0, r3
 8012514:	f7fe fd26 	bl	8010f64 <fill_first_frag>
 8012518:	4603      	mov	r3, r0
 801251a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801251e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012522:	2b00      	cmp	r3, #0
 8012524:	d002      	beq.n	801252c <dir_register+0xe0>
 8012526:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801252a:	e139      	b.n	80127a0 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012532:	f04f 32ff 	mov.w	r2, #4294967295
 8012536:	4619      	mov	r1, r3
 8012538:	f7fe fd43 	bl	8010fc2 <fill_last_frag>
 801253c:	4603      	mov	r3, r0
 801253e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8012542:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012546:	2b00      	cmp	r3, #0
 8012548:	d002      	beq.n	8012550 <dir_register+0x104>
 801254a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801254e:	e127      	b.n	80127a0 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8012550:	687a      	ldr	r2, [r7, #4]
 8012552:	f107 0308 	add.w	r3, r7, #8
 8012556:	4611      	mov	r1, r2
 8012558:	4618      	mov	r0, r3
 801255a:	f7ff fc87 	bl	8011e6c <load_obj_dir>
 801255e:	4603      	mov	r3, r0
 8012560:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8012564:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012568:	2b00      	cmp	r3, #0
 801256a:	d002      	beq.n	8012572 <dir_register+0x126>
 801256c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012570:	e116      	b.n	80127a0 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8012572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012574:	695b      	ldr	r3, [r3, #20]
 8012576:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8012580:	461a      	mov	r2, r3
 8012582:	4623      	mov	r3, r4
 8012584:	4608      	mov	r0, r1
 8012586:	f7fd fe08 	bl	801019a <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 801258a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801258c:	695b      	ldr	r3, [r3, #20]
 801258e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8012598:	461a      	mov	r2, r3
 801259a:	4623      	mov	r3, r4
 801259c:	4608      	mov	r0, r1
 801259e:	f7fd fdfc 	bl	801019a <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	79da      	ldrb	r2, [r3, #7]
 80125a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125a8:	695b      	ldr	r3, [r3, #20]
 80125aa:	3321      	adds	r3, #33	; 0x21
 80125ac:	f042 0201 	orr.w	r2, r2, #1
 80125b0:	b2d2      	uxtb	r2, r2
 80125b2:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 80125b4:	f107 0308 	add.w	r3, r7, #8
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7ff fc94 	bl	8011ee6 <store_xdir>
 80125be:	4603      	mov	r3, r0
 80125c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80125c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d002      	beq.n	80125d2 <dir_register+0x186>
 80125cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80125d0:	e0e6      	b.n	80127a0 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 80125d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125d4:	695a      	ldr	r2, [r3, #20]
 80125d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125d8:	691b      	ldr	r3, [r3, #16]
 80125da:	4619      	mov	r1, r3
 80125dc:	4610      	mov	r0, r2
 80125de:	f7ff fcdd 	bl	8011f9c <create_xdir>
		return FR_OK;
 80125e2:	2300      	movs	r3, #0
 80125e4:	e0dc      	b.n	80127a0 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80125ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80125f0:	220c      	movs	r2, #12
 80125f2:	4618      	mov	r0, r3
 80125f4:	f7fd fe58 	bl	80102a8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80125f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80125fc:	f003 0301 	and.w	r3, r3, #1
 8012600:	2b00      	cmp	r3, #0
 8012602:	d033      	beq.n	801266c <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2240      	movs	r2, #64	; 0x40
 8012608:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 801260c:	2301      	movs	r3, #1
 801260e:	67bb      	str	r3, [r7, #120]	; 0x78
 8012610:	e016      	b.n	8012640 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801261a:	691a      	ldr	r2, [r3, #16]
 801261c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8012620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012622:	f7ff fa4d 	bl	8011ac0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f7ff fde6 	bl	80121f8 <dir_find>
 801262c:	4603      	mov	r3, r0
 801262e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8012632:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012636:	2b00      	cmp	r3, #0
 8012638:	d106      	bne.n	8012648 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 801263a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801263c:	3301      	adds	r3, #1
 801263e:	67bb      	str	r3, [r7, #120]	; 0x78
 8012640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012642:	2b63      	cmp	r3, #99	; 0x63
 8012644:	d9e5      	bls.n	8012612 <dir_register+0x1c6>
 8012646:	e000      	b.n	801264a <dir_register+0x1fe>
			if (res != FR_OK) break;
 8012648:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801264a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801264c:	2b64      	cmp	r3, #100	; 0x64
 801264e:	d101      	bne.n	8012654 <dir_register+0x208>
 8012650:	2307      	movs	r3, #7
 8012652:	e0a5      	b.n	80127a0 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012654:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012658:	2b04      	cmp	r3, #4
 801265a:	d002      	beq.n	8012662 <dir_register+0x216>
 801265c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012660:	e09e      	b.n	80127a0 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012662:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801266c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012670:	f003 0302 	and.w	r3, r3, #2
 8012674:	2b00      	cmp	r3, #0
 8012676:	d007      	beq.n	8012688 <dir_register+0x23c>
 8012678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801267a:	330c      	adds	r3, #12
 801267c:	4a2f      	ldr	r2, [pc, #188]	; (801273c <dir_register+0x2f0>)
 801267e:	fba2 2303 	umull	r2, r3, r2, r3
 8012682:	089b      	lsrs	r3, r3, #2
 8012684:	3301      	adds	r3, #1
 8012686:	e000      	b.n	801268a <dir_register+0x23e>
 8012688:	2301      	movs	r3, #1
 801268a:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801268c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f7ff f83e 	bl	8011710 <dir_alloc>
 8012694:	4603      	mov	r3, r0
 8012696:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801269a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d14f      	bne.n	8012742 <dir_register+0x2f6>
 80126a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80126a4:	3b01      	subs	r3, #1
 80126a6:	673b      	str	r3, [r7, #112]	; 0x70
 80126a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d049      	beq.n	8012742 <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80126b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80126b4:	015b      	lsls	r3, r3, #5
 80126b6:	1ad3      	subs	r3, r2, r3
 80126b8:	4619      	mov	r1, r3
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f7fe feae 	bl	801141c <dir_sdi>
 80126c0:	4603      	mov	r3, r0
 80126c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 80126c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d139      	bne.n	8012742 <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	3340      	adds	r3, #64	; 0x40
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7ff fa84 	bl	8011be0 <sum_sfn>
 80126d8:	4603      	mov	r3, r0
 80126da:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126e2:	4619      	mov	r1, r3
 80126e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80126e6:	f7fe f80d 	bl	8010704 <move_window>
 80126ea:	4603      	mov	r3, r0
 80126ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 80126f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d123      	bne.n	8012740 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80126f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80126fa:	6918      	ldr	r0, [r3, #16]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8012700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012702:	b2da      	uxtb	r2, r3
 8012704:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012708:	f7ff f972 	bl	80119f0 <put_lfn>
				fs->wflag = 1;
 801270c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801270e:	2201      	movs	r2, #1
 8012710:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012712:	2100      	movs	r1, #0
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f7fe ff15 	bl	8011544 <dir_next>
 801271a:	4603      	mov	r3, r0
 801271c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8012720:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012724:	2b00      	cmp	r3, #0
 8012726:	d10c      	bne.n	8012742 <dir_register+0x2f6>
 8012728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801272a:	3b01      	subs	r3, #1
 801272c:	673b      	str	r3, [r7, #112]	; 0x70
 801272e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012730:	2b00      	cmp	r3, #0
 8012732:	d1d4      	bne.n	80126de <dir_register+0x292>
 8012734:	e005      	b.n	8012742 <dir_register+0x2f6>
 8012736:	bf00      	nop
 8012738:	88888889 	.word	0x88888889
 801273c:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8012740:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012742:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012746:	2b00      	cmp	r3, #0
 8012748:	d128      	bne.n	801279c <dir_register+0x350>
		res = move_window(fs, dp->sect);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801274e:	4619      	mov	r1, r3
 8012750:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012752:	f7fd ffd7 	bl	8010704 <move_window>
 8012756:	4603      	mov	r3, r0
 8012758:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 801275c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012760:	2b00      	cmp	r3, #0
 8012762:	d11b      	bne.n	801279c <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012768:	2220      	movs	r2, #32
 801276a:	2100      	movs	r1, #0
 801276c:	4618      	mov	r0, r3
 801276e:	f7fd fdbc 	bl	80102ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	3340      	adds	r3, #64	; 0x40
 801277a:	220b      	movs	r2, #11
 801277c:	4619      	mov	r1, r3
 801277e:	f7fd fd93 	bl	80102a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801278c:	330c      	adds	r3, #12
 801278e:	f002 0218 	and.w	r2, r2, #24
 8012792:	b2d2      	uxtb	r2, r2
 8012794:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012798:	2201      	movs	r2, #1
 801279a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801279c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80127a0:	4618      	mov	r0, r3
 80127a2:	3780      	adds	r7, #128	; 0x80
 80127a4:	46bd      	mov	sp, r7
 80127a6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80127aa:	bf00      	nop

080127ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b08a      	sub	sp, #40	; 0x28
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
 80127b4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	613b      	str	r3, [r7, #16]
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	691b      	ldr	r3, [r3, #16]
 80127c2:	60fb      	str	r3, [r7, #12]
 80127c4:	2300      	movs	r3, #0
 80127c6:	617b      	str	r3, [r7, #20]
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80127cc:	69bb      	ldr	r3, [r7, #24]
 80127ce:	1c5a      	adds	r2, r3, #1
 80127d0:	61ba      	str	r2, [r7, #24]
 80127d2:	693a      	ldr	r2, [r7, #16]
 80127d4:	4413      	add	r3, r2
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80127da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127dc:	2b1f      	cmp	r3, #31
 80127de:	d940      	bls.n	8012862 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80127e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127e2:	2b2f      	cmp	r3, #47	; 0x2f
 80127e4:	d006      	beq.n	80127f4 <create_name+0x48>
 80127e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127e8:	2b5c      	cmp	r3, #92	; 0x5c
 80127ea:	d110      	bne.n	801280e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80127ec:	e002      	b.n	80127f4 <create_name+0x48>
 80127ee:	69bb      	ldr	r3, [r7, #24]
 80127f0:	3301      	adds	r3, #1
 80127f2:	61bb      	str	r3, [r7, #24]
 80127f4:	693a      	ldr	r2, [r7, #16]
 80127f6:	69bb      	ldr	r3, [r7, #24]
 80127f8:	4413      	add	r3, r2
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	2b2f      	cmp	r3, #47	; 0x2f
 80127fe:	d0f6      	beq.n	80127ee <create_name+0x42>
 8012800:	693a      	ldr	r2, [r7, #16]
 8012802:	69bb      	ldr	r3, [r7, #24]
 8012804:	4413      	add	r3, r2
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	2b5c      	cmp	r3, #92	; 0x5c
 801280a:	d0f0      	beq.n	80127ee <create_name+0x42>
			break;
 801280c:	e02a      	b.n	8012864 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	2bfe      	cmp	r3, #254	; 0xfe
 8012812:	d901      	bls.n	8012818 <create_name+0x6c>
 8012814:	2306      	movs	r3, #6
 8012816:	e177      	b.n	8012b08 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012818:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801281a:	b2db      	uxtb	r3, r3
 801281c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801281e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012820:	2101      	movs	r1, #1
 8012822:	4618      	mov	r0, r3
 8012824:	f001 fd18 	bl	8014258 <ff_convert>
 8012828:	4603      	mov	r3, r0
 801282a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801282c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801282e:	2b00      	cmp	r3, #0
 8012830:	d101      	bne.n	8012836 <create_name+0x8a>
 8012832:	2306      	movs	r3, #6
 8012834:	e168      	b.n	8012b08 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012838:	2b7f      	cmp	r3, #127	; 0x7f
 801283a:	d809      	bhi.n	8012850 <create_name+0xa4>
 801283c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801283e:	4619      	mov	r1, r3
 8012840:	48b3      	ldr	r0, [pc, #716]	; (8012b10 <create_name+0x364>)
 8012842:	f7fd fd93 	bl	801036c <chk_chr>
 8012846:	4603      	mov	r3, r0
 8012848:	2b00      	cmp	r3, #0
 801284a:	d001      	beq.n	8012850 <create_name+0xa4>
 801284c:	2306      	movs	r3, #6
 801284e:	e15b      	b.n	8012b08 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	1c5a      	adds	r2, r3, #1
 8012854:	617a      	str	r2, [r7, #20]
 8012856:	005b      	lsls	r3, r3, #1
 8012858:	68fa      	ldr	r2, [r7, #12]
 801285a:	4413      	add	r3, r2
 801285c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801285e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012860:	e7b4      	b.n	80127cc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8012862:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012864:	693a      	ldr	r2, [r7, #16]
 8012866:	69bb      	ldr	r3, [r7, #24]
 8012868:	441a      	add	r2, r3
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801286e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012870:	2b1f      	cmp	r3, #31
 8012872:	d801      	bhi.n	8012878 <create_name+0xcc>
 8012874:	2304      	movs	r3, #4
 8012876:	e000      	b.n	801287a <create_name+0xce>
 8012878:	2300      	movs	r3, #0
 801287a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801287e:	e011      	b.n	80128a4 <create_name+0xf8>
		w = lfn[di - 1];
 8012880:	697a      	ldr	r2, [r7, #20]
 8012882:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012886:	4413      	add	r3, r2
 8012888:	005b      	lsls	r3, r3, #1
 801288a:	68fa      	ldr	r2, [r7, #12]
 801288c:	4413      	add	r3, r2
 801288e:	881b      	ldrh	r3, [r3, #0]
 8012890:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8012892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012894:	2b20      	cmp	r3, #32
 8012896:	d002      	beq.n	801289e <create_name+0xf2>
 8012898:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801289a:	2b2e      	cmp	r3, #46	; 0x2e
 801289c:	d106      	bne.n	80128ac <create_name+0x100>
		di--;
 801289e:	697b      	ldr	r3, [r7, #20]
 80128a0:	3b01      	subs	r3, #1
 80128a2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d1ea      	bne.n	8012880 <create_name+0xd4>
 80128aa:	e000      	b.n	80128ae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80128ac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	005b      	lsls	r3, r3, #1
 80128b2:	68fa      	ldr	r2, [r7, #12]
 80128b4:	4413      	add	r3, r2
 80128b6:	2200      	movs	r2, #0
 80128b8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d101      	bne.n	80128c4 <create_name+0x118>
 80128c0:	2306      	movs	r3, #6
 80128c2:	e121      	b.n	8012b08 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	3340      	adds	r3, #64	; 0x40
 80128c8:	220b      	movs	r2, #11
 80128ca:	2120      	movs	r1, #32
 80128cc:	4618      	mov	r0, r3
 80128ce:	f7fd fd0c 	bl	80102ea <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80128d2:	2300      	movs	r3, #0
 80128d4:	61bb      	str	r3, [r7, #24]
 80128d6:	e002      	b.n	80128de <create_name+0x132>
 80128d8:	69bb      	ldr	r3, [r7, #24]
 80128da:	3301      	adds	r3, #1
 80128dc:	61bb      	str	r3, [r7, #24]
 80128de:	69bb      	ldr	r3, [r7, #24]
 80128e0:	005b      	lsls	r3, r3, #1
 80128e2:	68fa      	ldr	r2, [r7, #12]
 80128e4:	4413      	add	r3, r2
 80128e6:	881b      	ldrh	r3, [r3, #0]
 80128e8:	2b20      	cmp	r3, #32
 80128ea:	d0f5      	beq.n	80128d8 <create_name+0x12c>
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	005b      	lsls	r3, r3, #1
 80128f0:	68fa      	ldr	r2, [r7, #12]
 80128f2:	4413      	add	r3, r2
 80128f4:	881b      	ldrh	r3, [r3, #0]
 80128f6:	2b2e      	cmp	r3, #46	; 0x2e
 80128f8:	d0ee      	beq.n	80128d8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80128fa:	69bb      	ldr	r3, [r7, #24]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d009      	beq.n	8012914 <create_name+0x168>
 8012900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012904:	f043 0303 	orr.w	r3, r3, #3
 8012908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801290c:	e002      	b.n	8012914 <create_name+0x168>
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	3b01      	subs	r3, #1
 8012912:	617b      	str	r3, [r7, #20]
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d009      	beq.n	801292e <create_name+0x182>
 801291a:	697a      	ldr	r2, [r7, #20]
 801291c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012920:	4413      	add	r3, r2
 8012922:	005b      	lsls	r3, r3, #1
 8012924:	68fa      	ldr	r2, [r7, #12]
 8012926:	4413      	add	r3, r2
 8012928:	881b      	ldrh	r3, [r3, #0]
 801292a:	2b2e      	cmp	r3, #46	; 0x2e
 801292c:	d1ef      	bne.n	801290e <create_name+0x162>

	i = b = 0; ni = 8;
 801292e:	2300      	movs	r3, #0
 8012930:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012934:	2300      	movs	r3, #0
 8012936:	623b      	str	r3, [r7, #32]
 8012938:	2308      	movs	r3, #8
 801293a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801293c:	69bb      	ldr	r3, [r7, #24]
 801293e:	1c5a      	adds	r2, r3, #1
 8012940:	61ba      	str	r2, [r7, #24]
 8012942:	005b      	lsls	r3, r3, #1
 8012944:	68fa      	ldr	r2, [r7, #12]
 8012946:	4413      	add	r3, r2
 8012948:	881b      	ldrh	r3, [r3, #0]
 801294a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801294c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801294e:	2b00      	cmp	r3, #0
 8012950:	f000 8090 	beq.w	8012a74 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012956:	2b20      	cmp	r3, #32
 8012958:	d006      	beq.n	8012968 <create_name+0x1bc>
 801295a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801295c:	2b2e      	cmp	r3, #46	; 0x2e
 801295e:	d10a      	bne.n	8012976 <create_name+0x1ca>
 8012960:	69ba      	ldr	r2, [r7, #24]
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	429a      	cmp	r2, r3
 8012966:	d006      	beq.n	8012976 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8012968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801296c:	f043 0303 	orr.w	r3, r3, #3
 8012970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012974:	e07d      	b.n	8012a72 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012976:	6a3a      	ldr	r2, [r7, #32]
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	429a      	cmp	r2, r3
 801297c:	d203      	bcs.n	8012986 <create_name+0x1da>
 801297e:	69ba      	ldr	r2, [r7, #24]
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	429a      	cmp	r2, r3
 8012984:	d123      	bne.n	80129ce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8012986:	69fb      	ldr	r3, [r7, #28]
 8012988:	2b0b      	cmp	r3, #11
 801298a:	d106      	bne.n	801299a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801298c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012990:	f043 0303 	orr.w	r3, r3, #3
 8012994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012998:	e06f      	b.n	8012a7a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801299a:	69ba      	ldr	r2, [r7, #24]
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	429a      	cmp	r2, r3
 80129a0:	d005      	beq.n	80129ae <create_name+0x202>
 80129a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129a6:	f043 0303 	orr.w	r3, r3, #3
 80129aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80129ae:	69ba      	ldr	r2, [r7, #24]
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d860      	bhi.n	8012a78 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	61bb      	str	r3, [r7, #24]
 80129ba:	2308      	movs	r3, #8
 80129bc:	623b      	str	r3, [r7, #32]
 80129be:	230b      	movs	r3, #11
 80129c0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80129c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80129c6:	009b      	lsls	r3, r3, #2
 80129c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80129cc:	e051      	b.n	8012a72 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80129ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129d0:	2b7f      	cmp	r3, #127	; 0x7f
 80129d2:	d914      	bls.n	80129fe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80129d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129d6:	2100      	movs	r1, #0
 80129d8:	4618      	mov	r0, r3
 80129da:	f001 fc3d 	bl	8014258 <ff_convert>
 80129de:	4603      	mov	r3, r0
 80129e0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80129e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d004      	beq.n	80129f2 <create_name+0x246>
 80129e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129ea:	3b80      	subs	r3, #128	; 0x80
 80129ec:	4a49      	ldr	r2, [pc, #292]	; (8012b14 <create_name+0x368>)
 80129ee:	5cd3      	ldrb	r3, [r2, r3]
 80129f0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80129f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129f6:	f043 0302 	orr.w	r3, r3, #2
 80129fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80129fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d007      	beq.n	8012a14 <create_name+0x268>
 8012a04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a06:	4619      	mov	r1, r3
 8012a08:	4843      	ldr	r0, [pc, #268]	; (8012b18 <create_name+0x36c>)
 8012a0a:	f7fd fcaf 	bl	801036c <chk_chr>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d008      	beq.n	8012a26 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012a14:	235f      	movs	r3, #95	; 0x5f
 8012a16:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a1c:	f043 0303 	orr.w	r3, r3, #3
 8012a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012a24:	e01b      	b.n	8012a5e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a28:	2b40      	cmp	r3, #64	; 0x40
 8012a2a:	d909      	bls.n	8012a40 <create_name+0x294>
 8012a2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a2e:	2b5a      	cmp	r3, #90	; 0x5a
 8012a30:	d806      	bhi.n	8012a40 <create_name+0x294>
					b |= 2;
 8012a32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a36:	f043 0302 	orr.w	r3, r3, #2
 8012a3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012a3e:	e00e      	b.n	8012a5e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012a40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a42:	2b60      	cmp	r3, #96	; 0x60
 8012a44:	d90b      	bls.n	8012a5e <create_name+0x2b2>
 8012a46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a48:	2b7a      	cmp	r3, #122	; 0x7a
 8012a4a:	d808      	bhi.n	8012a5e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012a4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a50:	f043 0301 	orr.w	r3, r3, #1
 8012a54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012a58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a5a:	3b20      	subs	r3, #32
 8012a5c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012a5e:	6a3b      	ldr	r3, [r7, #32]
 8012a60:	1c5a      	adds	r2, r3, #1
 8012a62:	623a      	str	r2, [r7, #32]
 8012a64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a66:	b2d1      	uxtb	r1, r2
 8012a68:	687a      	ldr	r2, [r7, #4]
 8012a6a:	4413      	add	r3, r2
 8012a6c:	460a      	mov	r2, r1
 8012a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8012a72:	e763      	b.n	801293c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8012a74:	bf00      	nop
 8012a76:	e000      	b.n	8012a7a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8012a78:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a80:	2be5      	cmp	r3, #229	; 0xe5
 8012a82:	d103      	bne.n	8012a8c <create_name+0x2e0>
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2205      	movs	r2, #5
 8012a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8012a8c:	69fb      	ldr	r3, [r7, #28]
 8012a8e:	2b08      	cmp	r3, #8
 8012a90:	d104      	bne.n	8012a9c <create_name+0x2f0>
 8012a92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a96:	009b      	lsls	r3, r3, #2
 8012a98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012a9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012aa0:	f003 030c 	and.w	r3, r3, #12
 8012aa4:	2b0c      	cmp	r3, #12
 8012aa6:	d005      	beq.n	8012ab4 <create_name+0x308>
 8012aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012aac:	f003 0303 	and.w	r3, r3, #3
 8012ab0:	2b03      	cmp	r3, #3
 8012ab2:	d105      	bne.n	8012ac0 <create_name+0x314>
 8012ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ab8:	f043 0302 	orr.w	r3, r3, #2
 8012abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ac4:	f003 0302 	and.w	r3, r3, #2
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d117      	bne.n	8012afc <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012acc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ad0:	f003 0303 	and.w	r3, r3, #3
 8012ad4:	2b01      	cmp	r3, #1
 8012ad6:	d105      	bne.n	8012ae4 <create_name+0x338>
 8012ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012adc:	f043 0310 	orr.w	r3, r3, #16
 8012ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012ae4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ae8:	f003 030c 	and.w	r3, r3, #12
 8012aec:	2b04      	cmp	r3, #4
 8012aee:	d105      	bne.n	8012afc <create_name+0x350>
 8012af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012af4:	f043 0308 	orr.w	r3, r3, #8
 8012af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012b02:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 8012b06:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3728      	adds	r7, #40	; 0x28
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}
 8012b10:	080144d8 	.word	0x080144d8
 8012b14:	08014568 	.word	0x08014568
 8012b18:	080144e4 	.word	0x080144e4

08012b1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012b1c:	b590      	push	{r4, r7, lr}
 8012b1e:	b087      	sub	sp, #28
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012b30:	e002      	b.n	8012b38 <follow_path+0x1c>
 8012b32:	683b      	ldr	r3, [r7, #0]
 8012b34:	3301      	adds	r3, #1
 8012b36:	603b      	str	r3, [r7, #0]
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	2b2f      	cmp	r3, #47	; 0x2f
 8012b3e:	d0f8      	beq.n	8012b32 <follow_path+0x16>
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	2b5c      	cmp	r3, #92	; 0x5c
 8012b46:	d0f4      	beq.n	8012b32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	2200      	movs	r2, #0
 8012b52:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	781b      	ldrb	r3, [r3, #0]
 8012b58:	2b1f      	cmp	r3, #31
 8012b5a:	d80a      	bhi.n	8012b72 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2280      	movs	r2, #128	; 0x80
 8012b60:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8012b64:	2100      	movs	r1, #0
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f7fe fc58 	bl	801141c <dir_sdi>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	75fb      	strb	r3, [r7, #23]
 8012b70:	e07c      	b.n	8012c6c <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012b72:	463b      	mov	r3, r7
 8012b74:	4619      	mov	r1, r3
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f7ff fe18 	bl	80127ac <create_name>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012b80:	7dfb      	ldrb	r3, [r7, #23]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d16d      	bne.n	8012c62 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f7ff fb36 	bl	80121f8 <dir_find>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8012b96:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012b98:	7dfb      	ldrb	r3, [r7, #23]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d00a      	beq.n	8012bb4 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012b9e:	7dfb      	ldrb	r3, [r7, #23]
 8012ba0:	2b04      	cmp	r3, #4
 8012ba2:	d160      	bne.n	8012c66 <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012ba4:	7afb      	ldrb	r3, [r7, #11]
 8012ba6:	f003 0304 	and.w	r3, r3, #4
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d15b      	bne.n	8012c66 <follow_path+0x14a>
 8012bae:	2305      	movs	r3, #5
 8012bb0:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012bb2:	e058      	b.n	8012c66 <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012bb4:	7afb      	ldrb	r3, [r7, #11]
 8012bb6:	f003 0304 	and.w	r3, r3, #4
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d155      	bne.n	8012c6a <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	799b      	ldrb	r3, [r3, #6]
 8012bc2:	f003 0310 	and.w	r3, r3, #16
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d102      	bne.n	8012bd0 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8012bca:	2305      	movs	r3, #5
 8012bcc:	75fb      	strb	r3, [r7, #23]
 8012bce:	e04d      	b.n	8012c6c <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	2b04      	cmp	r3, #4
 8012bd6:	d12f      	bne.n	8012c38 <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 8012bd8:	693b      	ldr	r3, [r7, #16]
 8012bda:	689a      	ldr	r2, [r3, #8]
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8012be6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012bea:	693a      	ldr	r2, [r7, #16]
 8012bec:	79d2      	ldrb	r2, [r2, #7]
 8012bee:	431a      	orrs	r2, r3
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012bf8:	693b      	ldr	r3, [r7, #16]
 8012bfa:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	695b      	ldr	r3, [r3, #20]
 8012c00:	3334      	adds	r3, #52	; 0x34
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7fd f9a2 	bl	800ff4c <ld_dword>
 8012c08:	4602      	mov	r2, r0
 8012c0a:	693b      	ldr	r3, [r7, #16]
 8012c0c:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	695b      	ldr	r3, [r3, #20]
 8012c12:	3321      	adds	r3, #33	; 0x21
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	f003 0302 	and.w	r3, r3, #2
 8012c1a:	b2da      	uxtb	r2, r3
 8012c1c:	693b      	ldr	r3, [r7, #16]
 8012c1e:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	695b      	ldr	r3, [r3, #20]
 8012c24:	3338      	adds	r3, #56	; 0x38
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7fd f9b3 	bl	800ff92 <ld_qword>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	460c      	mov	r4, r1
 8012c30:	693a      	ldr	r2, [r7, #16]
 8012c32:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8012c36:	e79c      	b.n	8012b72 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c42:	68fa      	ldr	r2, [r7, #12]
 8012c44:	8992      	ldrh	r2, [r2, #12]
 8012c46:	fbb3 f0f2 	udiv	r0, r3, r2
 8012c4a:	fb02 f200 	mul.w	r2, r2, r0
 8012c4e:	1a9b      	subs	r3, r3, r2
 8012c50:	440b      	add	r3, r1
 8012c52:	4619      	mov	r1, r3
 8012c54:	68f8      	ldr	r0, [r7, #12]
 8012c56:	f7fe fdb7 	bl	80117c8 <ld_clust>
 8012c5a:	4602      	mov	r2, r0
 8012c5c:	693b      	ldr	r3, [r7, #16]
 8012c5e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c60:	e787      	b.n	8012b72 <follow_path+0x56>
			if (res != FR_OK) break;
 8012c62:	bf00      	nop
 8012c64:	e002      	b.n	8012c6c <follow_path+0x150>
				break;
 8012c66:	bf00      	nop
 8012c68:	e000      	b.n	8012c6c <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012c6a:	bf00      	nop
			}
		}
	}

	return res;
 8012c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	371c      	adds	r7, #28
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd90      	pop	{r4, r7, pc}

08012c76 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012c76:	b480      	push	{r7}
 8012c78:	b087      	sub	sp, #28
 8012c7a:	af00      	add	r7, sp, #0
 8012c7c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c82:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d031      	beq.n	8012cf0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	617b      	str	r3, [r7, #20]
 8012c92:	e002      	b.n	8012c9a <get_ldnumber+0x24>
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	3301      	adds	r3, #1
 8012c98:	617b      	str	r3, [r7, #20]
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	2b1f      	cmp	r3, #31
 8012ca0:	d903      	bls.n	8012caa <get_ldnumber+0x34>
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	2b3a      	cmp	r3, #58	; 0x3a
 8012ca8:	d1f4      	bne.n	8012c94 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	2b3a      	cmp	r3, #58	; 0x3a
 8012cb0:	d11c      	bne.n	8012cec <get_ldnumber+0x76>
			tp = *path;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	1c5a      	adds	r2, r3, #1
 8012cbc:	60fa      	str	r2, [r7, #12]
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	3b30      	subs	r3, #48	; 0x30
 8012cc2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	2b09      	cmp	r3, #9
 8012cc8:	d80e      	bhi.n	8012ce8 <get_ldnumber+0x72>
 8012cca:	68fa      	ldr	r2, [r7, #12]
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	d10a      	bne.n	8012ce8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d107      	bne.n	8012ce8 <get_ldnumber+0x72>
					vol = (int)i;
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	3301      	adds	r3, #1
 8012ce0:	617b      	str	r3, [r7, #20]
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	697a      	ldr	r2, [r7, #20]
 8012ce6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012ce8:	693b      	ldr	r3, [r7, #16]
 8012cea:	e002      	b.n	8012cf2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012cec:	2300      	movs	r3, #0
 8012cee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012cf0:	693b      	ldr	r3, [r7, #16]
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	371c      	adds	r7, #28
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfc:	4770      	bx	lr
	...

08012d00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	70da      	strb	r2, [r3, #3]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f04f 32ff 	mov.w	r2, #4294967295
 8012d16:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012d18:	6839      	ldr	r1, [r7, #0]
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f7fd fcf2 	bl	8010704 <move_window>
 8012d20:	4603      	mov	r3, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d001      	beq.n	8012d2a <check_fs+0x2a>
 8012d26:	2304      	movs	r3, #4
 8012d28:	e044      	b.n	8012db4 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	333c      	adds	r3, #60	; 0x3c
 8012d2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7fd f8f2 	bl	800ff1c <ld_word>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d001      	beq.n	8012d48 <check_fs+0x48>
 8012d44:	2303      	movs	r3, #3
 8012d46:	e035      	b.n	8012db4 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012d4e:	2be9      	cmp	r3, #233	; 0xe9
 8012d50:	d009      	beq.n	8012d66 <check_fs+0x66>
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012d58:	2beb      	cmp	r3, #235	; 0xeb
 8012d5a:	d11e      	bne.n	8012d9a <check_fs+0x9a>
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012d62:	2b90      	cmp	r3, #144	; 0x90
 8012d64:	d119      	bne.n	8012d9a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	333c      	adds	r3, #60	; 0x3c
 8012d6a:	3336      	adds	r3, #54	; 0x36
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f7fd f8ed 	bl	800ff4c <ld_dword>
 8012d72:	4603      	mov	r3, r0
 8012d74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012d78:	4a10      	ldr	r2, [pc, #64]	; (8012dbc <check_fs+0xbc>)
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d101      	bne.n	8012d82 <check_fs+0x82>
 8012d7e:	2300      	movs	r3, #0
 8012d80:	e018      	b.n	8012db4 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	333c      	adds	r3, #60	; 0x3c
 8012d86:	3352      	adds	r3, #82	; 0x52
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f7fd f8df 	bl	800ff4c <ld_dword>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	4b0b      	ldr	r3, [pc, #44]	; (8012dc0 <check_fs+0xc0>)
 8012d92:	429a      	cmp	r2, r3
 8012d94:	d101      	bne.n	8012d9a <check_fs+0x9a>
 8012d96:	2300      	movs	r3, #0
 8012d98:	e00c      	b.n	8012db4 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	333c      	adds	r3, #60	; 0x3c
 8012d9e:	220b      	movs	r2, #11
 8012da0:	4908      	ldr	r1, [pc, #32]	; (8012dc4 <check_fs+0xc4>)
 8012da2:	4618      	mov	r0, r3
 8012da4:	f7fd fabb 	bl	801031e <mem_cmp>
 8012da8:	4603      	mov	r3, r0
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d101      	bne.n	8012db2 <check_fs+0xb2>
 8012dae:	2301      	movs	r3, #1
 8012db0:	e000      	b.n	8012db4 <check_fs+0xb4>
#endif
	return 2;
 8012db2:	2302      	movs	r3, #2
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3708      	adds	r7, #8
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	00544146 	.word	0x00544146
 8012dc0:	33544146 	.word	0x33544146
 8012dc4:	080144ec 	.word	0x080144ec

08012dc8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012dc8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012dcc:	b098      	sub	sp, #96	; 0x60
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	60f8      	str	r0, [r7, #12]
 8012dd2:	60b9      	str	r1, [r7, #8]
 8012dd4:	4613      	mov	r3, r2
 8012dd6:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012dde:	68f8      	ldr	r0, [r7, #12]
 8012de0:	f7ff ff49 	bl	8012c76 <get_ldnumber>
 8012de4:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 8012de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	da01      	bge.n	8012df0 <find_volume+0x28>
 8012dec:	230b      	movs	r3, #11
 8012dee:	e36e      	b.n	80134ce <find_volume+0x706>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012df0:	4aaa      	ldr	r2, [pc, #680]	; (801309c <find_volume+0x2d4>)
 8012df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012df8:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d101      	bne.n	8012e04 <find_volume+0x3c>
 8012e00:	230c      	movs	r3, #12
 8012e02:	e364      	b.n	80134ce <find_volume+0x706>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012e08:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012e0a:	79fb      	ldrb	r3, [r7, #7]
 8012e0c:	f023 0301 	bic.w	r3, r3, #1
 8012e10:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d01a      	beq.n	8012e50 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8012e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e1c:	785b      	ldrb	r3, [r3, #1]
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7fc ffde 	bl	800fde0 <disk_status>
 8012e24:	4603      	mov	r3, r0
 8012e26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012e2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e2e:	f003 0301 	and.w	r3, r3, #1
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d10c      	bne.n	8012e50 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012e36:	79fb      	ldrb	r3, [r7, #7]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d007      	beq.n	8012e4c <find_volume+0x84>
 8012e3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e40:	f003 0304 	and.w	r3, r3, #4
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d001      	beq.n	8012e4c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8012e48:	230a      	movs	r3, #10
 8012e4a:	e340      	b.n	80134ce <find_volume+0x706>
			}
			return FR_OK;				/* The file system object is valid */
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	e33e      	b.n	80134ce <find_volume+0x706>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e52:	2200      	movs	r2, #0
 8012e54:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e58:	b2da      	uxtb	r2, r3
 8012e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e5c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e60:	785b      	ldrb	r3, [r3, #1]
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7fc ffd6 	bl	800fe14 <disk_initialize>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012e6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e72:	f003 0301 	and.w	r3, r3, #1
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d001      	beq.n	8012e7e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012e7a:	2303      	movs	r3, #3
 8012e7c:	e327      	b.n	80134ce <find_volume+0x706>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012e7e:	79fb      	ldrb	r3, [r7, #7]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d007      	beq.n	8012e94 <find_volume+0xcc>
 8012e84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e88:	f003 0304 	and.w	r3, r3, #4
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d001      	beq.n	8012e94 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8012e90:	230a      	movs	r3, #10
 8012e92:	e31c      	b.n	80134ce <find_volume+0x706>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e96:	7858      	ldrb	r0, [r3, #1]
 8012e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e9a:	330c      	adds	r3, #12
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	2102      	movs	r1, #2
 8012ea0:	f7fd f81e 	bl	800fee0 <disk_ioctl>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d001      	beq.n	8012eae <find_volume+0xe6>
 8012eaa:	2301      	movs	r3, #1
 8012eac:	e30f      	b.n	80134ce <find_volume+0x706>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eb0:	899b      	ldrh	r3, [r3, #12]
 8012eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012eb6:	d80d      	bhi.n	8012ed4 <find_volume+0x10c>
 8012eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eba:	899b      	ldrh	r3, [r3, #12]
 8012ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ec0:	d308      	bcc.n	8012ed4 <find_volume+0x10c>
 8012ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ec4:	899b      	ldrh	r3, [r3, #12]
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eca:	899b      	ldrh	r3, [r3, #12]
 8012ecc:	3b01      	subs	r3, #1
 8012ece:	4013      	ands	r3, r2
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d001      	beq.n	8012ed8 <find_volume+0x110>
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	e2fa      	b.n	80134ce <find_volume+0x706>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012edc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012ede:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012ee0:	f7ff ff0e 	bl	8012d00 <check_fs>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012eea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012eee:	2b02      	cmp	r3, #2
 8012ef0:	d14b      	bne.n	8012f8a <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ef6:	e01f      	b.n	8012f38 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012efa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8012efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f00:	011b      	lsls	r3, r3, #4
 8012f02:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012f06:	4413      	add	r3, r2
 8012f08:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f0c:	3304      	adds	r3, #4
 8012f0e:	781b      	ldrb	r3, [r3, #0]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d006      	beq.n	8012f22 <find_volume+0x15a>
 8012f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f16:	3308      	adds	r3, #8
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7fd f817 	bl	800ff4c <ld_dword>
 8012f1e:	4602      	mov	r2, r0
 8012f20:	e000      	b.n	8012f24 <find_volume+0x15c>
 8012f22:	2200      	movs	r2, #0
 8012f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f26:	009b      	lsls	r3, r3, #2
 8012f28:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8012f2c:	440b      	add	r3, r1
 8012f2e:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f34:	3301      	adds	r3, #1
 8012f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f3a:	2b03      	cmp	r3, #3
 8012f3c:	d9dc      	bls.n	8012ef8 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012f3e:	2300      	movs	r3, #0
 8012f40:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 8012f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d002      	beq.n	8012f4e <find_volume+0x186>
 8012f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f4a:	3b01      	subs	r3, #1
 8012f4c:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f50:	009b      	lsls	r3, r3, #2
 8012f52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012f56:	4413      	add	r3, r2
 8012f58:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8012f5c:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d005      	beq.n	8012f70 <find_volume+0x1a8>
 8012f64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012f66:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012f68:	f7ff feca 	bl	8012d00 <check_fs>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	e000      	b.n	8012f72 <find_volume+0x1aa>
 8012f70:	2303      	movs	r3, #3
 8012f72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012f76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	d905      	bls.n	8012f8a <find_volume+0x1c2>
 8012f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f80:	3301      	adds	r3, #1
 8012f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f86:	2b03      	cmp	r3, #3
 8012f88:	d9e1      	bls.n	8012f4e <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f8e:	2b04      	cmp	r3, #4
 8012f90:	d101      	bne.n	8012f96 <find_volume+0x1ce>
 8012f92:	2301      	movs	r3, #1
 8012f94:	e29b      	b.n	80134ce <find_volume+0x706>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012f96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f9a:	2b01      	cmp	r3, #1
 8012f9c:	d901      	bls.n	8012fa2 <find_volume+0x1da>
 8012f9e:	230d      	movs	r3, #13
 8012fa0:	e295      	b.n	80134ce <find_volume+0x706>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8012fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fa6:	2b01      	cmp	r3, #1
 8012fa8:	f040 8101 	bne.w	80131ae <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8012fac:	230b      	movs	r3, #11
 8012fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8012fb0:	e002      	b.n	8012fb8 <find_volume+0x1f0>
 8012fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fb4:	3301      	adds	r3, #1
 8012fb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8012fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fba:	2b3f      	cmp	r3, #63	; 0x3f
 8012fbc:	d806      	bhi.n	8012fcc <find_volume+0x204>
 8012fbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fc2:	4413      	add	r3, r2
 8012fc4:	333c      	adds	r3, #60	; 0x3c
 8012fc6:	781b      	ldrb	r3, [r3, #0]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d0f2      	beq.n	8012fb2 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8012fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fce:	2b3f      	cmp	r3, #63	; 0x3f
 8012fd0:	d801      	bhi.n	8012fd6 <find_volume+0x20e>
 8012fd2:	230d      	movs	r3, #13
 8012fd4:	e27b      	b.n	80134ce <find_volume+0x706>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8012fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fd8:	333c      	adds	r3, #60	; 0x3c
 8012fda:	3368      	adds	r3, #104	; 0x68
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7fc ff9d 	bl	800ff1c <ld_word>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012fe8:	d001      	beq.n	8012fee <find_volume+0x226>
 8012fea:	230d      	movs	r3, #13
 8012fec:	e26f      	b.n	80134ce <find_volume+0x706>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8012fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ff0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8012ff4:	461a      	mov	r2, r3
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	4093      	lsls	r3, r2
 8012ffa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012ffc:	8992      	ldrh	r2, [r2, #12]
 8012ffe:	4293      	cmp	r3, r2
 8013000:	d001      	beq.n	8013006 <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 8013002:	230d      	movs	r3, #13
 8013004:	e263      	b.n	80134ce <find_volume+0x706>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8013006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013008:	333c      	adds	r3, #60	; 0x3c
 801300a:	3348      	adds	r3, #72	; 0x48
 801300c:	4618      	mov	r0, r3
 801300e:	f7fc ffc0 	bl	800ff92 <ld_qword>
 8013012:	460a      	mov	r2, r1
 8013014:	4601      	mov	r1, r0
 8013016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013018:	469b      	mov	fp, r3
 801301a:	f04f 0c00 	mov.w	ip, #0
 801301e:	eb1b 0301 	adds.w	r3, fp, r1
 8013022:	eb4c 0402 	adc.w	r4, ip, r2
 8013026:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 801302a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801302e:	2c01      	cmp	r4, #1
 8013030:	bf08      	it	eq
 8013032:	2b00      	cmpeq	r3, #0
 8013034:	d301      	bcc.n	801303a <find_volume+0x272>
 8013036:	230d      	movs	r3, #13
 8013038:	e249      	b.n	80134ce <find_volume+0x706>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 801303a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801303c:	333c      	adds	r3, #60	; 0x3c
 801303e:	3354      	adds	r3, #84	; 0x54
 8013040:	4618      	mov	r0, r3
 8013042:	f7fc ff83 	bl	800ff4c <ld_dword>
 8013046:	4602      	mov	r2, r0
 8013048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801304a:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 801304c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801304e:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8013052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013054:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8013056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013058:	789b      	ldrb	r3, [r3, #2]
 801305a:	2b01      	cmp	r3, #1
 801305c:	d001      	beq.n	8013062 <find_volume+0x29a>
 801305e:	230d      	movs	r3, #13
 8013060:	e235      	b.n	80134ce <find_volume+0x706>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8013062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013064:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8013068:	461a      	mov	r2, r3
 801306a:	2301      	movs	r3, #1
 801306c:	4093      	lsls	r3, r2
 801306e:	b29a      	uxth	r2, r3
 8013070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013072:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8013074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013076:	895b      	ldrh	r3, [r3, #10]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d101      	bne.n	8013080 <find_volume+0x2b8>
 801307c:	230d      	movs	r3, #13
 801307e:	e226      	b.n	80134ce <find_volume+0x706>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8013080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013082:	333c      	adds	r3, #60	; 0x3c
 8013084:	335c      	adds	r3, #92	; 0x5c
 8013086:	4618      	mov	r0, r3
 8013088:	f7fc ff60 	bl	800ff4c <ld_dword>
 801308c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 801308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013090:	4a03      	ldr	r2, [pc, #12]	; (80130a0 <find_volume+0x2d8>)
 8013092:	4293      	cmp	r3, r2
 8013094:	d906      	bls.n	80130a4 <find_volume+0x2dc>
 8013096:	230d      	movs	r3, #13
 8013098:	e219      	b.n	80134ce <find_volume+0x706>
 801309a:	bf00      	nop
 801309c:	240000f0 	.word	0x240000f0
 80130a0:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 80130a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a6:	1c9a      	adds	r2, r3, #2
 80130a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130aa:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80130ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80130b0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80130b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130b4:	333c      	adds	r3, #60	; 0x3c
 80130b6:	3358      	adds	r3, #88	; 0x58
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7fc ff47 	bl	800ff4c <ld_dword>
 80130be:	4602      	mov	r2, r0
 80130c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80130c2:	441a      	add	r2, r3
 80130c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130c6:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80130c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130ca:	333c      	adds	r3, #60	; 0x3c
 80130cc:	3350      	adds	r3, #80	; 0x50
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7fc ff3c 	bl	800ff4c <ld_dword>
 80130d4:	4602      	mov	r2, r0
 80130d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80130d8:	441a      	add	r2, r3
 80130da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130dc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80130de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130e2:	4619      	mov	r1, r3
 80130e4:	f04f 0200 	mov.w	r2, #0
 80130e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130ea:	895b      	ldrh	r3, [r3, #10]
 80130ec:	4618      	mov	r0, r3
 80130ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f0:	fb03 f300 	mul.w	r3, r3, r0
 80130f4:	469b      	mov	fp, r3
 80130f6:	f04f 0c00 	mov.w	ip, #0
 80130fa:	eb1b 0301 	adds.w	r3, fp, r1
 80130fe:	eb4c 0402 	adc.w	r4, ip, r2
 8013102:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8013106:	42a2      	cmp	r2, r4
 8013108:	bf08      	it	eq
 801310a:	4299      	cmpeq	r1, r3
 801310c:	d201      	bcs.n	8013112 <find_volume+0x34a>
 801310e:	230d      	movs	r3, #13
 8013110:	e1dd      	b.n	80134ce <find_volume+0x706>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8013112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013114:	333c      	adds	r3, #60	; 0x3c
 8013116:	3360      	adds	r3, #96	; 0x60
 8013118:	4618      	mov	r0, r3
 801311a:	f7fc ff17 	bl	800ff4c <ld_dword>
 801311e:	4602      	mov	r2, r0
 8013120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013122:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8013124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013128:	4619      	mov	r1, r3
 801312a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801312c:	f7fd fb88 	bl	8010840 <clust2sect>
 8013130:	4603      	mov	r3, r0
 8013132:	4619      	mov	r1, r3
 8013134:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013136:	f7fd fae5 	bl	8010704 <move_window>
 801313a:	4603      	mov	r3, r0
 801313c:	2b00      	cmp	r3, #0
 801313e:	d001      	beq.n	8013144 <find_volume+0x37c>
 8013140:	2301      	movs	r3, #1
 8013142:	e1c4      	b.n	80134ce <find_volume+0x706>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8013144:	2300      	movs	r3, #0
 8013146:	64bb      	str	r3, [r7, #72]	; 0x48
 8013148:	e015      	b.n	8013176 <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 801314a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801314c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801314e:	4413      	add	r3, r2
 8013150:	333c      	adds	r3, #60	; 0x3c
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	2b81      	cmp	r3, #129	; 0x81
 8013156:	d10b      	bne.n	8013170 <find_volume+0x3a8>
 8013158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801315a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 801315e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013160:	3314      	adds	r3, #20
 8013162:	4413      	add	r3, r2
 8013164:	4618      	mov	r0, r3
 8013166:	f7fc fef1 	bl	800ff4c <ld_dword>
 801316a:	4603      	mov	r3, r0
 801316c:	2b02      	cmp	r3, #2
 801316e:	d009      	beq.n	8013184 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8013170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013172:	3320      	adds	r3, #32
 8013174:	64bb      	str	r3, [r7, #72]	; 0x48
 8013176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013178:	899b      	ldrh	r3, [r3, #12]
 801317a:	461a      	mov	r2, r3
 801317c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801317e:	4293      	cmp	r3, r2
 8013180:	d3e3      	bcc.n	801314a <find_volume+0x382>
 8013182:	e000      	b.n	8013186 <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8013184:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8013186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013188:	899b      	ldrh	r3, [r3, #12]
 801318a:	461a      	mov	r2, r3
 801318c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801318e:	4293      	cmp	r3, r2
 8013190:	d101      	bne.n	8013196 <find_volume+0x3ce>
 8013192:	230d      	movs	r3, #13
 8013194:	e19b      	b.n	80134ce <find_volume+0x706>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013198:	f04f 32ff 	mov.w	r2, #4294967295
 801319c:	61da      	str	r2, [r3, #28]
 801319e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131a0:	69da      	ldr	r2, [r3, #28]
 80131a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131a4:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80131a6:	2304      	movs	r3, #4
 80131a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80131ac:	e177      	b.n	801349e <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80131ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131b0:	333c      	adds	r3, #60	; 0x3c
 80131b2:	330b      	adds	r3, #11
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7fc feb1 	bl	800ff1c <ld_word>
 80131ba:	4603      	mov	r3, r0
 80131bc:	461a      	mov	r2, r3
 80131be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131c0:	899b      	ldrh	r3, [r3, #12]
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d001      	beq.n	80131ca <find_volume+0x402>
 80131c6:	230d      	movs	r3, #13
 80131c8:	e181      	b.n	80134ce <find_volume+0x706>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80131ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131cc:	333c      	adds	r3, #60	; 0x3c
 80131ce:	3316      	adds	r3, #22
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fc fea3 	bl	800ff1c <ld_word>
 80131d6:	4603      	mov	r3, r0
 80131d8:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80131da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d106      	bne.n	80131ee <find_volume+0x426>
 80131e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131e2:	333c      	adds	r3, #60	; 0x3c
 80131e4:	3324      	adds	r3, #36	; 0x24
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7fc feb0 	bl	800ff4c <ld_dword>
 80131ec:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 80131ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131f2:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80131f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131f6:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80131fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131fc:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80131fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013200:	789b      	ldrb	r3, [r3, #2]
 8013202:	2b01      	cmp	r3, #1
 8013204:	d005      	beq.n	8013212 <find_volume+0x44a>
 8013206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013208:	789b      	ldrb	r3, [r3, #2]
 801320a:	2b02      	cmp	r3, #2
 801320c:	d001      	beq.n	8013212 <find_volume+0x44a>
 801320e:	230d      	movs	r3, #13
 8013210:	e15d      	b.n	80134ce <find_volume+0x706>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013214:	789b      	ldrb	r3, [r3, #2]
 8013216:	461a      	mov	r2, r3
 8013218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801321a:	fb02 f303 	mul.w	r3, r2, r3
 801321e:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013222:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8013226:	b29a      	uxth	r2, r3
 8013228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801322a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801322c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801322e:	895b      	ldrh	r3, [r3, #10]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d008      	beq.n	8013246 <find_volume+0x47e>
 8013234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013236:	895b      	ldrh	r3, [r3, #10]
 8013238:	461a      	mov	r2, r3
 801323a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801323c:	895b      	ldrh	r3, [r3, #10]
 801323e:	3b01      	subs	r3, #1
 8013240:	4013      	ands	r3, r2
 8013242:	2b00      	cmp	r3, #0
 8013244:	d001      	beq.n	801324a <find_volume+0x482>
 8013246:	230d      	movs	r3, #13
 8013248:	e141      	b.n	80134ce <find_volume+0x706>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801324a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801324c:	333c      	adds	r3, #60	; 0x3c
 801324e:	3311      	adds	r3, #17
 8013250:	4618      	mov	r0, r3
 8013252:	f7fc fe63 	bl	800ff1c <ld_word>
 8013256:	4603      	mov	r3, r0
 8013258:	461a      	mov	r2, r3
 801325a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801325c:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801325e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013260:	891b      	ldrh	r3, [r3, #8]
 8013262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013264:	8992      	ldrh	r2, [r2, #12]
 8013266:	0952      	lsrs	r2, r2, #5
 8013268:	b292      	uxth	r2, r2
 801326a:	fbb3 f1f2 	udiv	r1, r3, r2
 801326e:	fb02 f201 	mul.w	r2, r2, r1
 8013272:	1a9b      	subs	r3, r3, r2
 8013274:	b29b      	uxth	r3, r3
 8013276:	2b00      	cmp	r3, #0
 8013278:	d001      	beq.n	801327e <find_volume+0x4b6>
 801327a:	230d      	movs	r3, #13
 801327c:	e127      	b.n	80134ce <find_volume+0x706>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801327e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013280:	333c      	adds	r3, #60	; 0x3c
 8013282:	3313      	adds	r3, #19
 8013284:	4618      	mov	r0, r3
 8013286:	f7fc fe49 	bl	800ff1c <ld_word>
 801328a:	4603      	mov	r3, r0
 801328c:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801328e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013290:	2b00      	cmp	r3, #0
 8013292:	d106      	bne.n	80132a2 <find_volume+0x4da>
 8013294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013296:	333c      	adds	r3, #60	; 0x3c
 8013298:	3320      	adds	r3, #32
 801329a:	4618      	mov	r0, r3
 801329c:	f7fc fe56 	bl	800ff4c <ld_dword>
 80132a0:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80132a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132a4:	333c      	adds	r3, #60	; 0x3c
 80132a6:	330e      	adds	r3, #14
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7fc fe37 	bl	800ff1c <ld_word>
 80132ae:	4603      	mov	r3, r0
 80132b0:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80132b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d101      	bne.n	80132bc <find_volume+0x4f4>
 80132b8:	230d      	movs	r3, #13
 80132ba:	e108      	b.n	80134ce <find_volume+0x706>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80132bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80132be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132c0:	4413      	add	r3, r2
 80132c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80132c4:	8911      	ldrh	r1, [r2, #8]
 80132c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80132c8:	8992      	ldrh	r2, [r2, #12]
 80132ca:	0952      	lsrs	r2, r2, #5
 80132cc:	b292      	uxth	r2, r2
 80132ce:	fbb1 f2f2 	udiv	r2, r1, r2
 80132d2:	b292      	uxth	r2, r2
 80132d4:	4413      	add	r3, r2
 80132d6:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80132d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80132da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132dc:	429a      	cmp	r2, r3
 80132de:	d201      	bcs.n	80132e4 <find_volume+0x51c>
 80132e0:	230d      	movs	r3, #13
 80132e2:	e0f4      	b.n	80134ce <find_volume+0x706>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80132e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80132e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e8:	1ad3      	subs	r3, r2, r3
 80132ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80132ec:	8952      	ldrh	r2, [r2, #10]
 80132ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80132f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80132f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d101      	bne.n	80132fe <find_volume+0x536>
 80132fa:	230d      	movs	r3, #13
 80132fc:	e0e7      	b.n	80134ce <find_volume+0x706>
		fmt = FS_FAT32;
 80132fe:	2303      	movs	r3, #3
 8013300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013306:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801330a:	4293      	cmp	r3, r2
 801330c:	d802      	bhi.n	8013314 <find_volume+0x54c>
 801330e:	2302      	movs	r3, #2
 8013310:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013316:	f640 72f5 	movw	r2, #4085	; 0xff5
 801331a:	4293      	cmp	r3, r2
 801331c:	d802      	bhi.n	8013324 <find_volume+0x55c>
 801331e:	2301      	movs	r3, #1
 8013320:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013326:	1c9a      	adds	r2, r3, #2
 8013328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801332a:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 801332c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801332e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013330:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013332:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013336:	441a      	add	r2, r3
 8013338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801333a:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 801333c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013340:	441a      	add	r2, r3
 8013342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013344:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8013346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801334a:	2b03      	cmp	r3, #3
 801334c:	d11e      	bne.n	801338c <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801334e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013350:	333c      	adds	r3, #60	; 0x3c
 8013352:	332a      	adds	r3, #42	; 0x2a
 8013354:	4618      	mov	r0, r3
 8013356:	f7fc fde1 	bl	800ff1c <ld_word>
 801335a:	4603      	mov	r3, r0
 801335c:	2b00      	cmp	r3, #0
 801335e:	d001      	beq.n	8013364 <find_volume+0x59c>
 8013360:	230d      	movs	r3, #13
 8013362:	e0b4      	b.n	80134ce <find_volume+0x706>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013366:	891b      	ldrh	r3, [r3, #8]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d001      	beq.n	8013370 <find_volume+0x5a8>
 801336c:	230d      	movs	r3, #13
 801336e:	e0ae      	b.n	80134ce <find_volume+0x706>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013372:	333c      	adds	r3, #60	; 0x3c
 8013374:	332c      	adds	r3, #44	; 0x2c
 8013376:	4618      	mov	r0, r3
 8013378:	f7fc fde8 	bl	800ff4c <ld_dword>
 801337c:	4602      	mov	r2, r0
 801337e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013380:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013384:	6a1b      	ldr	r3, [r3, #32]
 8013386:	009b      	lsls	r3, r3, #2
 8013388:	64fb      	str	r3, [r7, #76]	; 0x4c
 801338a:	e01f      	b.n	80133cc <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801338c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801338e:	891b      	ldrh	r3, [r3, #8]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d101      	bne.n	8013398 <find_volume+0x5d0>
 8013394:	230d      	movs	r3, #13
 8013396:	e09a      	b.n	80134ce <find_volume+0x706>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801339c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801339e:	441a      	add	r2, r3
 80133a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133a2:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80133a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133a8:	2b02      	cmp	r3, #2
 80133aa:	d103      	bne.n	80133b4 <find_volume+0x5ec>
 80133ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133ae:	6a1b      	ldr	r3, [r3, #32]
 80133b0:	005b      	lsls	r3, r3, #1
 80133b2:	e00a      	b.n	80133ca <find_volume+0x602>
 80133b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133b6:	6a1a      	ldr	r2, [r3, #32]
 80133b8:	4613      	mov	r3, r2
 80133ba:	005b      	lsls	r3, r3, #1
 80133bc:	4413      	add	r3, r2
 80133be:	085a      	lsrs	r2, r3, #1
 80133c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133c2:	6a1b      	ldr	r3, [r3, #32]
 80133c4:	f003 0301 	and.w	r3, r3, #1
 80133c8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80133ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80133cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80133d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133d2:	899b      	ldrh	r3, [r3, #12]
 80133d4:	4619      	mov	r1, r3
 80133d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133d8:	440b      	add	r3, r1
 80133da:	3b01      	subs	r3, #1
 80133dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80133de:	8989      	ldrh	r1, [r1, #12]
 80133e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80133e4:	429a      	cmp	r2, r3
 80133e6:	d201      	bcs.n	80133ec <find_volume+0x624>
 80133e8:	230d      	movs	r3, #13
 80133ea:	e070      	b.n	80134ce <find_volume+0x706>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80133ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133ee:	f04f 32ff 	mov.w	r2, #4294967295
 80133f2:	61da      	str	r2, [r3, #28]
 80133f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133f6:	69da      	ldr	r2, [r3, #28]
 80133f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133fa:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 80133fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133fe:	2280      	movs	r2, #128	; 0x80
 8013400:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013406:	2b03      	cmp	r3, #3
 8013408:	d149      	bne.n	801349e <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801340a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801340c:	333c      	adds	r3, #60	; 0x3c
 801340e:	3330      	adds	r3, #48	; 0x30
 8013410:	4618      	mov	r0, r3
 8013412:	f7fc fd83 	bl	800ff1c <ld_word>
 8013416:	4603      	mov	r3, r0
 8013418:	2b01      	cmp	r3, #1
 801341a:	d140      	bne.n	801349e <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 801341c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801341e:	3301      	adds	r3, #1
 8013420:	4619      	mov	r1, r3
 8013422:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013424:	f7fd f96e 	bl	8010704 <move_window>
 8013428:	4603      	mov	r3, r0
 801342a:	2b00      	cmp	r3, #0
 801342c:	d137      	bne.n	801349e <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 801342e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013430:	2200      	movs	r2, #0
 8013432:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013436:	333c      	adds	r3, #60	; 0x3c
 8013438:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801343c:	4618      	mov	r0, r3
 801343e:	f7fc fd6d 	bl	800ff1c <ld_word>
 8013442:	4603      	mov	r3, r0
 8013444:	461a      	mov	r2, r3
 8013446:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801344a:	429a      	cmp	r2, r3
 801344c:	d127      	bne.n	801349e <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801344e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013450:	333c      	adds	r3, #60	; 0x3c
 8013452:	4618      	mov	r0, r3
 8013454:	f7fc fd7a 	bl	800ff4c <ld_dword>
 8013458:	4602      	mov	r2, r0
 801345a:	4b1f      	ldr	r3, [pc, #124]	; (80134d8 <find_volume+0x710>)
 801345c:	429a      	cmp	r2, r3
 801345e:	d11e      	bne.n	801349e <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013462:	333c      	adds	r3, #60	; 0x3c
 8013464:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013468:	4618      	mov	r0, r3
 801346a:	f7fc fd6f 	bl	800ff4c <ld_dword>
 801346e:	4602      	mov	r2, r0
 8013470:	4b1a      	ldr	r3, [pc, #104]	; (80134dc <find_volume+0x714>)
 8013472:	429a      	cmp	r2, r3
 8013474:	d113      	bne.n	801349e <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013478:	333c      	adds	r3, #60	; 0x3c
 801347a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801347e:	4618      	mov	r0, r3
 8013480:	f7fc fd64 	bl	800ff4c <ld_dword>
 8013484:	4602      	mov	r2, r0
 8013486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013488:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801348a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801348c:	333c      	adds	r3, #60	; 0x3c
 801348e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013492:	4618      	mov	r0, r3
 8013494:	f7fc fd5a 	bl	800ff4c <ld_dword>
 8013498:	4602      	mov	r2, r0
 801349a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801349c:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801349e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134a0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80134a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80134a6:	4b0e      	ldr	r3, [pc, #56]	; (80134e0 <find_volume+0x718>)
 80134a8:	881b      	ldrh	r3, [r3, #0]
 80134aa:	3301      	adds	r3, #1
 80134ac:	b29a      	uxth	r2, r3
 80134ae:	4b0c      	ldr	r3, [pc, #48]	; (80134e0 <find_volume+0x718>)
 80134b0:	801a      	strh	r2, [r3, #0]
 80134b2:	4b0b      	ldr	r3, [pc, #44]	; (80134e0 <find_volume+0x718>)
 80134b4:	881a      	ldrh	r2, [r3, #0]
 80134b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134b8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80134ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134bc:	4a09      	ldr	r2, [pc, #36]	; (80134e4 <find_volume+0x71c>)
 80134be:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 80134c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134c2:	4a09      	ldr	r2, [pc, #36]	; (80134e8 <find_volume+0x720>)
 80134c4:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80134c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80134c8:	f7fd f8b4 	bl	8010634 <clear_lock>
#endif
	return FR_OK;
 80134cc:	2300      	movs	r3, #0
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3760      	adds	r7, #96	; 0x60
 80134d2:	46bd      	mov	sp, r7
 80134d4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80134d8:	41615252 	.word	0x41615252
 80134dc:	61417272 	.word	0x61417272
 80134e0:	240000f4 	.word	0x240000f4
 80134e4:	24000378 	.word	0x24000378
 80134e8:	24000118 	.word	0x24000118

080134ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b084      	sub	sp, #16
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
 80134f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80134f6:	2309      	movs	r3, #9
 80134f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d01c      	beq.n	801353a <validate+0x4e>
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d018      	beq.n	801353a <validate+0x4e>
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	781b      	ldrb	r3, [r3, #0]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d013      	beq.n	801353a <validate+0x4e>
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	889a      	ldrh	r2, [r3, #4]
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	88db      	ldrh	r3, [r3, #6]
 801351c:	429a      	cmp	r2, r3
 801351e:	d10c      	bne.n	801353a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	785b      	ldrb	r3, [r3, #1]
 8013526:	4618      	mov	r0, r3
 8013528:	f7fc fc5a 	bl	800fde0 <disk_status>
 801352c:	4603      	mov	r3, r0
 801352e:	f003 0301 	and.w	r3, r3, #1
 8013532:	2b00      	cmp	r3, #0
 8013534:	d101      	bne.n	801353a <validate+0x4e>
			res = FR_OK;
 8013536:	2300      	movs	r3, #0
 8013538:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801353a:	7bfb      	ldrb	r3, [r7, #15]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d102      	bne.n	8013546 <validate+0x5a>
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	e000      	b.n	8013548 <validate+0x5c>
 8013546:	2300      	movs	r3, #0
 8013548:	683a      	ldr	r2, [r7, #0]
 801354a:	6013      	str	r3, [r2, #0]
	return res;
 801354c:	7bfb      	ldrb	r3, [r7, #15]
}
 801354e:	4618      	mov	r0, r3
 8013550:	3710      	adds	r7, #16
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
	...

08013558 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b088      	sub	sp, #32
 801355c:	af00      	add	r7, sp, #0
 801355e:	60f8      	str	r0, [r7, #12]
 8013560:	60b9      	str	r1, [r7, #8]
 8013562:	4613      	mov	r3, r2
 8013564:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801356a:	f107 0310 	add.w	r3, r7, #16
 801356e:	4618      	mov	r0, r3
 8013570:	f7ff fb81 	bl	8012c76 <get_ldnumber>
 8013574:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013576:	69fb      	ldr	r3, [r7, #28]
 8013578:	2b00      	cmp	r3, #0
 801357a:	da01      	bge.n	8013580 <f_mount+0x28>
 801357c:	230b      	movs	r3, #11
 801357e:	e02b      	b.n	80135d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013580:	4a17      	ldr	r2, [pc, #92]	; (80135e0 <f_mount+0x88>)
 8013582:	69fb      	ldr	r3, [r7, #28]
 8013584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013588:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801358a:	69bb      	ldr	r3, [r7, #24]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d005      	beq.n	801359c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013590:	69b8      	ldr	r0, [r7, #24]
 8013592:	f7fd f84f 	bl	8010634 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013596:	69bb      	ldr	r3, [r7, #24]
 8013598:	2200      	movs	r2, #0
 801359a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d002      	beq.n	80135a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	2200      	movs	r2, #0
 80135a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80135a8:	68fa      	ldr	r2, [r7, #12]
 80135aa:	490d      	ldr	r1, [pc, #52]	; (80135e0 <f_mount+0x88>)
 80135ac:	69fb      	ldr	r3, [r7, #28]
 80135ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d002      	beq.n	80135be <f_mount+0x66>
 80135b8:	79fb      	ldrb	r3, [r7, #7]
 80135ba:	2b01      	cmp	r3, #1
 80135bc:	d001      	beq.n	80135c2 <f_mount+0x6a>
 80135be:	2300      	movs	r3, #0
 80135c0:	e00a      	b.n	80135d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80135c2:	f107 010c 	add.w	r1, r7, #12
 80135c6:	f107 0308 	add.w	r3, r7, #8
 80135ca:	2200      	movs	r2, #0
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7ff fbfb 	bl	8012dc8 <find_volume>
 80135d2:	4603      	mov	r3, r0
 80135d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80135d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80135d8:	4618      	mov	r0, r3
 80135da:	3720      	adds	r7, #32
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}
 80135e0:	240000f0 	.word	0x240000f0

080135e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80135e4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80135e8:	b0a2      	sub	sp, #136	; 0x88
 80135ea:	af00      	add	r7, sp, #0
 80135ec:	60f8      	str	r0, [r7, #12]
 80135ee:	60b9      	str	r1, [r7, #8]
 80135f0:	4613      	mov	r3, r2
 80135f2:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d101      	bne.n	80135fe <f_open+0x1a>
 80135fa:	2309      	movs	r3, #9
 80135fc:	e2a8      	b.n	8013b50 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80135fe:	79fb      	ldrb	r3, [r7, #7]
 8013600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013604:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013606:	79fa      	ldrb	r2, [r7, #7]
 8013608:	f107 0114 	add.w	r1, r7, #20
 801360c:	f107 0308 	add.w	r3, r7, #8
 8013610:	4618      	mov	r0, r3
 8013612:	f7ff fbd9 	bl	8012dc8 <find_volume>
 8013616:	4603      	mov	r3, r0
 8013618:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 801361c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013620:	2b00      	cmp	r3, #0
 8013622:	f040 828c 	bne.w	8013b3e <f_open+0x55a>
		dj.obj.fs = fs;
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801362a:	68ba      	ldr	r2, [r7, #8]
 801362c:	f107 0318 	add.w	r3, r7, #24
 8013630:	4611      	mov	r1, r2
 8013632:	4618      	mov	r0, r3
 8013634:	f7ff fa72 	bl	8012b1c <follow_path>
 8013638:	4603      	mov	r3, r0
 801363a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801363e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013642:	2b00      	cmp	r3, #0
 8013644:	d11a      	bne.n	801367c <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013646:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801364a:	b25b      	sxtb	r3, r3
 801364c:	2b00      	cmp	r3, #0
 801364e:	da03      	bge.n	8013658 <f_open+0x74>
				res = FR_INVALID_NAME;
 8013650:	2306      	movs	r3, #6
 8013652:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8013656:	e011      	b.n	801367c <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013658:	79fb      	ldrb	r3, [r7, #7]
 801365a:	f023 0301 	bic.w	r3, r3, #1
 801365e:	2b00      	cmp	r3, #0
 8013660:	bf14      	ite	ne
 8013662:	2301      	movne	r3, #1
 8013664:	2300      	moveq	r3, #0
 8013666:	b2db      	uxtb	r3, r3
 8013668:	461a      	mov	r2, r3
 801366a:	f107 0318 	add.w	r3, r7, #24
 801366e:	4611      	mov	r1, r2
 8013670:	4618      	mov	r0, r3
 8013672:	f7fc fe97 	bl	80103a4 <chk_lock>
 8013676:	4603      	mov	r3, r0
 8013678:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801367c:	79fb      	ldrb	r3, [r7, #7]
 801367e:	f003 031c 	and.w	r3, r3, #28
 8013682:	2b00      	cmp	r3, #0
 8013684:	f000 8109 	beq.w	801389a <f_open+0x2b6>
			if (res != FR_OK) {					/* No file, create new */
 8013688:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801368c:	2b00      	cmp	r3, #0
 801368e:	d017      	beq.n	80136c0 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013690:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013694:	2b04      	cmp	r3, #4
 8013696:	d10e      	bne.n	80136b6 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013698:	f7fc fee0 	bl	801045c <enq_lock>
 801369c:	4603      	mov	r3, r0
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d006      	beq.n	80136b0 <f_open+0xcc>
 80136a2:	f107 0318 	add.w	r3, r7, #24
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7fe fed0 	bl	801244c <dir_register>
 80136ac:	4603      	mov	r3, r0
 80136ae:	e000      	b.n	80136b2 <f_open+0xce>
 80136b0:	2312      	movs	r3, #18
 80136b2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80136b6:	79fb      	ldrb	r3, [r7, #7]
 80136b8:	f043 0308 	orr.w	r3, r3, #8
 80136bc:	71fb      	strb	r3, [r7, #7]
 80136be:	e010      	b.n	80136e2 <f_open+0xfe>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80136c0:	7fbb      	ldrb	r3, [r7, #30]
 80136c2:	f003 0311 	and.w	r3, r3, #17
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d003      	beq.n	80136d2 <f_open+0xee>
					res = FR_DENIED;
 80136ca:	2307      	movs	r3, #7
 80136cc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80136d0:	e007      	b.n	80136e2 <f_open+0xfe>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80136d2:	79fb      	ldrb	r3, [r7, #7]
 80136d4:	f003 0304 	and.w	r3, r3, #4
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d002      	beq.n	80136e2 <f_open+0xfe>
 80136dc:	2308      	movs	r3, #8
 80136de:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80136e2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	f040 80f1 	bne.w	80138ce <f_open+0x2ea>
 80136ec:	79fb      	ldrb	r3, [r7, #7]
 80136ee:	f003 0308 	and.w	r3, r3, #8
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	f000 80eb 	beq.w	80138ce <f_open+0x2ea>
				dw = GET_FATTIME();
 80136f8:	f7fc f9ec 	bl	800fad4 <get_fattime>
 80136fc:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	2b04      	cmp	r3, #4
 8013704:	f040 8082 	bne.w	801380c <f_open+0x228>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8013708:	697a      	ldr	r2, [r7, #20]
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	695b      	ldr	r3, [r3, #20]
 8013712:	3334      	adds	r3, #52	; 0x34
 8013714:	4618      	mov	r0, r3
 8013716:	f7fc fc19 	bl	800ff4c <ld_dword>
 801371a:	4602      	mov	r2, r0
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	695b      	ldr	r3, [r3, #20]
 8013724:	3338      	adds	r3, #56	; 0x38
 8013726:	4618      	mov	r0, r3
 8013728:	f7fc fc33 	bl	800ff92 <ld_qword>
 801372c:	4603      	mov	r3, r0
 801372e:	460c      	mov	r4, r1
 8013730:	68fa      	ldr	r2, [r7, #12]
 8013732:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	695b      	ldr	r3, [r3, #20]
 801373a:	3321      	adds	r3, #33	; 0x21
 801373c:	781b      	ldrb	r3, [r3, #0]
 801373e:	f003 0302 	and.w	r3, r3, #2
 8013742:	b2da      	uxtb	r2, r3
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	2200      	movs	r2, #0
 801374c:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	695b      	ldr	r3, [r3, #20]
 8013752:	3308      	adds	r3, #8
 8013754:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013756:	4618      	mov	r0, r3
 8013758:	f7fc fcf3 	bl	8010142 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	695b      	ldr	r3, [r3, #20]
 8013760:	3314      	adds	r3, #20
 8013762:	2200      	movs	r2, #0
 8013764:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	695b      	ldr	r3, [r3, #20]
 801376a:	330c      	adds	r3, #12
 801376c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801376e:	4618      	mov	r0, r3
 8013770:	f7fc fce7 	bl	8010142 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	695b      	ldr	r3, [r3, #20]
 8013778:	3315      	adds	r3, #21
 801377a:	2200      	movs	r2, #0
 801377c:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 801377e:	697b      	ldr	r3, [r7, #20]
 8013780:	695b      	ldr	r3, [r3, #20]
 8013782:	3304      	adds	r3, #4
 8013784:	2220      	movs	r2, #32
 8013786:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8013788:	697b      	ldr	r3, [r7, #20]
 801378a:	695b      	ldr	r3, [r3, #20]
 801378c:	3334      	adds	r3, #52	; 0x34
 801378e:	2100      	movs	r1, #0
 8013790:	4618      	mov	r0, r3
 8013792:	f7fc fcd6 	bl	8010142 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	695b      	ldr	r3, [r3, #20]
 801379a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801379e:	f04f 0200 	mov.w	r2, #0
 80137a2:	f04f 0300 	mov.w	r3, #0
 80137a6:	4608      	mov	r0, r1
 80137a8:	f7fc fcf7 	bl	801019a <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	695b      	ldr	r3, [r3, #20]
 80137b0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80137b4:	f04f 0200 	mov.w	r2, #0
 80137b8:	f04f 0300 	mov.w	r3, #0
 80137bc:	4608      	mov	r0, r1
 80137be:	f7fc fcec 	bl	801019a <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	695b      	ldr	r3, [r3, #20]
 80137c6:	3321      	adds	r3, #33	; 0x21
 80137c8:	2201      	movs	r2, #1
 80137ca:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 80137cc:	f107 0318 	add.w	r3, r7, #24
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7fe fb88 	bl	8011ee6 <store_xdir>
 80137d6:	4603      	mov	r3, r0
 80137d8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 80137dc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d174      	bne.n	80138ce <f_open+0x2ea>
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	689b      	ldr	r3, [r3, #8]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d070      	beq.n	80138ce <f_open+0x2ea>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 80137ec:	68f8      	ldr	r0, [r7, #12]
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	689b      	ldr	r3, [r3, #8]
 80137f2:	2200      	movs	r2, #0
 80137f4:	4619      	mov	r1, r3
 80137f6:	f7fd fc15 	bl	8011024 <remove_chain>
 80137fa:	4603      	mov	r3, r0
 80137fc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	689a      	ldr	r2, [r3, #8]
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	3a01      	subs	r2, #1
 8013808:	619a      	str	r2, [r3, #24]
 801380a:	e060      	b.n	80138ce <f_open+0x2ea>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801380c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801380e:	330e      	adds	r3, #14
 8013810:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013812:	4618      	mov	r0, r3
 8013814:	f7fc fc95 	bl	8010142 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801381a:	3316      	adds	r3, #22
 801381c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801381e:	4618      	mov	r0, r3
 8013820:	f7fc fc8f 	bl	8010142 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013826:	330b      	adds	r3, #11
 8013828:	2220      	movs	r2, #32
 801382a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013830:	4611      	mov	r1, r2
 8013832:	4618      	mov	r0, r3
 8013834:	f7fd ffc8 	bl	80117c8 <ld_clust>
 8013838:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801383e:	2200      	movs	r2, #0
 8013840:	4618      	mov	r0, r3
 8013842:	f7fd ffe0 	bl	8011806 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013848:	331c      	adds	r3, #28
 801384a:	2100      	movs	r1, #0
 801384c:	4618      	mov	r0, r3
 801384e:	f7fc fc78 	bl	8010142 <st_dword>
					fs->wflag = 1;
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	2201      	movs	r2, #1
 8013856:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801385a:	2b00      	cmp	r3, #0
 801385c:	d037      	beq.n	80138ce <f_open+0x2ea>
						dw = fs->winsect;
 801385e:	697b      	ldr	r3, [r7, #20]
 8013860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013862:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 8013864:	f107 0318 	add.w	r3, r7, #24
 8013868:	2200      	movs	r2, #0
 801386a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801386c:	4618      	mov	r0, r3
 801386e:	f7fd fbd9 	bl	8011024 <remove_chain>
 8013872:	4603      	mov	r3, r0
 8013874:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 8013878:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801387c:	2b00      	cmp	r3, #0
 801387e:	d126      	bne.n	80138ce <f_open+0x2ea>
							res = move_window(fs, dw);
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013884:	4618      	mov	r0, r3
 8013886:	f7fc ff3d 	bl	8010704 <move_window>
 801388a:	4603      	mov	r3, r0
 801388c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013894:	3a01      	subs	r2, #1
 8013896:	619a      	str	r2, [r3, #24]
 8013898:	e019      	b.n	80138ce <f_open+0x2ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801389a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d115      	bne.n	80138ce <f_open+0x2ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80138a2:	7fbb      	ldrb	r3, [r7, #30]
 80138a4:	f003 0310 	and.w	r3, r3, #16
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d003      	beq.n	80138b4 <f_open+0x2d0>
					res = FR_NO_FILE;
 80138ac:	2304      	movs	r3, #4
 80138ae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80138b2:	e00c      	b.n	80138ce <f_open+0x2ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80138b4:	79fb      	ldrb	r3, [r7, #7]
 80138b6:	f003 0302 	and.w	r3, r3, #2
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d007      	beq.n	80138ce <f_open+0x2ea>
 80138be:	7fbb      	ldrb	r3, [r7, #30]
 80138c0:	f003 0301 	and.w	r3, r3, #1
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d002      	beq.n	80138ce <f_open+0x2ea>
						res = FR_DENIED;
 80138c8:	2307      	movs	r3, #7
 80138ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 80138ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d128      	bne.n	8013928 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80138d6:	79fb      	ldrb	r3, [r7, #7]
 80138d8:	f003 0308 	and.w	r3, r3, #8
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d003      	beq.n	80138e8 <f_open+0x304>
				mode |= FA_MODIFIED;
 80138e0:	79fb      	ldrb	r3, [r7, #7]
 80138e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138e6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 80138f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80138f6:	79fb      	ldrb	r3, [r7, #7]
 80138f8:	f023 0301 	bic.w	r3, r3, #1
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	bf14      	ite	ne
 8013900:	2301      	movne	r3, #1
 8013902:	2300      	moveq	r3, #0
 8013904:	b2db      	uxtb	r3, r3
 8013906:	461a      	mov	r2, r3
 8013908:	f107 0318 	add.w	r3, r7, #24
 801390c:	4611      	mov	r1, r2
 801390e:	4618      	mov	r0, r3
 8013910:	f7fc fdc6 	bl	80104a0 <inc_lock>
 8013914:	4602      	mov	r2, r0
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801391e:	2b00      	cmp	r3, #0
 8013920:	d102      	bne.n	8013928 <f_open+0x344>
 8013922:	2302      	movs	r3, #2
 8013924:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013928:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801392c:	2b00      	cmp	r3, #0
 801392e:	f040 8106 	bne.w	8013b3e <f_open+0x55a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	781b      	ldrb	r3, [r3, #0]
 8013936:	2b04      	cmp	r3, #4
 8013938:	d12b      	bne.n	8013992 <f_open+0x3ae>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 801393a:	6a3a      	ldr	r2, [r7, #32]
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8013940:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8013944:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8013948:	7ffa      	ldrb	r2, [r7, #31]
 801394a:	431a      	orrs	r2, r3
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8013950:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	695b      	ldr	r3, [r3, #20]
 801395a:	3334      	adds	r3, #52	; 0x34
 801395c:	4618      	mov	r0, r3
 801395e:	f7fc faf5 	bl	800ff4c <ld_dword>
 8013962:	4602      	mov	r2, r0
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8013968:	697b      	ldr	r3, [r7, #20]
 801396a:	695b      	ldr	r3, [r3, #20]
 801396c:	3338      	adds	r3, #56	; 0x38
 801396e:	4618      	mov	r0, r3
 8013970:	f7fc fb0f 	bl	800ff92 <ld_qword>
 8013974:	4603      	mov	r3, r0
 8013976:	460c      	mov	r4, r1
 8013978:	68fa      	ldr	r2, [r7, #12]
 801397a:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	695b      	ldr	r3, [r3, #20]
 8013982:	3321      	adds	r3, #33	; 0x21
 8013984:	781b      	ldrb	r3, [r3, #0]
 8013986:	f003 0302 	and.w	r3, r3, #2
 801398a:	b2da      	uxtb	r2, r3
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	71da      	strb	r2, [r3, #7]
 8013990:	e013      	b.n	80139ba <f_open+0x3d6>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013996:	4611      	mov	r1, r2
 8013998:	4618      	mov	r0, r3
 801399a:	f7fd ff15 	bl	80117c8 <ld_clust>
 801399e:	4602      	mov	r2, r0
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80139a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139a6:	331c      	adds	r3, #28
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7fc facf 	bl	800ff4c <ld_dword>
 80139ae:	4603      	mov	r3, r0
 80139b0:	f04f 0400 	mov.w	r4, #0
 80139b4:	68fa      	ldr	r2, [r7, #12]
 80139b6:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	2200      	movs	r2, #0
 80139be:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80139c0:	697a      	ldr	r2, [r7, #20]
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	88da      	ldrh	r2, [r3, #6]
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	79fa      	ldrb	r2, [r7, #7]
 80139d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	2200      	movs	r2, #0
 80139da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2200      	movs	r2, #0
 80139e2:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 80139e4:	68fa      	ldr	r2, [r7, #12]
 80139e6:	f04f 0300 	mov.w	r3, #0
 80139ea:	f04f 0400 	mov.w	r4, #0
 80139ee:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	3354      	adds	r3, #84	; 0x54
 80139f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80139fa:	2100      	movs	r1, #0
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7fc fc74 	bl	80102ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013a02:	79fb      	ldrb	r3, [r7, #7]
 8013a04:	f003 0320 	and.w	r3, r3, #32
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	f000 8098 	beq.w	8013b3e <f_open+0x55a>
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013a14:	4323      	orrs	r3, r4
 8013a16:	f000 8092 	beq.w	8013b3e <f_open+0x55a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013a20:	68fa      	ldr	r2, [r7, #12]
 8013a22:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	895b      	ldrh	r3, [r3, #10]
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	899b      	ldrh	r3, [r3, #12]
 8013a30:	fb03 f302 	mul.w	r3, r3, r2
 8013a34:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	689b      	ldr	r3, [r3, #8]
 8013a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013a44:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8013a48:	e024      	b.n	8013a94 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8013a50:	4618      	mov	r0, r3
 8013a52:	f7fc ff15 	bl	8010880 <get_fat>
 8013a56:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 8013a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013a5e:	2b01      	cmp	r3, #1
 8013a60:	d802      	bhi.n	8013a68 <f_open+0x484>
 8013a62:	2302      	movs	r3, #2
 8013a64:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013a68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a70:	d102      	bne.n	8013a78 <f_open+0x494>
 8013a72:	2301      	movs	r3, #1
 8013a74:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a7a:	469b      	mov	fp, r3
 8013a7c:	f04f 0c00 	mov.w	ip, #0
 8013a80:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8013a84:	460b      	mov	r3, r1
 8013a86:	4614      	mov	r4, r2
 8013a88:	ebb3 030b 	subs.w	r3, r3, fp
 8013a8c:	eb64 040c 	sbc.w	r4, r4, ip
 8013a90:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8013a94:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d109      	bne.n	8013ab0 <f_open+0x4cc>
 8013a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a9e:	4619      	mov	r1, r3
 8013aa0:	f04f 0200 	mov.w	r2, #0
 8013aa4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8013aa8:	42a2      	cmp	r2, r4
 8013aaa:	bf08      	it	eq
 8013aac:	4299      	cmpeq	r1, r3
 8013aae:	d3cc      	bcc.n	8013a4a <f_open+0x466>
				}
				fp->clust = clst;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013ab6:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013ab8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d13e      	bne.n	8013b3e <f_open+0x55a>
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	899b      	ldrh	r3, [r3, #12]
 8013ac4:	b29b      	uxth	r3, r3
 8013ac6:	f04f 0400 	mov.w	r4, #0
 8013aca:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8013ace:	461a      	mov	r2, r3
 8013ad0:	4623      	mov	r3, r4
 8013ad2:	f7ec fc01 	bl	80002d8 <__aeabi_uldivmod>
 8013ad6:	461c      	mov	r4, r3
 8013ad8:	4613      	mov	r3, r2
 8013ada:	4323      	orrs	r3, r4
 8013adc:	d02f      	beq.n	8013b3e <f_open+0x55a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7fc feab 	bl	8010840 <clust2sect>
 8013aea:	66b8      	str	r0, [r7, #104]	; 0x68
 8013aec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d103      	bne.n	8013afa <f_open+0x516>
						res = FR_INT_ERR;
 8013af2:	2302      	movs	r3, #2
 8013af4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8013af8:	e021      	b.n	8013b3e <f_open+0x55a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	899b      	ldrh	r3, [r3, #12]
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	f04f 0400 	mov.w	r4, #0
 8013b04:	461a      	mov	r2, r3
 8013b06:	4623      	mov	r3, r4
 8013b08:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8013b0c:	f7ec fbe4 	bl	80002d8 <__aeabi_uldivmod>
 8013b10:	4603      	mov	r3, r0
 8013b12:	460c      	mov	r4, r1
 8013b14:	461a      	mov	r2, r3
 8013b16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013b18:	441a      	add	r2, r3
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	7858      	ldrb	r0, [r3, #1]
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	f7fc f997 	bl	800fe60 <disk_read>
 8013b32:	4603      	mov	r3, r0
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d002      	beq.n	8013b3e <f_open+0x55a>
 8013b38:	2301      	movs	r3, #1
 8013b3a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013b3e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d002      	beq.n	8013b4c <f_open+0x568>
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013b4c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3788      	adds	r7, #136	; 0x88
 8013b54:	46bd      	mov	sp, r7
 8013b56:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08013b5a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b5c:	b08d      	sub	sp, #52	; 0x34
 8013b5e:	af00      	add	r7, sp, #0
 8013b60:	60f8      	str	r0, [r7, #12]
 8013b62:	60b9      	str	r1, [r7, #8]
 8013b64:	607a      	str	r2, [r7, #4]
 8013b66:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	f107 0210 	add.w	r2, r7, #16
 8013b78:	4611      	mov	r1, r2
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7ff fcb6 	bl	80134ec <validate>
 8013b80:	4603      	mov	r3, r0
 8013b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d108      	bne.n	8013ba0 <f_write+0x46>
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013b94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d002      	beq.n	8013ba6 <f_write+0x4c>
 8013ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ba4:	e1ab      	b.n	8013efe <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013bac:	f003 0302 	and.w	r3, r3, #2
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d101      	bne.n	8013bb8 <f_write+0x5e>
 8013bb4:	2307      	movs	r3, #7
 8013bb6:	e1a2      	b.n	8013efe <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	2b04      	cmp	r3, #4
 8013bbe:	f000 818e 	beq.w	8013ede <f_write+0x384>
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013bc8:	461a      	mov	r2, r3
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	441a      	add	r2, r3
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	f080 8182 	bcs.w	8013ede <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013be0:	43db      	mvns	r3, r3
 8013be2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013be4:	e17b      	b.n	8013ede <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	899b      	ldrh	r3, [r3, #12]
 8013bf0:	b29b      	uxth	r3, r3
 8013bf2:	f04f 0400 	mov.w	r4, #0
 8013bf6:	461a      	mov	r2, r3
 8013bf8:	4623      	mov	r3, r4
 8013bfa:	f7ec fb6d 	bl	80002d8 <__aeabi_uldivmod>
 8013bfe:	461c      	mov	r4, r3
 8013c00:	4613      	mov	r3, r2
 8013c02:	4323      	orrs	r3, r4
 8013c04:	f040 810c 	bne.w	8013e20 <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	899b      	ldrh	r3, [r3, #12]
 8013c12:	b29b      	uxth	r3, r3
 8013c14:	f04f 0400 	mov.w	r4, #0
 8013c18:	461a      	mov	r2, r3
 8013c1a:	4623      	mov	r3, r4
 8013c1c:	f7ec fb5c 	bl	80002d8 <__aeabi_uldivmod>
 8013c20:	4603      	mov	r3, r0
 8013c22:	460c      	mov	r4, r1
 8013c24:	461a      	mov	r2, r3
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	895b      	ldrh	r3, [r3, #10]
 8013c2a:	3b01      	subs	r3, #1
 8013c2c:	4013      	ands	r3, r2
 8013c2e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013c30:	69bb      	ldr	r3, [r7, #24]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d148      	bne.n	8013cc8 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013c3c:	4323      	orrs	r3, r4
 8013c3e:	d10c      	bne.n	8013c5a <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	689b      	ldr	r3, [r3, #8]
 8013c44:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d11c      	bne.n	8013c86 <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	2100      	movs	r1, #0
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7fd fa9b 	bl	801118c <create_chain>
 8013c56:	62b8      	str	r0, [r7, #40]	; 0x28
 8013c58:	e015      	b.n	8013c86 <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d009      	beq.n	8013c76 <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013c68:	461a      	mov	r2, r3
 8013c6a:	4623      	mov	r3, r4
 8013c6c:	68f8      	ldr	r0, [r7, #12]
 8013c6e:	f7fd fb8e 	bl	801138e <clmt_clust>
 8013c72:	62b8      	str	r0, [r7, #40]	; 0x28
 8013c74:	e007      	b.n	8013c86 <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013c76:	68fa      	ldr	r2, [r7, #12]
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	4610      	mov	r0, r2
 8013c80:	f7fd fa84 	bl	801118c <create_chain>
 8013c84:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	f000 812d 	beq.w	8013ee8 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c90:	2b01      	cmp	r3, #1
 8013c92:	d105      	bne.n	8013ca0 <f_write+0x146>
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	2202      	movs	r2, #2
 8013c98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013c9c:	2302      	movs	r3, #2
 8013c9e:	e12e      	b.n	8013efe <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ca6:	d105      	bne.n	8013cb4 <f_write+0x15a>
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	2201      	movs	r2, #1
 8013cac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	e124      	b.n	8013efe <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cb8:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	689b      	ldr	r3, [r3, #8]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d102      	bne.n	8013cc8 <f_write+0x16e>
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cc6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013cce:	b25b      	sxtb	r3, r3
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	da1b      	bge.n	8013d0c <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013cd4:	693b      	ldr	r3, [r7, #16]
 8013cd6:	7858      	ldrb	r0, [r3, #1]
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	f7fc f8dc 	bl	800fea0 <disk_write>
 8013ce8:	4603      	mov	r3, r0
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d005      	beq.n	8013cfa <f_write+0x1a0>
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	2201      	movs	r2, #1
 8013cf2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	e101      	b.n	8013efe <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d04:	b2da      	uxtb	r2, r3
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013d0c:	693a      	ldr	r2, [r7, #16]
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d12:	4619      	mov	r1, r3
 8013d14:	4610      	mov	r0, r2
 8013d16:	f7fc fd93 	bl	8010840 <clust2sect>
 8013d1a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013d1c:	697b      	ldr	r3, [r7, #20]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d105      	bne.n	8013d2e <f_write+0x1d4>
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	2202      	movs	r2, #2
 8013d26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013d2a:	2302      	movs	r3, #2
 8013d2c:	e0e7      	b.n	8013efe <f_write+0x3a4>
			sect += csect;
 8013d2e:	697a      	ldr	r2, [r7, #20]
 8013d30:	69bb      	ldr	r3, [r7, #24]
 8013d32:	4413      	add	r3, r2
 8013d34:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	899b      	ldrh	r3, [r3, #12]
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d42:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013d44:	6a3b      	ldr	r3, [r7, #32]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d046      	beq.n	8013dd8 <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013d4a:	69ba      	ldr	r2, [r7, #24]
 8013d4c:	6a3b      	ldr	r3, [r7, #32]
 8013d4e:	4413      	add	r3, r2
 8013d50:	693a      	ldr	r2, [r7, #16]
 8013d52:	8952      	ldrh	r2, [r2, #10]
 8013d54:	4293      	cmp	r3, r2
 8013d56:	d905      	bls.n	8013d64 <f_write+0x20a>
					cc = fs->csize - csect;
 8013d58:	693b      	ldr	r3, [r7, #16]
 8013d5a:	895b      	ldrh	r3, [r3, #10]
 8013d5c:	461a      	mov	r2, r3
 8013d5e:	69bb      	ldr	r3, [r7, #24]
 8013d60:	1ad3      	subs	r3, r2, r3
 8013d62:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	7858      	ldrb	r0, [r3, #1]
 8013d68:	6a3b      	ldr	r3, [r7, #32]
 8013d6a:	697a      	ldr	r2, [r7, #20]
 8013d6c:	69f9      	ldr	r1, [r7, #28]
 8013d6e:	f7fc f897 	bl	800fea0 <disk_write>
 8013d72:	4603      	mov	r3, r0
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d005      	beq.n	8013d84 <f_write+0x22a>
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	2201      	movs	r2, #1
 8013d7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013d80:	2301      	movs	r3, #1
 8013d82:	e0bc      	b.n	8013efe <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	1ad3      	subs	r3, r2, r3
 8013d8c:	6a3a      	ldr	r2, [r7, #32]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d91a      	bls.n	8013dc8 <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d9c:	697b      	ldr	r3, [r7, #20]
 8013d9e:	1ad3      	subs	r3, r2, r3
 8013da0:	693a      	ldr	r2, [r7, #16]
 8013da2:	8992      	ldrh	r2, [r2, #12]
 8013da4:	fb02 f303 	mul.w	r3, r2, r3
 8013da8:	69fa      	ldr	r2, [r7, #28]
 8013daa:	18d1      	adds	r1, r2, r3
 8013dac:	693b      	ldr	r3, [r7, #16]
 8013dae:	899b      	ldrh	r3, [r3, #12]
 8013db0:	461a      	mov	r2, r3
 8013db2:	f7fc fa79 	bl	80102a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013dc0:	b2da      	uxtb	r2, r3
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	899b      	ldrh	r3, [r3, #12]
 8013dcc:	461a      	mov	r2, r3
 8013dce:	6a3b      	ldr	r3, [r7, #32]
 8013dd0:	fb02 f303 	mul.w	r3, r2, r3
 8013dd4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013dd6:	e058      	b.n	8013e8a <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ddc:	697a      	ldr	r2, [r7, #20]
 8013dde:	429a      	cmp	r2, r3
 8013de0:	d01b      	beq.n	8013e1a <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013dee:	42a2      	cmp	r2, r4
 8013df0:	bf08      	it	eq
 8013df2:	4299      	cmpeq	r1, r3
 8013df4:	d211      	bcs.n	8013e1a <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	7858      	ldrb	r0, [r3, #1]
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013e00:	2301      	movs	r3, #1
 8013e02:	697a      	ldr	r2, [r7, #20]
 8013e04:	f7fc f82c 	bl	800fe60 <disk_read>
 8013e08:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d005      	beq.n	8013e1a <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	2201      	movs	r2, #1
 8013e12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013e16:	2301      	movs	r3, #1
 8013e18:	e071      	b.n	8013efe <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	697a      	ldr	r2, [r7, #20]
 8013e1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	899b      	ldrh	r3, [r3, #12]
 8013e24:	4618      	mov	r0, r3
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013e2c:	693a      	ldr	r2, [r7, #16]
 8013e2e:	8992      	ldrh	r2, [r2, #12]
 8013e30:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e34:	fb02 f201 	mul.w	r2, r2, r1
 8013e38:	1a9b      	subs	r3, r3, r2
 8013e3a:	1ac3      	subs	r3, r0, r3
 8013e3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d901      	bls.n	8013e4a <f_write+0x2f0>
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	899b      	ldrh	r3, [r3, #12]
 8013e5a:	b29b      	uxth	r3, r3
 8013e5c:	f04f 0400 	mov.w	r4, #0
 8013e60:	461a      	mov	r2, r3
 8013e62:	4623      	mov	r3, r4
 8013e64:	f7ec fa38 	bl	80002d8 <__aeabi_uldivmod>
 8013e68:	461c      	mov	r4, r3
 8013e6a:	4613      	mov	r3, r2
 8013e6c:	442b      	add	r3, r5
 8013e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e70:	69f9      	ldr	r1, [r7, #28]
 8013e72:	4618      	mov	r0, r3
 8013e74:	f7fc fa18 	bl	80102a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013e7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013e82:	b2da      	uxtb	r2, r3
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013e8a:	69fa      	ldr	r2, [r7, #28]
 8013e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8e:	4413      	add	r3, r2
 8013e90:	61fb      	str	r3, [r7, #28]
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8013e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9a:	461d      	mov	r5, r3
 8013e9c:	f04f 0600 	mov.w	r6, #0
 8013ea0:	186b      	adds	r3, r5, r1
 8013ea2:	eb46 0402 	adc.w	r4, r6, r2
 8013ea6:	68fa      	ldr	r2, [r7, #12]
 8013ea8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013eb2:	68fa      	ldr	r2, [r7, #12]
 8013eb4:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 8013eb8:	4294      	cmp	r4, r2
 8013eba:	bf08      	it	eq
 8013ebc:	428b      	cmpeq	r3, r1
 8013ebe:	d201      	bcs.n	8013ec4 <f_write+0x36a>
 8013ec0:	460b      	mov	r3, r1
 8013ec2:	4614      	mov	r4, r2
 8013ec4:	68fa      	ldr	r2, [r7, #12]
 8013ec6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8013eca:	683b      	ldr	r3, [r7, #0]
 8013ecc:	681a      	ldr	r2, [r3, #0]
 8013ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed0:	441a      	add	r2, r3
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	601a      	str	r2, [r3, #0]
 8013ed6:	687a      	ldr	r2, [r7, #4]
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eda:	1ad3      	subs	r3, r2, r3
 8013edc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	f47f ae80 	bne.w	8013be6 <f_write+0x8c>
 8013ee6:	e000      	b.n	8013eea <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013ee8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ef4:	b2da      	uxtb	r2, r3
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8013efc:	2300      	movs	r3, #0
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3734      	adds	r7, #52	; 0x34
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013f06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013f06:	b590      	push	{r4, r7, lr}
 8013f08:	b09b      	sub	sp, #108	; 0x6c
 8013f0a:	af00      	add	r7, sp, #0
 8013f0c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013f14:	4611      	mov	r1, r2
 8013f16:	4618      	mov	r0, r3
 8013f18:	f7ff fae8 	bl	80134ec <validate>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8013f22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	f040 8109 	bne.w	801413e <f_sync+0x238>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	f000 8101 	beq.w	801413e <f_sync+0x238>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013f42:	b25b      	sxtb	r3, r3
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	da17      	bge.n	8013f78 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013f48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f4a:	7858      	ldrb	r0, [r3, #1]
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f56:	2301      	movs	r3, #1
 8013f58:	f7fb ffa2 	bl	800fea0 <disk_write>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d001      	beq.n	8013f66 <f_sync+0x60>
 8013f62:	2301      	movs	r3, #1
 8013f64:	e0ed      	b.n	8014142 <f_sync+0x23c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f70:	b2da      	uxtb	r2, r3
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013f78:	f7fb fdac 	bl	800fad4 <get_fattime>
 8013f7c:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8013f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f80:	781b      	ldrb	r3, [r3, #0]
 8013f82:	2b04      	cmp	r3, #4
 8013f84:	f040 8090 	bne.w	80140a8 <f_sync+0x1a2>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7fc ffea 	bl	8010f64 <fill_first_frag>
 8013f90:	4603      	mov	r3, r0
 8013f92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8013f96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d10a      	bne.n	8013fb4 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8013fa8:	4619      	mov	r1, r3
 8013faa:	f7fd f80a 	bl	8010fc2 <fill_last_frag>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 8013fb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	f040 80c0 	bne.w	801413e <f_sync+0x238>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8013fbe:	687a      	ldr	r2, [r7, #4]
 8013fc0:	f107 0308 	add.w	r3, r7, #8
 8013fc4:	4611      	mov	r1, r2
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7fd ff50 	bl	8011e6c <load_obj_dir>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 8013fd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	f040 80b1 	bne.w	801413e <f_sync+0x238>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8013fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fde:	695b      	ldr	r3, [r3, #20]
 8013fe0:	3304      	adds	r3, #4
 8013fe2:	781a      	ldrb	r2, [r3, #0]
 8013fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fe6:	695b      	ldr	r3, [r3, #20]
 8013fe8:	3304      	adds	r3, #4
 8013fea:	f042 0220 	orr.w	r2, r2, #32
 8013fee:	b2d2      	uxtb	r2, r2
 8013ff0:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	79da      	ldrb	r2, [r3, #7]
 8013ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ff8:	695b      	ldr	r3, [r3, #20]
 8013ffa:	3321      	adds	r3, #33	; 0x21
 8013ffc:	f042 0201 	orr.w	r2, r2, #1
 8014000:	b2d2      	uxtb	r2, r2
 8014002:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8014004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014006:	695b      	ldr	r3, [r3, #20]
 8014008:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	689b      	ldr	r3, [r3, #8]
 8014010:	4619      	mov	r1, r3
 8014012:	4610      	mov	r0, r2
 8014014:	f7fc f895 	bl	8010142 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8014018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801401a:	695b      	ldr	r3, [r3, #20]
 801401c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014026:	461a      	mov	r2, r3
 8014028:	4623      	mov	r3, r4
 801402a:	4608      	mov	r0, r1
 801402c:	f7fc f8b5 	bl	801019a <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8014030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014032:	695b      	ldr	r3, [r3, #20]
 8014034:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801403e:	461a      	mov	r2, r3
 8014040:	4623      	mov	r3, r4
 8014042:	4608      	mov	r0, r1
 8014044:	f7fc f8a9 	bl	801019a <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8014048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801404a:	695b      	ldr	r3, [r3, #20]
 801404c:	330c      	adds	r3, #12
 801404e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014050:	4618      	mov	r0, r3
 8014052:	f7fc f876 	bl	8010142 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8014056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014058:	695b      	ldr	r3, [r3, #20]
 801405a:	3315      	adds	r3, #21
 801405c:	2200      	movs	r2, #0
 801405e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8014060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014062:	695b      	ldr	r3, [r3, #20]
 8014064:	3310      	adds	r3, #16
 8014066:	2100      	movs	r1, #0
 8014068:	4618      	mov	r0, r3
 801406a:	f7fc f86a 	bl	8010142 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 801406e:	f107 0308 	add.w	r3, r7, #8
 8014072:	4618      	mov	r0, r3
 8014074:	f7fd ff37 	bl	8011ee6 <store_xdir>
 8014078:	4603      	mov	r3, r0
 801407a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801407e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014082:	2b00      	cmp	r3, #0
 8014084:	d15b      	bne.n	801413e <f_sync+0x238>
							res = sync_fs(fs);
 8014086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014088:	4618      	mov	r0, r3
 801408a:	f7fc fb69 	bl	8010760 <sync_fs>
 801408e:	4603      	mov	r3, r0
 8014090:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801409a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801409e:	b2da      	uxtb	r2, r3
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80140a6:	e04a      	b.n	801413e <f_sync+0x238>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80140a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80140ae:	4619      	mov	r1, r3
 80140b0:	4610      	mov	r0, r2
 80140b2:	f7fc fb27 	bl	8010704 <move_window>
 80140b6:	4603      	mov	r3, r0
 80140b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 80140bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d13c      	bne.n	801413e <f_sync+0x238>
					dir = fp->dir_ptr;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140c8:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80140ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140cc:	330b      	adds	r3, #11
 80140ce:	781a      	ldrb	r2, [r3, #0]
 80140d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140d2:	330b      	adds	r3, #11
 80140d4:	f042 0220 	orr.w	r2, r2, #32
 80140d8:	b2d2      	uxtb	r2, r2
 80140da:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	6818      	ldr	r0, [r3, #0]
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	689b      	ldr	r3, [r3, #8]
 80140e4:	461a      	mov	r2, r3
 80140e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80140e8:	f7fd fb8d 	bl	8011806 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80140ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140ee:	f103 021c 	add.w	r2, r3, #28
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80140f8:	4619      	mov	r1, r3
 80140fa:	4610      	mov	r0, r2
 80140fc:	f7fc f821 	bl	8010142 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014102:	3316      	adds	r3, #22
 8014104:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014106:	4618      	mov	r0, r3
 8014108:	f7fc f81b 	bl	8010142 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801410c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801410e:	3312      	adds	r3, #18
 8014110:	2100      	movs	r1, #0
 8014112:	4618      	mov	r0, r3
 8014114:	f7fb fffa 	bl	801010c <st_word>
					fs->wflag = 1;
 8014118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801411a:	2201      	movs	r2, #1
 801411c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801411e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014120:	4618      	mov	r0, r3
 8014122:	f7fc fb1d 	bl	8010760 <sync_fs>
 8014126:	4603      	mov	r3, r0
 8014128:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014136:	b2da      	uxtb	r2, r3
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801413e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8014142:	4618      	mov	r0, r3
 8014144:	376c      	adds	r7, #108	; 0x6c
 8014146:	46bd      	mov	sp, r7
 8014148:	bd90      	pop	{r4, r7, pc}

0801414a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801414a:	b580      	push	{r7, lr}
 801414c:	b084      	sub	sp, #16
 801414e:	af00      	add	r7, sp, #0
 8014150:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014152:	6878      	ldr	r0, [r7, #4]
 8014154:	f7ff fed7 	bl	8013f06 <f_sync>
 8014158:	4603      	mov	r3, r0
 801415a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801415c:	7bfb      	ldrb	r3, [r7, #15]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d118      	bne.n	8014194 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f107 0208 	add.w	r2, r7, #8
 8014168:	4611      	mov	r1, r2
 801416a:	4618      	mov	r0, r3
 801416c:	f7ff f9be 	bl	80134ec <validate>
 8014170:	4603      	mov	r3, r0
 8014172:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014174:	7bfb      	ldrb	r3, [r7, #15]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d10c      	bne.n	8014194 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801417e:	4618      	mov	r0, r3
 8014180:	f7fc fa1c 	bl	80105bc <dec_lock>
 8014184:	4603      	mov	r3, r0
 8014186:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014188:	7bfb      	ldrb	r3, [r7, #15]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d102      	bne.n	8014194 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2200      	movs	r2, #0
 8014192:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014194:	7bfb      	ldrb	r3, [r7, #15]
}
 8014196:	4618      	mov	r0, r3
 8014198:	3710      	adds	r7, #16
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
	...

080141a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80141a0:	b480      	push	{r7}
 80141a2:	b087      	sub	sp, #28
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	60f8      	str	r0, [r7, #12]
 80141a8:	60b9      	str	r1, [r7, #8]
 80141aa:	4613      	mov	r3, r2
 80141ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80141ae:	2301      	movs	r3, #1
 80141b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80141b2:	2300      	movs	r3, #0
 80141b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80141b6:	4b1f      	ldr	r3, [pc, #124]	; (8014234 <FATFS_LinkDriverEx+0x94>)
 80141b8:	7a5b      	ldrb	r3, [r3, #9]
 80141ba:	b2db      	uxtb	r3, r3
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d131      	bne.n	8014224 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80141c0:	4b1c      	ldr	r3, [pc, #112]	; (8014234 <FATFS_LinkDriverEx+0x94>)
 80141c2:	7a5b      	ldrb	r3, [r3, #9]
 80141c4:	b2db      	uxtb	r3, r3
 80141c6:	461a      	mov	r2, r3
 80141c8:	4b1a      	ldr	r3, [pc, #104]	; (8014234 <FATFS_LinkDriverEx+0x94>)
 80141ca:	2100      	movs	r1, #0
 80141cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80141ce:	4b19      	ldr	r3, [pc, #100]	; (8014234 <FATFS_LinkDriverEx+0x94>)
 80141d0:	7a5b      	ldrb	r3, [r3, #9]
 80141d2:	b2db      	uxtb	r3, r3
 80141d4:	4a17      	ldr	r2, [pc, #92]	; (8014234 <FATFS_LinkDriverEx+0x94>)
 80141d6:	009b      	lsls	r3, r3, #2
 80141d8:	4413      	add	r3, r2
 80141da:	68fa      	ldr	r2, [r7, #12]
 80141dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80141de:	4b15      	ldr	r3, [pc, #84]	; (8014234 <FATFS_LinkDriverEx+0x94>)
 80141e0:	7a5b      	ldrb	r3, [r3, #9]
 80141e2:	b2db      	uxtb	r3, r3
 80141e4:	461a      	mov	r2, r3
 80141e6:	4b13      	ldr	r3, [pc, #76]	; (8014234 <FATFS_LinkDriverEx+0x94>)
 80141e8:	4413      	add	r3, r2
 80141ea:	79fa      	ldrb	r2, [r7, #7]
 80141ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80141ee:	4b11      	ldr	r3, [pc, #68]	; (8014234 <FATFS_LinkDriverEx+0x94>)
 80141f0:	7a5b      	ldrb	r3, [r3, #9]
 80141f2:	b2db      	uxtb	r3, r3
 80141f4:	1c5a      	adds	r2, r3, #1
 80141f6:	b2d1      	uxtb	r1, r2
 80141f8:	4a0e      	ldr	r2, [pc, #56]	; (8014234 <FATFS_LinkDriverEx+0x94>)
 80141fa:	7251      	strb	r1, [r2, #9]
 80141fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80141fe:	7dbb      	ldrb	r3, [r7, #22]
 8014200:	3330      	adds	r3, #48	; 0x30
 8014202:	b2da      	uxtb	r2, r3
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	3301      	adds	r3, #1
 801420c:	223a      	movs	r2, #58	; 0x3a
 801420e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	3302      	adds	r3, #2
 8014214:	222f      	movs	r2, #47	; 0x2f
 8014216:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	3303      	adds	r3, #3
 801421c:	2200      	movs	r2, #0
 801421e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014220:	2300      	movs	r3, #0
 8014222:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014224:	7dfb      	ldrb	r3, [r7, #23]
}
 8014226:	4618      	mov	r0, r3
 8014228:	371c      	adds	r7, #28
 801422a:	46bd      	mov	sp, r7
 801422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014230:	4770      	bx	lr
 8014232:	bf00      	nop
 8014234:	24000578 	.word	0x24000578

08014238 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b082      	sub	sp, #8
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014242:	2200      	movs	r2, #0
 8014244:	6839      	ldr	r1, [r7, #0]
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f7ff ffaa 	bl	80141a0 <FATFS_LinkDriverEx>
 801424c:	4603      	mov	r3, r0
}
 801424e:	4618      	mov	r0, r3
 8014250:	3708      	adds	r7, #8
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}
	...

08014258 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8014258:	b480      	push	{r7}
 801425a:	b085      	sub	sp, #20
 801425c:	af00      	add	r7, sp, #0
 801425e:	4603      	mov	r3, r0
 8014260:	6039      	str	r1, [r7, #0]
 8014262:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8014264:	88fb      	ldrh	r3, [r7, #6]
 8014266:	2b7f      	cmp	r3, #127	; 0x7f
 8014268:	d802      	bhi.n	8014270 <ff_convert+0x18>
		c = chr;
 801426a:	88fb      	ldrh	r3, [r7, #6]
 801426c:	81fb      	strh	r3, [r7, #14]
 801426e:	e025      	b.n	80142bc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014270:	683b      	ldr	r3, [r7, #0]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d00b      	beq.n	801428e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8014276:	88fb      	ldrh	r3, [r7, #6]
 8014278:	2bff      	cmp	r3, #255	; 0xff
 801427a:	d805      	bhi.n	8014288 <ff_convert+0x30>
 801427c:	88fb      	ldrh	r3, [r7, #6]
 801427e:	3b80      	subs	r3, #128	; 0x80
 8014280:	4a12      	ldr	r2, [pc, #72]	; (80142cc <ff_convert+0x74>)
 8014282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014286:	e000      	b.n	801428a <ff_convert+0x32>
 8014288:	2300      	movs	r3, #0
 801428a:	81fb      	strh	r3, [r7, #14]
 801428c:	e016      	b.n	80142bc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801428e:	2300      	movs	r3, #0
 8014290:	81fb      	strh	r3, [r7, #14]
 8014292:	e009      	b.n	80142a8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8014294:	89fb      	ldrh	r3, [r7, #14]
 8014296:	4a0d      	ldr	r2, [pc, #52]	; (80142cc <ff_convert+0x74>)
 8014298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801429c:	88fa      	ldrh	r2, [r7, #6]
 801429e:	429a      	cmp	r2, r3
 80142a0:	d006      	beq.n	80142b0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80142a2:	89fb      	ldrh	r3, [r7, #14]
 80142a4:	3301      	adds	r3, #1
 80142a6:	81fb      	strh	r3, [r7, #14]
 80142a8:	89fb      	ldrh	r3, [r7, #14]
 80142aa:	2b7f      	cmp	r3, #127	; 0x7f
 80142ac:	d9f2      	bls.n	8014294 <ff_convert+0x3c>
 80142ae:	e000      	b.n	80142b2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80142b0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80142b2:	89fb      	ldrh	r3, [r7, #14]
 80142b4:	3380      	adds	r3, #128	; 0x80
 80142b6:	b29b      	uxth	r3, r3
 80142b8:	b2db      	uxtb	r3, r3
 80142ba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80142bc:	89fb      	ldrh	r3, [r7, #14]
}
 80142be:	4618      	mov	r0, r3
 80142c0:	3714      	adds	r7, #20
 80142c2:	46bd      	mov	sp, r7
 80142c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c8:	4770      	bx	lr
 80142ca:	bf00      	nop
 80142cc:	080145f8 	.word	0x080145f8

080142d0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80142d0:	b480      	push	{r7}
 80142d2:	b087      	sub	sp, #28
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	4603      	mov	r3, r0
 80142d8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80142da:	88fb      	ldrh	r3, [r7, #6]
 80142dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80142e0:	d201      	bcs.n	80142e6 <ff_wtoupper+0x16>
 80142e2:	4b3e      	ldr	r3, [pc, #248]	; (80143dc <ff_wtoupper+0x10c>)
 80142e4:	e000      	b.n	80142e8 <ff_wtoupper+0x18>
 80142e6:	4b3e      	ldr	r3, [pc, #248]	; (80143e0 <ff_wtoupper+0x110>)
 80142e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80142ea:	697b      	ldr	r3, [r7, #20]
 80142ec:	1c9a      	adds	r2, r3, #2
 80142ee:	617a      	str	r2, [r7, #20]
 80142f0:	881b      	ldrh	r3, [r3, #0]
 80142f2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80142f4:	8a7b      	ldrh	r3, [r7, #18]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d068      	beq.n	80143cc <ff_wtoupper+0xfc>
 80142fa:	88fa      	ldrh	r2, [r7, #6]
 80142fc:	8a7b      	ldrh	r3, [r7, #18]
 80142fe:	429a      	cmp	r2, r3
 8014300:	d364      	bcc.n	80143cc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	1c9a      	adds	r2, r3, #2
 8014306:	617a      	str	r2, [r7, #20]
 8014308:	881b      	ldrh	r3, [r3, #0]
 801430a:	823b      	strh	r3, [r7, #16]
 801430c:	8a3b      	ldrh	r3, [r7, #16]
 801430e:	0a1b      	lsrs	r3, r3, #8
 8014310:	81fb      	strh	r3, [r7, #14]
 8014312:	8a3b      	ldrh	r3, [r7, #16]
 8014314:	b2db      	uxtb	r3, r3
 8014316:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8014318:	88fa      	ldrh	r2, [r7, #6]
 801431a:	8a79      	ldrh	r1, [r7, #18]
 801431c:	8a3b      	ldrh	r3, [r7, #16]
 801431e:	440b      	add	r3, r1
 8014320:	429a      	cmp	r2, r3
 8014322:	da49      	bge.n	80143b8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8014324:	89fb      	ldrh	r3, [r7, #14]
 8014326:	2b08      	cmp	r3, #8
 8014328:	d84f      	bhi.n	80143ca <ff_wtoupper+0xfa>
 801432a:	a201      	add	r2, pc, #4	; (adr r2, 8014330 <ff_wtoupper+0x60>)
 801432c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014330:	08014355 	.word	0x08014355
 8014334:	08014367 	.word	0x08014367
 8014338:	0801437d 	.word	0x0801437d
 801433c:	08014385 	.word	0x08014385
 8014340:	0801438d 	.word	0x0801438d
 8014344:	08014395 	.word	0x08014395
 8014348:	0801439d 	.word	0x0801439d
 801434c:	080143a5 	.word	0x080143a5
 8014350:	080143ad 	.word	0x080143ad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8014354:	88fa      	ldrh	r2, [r7, #6]
 8014356:	8a7b      	ldrh	r3, [r7, #18]
 8014358:	1ad3      	subs	r3, r2, r3
 801435a:	005b      	lsls	r3, r3, #1
 801435c:	697a      	ldr	r2, [r7, #20]
 801435e:	4413      	add	r3, r2
 8014360:	881b      	ldrh	r3, [r3, #0]
 8014362:	80fb      	strh	r3, [r7, #6]
 8014364:	e027      	b.n	80143b6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014366:	88fa      	ldrh	r2, [r7, #6]
 8014368:	8a7b      	ldrh	r3, [r7, #18]
 801436a:	1ad3      	subs	r3, r2, r3
 801436c:	b29b      	uxth	r3, r3
 801436e:	f003 0301 	and.w	r3, r3, #1
 8014372:	b29b      	uxth	r3, r3
 8014374:	88fa      	ldrh	r2, [r7, #6]
 8014376:	1ad3      	subs	r3, r2, r3
 8014378:	80fb      	strh	r3, [r7, #6]
 801437a:	e01c      	b.n	80143b6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801437c:	88fb      	ldrh	r3, [r7, #6]
 801437e:	3b10      	subs	r3, #16
 8014380:	80fb      	strh	r3, [r7, #6]
 8014382:	e018      	b.n	80143b6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014384:	88fb      	ldrh	r3, [r7, #6]
 8014386:	3b20      	subs	r3, #32
 8014388:	80fb      	strh	r3, [r7, #6]
 801438a:	e014      	b.n	80143b6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801438c:	88fb      	ldrh	r3, [r7, #6]
 801438e:	3b30      	subs	r3, #48	; 0x30
 8014390:	80fb      	strh	r3, [r7, #6]
 8014392:	e010      	b.n	80143b6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014394:	88fb      	ldrh	r3, [r7, #6]
 8014396:	3b1a      	subs	r3, #26
 8014398:	80fb      	strh	r3, [r7, #6]
 801439a:	e00c      	b.n	80143b6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801439c:	88fb      	ldrh	r3, [r7, #6]
 801439e:	3308      	adds	r3, #8
 80143a0:	80fb      	strh	r3, [r7, #6]
 80143a2:	e008      	b.n	80143b6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80143a4:	88fb      	ldrh	r3, [r7, #6]
 80143a6:	3b50      	subs	r3, #80	; 0x50
 80143a8:	80fb      	strh	r3, [r7, #6]
 80143aa:	e004      	b.n	80143b6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80143ac:	88fb      	ldrh	r3, [r7, #6]
 80143ae:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80143b2:	80fb      	strh	r3, [r7, #6]
 80143b4:	bf00      	nop
			}
			break;
 80143b6:	e008      	b.n	80143ca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80143b8:	89fb      	ldrh	r3, [r7, #14]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d195      	bne.n	80142ea <ff_wtoupper+0x1a>
 80143be:	8a3b      	ldrh	r3, [r7, #16]
 80143c0:	005b      	lsls	r3, r3, #1
 80143c2:	697a      	ldr	r2, [r7, #20]
 80143c4:	4413      	add	r3, r2
 80143c6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80143c8:	e78f      	b.n	80142ea <ff_wtoupper+0x1a>
			break;
 80143ca:	bf00      	nop
	}

	return chr;
 80143cc:	88fb      	ldrh	r3, [r7, #6]
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	371c      	adds	r7, #28
 80143d2:	46bd      	mov	sp, r7
 80143d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d8:	4770      	bx	lr
 80143da:	bf00      	nop
 80143dc:	080146f8 	.word	0x080146f8
 80143e0:	080148ec 	.word	0x080148ec

080143e4 <__libc_init_array>:
 80143e4:	b570      	push	{r4, r5, r6, lr}
 80143e6:	4e0d      	ldr	r6, [pc, #52]	; (801441c <__libc_init_array+0x38>)
 80143e8:	4c0d      	ldr	r4, [pc, #52]	; (8014420 <__libc_init_array+0x3c>)
 80143ea:	1ba4      	subs	r4, r4, r6
 80143ec:	10a4      	asrs	r4, r4, #2
 80143ee:	2500      	movs	r5, #0
 80143f0:	42a5      	cmp	r5, r4
 80143f2:	d109      	bne.n	8014408 <__libc_init_array+0x24>
 80143f4:	4e0b      	ldr	r6, [pc, #44]	; (8014424 <__libc_init_array+0x40>)
 80143f6:	4c0c      	ldr	r4, [pc, #48]	; (8014428 <__libc_init_array+0x44>)
 80143f8:	f000 f82c 	bl	8014454 <_init>
 80143fc:	1ba4      	subs	r4, r4, r6
 80143fe:	10a4      	asrs	r4, r4, #2
 8014400:	2500      	movs	r5, #0
 8014402:	42a5      	cmp	r5, r4
 8014404:	d105      	bne.n	8014412 <__libc_init_array+0x2e>
 8014406:	bd70      	pop	{r4, r5, r6, pc}
 8014408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801440c:	4798      	blx	r3
 801440e:	3501      	adds	r5, #1
 8014410:	e7ee      	b.n	80143f0 <__libc_init_array+0xc>
 8014412:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014416:	4798      	blx	r3
 8014418:	3501      	adds	r5, #1
 801441a:	e7f2      	b.n	8014402 <__libc_init_array+0x1e>
 801441c:	080149b0 	.word	0x080149b0
 8014420:	080149b0 	.word	0x080149b0
 8014424:	080149b0 	.word	0x080149b0
 8014428:	080149b4 	.word	0x080149b4

0801442c <memcpy>:
 801442c:	b510      	push	{r4, lr}
 801442e:	1e43      	subs	r3, r0, #1
 8014430:	440a      	add	r2, r1
 8014432:	4291      	cmp	r1, r2
 8014434:	d100      	bne.n	8014438 <memcpy+0xc>
 8014436:	bd10      	pop	{r4, pc}
 8014438:	f811 4b01 	ldrb.w	r4, [r1], #1
 801443c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014440:	e7f7      	b.n	8014432 <memcpy+0x6>

08014442 <memset>:
 8014442:	4402      	add	r2, r0
 8014444:	4603      	mov	r3, r0
 8014446:	4293      	cmp	r3, r2
 8014448:	d100      	bne.n	801444c <memset+0xa>
 801444a:	4770      	bx	lr
 801444c:	f803 1b01 	strb.w	r1, [r3], #1
 8014450:	e7f9      	b.n	8014446 <memset+0x4>
	...

08014454 <_init>:
 8014454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014456:	bf00      	nop
 8014458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801445a:	bc08      	pop	{r3}
 801445c:	469e      	mov	lr, r3
 801445e:	4770      	bx	lr

08014460 <_fini>:
 8014460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014462:	bf00      	nop
 8014464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014466:	bc08      	pop	{r3}
 8014468:	469e      	mov	lr, r3
 801446a:	4770      	bx	lr
